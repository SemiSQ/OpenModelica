(*
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet, Department of
Computer and Information Science, PELAB

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

* Neither the name of Linköpings universitet nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

(**
 ** file:	 ClassLoader.rml
 ** module:      ClassLoader
 ** description: Loading of classes from $MODELICAPATH.
 **
 ** RCS: $Id$
 **
 ** This module loads classes from $MODELICAPATH. It exports two
 ** relations: 
 ** load_class relation 
 ** load_file relation
 ** 
 **)

module ClassLoader:
  with "Absyn.rml"

  relation load_class: (Absyn.Path, string) => (Absyn.Program) 
  relation load_file:(string) => (Absyn.Program) 

end

with "System.rml"
with "Lookup.rml"
with "Interactive.rml"
with "Util.rml"
with "Parser.rml"
with "Print.rml"
with "Env.rml"
with "Dump.rml"
with "Debug.rml"

(** relation: load_class
 ** This relation takes a 'Path' and the $MODELICAPATH as a string
 ** and tries to load the class from the path.
 ** If the classname is qualified, the complete package is loaded. 
 ** E.g. load_class(Modelica.SIunits.Voltage) -> whole Modelica package loaded.
 **)
relation load_class: (Absyn.Path, string) => (Absyn.Program) =

	(* Simple names: Just load the file if it can be found in $MODELICAPATH *)
  rule System.group_delimiter => gd &	
	System.strtok(mp,gd) => mps &
	load_class_from_mps(classname,mps) => p
	-------------------------------------
	load_class(Absyn.IDENT(classname),mp) => p

	(* Qualified names: First check if it is defined in a file pack.mo *)
  rule	System.group_delimiter => gd &	
	System.strtok(mp,gd) => mps &
	load_class_from_mps(pack,mps) => p
	-------------------------------------
	load_class(Absyn.QUALIFIED(pack,rest),mp) => p

	(* Qualified names: Else, load the complete package and then check that *)
	(* the package contains the file *) 
  rule	System.group_delimiter => gd &	
	System.strtok(mp,gd) => mps &
	load_complete_package_from_mps(pack,mps,Absyn.TOP,Absyn.PROGRAM([],Absyn.TOP)) => p &
	Interactive.get_pathed_class_in_program(path,p)=> _
	-------------------------------------
	load_class(path as Absyn.QUALIFIED(pack,rest),mp) => p

  rule	Debug.fprint("failtrace", "load_class failed\n")
	-------------------
	load_class(_,_) => fail
end

(** relation: exist_regular_file
 **
 ** Checks if a file exists
 **)
relation exist_regular_file: (string) => () =

  rule	System.regular_file_exist filename => 0 
	----------------------------
	exist_regular_file(filename) 
end

(** relation: exist_directory_file
 **
 ** Checks if a directory exist
 **)
relation exist_directory_file: (string) => () =

  rule	System.directory_exist filename => 0 
	----------------------------
	exist_directory_file(filename) 
end


(** relation: load_class_from_mps
 **
 ** Loads a class or classes from a set of paths in modelicapath
 **)
relation load_class_from_mps: (Absyn.Ident, string list) => Absyn.Program =
	
  rule	load_class_from_mp(class,mp) => p
	----------------------------------
	load_class_from_mps(class,mp::mps) => p

  rule	load_class_from_mps(class,mps) => p
	----------------------------------
	load_class_from_mps(class,_::mps) => p

end

(** relation: load_class_from_mp
 ** 
 ** This relation loads a modelica class "className" from the file path 
 ** "<mp>/className.mo" or it loads complete package from 
 ** "<mp>/className/package.mo"
 **)
relation load_class_from_mp: (Absyn.Ident, string) => Absyn.Program =
	
  rule  System.trim(mp'," \"\t") => mp &
        System.path_delimiter => pd &
	string_append(class,".mo") => classfile &
	Util.string_append_list([mp,pd,classfile])=> classfile' &
	exist_regular_file(classfile') &
	print "parsing " & print classfile' & print "\n" &
	Parser.parse(classfile') => p
	---------------------------
	load_class_from_mp(class,mp') => p

  rule  System.trim(mp'," \"\t") => mp &
        System.path_delimiter => pd &
	Util.string_append_list([mp,pd,class]) => dirfile &
	Util.string_append_list([dirfile, pd, "package.mo"]) => packfile &
	exist_directory_file dirfile &
	exist_regular_file packfile &
	Print.print_buf "Class is package stored in a directory, loading whole package(incl. subdir)\n" &
	load_complete_package_from_mp(class,mp,Absyn.TOP,
				      Absyn.PROGRAM([],Absyn.TOP)) => p 
	--------------------------------------
	load_class_from_mp(class,mp') => p
	
  rule	Debug.fprint("failtrace", "load_class_from_mp failed\n" )
	--------------------
	load_class_from_mp(_,_) => fail
end

(** relation: load_complete_package_from_mps
 **
 ** Loads a whole package from the ModelicaPaths defined in MODELICAPATH
 **)
relation load_complete_package_from_mps: (Absyn.Ident, string list, Absyn.Within, Absyn.Program) => Absyn.Program =

  rule	load_complete_package_from_mp(pack,mp,within ,oldp) => p
	-------------------------
	load_complete_package_from_mps(pack,mp::_,within,oldp) => p

  rule	load_complete_package_from_mps(pack,mps,within ,oldp) => p
	-------------------------
	load_complete_package_from_mps(pack,_::mps,within,oldp) => p

end

(** relation: load_complete_package_from_mp
 ** 
 ** Loads a whole package from the ModelicaPaths defined in MODELICAPATH
 **)
relation load_complete_package_from_mp: (Absyn.Ident, string, Absyn.Within, Absyn.Program) => Absyn.Program =
	
  rule System.path_delimiter => pd &	
	Util.string_append_list([mp,pd,pack]) => mp' &
	Util.string_append_list([mp', pd, "package.mo"]) => packagefile &
	exist_regular_file(packagefile) &
	print "parsing " & print packagefile & print "\n" &
	Parser.parse(packagefile) => Absyn.PROGRAM(p1,w1) &
	Print.print_buf("loading ") & Print.print_buf(packagefile) & Print.print_buf "\n" &
	Interactive.update_program(Absyn.PROGRAM(p1,w1),Absyn.PROGRAM(oldc,Absyn.TOP)) => p1' &
	System.sub_directories(mp') => subdirs &
	Util.string_delimit_list(subdirs, ", ") => subdirstr &
	print "subdirs =" & print subdirstr & print "\n" &
	load_complete_subdirs(subdirs,pack,mp',within,p1') => p2 &
	load_complete_subfiles(pack,mp',within,p2) => p 
	------------------------------
	load_complete_package_from_mp(pack,mp,within as Absyn.TOP,Absyn.PROGRAM(oldc,_)) => p

  rule	System.path_delimiter => pd &
	Util.string_append_list([mp,pd,pack]) => mp' &
	Util.string_append_list([mp',pd, "package.mo"]) => packagefile &
	exist_regular_file(packagefile) &
	print "parsing " & print packagefile & print "\n" &
	Parser.parse(packagefile) => Absyn.PROGRAM(p1,w1) &
	Print.print_buf("loading ") & Print.print_buf(packagefile) & Print.print_buf "\n" &
	Interactive.update_program(Absyn.PROGRAM(p1,Absyn.WITHIN(wpath)),Absyn.PROGRAM(oldc,Absyn.TOP)) => p1' &
	System.sub_directories(mp') => subdirs &
	Util.string_delimit_list(subdirs, ", ") => subdirstr &
	print "subdirs =" & print subdirstr & print "\n" &
	load_complete_subdirs(subdirs,pack,mp',within,p1') => p2 &
	Absyn.join_paths(wpath,Absyn.IDENT(pack))=> wpath' &
	load_complete_subfiles(pack,mp',within,p2) => p
	------------------------------
	load_complete_package_from_mp(pack,mp,within as Absyn.WITHIN(wpath),Absyn.PROGRAM(oldc,_)) => p

  axiom	load_complete_package_from_mp(_,_,_,_) => fail
end

(** relation: load_complete_subdirs
 ** 
 ** Loads all classes present in a subdirectory
 **)
relation load_complete_subdirs: (string list, Absyn.Ident, string, 
				 Absyn.Within, Absyn.Program) 
	  => Absyn.Program =
	  
  axiom	load_complete_subdirs([],_,_,w,Absyn.PROGRAM(oldcls,w2)) => Absyn.PROGRAM(oldcls,w2)
	
  rule	Absyn.join_paths(pack2,Absyn.IDENT(pack1)) => pack' &
	load_complete_package_from_mp(pack,mp,Absyn.WITHIN(pack'),oldp) => p &
	load_complete_subdirs(packs,pack1,mp,within,p) => p' 
	---------------------------------------------
 	load_complete_subdirs(pack::packs,pack1,mp,within as Absyn.WITHIN(pack2),oldp) => p'
 
  rule	Absyn.join_paths(Absyn.IDENT(pack1),Absyn.IDENT(pack)) => pack' &
	load_complete_package_from_mp(pack,mp,Absyn.WITHIN(Absyn.IDENT(pack1)),oldp) => p &
	load_complete_subdirs(packs,pack1,mp,within,p) => p' 
	---------------------------------------------
 	load_complete_subdirs(pack::packs,pack1,mp,within as Absyn.TOP,oldp) => p'

  rule	load_complete_subdirs(packs,pack1,mp,within,p) => p' 
	---------------------------------------------
 	load_complete_subdirs(pack::packs,pack1,mp,within,p) => p'


  rule	print "load_complete_subdirs failed\n"
	----------------
	load_complete_subdirs(_,_,_,_,_) => fail
end

(** relation: load_complete_subfiles
 ** 
 ** This relation loads all modelicafiles (.mo) from a subdir package.
 **)
relation load_complete_subfiles: (Absyn.Ident, string, Absyn.Within, Absyn.Program) 
	  => Absyn.Program =

  rule	(* Here *.mo files in same directory as package.mo should be loaded as sub-packages*)
	System.mo_files(mp)=> mofiles &
	Absyn.join_paths(within,Absyn.IDENT(pack)) => within' &
	load_subpackage_files(mofiles,mp,Absyn.WITHIN(within'),oldp) => p 
	------------------------------------------
	load_complete_subfiles(pack,mp,Absyn.WITHIN(within),oldp) => p

  rule	(* Here *.mo files in same directory as package.mo should be loaded as sub-packages*)
	System.mo_files(mp)=> mofiles &
	load_subpackage_files(mofiles,mp,Absyn.WITHIN(Absyn.IDENT(pack)),oldp) => p
	------------------------------------------
	load_complete_subfiles(pack,mp,Absyn.TOP,oldp) => p

  rule	print "load_complete_subfiles failed\n"
	------------------------------------------
	load_complete_subfiles(_,_,_,_) => fail

end

(** relation: load_subpackage_files
 **
 ** Loads all classes from a subpackage
 **)
relation load_subpackage_files: (string list, string, Absyn.Within, Absyn.Program) 
	  => Absyn.Program =

  axiom	load_subpackage_files([],mp,within,Absyn.PROGRAM(cls,w)) => Absyn.PROGRAM(cls,w)

  rule	System.path_delimiter => pd &
	Util.string_append_list([mp,pd,f]) => f' &
	print "parsing " & print f' & print "\n" &
	Parser.parse(f') => Absyn.PROGRAM(cls,_) &
	Print.print_buf("loading ") & Print.print_buf(f') & Print.print_buf "\n" &
	Interactive.update_program(Absyn.PROGRAM(cls,within),Absyn.PROGRAM(oldc,Absyn.TOP))=> p' &
	load_subpackage_files(fs, mp, within, p') => p''
	-------------------------------
	load_subpackage_files(f::fs,mp,within,Absyn.PROGRAM(oldc,_)) => p''

  rule	print "load_subpackage_files failed\n"
	---------------------
	load_subpackage_files(_,_,_,_) => fail
end



(** relation load_file
 ** author: x02lucpo
 **
 ** load the file or the directory structure if the file is a
 ** package.mo
 **)

relation load_file:(string) 
        => (Absyn.Program) =

  rule  System.regular_file_exist(name) => 0 &
        Util.get_absolute_directory_and_file(name) => (dir,"package.mo") &
        Parser.parse(name) => p1' &
        System.path_delimiter() => pd &
        Util.string_append_list([dir,pd,".."])=> dir' &
        load_model_from_each_class(p1',dir') => p1 
        -----------------------------------
	load_file (name)
	  => p1

  rule  System.regular_file_exist(name) => 0 &
        Util.get_absolute_directory_and_file(name) => (dir,filename) &
        Parser.parse(name) => p1 
        -----------------------------------
	load_file (name)
	  => p1

  rule	Debug.fprint("failtrace", "load_file failed\n")
	-------------------
	load_file(_) => fail



end
 
(** relation load_model_from_each_class
 ** author: x02lucpo
 **
 ** helper relation to load_file
 **)

relation load_model_from_each_class:(Absyn.Program,string) 
          => Absyn.Program =

          
  axiom load_model_from_each_class(Absyn.PROGRAM([],a),_) => Absyn.PROGRAM([],a)

  rule  let path = Absyn.IDENT(id) &
	load_class(path, dir) => pnew &
        load_model_from_each_class(Absyn.PROGRAM(res,a),dir) => p_res &
	Interactive.update_program(pnew,p_res) => p' &
        ---------------------------
        load_model_from_each_class(Absyn.PROGRAM(Absyn.CLASS(id,_,_,_,_,_,_)::res,
                                                 a),
                                   dir) => p'

  rule  Debug.fprint("failtrace",  "-load_model_from_each_class failed\n")
        ---------------------------
        load_model_from_each_class(_,_) => fail

        
end

