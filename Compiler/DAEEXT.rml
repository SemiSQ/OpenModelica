(*
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet, Department of
Computer and Information Science, PELAB

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

* Neither the name of Linköpings universitet nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

(**
 ** file:	 DAEEXT.rml
 ** module:      DAEEXT
 **)

(** 
 ** The DAEEXT module is an externally implemented module (in file runtime/daeext.cpp) 
 ** used for the BLT and index reduction algorithms in 'DAELow'. The implementation 
 ** mainly consists of several bitvectors implemented using std::vector<bool> since 
 ** such functionality is not available in RML.
 *)

module DAEEXT:
  

(** relation: init_marks
 **
 ** sets v_mark(i), e_mark(i) to false 
 **)

  relation init_marks: (int,int) => () 

(** relation: e_mark
 **
 ** sets e_mark(i) to true,
 **)

relation e_mark: (int) => () (*  *)

(** relation: get_e_mark
 **
 ** returns e_mark(i) 
 **)

  relation get_e_mark: (int) => bool 

(** relation: v_mark
 **
 ** sets v_mark(i) to true,
 **)
  relation v_mark: (int) => () 

(** relation: get_v_mark
 **
 ** returns v_mark(i).
 **)

  relation get_v_mark: (int) => bool (* returns e_mark(i) *)

(** relation: get_marked_eqns
 **
 ** returns all i for which e_mark(i) == true
 **)

  relation get_marked_eqns:() => int list 

(** relation: get_differentiated_eqns
 **
 ** returns all i for which e_diff(i) == true
 **)

  relation get_differentiated_eqns:() => int list 

(** relation: mark_differentiated
 **
 ** Marks an equation as differentiated. 
 **)

relation mark_differentiated: (int) => () 


(** relation: get_marked_variables
 **
 ** returns all i for which v_mark(i) == true
 **)

  relation get_marked_variables:() => int list 

(** relation: dump_marked_equations
 **
 ** Prints all marked equations.
 **)

  relation dump_marked_equations: (int) => ()

(** relation: dump_marked_variables
 **
 ** Prints all marked equations.
 **)

  relation dump_marked_variables: (int) => ()

(** relation: init_lowlink
 **
 ** initializes lowlink vector to n elements.
 **)

  relation init_lowlink: int => ()

(** relation: init_number
 **
 ** initializes number vector to n elements.
 **)

  relation init_number: int => ()

(** relation: set_lowlink
 **
 ** set lowlink vector elt.
 **)

  relation set_lowlink: (int,int) => ()

(** relation: get_lowlink
 **
 ** get lowlink vector elt.
 **)
  relation get_lowlink: (int) => int

(** relation: set_number
 **
 ** set number vector elt.
 **)

  relation set_number: (int,int) => ()

(** relation: get_number
 **
 ** get number vector elt.
 **)

  relation get_number: (int) => int

(** relation: init_v
 **
 ** initialize v vector.
 **)

  relation init_v: (int) => ()

(** relation: init_v
 **
 ** initialize f vector.
 **)

  relation init_f: (int) => ()	  

(** relation: set_v
 **
 ** set v vector element.
 **)

  relation set_v: (int,int) => ()

(** relation: get_v
 **
 ** get v vector element.
 **)

  relation get_v: (int) => (int) 

(** relation: set_f
 **
 ** set f vector element.
 **)
  relation set_f: (int,int) => ()

(** relation: get_f
 **
 ** get f vector element.
 **)

  relation get_f: (int) => (int) 
	  
end 


