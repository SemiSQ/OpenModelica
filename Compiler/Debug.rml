(*
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet, Department of
Computer and Information Science, PELAB

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

* Neither the name of Linköpings universitet nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

(**
 ** file:	 Debug.rml
 ** module:      Debug
 ** description: debug printing
 **
 ** RCS: $Id$
 **
 ** Printing routines for debug output of strings. Also flag controlled
 ** printing. When flag controlled printing relations are called, printing is 
 ** done only if the given flag is among the flags given in the runtime 
 ** arguments, to +d-flag, i.e. if +d=inst,lookup is given in the command line,
 ** only calls containing these flags will actually print something, e.g.:
 ** fprint("inst", "Starting instantiation..."). See runtime/rtopts.c for
 ** implementation of flag checking.
 **
 **)

module Debug:
 relation print: string => ()
 relation fprint: (string, string) => ()
 relation fprintln: (string, string) => ()
 relation fprintl: (string, string list) => ()
 relation fprint_list: (string, 'a list, 'a => (), string) => ()
 relation fcall: (string, 'a => (), 'a) => ()
 relation fcall0: (string, () => ()) => ()
 relation fcallret: (string, 'a => 'b, 'a, 'b) => 'b
 relation bcall: (bool, 'a => (), 'a) => () 
 relation bcall_2: (bool, ('a,'b) => (), 'a,'b) => () 
 relation notfcall: (string, 'a => (), 'a) => ()
end


with "RTOpts.rml"
with "Print.rml"
with "Util.rml"


(** relation: print
 ** author: PR
 **
 * This relation is used for debug printing. 
 *)

relation print: string => () =
   (* Debug output.
	Takes a lot of time during runtime. Hangs

    LS: Reason: print means Debug.print, so recursive infinit loop.
        Correct version should call RML.print for the builtin print

   rule Print.print_buf s
	------------
	print s => ()

    Correct:

    rule RML.print s
	 -----------
	 print s => ()

    *)

   rule fprint ("olddebug", s)
	----------------------
	print s => ()
end 

(** relation: fprint
 ** author: LS
 ** 
 ** Flag controlled debugging 
 **)

relation fprint: (string, string) => () =

  rule	RTOpts.debug_flag (flag) => true &
	Print.print_error_buf str
	-------------------
	fprint (flag, str)

  axiom	fprint (_,_)

end

(** relation: fprintln
 ** 
 ** Flag controlled debugging, printing with newline.
 **)

relation fprintln: (string, string) => () =

  rule	RTOpts.debug_flag (flag) => true &
	Print.print_error_buf str &
	Print.print_error_buf "\n"
	-------------------
	fprintln (flag, str)

  axiom	fprintln (_,_)

end

(** relation: fprintl
 **
 ** flag controlled debugging, printing of string list.
 **)

relation fprintl: (string, string list) => () =

  rule	RTOpts.debug_flag (flag) => true &
	Util.string_append_list strlist => str &
	Print.print_error_buf str
	-------------------
	fprintl (flag, strlist)

  axiom	fprintl (_,_)

end

(** relation: fcall
 ** 
 ** Flag controlled calling of the given relation (2nd arg) 
 **)

relation fcall: (string, 'a => (), 'a) => () =

  rule	RTOpts.debug_flag (flag) => true &
	func(str)
	------------
	fcall (flag, func, str)

  axiom	fcall (_,_,_)

end

(** relation: fcall0
 **
 ** Flag controlled calling of given relation  (2nd arg) 
 **)

relation fcall0: (string, () => ()) => () =

  rule	RTOpts.debug_flag (flag) => true &
	func()
	------------
	fcall0 (flag, func)

  axiom	fcall0 (_,_)

end


(** relation: fcallret
 **
 ** Flag controlled calling of given relation (2nd arg).
 ** The passed relations return value is returned.
 **)
relation fcallret: (string, 'a => 'b, 'a, 'b) => 'b =

  rule	RTOpts.debug_flag (flag) => true &
	func(arg) => res
	----------------
	fcallret (flag, func, arg, def) => res

  axiom	fcallret (_,_,_,def) => def

end

(** relation: bcall
 **
 ** bool controlled calling of relation.
 **)

relation bcall: (bool, 'a => (), 'a) => () =

  rule	func(str)
	------------
	bcall (true, func, str)

  axiom	bcall (false,_,_)

end

(** relation: bcall_2
 **
 ** bool controlled calling of relation.
 **)

relation bcall_2: (bool, ('a,'b) => (), 'a,'b) => () =

  rule	func(a,b)
	------------
	bcall_2 (true, func, a,b)

  axiom	bcall_2 (false,_,_,_)

end

(** relation: notfcall
 **
 ** Call the given function (2nd arg) if the flag given in 1st arg is 
 ** NOT set 
 **)

relation notfcall: (string, 'a => (), 'a) => () =

  rule	RTOpts.debug_flag (flag) => false &
	func(str)
	------------
	notfcall (flag, func, str)

  axiom	notfcall (_,_,_)

end

(** relation: fprint_list
 **
 **  If flag is set, print the elements in the list, using the passed
 ** relation.
 **)

relation fprint_list: (string, 'a list, 'a => (), string) => () =

  rule	RTOpts.debug_flag (flag) => true &
	print_list (lst, func, sep)
	--------------------------------
	fprint_list (flag, lst, func, sep)

  axiom	fprint_list (_,_,_,_)

end

(** relation: fprint_list
 **
 **  If flag is set, print the elements in the list, using the passed
 ** relation.
 **)

relation print_list : ('a list, 'a => (), string) => () =

  axiom	print_list([],_,_)
	
  rule	r(h)
	------------------
	print_list([h],r,_)

  rule	r(h) & Print.print_error_buf sep &
	print_list(t,r,sep)
	-------------------------------------
	print_list(h::t,r,sep)

end

