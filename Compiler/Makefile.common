#
#
# Common part of Makefile for omc. Contains sourcenames.
#
# David Kågedal <x97davka@ida.liu.se>
#
# $Id$
#

ifdef USE_CORBA
 CORBAOBJ = $(srcdir)/runtime/corbaimpl.o $(srcdir)/runtime/omc_communication_impl.o $(srcdir)/runtime/omc_communication.o
else
 CORBAOBJ = $(srcdir)/runtime/corbaimpl_stub.o
endif

AST = $(top_builddir)/Parser/libomparse_rml.a $(top_builddir)/Parser/libantlr3.a

RTOBJ   = \
$(srcdir)/runtime/runtime.a \
$(top_builddir)/build/lib/omc/libSimulationRuntimeC.a \
$(srcdir)/modpar/libmodpar.a

FRONTEND_DIR=$(srcdir)/FrontEnd
BACKEND_DIR=$(srcdir)/BackEnd
GLOBAL_DIR=$(srcdir)/Global
TEMPLATE_DIR=$(srcdir)/Template
SCRIPT_DIR=$(srcdir)/Script
UTIL_DIR=$(srcdir)/Util
MAIN_DIR=$(srcdir)/Main
ALL_DIRS = $(FRONTEND_DIR) $(BACKEND_DIR) $(TEMPLATE_DIR) $(UTIL_DIR) $(SCRIPT_DIR) $(MAIN_DIR) $(GLOBAL_DIR)
RML_INCLUDE_ALL_DIRS = -I$(FRONTEND_DIR) -I$(BACKEND_DIR) -I$(TEMPLATE_DIR) -I$(UTIL_DIR) -I$(SCRIPT_DIR) -I$(MAIN_DIR) -I$(GLOBAL_DIR)
RMLC_INCLUDE_ALL_DIRS = -I$(FRONTEND_DIR),-I$(BACKEND_DIR),-I$(TEMPLATE_DIR),-I$(UTIL_DIR),-I$(SCRIPT_DIR),-I$(MAIN_DIR),-I$(GLOBAL_DIR)

FRONTEND = \
Absyn.mo \
AbsynDep.mo \
Algorithm.mo \
Builtin.mo \
Ceval.mo \
CevalFunction.mo \
ClassInf.mo \
ClassLoader.mo \
ComponentReference.mo \
Connect.mo \
ConnectUtil.mo \
ConnectionGraph.mo \
Constants.mo \
DAE.mo \
DAEDump.mo \
DAEUtil.mo \
Dependency.mo \
Dump.mo \
DumpGraphviz.mo \
Env.mo \
EvalFunction.mo \
ExpandableConnectors.mo \
Expression.mo \
ExpressionDump.mo \
ExpressionSimplify.mo \
Graphviz.mo \
Inline.mo \
InnerOuter.mo \
Inst.mo \
Instance.mo \
InstExtends.mo \
InstInfo.mo \
InstSection.mo \
InstSymbolTable.mo \
InstTypes.mo \
InstUtil.mo \
InstanceHierarchy.mo \
Lookup.mo \
MMath.mo \
MetaUtil.mo \
Mod.mo \
OpenTURNS.mo \
Parser.mo \
Patternm.mo \
Prefix.mo \
PrefixUtil.mo \
Reference.mo \
SCode.mo \
SCodeCheck.mo \
SCodeDependency.mo \
SCodeDump.mo \
SCodeEnv.mo \
SCodeExpand.mo \
SCodeHashTable.mo \
SCodeLookup.mo \
SCodeFlattenImports.mo \
SCodeFlattenExtends.mo \
SCodeFlattenRedeclare.mo \
SCodeInst.mo \
SCodeSimplify.mo \
SCodeFlatten.mo \
SCodeMod.mo \
SCodeFlat.mo \
SCodeFlatDump.mo \
SCodeUtil.mo \
Static.mo \
Types.mo \
Typing.mo \
UnitAbsyn.mo \
UnitAbsynBuilder.mo \
UnitChecker.mo \
Values.mo \
ValuesUtil.mo \
Visited.mo \
Element.mo \
Node.mo \
Edge.mo \
SCodeGraph.mo \

BACKEND = \
BackendDAE.mo \
BackendDAECreate.mo \
BackendDAEOptimize.mo \
BackendDAETransform.mo \
BackendDAEUtil.mo \
BackendDump.mo \
BackendQSS.mo \
BackendEquation.mo \
BackendVarTransform.mo \
BackendVariable.mo \
DAEQuery.mo \
Derive.mo \
ExpressionSolve.mo \
GraphML.mo \
PartFn.mo \
SimCode.mo \
TaskGraph.mo \
XMLDump.mo \
Matching.mo \
IndexReduction.mo \
Uncertainties.mo \
MathematicaDump.mo


GLOBAL = \
Global.mo

TEMPLATE = \
AbsynDumpTpl.mo \
CodegenUtil.mo \
CodegenC.mo \
CodegenFMU.mo \
CodegenAdevs.mo \
CodegenQSS.mo \
CodegenCpp.mo \
CodegenCSharp.mo \
DAEDumpTpl.mo \
ExpressionDumpTpl.mo \
SCodeDumpTpl.mo \
SimCodeDump.mo \
Tpl.mo \
TplAbsyn.mo \
TplCodegen.mo \
TplMain.mo \
TplParser.mo \
Unparsing.mo

UTIL = \
AvlTree.mo \
BaseHashTable.mo \
Config.mo \
Debug.mo \
Error.mo \
Flags.mo \
Graph.mo \
HashTable.mo \
HashTable2.mo \
HashTable3.mo \
HashTable4.mo \
HashTable5.mo \
HashTableCG.mo \
HashTableCrILst.mo \
HashTablePathToFunction.mo \
HashTableStringToPath.mo \
HashTableExpToIndex.mo \
IOStream.mo \
List.mo \
Util.mo \
Pool.mo \
PriorityQueue.mo \
Name.mo \
Scope.mo \
Relation.mo \
VarTransform.mo \
# Not used by OpenModelica!
# HashTable4.mo \
# HashTable6.mo \


SCRIPT = \
CevalScript.mo \
Interactive.mo \
Refactor.mo

MAIN = \
Main.mo 

EXTERNAL = \
Corba.mo \
DynLoad.mo \
ErrorExt.mo \
Database.mo \
ParserExt.mo \
UnitParserExt.mo \
IOStreamExt.mo \
Lapack.mo \
Print.mo \
Settings.mo \
SimulationResults.mo \
Socket.mo \
System.mo \
TaskGraphExt.mo \
BackendDAEEXT.mo \



# all modules
SRCMO   = $(FRONTEND) $(BACKEND) $(GLOBAL) $(TEMPLATE) $(UTIL) $(SCRIPT) $(MAIN)
ALLMO   = $(SRCMO) $(EXTERNAL)
SRCC    = $(SRCMO:%.mo=%.c)
SRCH    = $(SRCC:%.c=%.h)
SRCSIG  = $(ALLMO:%.mo=%.sig)
SRCSIGX = $(ALLMO:%.mo=%.sigx)
SRCO    = $(SRCC:.c=.o)
