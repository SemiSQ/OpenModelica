(*
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet, Department of
Computer and Information Science, PELAB

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

* Neither the name of Linköpings universitet nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

(**
 ** file:	 ModUtil.rml
 ** module:      ModUtil
 ** description: Miscellanous modelica related utilities (The horror, THE HORROR)
 **
 ** RCS: $Id$
 ** 
 ** This module contains various utilities. For example
 ** converting a path to a string and comparing two paths.
 ** It is used pretty much everywhere. The difference between this 
 ** module and the Util module is that ModUtil contains modelica 
 ** related utilities. The Util module only contains "low-level" 
 ** rml utilities, for example finding elements in lists.
 ** 
 **)
module ModUtil :

  with "Absyn.rml"
  with "DAE.rml"
  with "Exp.rml"

  relation path_string: Absyn.Path => string
  relation opt_path_string: Absyn.Path option => string
  relation path_string2: (Absyn.Path, string) => string



  relation string_prefix_params : DAE.DAElist => DAE.DAElist

  relation path_equal : (Absyn.Path, Absyn.Path) => bool

end

with "RTOpts.rml"
with "Util.rml"
with "Algorithm.rml"
with "Types.rml"
(* adrpo -- not used
with "Print.rml"
*)

relation string_prefix_component_refs : (string, (Exp.ComponentRef, 'b) 
					 => (), 'b, Exp.Exp list) 
	  => Exp.Exp list =

  axiom	string_prefix_component_refs (_, _, _, []) => []
	
  rule	string_prefix_component_refs (str, r, rarg, rest) => res &
	string_prefix_component_ref (str, r, rarg, e) => e'
	----------------------------------------------
	string_prefix_component_refs (str, r, rarg, e::rest) => e'::res
end

relation string_prefix_component_ref : (string, (Exp.ComponentRef, 'b) 
					=> (), 'b, Exp.Exp) 
	  => Exp.Exp =

  rule	r(cr, rarg) &
	string_prefix_cref (str, cr) => cr'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.CREF(cr,t)) 
	  => Exp.CREF(cr',t)

  rule	not r(cr, rarg)
	----------------------------------------------
	string_prefix_component_ref (_, r, rarg, Exp.CREF(cr,t)) 
	  => Exp.CREF(cr,t)

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.BINARY(e1,op,e2)) 
	  => Exp.BINARY(e1',op,e2')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.UNARY(op,e1)) 
	  => Exp.UNARY(op,e1')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.LBINARY(e1,op,e2)) 
	  => Exp.LBINARY(e1',op,e2')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.LUNARY(op,e1)) 
	  => Exp.LUNARY(op,e1')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.RELATION(e1,op,e2)) 
	  => Exp.RELATION(e1',op,e2')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2' &
	string_prefix_component_ref (str, r, rarg, e3) => e3'
	----------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.IFEXP(e1,e2,e3)) 
	  => Exp.IFEXP(e1',e2',e3')

  rule	string_prefix_component_refs (str, r, rarg, el) => el'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.CALL(p, el,b,bi)) 
	  => Exp.CALL(p, el',b,bi)

  rule	string_prefix_component_refs (str, r, rarg, el) => el'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.ARRAY(t,a,el)) 
	  => Exp.ARRAY(t,a,el')

  rule	Util.list_list_map(ell,Util.tuple2_1) => el &
	Util.list_list_map(ell,Util.tuple2_2)=> bl &
	string_prefix_component_refs_list (str, r, rarg, el) => el' &
	Util.list_list_thread_tuple(el',bl) => ell'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.MATRIX(t,a,ell)) 
	  => Exp.MATRIX(t,a,ell')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.RANGE(t,e1, NONE, e2))
	  => Exp.RANGE(t,e1', NONE, e2')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1' &
	string_prefix_component_ref (str, r, rarg, e2) => e2' &
	string_prefix_component_ref (str, r, rarg, e3) => e3'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.RANGE(t,e1, SOME(e2), e3))
	  => Exp.RANGE(t,e1', SOME(e2'), e3')

  rule	string_prefix_component_refs (str, r, rarg, el) => el'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.TUPLE(el)) 
	  => Exp.TUPLE(el')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.CAST(ty, e1)) 
	  => Exp.CAST(ty, e1')

  rule	string_prefix_component_ref (str, r, rarg, e1) => e1'
	--------------------------------------------
	string_prefix_component_ref (str, r, rarg, Exp.ASUB(e1, i)) 
	  => Exp.ASUB(e1', i)

  axiom	string_prefix_component_ref (str, r, rarg, e) => e

end

relation string_prefix_component_refs_list : 
	(string, (Exp.ComponentRef, 'b) => (), 'b, Exp.Exp list list) => Exp.Exp list list =

  axiom string_prefix_component_refs_list (_, _, _, []) => []

  rule	string_prefix_component_refs (str, r, rarg, el) => el' &
	string_prefix_component_refs_list (str, r, rarg, rest) => res
	----------------------------------------------------
	string_prefix_component_refs_list (str, r, rarg, el::rest) => el'::res

end

relation string_prefix_cref : (string, Exp.ComponentRef) 
	  => Exp.ComponentRef =

  rule	string_append (str, s) => s'
	-----------------------
	string_prefix_cref (str, Exp.CREF_IDENT(s, si)) => Exp.CREF_IDENT(s', si)

  rule	string_append (str, s) => s'
	-----------------------
	string_prefix_cref (str, Exp.CREF_QUAL(s, si, cr)) 
	  => Exp.CREF_QUAL(s', si, cr)

end

relation string_prefix_elements : (string, DAE.Element list, DAE.Element list) 
	  => DAE.Element list =

  axiom	string_prefix_elements (_, _, []) => []

  rule	string_prefix_element (str, dae, el) => el' &
	string_prefix_elements (str, dae, rest) => res
	-----------------------------------------
	string_prefix_elements (str, dae, el::rest) => el'::res

end

relation string_prefix_element : (string, DAE.Element list, DAE.Element) 
	  => DAE.Element =


  rule	string_prefix_component_ref (str, is_parameter_daelist, dae, exp) => exp'
	-----------------------------------------------------------------
	string_prefix_element (str, dae, DAE.VAR(cr,vk,vd,ty,SOME(exp),inst_dims,start,flow,cl,dae_var_attr,comment)) 
	  => DAE.VAR(cr,vk,vd,ty,SOME(exp'),inst_dims,start,flow,cl,dae_var_attr,comment)

  rule	string_prefix_component_ref (str, is_parameter_daelist, dae, exp) => exp'
	-----------------------------------------------------------------
	string_prefix_element (str, dae, DAE.DEFINE(cr,exp)) 
	  => DAE.DEFINE(cr,exp')

  rule	string_prefix_component_ref (str, is_parameter_daelist, dae, exp1) 
	  => exp1' &
	string_prefix_component_ref (str, is_parameter_daelist, dae, exp2) 
	  => exp2'
	-----------------------------------------------------------------
	string_prefix_element (str, dae, DAE.EQUATION(exp1,exp2)) 
	  => DAE.EQUATION(exp1',exp2')

  axiom   string_prefix_element (str, dae, DAE.ALGORITHM(alg)) => DAE.ALGORITHM(alg)


(** What happens if a variable is not found among dae, should we check dae1,
    i.e. where the COMP and FUNCTION was found? **)
  rule	string_prefix_elements (str, dae, dae) => dae'
	----------------------------------------------
	string_prefix_element (str, dae1, DAE.COMP(n, DAE.DAE(dae))) 
	  => DAE.COMP(n, DAE.DAE(dae'))

  rule	string_prefix_elements (str, dae, dae) => dae'
	----------------------------------------------
	string_prefix_element (str, dae1, DAE.FUNCTION(n, DAE.DAE(dae), ty)) 
	  => DAE.FUNCTION(n, DAE.DAE(dae'), ty)

  rule	string_prefix_elements (str, dae, dae) => dae'
	----------------------------------------------
	string_prefix_element (str, dae1, DAE.EXTFUNCTION(n, DAE.DAE(dae), ty,decl)) 
	  => DAE.EXTFUNCTION(n, DAE.DAE(dae'), ty,decl)

  axiom	string_prefix_element (str, dae, e) => e

end

relation is_parameter_daelist : (Exp.ComponentRef, DAE.Element list) => () =

  rule	Exp.cref_equal (cr, crv) => true
	------------------------
	is_parameter_daelist (cr, DAE.VAR(crv,DAE.PARAM,vd,ty,e,_,_,_,_,_,_)::rest)

  rule	Exp.cref_equal (cr, crv) => true
	------------------------
	is_parameter_daelist (cr, DAE.VAR(crv,vk,vd,ty,e,_,_,_,_,_,_)::rest) => fail

  rule	is_parameter_daelist (cr, rest)
	-------------------------------
	is_parameter_daelist (cr, e::rest)

end

relation string_prefix_params : DAE.DAElist => DAE.DAElist =

  rule	string_prefix_elements ("params->", dae, dae) => dae'
	-----------------------------------------------------
	string_prefix_params DAE.DAE(dae) => DAE.DAE(dae')

end

(** relation: opt_path_string
 **
 ** Prints a Path option to a string.
 **)
relation opt_path_string: Absyn.Path option => string =

  axiom	opt_path_string(NONE) => ""

  rule	path_string(p) => str 
	-----------------
	opt_path_string(SOME(p)) => str
end

(** relation: path_string
 **
 ** Prints a Path to a string.
 **)
relation path_string: Absyn.Path => string =

  rule	RTOpts.modelicaOutput => true &
	path_string2(path,"__") => s
	-------------------------------------
	path_string path => s

  rule	RTOpts.modelicaOutput => false &
	path_string2(path,".") => s
	-------------------------------------
	path_string path => s
	
end

(** relation: path_string2
 **
 ** Helper relation to path_string.
 **)
relation path_string2: (Absyn.Path, string) => string =

  axiom	path_string2(Absyn.IDENT(s),_) => s
  
  rule	path_string2(n,str) => ns &
	string_append(s,str) => s1 &
	string_append(s1,ns) => ss
	-------------------------------------
	path_string2(Absyn.QUALIFIED(s,n), str) => ss
	
end

(** relation: path_equal
 **
 ** Returns true if two paths are equal.
 **)
relation path_equal : (Absyn.Path, Absyn.Path) => bool =

  rule	id1 = id2 
	----------
	path_equal (Absyn.IDENT(id1), Absyn.IDENT(id2)) => true

  rule	not id1 = id2 
	----------
	path_equal (Absyn.IDENT(id1), Absyn.IDENT(id2)) => false

  rule	id1 = id2 &
	path_equal (path1, path2) => res
	--------------------------------
	path_equal (Absyn.QUALIFIED(id1, path1), Absyn.QUALIFIED(id2, path2)) => res
	
  rule	not id1 = id2
	--------------------------------
	path_equal (Absyn.QUALIFIED(id1, path1), Absyn.QUALIFIED(id2, path2)) => false

  axiom	path_equal (_,_) => false

end
