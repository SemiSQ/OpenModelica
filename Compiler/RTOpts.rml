(*
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet, Department of
Computer and Information Science, PELAB

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

* Redistributions of source code must retain the above copyright
  notice, this list of conditions and the following disclaimer.

* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in
  the documentation and/or other materials provided with the
  distribution.

* Neither the name of Linköpings universitet nor the names of its
  contributors may be used to endorse or promote products derived from
  this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*)

(**
 ** file:	 RTOpts.rml
 ** module:      RTOpts
 ** description: Runtime options
 **
 ** RCS: $Id$
 **
 ** This module takes care of command line options. It is possible to 
 ** ask it what flags are set, what arguments were given etc.
 **  
 ** This module is used pretty much everywhere where debug calls are made.
 ** 
 **)
module RTOpts:

(** relation: args
 **
 ** Register all command arguments to the global variables.
 **)
  relation args : string list => string list

(** relation: typeinfo
 ** 
 ** Returns true if the typeinfo flag is set.
 **)
  relation typeinfo : () => bool

(** relation: split_arrays
 ** 
 ** Returns true if the split_arrays flag is set.
 **)
  relation split_arrays : () => bool

(** relation: params_struct
 ** 
 ** Returns true if the params_struct flag is set.
 **)
  relation params_struct : () => bool

(** relation: modelica_output
 ** 
 ** Returns true if the modelica_output flag is set.
 **)
  relation modelica_output : () => bool

(** relation: debug_flag
 ** 
 ** Returns true if the debug_flag flag is set.
 **)
  relation debug_flag : string => bool

(** relation: no_proc
 ** 
 ** Returns the number of processors specified at the command line for
 ** automatic parallelization.
 **)
  relation no_proc: () => int 

(** relation: latency
 ** 
 ** Returns the latency number specified at the command line for
 ** automatic parallelization.
 **)
  relation latency:() => real

(** relation: bandwidth
 ** 
 ** Returns the bandwidth number specified at the command line for
 ** automatic parallelization.
 **)
  relation bandwidth: () => real	  

(** relation: simulation_cg
 ** 
 ** Returns true if simulation code generation should be performed,
 ** i.e. the +s flag is in the command arguments.
 **)
  relation simulation_cg: () => bool

(** relation: silent
 ** 
 ** Returns true if silent mode, +q is in the command arguments.
 **)
  relation silent: () => bool  	  

end

