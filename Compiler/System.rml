(*
    Copyright (c) PELAB, Dept. Computer and Information Science, Linkoping University,
    Sweden, in the following denoted PELAB/LIU.

   
    This file is part of OpenModelica, in the following denoted OSM.


    The OSM License, Version 1.1, March 4, 2005.


    1 Preface

    The aim of this license is to lay down the conditions enabling you to use, 
    modify and circulate OSM. However, PELAB/LIU remain the authors of 
    OSM and so retain property rights and the use of all ancillary rights.

    2 Definitions

    OSM is defined as all successive versions of the OSM software and their 
    documentation that have been developed by PELAB/LIU and including
    accepted contributions from other contributors according to this license.

    OSM DERIVED SOFTWARE is defined as all or part of OSM that you have 
    modified and/or translated and/or adapted.


    3 Dual License

    OSM is made available under the OSM licensing scheme, which is a dual
    licensing scheme with two options, a) and b):

    a) OSM OPEN SOURCE LICENSE:

    If you wish to write Open Source software you can use the Open Source version 
    of OSM, released under the OSM license which include GPL as its open source 
    licensing option. If you use the OSM Open Source version you must release your 
    Application using OSM including this Application's source code under the GPL as well.

    This OSM license text, and Copyright (c) PELAB/Linkoping University, must
    be present in your copy of OSM and in OSM DERIVED SOFTWARE.

    You should have received a copy of the GPL - GNU General Public License
    along with OpenModelica; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.


    b) OSM COMMERCIAL LICENSE

    If you are using OSM commercially - that is, for commercial usage or
    for creating proprietary software for sale or use in a commercial setting
    - you must purchase a commercial license of OSM from PELAB/LIU, which allows
    you to use OSM without releasing your Application under the GPL.

    Comment: Payments for OSM are intended for OSM development and
    integration of accepted contributions into OSM.


    4 Priority

    If there is any conflict between this OSM License text and the GNU GPL
    license, this text has priority.


    5 Contributions 

    PELAB/LIU reserves the right to accept or turn down source code contributions
    to OSM.


    6 Limitation of the warranty

    Except when mentioned otherwise in writing, OSM is supplied as is, with 
    no explicit or implicit warranty, including warranties of commercialization or 
    adaptation. You assume all risks concerning the quality or the effects of
    OSM and its use. If OSM is defective, you will bear the costs of 
    all required services, corrections or repairs.


    7 Consent

    When you access and use OSM, you are presumed to be aware of and to 
    have accepted all the rights and obligations of the present OSM license.
    This includes accepting that your open source code contributions to OSM, 
    if accepted into OSM by PELAB/IDA, follow the OSM licensing rules including
    copyright and ownership by PELAB/IDA.


    8 Binding effect

    This license has the binding value of a contract.
    You are not responsible for respect of the license by a third party.


    9 Applicable law

    The present license and its effects are subject to Swedish law and  
    Swedish courts.


    10 Contact information

    See http://www.ida.liu.se/~pelab/modelica/OpenModelica.html
*)
(**
 ** file:	 System.rml
 ** module:      System
 ** description: This file contains runtime system specific relation, which are implemented in 
 ** C.
 **
 ** RCS: $Id$
 **
 ** This module contain a set of system calls, for e.g. compiling and 
 ** executing stuff, reading and writing files and so on.
 ** 
 ** 
 ** 
 **)

module System:

with "Values.rml"

(** relation: remove_first_and_last_char
 **
 ** Used e.g. when de-stringifying a Modelica string. "foo" becomes foo.
 **)

relation remove_first_and_last_char: (string) => string


(** relation: trim
 **
 ** Removes all characters in second string from the first string from the 
 ** beginning and the end of the string. E.g. used for removing white spaces
 ** and tabs in the beginning and end of a string.
 **)

relation trim: (string,string) => string 

 (** relation: strcmp
  **
  ** The strcmp function in libc.
  **)

relation strcmp: (string,string) => int

(** relation: toupper
 **
 ** Convert string to upper case characters.
 **)

relation toupper: (string) => string

(** relation
 ** 
 ** the strtok function in libc.
 **)

relation strtok: (string,string) => string list

(** relation: compile_c_file 
 **
 ** Compiles the c-file given as argument.
 ** Requires that the compiler and compiler flags have been set.
 **)

relation compile_c_file: (string) => ()

(** relation: set_c_compiler
 **
 ** Sets the C compiler used by compile_c_file.
 **)

relation set_c_compiler: (string) => ()

(** relation: set_c_flags
 **
 ** Sets the compiler flags used by compile_c_file.
 **)

relation set_c_flags: (string) => ()

(** relation: execute_function
 **
 ** Execute a function which have been generated code for.
 **)

relation execute_function: (string) => ()

(** relation: write_file
 **
 ** Writes a string to a file.
 **)

relation write_file: (string(*filename*),string(*data*)) => ()

(** relation: read_file
 **
 ** Read the content of a file into a string.
 **)

relation read_file: (string) => string

(** relation: read_values_from_file
 **
 ** Read values from a file into 'Values' data, used e.g. when storing
 ** values for executing functions.
 **)

relation read_values_from_file: (string) => Values.Value

(** relation: read_ptoleyplot_dataset
 **
 ** Reads a dataset using the ptolemy plot data format.
 **)

relation read_ptolemyplot_dataset: (string, (* filename *)
				    string list, (* variables*)
				    int) (* size *)
 => Values.Value

(** relation: system_call
 ** 
 ** Execute a system call, returning the exit code of the call.
**)

relation system_call: (string) => int

(** relation: cd
 **
 ** Changes the current directory. Returns zero if it succeeds, 
 ** otherwise non-zero.
 **)

relation cd: (string) => int

(** relation: pwd
 **
 ** Returns the current directory.
 **)

relation pwd: () => string

(** relation: modelicapath
 **
 ** Returns the content of the MODELCIAPATH environment variable.
**)

relation modelicapath: () => string

(** read_env
 **
 ** Returns the value of an environment variable.
 ** If the environment variable is not set, the relation fails.
 **)

relation read_env: (string) => string

(** relation: sub_directories
 **
 ** Return a list of sub directory strings given a directory path.
 **)

relation sub_directories: (string) => string list

(** relation: mo_files
 **
 ** Return a list of all .mo files in a directory path.
 **)

relation mo_files: (string) => string list

(** relation: time
 **
 ** Returns the time using the clock function.
**)
relation time: () => real

(** relation: hash
 **
 ** Calculates a hash value for a string by adding the integer value
 ** for each character.
 **)

relation hash: string => int 

(** relation: path_delimiter
 **
 ** Returns the string used for path delimiter, e.g. "\" on Windows and "/"
 ** on Cygwin.
 **)

relation path_delimiter: () => string

(** relation: group_delimiter
 **
 ** Returns the group delimiter for groups of paths, e.g. used in MODELICAPATH.
 **)

relation group_delimiter: () => string

(** relation: regular_file_exist
 **
 ** Returns zero if the string passed as argument is a regular file.
 ** Otherwise a non-zero value is returned.
**)

relation regular_file_exist: (string) => int

(** relation: directory_exist
 **
 ** Returns zero fi the string passed as argument is a directory.
 ** Otherwise a non-zero value is returned.
 **)

relation directory_exist: (string) => int

(** relation: platform
 ** 
 ** Rreturns the platform as a string. 
 ** now 2005-06-20 is CYGWIN and WIN32 implemented only 
 **)
 relation platform: () => string

(** relation: asin
 **
 ** Arcsin is not defined in rml.
 **)

relation asin: real => real 

(** relation: acos
 **
 ** Arccos is not defined in rml.
 **)

relation acos: real => real 

(** relation: atan
 **
 ** Arctan is not defined in rml.
 **)

relation atan: real => real 


(** relation get_classnames_for_simulation
 ** this returns a list of classnames that are in the
 ** simulation list.
 **)
relation get_classnames_for_simulation: () => string


(** relation add_classnames_to_simulation 
 ** this adds a classname to the simulation list
 **)
relation set_classnames_for_simulation: string => ()
end

