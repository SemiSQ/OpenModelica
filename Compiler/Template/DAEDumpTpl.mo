encapsulated package DAEDumpTpl
"
  file:        DAEDumpTpl.mo
  package:     DAEDumpTpl
  description: Generated by Susan.
  
  $Id: TplCodegen.mo 9216 2011-05-31 10:52:47Z sjoelund.se $
"

public import Tpl;

public import ExpressionDumpTpl;
public import DAE;

public function dumpStatement
  input Tpl.Text in_txt;
  input DAE.Statement in_a_stmt;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  matchcontinue(in_txt, in_a_stmt)
    local
      Tpl.Text txt;
      DAE.Exp i_exp;
      DAE.Exp i_exp1;
      Tpl.Text l_rhs__str;
      Tpl.Text l_lhs__str;

    case ( txt,
           DAE.STMT_ASSIGN(exp1 = i_exp1, exp = i_exp) )
      equation
        l_lhs__str = dumpExp(Tpl.emptyTxt, i_exp1);
        l_rhs__str = dumpExp(Tpl.emptyTxt, i_exp);
        txt = Tpl.writeText(txt, l_lhs__str);
        txt = Tpl.writeTok(txt, Tpl.ST_STRING(" := "));
        txt = Tpl.writeText(txt, l_rhs__str);
      then txt;

    case ( txt,
           _ )
      then txt;
  end matchcontinue;
end dumpStatement;

protected function lm_3
  input Tpl.Text in_txt;
  input list<DAE.Statement> in_items;

  output Tpl.Text out_txt;
algorithm
  out_txt :=
  matchcontinue(in_txt, in_items)
    local
      Tpl.Text txt;
      list<DAE.Statement> rest;
      DAE.Statement i_stmt;

    case ( txt,
           {} )
      then txt;

    case ( txt,
           i_stmt :: rest )
      equation
        txt = dumpStatement(txt, i_stmt);
        txt = Tpl.nextIter(txt);
        txt = lm_3(txt, rest);
      then txt;

    case ( txt,
           _ :: rest )
      equation
        txt = lm_3(txt, rest);
      then txt;
  end matchcontinue;
end lm_3;

public function dumpStatements
  input Tpl.Text txt;
  input list<DAE.Statement> a_stmts;

  output Tpl.Text out_txt;
algorithm
  out_txt := Tpl.pushIter(txt, Tpl.ITER_OPTIONS(0, NONE(), SOME(Tpl.ST_NEW_LINE()), 0, 0, Tpl.ST_NEW_LINE(), 0, Tpl.ST_NEW_LINE()));
  out_txt := lm_3(out_txt, a_stmts);
  out_txt := Tpl.popIter(out_txt);
end dumpStatements;

public function dumpExp
  input Tpl.Text txt;
  input DAE.Exp a_exp;

  output Tpl.Text out_txt;
algorithm
  out_txt := ExpressionDumpTpl.dumpExp(txt, a_exp, "\"");
end dumpExp;

end DAEDumpTpl;