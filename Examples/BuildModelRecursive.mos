// Note: Run with +g=MetaModelica

OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
log:="BuildModelRecursive.html";
MSLVersion:="3.1";
ulimitOmc:="180"; // 3 minutes to generate the C-code
ulimitExe:="10"; // 10 seconds to initialize and run the simulation
loadModel(Modelica,{MSLVersion});

if MSLVersion == "3.2" then
  loadModel(ModelicaTest,{"1.1"});
  loadModelicaTest:="\nloadModel(ModelicaTest,{\"1.1\"});";
else
  loadModelicaTest:="";
end if;

/*
deleteClass(Modelica.Blocks);
deleteClass(Modelica.Electrical);
deleteClass(Modelica.Fluid);
deleteClass(Modelica.Magnetic);
deleteClass(Modelica.Mechanics);
deleteClass(Modelica.Media);
deleteClass(Modelica.Thermal);
deleteClass(Modelica.Utilities);
*/

system("rm -f Modelica");
system("ln -fs '"+getInstallationDirectoryPath()+"/lib/omlibrary/Modelica "+MSLVersion+"/' Modelica");
omc:=getInstallationDirectoryPath()+"/bin/omc";
loadString("
function subScript
  input String strs[:];
  input Integer ix;
  output String str;
algorithm
  str := if size(strs,1)<ix then \"\" else strs[ix];
end subScript;
");
a:={typeNameString(x) for x guard
        (subScript(typeNameStrings(x),1) == "ModelicaTest" or max("Examples" == s for s in typeNameStrings(x)))
    and ((not max("Utilities" == s for s in typeNameStrings(x))) or subScript(typeNameStrings(x),2) == "Utilities")
    and (not max("Components" == s for s in typeNameStrings(x)))
    and (not max("BaseClasses" == s for s in typeNameStrings(x)))
    and (not max("PointGravityWithPointMasses2" == s for s in typeNameStrings(x)))
    and isModel(x)
    and (not isPartial(x))
  in getClassNames(recursive=true,sort=true)};
getErrorString();

// writeFile("x",sum(s + "\n" for s in a));

print("Number of classes to build: " + String(size(a,1)));
system("rm -f Modelica.* " + log);
min(writeFile(s + ".mos","
writeFile(\""+log+"\",\""+s+"\n\",append=true);
statFile := \""+s+".stat\";
writeFile(statFile,\"<tr><td bgcolor=\\\"#ff0000\\\">"+s+"</td></tr>\");getErrorString();
loadModel(Modelica,{\"3.1\"});"+loadModelicaTest+"
res:=buildModel("+s+");
errFile:=\""+s+".err\";
err:=getErrorString();
if err <> \"\" then
  writeFile(errFile,err);
end if;

echo(false);
frontend :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_FRONTEND);
backend  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BACKEND);
simcode  :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMCODE);
linearize:=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_LINEARIZE);
templates:=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_TEMPLATES);
total    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_SIMULATE_TOTAL);
build    :=OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_BUILD_MODEL);
frontend :=if frontend <> -1.0 then frontend-backend else -1.0;
backend  :=if backend <> -1.0 then backend-simcode else -1.0;
simcode  :=if simcode <> -1.0 then simcode-linearize else -1.0;
linearize:=if linearize <> -1.0 then linearize-templates else -1.0;
templates:=if templates <> -1.0 then templates-build else -1.0;

OpenModelica.Scripting.Internal.Time.timerTick(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
simRes  := if res[1] == \"\" then false else 0 == system(\"ulimit -t "+ulimitExe+" ; ./"+s+"\");
timeSim := OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED);
timeSim := if simRes then timeSim else -1.0;

loadString(\"
function cell
  input Real time;
  input Boolean greenOnOk := false;
  output String str;
algorithm
  str := if time==-1.0 then \\\"<td bgcolor=\\\\\\\"#FF0000\\\\\\\">&nbsp;</td>\\\" else ((if greenOnOk then \\\"<td bgcolor=\\\\\\\"#00FF00\\\\\\\">\\\" else \\\"<td>\\\") + 
    OpenModelica.Scripting.Internal.Time.readableTime(if time < 1e-5 then 0 else time)+\\\"</td>\\\");
end cell;
\");getErrorString();
str:=\"<tr><td>\" + (if err <> \"\" then \"<a href=\"+errFile+\">"+s+"</a>\" else \""+s+"\")+\"</td><td bgcolor=\\\"#\"+(if res[1]<>\"\" then \"00FF00\" else \"FF0000\")+\"\\\">\"+OpenModelica.Scripting.Internal.Time.readableTime(total)+\"</td>\" + cell(timeSim,greenOnOk=true) + sum(cell(d) for d in {frontend,backend,simcode,linearize,templates,build}) + \"</tr>\\n\";getErrorString();
writeFile(statFile,str);getErrorString();
") for s in a);
getErrorString();
min(0==system("ulimit -t "+ulimitOmc+" ; " + omc + " " + s + ".mos") for s in a);
getErrorString();

echo(false);
system("rm -f " + log);
str:="<h1>Recursive BuildModel Test</h1><p>Results: " + String(sum(if OpenModelica.Scripting.regularFileExists(s) then 1 else 0 for s in a)) + "/" + String(size(a,1)) + " succeeded</p>
<p>Total time taken: "+OpenModelica.Scripting.Internal.Time.readableTime(OpenModelica.Scripting.Internal.Time.timerTock(OpenModelica.Scripting.Internal.Time.RT_CLOCK_USER_RESERVED))+"</p>
<p>OpenModelica Version: "+getVersion()+"</p>
<p>Tested Library: Modelica "+getVersion(Modelica)+"</p>
<p>BuildModel time limit: "+ulimitOmc+"s</p>
<p>Simulation time limit: "+ulimitExe+"s</p>
";
writeFile(log,"<html><head><title>BuildModel Results</title></head><body>" + str);
writeFile(log,"<table><tr><th>Model</th><th>Simulate</th><th>Total time</th><th>Frontend</th><th>Backend</th><th>SimCode</th><th>Linearize</th><th>Templates</th><th>Compile</th></tr>",append=true);getErrorString();
writeFile(log,sum(readFile(s + ".stat") + "\n" for s in a),append=true);getErrorString();
writeFile(log,"</table></body></html>",append=true);getErrorString();
