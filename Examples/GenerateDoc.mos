// Generate Modelica documentation automatically
// Needs images copied manually
// ... 8 hours to run
// ... and some more :)

// List all used modelica:// links...
// $ grep -oR "modelica://[A-Za-z0-9.]*/[A-Za-z0-9 /.]*" libraries/ | grep -v svn | uniq  | cut -d: -f2- | sort | uniq

loadModel(Modelica,{"3.2"});
loadModel(ModelicaReference);
// deleteClass(ModelicaReference);
// deleteClass(Modelica);
// deleteClass(ModelicaServices);
a:=0;
b:=getClassNames(recursive=true,sort=true);

loadString("
function filename
  input String str;
  output String ostr := 
    OpenModelica.Scripting.stringReplace(
      OpenModelica.Scripting.stringReplace(
        OpenModelica.Scripting.stringReplace(str,\"'\",\"\"),
        \"/\",\"Division\"),
       \"*\",\"Multiplication\");
end filename;
");

system("rm -f tidy.log");

// b := {$TypeName(Modelica),$TypeName(Modelica.Math.Matrices.LAPACK.dgglse_vec)};
// b := {$TypeName(Modelica),$TypeName(Modelica.Electrical.Analog.Basic),$TypeName(Modelica.Electrical.Analog.Basic.VariableInductor)};
i := 0;
sz := size(b,1);
for c in b loop
  contents := getClassNames(c,qualified=true,sort=true);
  cl := typeNameString(c);
  cls := typeNameStrings(c);
  str1 := "<title>"+cl+"</title>";
  str1 := str1 + "<h1>";
  compound := "";
  clsEnd := cls[end];
  clsNotEnd := cls[1:end-1];
  for ident in clsNotEnd loop
    compound := if compound == "" then ident else compound+"."+ident;
    file := compound+".html";
    str1 := str1 + "<a href = \""+file+"\">"+ident+"</a>.";
  end for;
  file := filename(cl) + ".html";
  filetmp := file + ".tmp";
  writeFile(filetmp, str1 + clsEnd + "</h1>");
  arr := getDocumentationAnnotation(c);
  docInfo := arr[1];
  revisions := arr[2];
  if regexBool(docInfo,"^.*<[Hh][Tt][Mm][Ll]>.*$") then
    writeFile(filetmp, "\n" + docInfo, append = true);
  else
    writeFile(filetmp, "\n<pre>" + docInfo + "</pre>", append = true);
  end if;
  if size(contents,1)>0 then
    writeFile(filetmp, "<h2>Contents</h2>\n", append = true);
    writeFile(filetmp, "<table><tr><td>Name</td><td>Description</td></tr>", append = true);
    for content in contents loop
      contentStr := typeNameString(content);
      contentStrToks := strtok(contentStr,".");
      comment := getClassComment(content);
      fileName := filename(contentStr);
      writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td></tr>", append = true);
    end for;
    writeFile(filetmp, "</table>", append = true);
  end if;
  if revisions <> "" then
   writeFile(filetmp, "<h2>Revisions:</h2>" + revisions, append = true);
  end if;
  version := "<hr />Generated by <a href=\"http://openmodelica.org\">OpenModelica</a>" + getVersion() + " using <a href=\"GenerateDoc.mos\">GenerateDoc.mos</a>";
  writeFile(filetmp, version, append = true);
  system("echo Checking file: " + file + " >> tidy.log");
  system("tidy -quiet " + filetmp + " > " + file + " 2>> tidy.log");
  system("sed -i 's/modelica:\\/\\/[A-Za-z0-9./-]*\\/\\([A-Za-z0-9-]*.[A-Za-z-]*\\\"\\)/\\1/g' " + file + "");
  system("sed -i 's/modelica:\\/\\/\\([A-Za-z0-9.]*\\)/\\1\\.html/g' " + file + "");
  i := i + 1;
  print(cl + " (" + String(i) + "/" + String(sz) + ")" + "\n");
end for;
system("rm -f MSL.tar.xz");
system("tar cJf MSL.tar.xz *.html GenerateDoc.mos");
getErrorString();
