/*
 * This file is part of OpenModelica.
 *
 * Copyright (c) 1998-CurrentYear, Linköping University,
 * Department of Computer and Information Science,
 * SE-58183 Linköping, Sweden.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3
 * AND THIS OSMC PUBLIC LICENSE (OSMC-PL).
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S
 * ACCEPTANCE OF THE OSMC PUBLIC LICENSE.
 *
 * The OpenModelica software and the Open Source Modelica
 * Consortium (OSMC) Public License (OSMC-PL) are obtained
 * from Linköping University, either from the above address,
 * from the URLs: http://www.ida.liu.se/projects/OpenModelica or
 * http://www.openmodelica.org, and in the OpenModelica distribution.
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
 * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS
 * OF OSMC-PL.
 *
 * See the full OSMC Public License conditions for more details.
 *
 */

/*
 * Generates Modelica documentation automatically in about 30 minutes
 *   Includes Modelica standard libraries
 *   Most Modelica builtin operators
 *   Some non-Modelica-but-used-in-MSL operators
 *   OpenModelica scripting
 *
 * $Id$
 */

setDebugFlags("nogen");
if true then
  loadModel(Modelica,{"3.2"});
  loadModel(ModelicaReference);
  loadModel(ObsoleteModelica3);
  loadModel(ModelicaTest);
  loadModel(Modelica_LinearSystems2);
end if;
/*
  deleteClass(ModelicaServices);
  deleteClass(Complex);
  deleteClass(ObsoleteModelica3);
  deleteClass(Modelica_LinearSystems2);
  deleteClass(ModelicaTest);
  deleteClass(Modelica);
  // deleteClass(ModelicaReference);
*/
getErrorString();

a:=0;

b:=getClassNames(builtin=true,recursive=true,sort=true);
/* If we want to test on fewer classes */
// b := {$TypeName(Modelica),$TypeName(Modelica.Math.Matrices.LAPACK.dgglse_vec)};
// b := {$TypeName(Modelica),$TypeName(Modelica.Electrical.Analog.Basic),$TypeName(Modelica.Electrical.Analog.Basic.VariableInductor)};
// b := {$TypeName(Modelica.UsersGuide.Overview)};

version := "<hr />Generated by <a href=\"http://openmodelica.org\">OpenModelica</a>" + getVersion() + " using <a href=\"GenerateDoc.mos\">GenerateDoc.mos</a>";

"classNames";
classNames := getClassNames(builtin=true,sort=true);

loadString("
function filename
  input String str;
  output String ostr := 
    // OpenModelica.Scripting.stringReplace(
    //   OpenModelica.Scripting.stringReplace(
        OpenModelica.Scripting.stringReplace(
          OpenModelica.Scripting.stringReplace(
            OpenModelica.Scripting.stringReplace(str,\"'\",\"\"),
            \"/\",\"Division\"),
          \"*\",\"Multiplication\")
    //  \"(\",\"\"),
    //\")\",\"\")
;
end filename;

function notLast
  input String str[:];
  output String ostr[:] := str[1:end];
end notLast;

function last
  input String str[:];
  output String ostr := str[end];
end last;

function preSuffixIfNotEmpty
  input String prefix;
  input String str;
  input String suffix;
  output String out := if str <> \"\" then prefix + str + suffix else \"\";
end preSuffixIfNotEmpty;

function head
  input String strs[:];
  output String head;
protected
  String compound := \"\", file;
algorithm
  head := \"<title>\"+sum(s + \".\" for s in strs[1:end-1])+strs[end]+\"</title>\n<h1><a href = \\\"index.html\\\">.</a>\";
  for ident in strs[1:end-1] loop
    compound := if compound == \"\" then ident else compound+\".\"+ident;
    file := compound+\".html\";
    head := head + \"<a href = \\\"\"+file+\"\\\">\"+ident+\"</a>.\";
  end for;
  head := head + strs[end] + \"</h1>\";
end head;

function itemString
  input Item item;
  input String version;
  output String res;
protected
  String docInfo, revision;
algorithm
  docInfo := if item.docInfo[1] == \"\" then \"<pre>\" + item.comment + \"</pre>\" else item.docInfo[1];
  docInfo := if OpenModelica.Scripting.regexBool(docInfo,\"^.*<[Hh][Tt][Mm][Ll]>.*$\") then docInfo else \"\\n<pre>\" + docInfo + \"</pre>\";
  revision := if item.docInfo[2] <> \"\" then \"<h2>Revisions:</h2>\" + item.docInfo[2] else \"\";
  res := item.head + docInfo + item.interface + item.contents + revision + version;
end itemString;

function itemFile
  input Item item;
  output String file := item.file;
end itemFile;

record Item
  String file;
  String head;
  String docInfo[2];
  String contents;
  String comment;
  String interface;
end Item;
");

"Start calculate items";
echo(false);
items:={Item(
      filename(OpenModelica.Scripting.typeNameString(c))+".html.tmp",
      head(OpenModelica.Scripting.typeNameStrings(c)),
      OpenModelica.Scripting.getDocumentationAnnotation(c),
      preSuffixIfNotEmpty(
        "<h2>Contents</h2>\n<table><tr><th>Name</th><th>Description</th></tr>",
        sum("<tr><td><a href=\"" + filename(OpenModelica.Scripting.typeNameString(cl)) + ".html\">" +
                    last(OpenModelica.Scripting.strtok(OpenModelica.Scripting.typeNameString(cl),".")) + "</a></td>" + 
                    "<td>" + filename(OpenModelica.Scripting.getClassComment(cl)) + "</td></tr>\n"
                for cl in OpenModelica.Scripting.getClassNames(c,qualified=true,sort=true)),
        "</table>"
        ),
      OpenModelica.Scripting.getClassComment(c),
      preSuffixIfNotEmpty("\n<h4>Interface</h4>\n<blockquote><pre>",OpenModelica.Scripting.list(c,interfaceOnly=true),"</pre></blockquote>")
    ) for c in b};
print("Start writing items to file");
echo(true);
timing(writeFile(itemFile(items),itemString(items,version)));
getErrorString();
"Finished writing " + String(size(items,1)) + " items";

searchPaths := "";
filetmp := "index.html";
writeFile(filetmp, "<html><head><title>Modelica Documentation</title></head><body><h1>Modelica Documentation</h1>\n");
writeFile(filetmp, "<p>This is a listing of builtin Modelica functions, libraries shipped with OpenModelica and the documentation for OpenModelica-specific scripting.</p>\n", append = true);
writeFile(filetmp, "<h2>Contents</h2>\n", append = true);
writeFile(filetmp, "<table><tr><th>Name</th><th>Description</th><th>Version</th></tr>", append = true);
for cl in classNames loop
  file := getSourceFile(cl);
  base := basename(file);
  if base == "package.mo" then
    searchPaths := searchPaths + " \"" + dirname(file) + "\"";
  end if;
  contentStr := typeNameString(cl);
  contentStrToks := strtok(contentStr,".");
  comment := getClassComment(cl);
  fileName := filename(contentStr);
  modelVersion := getVersion(cl);
  writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td><td>" + modelVersion + "</td></tr>", append = true);
end for;
writeFile(filetmp, "</table>\n", append = true);
writeFile(filetmp, version + " (<a href=\"ModelicaDocumentation.tar.xz\">Offline version</a>)", append = true);
writeFile(filetmp, "</body>\n</html>", append = true);

writeFile("Tidy.sh","#!/bin/bash
rm -f tidy.log
for f in *.html.tmp ; do
  F=`echo $f | sed s/\\.tmp\\$//`
  echo Checking file $F >> tidy.log
  cp \"$f\" \"$F\"
  # Image sources (filenames) and links
  # Links to classnames
  # Make quoted identifiers pretty
  sed -i -e 's&=\"modelica://[A-Za-z0-9/'\\''()._-]*/\\([A-Za-z0-9'\\''()._-]*\\.png\"\\)&=\"\\1&g' \\
         -e 's&href=\"modelica://\\([A-Za-z0-9'\\''()._]*\\)&href=\"\\1.html&g' \\
         -e 's&\\(href=\"[^\"'\\'']*\\)'\\''\\([^\"'\\'']*\\)'\\''&\\1\\2&g' \"$F\"
  tidy -modify -quiet \"$F\" 2>> tidy.log
done
mkdir -p old-html-tmp
mv *.html.tmp old-html-tmp
");

writeFile("CopyReport.sh","#!/bin/bash
if test -f \"$2\"; then
  if cmp --quiet \"$1\" \"$2\"; then
    # echo Found identical duplicate: $1
    true
  else
    echo Found duplicate file: $1
  fi
fi
cp -f \"$1\" \"$2\"
");

writeFile("FindFiles.sh","#!/bin/bash
rm -f *.png *.pdf
grep -v http:// *.html | egrep -o \"[A-Za-z_0-9.-]*\\.(png|jpg|pdf)\" | cut -d: -f2- | sort -u | tr -d \\\" > tmp
for f in `cat tmp`; do
  #if test -f \"$f\"; then
  #  true
  #else
    find " + searchPaths + " -name \"$f\" -exec sh 'CopyReport.sh' '{}' \"$f\" ';'
    test -f \"$f\" || echo Not found: $f
  #fi
done
");

system("bash Tidy.sh");
system("bash FindFiles.sh");
system("rm -f ModelicaDocumentation.tar.xz");
system("rm -f *.html.tmp");
system("tar cJf ModelicaDocumentation.tar.xz --dereference *.html *.png *.pdf GenerateDoc.mos");
getErrorString();
