/*
 * This file is part of OpenModelica.
 *
 * Copyright (c) 1998-CurrentYear, Link<F6>ping University,
 * Department of Computer and Information Science,
 * SE-58183 Link<F6>ping, Sweden.
 *
 * All rights reserved.
 *
 * THIS PROGRAM IS PROVIDED UNDER THE TERMS OF GPL VERSION 3 
 * AND THIS OSMC PUBLIC LICENSE (OSMC-PL). 
 * ANY USE, REPRODUCTION OR DISTRIBUTION OF THIS PROGRAM CONSTITUTES RECIPIENT'S
  
 * ACCEPTANCE OF THE OSMC PUBLIC LICENSE.
 *
 * The OpenModelica software and the Open Source Modelica
 * Consortium (OSMC) Public License (OSMC-PL) are obtained
 * from Link<F6>ping University, either from the above address,
 * from the URLs: http://www.ida.liu.se/projects/OpenModelica or  
 * http://www.openmodelica.org, and in the OpenModelica distribution. 
 * GNU version 3 is obtained from: http://www.gnu.org/copyleft/gpl.html.
 *
 * This program is distributed WITHOUT ANY WARRANTY; without
 * even the implied warranty of  MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE, EXCEPT AS EXPRESSLY SET FORTH
 * IN THE BY RECIPIENT SELECTED SUBSIDIARY LICENSE CONDITIONS
 * OF OSMC-PL.
 *
 * See the full OSMC Public License conditions for more details.
 *
 */

/* Generates Modelica documentation automatically
 * ... in about 8 hours
 *
 * $Id$
 */

loadModel(Modelica,{"3.2"});
loadModel(ModelicaReference);

a:=0;
b:=getClassNames(recursive=true,sort=true);
/* If we want to test on fewer classes */
// b := {$TypeName(Modelica),$TypeName(Modelica.Math.Matrices.LAPACK.dgglse_vec)};
// b := {$TypeName(Modelica),$TypeName(Modelica.Electrical.Analog.Basic),$TypeName(Modelica.Electrical.Analog.Basic.VariableInductor)};
// b := {$TypeName(Modelica)};

version := "<hr />Generated by <a href=\"http://openmodelica.org\">OpenModelica</a>" + getVersion() + " using <a href=\"GenerateDoc.mos\">GenerateDoc.mos</a>";

"classNames";
classNames := getClassNames(sort=true);

loadString("
function filename
  input String str;
  output String ostr := 
    OpenModelica.Scripting.stringReplace(
      OpenModelica.Scripting.stringReplace(
        OpenModelica.Scripting.stringReplace(str,\"'\",\"\"),
        \"/\",\"Division\"),
       \"*\",\"Multiplication\");
end filename;
");

searchPaths := "";
filetmp := "index.html";
writeFile(filetmp, "<html><head><title>Modelica Documentation</title></head><body><h1>Modelica Documentation</h1>\n");
writeFile(filetmp, "<h2>Contents</h2>\n", append = true);
writeFile(filetmp, "<table><tr><td>Name</td><td>Description</td></tr>", append = true);
for cl in classNames loop
  file := getSourceFile(cl);
  base := basename(file);
  if base == "package.mo" then
    searchPaths := searchPaths + " \"" + dirname(file) + "\"";
  end if;
  contentStr := typeNameString(cl);
  contentStrToks := strtok(contentStr,".");
  comment := getClassComment(cl);
  fileName := filename(contentStr);
  writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td></tr>", append = true);
end for;
writeFile(filetmp, "</table>\n", append = true);
writeFile(filetmp, version + " (<a href=\"MSL.tar.xz\">Offline version</a>)", append = true);
writeFile(filetmp, "</body>\n</html>", append = true);

system("rm -f tidy.log");

i := 0;
sz := size(b,1);
for c in b loop
  contents := getClassNames(c,qualified=true,sort=true);
  cl := typeNameString(c);
  cls := typeNameStrings(c);
  str1 := "<title>"+cl+"</title>";
  str1 := str1 + "<h1>";
  compound := "";
  clsEnd := cls[end];
  clsNotEnd := cls[1:end-1];
  for ident in clsNotEnd loop
    compound := if compound == "" then ident else compound+"."+ident;
    file := compound+".html";
    str1 := str1 + "<a href = \""+file+"\">"+ident+"</a>.";
  end for;
  file := filename(cl) + ".html";
  filetmp := file + ".tmp";
  writeFile(filetmp, str1 + clsEnd + "</h1>");
  arr := getDocumentationAnnotation(c);
  docInfo := arr[1];
  revisions := arr[2];
  if regexBool(docInfo,"^.*<[Hh][Tt][Mm][Ll]>.*$") then
    writeFile(filetmp, "\n" + docInfo, append = true);
  else
    writeFile(filetmp, "\n<pre>" + docInfo + "</pre>", append = true);
  end if;
  if size(contents,1)>0 then
    writeFile(filetmp, "<h2>Contents</h2>\n", append = true);
    writeFile(filetmp, "<table><tr><td>Name</td><td>Description</td></tr>", append = true);
    for content in contents loop
      contentStr := typeNameString(content);
      contentStrToks := strtok(contentStr,".");
      comment := getClassComment(content);
      fileName := filename(contentStr);
      writeFile(filetmp, "<tr><td><a href=\"" + fileName + ".html\">" + contentStrToks[end] + "</a></td><td>" + comment + "</td></tr>", append = true);
    end for;
    writeFile(filetmp, "</table>", append = true);
  end if;
  if revisions <> "" then
   writeFile(filetmp, "<h2>Revisions:</h2>" + revisions, append = true);
  end if;
  writeFile(filetmp, version, append = true);
  system("echo Checking file: " + file + " >> tidy.log");
  system("tidy -quiet '" + filetmp + "' > " + file + " 2>> tidy.log");
  system("sed -i 's/modelica:\\/\\/[A-Za-z0-9./_-]*\\/\\([A-Za-z0-9._-]*.[A-Za-z_-]*\\\"\\)/\\1/g' " + file);
  system("sed -i 's/modelica:\\/\\/\\([A-Za-z0-9._]*\\)/\\1\\.html/g' " + file);
  i := i + 1;
  print(cl + " (" + String(i) + "/" + String(sz) + ")" + "\n");
end for;

writeFile("FindFiles.sh","#!/bin/bash
egrep -o \"[A-Za-z_0-9-]*\\.(png|jpg)\" *.html | cut -d: -f2- | sort -u | tr -d \\\" > tmp
for f in `cat tmp`; do
  if test -f \"$f\"; then
    true
  else
    find " + searchPaths + " -name \"$f\" -exec cp '{}' '.' ';'
    test -f \"$f\" && echo Found: $f || echo Not found: $f
  fi
done
");
system("bash FindFiles.sh");
system("rm -f MSL.tar.xz");
system("tar cJf MSL.tar.xz --dereference *.html *.png GenerateDoc.mos");
getErrorString();
