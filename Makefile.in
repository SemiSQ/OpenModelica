all : release qtclients @OMSHELL_TERMINAL@

autoconfGeneratedFiles = @GENERATED_AUTOCONF_FILES@

prefix = @prefix@
exec_prefix = @exec_prefix@
bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
datadir = @datadir@
docdir = @docdir@

defaultMakefileTarget = Makefile
QMAKE=@QMAKE@
EXE=@EXE@

CFLAGS=@CFLAGS@

include Makefile.common

# We don't need OMDEV hacks, but using the same Makefile sure is nice!
.testvariables:
settings:

difftool: mkbuilddirs
	$(MAKE) -C testsuite/difftool
omc: difftool interactive docs fmi
	(cd Compiler && $(MAKE) -f Makefile release)

omcd: difftool interactive docs fmi
	(cd Compiler && $(MAKE) -f Makefile debug)

qtclean-common:
	rm -rf OMShell/bin/OMShell$(EXE) OMShell/OMShellGUI/omc_communication.*
	rm -rf OMNotebook/bin/OMNotebook$(EXE) OMNotebook/OMNotebookGUI/omc_communication.*
	rm -rf OMOptim/build/OMOptim$(EXE) OMOptim/build/omc_communication.*
ifeq ($(QMAKE),)
qtclients:
	@echo "*** OpenModelica configured without support for Qt"
qtclean: qtclean-common
else ifeq (@IDLCMD@,)
qtclients:
	@echo "*** OpenModelica configured without support for CORBA"
qtclean: qtclean-common
else
omnotebook: mkbuilddirs omplot
	$(MAKE) -C OMNotebook/OMNotebookGUI -f Makefile.unix 
omshell: mkbuilddirs
	$(MAKE) -C OMShell/OMShellGUI -f Makefile.unix
omplot: mkbuilddirs
	$(MAKE) -C OMPlot/OMPlotGUI -f Makefile.unix
omedit: mkbuilddirs omplot
	$(MAKE) -C OMEdit/OMEditGUI -f Makefile.unix
ifeq (@with_paradiseo@,)
omoptim: mkbuilddirs omoptimbasis
	@echo "*** OpenModelica configured without support for OMOptim (--without-paradisEO)"
else
omoptim: mkbuilddirs omoptimbasis
	$(MAKE) -C OMOptim/build -f Makefile.unix
endif
omoptimbasis: mkbuilddirs
	$(MAKE) -C OMOptim/OMOptimBasis/build -f Makefile.unix

qtclients: omnotebook omshell omedit omplot omoptim omoptimbasis

qtclean: qtclean-common
	$(MAKE) -C OMShell/OMShellGUI -f Makefile.unix clean
	$(MAKE) -C OMNotebook/OMNotebookGUI -f Makefile.unix clean
	$(MAKE) -C OMEdit/OMEditGUI -f Makefile.unix clean
	$(MAKE) -C OMPlot/OMPlotGUI -f Makefile.unix clean
	$(MAKE) -C OMOptim/build -f Makefile.unix clean
	$(MAKE) -C OMOptim/OMOptimBasis/build -f Makefile.unix clean
endif

fix-svn-eol-style:
	svn propset svn:eol-style LF `find testsuite/ Compiler/ libraries/ | egrep "\.(mos\?|tpl)\$$" | grep -v parser/ParseModel | grep -v "[ ]" | grep -v _temp[0-9]*\$$`
	svn propset svn:eol-style LF `find SimulationRuntime/c Compiler/runtime/ libraries/ OMEdit/ OMNotebook/ | egrep "\.[ch]\$$|\.[ch]pp\$$" | grep -v "[ ]"`
	svn propset svn:eol-style LF `find . | grep /Makefile\$$`
	svn propset svn:eol-style LF `find . | grep /Makefile.in\$$`
fix-bom:
	find . -type f \( ! -path '*/.svn/*' -prune \) | while read file;do sed -i '1 s/^\xef\xbb\xbf//' "$$file";done 

bom-error:
	rm -f bom-error.log bom-error.sh
	echo "#!/bin/sh\ntest \"\`head -c3 \\\"\$$1\\\"\`\" = \"\`/bin/echo -ne \"\\xef\\xbb\\xbf\"\`\" && (echo \$$1 contains BOM >> bom-error.log)" > bom-error.sh
	find OM*/ Compiler/ SimulationRuntime/ mosh/ -type f \( ! -path '*/.svn/*' -prune \) -exec sh bom-error.sh "{}" ';'
	@if test -e bom-error.log; then cat bom-error.log; fi
	@test ! -e bom-error.log
	rm -f bom-error.log bom-error.sh

tab-error:
	! find Compiler/ SimulationRuntime/c OM* mosh -regextype posix-egrep -regex '.*\.(cpp|c|h|mo)' -exec echo -n "{} " ';' -exec grep -c "	" '{}' ';' | \
          grep -v " 0\$$" | egrep -v 'omc_release|omc_debug|omc_profiling|GenTest'

.PRECIOUS: Makefile

Makefile: Makefile.in config.status
	$(top_builddir)/config.status

config.status: configure
	./config.status -recheck
configure: configure.in
	autoconf
