/*
------------------------------------------------------------------------------------
This file is part of OpenModelica.

Copyright (c) 1998-2005, Linköpings universitet,
Department of Computer and Information Science, PELAB
See also: www.ida.liu.se/projects/OpenModelica

All rights reserved.

(The new BSD license, see also
http://www.opensource.org/licenses/bsd-license.php)


Redistribution and use in source and binary forms, with or without
modification,
are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice,
      this list of conditions and the following disclaimer.

	* Redistributions in binary form must reproduce the above copyright notice,
      this list of conditions and the following disclaimer in the documentation
      and/or other materials provided with the distribution.

    * Neither the name of Linköpings universitet nor the names of its contributors
      may be used to endorse or promote products derived from this software without
      specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

For more information about the Qt-library visit TrollTech:s webpage regarding
licence: http://www.trolltech.com/products/qt/licensing.html

------------------------------------------------------------------------------------
*/

/*!
 * \file xmlparser.cpp
 * \author Ingemar Axelsson and Anders Fernström
 */

//STD Headers
#include <iostream>
#include <exception>
#include <stdexcept>
#include <string>

//QT Headers
#include <QtCore/QBuffer>
#include <QtCore/QFile>
#include <QtGui/QApplication>
#include <QtXml/QDomNode>

//IAEX Headers
#include "xmlparser.h"
#include "factory.h"
#include "celldocument.h"
#include "inputcell.h"
#include "textcell.h"


using namespace std;

namespace IAEX
{
	/*!
	 * \class XMLParser
	 * \author Ingemar Axelsson and Anders Fernström
	 *
	 * \brief Open an XML file. See cells.xml
	 *
	 *
	 * \todo implement the function to open a file with filename.
	 *
	 * \todo Add a parameter describing how the file should be read. This
	 * should be done with some filereader class that can parse a specific
	 * filetype. This to easy allow extensibility. What should the file
	 * reader return? What about a delegate? The CellContainer will be set
	 * as a delegate object for the filereader. Then when a Cell is
	 * created the CellContainer is the object that creates the cell. The
	 * file reader just gives it some information. This could probably be
	 * designed in some better way.
	 */

	/*!
	 * \author Ingemar Axelsson (and Anders Fernström)
	 * \date 2005-11-21 (update)
	 *
	 * \brief The class constructor
	 *
	 * 2005-11-21 AF, Added support for images, needed to have the
	 * celldocument as a parameter
	 */
	XMLParser::XMLParser(const QString filename, Factory *f, Document * document)
		: filename_(filename), factory_(f), document_(document)
	{
	}

   	/*!
	 * \author Ingemar Axelsson
	 *
	 * \brief The class destructor
	 */
	XMLParser::~XMLParser()
	{}

	/*!
	 * \author Ingemar Axelsson
	 *
	 * \brief Parse the xml file
	 */
	Cell *XMLParser::parse()
	{
		QDomDocument doc("CellFile");

		QFile file(filename_);
		if(!file.open(QIODevice::ReadOnly))
			throw runtime_error("Could not open " + filename_.toStdString());

		if(!doc.setContent(&file))
		{
			file.close();
			throw runtime_error("Could not understand content of " + filename_.toStdString());
		}
		file.close();

		QDomElement root = doc.documentElement();
		QDomNode n = root.firstChild();

		//Remove first cellgroup.
		if(!n.isNull())
		{
			QDomElement f = n.toElement();

			if(!f.isNull())
			{
				if(f.tagName() == "CellGroupData")
				{
					n = f.firstChild();
				}
			}
		}

		Cell *rootcell = factory_->createCell("cellgroup", 0);
		xmltraverse(rootcell, n);
		return rootcell;
	}

	/*!
	 * \author Ingemar Axelsson and Anders Fernström
	 * \date 2005-11-23 (update)
	 *
	 * \brief Method for tracersing through the xmlfile
	 *
	 * 2005-11-21 AF, Added support for images
	 * 2005-11-23 AF, Added support for loading saved output
	 */
	void XMLParser::xmltraverse(Cell *ws, QDomNode &n)
	{
		// Added 2005-11-21 AF, for image support
		Cell *lastCell = 0;

		while( !n.isNull())
		{
			QDomElement e = n.toElement();
			if(!e.isNull())
			{
				if(e.tagName() == "Notebook")
				{

				}
				else if(e.tagName() == "CellGroupData")
				{
					Cell *aGroup = factory_->createCell("cellgroup", ws);

					QDomNode p = e.firstChild();
					xmltraverse(aGroup, p);

					// 2005-10-07 AF, Porting, replaced this
					//aGroup->setClosed(e.attribute("closed"));
					QString qbool = e.attribute("closed");
					if( qbool.toLower() == "0" )
					{
						aGroup->setClosed( false );
					}
					else
					{
						//aGroup->setClosed( false );
						aGroup->setClosed( true );
					}

					ws->addChild(aGroup);
				}
				else if(e.tagName() == "Cell")
				{
					//TextCell *aCell = factory_->createCell("text", ws);
					Cell *aCell;
					if(e.attribute("style") == "Image")
					{
						/* removed due to changes in cellfactory
						aCell = factory_->createCell(e.attribute("filename"),
							e.attribute("style"), ws);
						e.attributes().removeNamedItem("filename");
						*/
					}
					else
					{
						aCell = factory_->createCell(e.attribute("style"), ws);
					}

					//For all attributes
					//	       QDomNamedNodeMap attributes = e.attributes();
					//	       attributes.removeNamedItem("style");
					/*	       for(unsigned int i=0; i < attributes.count(); ++i)
					{
					QDomNode n = attributes.item(i);
					QDomAttr a = n.toAttr();
					aCell->setStyle(a.name(), a.value());
					}
					*/

					// Changed 2005-11-01 AF, from '->setText()' to
					// '->setTextHtml()', due to changes in textcells/
					// inputcells.
					aCell->setStyle(e.attribute("style",""));
					aCell->setTextHtml(e.text());

					// 2005-11-23 AF, check if 'Inputcell' and if there is some
					// output data that should be added.
					if( aCell->style().name() == "Input" &&
						e.attribute("eval", "false") == "true" )
					{
						InputCell *inCell = dynamic_cast<InputCell*>(aCell);

						QString text = e.attribute("output", "");
						if( inCell->isPlot())
							inCell->setTextOutputHtml( text );
						else
							inCell->setTextOutput( text );
					}

					ws->addChild(aCell);

					// Added 2005-11-21 AF, for image support
					lastCell = aCell;
				}
				else if( e.tagName() == "Image" )
				{	// ADDED SUPPORT FOR IMAGES HERE:
					// images are always added to the previous cell

					QImage *image = new QImage();
					QString imagename = e.attribute( "name", "" );
					QByteArray imagedata = QByteArray::fromBase64( e.text().toLatin1() );

					QBuffer imagebuffer( &imagedata );
					imagebuffer.open( QBuffer::ReadOnly );
					QDataStream imagestream( &imagebuffer );
					imagestream >> *image;
					imagebuffer.close();

					if( !image->isNull() )
					{
						QString newname = document_->addImage( image );

						// replace old imagename with new name
						if( lastCell )
						{
							// if TextCell
							if( typeid(TextCell) == typeid( *lastCell ))
							{
								QString text = lastCell->textHtml();
								text.replace( imagename, newname );
								lastCell->setTextHtml( text );
							}
							// if InputCell
							else if( typeid(InputCell) == typeid( *lastCell ))
							{
								InputCell *inCell = dynamic_cast<InputCell*>(lastCell);

								QString text = inCell->textOutputHtml();
								text.replace( imagename, newname );
								inCell->setTextOutputHtml( text );
							}
						}
						else
							throw runtime_error("No lastCell to add image to...");
					}
					else
						throw runtime_error("Error creating image: <"+ imagename.toStdString() +">");
				}
				else
				{
					throw runtime_error("Unknown tag: <"+ e.tagName().toStdString() +">");
				}
			}
			n = n.nextSibling();
		}
	}

};
