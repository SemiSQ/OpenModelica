dnl Process this file with autoconf to produce a configure script.
AC_INIT(c_runtime/boolean_array.c)
AC_SUBST(rmlc_bin)
AC_SUBST(rmlhome)
AC_SUBST(rmlinc)
AC_SUBST(omc_antlr_jar)
AC_SUBST(antlrinc)
AC_SUBST(antlrlib)
AC_SUBST(readlineinc)
AC_SUBST(readlinelib)
AC_SUBST(LIBSOCKET)
AC_SUBST(LIBNSL)
AC_SUBST(LIBLPSOLVE55)
AC_SUBST(USE_CORBA)
AC_SUBST(QT_USE_CORBA)
AC_SUBST(CORBACFLAGS)
AC_SUBST(CORBALIBS)
AC_SUBST(IDLCMD)
AC_SUBST(USE_MODPAR)
AC_SUBST(BOOSTHOME)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_MAKE_SET
AC_PROG_LEX

dnl check for environment variables

AC_MSG_CHECKING([for \$RMLHOME])
if test ! -z "$RMLHOME" ; then
  rmlhome=$RMLHOME
  AC_MSG_RESULT([$RMLHOME])
else
  AC_MSG_RESULT([no])
  AC_MSG_ERROR([RMLHOME variable not set.])
fi

AC_MSG_CHECKING([for rmlc])
if test -x $RMLHOME/bin/rmlc ; then
  rmlc_bin=$RMLHOME/bin/rmlc
  AC_MSG_RESULT([yes])
else
  AC_MSG_ERROR([rmlc not found in \$RMLHOME/bin])
fi

dnl Checks for libraries.

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(sys/time.h)

AC_MSG_CHECKING([for rml includefiles in $RMLHOME])
rmlinc=`find $RMLHOME/include -follow -type d -name plain |grep include/plain`
if test -z "$rmlinc" ; then
  AC_MSG_ERROR([rml headers not found])
  AC_MSG_RESULT([no])
else
  AC_MSG_RESULT([yes])
fi

if test ! -z "$ANTLRHOME" ; then
  antlrhome=$ANTLRHOME
  antlrmsg=""
else
  antlrhome=/usr/
  antlrmsg=". \$ANTLRHOME was not set, looked in $antlrhome."
fi

AC_MSG_CHECKING([for antlr headers])
antlrinc=`find $antlrhome/include -type f -name TreeParser.hpp -print | head -1 | awk -F/ '{ total="";for (i = 1 ; i < NF-1; i++) total= total $i "/"; print total}'`
if test -z "$antlrinc" ; then
  AC_MSG_ERROR([Could not find antlr include files$antlrmsg])
else
  AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([for antlr libs])
antlrlib=`find $antlrhome/lib -type f -name libantlr.a -print | head -1 | awk -F/ '{ total="";for (i = 1 ; i < NF; i++) total= total $i "/"; print total}'`
if test -z "$antlrlib" ; then
  AC_MSG_ERROR([Could not find antlr lib file$antlrmsg])
else
  AC_MSG_RESULT([yes])
fi

AC_MSG_CHECKING([for antlr.Tool support])
omc_antlr_jar=build/share/java/antlr-3.1.3.jar
cp c_runtime/java_interface/antlr-3.1.3.jar $omc_antlr_jar
echo "" > $$grammar.g
if java -cp $omc_antlr_jar antlr.Tool $$grammar.g ; then
  AC_MSG_RESULT([yes])
else
  AC_MSG_ERROR([no antlr.Tool support])
  AC_MSG_RESULT([no])
fi
rm -f $$grammar.g

AC_MSG_CHECKING([for readline include])
dnl First check in special place for pelab
if test -d /home/pelab/pkg/gnu/include ; then
  readlineinc="/home/pelab/pkg/gnu/include"
  AC_MSG_RESULT([yes])
else
dnl Check in standard paths
  readlineinc=`find /usr/include /usr/local/include -name readline.h | tail -1 | awk -F/ '{ total="";for (i = 1 ; i < NF; i++) total= total $i "/"; print total}'`
  if test -z "$readlineinc" ; then
     AC_MSG_RESULT([no])
     AC_MSG_WARN([Could not find readline header files])
  else
     AC_MSG_RESULT([yes])
  fi
fi

AC_MSG_CHECKING([for readline libs])
dnl First check in special place for pelab
if test -d /home/pelab/pkg/gnu/lib ; then
  readlinelib="/home/pelab/pkg/gnu/lib"
  AC_MSG_RESULT([yes])
else
dnl Check in standard paths
  readlinelib=`find /usr/lib /usr/local/lib -name libreadline.a | tail -1 | awk -F/ '{ total="";for (i = 1 ; i < NF; i++) total= total $i "/"; print total}'`
  if test -z "$readlinelib" ; then
     AC_MSG_RESULT([no])
     AC_MSG_WARN([Could not find readline lib file])
  else
     AC_MSG_RESULT([yes])
  fi
fi

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_TYPE_SIZE_T

dnl Checks for library functions.
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(getcwd select strdup strerror)


dnl Check if scandir is available
AC_MSG_CHECKING([for scandir])

AC_TRY_LINK([
#include <dirent.h>
], [
int file_select_directories(const struct dirent *entry) {
 return 0;
}

int main() {
char dir[]=".";
int count;
struct dirent **files;
scandir(dir, &files, file_select_directories, 0);
return 0;
}
], [AC_MSG_RESULT([yes]); AC_DEFINE([HAVE_SCANDIR])],
      [AC_MSG_RESULT([no])])

dnl check for lpsolve55

LIBS=""
AC_CHECK_LIB(colamd,colamd)
AC_CHECK_LIB(dl,dlsym)
AC_CHECK_LIB(lpsolve55,make_lp,[],[AC_MSG_ERROR([linking failed])])
LIBLPSOLVE55=$LIBS
LIBS=""

dnl check for socket

AC_CHECK_FUNC(socket,[LIBSOCKET=""],
 [AC_MSG_CHECKING([for libsocket]);
  AC_CHECK_LIB(socket, socket,[AC_MSG_RESULT([yes]); LIBSOCKET="-lsocket"],[AC_MSG_ERROR([neither socket nor libsocket.a found])])
])

dnl check for gethostbyname

AC_CHECK_FUNC(gethostbyname,
 [LIBNSL=""],
 [AC_MSG_CHECKING([for libnsl]);
  AC_CHECK_LIB(nsl,gethostbyname, [AC_MSG_RESULT([yes]); LIBNSL="-lnsl"],[AC_MSG_ERROR([neither gethostbyname nor libnsl.a found])])
])

dnl should we use corba?

AC_ARG_WITH(CORBA,  [  --with-CORBA=DIR       use mico corba installed in DIR (or use mico-config)],[WANT_MICO="$withval"],[WANT_MICO="no"])
AC_ARG_WITH(MICO,   [  --with-MICO=DIR        use mico corba installed in DIR (or use mico-config)],[WANT_MICO="$withval"],[])
AC_ARG_WITH(ORBIT2, [  --with-ORBIT2=DIR      use orbit2 installed in DIR (or use orbit2-config)],[WANT_ORBIT2="$withval"],[WANT_ORBIT2="no"])
AC_ARG_WITH(omniORB,[  --with-omniORB=DIR     use omniORB installed in DIR],[WANT_OMNIORB="$withval"],[WANT_OMNIORB="no"])

if test ! "$WANT_MICO" = "no"; then
  if test "$WANT_MICO" = "yes"; then
    MICO="mico-config";
  else
    MICO="$withval/bin/mico-config";
  fi
  AC_CHECK_PROG(USE_CORBA,$MICO,[-DUSE_CORBA -DUSE_MICO],[no])
  if test "$USE_CORBA" = "no"; then
    AC_MSG_ERROR([failed to find mico-corba])
  fi
  QT_USE_CORBA="USE_MICO"
  CORBACFLAGS=-I`mico-config --prefix`/include;
  CORBALIBS=`mico-config --libs`;
  IDLCMD="idl";
  DESIRED_CORBA="mico"
elif test ! "$WANT_ORBIT2" = "no"; then
  if test "$WANT_ORBIT2" = "yes"; then
    ORBIT2="orbit2-config";
  else
    ORBIT2="$withval/bin/orbit2-config";
  fi
  AC_CHECK_PROG(USE_CORBA,$ORBIT2,[-DUSE_CORBA -DUSE_ORBIT2],[no])
  if test "$USE_CORBA" = "no"; then
    AC_MSG_ERROR([failed to find orbit2])
  fi
  QT_USE_CORBA="USE_ORBIT2"
  CORBACFLAGS=`orbit2-config --cflags`;
  CORBALIBS=`orbit2-config --libs`;
  IDLCMD="orbit-idl-2";
  DESIRED_CORBA="orbit2"
  AC_MSG_ERROR([ORBIT2 is not supported yet])
elif test ! "$WANT_OMNIORB" = "no"; then
  if test "$WANT_OMNIORB" = "yes"; then
    WANT_OMNIORB="/usr";
  fi
  USE_CORBA="-DUSE_CORBA -DUSE_OMNIORB";
  QT_USE_CORBA="USE_OMNIORB"
  CORBALIBS="-lomniORB4 -lomnithread -lpthread";
  CORBACFLAGS="-I$WANT_OMNIORB/include";
  IDLCMD="omniidl -bcxx -Wbh=.h -Wbs=.cc";
  DESIRED_CORBA="omniorb"
else
  USE_CORBA="";
  CORBACFLAGS="";
  CORBALIBS="";
  IDLCMD="";
  DESIRED_CORBA="none"
fi

AC_MSG_CHECKING([if CORBA is desired]);
AC_MSG_RESULT([$DESIRED_CORBA]);

dnl should we compile modpar

AC_ARG_WITH(MODPAR, [  --with-MODPAR        Compile with automatic parallelization, requires boost],
[
	USE_MODPAR="-DUSE_MODPAR"
], [
AC_MSG_RESULT([Not compiling ModPar]); USE_MODPAR=""; BOOSTHOME=""
])

AC_ARG_WITH(BOOST, [  --with-BOOST=DIR        With BOOST library in DIR],
[
if test "x$withval" = "xno" ; then
	AC_MSG_RESULT([disabling BOOST]);
	if test "$USE_MODPAR" = "-DUSE_MODPAR" ; then
			AC_MSG_RESULT([ Warning, MODPAR requires BOOST, disabling MODPAR ] )
	fi
	USE_MODPAR="";
	BOOSTHOME="";
else
	AC_MSG_RESULT([enabling BOOST... BOOSTHOME="$withval"]);
	BOOSTHOME="$withval";
fi
], [
AC_MSG_RESULT([Not compiling with BOOST]); USE_MODPAR=""; BOOSTHOME=""
])

AC_OUTPUT(Makefile Compiler/rml2sig/Makefile modelica_parser/test/parser/Makefile mosh/src/Makefile Compiler/Makefile Compiler/omc_release/Makefile Compiler/omc_debug/Makefile Compiler/omc_profiler/Makefile Compiler/absyn_builder/Makefile modelica_parser/test/lexer/Makefile Compiler/test_codegen/Makefile Compiler/runtime/Makefile modelica_parser/src/Makefile Compiler/modpar/Makefile flat_modelica_parser/src/Makefile)
