
top_builddir= ../..
builddir_bin=$(top_builddir)/build/bin
builddir_lib=$(top_builddir)/build/lib
builddir_inc=$(top_builddir)/build/include
builddir_doc=$(top_builddir)/build/doc


CC=gcc
CXX=g++
AR=ar -r

MODELICA_PARSER=$(top_builddir)/modelica_parser/src

ANTLR_HOME=@antlrhome@

INCLUDES=-I@antlrinc@ -I$(MODELICA_PARSER)

LIBP=-L@antlrlib@

CFLAGS =-O3 -Wall $(INCLUDES)
CXXFLAGS = $(CFLAGS)

ANTLRFLAGS=

LIB = $(LIBP) -lantlr

lexergen= flat_modelica_lexer.cpp flat_modelica_lexer.hpp \
	  modelicaTokenTypes.hpp modelicaTokenTypes.txt

parsergen= flat_modelica_parser.cpp flat_modelica_parser.hpp \
	   flat_modelica_parserTokenTypes.hpp flat_modelica_parserTokenTypes.txt

lexersrcs=$(filter %.cpp,$(lexergen))
parsersrcs=$(filter %.cpp,$(parsergen))

lexerobjs=$(lexersrcs:.cpp=.o)
parserobjs=$(parsersrcs:.cpp=.o)

helperobjs =  parse_tree_dumper.o token_names.o

OBJS += $(lexerobjs) $(parserobjs)
#$(helperobjs)

all: libflat_modelica_parser.a

vctarget: $(lexergen) $(parsergen)

libflat_modelica_parser.a: $(OBJS)
	$(AR) $@ $(OBJS)

$(lexergen): flat_modelica_lexer.g
	java antlr.Tool $(ANTLRFLAGS) $<

$(parsergen): flat_modelica_parser.g flat_modelica_lexer.g
	java antlr.Tool $(ANTLRFLAGS) $<

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $<

test: test.cpp libflat_modelica_parser.a parse_tree_dumper.o
	$(CXX) -o test test.cpp libflat_modelica_parser.a  \
	$(MODELICA_PARSER)/parse_tree_dumper.o $(LIB) $(INCLUDES)

depend: $(DFILES)

clean:
	-rm -f *.o *~ core *.core libflat_modelica_parser.a

reallyclean: clean
	-rm -f $(lexergen) $(parsergen)

flat_modelica_lexer.o:flat_modelica_lexer.cpp flat_modelica_lexer.hpp
flat_modelica_parser.o:flat_modelica_parser.cpp flat_modelica_parser.hpp
#token_names.o:token_names.cpp
parse_tree_dumper.o:
	cd $(MODELICA_PARSER) && make && cd $(top_builddir)/flat_modelica_parser/src


#parse_tree_dumper.cpp: parse_tree_dumper.cpp
#include $(DFILES)

