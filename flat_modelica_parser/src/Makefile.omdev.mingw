# Adrian Pop, adrpo@ida.liu.se, 2006-02-01
# Makefile for compilation of OMC using OMDev-mingw
# OMDev-mingw: http://www.ida.liu.se/~adrpo/omc/omdev/
#
# $Id: Makefile.omdev.mingw.in 1817 2006-02-01 12:21:26Z adrpo $
#

# The path to the OMDev-mingw package MUST BE SET!
#OMDEV=$OMDEV
# Test if the needed variables are there...
.testvariables:
ifndef OMDEV
	@echo You have to set the OMDEV variabile pointing to your OMDev package root! Exiting....
	@echo Take the OMDev package from: http://www.ida.liu.se/~adrpo/omc/omdev/
	@echo For questions or problems email Adrian Pop, adrpo@ida.liu.se
	ABORT
endif

CC=gcc
CXX=g++
AR=ar -r

MODELICA_PARSER=../../modelica_parser/src

ANTLR_HOME=$(OMDEV)/

INCLUDES=-I$(MODELICA_PARSER) -I$(ANTLR_HOME)/include/

LIBP=-L$(ANTRL_HOME)/lib/antlr-msys-mingw

CFLAGS = $(INCLUDES) -O3 -Wall #-D DEBUG
CXXFLAGS = $(CFLAGS)

ANTLRFLAGS=
ANTLRCLASSPATH=-cp $(OMDEV)/bin/antlr/antlr.jar
ANTLR = java $(ANTLRCLASSPATH) antlr.Tool

LIB = $(LIBP) -lantlr

lexergen= flat_modelica_lexer.cpp flat_modelica_lexer.hpp \
	  modelicaTokenTypes.hpp modelicaTokenTypes.txt

parsergen= flat_modelica_parser.cpp flat_modelica_parser.hpp \
	   flat_modelica_parserTokenTypes.hpp flat_modelica_parserTokenTypes.txt

lexersrcs=$(filter %.cpp,$(lexergen))
parsersrcs=$(filter %.cpp,$(parsergen))

lexerobjs=$(lexersrcs:.cpp=.o)
parserobjs=$(parsersrcs:.cpp=.o)

helperobjs =  parse_tree_dumper.o token_names.o

OBJS += $(lexerobjs) $(parserobjs)
#$(helperobjs)

all: .testvariables libflat_modelica_parser.a
.PHONY: lexeronce parseronce

vctarget: $(lexergen) $(parsergen)

libflat_modelica_parser.a: $(OBJS)
	$(AR) $@ $(OBJS)

lexer.stamp: flat_modelica_lexer.g
	@rm -f lexer.tmp
	@touch lexer.tmp
	$(ANTLR) $(ANTLRFLAGS) $<
	touch $(lexergen)
	@mv -f lexer.tmp $@
$(lexergen): lexer.stamp
	## Recover from the removal of $@
	@if test -f $@; then :; else \
	rm -f lexer.stamp; \
	$(MAKE) lexer.stamp; \
	fi

parser.stamp: flat_modelica_parser.g $(lexergen)
	rm -f parser.tmp
	touch parser.tmp
	$(ANTLR) $(ANTLRFLAGS) $<
	touch $(parsergen)
	mv -f parser.tmp $@
$(parsergen): parser.stamp
	## Recover from the removal of $@
	@if test -f $@; then :; else \
	rm -f parser.stamp; \
	$(MAKE) parser.stamp; \
	fi

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $<

test: test.cpp libflat_modelica_parser.a parse_tree_dumper.o
	$(CXX) -o test test.cpp libflat_modelica_parser.a  \
	$(MODELICA_PARSER)/parse_tree_dumper.o $(LIB) $(INCLUDES)

depend: $(DFILES)

clean:
	-rm -f *.o *~ core *.core libflat_modelica_parser.a

reallyclean: clean
	-rm -f $(lexergen) $(parsergen)

flat_modelica_lexer.o:flat_modelica_lexer.cpp flat_modelica_lexer.hpp
flat_modelica_parser.o:flat_modelica_parser.cpp flat_modelica_parser.hpp
#token_names.o:token_names.cpp
parse_tree_dumper.o:
	cd $(MODELICA_PARSER) && make -f Makefile.omdev.mingw && cd ../../flat_modelica_parser/src


#parse_tree_dumper.cpp: parse_tree_dumper.cpp
#include $(DFILES)

