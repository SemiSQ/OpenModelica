top_builddir= ../..
builddir_bin=$(top_builddir)/build/bin
builddir_lib=$(top_builddir)/build/lib
builddir_inc=$(top_builddir)/build/include
builddir_doc=$(top_builddir)/build/doc

CC=gcc
CXX=g++
AR=ar -r

ANTLR_HOME=@antlrhome@

INCLUDES=-I@antlrinc@

LIBP=-L@antlrlib@

CFLAGS =-O3 -Wall $(INCLUDES)
CXXFLAGS = $(CFLAGS)

ANTLRFLAGS=
ANTLR = java -cp $(top_builddir)/@omc_antlr_jar@ antlr.Tool

LIB = $(LIBP) -lantlr


lexergen= modelica_lexer.cpp modelica_lexer.hpp \
	  modelicaTokenTypes.hpp modelicaTokenTypes.txt

parsergen= modelica_parser.cpp modelica_parser.hpp \
	   modelica_parserTokenTypes.hpp modelica_parserTokenTypes.txt

lexersrcs=$(filter %.cpp,$(lexergen))
parsersrcs=$(filter %.cpp,$(parsergen))

lexerobjs=$(lexersrcs:.cpp=.o)
parserobjs=$(parsersrcs:.cpp=.o)

helperobjs = token_names.o parse_tree_dumper.o

OBJS += $(lexerobjs) $(parserobjs) $(helperobjs)

all: libmodelica_parser.a
.PHONY: lexeronce parseronce

vctarget: $(lexergen) $(parsergen)

libmodelica_parser.a: $(OBJS)
	$(AR) $@ $(OBJS)

lexer.stamp: modelica_lexer.g
	@rm -f lexer.tmp
	@touch lexer.tmp
	$(ANTLR) $(ANTLRFLAGS) $<
	touch $(lexergen)
	@mv -f lexer.tmp $@
$(lexergen): lexer.stamp
	## Recover from the removal of $@
	@if test -f $@; then :; else \
	rm -f lexer.stamp; \
	$(MAKE) lexer.stamp; \
	fi

parser.stamp: modelica_parser.g $(lexergen)
	rm -f parser.tmp
	touch parser.tmp
	$(ANTLR) $(ANTLRFLAGS) $<
	touch $(parsergen)
	mv -f parser.tmp $@
$(parsergen): parser.stamp
	## Recover from the removal of $@
	@if test -f $@; then :; else \
	rm -f parser.stamp; \
	$(MAKE) parser.stamp; \
	fi

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $<

test: test.o libmodelica_parser.a
	$(CXX) -o test test.o libmodelica_parser.a  $(LIB)

depend: $(DFILES)

clean:
	-rm -f *.o *~ core *.core libmodelica_parser.a

reallyclean: clean
	-rm -f $(lexergen) $(parsergen)

modelica_lexer.o:modelica_lexer.cpp modelica_lexer.hpp
modelica_parser.o:modelica_parser.cpp modelica_parser.hpp ../../Compiler/runtime/errorext.h ../../Compiler/runtime/error_reporting.h
token_names.o:token_names.cpp
parse_tree_dumper.o:parse_tree_dumper.cpp parse_tree_dumper.hpp
#include $(DFILES)

Makefile: Makefile.in
	cd $(top_builddir); ./config.status
