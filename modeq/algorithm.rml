
(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 algorithm.rml
 ** module:      Algorithm
 ** description: Algorithm datatypes
 **
 ** RCS: $Id$
 **
 ** This file contains data types and relations for managing
 ** algorithms.  The algorithms in the AST is analyzed by the `Inst'
 ** module which uses this module to represent the algorithms.
 **)

module Algorithm:

  with "exp.rml"
  with "types.rml"
  with "staticexp.rml"
  with "explode.rml"

  type Ident = string

  datatype Algorithm = ALGORITHM of Statement list
  (** The `Algorithm' type corresponds to a whole algorithm secion. *)
  (** It is simple a list of algorithm statements. *)

  datatype Statement = ASSIGN of Exp.Type * Exp.ComponentRef * Exp.Exp
		     | ASSIGN_ARR of Exp.Type * Exp.ComponentRef * Exp.Exp
		     | IF of Exp.Exp * Statement list * Else
		     | FOR of Exp.Type * bool * Ident * Exp.Exp * Statement list
		     | WHILE of Exp.Exp * Statement list
		     | WHEN of Exp.Exp * Statement list
  (** There are four kinds of statements.  Assignments (`a := b;'),
   ** if statements (`if A then B; elseif C; else D;'), for loops
   ** (`for i in 1:10 loop ...; end for;') and when statements
   ** (`when E do S; end when;'). *)

  datatype Else = NOELSE
		| ELSEIF of Exp.Exp * Statement list * Else
		| ELSE of Statement list
  (** An if statements can one or more `elseif' branches and an
   ** optional `else' branch. *)

  relation make_assignment : (Exp.Exp, Static.Properties,
			      Exp.Exp, Static.Properties,
			      SCode.Accessibility) => Statement

  relation make_if : (Exp.Exp,
		      Static.Properties,
		      Statement list,
		      (Exp.Exp * Static.Properties * Statement list) list,
		      Statement list) => Statement

  relation make_for : (Ident, Exp.Exp, Static.Properties,
		       Statement list) => Statement

  relation make_while : (Exp.Exp, Static.Properties,
			 Statement list) => Statement
	
  relation make_when_a : (Exp.Exp, Static.Properties,
			Statement list) => Statement
	
end
with "print.rml"

(** relation: make_assignment
 **
 ** This relation creates an `ASSIGN' construct, and checks that the
 ** assignment is semantically valid, which means that the component
 ** being assigned is not constant, and that the types match.
 **)

(** LS: Added call to get_prop_type and is_prop_const instead of
having PROP in the rules. Otherwise rules must be repeated because of
combinations with PROP_TUPLE
**)

relation make_assignment : (Exp.Exp, Static.Properties,
			    Exp.Exp, Static.Properties,
			    SCode.Accessibility) => Statement =

  rule	Static.is_prop_const (lprop) => true &
	Print.print_buf "# Trying to assign to constant component\n" &
	Print.print_buf "    " & Exp.print_exp lhs &
 	Print.print_buf " := " & Exp.print_exp rhs & Print.print_buf "\n"
	-------------------------------------------
	make_assignment (lhs,lprop,rhs,rprop,_) => fail

  rule	Print.print_buf "# Can't assign to (readonly) " & Exp.print_exp e & Print.print_buf "\n"
	---------------------------------------------------------
	make_assignment(e,_,_,_, SCode.RO) => fail

(** LS: Replaced "as Static.PROP(_,false)" from lhprop", by the first
predicate
 **)
  rule	Static.is_prop_const (lhprop) => false &
	Static.match_prop(rhs, rhprop, lhprop) => rhs' &
	Static.is_prop_array lhprop => false &
	get_prop_exp_type lhprop => t
	----------------------------------------------
	make_assignment(Exp.CREF(c,crt), lhprop,
			rhs, rhprop, _) => ASSIGN(t,c,rhs')

rule	Static.is_prop_const (lhprop) => false &
	Static.match_prop(rhs, rhprop, lhprop) => rhs' &
	Static.is_prop_array lhprop => true &
	get_prop_exp_type lhprop => t
	----------------------------------------------
	make_assignment(Exp.CREF(c,crt), lhprop,
			rhs, rhprop, _) => ASSIGN_ARR(t,c,rhs')

  rule	Static.get_prop_type lprop => lt &
	Static.get_prop_type rprop => rt &
	Types.equivtypes (lt,rt) => false &
	Print.print_buf "# Type mismatch in assignment\n" &
	Print.print_buf "    " & Exp.print_exp lhs &
 	Print.print_buf " := " & Exp.print_exp rhs & Print.print_buf "\n" &
	Print.print_buf "    " & Types.print_type lt &
 	Print.print_buf " := " & Types.print_type rt & Print.print_buf "\n"
	-------------------------------------------
	make_assignment (lhs,lprop,rhs,rprop,_) => fail

  rule	Print.print_buf "- Algorithm.make_assignment failed\n" &
	Print.print_buf "    " & Exp.print_exp lhs &
 	Print.print_buf " := " & Exp.print_exp rhs & Print.print_buf "\n" 
	---------------------------------------------
	make_assignment (lhs, lprop, rhs, rprop, _) => fail

end

relation get_prop_exp_type : Static.Properties => Exp.Type =
	
  rule	Static.get_prop_type p => ty &
	get_type_exp_type ty => t
	--------------------------
	get_prop_exp_type p => t

end

relation get_type_exp_type : Types.Type => Exp.Type =

  axiom	get_type_exp_type Types.T_INTEGER => Exp.INT
  axiom	get_type_exp_type Types.T_REAL => Exp.REAL
  axiom	get_type_exp_type Types.T_STRING => Exp.STRING
  axiom	get_type_exp_type Types.T_BOOL => Exp.BOOL

  rule	get_type_exp_type t => t'
	------------------------
	get_type_exp_type Types.T_ARRAY(_,t) => t'

  axiom	get_type_exp_type _ => fail

end

(** relation: make_if
 **
 ** This relation creates an `IF' construct, checking that the types
 ** of the parts are correct.
 **)

relation make_if : (Exp.Exp,
		    Static.Properties,
		    Statement list,
		    (Exp.Exp * Static.Properties * Statement list) list,
		    Statement list) => Statement =

  rule	make_else(eib,fb) => else
	-------------------------
	make_if(e,Static.PROP(Types.T_BOOL,_),tb,eib,fb) => IF(e,tb,else)

  rule	Print.print_buf "# Type error in if conditional (" &
	Exp.print_exp e & Print.print_buf ")\n" &
	Print.print_buf "    Expected Boolean, got " &
	Types.print_type t & Print.print_buf "\n"
	-------------------------------
	make_if(e,Static.PROP(t,_),_,_,_) => fail

end

(** relation: make_else
 **
 ** 
 **)

relation make_else : ((Exp.Exp * Static.Properties * Statement list) list,
		      Statement list) => Else =

	(** This removes empty else branches *)
  axiom	make_else ([],[]) => NOELSE

  axiom	make_else ([],fb) => ELSE(fb)

  rule	make_else (xs,fb) => else
	-------------------------
	make_else ((e,Static.PROP(Types.T_BOOL,_),b)::xs,fb)
	  => ELSEIF(e,b,else)
	
  rule	Print.print_buf "# Type error in elseif conditional (" &
	Exp.print_exp e & Print.print_buf ")\n" &
	Print.print_buf "    Expected Boolean, got " &
	Types.print_type t & Print.print_buf "\n"
	-------------------------------
	make_else((e,Static.PROP(t,_),_)::_,_) => fail

end

(** relation: make_for *)

relation make_for : (Ident, Exp.Exp, Static.Properties,
		     Statement list) => Statement =

  rule	Types.is_array t => array &
	Static.elab_type t => et
	-----------------------
	make_for(i,e,Static.PROP(Types.T_ARRAY(_,t),_),stmts) => FOR(et,array,i,e,stmts)

  rule	Print.print_buf "# Type error in for conditional.\n" &
	Print.print_buf "    Expected array, got " &
	Types.print_type t & Print.print_buf "\n"
	-------------------------------
	make_for(_,_,Static.PROP(t,_),_) => fail

end

(** relation: make_while *)

relation make_while : (Exp.Exp, Static.Properties,
		       Statement list) => Statement =

  axiom	make_while(e,Static.PROP(Types.T_BOOL,_),stmts) => WHILE(e,stmts)

  rule	Print.print_buf "# Type error in while conditional.\n" &
	Print.print_buf "    Expected Boolean, got " &
	Types.print_type t & Print.print_buf "\n"
	-------------------------------
	make_while(_,Static.PROP(t,_),_) => fail

end

(** relation: make_when *)

relation make_when_a : (Exp.Exp, Static.Properties,
		      Statement list) => Statement =

  axiom	make_when_a(e,Static.PROP(Types.T_BOOL,_),stmts) => WHEN(e,stmts)

  rule	Print.print_buf "# Type error in when conditional.\n" &
	Print.print_buf "    Expected Boolean, got " &
	Types.print_type t & Print.print_buf "\n"
	-------------------------------
	make_when_a(_,Static.PROP(t,_),_) => fail

end
