module Builtin:

  with "absyn.rml"
  with "env.rml"

  relation initial_env : () => Env.Env

end

with "exp.rml"

val rl_type = Absyn.CLASS("RealType",false,Absyn.CL_TYPE,Absyn.PARTS([]))
val int_type = Absyn.CLASS("IntegerType",false,Absyn.CL_TYPE,Absyn.PARTS([]))
val str_type = Absyn.CLASS("StringType",false,Absyn.CL_TYPE,Absyn.PARTS([]))

(*
val real_type = Absyn.CLASS("Real",false,Absyn.CL_TYPE,
			    Absyn.PARTS(
			    [Absyn.PUBLIC(
			    [Absyn.ELEMENT(true,"value",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("RealType"),
					       [Absyn.COMPONENT("value",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"quantity",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("quantity",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"unit",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("unit",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"displayUnit",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("displayUnit",
								NONE,
								NONE)]))])]))

val integer_type = Absyn.CLASS("Integer",false,Absyn.CL_TYPE,
			    Absyn.PARTS(
			    [Absyn.PUBLIC(
			    [Absyn.ELEMENT(true,"value",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("IntegerType"),
					       [Absyn.COMPONENT("value",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"quantity",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("quantity",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"unit",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("unit",
								NONE,
								NONE)])),
			     Absyn.ELEMENT(true,"displayUnit",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("displayUnit",
								NONE,
								NONE)]))])]))

val string_type = Absyn.CLASS("String",false,Absyn.CL_TYPE,
			    Absyn.PARTS(
			    [Absyn.PUBLIC(
			    [Absyn.ELEMENT(true,"value",
			      Absyn.COMPONENTS(false, true, false,
					       false, false,
					       Exp.IDENT("StringType"),
					       [Absyn.COMPONENT("value",
								NONE,
								NONE)]))])]))
*)
relation initial_env =

  rule	Env.new_frame(Env.empty_env) => env &
	Env.extend_frame_c(env, rl_type) => env' &
	Env.extend_frame_c(env', int_type) => env'' &
	Env.extend_frame_c(env'', str_type) => env'''
(*	Env.extend_frame_c(env, real_type) => env'''' &
	Env.extend_frame_c(env, integer_type) => env''''' &
	Env.extend_frame_c(env, string_type) => env'''''' *)
	----------------------------------------------
	initial_env () => env'''

end
