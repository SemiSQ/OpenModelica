module Builtin:

  with "absyn.rml"
  with "explode.rml"
  with "env.rml"

  relation initial_env : () => Env.Env

  val rl_type   : Explode.Class
  val int_type  : Explode.Class
  val str_type  : Explode.Class
  val bool_type : Explode.Class

  val real_type : Explode.Class

end

with "exp.rml"
with "types.rml"
with "mod.rml"
with "classinf.rml"

val rl_type = Explode.CLASS("RealType",false,ClassInf.R_PREDEFINED_REAL,
			    Explode.PARTS([],[],[]))
val int_type = Explode.CLASS("IntegerType",false,ClassInf.R_PREDEFINED_INT,
			     Explode.PARTS([],[],[]))
val str_type = Explode.CLASS("StringType",false,ClassInf.R_PREDEFINED_STRING,
			     Explode.PARTS([],[],[]))
val bool_type = Explode.CLASS("BooleanType",false,ClassInf.R_PREDEFINED_BOOL,
			      Explode.PARTS([],[],[]))

val real_type =
Explode.CLASS("Real",false,ClassInf.R_PREDEFINED_REAL,
	      Explode.PARTS
	      ([Explode.ELEMENT(true,
				false,
				"value",
			      	Explode.COMPONENT("value",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("RealType"),
						  Mod.NOMOD)),
	      	(* quantity *)
	      	Explode.ELEMENT(true,false,"unit",
			      	Explode.COMPONENT("unit",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("StringType"),
						  Mod.NOMOD))],
	       (* displayUnit *)
	       [],
	       []))

val integer_type =
Explode.CLASS("Integer",false,ClassInf.R_PREDEFINED_INT,
	      Explode.PARTS
	      ([Explode.ELEMENT(true,
				false,
				"value",
			      	Explode.COMPONENT("value",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("IntegerType"),
						  Mod.NOMOD)),
	      	(* quantity *)
	      	Explode.ELEMENT(true,false,"unit",
			      	Explode.COMPONENT("unit",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("StringType"),
						  Mod.NOMOD))],
	       (* displayUnit *)
	       [],
	       []))

val string_type =
Explode.CLASS("String",false,ClassInf.R_PREDEFINED_STRING,
	      Explode.PARTS
	      ([Explode.ELEMENT(true,
				false,
				"value",
			      	Explode.COMPONENT("value",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("StringType"),
						  Mod.NOMOD))],
	       [],
	       []))

val boolean_type =
Explode.CLASS("Boolean",false,ClassInf.R_PREDEFINED_BOOL,
	      Explode.PARTS
	      ([Explode.ELEMENT(true,
				false,
				"value",
			      	Explode.COMPONENT("value",
						  Types.ATTR(Types.NODIM,
							     false,
							     Types.VAR,
							     Types.BIDIR),
						  Exp.IDENT("BooleanType"),
						  Mod.NOMOD))],
	       [],
	       []))


relation initial_env =

  rule	Env.open_scope(Env.empty_env) => env &
	Env.extend_frame_c(env, rl_type, Mod.NOMOD) => env' &
	Env.extend_frame_c(env', int_type, Mod.NOMOD) => env'' &
	Env.extend_frame_c(env'', str_type, Mod.NOMOD) => env''' &
	Env.extend_frame_c(env''', bool_type, Mod.NOMOD) => env'''' &
	Env.extend_frame_c(env'''', real_type, Mod.NOMOD) => env''''' &
	Env.extend_frame_c(env''''', integer_type, Mod.NOMOD) => env'''''' &
	Env.extend_frame_c(env'''''', string_type, Mod.NOMOD) => env''''''' &
	Env.extend_frame_c(env''''''', boolean_type, Mod.NOMOD) => env''''''''
	----------------------------------------------
	initial_env () => env''''''''

end
