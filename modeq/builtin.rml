(**
 ** file:	 builtin.rml
 ** description: Builting types and variables
 **
 ** RCS: $Id$
 **
 **)

(** - Module header
 **
 ** The only exported relation is `initial_env'.
 **)

module Builtin:

  with "absyn.rml"
  with "explode.rml"
  with "env.rml"

  val rl_type   : SCode.Class
  val int_type  : SCode.Class
  val str_type  : SCode.Class
  val bool_type : SCode.Class

  val real_type : SCode.Class

  relation initial_env : () => Env.Env

end

(**)

with "exp.rml"
with "types.rml"
with "classinf.rml"

(** - The primitive types *)

val rl_type = SCode.CLASS("RealType",false,Absyn.R_PREDEFINED_REAL,
			  SCode.PARTS([],[],[]))
val int_type = SCode.CLASS("IntegerType",false,Absyn.R_PREDEFINED_INT,
			   SCode.PARTS([],[],[]))
val str_type = SCode.CLASS("StringType",false,Absyn.R_PREDEFINED_STRING,
			   SCode.PARTS([],[],[]))
val bool_type = SCode.CLASS("BooleanType",false,Absyn.R_PREDEFINED_BOOL,
			    SCode.PARTS([],[],[]))

(** - The `Real' type *)

val real_type =
SCode.CLASS("Real",false,Absyn.R_PREDEFINED_REAL,
	    SCode.PARTS
	    ([(* quantity *)
	      SCode.COMPONENT("unit",true,false,
			      Absyn.ATTR([],
					 false,
					 Absyn.VAR,
					 Absyn.BIDIR),
			      Absyn.IDENT("StringType"),
			      SCode.NOMOD)],
	     (* displayUnit *)
	     [],
	     []))

(** - The `Integer' type *)

val integer_type =
SCode.CLASS("Integer",false,Absyn.R_PREDEFINED_INT,
	    SCode.PARTS
	    ([(* quantity *)
	      SCode.COMPONENT("unit",true,false,
			      Absyn.ATTR([],
					 false,
					 Absyn.VAR,
					 Absyn.BIDIR),
			      Absyn.IDENT("StringType"),
			      SCode.NOMOD)],
	     (* displayUnit *)
	     [],
	     []))

(** - The `String' type *)

val string_type =
SCode.CLASS("String",false,Absyn.R_PREDEFINED_STRING,
	    SCode.PARTS
	    ([],
	     [],
	     []))

(** - The `Boolean' type *)

val boolean_type =
SCode.CLASS("Boolean",false,Absyn.R_PREDEFINED_BOOL,
	    SCode.PARTS
	    ([],
	     [],
	     []))

(** - The `time' variable *)

(* FIXME: Shuold contain components (attributes) from the real Real type *)
val time_var =
Env.FRAMEVAR("time", Absyn.ATTR([] , false, Absyn.VAR, Absyn.BIDIR),
	     Types.T_COMPLEX(ClassInf.TYPE_REAL("time"), []), Env.UNBOUND)

(** - Initial environment *)

relation initial_env =

  rule	Env.open_scope(Env.empty_env) => env1 &
	Env.extend_frame_c(env1, rl_type) => env2 &
	Env.extend_frame_c(env2, int_type) => env3 &
	Env.extend_frame_c(env3, str_type) => env4 &
	Env.extend_frame_c(env4, bool_type) => env5 &
	Env.extend_frame_c(env5, real_type) => env6 &
	Env.extend_frame_c(env6, integer_type) => env7 &
	Env.extend_frame_c(env7, string_type) => env8 &
	Env.extend_frame_c(env8, boolean_type) => env9 &
	Env.extend_frame_c(env9, boolean_type) => env10 &
	Env.extend_frame_v(env10, time_var) => env11
	----------------------------------------------
	initial_env () => env11

end
