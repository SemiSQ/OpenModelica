(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with cache.rml; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)
(**
 ** file:	 cache.rml
 ** module:      Cache
 ** description: Caching of classes for faster lookup
 **
 ** RCS: $Id$ 
 **
 ** To speed up the lookup of classes in the environment, class lookup is cached.
 ** For the cache to be completely generic, we need two keys for retrieving a cached class:
 ** The first is the absolute path from where the class is looked up. 
 ** The second is the class name itself. Both are needed since lookup of the same class name
 ** from two different absolute path locations (e.g. lookup of a class from two different packages) CAN
 ** lead to two different class definitions.
 ** To make the cache even more generic, we also cache variables and types, according to the 
 ** definitions made in the Env module.
 **)

module Cache:

  with "env.rml"
  with "absyn.rml"
  with "explode.rml"
  with "types.rml"

type Ident = string

datatype Cache = CACHE of PathItem list * EnvItem list

(** A cache consists of a list of PathItems, for lookup of classes from inside other 
 ** classes and an EnvItem list, for lookup of classnames from the top scope.
 **)

datatype PathItem = PATHITEM of Ident *
				PathItem list *
				EnvItem list 

(** The PathItem datatype corresponds to one level in the absolute path where lookup is performed 
 ** from. I.e. a node in the list of partially instanitated partents of a class 
 **)

datatype EnvItem = ENVITEM of Ident * (* The class/type/variable name *)
			Env.Item option * (* The cached item, if present *)
			EnvItem list (* A list of subclasses *)
(** The EnvItem datatype holds the actual cached items. Togehter with the PathItem datatype it 
 ** forms a two-level tree, where the first level is built up from nodes of PathItem types, and 
 ** the second level is built from nodes of type EnvItem. Lookup in the cache then become a simple
 ** traversal of the tree. An alternative implementation to this would be to use a hash-table, but 
 ** this data structure is not available in RML. 
 **)

relation add_class : (Cache, SCode.Class, Env.Env, Absyn.Path option, Absyn.Path) => Cache
	
relation add_variable: (Cache,Types.Var, Absyn.Path option, Absyn.Path) => Cache
	
relation add_type: (Cache, Types.Type, Absyn.Path option, Absyn.Path) => Cache

relation get_class: (Cache, Absyn.Path option, Absyn.Path) => (SCode.Class, Env.Env)

relation get_variable: (Cache, Absyn.Path option, Absyn.Path) => Types.Var

relation get_type: (Cache, Absyn.Path option, Absyn.Path) => Types.Type

relation print_cache: (Cache) => ()

val empty_cache : Cache

end
