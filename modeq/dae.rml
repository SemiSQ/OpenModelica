(** file: dae.rml
 **
 ** This file is not really mine.  It will be rewritten later.
 **)

(** - Module header *)

module DAE:
  
  with "exp.rml"

  type Ident = string

  datatype VarKind = LOCAL | PARAM | CONST

  datatype Type = REAL | INT | BOOL | STRING

  datatype DAEcomp = VAR of Exp.ComponentRef * VarKind * Type
		   | VARVAL of Ident * VarKind * Exp.Exp
		   | EQUATION of Exp.Exp
		   | COMP of Ident * DAEform
  and	 DAEform = DAE of DAEcomp list
	  
  relation dump: DAEform => ()
	  
end

(** - Relations *)

relation dump_kind =

  rule	print "  constant  "
	--------------------
	dump_kind CONST
	
  rule	print "  parameter "
	--------------------
	dump_kind PARAM
	
  rule	print "  variable  "
	--------------------
	dump_kind LOCAL

end

relation dump_type =

  rule	print "integer "
	----------------
	dump_type INT

  rule	print "real    "
	----------------
	dump_type REAL

  rule	print "bool    "
	----------------
	dump_type BOOL

  rule	print "string  "
	----------------
	dump_type STRING

end

relation dump_comp: DAEcomp => () =
	
  rule	dump_kind kind & dump_type typ &
 	Exp.print_component_ref id & print "\n"
	--------------------------------------
	dump_comp(VAR(id, kind, typ))
	
  rule	dump_kind kind & print id &
	print "=" & Exp.print_exp ex & print "\n"
	--------------------------------------
	dump_comp(VARVAL(id, kind, ex))
	
  rule	print "  " & Exp.print_exp eq & print "\n"
	--------------------------------------
	dump_comp(EQUATION(eq))
	
  rule	print "{ begin " & print id & print " }\n" &
	dump contents &
	print "{ end " & print id & print " }\n"
        --------------------------------------
        dump_comp ( COMP(id, contents))

end

relation dump_var : DAEcomp => () =
	
  rule	dump_kind kind & dump_type typ &
 	Exp.print_component_ref id & print "\n"
	--------------------------------------
	dump_var(VAR(id, kind, typ))
	
  axiom	dump_var _

end

relation dump_equation : DAEcomp => () =
	
  rule	print "  " & Exp.print_exp eq & print "\n"
	--------------------------------------
	dump_equation(EQUATION(eq))
	
  axiom	dump_equation _

end

relation dump_vars: DAEcomp list => () =
	
  axiom	dump_vars []
	
  rule	dump_var first &
	dump_vars rest
	-------------------
	dump_vars first :: rest

end

relation dump_equations: DAEcomp list => () =
	
  axiom	dump_equations []
	
  rule	dump_equation first &
	dump_equations rest
	-------------------
	dump_equations first :: rest

end

relation dump: DAEform => () =
	
  rule	dump_vars l &
	print "\nequations\n\n" &
	dump_equations l
	----------------
	dump DAE(l)

end
