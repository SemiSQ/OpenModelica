(** file: dae.rml
 **
 ** This file is not really mine.  It will be rewritten later.
 **)

(** - Module header *)

module DAE:
  
  with "exp.rml"
  with "dump.rml"

  type Ident = Exp.Ident

  datatype DAEcomp = VAR of Ident * VarKind
		   | VARVAL of Ident * Types.VarType * Exp.Exp
		   | EQUATION of Exp.Exp
		   | COMP of Ident * DAEform
  and	 DAEform = DAE of DAEcomp list
	  
  relation dump: DAEform => ()
	  
end

(** - Relations *)

relation dump_kind =

  rule	print "  constant "
	--------------------
	dump_kind Types.CONST
	
  rule	print "  parameter "
	--------------------
	dump_kind Types.PARAM
	
  rule	print "  local "
	--------------------
	dump_kind Types.VAR

end

relation dump_comp: DAEcomp => () =
	
  rule	dump_kind kind & print id & print "\n"
	--------------------------------------
	dump_comp(VAR(id, kind))
	
  rule	dump_kind kind & print id &
	print "=" & Dump.dump_exp ex & print "\n"
	--------------------------------------
	dump_comp(VARVAL(id, kind, ex))
	
  rule	print "  " & Dump.dump_exp eq & print "\n"
	--------------------------------------
	dump_comp(EQUATION(eq))
	
  rule	print "{ begin " & print id & print " }\n" &
	dump contents &
	print "{ end " & print id & print " }\n"
        --------------------------------------
        dump_comp ( COMP(id, contents))

end

relation dump_list: DAEcomp list => () =
	
  axiom	dump_list []
	
  rule	dump_comp first &
	dump_list rest
	-------------------
	dump_list first :: rest

end

relation dump: DAEform => () =
	
  rule	dump_list l
	-------------------
	dump DAE(l)

end
