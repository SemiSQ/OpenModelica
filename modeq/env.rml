(**
 ** file:	 env.rml
 ** module:      Env
 ** description: Environmane management
 **
 ** RCS: $Id$
 **
 ** An environment is a stack of frames, where each frame contains a
 ** number of class and variable bindings.
 **)

module Env:

  with "absyn.rml"
  with "values.rml"
  with "explode.rml"
  with "types.rml"
  with "classinf.rml"
  with "exp.rml"

  type Ident = string

  datatype Frame = FRAME of (Ident * Item) list

  datatype Item = VAR of Types.Var
		| CLASS of SCode.Class * Env
		| TYPE of Types.Type

  type Env = Frame list

  val empty_frame : Frame
  val empty_env   : Env

  relation open_scope       : Env => Env
  relation extend_frame_c   : (Env, SCode.Class) => Env
  relation extend_frame_v   : (Env, Types.Var) => Env
  relation extend_frame_t : (Env,Ident,Types.Type) => Env

end

(** - Values *)

val empty_frame = FRAME([])
val empty_env = []

(** - Relations *)

(** relation: open_scope
 **
 ** Opening a new scope in the environment mans adding a new frame on
 ** top of the stack of frames.
 **)

relation open_scope: Env => Env =

  axiom	open_scope(env) => empty_frame::env

(*  rule
	print "\nOpens scope."
	-----------
	open_scope(env) => empty_frame::env
*)
end

(** relation: extend_frame_c
 **
 ** This relation adds a class definition to the environment.
 **)

relation extend_frame_c : (Env, SCode.Class) => Env =

  axiom	extend_frame_c(env as (FRAME(items)::fs),c as SCode.CLASS(n,_,_,_))
	  => ((FRAME((n,CLASS(c,env))::items)::fs))

end

(** relation: extend_frame_v
 **
 ** This relation adds a component to the environment.
 **)

relation extend_frame_v : (Env,Types.Var) => Env =

  axiom extend_frame_v(FRAME(items)::fs,v as Types.VAR(n,_,_,_,_))
	  => (FRAME((n,VAR(v))::items)::fs)

end

(** relation: extend_frame_t
 **
 ** This relation adds a type to the environment.  Types in the
 ** environment are used for looking up constants etc. inside class
 ** definitions, such as packages.  For each type in the environment,
 ** there is a class definition with the same name in the
 ** environment.
 **)

relation extend_frame_t : (Env,Ident,Types.Type) => Env =

  axiom extend_frame_t(FRAME(items)::fs, n, t)
	  => (FRAME((n,TYPE(t))::items)::fs)

end
