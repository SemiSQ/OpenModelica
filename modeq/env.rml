(**
 ** file:	 env.rml
 ** description: Environmane management
 **
 ** RCS: $Id$
 **
 ** An environment is a stack of frames, where each frame contains a
 ** number of class and variable bindings.
 **)

module Env:

  with "absyn.rml"
  with "values.rml"
  with "explode.rml"
  with "types.rml"
  with "classinf.rml"
  with "exp.rml"

  type Binding = Types.Binding

  datatype FrameVar = FRAMEVAR of SCode.Ident
			    	* Absyn.VarAttr
			    	* Types.Type
			    	* Binding

  datatype Frame = FRAME of (SCode.Ident*FrameVar) list
			  * (SCode.Ident*SCode.Class) list

  type Env = Frame list

  val empty_frame : Frame
  val empty_env   : Env

  relation open_scope       : Env => Env
  relation extend_frame_c   : (Env, SCode.Class) => Env
  relation extend_frame_v   : (Env, FrameVar) => Env

end

val empty_frame = FRAME([],[])
val empty_env = []

relation open_scope: Env => Env =

  axiom	open_scope(env) => empty_frame::env

end

relation extend_frame_c : (Env, SCode.Class) => Env =

  axiom	extend_frame_c(FRAME(vs,cs)::fs,c as SCode.CLASS(n,_,_,_))
	  => ((FRAME(vs,(n,c)::cs)::fs))

end

relation extend_frame_v : (Env,FrameVar) => Env =

  axiom extend_frame_v(FRAME(vs,cs)::fs,v as FRAMEVAR(n,_,_,_))
	  => (FRAME((n,v)::vs,cs)::fs)

end
