(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 env.rml
 ** module:      Env
 ** description: Environmane management
 **
 ** RCS: $Id$
 **
 ** An environment is a stack of frames, where each frame contains a
 ** number of class and variable bindings.
 **)

module Env:

  with "absyn.rml"
  with "values.rml"
  with "explode.rml"
  with "types.rml"
  with "classinf.rml"
  with "exp.rml"

  type Ident = string

  datatype Frame = FRAME of Ident option *  (* Class name *)
			    HashTable * (* List of classes and variables which must be uniquely named*)
			    HashTable * (* List of types, which DOES NOT be uniquely named, eg. size have several types*)		 
			    Item list * (* list of unnamed items (imports)**) 
			    Absyn.Path list * (* list of inherited classes *)
			    bool  (* encapsulated *)
  (* bool=true means that FRAME is created due to encapsulated class  *)

  datatype Item = VAR of Types.Var * (SCode.Element*Types.Mod) option * bool
		| CLASS of SCode.Class * Env
		| TYPE of Types.Type list (* list since several types with the same name can exist in the same scope (overloading) *)
		| IMPORT of Absyn.Import

  type Env = Frame list

  datatype HashTable = HASHTABLE of int (*size*) 
				    * int (* number of entries*)
				    * HashItems vector
  type HashItems = HashItem list

  datatype HashItem = HASHITEM of Key (* Key *)
				* Value option(* Value *)

  datatype HashAddRetVal =  UPDATED | CREATED

  type Key = Ident

  type Value = Item


  val empty_env   : Env
 
  relation new_frame : (bool,int) => Frame
  relation open_scope       : (Env,bool,int) => Env
  relation name_scope: (Env,Ident) => Env 
  relation add_inherits: (Env,Absyn.Path) => Env	  
  relation extend_frame_c   : (Env, SCode.Class) => Env
  relation extend_frame_classes   : (Env, SCode.Program) => Env
  relation extend_frame_v   : (Env, Types.Var,(SCode.Element*Types.Mod) option,bool) => Env
  relation update_frame_v   : (Env, Types.Var,bool) => Env
  relation extend_frame_t : (Env,Ident,Types.Type) => Env
  relation extend_frame_i : (Env, Absyn.Import) => Env
  relation top_frame : Env => Frame
  relation get_env_path: (Env) => Absyn.Path option
  relation print_env_path: (Env) => ()
  relation print_env        : Env => ()
	  
  relation print_env_graphviz : (Env * string) => ()

  relation print_frame      : Frame => ()

  relation hash_get: (HashTable, Key, Key => int) => Value 
  relation hash_add: (HashTable, Key, Value, Key => int) => (HashTable, HashAddRetVal) 
  relation myhash: Key => int 
  relation print_hashtable: (HashTable ) => () 
end



with "dump.rml"
with "graphviz.rml"
with "dae.rml"
with "print.rml"
with "util.rml"
with "system.rml"

(** - Values *)

val empty_env = []

(** - Relations *)

(** relation: new_frame
 ** This relation creates a new frame, which includes setting up the hashtable for the frame 
**)
relation new_frame: (bool, int) => Frame =

  rule	hash_new(size) => ht &
	hash_new(size) => httypes 
	--------------------
	new_frame(enc,size) => FRAME(NONE,ht,httypes,[],[],enc)	
end		 

(** relation: open_scope
 **
 ** Opening a new scope in the environment mans adding a new frame on
 ** top of the stack of frames.
 **)

relation open_scope: (Env,bool,int) => Env =

  rule	(* Default value if zero is given. *)
	new_frame(encflag,10) => frame
	------------------------------
	open_scope(env,encflag,0) =>  frame::env

  rule	new_frame(encflag,initialsize) => frame
	------------------------------
	open_scope(env,encflag,initialsize) =>  frame::env

end

(** relation: name_scope
 **
 ** This relation names the current scope, giving it an identifier.
 ** Scopes needs to be named for several reasons. First, it is needed for debugging purposes, since
 ** it is easier to follow the environment if we know what the current class being instantiated is.
 **
 ** Secondly, it is needed when expanding type names in the context of flattening of the inheritance
 ** hierarchy. The reason for this is that types of inherited components needs to be expanded such that ** the types can be looked up from the environment of the base class.
 **)
 
relation name_scope: (Env,Ident) => Env =

  axiom	name_scope(FRAME(_,ht,httypes,imps,inh,encflag)::res,id) => FRAME(SOME(id),ht,httypes,imps,inh,encflag)::res

end

(** relation: add_inherits
 ** This relation adds a Absyn.Path to the inherits list of a scope. It is used
 ** for lookup though the inherited classes of a class.
**)
relation add_inherits: (Env,Absyn.Path) => Env =
	
	(* TODO: Should probably check if it is allready in the list *)
  axiom	add_inherits (FRAME(id,ht,httypes,imps,inh,encflag)::res,path) 
	  
	  => FRAME(id,ht,httypes,imps,path::inh,encflag)::res
end

(** relation: extend_frame_c
 **
 ** This relation adds a class definition to the environment.
 **)

relation extend_frame_c : (Env, SCode.Class) => Env =

(*
  rule	Print.print_buf "extend_frame_c:\n" &
	print_env env &
	Print.print_buf " + " &
	Print.print_buf n &
	Print.print_buf " = " &
	print_env ((FRAME((n,CLASS(c,env))::items,encflag)::fs)) &
	Print.print_buf "\n" 
	----------------
	extend_frame_c(env as (FRAME(id,items,encflag)::fs),c as SCode.CLASS(n,_,_,_))
	  => ((FRAME(id,(n,CLASS(c,env))::items,encflag)::fs))
*)

  rule	hash_add(ht,n,CLASS(c,env),System.hash) => (ht',retval)
	--------------------------
	extend_frame_c(env as (FRAME(id,ht,httypes,imps,inh,encflag)::fs),c as SCode.CLASS(n,_,_,_,_))
	  => ((FRAME(id,ht',httypes,imps,inh,encflag)::fs))

end

relation extend_frame_classes : (Env, SCode.Program) => Env =

  axiom	extend_frame_classes(env,[]) => env

  rule	extend_frame_c(env,c) => env' &
	extend_frame_classes(env',cs) => env''
	-------------------------------------
	extend_frame_classes(env,c::cs) => env''
end

(** relation: extend_frame_v
 **
 ** This relation adds a component to the environment.
 **)

relation extend_frame_v : (Env,Types.Var,(SCode.Element*Types.Mod) option,bool) => Env =
	
(*
  rule	Print.print_buf "extend_frame_v:\n" &
   print_env env &
   Print.print_buf " + " &
   Print.print_buf n &
	Print.print_buf " = " &
   print_env (FRAME(id,(n,VAR(v))::items,encflag)::fs) &
   Print.print_buf "\n" 
   ----------------
   extend_frame_v(env as (FRAME(id,items,encflag)::fs),v as Types.VAR(n,_,_,_,_))
   => (FRAME(id,(n,VAR(v))::items,encflag)::fs)
 *)
  rule	hash_add(ht,n,VAR(v,c,i),System.hash) => (ht',retval)
	---------------------------------------
	extend_frame_v(FRAME(id,ht,httypes,imps,inh,encflag)::fs,v as Types.VAR(n,_,_,_,_),c,i)
	    => (FRAME(id,ht',httypes,imps,inh,encflag)::fs)
	    
end
	
(** relation: update_frame_v
 **
 ** This relation updates a component already added to the environment, but that prior to the
 ** update did not have any binding. (I.e this relation is called in the second stage of 
 **  instantiation with declare before use.)
**)
	
	
relation update_frame_v : (Env,Types.Var,bool) => Env =
  axiom	update_frame_v ([],_,i) => []

  rule	hash_get(ht,n,System.hash) => VAR(_,c,_) &
        hash_add(ht,n,VAR(v,c,i),System.hash) => (ht',UPDATED)
	------------------------
	update_frame_v (FRAME(sid,ht,httypes,imps,inh,encflag)::fs, v as Types.VAR(n,_,_,_,_),i)
	  => (FRAME(sid,ht',httypes,imps,inh,encflag)::fs)

  rule	(* Also check frames above, e.g. when variable is in base class *)
	update_frame_v(fs,v,i) => frames
	--------------
	update_frame_v(FRAME(sid,ht,httypes,imps,inh,encflag)::fs,v as Types.VAR(n,_,_,_,_),i)
	  => (FRAME(sid,ht,httypes,imps,inh,encflag)::frames)

  rule	Print.print_buf "- update_frame_v, variable " & Print.print_buf n &
	Print.print_buf " not found\n rest of env:" &
	print_env fs & Print.print_buf "\n" 
	--------------
	update_frame_v(FRAME(sid,ht,httypes,imps,inh,encflag)::fs, Types.VAR(n,_,_,_,_),_)
	  => (FRAME(sid,ht,httypes,imps,inh,encflag)::fs)

  rule	Print.print_buf "- update_frame_v failed\n" &
	Print.print_buf "  - variable: " & Types.print_var v &
	Print.print_buf "\n" 
	----------------
	update_frame_v(_,v as Types.VAR(id,_,_,_,_),_) => fail
end
	
(** relation: extend_frame_t
 **
 ** This relation adds a type to the environment.  Types in the
 ** environment are used for looking up constants etc. inside class
 ** definitions, such as packages.  For each type in the environment,
 ** there is a class definition with the same name in the
 ** environment.
 **)
		 
relation extend_frame_t : (Env,Ident,Types.Type) => Env =

(*
  rule	Print.print_buf "extend_frame_t:\n" &
	print_env env &
	Print.print_buf " + " &
	Print.print_buf n &
	Print.print_buf " = " &
	print_env (FRAME(sid,(n,TYPE(t))::items,encflag)::fs) &
	Print.print_buf "\n" 
	----------------
	extend_frame_t(env as (FRAME(sid,items,encflag)::fs), n, t)
	  => (FRAME(sid,(n,TYPE(t))::items,encflag)::fs)
*)

	
  rule	(* Other types with that name allready exist, add this type as well *)
	hash_get(httypes,n,System.hash) => TYPE(tps) &
	hash_add(httypes,n,TYPE(t::tps),System.hash) => (httypes',retval)
	-----------------------------
	extend_frame_t(FRAME(sid,ht,httypes,imps,inh,encflag)::fs, n, t)
	  => (FRAME(sid,ht,httypes',imps,inh,encflag)::fs)

  rule	(* No other types exists *)
	not hash_get(httypes,n,System.hash) => TYPE(_) &
	hash_add(httypes,n,TYPE([t]),System.hash) => (httypes',retval)
	-----------------------------
	extend_frame_t(FRAME(sid,ht,httypes,imps,inh,encflag)::fs, n, t)
	  => (FRAME(sid,ht,httypes',imps,inh,encflag)::fs)
end

relation extend_frame_i : (Env,Absyn.Import) => Env =
	      
  axiom	extend_frame_i(FRAME(sid,ht,httypes,imps,inh,encflag)::fs,imp)
	  => (FRAME(sid,ht,httypes, IMPORT(imp)::imps,inh,encflag)::fs)
end

relation top_frame : Env => Frame =
  axiom	top_frame([fr]) => fr
  rule	top_frame(lst) => fr
	--------------------
	top_frame(elt::(lst as (_::_))) => fr
end

(** relation: get_env_path
 **
 ** This relation returns all partially instantiated parents as an Absyn.Path option
 ** I.e. it collects all identifiers of each frame until it reaches the topmost
 ** unnamed frame. If the environment is only the topmost frame, NONE is returned.
**)
relation get_env_path: Env => Absyn.Path option =

  axiom	get_env_path ([FRAME(SOME(id),_,_,_,_,_),FRAME(NONE,_,_,_,_,_)]) => SOME(Absyn.IDENT(id))
	
  rule	get_env_path(rest) => SOME(path) &
	Absyn.join_paths(path,Absyn.IDENT(id)) => path'
	----------------------------------------------
	get_env_path(FRAME(SOME(id),_,_,_,_,_)::rest) =>SOME(path')

  axiom	get_env_path(_) => NONE
end

relation print_env_path: Env => () =

  rule	get_env_path(env) => SOME(path) &
	Absyn.path_string(path) => pathstr &
	Print.print_buf pathstr
	---------------
	print_env_path(env) => ()

  rule	Print.print_buf "TOPENV"
	---------------
	print_env_path(env) => ()

end
relation print_env : Env => () =

  rule	Print.print_buf "Empty env\n"
	-------------------
	print_env []

  rule	print_frame fr &
	print_env frs
	------------
	print_env fr::frs

end


relation print_frame : Frame => () =

  rule	Print.print_buf "FRAME: " &
	Print.print_buf sid &
	Print.print_buf " (enc=" &
        Dump.print_bool  encflag  &
        Print.print_buf ") classes and vars:" &
	print_hashtable ht &
	Print.print_buf "   Types:" &
	print_hashtable httypes &
	Print.print_buf "   Imports:" &
	print_imports imps &
	Print.print_buf "   Inherits:" &
	Dump.print_list(inh,Dump.print_path,", ") &
	Print.print_buf "\n"
	--------------------------------------------
	print_frame FRAME(SOME(sid),ht,httypes,imps,inh,encflag)

  rule	Print.print_buf "FRAME: " &
	Print.print_buf "unnamed" &
	Print.print_buf " (enc=" &
        Dump.print_bool  encflag  &
        Print.print_buf ") " &
	print_hashtable ht &
	Print.print_buf "   Types:" &
	print_hashtable httypes &
	Print.print_buf "   Imports:" &
	print_imports imps &
	Print.print_buf "   Inherits:" &
	Dump.print_list(inh,Dump.print_path,", ") &
	Print.print_buf "\n"
	--------------------------------------------
	print_frame FRAME(NONE,ht,httypes,imps,inh,encflag)

end


relation print_frame_contents: (Ident * Item) list => () =

  axiom	print_frame_contents [] 

  rule	print_frame_element e
	-------------------------
	print_frame_contents [e as (n,i)]

  rule	print_frame_element e & Print.print_buf "," & print_frame_contents rst
	------------------------------------------------
	print_frame_contents ((e as (n,i))::rst)
end

relation print_imports:  Item list => () =

  axiom	print_imports [] 

  rule	print_frame_element (("",e))
	-------------------------
	print_imports [e]

  rule	print_frame_element (("",e)) & Print.print_buf "," & print_imports rst
	------------------------------------------------
	print_imports (e::rst)
end


relation print_frame_element: (Ident * Item) => () =

  rule	Print.print_buf "v:" & Print.print_buf n & Print.print_buf "(" &  SCode.print_element elt & Print.print_buf ") ["  &
	Types.print_type tp & Print.print_buf "]" & Print.print_buf "{" & Types.print_var tv & Print.print_buf "}" &
	Print.print_buf " "
	-------
	print_frame_element ((n,VAR(tv as Types.VAR(_,_,_,tp,_),SOME((elt,_)),i)))

  rule	Print.print_buf "v:" & Print.print_buf n  & 
	Print.print_buf " "
	-------
	print_frame_element ((n,VAR(Types.VAR(_,_,_,_,bnd),NONE,i)))

  rule	Print.print_buf "c:" & Print.print_buf n &
	Print.print_buf " "
	-------
	print_frame_element ((n,CLASS(_,_)))

  rule	Print.print_buf "t:" & Print.print_buf n &
	list_length(lst) => len &
	int_string(len) => lenstr &
	Print.print_buf "(" & Print.print_buf lenstr & 
	Print.print_buf ") "
	-------
	print_frame_element ((n,TYPE(lst)))

  rule	Print.print_buf "imp:" & Dump.print_import imp &
	Print.print_buf " "
	-------
	print_frame_element ((n,IMPORT(imp)))
end


relation print_env_graphviz : (Env * string) => () =

  rule	build_env_graphviz ((env,str)) => r &
	Graphviz.dump(r)
	----------------
	print_env_graphviz ((env,str))

end

relation build_env_graphviz : (Env * string) => Graphviz.Node =

  rule	string_append ("ROOT: ", str) => str' &
	build_env_graphviz_2 env => nodelist
	------------------------------------
	build_env_graphviz ((env,str)) => Graphviz.NODE(str',[],nodelist)

end

relation build_env_graphviz_2 : Env => Graphviz.Node list =

  axiom	build_env_graphviz_2 [] => []

  rule	build_env_graphviz_2 rest => nodelist &
	build_frame_graphviz frame => node
	----------------------------------
	build_env_graphviz_2 frame::rest => node::nodelist

end

relation is_var_item = 
  axiom	is_var_item ((_,VAR(_,_,_))) 
end

relation is_class_item = 
  axiom	is_class_item ((_,CLASS(_,_))) 
end

relation is_type_item = 
  axiom	is_type_item ((_,TYPE(_))) 
end

relation build_frame_graphviz : Frame => Graphviz.Node =

  axiom	build_frame_graphviz FRAME(sid,ht,httypes,imps,inh,encflag) 
	  => Graphviz.NODE("FRAME",[],[])
end

relation build_item_listnode : ((Ident * Item) list, (Ident * Item) => (), string) 
	  => Graphviz.Node =

  rule	DAE.get_matching (items, cond) => selitems &
	build_item_listnode_2 (selitems, 1) => node
	--------------------------------------------------------
	build_item_listnode (items, cond, name) 
	  => Graphviz.NODE(name, [], [node])

end

relation build_item_listnode_2 : ((Ident * Item) list, int) 
	  => Graphviz.Node =

  rule	DAE.build_gr_strlist (items, build_item_str, 10) => (strlist, []) &
	int_string count => cstr
	--------------------------------------------------------
	build_item_listnode_2 (items, count) 
	  => Graphviz.LNODE(cstr, strlist, [Graphviz.box], [])

  rule	DAE.build_gr_strlist (items, build_item_str, 10) => (strlist, ignored) &
	int_string count => cstr &
	int_add (count, 1) => count' &
	build_item_listnode_2 (ignored, count') => restnode 
	--------------------------------------------------------
	build_item_listnode_2 (items, count) 
	  => Graphviz.LNODE(cstr, strlist, [Graphviz.box], [restnode])

end

relation build_item_str : (Ident * Item) => string =

  rule	string_append ("VAR: ",id) => s
	------------------------------
	build_item_str ((id, VAR(_,_,_))) => s

  rule	(*build_env_graphviz env => r &*)
	string_append ("CLASS: ", id) => s
	----------------------------------
	build_item_str ((id, CLASS(cls, env))) => s

  rule	string_append ("TYPE: ", id) => s
	---------------------------------
	build_item_str ((id, TYPE(_))) => s

end

(*
relation build_item_graphviz : (Ident, Item) => Graphviz.Node =

  axiom	build_item_graphviz (id, VAR(_)) => Graphviz.LNODE("VAR",[id],[],[])

  axiom	build_item_graphviz (id, CLASS(cls, env)) => Graphviz.LNODE("CLASS",[id],[],[])

  axiom	build_item_graphviz (id, TYPE(_)) => Graphviz.LNODE("TYPE",[id],[],[])

end
*)


(** HashTable implementation *)

relation myhash: Key => int =

  rule	System.hash str => res
	------------
	myhash(str) => res
end

relation empty_hashlist: (int) => HashItems list =
  axiom	empty_hashlist(0) => []

  rule	int_sub(s,1) => s1 &
	empty_hashlist(s1) => res
	& let oneelt = []
	-------------------------
	empty_hashlist(s) => oneelt::res
end

relation empty_hashvec: int => HashItems vector =

  rule	empty_hashlist(s) => lst &
	list_vector(lst) => vec
	--------------------
	empty_hashvec(s) => vec
end

relation hash_new: (int) => HashTable =

  rule	empty_hashvec(hashsize) => vec
	-----------------------------
	hash_new(hashsize)  => HASHTABLE(hashsize,0,vec)

end

relation hash_add: (HashTable, Key, Value, Key => int) => (HashTable, HashAddRetVal) =

  rule	int_mul(size,12) => foursize &
	int_gt(n,foursize) => true &
	hash_expand(ht,myhash) => ht' &
	hash_add(ht',key,value,myhash) => (ht'',retval)
	----------------------
	hash_add(ht as HASHTABLE(size,n,vec),key,value,myhash) => (ht'',retval)
	
  rule	(* Adding in empty slot *)
	hashfunc(key) => index &
	int_mod(index,size) => index' &
	vector_nth(vec,index') => hitems &
	update_hashitems(hitems,HASHITEM(key,SOME(value))) => (hitems',retval) &	
(* Does not work yet... 
	System.vector_setnth(vec,index',hitems') => vec' &*)
	vector_list(vec) => veclist &

	int_add(index',1) => index'' &
	Util.list_replaceat(hitems',index'',veclist) => veclist' &
	list_vector(veclist') => vec' &
	int_add(n,1) => n' 
(*	& int_string(n') => str & print "\n numelts: " & print str &
	int_string(size) => str & print " size: " & print str *)
(*	& print "updated htable: \n" 
	& print_hashtable HASHTABLE(size,n',vec') *)
	------------------------
	hash_add (HASHTABLE(size,n,vec),key, value, hashfunc) 
	  => (HASHTABLE(size,n', vec'), retval)

  rule	print "hash_add failed\n"
	-----------------------
	hash_add(_,_,_,_) => fail
end 


relation hash_get: (HashTable, Key, Key => int) => Value =

  rule	hashfunc(key) => index &
	int_mod(index,size) => index' &
(*	print "getting, index=" & int_string index' => s & print s & print "\n" &*)
	vector_nth(vec,index') => hitems &
(*	print "got hitems\n" &*)
	get_hashitem(hitems,key) => SOME(value)
(*	& print " got value\n" *)
	-----------------------------------------
	hash_get(HASHTABLE(size,n,vec), key, hashfunc) 
	  => value

(*  rule	print "hash_get failed\n"
	-----------------------
	hash_get(_,_,_) => fail*)

end

(** relation: hash_expand
 ** This relation creates a new hashtable with the size 1.4 * old size. It then copies all elements of the old
 ** hash table to the new one.
**)
relation hash_expand: (HashTable,Key => int) => HashTable =

  rule	(* For small values, grow with factor 3 *)
	int_lt(size,500) => true &
	int_mul(size,12) => newsize &
	hash_new(newsize) => newht &
	get_all_hitems(vec) => allhitems &
	add_hitems(allhitems,newht,myhash) => newht'
	------------------------------------	
	hash_expand(HASHTABLE(size,n,vec),myhash) => newht'

  rule	(* For large values, grow with factor 2 *)
	int_lt(size,500) => true &
	int_mul(size,2) => newsize &
	hash_new(newsize) => newht &
	get_all_hitems(vec) => allhitems &
	add_hitems(allhitems,newht,myhash) => newht'
	------------------------------------	
	hash_expand(HASHTABLE(size,n,vec),myhash) => newht'

  rule	print "hash_expand failed\n" 
	-----------------------
	hash_expand(_,_) => fail
end

relation get_all_hitems: HashItems vector => HashItem list =
	
  rule	vector_list(vec) => list &
	Util.list_flatten(list) => res
	-------------------------
	get_all_hitems(vec) => res

  rule	print "get_all_hitems failed\n" 
	-----------------
	get_all_hitems(vec) => fail
end

relation add_hitems: (HashItem list, HashTable,Key => int) => HashTable =

  axiom	add_hitems([],h,myhash) => h

  rule	hash_add(ht,key,value,myhash) => (ht',retval) &
	add_hitems(xs,ht',myhash) => ht''
	--------------------------
	add_hitems(HASHITEM(key,SOME(value))::xs,ht,myhash) => ht''

  rule	print "add_hitems failed\n" 
	----------------
	add_hitems(_,_,_) => fail
end

relation get_hashitem : (HashItems,Key) => Value option =

  axiom	get_hashitem([],_) => fail

  rule	key1 = key2 
	-----------------------------
	get_hashitem(HASHITEM(key1,value)::_,key2) => value

  rule	not key1 = key2 &
	get_hashitem(xs,key2) => value
	-----------------------
	get_hashitem(HASHITEM(key1,_)::xs, key2) => value
end
	

relation update_hashitems: (HashItems,HashItem) => (HashItems, HashAddRetVal) =

  axiom	update_hashitems([],item) => ([item], CREATED)

  rule	key1 = key2
	--------------------------
	update_hashitems(HASHITEM(key1,val1)::xs,HASHITEM(key2,val2)) 
	  => (HASHITEM(key2,val2)::xs, UPDATED)

  rule	not key1 = key2 &
	update_hashitems(xs,HASHITEM(key2,val2)) => (xs',retval)
	--------------------------
	update_hashitems(HASHITEM(key1,val1)::xs,HASHITEM(key2,val2)) 
	  => (HASHITEM(key1,val1)::xs',retval)

end


relation print_hashtable: (HashTable ) => () =

  rule	int_string(s) => str & Print.print_buf "HASHTABLE(size:" &
	Print.print_buf str & 
	int_string(n) => str2 &
	Print.print_buf " filled: " &  Print.print_buf str2 & 
	Print.print_buf ", " &
	vector_list(vec) => list &
	print_hashlist list &
	Print.print_buf  "\n" 
	----------------------
	print_hashtable(HASHTABLE(s,n,vec)) => ()
end

relation print_hashlist: HashItems list => () =

  axiom print_hashlist([]) => ()

  rule	print_hashitems(x) => () &
	Print.print_buf "; " &
	print_hashlist(xs)
	--------------
	print_hashlist(x::xs) => ()
end

relation print_hashitems: HashItems => () =

  axiom	print_hashitems([]) => ()

  rule	print_hashitem(it) => () &
	Print.print_buf ", " &
	print_hashitems(items) => ()
	-----------------------------
	print_hashitems(it::items) => ()
end

relation print_hashitem: HashItem => () =
	
  rule  print_frame_element((key,value)) 
	-----------------
	print_hashitem(HASHITEM(key,SOME(value))) => ()

  rule  Print.print_buf "NONE"
	-----------------
	print_hashitem(HASHITEM(key,NONE)) => ()
		       
end
