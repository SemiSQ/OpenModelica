(**********************************************************************
 *
 *   Environments
 *
 * An environment is a stack of frames, where each frame contains a
 * number of class and variable bindings.
 *
 **********************************************************************)

module Env:

  with "exp.rml"
  with "explode.rml"
  with "mod.rml"
  with "types.rml"
  with "classinf.rml"

  datatype FrameVar = FRAMEVAR of Explode.Ident
			    	* Types.VarAttr
			    	* Types.Type
			    	* Exp.Exp option (* equation *)

  datatype Frame = FRAME of (Explode.Ident*FrameVar) list
			  * (Explode.Ident*Explode.Class*Mod.Mod) list

  type Env = Frame list

  val empty_frame : Frame
  val empty_env   : Env

  relation new_frame        : Env => Env
  relation extend_frame_c   : (Env, Explode.Class, Mod.Mod) => Env
  relation extend_frame_v   : (Env, FrameVar) => Env

end

val empty_frame = FRAME([],[])
val empty_env = []

relation new_frame: Env => Env =

  axiom	new_frame(env) => empty_frame::env

end

relation extend_frame_c : (Env, Explode.Class, Mod.Mod) => Env =

  axiom	extend_frame_c(FRAME(vs,cs)::fs,c as Explode.CLASS(n,_,_,_),m)
	  => ((FRAME(vs,(n,c,m)::cs)::fs))

end

relation extend_frame_v : (Env,FrameVar) => Env =

  axiom extend_frame_v(FRAME(vs,cs)::fs,v as FRAMEVAR(n,_,_,_))
	  => (FRAME((n,v)::vs,cs)::fs)

end
