(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 env.rml
 ** module:      Env
 ** description: Environmane management
 **
 ** RCS: $Id$
 **
 ** An environment is a stack of frames, where each frame contains a
 ** number of class and variable bindings.
 **)

module Env:

  with "absyn.rml"
  with "values.rml"
  with "explode.rml"
  with "types.rml"
  with "classinf.rml"
  with "exp.rml"

  type Ident = string

  datatype Frame = FRAME of Ident option *  (* Class name *)
			    (Ident * Item) list * (* List of named items *)
			    bool  (* encapsulated *)
  (* bool=true means that FRAME is created due to encapsulated class  *)



  datatype Item = VAR of Types.Var * SCode.Element option * bool
		| CLASS of SCode.Class * Env
		| TYPE of Types.Type
		| IMPORT of Absyn.Import

  type Env = Frame list

  val empty_not_encapsulated_frame   : Frame
  val empty_encapsulated_frame : Frame

  
  val empty_env   : Env

  relation open_scope       : (Env,bool) => Env
  relation name_scope: (Env,Ident) => Env 
  relation extend_frame_c   : (Env, SCode.Class) => Env
  relation extend_frame_classes   : (Env, SCode.Program) => Env
  relation extend_frame_v   : (Env, Types.Var,SCode.Element option,bool) => Env
  relation update_frame_v   : (Env, Types.Var,bool) => Env
  relation extend_frame_t : (Env,Ident,Types.Type) => Env
  relation extend_frame_i : (Env, Absyn.Import) => Env
  relation top_frame : Env => Frame
  relation get_env_path: (Env) => Absyn.Path option
  relation print_env_path: (Env) => ()
  relation print_env        : Env => ()
	  
  relation print_env_graphviz : (Env * string) => ()

  relation print_frame      : Frame => ()

end

