(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 scode.rml
 ** module:      SCode
 ** description: SCode intermediate form
 **
 ** RCS: $Id$
 **
 ** This module contains data structures to describe a Modelica model
 ** in a more convenient way than the `Absyn' module does.  The most
 ** important relation in this module is the `elaborate' relation
 ** which turns an abstract syntax tree into an SCode representation.
 **)

module SCode :

  with "absyn.rml"

  (** Some definitions are borrowed from `Absyn' *)
  type Ident = Absyn.Ident
  type Path = Absyn.Path
  type Subscript = Absyn.Subscript
  type Restriction = Absyn.Restriction

  (** - Modifications *)
  datatype Mod = MOD of bool * (SubMod list) * (Absyn.Exp option)
  	       | REDECL of bool * Element list
	       | NOMOD
  datatype SubMod = NAMEMOD of Ident * Mod         (* A named component *)
		  | IDXMOD of Subscript list * Mod (* An array element *)
  (** Modifications are represented in an more structured way than in 
   ** the `Absyn' module.  Modifications using qualified names
   ** (such as in `x.y =  z') are normalized (to `x(y = z)').  And a
   ** special case when arrays are subscripted in a modification.
   **)

  (** - Programs *)
  type Program = Class list
  (** As in the AST, a program is simply a list of class definitions. *)

  (** - Classes *)
  datatype Class = CLASS of Ident		(* Name *)
			  * bool		(* Partial *)
			  * bool		(* Encapsulated *)
			  * Restriction	        (* Restricion *)
			  * ClassDef		(* Parts *)

  datatype ClassDef = PARTS of Element list
			     * Equation list
			     * Algorithm list
		    | DERIVED of Path
			       * Absyn.ArrayDim option
			       * Mod
		    | ENUMERATION of Ident list

  (** The major difference between these types and their `Absyn' *)
  (** counterparts is that the `PARTS' constructor contains separate *)
  (** lists for elements, equations and algorithms. *)


  (* - Equations *)
  datatype Equation = EQ_EXPR of Absyn.Exp	(* more later? *)
		    | EQ_IF of Absyn.Exp	(* conditional *)
			     * Equation list	(* true branch *)  
			     * Equation list	(* false branch *)
		    | EQ_EQUALS of Absyn.Exp * Absyn.Exp
		    | EQ_CONNECT of Absyn.ComponentRef * Absyn.ComponentRef
		    | EQ_FOR of Ident * Absyn.Exp * Equation list
		    | EQ_WHEN of Absyn.Exp * Equation list
  (** These are almost identical to the `Absyn' versions.  In `EQ_IF', *)
  (** the `elseif' branches are represented as normal `else' branches *)
  (** with a single `if' statement in them. *)

  (** - Algorithms *)
  datatype Algorithm = ALGORITHM of Absyn.Algorithm list
  (** The `Absyn' module uses the terminology from the grammar, where *)
  (** `algorithm' means an algorithmic statement.  But here, *)
  (** `Algorithm' means a whole algorithm section. *)

  (** - Elements *)
  datatype Element = EXTENDS of Path * Mod
		   | CLASSDEF of Ident		(* name *)
			       * bool		(* final *)
			       * bool		(* replaceable *)
			       * Class
		   | IMPORT    of Absyn.Import
		   | COMPONENT of Ident		(* component name *)
				* bool		(* final *)
				* bool		(* protected *)
				* Attributes
				* Path		(* type name *)
				* Mod
  (** There are three types of elements in a declaration, represented *)
  (** by the constructors `EXTENDS' (for `extends' clauses), *)
  (** `CLASSDEF' (for local class definitions) and `COMPONENT' (for *)
  (** local variables). *)

  (** - Attributes *)
  datatype Attributes = ATTR of Absyn.ArrayDim
			      * bool	(* flow *)
			      * Accessibility
	  		      * Absyn.Variability	(* parameter *)
			      * Absyn.Direction
			   
  datatype Accessibility = RW	(* read/write *)
			 | RO	(* read-only *)
			 | WO	(* write-only (not used) *)
  (** These are attributes that apply to a declared component. *)

  relation elaborate : Absyn.Program => Program
  relation elab_class: Absyn.Class => Class	
  relation build_mod : (Absyn.Modification option, bool) => Mod
  relation get_element_named: (Ident, Class) => Element
  relation print_mod : Mod => ()
  relation print_element : Element => ()
	  
end

with "dump.rml"
with "debug.rml"
with "print.rml"

(** relation: elaborate
 **
 ** This relation takes an `Absyn.Program' and constructs a `Program'
 ** from it.
 **)

relation elaborate : Absyn.Program => Program =

  axiom	elaborate(Absyn.PROGRAM([],_)) => []

  rule	elab_class(c) => c' &
	elaborate(Absyn.PROGRAM(cs,w)) => cs'
	-----------------------------
	elaborate(Absyn.PROGRAM(c::cs,w)) => (c'::cs')

end

(** relation: elab_class
 **
 ** This relations converts an `Absyn.Class' to a `Class'.
 **)

relation elab_class: Absyn.Class => Class =

  rule	elab_classdef d => d'
	---------------------
	elab_class(Absyn.CLASS(n,p,e,r,d)) => CLASS(n,p,e,r,d')

end


(** relation: elab_classdef
 **
 ** This relation converts an `Absyn.ClassDef' to a `ClassDef'.  For
 ** the `DERIVED' case, the conversion is fairly trivial, but for the
 ** `PARTS' case more work is needed.  The result contains separate
 ** lists for elements, equations and algorithms, which are mixed in
 ** the input.
 **)

(** LS: Divided the elab_classdef into separate relations for
 ** collecting the different parts
 **)

relation elab_classdef: Absyn.ClassDef => ClassDef =

  rule	build_mod(SOME(Absyn.CLASSMOD(a, NONE)), false) => mod
	------------------------------------------------
	elab_classdef(Absyn.DERIVED(p,d,a)) => DERIVED(p,d,mod)


  rule	elab_classdef_elements parts => els &
	elab_classdef_equations parts => eqs &
	elab_classdef_algorithms parts => als
	-------------------------------------
	elab_classdef (Absyn.PARTS(parts)) => PARTS(els,eqs,als)

	axiom elab_classdef(Absyn.ENUMERATION(lst)) => ENUMERATION(lst)
end


relation elab_classdef_elements: Absyn.ClassPart list => Element list =

  axiom	elab_classdef_elements [] => []

  rule	elab_classdef_elements rest => els &
	elab_eitemlist (es, false) => es' &
	list_append (es',els) => els'
	------------------------------
	elab_classdef_elements (Absyn.PUBLIC(es)::rest) => els'

  rule	elab_classdef_elements rest => els &
	elab_eitemlist (es, true) => es' &
	list_append (es',els) => els'
	------------------------------
	elab_classdef_elements (Absyn.PROTECTED(es)::rest) => els'


(** ignore all other than PUBLIC and PROTECTED, i.e. elements **)

  rule	elab_classdef_elements rest => els
	----------------------------------
	elab_classdef_elements _::rest => els

end


relation elab_classdef_equations: Absyn.ClassPart list => Equation list = 

  axiom	elab_classdef_equations [] => []

  rule	elab_classdef_equations rest => eqs &
	elab_equations(eql) => eql' &
	list_append (eqs, eql') => eqs'
	------------------------------
	elab_classdef_equations (Absyn.EQUATIONS(eql)::rest) => eqs'

(** ignore everthing other than equations **)
  rule	elab_classdef_equations rest => eqs
	-----------------------------------
	elab_classdef_equations _::rest => eqs

end



relation elab_classdef_algorithms: Absyn.ClassPart list => Algorithm list =

  axiom	elab_classdef_algorithms [] => []

  rule	elab_classdef_algorithms rest => als &
	let als' = ALGORITHM(al)::als
	-----------------------------
	elab_classdef_algorithms (Absyn.ALGORITHMS(al)::rest) => als'


(** ignore everthing other than algorithms **)

  rule	elab_classdef_algorithms rest => als
	------------------------------------
	elab_classdef_algorithms _::rest => als

end





(** LS: replaced this with separate collector relations above for
       elements, equations and algorithms

  axiom	elab_classdef(Absyn.PARTS([])) => PARTS([],[],[])


 Lots of unnecessary consing ahead... 
  rule	elab_classdef(Absyn.PARTS(ps)) => PARTS(els,eqs,als) &
	elab_equations(l) => l' &
	list_append(eqs,l') => eqs'
	------------------------------
	elab_classdef(Absyn.PARTS(Absyn.EQUATIONS(l)::ps))
	  => PARTS(els,eqs',als)

  rule	elab_classdef(Absyn.PARTS(ps)) => PARTS(els,eqs,als) &
	let als' = ALGORITHM(l)::als
	----------------------------
	elab_classdef(Absyn.PARTS(Absyn.ALGORITHMS(l)::ps))
	  => PARTS(els,eqs,als')

  rule	elab_classdef(Absyn.PARTS(ps)) => PARTS(els,eqs,als) &
  	elab_eitemlist(es,false) => es' &
	list_append(els,es') => els'
	------------------------------
	elab_classdef(Absyn.PARTS(Absyn.PUBLIC(es)::ps))
	  => PARTS(els',eqs,als)

  rule	elab_classdef(Absyn.PARTS(ps)) => PARTS(els,eqs,als) &
  	elab_eitemlist(es,true) => es' &
	list_append(els,es') => els'
	------------------------------
	elab_classdef(Absyn.PARTS(Absyn.PROTECTED(es)::ps))
	  => PARTS(els',eqs,als)

  rule	Print.print_buf "#-- elab_classdef failed\n"
	----------------------------------
	elab_classdef _ => fail

end	
**)




(** relation: elab_eitemlist
 **
 ** This relation converts a list of `Absyn.ElementItem' to a list of
 ** `Element'.  The boolean argument flags whether the elements are
 ** pretected. Annotations are not elaborated, i.e. they are removed when converting to SCode.
 **)

relation elab_eitemlist : (Absyn.ElementItem list, bool) => Element list =

  axiom	elab_eitemlist([],_) => []

  rule	elab_eitemlist(es,prot) => l
	----------------------------
	elab_eitemlist(Absyn.ANNOTATIONITEM(_)::es,prot) => l

  rule	elab_element(e, prot) => e' &
	elab_eitemlist(es, prot) => es' &
	list_append(e',es') => l
	---------------------
	elab_eitemlist(Absyn.ELEMENTITEM(e)::es, prot) => l
end

(** relation: elab_element
 **
 ** This relation converts an `Absyn.Element' to a list of
 ** `Element's.  The original element may declare several components
 ** at once, and those are separated to several declarations in the
 ** result.
 **)

relation elab_element : (Absyn.Element, bool) => Element list =

  rule	elab_elementspec(f,prot,s) => es
	--------------------------------
	elab_element(Absyn.ELEMENT(f,_,_,s), prot) => es

end

(** relation: elab_elementspec
 **
 ** This relation turns an `Absyn.ElementSpec' to a list of
 ** `Element's.  The boolean arguments say if the element is final and
 ** protected, respectively.
 **)

relation elab_elementspec: (bool,bool,Absyn.ElementSpec) => Element list =

  rule	elab_classdef(de) => de'
	-----------------------
	elab_elementspec(final,prot,Absyn.CLASSDEF(rp,Absyn.CLASS(n,pa,e,re,de)))
	  => [CLASSDEF(n,final,rp,CLASS(n,pa,e,re,de'))]

  rule	build_mod(SOME(Absyn.CLASSMOD(args, NONE)), false) => mod &
	Absyn.path_string(n) => ns
	--------------------------
	elab_elementspec(final,prot,Absyn.EXTENDS(n,args))
	  => [EXTENDS(n,mod)]

  axiom	elab_elementspec(_,_,Absyn.COMPONENTS(_,_,[])) => []

  rule	elab_elementspec(final,prot,Absyn.COMPONENTS(attr,t,xs)) => xs' &
	build_mod(m,false) => mod &
	(* PR. This adds the arraydimension that may be specified together with
	 the type of the component.  *)
	list_append(d,ad) => tot_dim
	--------------------------------------------------
	elab_elementspec(final,prot,
			 Absyn.COMPONENTS(attr as Absyn.ATTR(fl,pa,di,ad),t,
					  Absyn.COMPONENTITEM(Absyn.COMPONENT(n,d,m),_)::xs))
	  => COMPONENT(n,final,prot,ATTR(tot_dim,fl,RW,pa,di),t,mod)::xs'

  axiom	elab_elementspec(final,prot,Absyn.IMPORT(imp)) => [IMPORT(imp)]
end

(** relation: elab_equations
 **
 ** This relation transforms a list of `Absyn.Equation's to a list of
 ** `Equations's, by applying the `elab_equation' relation to each
 ** equation.
 **)

relation elab_equations : Absyn.EquationItem list => Equation list =

  axiom	elab_equations [] => []

  rule	elab_equation e => e' &
	elab_equations es => es'
	------------------------
	elab_equations Absyn.EQUATIONITEM(e,ann)::es => e'::es'

end


(** relation: elab_equation
 **
 ** The translation of equations are straightforward, with one
 ** exception.  `If' clauses are translated so that the SCode only
 ** contains simple `if'-`else' constructs, and no `elseif'.
 **)

(* PR Arrays seem to keep their absyn.rml structure. *)
relation elab_equation : Absyn.Equation => Equation =

  axiom	elab_equation Absyn.EQ_EXPR(e) => EQ_EXPR(e)
	
  rule	elab_equations tb => tb' &
	elab_equations fb => fb'
	------------------------
	elab_equation Absyn.EQ_IF(e,tb,[],fb) => EQ_IF(e,tb',fb')

  rule	elab_equation Absyn.EQ_IF(e,tb,[],[Absyn.EQUATIONITEM(Absyn.EQ_IF(ee,ei,eis,fb),NONE)]) => eq
	------------------------------------------------------------------
	elab_equation Absyn.EQ_IF(e,tb,(ee,ei)::eis,fb) => eq

  axiom	elab_equation Absyn.EQ_EQUALS(e1,e2) => EQ_EQUALS(e1,e2)

  axiom	elab_equation Absyn.EQ_CONNECT(c1,c2) => EQ_CONNECT(c1,c2)

  rule	elab_equations l => l'
	----------------------
	elab_equation Absyn.EQ_FOR(i,e,l) => EQ_FOR(i,e,l')

end


(** - Modification management *)

(** relation: build_mod
 **
 ** Builds an `SCode.Mod' from an `Absyn.Modification'.  The boolean
 ** argument flags whether the modification is `final'.
 **)

relation build_mod : (Absyn.Modification option, bool) => Mod =

  axiom build_mod(NONE, _) => NOMOD

  axiom	build_mod(SOME(Absyn.CLASSMOD([], e as SOME(_))), final)
	  => MOD(final,[],e)

  rule	build_args(l) => subs
	---------------------------------
	build_mod(SOME(Absyn.CLASSMOD(l,e)),final) => MOD(final,subs,e)

end

(** LS: Adding elaborate for the elementspec in the redeclaration
 **)
relation build_args : (Absyn.ElementArg list) => SubMod list =

  axiom build_args [] => []

  rule	build_args xs => subs &
	build_mod(SOME(mod),final) => mod' &
	build_sub(cref,mod') => sub
	----------------------
	build_args((Absyn.MODIFICATION(final,cref,mod)::xs)) => (sub::subs)

  rule	build_args xs => subs &
	Absyn.element_spec_name spec => n &
	(** LS:: don't know what to use for "protected", so using false **)
	elab_elementspec(final,false,spec) => elist
	---------------------------
	build_args((Absyn.REDECLARATION(final,spec)::xs))
	  => (NAMEMOD(n,REDECL(final,elist))::subs)

end

(** relation: build_sub
 **
 ** This relation converts a `ComponentRef' into a number of nested
 ** `SUBMOD's.
 **)

relation build_sub : (Absyn.ComponentRef,Mod) => SubMod =

	(* First some rules to prevent bad modifications *)

  rule	Print.print_buf "# Illegal modification of " & Dump.print_component_ref c &
	Dump.print_component_ref c & Print.print_buf "\n"
	---------------------------------------
	build_sub(c as Absyn.CREF_IDENT(_,_::_),MOD(_,_::_,_)) => fail

  rule	Print.print_buf "# Illegal modification of " &
	Dump.print_component_ref c & Print.print_buf "\n"
	---------------------------------------
	build_sub(c as Absyn.CREF_QUAL(_,_::_,_),MOD(_,_::_,_)) => fail
	
	(* Then the normal rules *)
	
  rule	build_sub_sub (ss,mod) => mod'
	------------------------------
	build_sub(Absyn.CREF_IDENT(i,ss),mod) => NAMEMOD(i,mod')

  rule	build_sub(path,mod) => sub &
	let mod = MOD(false,[sub],NONE) &
	build_sub_sub(ss,mod) => mod'
	--------------------------
	build_sub(Absyn.CREF_QUAL(i,ss,path),mod) => NAMEMOD(i,mod')

end

(** relation: build_sub_sub
 **
 ** This relation is used to handle the case when a array component is
 ** indexed in the modification, so that only one or a limitied number
 ** of array elements should be modified.
 **)

relation build_sub_sub : (Subscript list, Mod) => Mod =

  axiom	build_sub_sub ([], m) => m
  axiom	build_sub_sub (l, m) => MOD(false,[IDXMOD(l,m)],NONE)

end

relation get_element_named: (Ident, Class) => Element =
	
  rule	get_element_named_from_elts(id,elts) => elt
	----------------------------------------
	get_element_named(id,CLASS(_,_,_,_,PARTS(elts,_,_))) => elt
end

relation get_element_named_from_elts: (Ident, Element list) => Element =

  rule	not id1 = id2 &
	get_element_named_from_elts(id2,xs) => elt
	---------------------------
	get_element_named_from_elts(id2,COMPONENT(id1,_,_,_,_,_)::xs) => elt
	
  rule	not id1 = id2 &
	get_element_named_from_elts(id2,xs) => elt
	---------------------------
	get_element_named_from_elts(id2,CLASSDEF(id1,_,_,_)::xs) => elt

  rule	get_element_named_from_elts(id2,xs) => elt
	---------------------------
	get_element_named_from_elts(id2,EXTENDS(_,_)::xs) => elt

  rule	id1 = id2
	--------------------
	get_element_named_from_elts(id2,(comp as COMPONENT(id1,_,_,_,_,_))::_) => comp

  rule	id1 = id2
	--------------------
	get_element_named_from_elts(id2,(cdef as CLASSDEF(id1,_,_,_))::_) => cdef

end
(** relation: print_mod
 **
 ** This relation prints a modification.  The code is excluded from
 ** the report for brevity.
 **)

(*!ignorecode*)

relation print_mod : Mod => () =

  axiom	print_mod(NOMOD)

  rule	Print.print_buf "redeclare(" & 
	Dump.print_bool b & Print.print_buf ", " &
	Dump.print_list(elist, print_element, ", ") &
	Print.print_buf ")"
	------------------------------
	print_mod REDECL(b,elist)
	
  rule	print_final final &
	print_subs1 subs &
	print_eqmod ass
	------------
	print_mod MOD(final, subs, ass)

  rule	Print.print_buf "#-- print_mod failed\n"
	------------------------
	print_mod _

end

(**)

relation print_final : bool => () =

  axiom print_final false

  rule	Print.print_buf " final "
	--------------
       print_final true

end

relation print_subs : SubMod list => () =

  axiom print_subs []

  rule	Print.print_buf n & print_mod mod
	-----------------------
	print_subs [NAMEMOD(n,mod)]

  rule	Print.print_buf n & print_mod mod & Print.print_buf ", " &
	print_subs subs
	---------------
	print_subs NAMEMOD(n,mod)::subs

  rule	Dump.print_subscripts ss & print_mod mod
	------------------
	print_subs [IDXMOD(ss,mod)]

  rule	Dump.print_subscripts ss & print_mod mod & Print.print_buf ", " &
	print_subs subs
	--------------
	print_subs IDXMOD(ss,mod)::subs

end

relation print_subs1 : SubMod list => () =

  axiom print_subs1 [] => ()

  rule	Print.print_buf "(" &
	print_subs l &
	Print.print_buf ")"
	-----------
	print_subs1 l

end

relation print_eqmod : Absyn.Exp option => () =

  axiom print_eqmod NONE

  rule	Print.print_buf " = " & Dump.print_exp e
	-----------------------------
	print_eqmod SOME(e)

end
	
(*!includecode*)


relation print_element : Element => () =

  rule	Print.print_buf "EXTENDS(" & Absyn.path_string path => str & Print.print_buf str & Print.print_buf ")"
	----------------------------------------------------
	print_element EXTENDS(path,mod)

  rule	Print.print_buf "CLASSDEF(" & Print.print_buf n & Print.print_buf ")"
	---------------------------------------
	print_element CLASSDEF(n,final,repl,cl)

  rule	Print.print_buf "COMPONENT(" & Print.print_buf n & Print.print_buf ")"
	----------------------------------------
	print_element COMPONENT(n,final,prot,attr,typath,mod)

end	
