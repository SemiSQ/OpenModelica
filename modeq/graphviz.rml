(*
    Copyright (c) PELAB, Dept. Computer and Information Science, Linkoping University,
    Sweden, in the following denoted PELAB/LIU.

   
    This file is part of OpenModelica, in the following denoted OSM.


    The OSM License, Version 1.1, March 4, 2005.


    1 Preface

    The aim of this license is to lay down the conditions enabling you to use, 
    modify and circulate OSM. However, PELAB/LIU remain the authors of 
    OSM and so retain property rights and the use of all ancillary rights.

    2 Definitions

    OSM is defined as all successive versions of the OSM software and their 
    documentation that have been developed by PELAB/LIU and including
    accepted contributions from other contributors according to this license.

    OSM DERIVED SOFTWARE is defined as all or part of OSM that you have 
    modified and/or translated and/or adapted.


    3 Dual License

    OSM is made available under the OSM licensing scheme, which is a dual
    licensing scheme with two options, a) and b):

    a) OSM OPEN SOURCE LICENSE:

    If you wish to write Open Source software you can use the Open Source version 
    of OSM, released under the OSM license which include GPL as its open source 
    licensing option. If you use the OSM Open Source version you must release your 
    Application using OSM including this Application's source code under the GPL as well.

    This OSM license text, and Copyright (c) PELAB/Linkoping University, must
    be present in your copy of OSM and in OSM DERIVED SOFTWARE.

    You should have received a copy of the GPL - GNU General Public License
    along with OpenModelica; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA.


    b) OSM COMMERCIAL LICENSE

    If you are using OSM commercially - that is, for commercial usage or
    for creating proprietary software for sale or use in a commercial setting
    - you must purchase a commercial license of OSM from PELAB/LIU, which allows
    you to use OSM without releasing your Application under the GPL.

    Comment: Payments for OSM are intended for OSM development and
    integration of accepted contributions into OSM.


    4 Priority

    If there is any conflict between this OSM License text and the GNU GPL
    license, this text has priority.


    5 Contributions 

    PELAB/LIU reserves the right to accept or turn down source code contributions
    to OSM.


    6 Limitation of the warranty

    Except when mentioned otherwise in writing, OSM is supplied as is, with 
    no explicit or implicit warranty, including warranties of commercialization or 
    adaptation. You assume all risks concerning the quality or the effects of
    OSM and its use. If OSM is defective, you will bear the costs of 
    all required services, corrections or repairs.


    7 Consent

    When you access and use OSM, you are presumed to be aware of and to 
    have accepted all the rights and obligations of the present OSM license.
    This includes accepting that your open source code contributions to OSM, 
    if accepted into OSM by PELAB/IDA, follow the OSM licensing rules including
    copyright and ownership by PELAB/IDA.


    8 Binding effect

    This license has the binding value of a contract.
    You are not responsible for respect of the license by a third party.


    9 Applicable law

    The present license and its effects are subject to Swedish law and  
    Swedish courts.


    10 Contact information

    See http://www.ida.liu.se/~pelab/modelica/OpenModelica.html
*)
(**
 ** file:	 graphviz.rml
 ** module:      Graphviz
 ** description: Graphviz is a tool for drawing graphs from a textual
 ** representation. This module generates the textual input to graphviz from a
 ** tree defined using the data structures defined here, e.g. Node for tree
 ** nodes. See http://www.research.att.com/sw/tools/graphviz/ .
 **
 ** Input: The tree constructed from data structures in Graphviz
 ** Output: Textual input to graphviz, written to stdout.
 **
 ** RCS: $Id$
 **
 **)


module Graphviz:

  type Type = string
  type Ident = string
  type Label = string

  datatype Node = NODE of Type
                        * Attributes 
                        * Children
                | LNODE of Type
			* Label list
			* Attributes
			* Children


  type Children = Node list

  type Attributes = Attribute list

  datatype Attribute = ATTR of string (* name *) 
                             * string (* value *)

  relation dump : Node => ()

  val box : Attribute

end


val box = ATTR("shape","box")



(* Relations *)

relation dump : Node => () =
	
  rule	print "graph AST {\n" &
	dump_node node => nm &
	print "}\n"
	----------------
	dump node => ()

end


relation dump_node : Node => Ident =
	
  rule	nodename typ => nm &
	make_label [typ] => typlbl &
	list_append([ATTR("label", typlbl)], attr) => newattr &
	make_node(nm, newattr) => out &
	print out &
	dump_children(nm, children)
	---------------------------
	dump_node (NODE(typ, attr, children)) => nm


  rule	nodename typ => nm &
	list_append ([typ], lbl) => lbl' &
	make_label lbl' => lblstr &
	list_append([ATTR("label", lblstr)], attr) => newattr &
	make_node(nm, newattr) => out &
	print out &
	dump_children(nm, children)
	---------------------------
	dump_node (LNODE(typ, lbl, attr, children)) => nm

end


relation make_label: string list => string =

  rule	make_label_req(sl) => s0 &
	string_append("\"",s0) => s1 &
	string_append(s1, "\"") => s2
	------------------------------
	make_label sl => s2

end

relation make_label_req: string list => string =

  axiom	make_label_req [s] => s

  rule	string_append(s1,"\\n") => s &
	string_append(s,s2) => res
	-------------------
	make_label_req [s1,s2] => res

  rule	make_label_req rest => old &
	string_append(s1,"\\n") => s &
	string_append(s,old) => res
	-------------------
	make_label_req s1::rest => res

end



relation dump_children : (Ident, Children) => () =

  axiom dump_children (_, []) => ()

  rule	dump_node node => nm &
	print_edge(nm, parent) &
	dump_children(parent, rest)
	---------------------------
	dump_children(parent, node::rest)
end


(* changed use of str as part of nodename, since it may contain spaces
*)
relation nodename : string => string =

  rule	tick => i & int_string i => is & string_append("GVNOD",is) => s
	-----------------------------------------------------------------
	nodename str => s
end


relation print_edge : (Ident, Ident) => () =

  rule	make_edge(n1,n2) => str &
	print str & print ";\n"
	-----------------------
	print_edge(n1,n2)
end


relation make_edge : (Ident, Ident) => string =

  rule	string_append(n1, " -- ") => s &
	string_append(s, n2) => str
	---------------------------
	make_edge (n1, n2) => str

end


relation make_node : (Ident, Attributes) => string =

  rule	make_attr attr => s &
	string_append(nm, s) => s' &
	string_append(s', ";") => str
	-----------------------------
	make_node (nm, attr) => str

end


relation make_attr : Attribute list => string = 

  rule	make_attr_req l => res &
	string_append ("[", res) => s &
	string_append (s, "]") => str
	----------------------------
	make_attr l => str

end


relation make_attr_req : Attribute list => string =

  rule	string_append(name,"=") => s &
	string_append(s, v) => str
	---------------------------
	make_attr_req [ATTR(name,v)] => str


  rule  make_attr_req(rest) => old &
	string_append(name,"=") => s &
	string_append(s,v) => s' &
	string_append(s',",") => s'' &
	string_append(s'', old) => str
	---------------------------
	make_attr_req(ATTR(name,v)::rest) => str

end