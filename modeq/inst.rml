(* inst.rml *)

module Inst:

  with "exp.rml"
  with "absyn.rml"
  with "explode.rml"
  with "dae.rml"

  relation instantiate: Explode.Program => DAE.DAEform

end

with "prefix.rml"
with "env.rml"
with "mod.rml"
with "builtin.rml"
with "dump.rml"
with "types.rml"

(* These make the code a little more readable *)
type Prefix = Prefix.Prefix
type Mod = Mod.Mod
type Ident = Exp.Ident
type Env = Env.Env


(**********************************************************************)

relation assert : (bool, bool, string) => () =

  rule  x = y
	-----
	assert(x,y,_)

  rule  not x = y &
	print "ERROR: " & print m & print "\n"
	--------------------------------------
	assert(x,y,m)

end

relation optional_cons : ('a option, 'a list) => 'a list =

  axiom optional_cons(NONE, l) => l

  axiom optional_cons(SOME(x), l) => x::l

end

(**********************************************************************)

relation inst_list : (Env, Mod, Prefix, (Env, Mod, Prefix, 'a)
	  				 => ('b list, Env), 'a list)
	  => ('b list, Env) =

  axiom inst_list(env,mod,pre,r,[]) => ([],env)

  rule	r(env,mod,pre,e) => (l,env') &
	inst_list(env',mod,pre,r,es) => (l',env'') &
	list_append(l,l') => l''
	--------------------------------------------
	inst_list(env,mod,pre,r,e::es) => (l'',env'')

end

	(* FIXME flow variables. This needs to be totally reworked *)

relation connect_vars : (Exp.ComponentRef, Exp.ComponentRef,
			 Types.Var list) => DAE.DAEcomp list =

  axiom	connect_vars(_,_,[]) => []

  rule	Exp.extend_cref(c1, n, []) => c1' &
	Exp.extend_cref(c2, n, []) => c2' &
	print "connect_vars: " &
	Dump.dump_component_ref c1' & print " <-> " &
	Dump.dump_component_ref c2' &
	print "\n" &
	connect_components([], c1', c2', ty) => dae1 &
	connect_vars(c1,c2,xs) => dae2 &
	list_append(dae1, dae2) => dae
	------------------------------
	connect_vars(c1,c2,(n,Types.ATTR(_,flow,_,_),ty)::xs) => dae

end

relation connect_components: (Prefix,
			      Explode.ComponentRef,
			      Explode.ComponentRef,
			      Types.Type) => DAE.DAEcomp list =
	
  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "connect_components 1: " &
	Dump.dump_component_ref c1' & print " <-> " &
	Dump.dump_component_ref c2' &
	print "\n"
	----------------------------------
	connect_components(pre, c1, c2, Types.BUILTIN(_))
	  => [DAE.EQUATION(Exp.RELATION(Exp.CREF(c1'),
					Exp.EQUAL,Exp.CREF(c2')))]
	
  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "connect_components 2: " &
	Dump.dump_component_ref c1' & print " <-> " &
	Dump.dump_component_ref c2' &
	print "\n" &
	connect_vars(c1',c2', l) => dae
	----------------------------------------
	connect_components(pre,c1,c2,Types.COMPLEX(l)) => dae
	
end

relation inst_connect: (Env, Prefix, Explode.ComponentRef,Explode.ComponentRef)
	  => DAE.DAEcomp list =

  rule	print " trying to connect " &
	Dump.dump_component_ref(o1) & print " with " &
	Dump.dump_component_ref(o2) & print "\n" &
	Env.lookup_var(env,o1) => (attr1,ty1) &
	Env.lookup_var(env,o2) => (attr2,ty2) &
	Types.same_type(ty1, ty2) &
	connect_components(pre, o1, o2, ty1) => dae
	---------------------------------
	inst_connect(env,pre,o1,o2) => dae

  rule	print "# could not connect\n" & fail
	---------------------------------
	inst_connect(_,_,_,_) => []

end

relation inst_equation: (Env,Mod,Prefix,Explode.Equation)
	  => (DAE.DAEcomp list, Env) =

  (* connect
   *
   * Handle connct statements
   *)

  rule	inst_connect(env,pre,c1,c2) => l
	------------------------
	inst_equation(env,mods,pre, Absyn.EQ_CONNECT(c1,c2))
	 => (l,env)

  (* assert
   *
   * FIXME: Handle assertions
   *)

  rule	Prefix.prefix_exp(e,pre) => e' &
	print " ASSERTION(" & Dump.dump_exp(e') & print "): " &
	print d & print "\n"
	------------------------
	inst_equation(env,mods,pre,
		      Absyn.EQ_EXPR(Exp.CALL(Exp.IDENT("assert"),
					     [e,Exp.STRING(d)])))
	  => ([],env)

  rule	print "No expression equations yet\n" & fail
	--------------------------------------------
	inst_equation(env,mods,pre,Absyn.EQ_EXPR(_)) => ([],env)

  rule	Env.lookup_var_local(env,n) => Env.FRAMEVAR(_,_,_,SOME(_)) &
	print " shadowed equation for " & print n & print "\n"
	------------------------------------------------------
	inst_equation(env,mods,pre,
		      Absyn.EQ_EQUALS(Exp.CREF([(n,[])]), e2))
	  => ([],env)

  rule	print " equation\n" &
	Prefix.prefix_exp(e1,pre) => e1' &
	Prefix.prefix_exp(e2,pre) => e2'
	------------------------
	inst_equation(env,mods,pre,Absyn.EQ_EQUALS(e1,e2))
	  => ([DAE.EQUATION(Exp.RELATION(e1',Exp.EQUAL,e2'))],env)

end

relation inst_mod_assignment : (Prefix, Ident, Mod) => DAE.DAEcomp list =

  rule  Prefix.prefix_cref(pre, [(v,[])]) => v' &
	
	print "  assignment modification: " &
 	Dump.dump_component_ref v' &
 	Mod.dump mod &
	print "\n" &
	
	Prefix.prefix_exp(e, pre) => e'
	-------------------------------
	inst_mod_assignment(pre,v,mod as Mod.MOD(_,_,SOME(e)))
	  => [DAE.EQUATION(Exp.RELATION(Exp.CREF(v'), Exp.EQUAL, e'))]
	  
  axiom inst_mod_assignment(_,_,_) => []
  
end

relation check_prot : (bool, Mod, Exp.ComponentRef) => () =

  rule  print "  public variable " & Dump.dump_component_ref cref & print "\n"
	--------------------------------------------------
	check_prot(false,_,cref)
	
  axiom check_prot(_,Mod.NOMOD,_)

  rule  print "ERROR: Trying to modify protected element " &
	Dump.dump_component_ref cref & print "\n" &
	fail
	----------------------------
	check_prot(true,_,cref)

end

relation inst_element: (Env, Mod, Prefix, Explode.Element)
	  => (DAE.DAEcomp list, Env, Types.Var list) =

	(* extends
	 *
	 * Handle "extends" elements by instantiating the class definition
	 * of the extended class.
	 *)
	 
  rule	Env.lookup_class(env,cn)
	  => (c as Explode.CLASS(_,partial,_,_),classmod) &
	
	Exp.path_string(cn) => cns &
	print "  extending with class " & print cns & print "\n" &
	
	(* Can't extend partial classes *)
	assert(partial,false,"Can't extend partial class") &
	
	(* Build the combind set of modifications *)
	(* classmod is the modifications stored with the class *)
	(* mods     is the modifications passed to the relation *)
	(* m        is the modification stored in the element *)
	(* FIXME: verify order *)
	print "  modification 1: " & print cns & Mod.dump classmod & print "\n" &
	print "  modification 2: " & print cns & Mod.dump mods & print "\n" &
	print "  modification 3: " & print cns & Mod.dump m & print "\n" &
	Mod.merge(classmod,mods) => mods' &
	Mod.merge(mods',m) => mods'' &
	
	(* Can't use inst_class, as that creates a new frame *)
	inst_class_in(env,mods'',pre,c,prot) => (dae,env',tys)
	----------------------------------
	inst_element(env,mods,pre,
	Explode.ELEMENT(final,prot,_,Explode.EXTENDS(cn,m)))
	  => (dae,env',tys)
	
  	(* components
	 *
	 * Rules for instantiating components.
	 *)
	 
	 (* If a variable is declared multiple times, the first is used *)
  rule	Env.lookup_var_local(env,n) => _ &
	print " ignoring shadowed variable " & print n & print "\n"
	--------------------------
	inst_element(env,mods,pre,
		     Explode.ELEMENT(final,prot,n,
				     Explode.COMPONENT(_,_,_,_)))
	  => ([],env,[])
	
  	(* Illegal redeclarations *)
  rule	Env.lookup_var_local(env,n) => _ &
	print "Trying to redeclare the class " & print n &
	print " as a variable\n" &
	fail
	------------------------
	inst_element(env,mods,pre, Explode.ELEMENT(final,prot,n,
						   Explode.CLASSDEF(_,_)))
	  => ([],env,[])

  rule	Env.lookup_class(env,Exp.IDENT(n)) => (v,_) &
	print "Trying to redeclare the variable " & print n &
	print " as a class\n" &
	fail
	------------------------
	inst_element(env,mods,pre,
		     Explode.ELEMENT(final,prot,n,
				     Explode.COMPONENT(_,_,_,_)))
	  => ([],env,[])

  (* A new class definition
   *
   * Put it in the current frame in the environment
   *)
   
  rule	(* Explode.convert(c) => c' & *)
	Mod.lookup_modification(mods,n) => classmod &
	print "  adding " & print n & Mod.dump classmod & print "\n" &
	(* Mod.simple_maybe_modify_class(env,mm,pre,c') => (c'',dae) & *)
	Env.extend_frame_c(env,c,classmod) => env'
	----------------------------------------
	inst_element(env,mods,pre,
		     Explode.ELEMENT(final,prot,n,
				     Explode.CLASSDEF(_,c)))
	  => ([],env',[])

  (* A variable
   *
   * Lookup the class name, apply specializations and add the variable
   * to the current frame in the environment. Then instantiate the class
   * with an extended prefix.
   *)

  rule	Prefix.prefix_cref(pre,[(n,[])]) => vn &

	print " variable " & Dump.dump_component_ref vn & print "\n" &

	(* Find the set of modifications *)
	(* FIXME: merge order *)
	Env.lookup_class(env,t) => (cl,classmod) &
	print "  modification 1: " & Mod.dump classmod & print "\n" &

	Mod.lookup_modification(mods,n) => mm &
	print "  modification 2: " & Mod.dump mm & print "\n" &
	print "  modification 3: " & Mod.dump m & print "\n" &

	(* classmod is the modifications stored with the class *)
	(* mm       is the modifications passed to the relation *)
	(* m        is the modification stored in the element *)

	(* Check for modifications to a protected element *)
	check_prot(prot, mm, vn) &

	Mod.merge(classmod,mm) => mod &
	Mod.merge(mod,m) => mod' &
	print "  modification: " & Mod.dump mod' & print "\n" &

	Prefix.prefix_add(n,[],pre) => pre' &

	inst_class(env,mod',pre',cl) => (dae1,ty) &

	Mod.mod_assignment mod' => ass &
	Env.extend_frame_v(env,Env.FRAMEVAR(n,attr,ty,ass)) => env' &
	print " extended frame with variable " & Dump.dump_component_ref vn &
 	print "\n" &

	(* If the modification assigns a value to this variable, add an
	   equation *)
	inst_mod_assignment(pre,n,mod') => dae2 &

	list_append(dae1, dae2) => dae
	--------------------------
	inst_element(env,mods,pre,
		     Explode.ELEMENT(final,prot,_,
				     Explode.COMPONENT(n,attr,t,m)))
         => (dae,env',[(n,attr,ty)])

  (*
   * If the class lookup in the previous rule fails, this rule catches
   * the error and prints an error message about the unknown class.
   *)

  rule	not Env.lookup_class(env,t) => (cl,_) &
	Exp.path_string(t) => s &
	print "# unknown class '" & print s & print "' while instantiating " &
	Prefix.prefix_path(Exp.IDENT(n),pre) => n' &
	Exp.path_string(n') => ns &
	print ns & print "\n"
	--------------------------
	inst_element(env,_,pre,
		     Explode.ELEMENT(final,prot,n,
				     Explode.COMPONENT(_,_,t,_)))
         => ([],env,[])

end

and inst_element_list : (Env, Mod, Prefix, Explode.Element list)
	  => (DAE.DAEcomp list, Env, Types.Var list) =

  axiom inst_element_list(env,_,_,[]) => ([], env, [])

  rule  inst_element(env,mod,pre,el) => (dae1,env',tys1) &
	inst_element_list(env',mod,pre,els) => (dae2,env'',tys2) &
	list_append(tys1, tys2) => tys &
	list_append(dae1, dae2) => dae
	------------------------------
	inst_element_list(env,mod,pre,el::els) => (dae, env'', tys)

end

and inst_algorithm : (Env, Mod, Prefix, Explode.Algorithm)
	  => (DAE.DAEcomp list, Env) =

  rule  print "# no algorithms yet\n" & fail
	------------------------------------
	inst_algorithm(_,_,_,_) => ([],[])

end

and inst_classdef: (Env, Mod, Prefix, Explode.ClassDef, bool)
	  => (DAE.DAEcomp list, Env, Types.Var list) =

	(* FIXME: propagate prot *)
  rule	inst_element_list(env,mods,pre,els) => (dae1,env', tys) &
	inst_list(env',mods,pre,inst_equation,eqs) => (dae2,env'') &
	inst_list(env'',mods,pre,inst_algorithm,als) => (dae3,env''') &
	list_append(dae1,dae2) => dae5 &
	list_append(dae5,dae3) => dae
	-----------------------------
	inst_classdef(env,mods,pre, Explode.PARTS(els,eqs,als), prot)
	  => (dae,env''', tys)

  rule	Env.lookup_class(env,cn) => (c,m) &
	(* FIXME order *)
	Mod.merge(mods,m) => mods' &
	Mod.merge(mods',mod) => mods'' &
	inst_class_in(env, mods'', pre, c, prot) => (dae,env, tys)
	----------------------------------------
	inst_classdef(env,mods,pre, Explode.DERIVED(cn,ad,mod), prot)
	  => (dae,env, tys)

  rule	not Env.lookup_class(env,cn) => (_,_) &
	Exp.path_string(cn) => cns &
	print "# unknown class: " & print cns & print "\n" & fail
	----------------------------------------
	inst_classdef(env,mods,pre, Explode.DERIVED(cn,ad,mod), prot)
	  => ([], env, [])

end

and inst_class_in: (Env, Mod, Prefix, Explode.Class, bool)
	  => (DAE.DAEcomp list, Env, Types.Var list) =

  rule	print " instantiating " & print n & print "\n" &
	inst_classdef(env,mods,pre,d,prot) => (l,env', tys)
	------------------------------------------------------	
	inst_class_in(env,mods,pre,c as Explode.CLASS(n,false,r,d), prot)
	  => (l,env', tys)

  rule	print "Can't instantiate partial class " & print n & print "\n" &
	fail
	------------------------------------------------------	
	inst_class_in(env,mod,pre, Explode.CLASS(n,true,_,_), _)
	  => ([], Env.empty_env, [])

	(* FIXME *)
  rule  print "# Fallthru in inst_class_in\n" & fail
	----------------------------------
	inst_class_in(_,_,_,_,_) => ([],Env.empty_env,[])

end

and mktype : Types.Var list => Types.Type =

  axiom	mktype [] => Types.BUILTIN("<unknown>")

  axiom	mktype l => Types.COMPLEX(l)

end

and inst_class: (Env, Mod, Prefix, Explode.Class)
	  => (DAE.DAEcomp list, Types.Type) =

  rule	Env.new_frame(env) => env' &
	inst_class_in(env', mod, pre, c, false) => (dae,_,tys) &
	mktype(tys) => ty
	-------------------------------------------
	inst_class(env, mod, pre, c) => (dae, ty)

end

relation inst_program : (Env, Explode.Program) => DAE.DAEcomp list =

  rule	print "Empty program\n" & fail
	------------------------------
	inst_program(env,[]) => []

  rule	Env.extend_frame_c(env,c,Mod.NOMOD) => env' &
	inst_class(env',Mod.NOMOD,[],c) => (l,_)
	-----------------------------
	inst_program(env,[c]) => l

  rule	Env.extend_frame_c(env,c,Mod.NOMOD) => env' &
	inst_program(env',cs) => l
	----------------------
	inst_program(env,c::cs) => l

end

relation instantiate: Explode.Program => DAE.DAEform =

  rule	Builtin.initial_env => env &
	inst_program(env,p) => l
	-----------------------------
	instantiate(p) => DAE.DAE(l)

end
