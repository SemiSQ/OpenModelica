(**
 ** file:	 inst.rml
 ** description: Model instantiation
 **
 ** RCS: $Id$
 **
 ** This module exports only one relation. *)

module Inst:

  with "explode.rml"
  with "dae.rml"

  relation instantiate: SCode.Program => DAE.DAEform

end

(** Other modules used by this module *)

with "exp.rml"
with "algorithm.rml"
with "values.rml"
with "absyn.rml"
with "prefix.rml"
with "env.rml"
with "lookup.rml"
with "builtin.rml"
with "dump.rml"
with "types.rml"
with "connect.rml"
with "classinf.rml"
with "staticexp.rml"
with "mod.rml"

(** These type aliases are introduced to make the code a little more
 ** readable.
 ** FIXME: maybe they should be removed? *)

type Prefix = Prefix.Prefix
type Mod = Mod.Mod
type Ident = Exp.Ident
type Env = Env.Env


(** relation: select
 **
 ** This utility relation selects one of two objects depending on a
 ** boolean variable.
 **)

relation select : (bool, 'a, 'a) => 'a =

  axiom	select (true,x,_) => x
  axiom	select (false,_,x) => x

end

(** relation: instantiate
 ** purpose:  Instantiate a Modelica program
 **
 ** To instantiate a Modelica program, an initial environment is
 ** built, containing the predefined types. Then the program is
 ** instantiated by the relation `inst_program'
 **)

relation instantiate: SCode.Program => DAE.DAEform =

  rule	Builtin.initial_env => env &
	inst_program(env,p) => l
	-----------------------------
	instantiate(p) => DAE.DAE(l)

end

(** relation: inst_program
 ** purpose:  Instantiate a Modelica program using a provided environment.
 **
 ** Instantiating a Modelica program is the same as instantiating the
 ** last class definition in the source file. First all the class
 ** definitions is added to the environment without modifications, and
 ** then the last class is instantiated in the relation `inst_class'
 **)

relation inst_program : (Env, SCode.Program) => DAE.DAEcomp list =

  rule	print "# Empty program\n"
	------------------------------
	inst_program(env,[]) => fail

  rule	(* Env.extend_frame_c(env,c) => env' & *)
	inst_class(env,Mod.NOMOD,Prefix.NOPRE,[],c) => (dae,csets,_,_)
	-----------------------------
	inst_program(env,[c as SCode.CLASS(n,_,_,_)])
	  => [DAE.COMP(n,DAE.DAE(dae))]

  rule	inst_class_decl(env,Mod.NOMOD,Prefix.NOPRE,[],c) => (env',dae1) &
	(* Env.extend_frame_c(env,c) => env' & *)
	inst_program(env',cs) => dae2 &
	list_append(dae1,dae2) => dae
	----------------------
	inst_program(env,c::(cs as (_::_))) => dae

end

(** relation: inst_class
 ** purpose:  Instantiate a complete class definition.
 **
 ** Instantiating a class consists of the following steps:
 **
 **  o Create a new frame on the environment
 **  o Initialize the class inference state machine
 **  o Instantiate all the elements and equations
 **  o Generate equations from the connection sets built during
 **    instantiation
 **)

relation inst_class: (Env, Mod, Prefix, Connect.Sets, SCode.Class)
	  => (DAE.DAEcomp list, Connect.Sets, Types.Type, ClassInf.State) =

  rule	print "# Can't instantiate partial class " & print n & print "\n"
	------------------------------------------------------	
	inst_class(env,mod,pre, csets, SCode.CLASS(n,true,_,_)) => fail

  rule	Env.open_scope(env) => env' &
	ClassInf.start(r,n) => ci_state &
	inst_class_in(env', mod, pre, csets, ci_state, c, false)
	  => (dae1,_,csets',ci_state', tys) &
	Connect.print_sets csets' &
	Connect.equations csets' => dae2 &
	list_append(dae1, dae2) => dae &
	mktype(ci_state',tys) => ty
	-------------------------------------------
	inst_class(env, mod, pre, csets, c as SCode.CLASS(n,_,r,_))
	  => (dae, [], ty,ci_state')

  rule	print "- inst_class " & print n & print " failed\n"
	-----------------------------------------------------
	inst_class(_,_,_,_,SCode.CLASS(n,_,_,_)) => fail
	
end

(** relation: inst_class_in
 ** purpose:  Instantiate the contents of a class definition, with a
 ** new environment already setup.
 **
 ** This relation is just a wrapper around `inst_classdef', and could
 ** probably be removed.
 **)

relation inst_class_in: (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
			 SCode.Class, bool)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State,
	      Types.Var list) =

  rule	print " instantiating " & print n & print "\n" &
	inst_classdef(env,mods,pre,csets,ci_state,d,r,prot)
	  => (l,env', csets', ci_state', tys) &
	print " " & print n & print " has " & ClassInf.print_state ci_state' &
	print "\n"
	------------------------------------------------------	
	inst_class_in(env,mods,pre,csets,ci_state,
		      c as SCode.CLASS(n,_,r,d), prot)
	  => (l,env', csets', ci_state', tys)

	(* FIXME *)
  rule  print "- inst_class_in failed\n"
	----------------------------------
	inst_class_in(_,_,_,csets,_,_,_) => fail

end

(** relation: inst_classdef
 ** purpose:  Instantiate the contents of a class definition.
 **
 ** There are two kinds of class definitions, either explicit
 ** definitions (`SCode.PARTS()') or derived definitions
 ** (`SCode.DERIVED()').
 **
 ** When instantiating an explicit definition, the elements are first
 ** instantiated, using `inst_element_list', and then the equations
 ** and finally the algorithms are instantiated using `inst_equation'
 ** and `inst_algorithm', respectively. The resulting lists of
 ** equations are concatenated to produce the result.
 **)

relation inst_classdef: (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
			 SCode.ClassDef, Absyn.Restriction, bool)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State,
	      Types.Var list) =

	(** This rule describes how to instantiate an explicit
	 ** class definition *)

	(** FIXME: propagate prot *)
  rule	ClassInf.trans(ci_state, ClassInf.NEWDEF) => ci_state' &
	inst_element_list(env,mods,pre,csets,ci_state', els)
	  => (dae1,env', csets', ci_state'', tys) &
	inst_list(env',mods,pre,csets',ci_state'',inst_equation, eqs)
	  => (dae2,env'',csets'', ci_state''') &
	inst_list(env'',mods,pre,csets'',ci_state''', inst_algorithm, als)
	  => (dae3,env''',csets''', ci_state'''') &
	list_append(dae1,dae2) => dae5 &
	list_append(dae5,dae3) => dae
	-----------------------------
	inst_classdef(env,mods,pre, csets, ci_state,
		      SCode.PARTS(els,eqs,als), re, prot)
	  => (dae,env''', csets''', ci_state'''', tys)

	(** This rule describes how to instantiate a derived class *)
	(** definition *)

  rule	Lookup.lookup_class(env,cn) => (c as SCode.CLASS(cn2,_,r,_)) &
	Mod.lookup_modification_p(mods,cn) => m &
	Mod.elab_mod(env,pre,mod) => mod' &
	ClassInf.start(r, cn2) => new_ci_state &
	print " deriving from " & Absyn.print_restr r & print " : " &
	ClassInf.print_state new_ci_state & print "\n" &
	(* FIXME order *)
	Mod.merge(mods,m) => mods' &
	Mod.merge(mods',mod') => mods'' &
	inst_class_in(env, mods'', pre, csets, new_ci_state, c, prot)
	  => (dae,env, csets', ci_state', tys) &

	print "  " & ClassInf.print_state ci_state' & print "\n" &
	(* Check for restriction violations *)
	ClassInf.assert_valid(ci_state', re)
	----------------------------------------
	inst_classdef(env,mods,pre, csets, ci_state,
		      SCode.DERIVED(cn,ad,mod), re, prot)
	  => (dae,env, csets', ci_state', tys)

	(** If the class is derived from a class that can not be *)
	(** found in the environment, this rule prints an error *)
	(** message. *)

  rule	not Lookup.lookup_class(env,cn) => _ &
	Absyn.path_string(cn) => cns &
	print "# unknown class: " & print cns & print "\n"
	----------------------------------------
	inst_classdef(env,mods,pre,csets,ci_state,
		      SCode.DERIVED(cn,ad,mod), re, prot)
	  => fail

  rule	print "- inst_classdef failed\n"
	----------------------------------
	inst_classdef(_,_,_,_,_,_,_,_) => fail

end	

(** relation: inst_element_list
 ** purpose:  Instantiate a list of elements
 **
 ** Instantiate elements one at a time, and concatenate the resulting
 ** lists of equations.
 **)

relation inst_element_list : (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
			      SCode.Element list)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State,
	      Types.Var list) =

  axiom inst_element_list(env,_,_,csets,ci_state,[])
	  => ([], env, csets, ci_state, [])

  rule  inst_element(env,mod,pre,csets,ci_state,el)
	  => (dae1,env',csets',ci_state',tys1) &
	inst_element_list(env',mod,pre,csets',ci_state',els)
	  => (dae2,env'',csets'',ci_state'',tys2) &
	list_append(tys1, tys2) => tys &
	list_append(dae1, dae2) => dae
	------------------------------
	inst_element_list(env,mod,pre,csets,ci_state,el::els)
	  => (dae, env'', csets'', ci_state'', tys)

  rule	print "- inst_element_list failed\n"
	------------------------------------
	inst_element_list(_,_,_,_,_,_) => fail

end

(** relation: inst_element
 ** This monster relation instantiates an element of a class
 ** definition.  An element is either a class definition, a variable,
 ** or an `extends' clause.
 **)

relation inst_element: (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
			SCode.Element)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State,
	      Types.Var list) =

	(**  extends
	 **
	 ** Handle "extends" elements by instantiating the class definition
	 ** of the extended class.
	 **)
	 
  rule	Absyn.path_string(cn) => cns &
	print "  extending class " & print cns & print "\n" &
	
	Lookup.lookup_class(env,cn) => (c as SCode.CLASS(cn2,_,restr,def)) &
	Mod.lookup_modification_p(mods,cn) => classmod &
	Mod.elab_mod(env,pre,m) => m' &

	(* Build the combind set of modifications *)
	(* classmod is the modifications stored with the class *)
	(* mods     is the modifications passed to the relation *)
	(* m        is the modification stored in the element *)
	(* FIXME: verify order *)
	(* print "  mod 1: " & print cns & Mod.print_mod classmod & print "\n" &
	   print "  mod 2: " & print cns & Mod.print_mod mods & print "\n" &
	   print "  mod 3: " & print cns & Mod.print_mod m' & print "\n" & *)
	Mod.merge(classmod,mods) => mods' &
	Mod.merge(mods',m') => mods'' &
	
	(* Can't use inst_class, as that creates a new frame *)
	inst_class_in(env,mods'',pre,csets,ci_state,c,false(*FIXME: FOO?*))
	  => (dae,env',csets',ci_state',vars)
	----------------------------------
	inst_element(env,mods,pre,csets, ci_state, SCode.EXTENDS(cn,m))
	  => (dae,env',csets',ci_state',vars)
	
  	(**  Rules to catch redeclarations and name collsions
	 **)
	 
	 (* If a variable is declared multiple times, the first is used *)
  rule	Lookup.lookup_ident_local(env,n) => _ &
	print " ignoring shadowed variable " & print n & print "\n"
	--------------------------
	inst_element(env,mods,pre,csets,ci_state,
		     SCode.COMPONENT(n,final,prot,_,_,_))
	  => ([],env,csets,ci_state,[])
	
  	(* Illegal redeclarations *)
  rule	Lookup.lookup_ident_local(env,n) => _ &
	print "Trying to redeclare the class " & print n &
	print " as a variable\n"
	------------------------
	inst_element(env,mods,pre,csets,ci_state,
		     SCode.CLASSDEF(n,_,_,_))
	  => fail

  rule	Lookup.lookup_class(env,Absyn.IDENT(n)) => v &
	print "Trying to redeclare the variable " & print n &
	print " as a class\n"
	---------------------
	inst_element(env,mods,pre,csets,ci_state,
		     SCode.COMPONENT(n,_,_,_,_,_))
	  => fail

        (**  A new class definition
	 **
	 ** Put it in the current frame in the environment
	 **)
   
  rule	Mod.lookup_modification_p(mods,Absyn.IDENT(n)) => classmod &
	inst_class_decl(env,classmod,pre,csets,c) => (env',dae)
	-------------------------------------------------
	inst_element(env,mods,pre,csets,ci_state, SCode.CLASSDEF(n,_,_,c))
	  => (dae,env',csets,ci_state,[])

	(**  A variable
	 **
	 ** Lookup the class name, apply modifications and add the
	 ** variable to the current frame in the environment. Then
	 ** instantiate the class with an extended prefix.
	 **)

  rule	Prefix.prefix_cref(pre,Exp.CREF_IDENT(n,[])) => vn &

	print " variable " & Exp.print_component_ref vn & print "\n" &
	(* FIXME: merge order *)

	(** The class definition is fetched from the environment. *)
	(** Then the set of modifications is calculated.  The *)
	(** modificions is the result of merging the modifications *)
	(** from several sources.  The modification stored with the *)
	(** class definition is put in the variable `classmod', the *)
	(** modification passed to the relation is extracted and put *)
	(** in the variable `mm', and the modification that is *)
	(** included in the variable declaration is in the variable *)
	(** `m'.  All of these are merged so that the correct *)
	(** precedence rules are followed. *)

	Lookup.lookup_class(env,t) => cl &
	Mod.lookup_modification_p(mods,t) => classmod &
	Mod.lookup_modification(mods,n,[(*FIXME*)]) => mm &
	Mod.elab_mod(env,pre,m) => m' &
	(* print "  mod 1: " & Mod.print_mod classmod & print "\n" &
	   print "  mod 2: " & Mod.print_mod mm & print "\n" &
	   print "  mod 3: " & Mod.print_mod m' & print "\n" & *)

	Mod.merge(classmod,mm) => mod &
	Mod.merge(mod,m') => mod' &
	(* print "  modification: " & Mod.print_mod mod' & print "\n" & *)

	(** If the element is `protected', and an external *)
	(** modification is applied, it is an error. *)

	check_prot(prot, mm, vn) &

	Mod.mod_equation mod' => eq &

	(** The variable declaration and the (optional) equation *)
	(** modification are inspected for array dimensions. *)
	elab_arraydim(env,ad,eq) => dims &

	(** Instantiate the component *)
	inst_var(env,mod',pre,csets,n,cl,attr,eq,dims,[])
	  => (dae1,csets',ty) &

	(** The environment is extended with the new variable *)
	(** binding. *)

	make_binding (env,attr,eq,cl) => binding &
	Env.extend_frame_v(env,Env.FRAMEVAR(n,attr,ty,binding)) => env' &
	print " extended frame with variable " & Exp.print_component_ref vn &
	print " :: " & Types.print_type ty & print "\n" &

	(** If the modification includes an equation, it is added. *)
	(* FIXME: use env or env'? *)
	inst_mod_equation(env',pre,n,ty,mod') => dae2 &

	(** If the type is one of the simple, predifined types a *)
	(** simple variable declaration is added to the DAE. *)
	(* dae_declare (vn,cl,attr) => dae3 & *)

	list_append(dae1, dae2) => dae(*4 &
	list_append(dae4, dae3) => dae*)
	-----------------------------------------------------------
	inst_element(env,mods,pre,csets,ci_state,
		     SCode.COMPONENT(n,final,prot,
				     attr as Absyn.ATTR(ad,flow,param,dir),
				     t,m))
          => (dae, env',csets',ci_state,
	      [Types.VAR(n,Absyn.ATTR([],flow,param,dir), ty, binding)])
	

	(** If the class lookup in the previous rule fails, this
	 ** rule catches the error and prints an error message about
	 ** the unknown class. 
	 **)

  rule	not Lookup.lookup_class(env,t) => cl &
	Absyn.path_string(t) => s &
	print "# unknown class '" & print s & print "' while instantiating " &
	Prefix.prefix_path(Absyn.IDENT(n),pre) => n' &
	Absyn.path_string(n') => ns &
	print ns & print "\n"
	--------------------------
	inst_element(env,_,pre,csets,ci_state,
		     SCode.COMPONENT(n,final,prot,_,t,_))
         => ([],env,csets,ci_state,[])

  rule	Prefix.prefix_path(Absyn.IDENT(n),pre) => n' &
	Absyn.path_string(n') => ns &
	print "- inst_element COMPONENT(" & print ns & print ") failed\n"
	-----------------------------------------------------------------
	inst_element(_,_,pre,_,_,SCode.COMPONENT(n,_,_,_,_,_))
         => fail

(*
  rule	print "- inst_element failed\n"
	-------------------------------
	inst_element (_,_,_,_,_,_) => fail
*)

end	

(**)

relation inst_var : (Env.Env,Mod.Mod,Prefix.Prefix,Connect.Sets,Ident,
		     SCode.Class,Absyn.VarAttr,Mod.Eqmod option,
		     int list, int list)
	  => (DAE.DAEcomp list,Connect.Sets,Types.Type) =

	(** The class is instantiated with the calculated *)
	(** modification, and an extended prefix. *)

  rule	list_reverse idxs => idxs' &
	Prefix.prefix_add(n,idxs',pre) => pre' &
	(** FIXME: Redeclarations! *)
	inst_class(env,mod,pre',csets,cl) => (dae1,csets',ty,st) &

	Exp.int_subscripts idxs' => subs &
	Prefix.prefix_cref(pre,Exp.CREF_IDENT(n,subs)) => cr &
	dae_declare(cr,ty,Absyn.ATTR([], flow, vt, dir)) => dae2 &

	list_append(dae1,dae2) => dae
	--------------------------
	inst_var(env,mod,pre,csets,n,cl,Absyn.ATTR(_,flow,vt,dir),eq,[],idxs)
          => (dae,csets',ty)

  rule	inst_array(env,mod,pre,csets,n,(cl,attr),1,dim,dims,idxs)
	  => (dae, csets', ty) &
	Types.lift_array(ty,SOME(dim)) => ty'
	-------------------------------
	inst_var(env,mod,pre,csets,n,cl,attr,eq,dim::dims,idxs)
          => (dae,csets',ty')

  rule	print "- inst_var failed: " & print n & print "\n"
	--------------------------------------------------
	inst_var(_,_,_,_,n,_,_,_,_,_) => fail
	
end

(**)

relation inst_array : (Env.Env,Mod.Mod,Prefix.Prefix,Connect.Sets,Ident,
		       (SCode.Class*Absyn.VarAttr),int,int,int list,int list)
	  => (DAE.DAEcomp list,Connect.Sets,Types.Type) =

  rule	int_gt(i,stop) => true
	----------------------
	inst_array(env,mod,pre,csets,n,(cl,attr),i,stop,dims,idxs)
	  => ([], csets, Types.T_NOTYPE)

  rule	inst_var(env,mod,pre,csets,n,cl,attr,NONE(*FIXME*),dims,i::idxs)
	  => (dae1,csets',ty) &
	int_add(i,1) => i' &
	inst_array(env,mod,pre,csets',n,(cl,attr),i',stop,dims,idxs)
	  => (dae2, csets'',_) &
	list_append(dae1,dae2) => dae
	-----------------------------
	inst_array(env,mod,pre,csets,n,(cl,attr),i,stop,dims,idxs)
          => (dae,csets'',ty)

  rule	print "- inst_array failed: " & print n & print "\n"
	--------------------------------------------------
	inst_array(_,_,_,_,n,(_,_),_,_,_,_) => fail
	
end

(** relation: elab_arraydim *)

relation elab_arraydim : (Env.Env, Absyn.ArrayDim, Mod.Eqmod option)
	  => int list =

  rule	elab_arraydim_decl(env,ad) => dim &
	complete_arraydim(dim) => dim'
	------------------------------
	elab_arraydim(env,ad,NONE) => dim'

  rule	elab_arraydim_decl(env,ad) => dim1 &
	elab_arraydim_type(t) => dim2 &
	compatible_arraydim(dim1,dim2) => dim3
	---------------------------------
	elab_arraydim(env,ad,SOME((e,t,c))) => dim3

  rule	elab_arraydim_decl(env,ad) => dim1 &
	elab_arraydim_type(t) => dim2 &
	not compatible_arraydim(dim1,dim2) => dim3 &
	print "# Array dimension mismatch\n" &
	print "    expression " & Exp.print_exp e &
	print " has type " & Types.print_type t & print "\n" &
	print "    expected array dimensions [" &
	print_dim dim1 & print "]\n"
	---------------------------------
	elab_arraydim(env,ad,SOME((e,t,c))) => fail

  rule	print "- elab_arraydim failed\n"
	-------------------------------------
	elab_arraydim(_,_,_) => fail

end

relation print_dim : (int option) list => () =

  rule	print ":"
	---------
	print_dim [NONE]

  rule	int_string x => s & print s
	---------------------------
	print_dim [SOME(x)]

  rule	print ":," & print_dim xs
	-------------------------
	print_dim NONE::xs

  rule	int_string x => s & print s & print "," & print_dim xs
	------------------------------------------------
	print_dim SOME(x)::xs

end

(** relation: elab_arraydim_decl *)

relation elab_arraydim_decl : (Env.Env, Absyn.ArrayDim) => (int option) list =

  axiom	elab_arraydim_decl(_,[]) => []

  rule	elab_arraydim_decl(env,ds) => l
	-------------------------------
	elab_arraydim_decl(env,Absyn.NOSUB::ds) => NONE::l

  rule	StaticExp.elab_exp(env, d) => (e,Types.T_INTEGER,true) &
	StaticExp.ceval(env,e) => Values.INTEGER(i) &
	elab_arraydim_decl(env,ds) => l
	-------------------------------------------
	elab_arraydim_decl(env,Absyn.SUBSCRIPT(d)::ds) => SOME(i)::l

  rule	print "- elab_arraydim_decl failed\n"
	-------------------------------------
	elab_arraydim_decl(_,_) => fail
	
end

(** relation: complete_arraydim *)

relation complete_arraydim : (int option) list => int list =

  axiom	complete_arraydim [] => []

  rule	complete_arraydim xs => xs'
	---------------------------
	complete_arraydim SOME(x)::xs => x::xs'

end

(** relation: elab_arraydim_type *)

relation compatible_arraydim : ((int option) list,(int option) list)
	  => int list =

  axiom	compatible_arraydim([],[]) => []

  rule	compatible_arraydim(xs,ys) => l
	-------------------------------
	compatible_arraydim(SOME(x)::xs,NONE::ys) => x::l

  rule	compatible_arraydim(xs,ys) => l
	-------------------------------
	compatible_arraydim(NONE::xs,SOME(y)::ys) => y::l

  rule	x = y &
	compatible_arraydim(xs,ys) => l
	-------------------------------
	compatible_arraydim (SOME(x)::xs,SOME(y)::ys) => x::l

  rule	print "- compatible_arraydim failed\n"
	--------------------------------------
	compatible_arraydim (NONE::_,NONE::_) => fail

end

(** relation: elab_arraydim_type *)

relation elab_arraydim_type : Types.Type => (int option) list =

  rule	elab_arraydim_type2(d) => l
	---------------------------
	elab_arraydim_type(Types.T_ARRAY(d,_)) => l
	
	(* default *)
  axiom	elab_arraydim_type(_) => []

end

(**)

relation elab_arraydim_type2 : Types.ArrayDim => (int option) list =

  axiom	elab_arraydim_type2(Types.NODIM) => []

  rule	elab_arraydim_type2(ds) => ds'
	------------------------------
	elab_arraydim_type2(Types.DIM(d,ds)) => d::ds'

end

(** relation: inst_class_decl
 **
 ** The class definition is instantiated although no variable
 ** is declared with it.  After instantiating it, it is
 ** checked to see if it can be used as a package, and if it
 ** can, then it is added as a variable under the same name as
 ** the class.  This makes it possible to use a unified lookup
 ** mechanism.  And since packages only can contain constants
 ** and class definition, instantiating a package does not do
 ** anything else.
 **)

relation inst_class_decl : (Env.Env, Mod.Mod, Prefix.Prefix,
			    Connect.Sets, SCode.Class)
	  => (Env.Env, DAE.DAEcomp list) =

  rule	print "  adding " & print n & print "\n" &
	Env.extend_frame_c(env,c) => env' &

	let env'' = env' &
	let dae' = []
	(*
	Prefix.prefix_add(n,[],pre) => pre' &
	inst_class(env,mod,pre',csets,c) => (dae,csets',ty,st) &
	add_package(env',n,ty,st,dae) => (env'', dae')
	*)
	----------------------------------
	inst_class_decl(env,mod,pre,csets,c as SCode.CLASS(n,_,_,_))
	  => (env'', dae')

end

(** relation: add_package
 **)

relation add_package : (Env.Env, Absyn.Ident, Types.Type, ClassInf.State,
			DAE.DAEcomp list)
	  => (Env.Env, DAE.DAEcomp list) =

  rule	ClassInf.valid(st, Absyn.R_PACKAGE) &
	Env.extend_frame_v(env,
			   Env.FRAMEVAR(n, Absyn.ATTR([],
						      false,Absyn.CONST,
						      Absyn.BIDIR),
					ty,Types.UNBOUND)) => env' &
	print "  added package " & print n & print "\n"
	--------------------------------------------------------
	add_package(env,n,ty,st,dae) => (env',dae)

  axiom	add_package(env,_,_,_,_) => (env,[])

end

(** relation: dae_declare
 **)

relation dae_declare : (Exp.ComponentRef,
			Types.Type, Absyn.VarAttr) => DAE.DAEcomp list =

  rule	dae_declare2 (vn, ty, par, ad) => dae
	-----------------------------------
	dae_declare (vn, ty, Absyn.ATTR(ad,_,par,_)) => dae

  rule	print "- dae_declare failed\n"
	------------------------------
	dae_declare(_,_,_) => fail

end

relation dae_declare2 : (Exp.ComponentRef, Types.Type, Absyn.VarType,
			 Absyn.ArrayDim)
	  => DAE.DAEcomp list =

  rule	dae_declare3 (vn, ty, DAE.VARIABLE, ad) => dae
	-----------------------------------------
	dae_declare2 (vn, ty, Absyn.VAR, ad) => dae

  rule	dae_declare3 (vn, ty, DAE.DISCRETE, ad) => dae
	-----------------------------------------
	dae_declare2 (vn, ty, Absyn.DISCRETE, ad) => dae

  rule	dae_declare3 (vn, ty, DAE.PARAM, ad) => dae
	-----------------------------------------
	dae_declare2 (vn, ty, Absyn.PARAM, ad) => dae

  rule	dae_declare3 (vn, ty, DAE.CONST, ad) => dae
	-----------------------------------------
	dae_declare2 (vn, ty, Absyn.CONST, ad) => dae

  rule	print "- dae_declare2 failed\n"
	------------------------------
	dae_declare2(_,_,_,_) => fail

end

relation dae_declare3 : (Exp.ComponentRef, Types.Type, DAE.VarKind,
			 Absyn.ArrayDim)
	  => DAE.DAEcomp list =

  axiom	dae_declare3 (vn, Types.T_INTEGER, kind, ad)
	  => [DAE.VAR(vn, kind, DAE.INT, ad)]
	
  axiom	dae_declare3 (vn, Types.T_REAL, kind, ad)
	  => [DAE.VAR(vn, kind, DAE.REAL, ad)]
	
  axiom	dae_declare3 (vn, Types.T_BOOL, kind, ad)
	  => [DAE.VAR(vn, kind, DAE.BOOL, ad)]
	
  axiom	dae_declare3 (vn, Types.T_STRING, kind, ad)
	  => [DAE.VAR(vn, kind, DAE.STRING, ad)]

  rule	print "  not declaring variable " &
	Exp.print_component_ref c & print " :: " &
	Types.print_type ty & print "\n"
	--------------------------------------
	dae_declare3 (c,ty,_,_) => []

end

(** relation: inst_equation
 **)

relation inst_equation: (Env,Mod, Prefix, Connect.Sets, ClassInf.State,
			 SCode.Equation)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State) =

	(**  connect
	 **
	 ** Handle connct statements
	 **)

  rule	inst_connect(csets,env,pre,c1,c2) => csets' &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	------------------------------------------------------------
	inst_equation(env,mods,pre, csets, ci_state, SCode.EQ_CONNECT(c1,c2))
	  => ([],env,csets',ci_state')
	  
	(**  assert
	 **
	 ** FIXME: Handle assertions
	 **)

  rule	StaticExp.elab_exp(env,e) => (e', t, c) &
	inst_assertion (env, e', t, c, d, pre) => dae &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	--------------------------------------------------------------
	inst_equation(env,mods,pre,csets, ci_state,
		      SCode.EQ_EXPR(Absyn.CALL(Absyn.CREF_IDENT("assert",[]),
					       [e,Absyn.STRING(d)])))
	  => (dae,env,csets,ci_state')

  rule	print "- No expression equations yet\n" &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	-------------------------------------
	inst_equation(env,mods,pre,csets,ci_state,SCode.EQ_EXPR(_)) => fail

  rule	Lookup.lookup_ident_local(env,n)
	  => Env.FRAMEVAR(_,_,_,Types.EQBOUND(_,_)) &
	print " shadowed equation for " & print n & print "\n" &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	------------------------------------------------------
	inst_equation(env,mods,pre,csets,ci_state,
		      SCode.EQ_EQUALS(Absyn.CREF(Absyn.CREF_IDENT(n,[])), e2))
	  => ([],env,csets,ci_state')

  rule	print " equation\n" &
	StaticExp.elab_exp(env,e1) => (e1',t1,c1) &
	StaticExp.elab_exp(env,e2) => (e2',t2,c2) &
	Prefix.prefix_exp(env,e1',pre) => e1'' &
	Prefix.prefix_exp(env,e2',pre) => e2'' &
	inst_eq_equation(e1'',t1,e2'',t2) => dae &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	--------------------------------------------------------------
	inst_equation(env, mods, pre, csets, ci_state, SCode.EQ_EQUALS(e1,e2))
	  => (dae, env, csets, ci_state')

	(**  `if' statements
	 **
	 **)

  rule	StaticExp.elab_exp(env,e) => (e',Types.T_BOOL,true) &
	StaticExp.ceval(env,e') => Values.BOOL(cond) &
	select(cond,tb,fb) => b &
	inst_list(env,mod,pre,csets,ci_state,inst_equation, b)
	  => (dae,env',csets', ci_state')
	--------------------------------------------------------
	inst_equation(env,mod,pre,csets,ci_state,SCode.EQ_IF(e,tb,fb))
	  => (dae,env',csets', ci_state')

	(**  `for' loops
	 **
	 ** The loop expression is evaluated to a constant array of
	 ** integers, and then the loop is unrolled.
	 **)

  rule	StaticExp.elab_exp (env,e)
	  => (e',Types.T_ARRAY(Types.DIM(_,Types.NODIM),
			       Types.T_INTEGER),
	      true) &
	StaticExp.ceval (env,e') => v &
	print "  Unrolling " & print i & print " in " &
 	Dump.print_exp e & print " = " &
 	Values.print_val v & print "\n" &
	unroll(env,mod,pre,csets,ci_state,i,v,el) => (dae, csets') &
	ClassInf.trans(ci_state, ClassInf.FOUND_EQUATION) => ci_state'
	-----------------------------------------------------------
	inst_equation(env,mod,pre,csets,ci_state,SCode.EQ_FOR(i,e,el))
	  => (dae, env,csets', ci_state')

  rule	print "- inst_equation failed\n"
	----------------------------------
	inst_equation(_,_,_,_,_,_) => fail

end

relation inst_eq_equation : (Exp.Exp, Types.Type, Exp.Exp, Types.Type)
	  => DAE.DAEcomp list =

  rule	Types.same_type(t1,t2) => true &
	(* FIXME: magic? *)
	StaticExp.elab_relop(Absyn.EQUAL, t1) => op
	--------------------------------------------
	inst_eq_equation(e1,t1,e2,t2) => [DAE.EQUATION(Exp.RELATION(e1,op,e2))]
	
  rule	Types.same_type(t1,t2) => false &
	print "# Type mismatch in equation\n"&
	print "    lhs: " & Exp.print_exp e1 &
	print " :: " & Types.print_type t1 & print "\n" &
	print "    rhs: " & Exp.print_exp e2 &
	print " :: " & Types.print_type t2 & print "\n"
	----------
	inst_eq_equation(e1,t1,e2,t2) => fail

end

(** relation: inst_assertion
 **
 ** Instantiate an assertion.
 **)

relation inst_assertion : (Env.Env, Exp.Exp, Types.Type,
			   bool, string, Prefix)
	  => DAE.DAEcomp list =

  rule	Prefix.prefix_exp(env,e,pre) => e' &
	print " (constant) ASSERTION(" & Exp.print_exp e' & print "): " &
	print d & print "\n"
	--------------------
	inst_assertion (env, e, Types.T_BOOL, true, d, pre) => [(*FIXME*)]

  rule	Prefix.prefix_exp(env,e,pre) => e' &
	print " ASSERTION(" & Exp.print_exp e' & print "): " &
	print d & print "\n"
	--------------------
	inst_assertion (env, e, Types.T_BOOL, _, d, pre) => [(*FIXME*)]

  rule	print "# Assertions have to be of type Boolean\n" &
	print "  assertion: (" &
	Prefix.prefix_exp(env,e,pre) => e' & Exp.print_exp e' & print "): " &
 	print d & print "\n"
	-----------------------------
	inst_assertion (env, e, _, _, d, pre) => fail
	
end

(** relation: unroll
 **
 ** Unrolling a loop is a way of removing the non-linear structure of
 ** the `for' clause by explicitly repeating the body of the loop once
 ** for each iteration.
 **)

relation unroll : (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
		   Ident, Values.Value, SCode.Equation list)
	  => (DAE.DAEcomp list, Connect.Sets) =

  axiom	unroll (_,_,_,csets,_,_,Values.ARRAY([]),_) => ([], csets)

  rule	print "   unroll: " & Values.print_val fst & print "\n" &
	Env.open_scope env => env' &
	Env.extend_frame_v (env',
			    Env.FRAMEVAR(i, Absyn.ATTR([],
						       false,
						       Absyn.CONST,
						       Absyn.BIDIR),
					 Types.T_INTEGER,
					 Types.VALBOUND(fst))) => env'' &
	inst_list(env'',mods,pre,csets,ci_state,inst_equation, eqs)
	  => (dae1,env''',csets', ci_state') &
	unroll (env, mods, pre, csets', ci_state', i, Values.ARRAY(rest), eqs)
	  => (dae2, csets'') &
	list_append(dae1,dae2) => dae
	-----------------------------
	unroll (env,mods,pre,csets,ci_state,i,Values.ARRAY(fst::rest),eqs)
	  => (dae, csets'')

  rule	print "- unroll " & Values.print_val v & print " failed\n"
	-------------------------
	unroll (_,_,_,_,_,_,v,_) => fail

end

(** relation: inst_algorithm
 **)

relation inst_algorithm : (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
			   SCode.Algorithm)
	  => (DAE.DAEcomp list, Env, Connect.Sets, ClassInf.State) =

  rule	inst_statements(env,statements) => statements'
	----------------------------------------------
	inst_algorithm(env,_,_,csets,ci_state,SCode.ALGORITHM(statements))
	  => ([DAE.ALGORITHM(Algorithm.ALGORITHM(statements'))],
	      env,csets,ci_state)

  rule	print "- inst_algorithm failed\n"
	---------------------------------
	inst_algorithm(_,_,_,_,_,_) => fail

end

(** relation: inst_statements *)

relation inst_statements : (Env, Absyn.Algorithm list)
	  => Algorithm.Statement list =

  axiom	inst_statements(env,[]) => []

  rule	inst_statement(env,x) => x' &
	inst_statements(env,xs) => xs'
	------------------------------
	inst_statements(env,x::xs) => x'::xs'

end

(** relation: inst_statement *)

relation inst_statement : (Env, Absyn.Algorithm) => Algorithm.Statement =

  rule	StaticExp.elab_cref (env,cr) => (ce, ct, ccon) &
	StaticExp.elab_exp (env,e) => (e', et, econ) &
	Algorithm.make_assignment(ce,ct,ccon,e',et,econ) => stmt
	--------------------------------------------------------
	inst_statement(env,Absyn.ALG_ASSIGN(cr,e)) => stmt

  rule	StaticExp.elab_exp(env,e) => (e',t,c) &
	inst_statements(env,tb) => tb' &
	inst_elseifs(env,eib) => eib' &
	inst_statements(env,fb) => fb' &
	Algorithm.make_if(e',t,tb',eib',fb') => stmt
	--------------------------------------------
	inst_statement(env,Absyn.ALG_IF(e,tb,eib,fb)) => stmt

  rule	StaticExp.elab_exp (env,e) => (e',t,c) &
	inst_statements(env,sl) => sl' &
	Algorithm.make_for(i,e',t,c,sl') => stmt
	---------------------------------------
	inst_statement(env,Absyn.ALG_FOR(i,e,sl)) => stmt

  rule	StaticExp.elab_exp (env,e) => (e',t,c) &
	inst_statements(env,sl) => sl' &
	Algorithm.make_while(e',t,c,sl') => stmt
	---------------------------------------
	inst_statement(env,Absyn.ALG_WHILE(e,sl)) => stmt

  rule	StaticExp.elab_exp (env,e) => (e',t,c) &
	inst_statements(env,sl) => sl' &
	Algorithm.make_when(e',t,c,sl') => stmt
	---------------------------------------
	inst_statement(env,Absyn.ALG_WHEN(e,sl)) => stmt

  rule	print "- inst_statement failed\n"
	---------------------------------
	inst_statement(_,_) => fail

end

(** relation: inst_elseifs *)

relation inst_elseifs : (Env.Env, (Absyn.Exp * Absyn.Algorithm list) list)
	=> (Exp.Exp * Types.Type * Algorithm.Statement list) list =

  axiom	inst_elseifs (env,[]) => []

  rule	StaticExp.elab_exp(env,e) => (e',t,c) &
	inst_statements(env,l) => stmts &
	inst_elseifs(env,tail) => tail'
	-------------------------------
	inst_elseifs(env,(e,l)::tail) => ((e',t,stmts)::tail')

  rule	print "- inst_elseifs failed\n"
	-------------------------------
	inst_elseifs(_,_) => fail

end

(**)

relation inst_connect: (Connect.Sets, Env, Prefix,
			Absyn.ComponentRef, Absyn.ComponentRef)
	  => Connect.Sets =

  rule	print " connecting " &
	Dump.print_component_ref(c1) & print " with " &
	Dump.print_component_ref(c2) & print "\n" &
	StaticExp.elab_cref(env, c1) => (Exp.CREF(c1'),t1,con1) &
	StaticExp.elab_cref(env, c2) => (Exp.CREF(c2'),t2,con2) &
	StaticExp.canon_cref(env, c1') => c1'' &
	StaticExp.canon_cref(env, c2') => c2'' &
	Lookup.lookup_var_local(env,c1'')
	  => (Absyn.ATTR(_,flow1,_,_),ty1,_) &
	Lookup.lookup_var_local(env,c2'')
	  => (Absyn.ATTR(_,flow2,_,_),ty2,_) &
	print "  looked up connectors\n" &

	(** Check that the types of the connectors are good. *)
	valid_connector(ty1) &
	valid_connector(ty2) &
	check_connect_types(c1'',ty1,con1,flow1,c2'',ty2,con2,flow2) &
	print "  they are valid connectors\n" &

	component_face(c1'') => f1 &
	component_face(c2'') => f2 &
	connect_components(sets, pre, c1'', f1, c2'', f2, ty1, flow1)
	  => sets'
	---------------------------------
	inst_connect(sets, env,pre,c1,c2) => sets'

  rule	print "# could not connect\n"
	---------------------------------
	inst_connect(sets,_,_,_,_) => fail

end

(** relation valid_connector:
 **
 ** This relation tests whether a type is a eligible to be used in
 ** connections.
 **
 ** FIXME: It is unknown whether `Real' is a valid connector.
 **)

relation valid_connector : Types.Type => () =

  axiom	valid_connector Types.T_REAL

  rule	ClassInf.valid(state,Absyn.R_CONNECTOR)
	---------------------------------------
	valid_connector Types.T_COMPLEX(state,_)

  rule	print "# Can't connect objects of type " &
	Types.print_type t & print "\n"
	-------------------------------
	valid_connector t => fail
end

(** relation: check_connect_types
 **
 ** Check that the type of two connectors match, so that they really
 ** may be connected.
 **
 ** FIXME: This checks the `flow' attribute on the top variable. This depends on whether connections are allowed on Reals.
 **)

relation check_connect_types : (Exp.ComponentRef, Types.Type, bool, bool,
			       	Exp.ComponentRef, Types.Type, bool, bool)
	  => () =

  rule	flow1 = flow2 &
	Types.same_type(t1, t2) => true
	-------------------------------
	check_connect_types(_,t1,false,flow1,_,t2,false,flow2)

  rule	print "# Can't connect constant connector " &
 	Exp.print_component_ref c1 &
	print " to " & Exp.print_component_ref c2 & print "\n"
	------------------------------------------------------
	check_connect_types(c1,_,true,_,c2,_,_,_) => fail

  rule	print "# Can't connect constant connector " &
 	Exp.print_component_ref c2 &
	print " to " & Exp.print_component_ref c1 & print "\n"
	------------------------------------------------------
	check_connect_types(c1,_,_,_,c2,_,true,_) => fail

  rule	print "# Can't connect flow component " &
 	Exp.print_component_ref c1 &
	print " to non-flow component " &
 	Exp.print_component_ref c2 & print "\n"
	------------------------------------------------------
	check_connect_types(c1,_,_,true,c2,_,_,false) => fail

  rule	print "# Can't connect non-flow component " &
 	Exp.print_component_ref c1 &
	print " to flow component " &
 	Exp.print_component_ref c2 & print "\n"
	------------------------------------------------------
	check_connect_types(c1,_,_,false,c2,_,_,true) => fail

  rule	print "- check_connect_types(" & Exp.print_component_ref c1 &
	print " <-> " & Exp.print_component_ref c2 & print ") failed\n"
	------------------------------------------------------
	check_connect_types(c1,_,_,_,c2,_,_,_) => fail

end

(** relation: connect_components
 **
 ** This relation connects two components and generates connection
 ** sets along the way.  For simple components (of type `Real') it
 ** adds the components to the set, and for complex types it traverses
 ** the subcomponents and recursively connects them to each other.
 **)

relation connect_components: (Connect.Sets,
			      Prefix,
			      Exp.ComponentRef, Connect.Face,
			      Exp.ComponentRef, Connect.Face,
			      Types.Type, bool) => Connect.Sets =
	
	(**  Flow type *)

  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "  connect_components flow: " &
	Exp.print_component_ref c1' & print " <-> " &
	Exp.print_component_ref c2' &
	print "\n" &
	Connect.add_flow(sets, c1', f1, c2', f2) => sets'
	-----------------------------------------
	connect_components(sets, pre, c1, f1, c2, f2,
			   Types.T_REAL, true) => sets'
	
	(**  Non-flow type *)

  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "  connect_components non-flow: " &
	Exp.print_component_ref c1' & print " <-> " &
	Exp.print_component_ref c2' &
	print "\n" &
	Connect.add_equ(sets, c1', c2') => sets'
	-----------------------------------------
	connect_components(sets, pre, c1, _, c2, _,
			   Types.T_REAL, false) => sets'

	(**  Complex types *)

  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "  connect_components 2: " &
	Exp.print_component_ref c1' & print " <-> " &
	Exp.print_component_ref c2' &
	print "\n" &
	connect_vars(sets,c1',f1,c2',f2, l) => sets'
	----------------------------------------
	connect_components(sets,pre,c1,f1,c2,f2,
			   Types.T_COMPLEX(_,l),_) => sets'

	(**  Error *)
	
  rule	Prefix.prefix_cref(pre, c1) => c1' &
	Prefix.prefix_cref(pre, c2) => c2' &
	print "# Wrong type in connection\n"&
 	print "  while making connectiion " &
	Exp.print_component_ref c1 & print " <-> " &
	Exp.print_component_ref c2 & print "\n" &
	print "  The type `" & Types.print_type t &
	print "' is not allowed in connections\n"
	----------------------------------------
	connect_components(_,pre,c1,_,c2,_,t,_) => fail
	
end

(** relation: connect_vars
 **
 ** This relation connects two subcomponents by adding the component
 ** name to the current path and recursively connecting the components
 ** using the relation `connet_components'.
 **)

relation connect_vars : (Connect.Sets,
			 Exp.ComponentRef, Connect.Face,
			 Exp.ComponentRef, Connect.Face,
			 Types.Var list) => Connect.Sets =

  axiom	connect_vars(sets,_,_,_,_,[]) => sets

  rule	Exp.extend_cref(c1, n, []) => c1' &
	Exp.extend_cref(c2, n, []) => c2' &
	(* print "  connect_vars: " &
	 * Dump.print_component_ref c1' & print " <-> " &
	 * Dump.print_component_ref c2' &
	 * print "\n" & *)
	connect_components(sets,Prefix.NOPRE, c1',f1, c2',f2, ty, flow)
	  => sets' &
	connect_vars(sets',c1,f1,c2,f2,xs) => sets''
	--------------------------------------
	connect_vars(sets,c1,f1,c2,f2,
		     Types.VAR(n,Absyn.ATTR(_,flow,_,_),ty,_)::xs)
	  => sets''

end

(**)

relation mktype : (ClassInf.State,Types.Var list) => Types.Type =

  axiom	mktype(ClassInf.TYPE_INTEGER(_),_) => Types.T_INTEGER
  axiom	mktype(ClassInf.TYPE_REAL(_),_)    => Types.T_REAL
  axiom	mktype(ClassInf.TYPE_STRING(_),_)  => Types.T_STRING
  axiom	mktype(ClassInf.TYPE_BOOL(_),_)    => Types.T_BOOL

  axiom	mktype(st,l) => Types.T_COMPLEX(st,l)

end

(**)

relation assert : (bool, bool, string) => () =

  rule  x = y
	-----
	assert(x,y,_)

  rule  not x = y &
	print "# " & print m & print "\n"
	--------------------------------------
	assert(x,y,m)

end

(**)

relation optional_cons : ('a option, 'a list) => 'a list =

  axiom optional_cons(NONE, l) => l

  axiom optional_cons(SOME(x), l) => x::l

end

(**)

relation inst_list : (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
		      (Env, Mod, Prefix, Connect.Sets, ClassInf.State,
		       'a) => ('b list, Env, Connect.Sets, ClassInf.State),
		      'a list)
	  => ('b list, Env, Connect.Sets, ClassInf.State) =

  axiom inst_list(env,mod,pre,csets,ci_state,r,[]) => ([],env,csets,ci_state)

  rule	r(env,mod,pre,csets,ci_state,e) => (l,env',csets',ci_state') &
	inst_list(env',mod,pre,csets',ci_state',r,es)
	  => (l',env'',csets'',ci_state'') &
	list_append(l,l') => l''
	--------------------------------------------
	inst_list(env,mod,pre,csets,ci_state,r,e::es)
	  => (l'',env'',csets'',ci_state'')

end

(**)

relation component_face : Exp.ComponentRef => Connect.Face =

  axiom component_face Exp.CREF_QUAL(_,_,Exp.CREF_IDENT(_,_)) => Connect.INNER

  axiom	component_face Exp.CREF_IDENT(_,_) => Connect.OUTER

  rule	print "# While connecting " &
	Exp.print_component_ref c & print "\n" &
	print "# Only local or child connectors allowed.\n"
	(* FIXME: This only checks the syntactic properties. *)
	---------------------------------------------------
	component_face c => fail

end

(** relation: inst_mod_equation
 **
 ** This relation adds the equation in the declaration of a variable,
 ** if such an equation exists.
 ***)

relation inst_mod_equation : (Env, Prefix, Ident, Types.Type, Mod)
	  => DAE.DAEcomp list =

  rule  print "  equation modification: " & print v & Mod.print_mod mod &
	print "\n" &

	Types.same_type(ty1,ty2) => true &
	Prefix.prefix_cref(pre,Exp.CREF_IDENT(v,[])) => cr &
	inst_eq_equation(Exp.CREF(cr),ty1,e,ty2) => dae
	-----------------------------------------------
	inst_mod_equation(env,pre,v,ty1,mod as Mod.MOD(_,_,SOME((e,ty2,c))))
	  => dae
	  
  rule  Types.same_type(ty1,ty2) => false &
	print "# Wrong type in equation modifier\n" &
	print "    expected: " & Types.print_type ty1 & print "\n" &
	print "    was:      " & Types.print_type ty2 & print "\n"
	--------------------------------------------------------
	inst_mod_equation(env,pre,v,ty1,mod as Mod.MOD(_,_,SOME((e,ty2,c))))
	  => fail
	  
  axiom inst_mod_equation(_,_,_,_,Mod.MOD(_,_,NONE)) => []
  axiom inst_mod_equation(_,_,_,_,Mod.NOMOD) => []

  rule	print "- inst_mod_equation failed\n"
	------------------------------------
  	inst_mod_equation (_,_,_,_,_) => fail

end

(**)

relation check_prot : (bool, Mod.Mod, Exp.ComponentRef) => () =

  rule  print "  public variable " & Exp.print_component_ref cref & print "\n"
	--------------------------------------------------
	check_prot(false,_,cref)
	
  axiom check_prot(_,Mod.NOMOD,_)

  rule  print "# Trying to modify protected element " &
	Exp.print_component_ref cref & print "\n"
	-----------------------------------------
	check_prot(true,_,cref) => fail

end

(** relation: make_binding
 **
 ** FIXME: Should the `CONST' attribute be checked, or should the
 ** analyzed constant property be used?
 **)

relation make_binding : (Env.Env, Absyn.VarAttr, Mod.Eqmod option, SCode.Class)
	  => Types.Binding =

  axiom	make_binding (_,_,NONE,_) => Types.UNBOUND

  rule	print "  constant binding: " & Exp.print_exp e & print "\n" &
	class_type cl => ct &
	make_const_binding (env,e, t, ct, c) => binding
	----------------------------------------
	make_binding (env,Absyn.ATTR(_,_,Absyn.CONST,_),SOME((e,t,c)),cl)
	  => (* binding *) Types.EQBOUND(e,c)

	(* default *)

  rule	print "  nonconstant binding: " & Exp.print_exp e & print "\n"
	-----------------------------------------------------------
	make_binding (_,_, SOME((e,t,c)),_) => Types.EQBOUND(e,c)

  rule	print "- make_binding failed\n"
	-------------------------------
	make_binding(_,_,_,_) => fail

end

relation make_const_binding : (Env.Env, Exp.Exp,
			       Types.Type, Types.Type, bool)
	  => Env.Binding =

	(* Cast the value to real if necessary *)
  rule	make_const_binding (env,Exp.CAST_TO_REAL(e),
			    Types.T_REAL, Types.T_REAL,c) => b
	------------------------------------------------------
	make_const_binding (env,e,Types.T_INTEGER,Types.T_REAL,c) => b

  rule	t = ct &
	StaticExp.ceval (env, e) => v &
	print "  constant expression " & Exp.print_exp e &
 	print " = " & Values.print_val v & print " detected\n"
	---------------------------------
	make_const_binding (env,e,t,ct,true) => Types.VALBOUND(v)

  rule	not t = ct &
	print "# Different types in binding\n"
	--------------------------------------
	make_const_binding (env,e,t,ct,true) => fail

  rule	print "# Non-constant equation for constant\n"
	---------------------------------
	make_const_binding (env,e,t,ct,false) => fail

  rule	print "- make_const_binding failed\n"
	-------------------------------
	make_const_binding(_,_,_,_,_) => fail

end

relation class_type : SCode.Class => Types.Type =

  axiom	class_type SCode.CLASS(_,_,Absyn.R_PREDEFINED_INT,_) => Types.T_INTEGER
  axiom	class_type SCode.CLASS(_,_,Absyn.R_PREDEFINED_STRING,_)
	  => Types.T_STRING
  axiom	class_type SCode.CLASS(_,_,Absyn.R_PREDEFINED_REAL,_) => Types.T_REAL
  axiom	class_type SCode.CLASS(_,_,Absyn.R_PREDEFINED_BOOL,_) => Types.T_BOOL

	(* FIXME: Should instantiate the class *)
  axiom	class_type _ => Types.T_COMPLEX(ClassInf.UNKNOWN("---"),[(* FIXME *)])

end
