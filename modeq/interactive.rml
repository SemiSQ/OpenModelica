(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(* $Name$ *)

module Interactive:
  with "absyn.rml"
  with "explode.rml" 
  with "dae.rml" 
  datatype InteractiveStmt = IALG of Absyn.Algorithm
			   | IEXP of Absyn.Exp
  datatype InteractiveStmts = ISTMTS of InteractiveStmt list
							  
  datatype InstantiatedClass =  INSTCLASS of Absyn.Path * (* The F.Q. name of the instantiated class*)
					     DAE.Element list (* The list of DAE elements *)
  datatype InteractiveVariable = IVAR of Absyn.Ident * (* The variable identifier *)
					 Absyn.Exp (* The expression containing the value *)

  datatype InteractiveSymbolTable = SYMBOLTABLE of Absyn.Program * (*The ast*)
						   SCode.Program * (* The exploded ast *)
						   InstantiatedClass list * (* List of instantiated classes*)
						   InteractiveVariable	list (* List of variables with values*)  
  relation evaluate: (InteractiveStmts, InteractiveSymbolTable) => (string,InteractiveSymbolTable) 
end
with "dump.rml"

(** relation: evaluate
 ** This relation evaluates expressions feeded interactively to the compiler.
**)

relation evaluate:  (InteractiveStmts, InteractiveSymbolTable) => (string,InteractiveSymbolTable) =

  rule	let newst = SYMBOLTABLE(Absyn.PROGRAM([],Absyn.TOP),[],[],[])
	-------------------------------------------------------------
	evaluate(ISTMTS([IEXP(Absyn.CALL(Absyn.CREF_IDENT("clear",_),_))]),_) 
	    => ("Clearing symbol table\n", newst)
  rule	Dump.dump(p)
	------------
	evaluate(ISTMTS([IEXP(Absyn.CALL(Absyn.CREF_IDENT("list",_),_))]),st as SYMBOLTABLE(p,_,_,_))
	    => (" symboltable :",st)

  rule	evaluate_graphical_api(stmts,st) => (str,newst)
	----------------------------------------------------
	evaluate(stmts as ISTMTS([IEXP(Absyn.CALL(_,_))]),st) => (str,newst)
  axiom	evaluate(_,st) => ("Not implemented yet\n",st)
end

(** relation: evaluate_graphical_api
 ** This relation evaluates all primitives in the graphical api.
 **)

relation evaluate_graphical_api: (InteractiveStmts, InteractiveSymbolTable) => 
	(string, InteractiveSymbolTable) = 
	
  rule	let resstr="GAPI function not implemented yet\n" & let newst = st
	---------------------------------------------------
	evaluate_graphical_api(ISTMTS([IEXP(Absyn.CALL(Absyn.CREF_IDENT("loadModel",_),_))]),st as SYMBOLTABLE(p,s,ic,iv)) => (resstr,newst)
	
	
  rule	let resstr="GAPI function not implemented yet\n" & let newst = st
	---------------------------------------------------
	evaluate_graphical_api(ISTMTS([IEXP(Absyn.CALL(Absyn.CREF_IDENT("saveModel",_),_))]),st as SYMBOLTABLE(p,s,ic,iv)) => (resstr,newst)
	
  rule	Absyn.update_program(
      Absyn.PROGRAM([Absyn.CLASS(name,false,Absyn.R_MODEL,Absyn.PARTS([Absyn.PUBLIC([])]))],Absyn.TOP),
      p) => newp &
	let newst = SYMBOLTABLE(newp,s,ic,iv) &
	string_append(name,"\n") => resstr
	---------------------------------------------------
	evaluate_graphical_api(
	    ISTMTS([IEXP(Absyn.CALL(
		Absyn.CREF_IDENT("newModel",_),
		Absyn.FUNCTIONARGS([Absyn.STRING(name)],[])))]
	    ),
	    st as SYMBOLTABLE(p,s,ic,iv)) => (resstr,newst)
	    
  rule	componentref_to_path(cr) => path &
	Absyn.update_program(
      Absyn.PROGRAM([Absyn.CLASS(name,false,Absyn.R_MODEL,Absyn.PARTS([Absyn.PUBLIC([])]))],Absyn.WITHIN(path)),
      p) => newp &
	let newst = SYMBOLTABLE(newp,s,ic,iv) &
	string_append(name,"\n") => resstr
	---------------------------------------------------
	evaluate_graphical_api(
	    ISTMTS([IEXP(Absyn.CALL(
		Absyn.CREF_IDENT("newModel",_),
		Absyn.FUNCTIONARGS([Absyn.STRING(name),Absyn.CREF(cr)],[])))]
	    ),
	    st as SYMBOLTABLE(p,s,ic,iv)) => (resstr,newst)
	
	
  rule	Absyn.add_component(name,tp,model,annlst,p) => (newp,resstr)
	-----------------------
	evaluate_graphical_api(
	    ISTMTS([IEXP(Absyn.CALL(
		Absyn.CREF_IDENT("addComponent",_),
		Absyn.FUNCTIONARGS([Absyn.STRING(name),Absyn.CREF(tp),Absyn.CREF(model)],annlst)))]
	    ),
	    st as SYMBOLTABLE(p,s,ic,iv)) => (resstr,SYMBOLTABLE(newp,s,ic,iv))
end

relation componentref_to_path: Absyn.ComponentRef => Absyn.Path = 

  axiom componentref_to_path(Absyn.CREF_IDENT(ident,_)) => Absyn.IDENT(ident)
	
  rule	componentref_to_path(x) => px
	-----------------------------
	componentref_to_path(Absyn.CREF_QUAL(id,_,x)) => Absyn.QUALIFIED(id,px)
end	
