(**
 ** file:        main.rml
 ** module:      Main
 ** description: Modelica main program
 **
 ** RCS: $Id$
 **
 ** This is the main program in the Modelica specification.
 **)

module Main:
	relation main: string list => ()
end

with "parse.rml"
with "dump.rml"
with "dumpgraphviz.rml"
with "explode.rml"
with "dae.rml"
with "inst.rml"
with "rtopts.rml"
with "debug.rml"
with "codegen.rml"

(** relation: translate_file
 **
 ** This relation invokes the translator on a source file.  The
 ** argument should be a list with a single file name.
 **)

relation translate_file : string list => () =

  rule	(*print "Parsing\n" &
*)	
	Parser.parse f => p

	& Debug.fprint ("dump", "\n--------------- Parsed program ---------------\n")
	& Debug.fcall ("dumpgraphviz", DumpGraphviz.dump, p)
	& Debug.fcall ("dump", Dump.dump, p)

	& Debug.fprint ("info", "\n------------------------------------------------------------ \n")
	& Debug.fprint ("info", "---elaborating\n")
	& SCode.elaborate(p) => p'

	(* & Dump.dump p' *)

	& Debug.fprint ("info", "---instantiating\n")
	& Inst.instantiate(p') => d'
	& Debug.fcall ("beforefixmodout", DAE.dump_debug, d')
	& fix_modelica_output (d') => d
(* & Debug.	print "\nJust instantiated" *)
	& Debug.fprint ("info", "---dumping\n")
	& Debug.fcall ("daedump", DAE.dump, d)
	& Debug.fcall ("daedumpdebug", DAE.dump_debug, d)
	& Debug.fcall ("daedumpgraphv", DAE.dump_graphviz, d)
	& Codegen.string_prefix_params d => d'
	& Debug.fcall ("codegen", Codegen.generate_functions, d')
	------------------------------
	translate_file [f]
	
  rule	print "# Too many arguments\n"
	----------------------------
	translate_file _::_::_

  rule	print "# Supply a file name\n"
	----------------------------
	translate_file []

  rule	print "# An error occured\n"
	----------------------------
	translate_file _

end


relation fix_modelica_output : DAE.DAElist => DAE.DAElist =

  rule	RTOpts.modelica_output => true &
	Inst.init_vars_modelica_output dae => dae'
	-------------------------------
	fix_modelica_output DAE.DAE(dae) => DAE.DAE(dae')

  rule	RTOpts.modelica_output => false
	-------------------------------
	fix_modelica_output (d as DAE.DAE(dae)) => d

end




(** relation: main
 **
 ** This is the main relation that the RML runtime system calls to
 ** start the translation.
 **)

relation main : string list => () =

  rule	RTOpts.args args => args' &
	translate_file args'
	--------------------
	main args

end
