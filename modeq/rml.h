#ifdef __cplusplus
extern "C" {
#endif
/*
 * rml-select.h
 */
#define RML_PLAIN
/* config.h for SPARC / Solaris 2.x / cc */

/* the following section was generated by repchk */
typedef int rml_sint_t;
typedef unsigned int rml_uint_t;
#define RML_LOG2_SIZE_INT 2
#define RML_SIZE_INT 4
#define RML_SIZE_DBL 8
#define RML_DBL_PAD
/* end of repchk-generated section */

#define	RML_CLOCK_TIMES

#define	RML_ALLOCA_BUILTIN

#define rml_setjmp	setjmp
#define rml_longjmp	longjmp

#ifdef	RML_PLAIN
#define RML_YOUNG_SIZE	(72*1024)
#endif
#ifdef	RML_SWITCH
#define RML_YOUNG_SIZE	(84*1024)
#endif
#ifdef	RML_PUSHY
#define RML_YOUNG_SIZE	(120*1024)
#endif

#ifdef	RML_PLAIN
#define RML_STATE_JOIN
#define	RML_STATE_APTR
#endif
#ifdef	RML_SWITCH
#define RML_STATE_JOIN
#define	RML_STATE_LPTR
#endif
/*
 * rml-core.h
 */

/*
 * A value is represented as a 32-bit quantity with a tag in the lowest bit.
 * An even value i<<1 represents the integer i.
 * An odd value p+3 represents (a pointer to) the node at even address p-3.
 * A value is typed as `void*'. When manipulated as an integer (possibly unsigned),
 * the typedef rml_sint_t (or rml_uint_t) is used. This type is either int or long.
 * False and true are represented as the fixnums 0 and 1, respectively.
 *
 * On a 64-bit machine, a value is a 64-bit quantity.
 */
#define RML_IMMEDIATE(i)	((void*)(i))
#define RML_TAGFIXNUM(i)	((i) << 1)
#define RML_UNTAGFIXNUM(x)	((rml_sint_t)(x) >> 1)	/* SIGNED right-shift */
#define RML_FALSE		RML_IMMEDIATE(RML_TAGFIXNUM(0))
#define RML_TRUE		RML_IMMEDIATE(RML_TAGFIXNUM(1))
#define RML_ISIMM(x)		(!((rml_uint_t)(x) & 1))
#define RML_FIXNUM_AND(x,y)	RML_IMMEDIATE((rml_sint_t)(x) & (rml_sint_t)(y))
#define RML_FIXNUM_OR(x,y)	RML_IMMEDIATE((rml_sint_t)(x) | (rml_sint_t)(y))
#define RML_FIXNUM_LT(x,y)	((rml_sint_t)(x) <  (rml_sint_t)(y))
#define RML_FIXNUM_LE(x,y)	((rml_sint_t)(x) <= (rml_sint_t)(y))
#define RML_FIXNUM_EQ(x,y)	((x) == (y))
#define RML_FIXNUM_NE(x,y)	((x) != (y))
#define RML_FIXNUM_GE(x,y)	((rml_sint_t)(x) >= (rml_sint_t)(y))
#define RML_FIXNUM_GT(x,y)	((rml_sint_t)(x) >  (rml_sint_t)(y))
#define RML_FIXNUM_ADD(x,y)	RML_IMMEDIATE((rml_sint_t)(x) + (rml_sint_t)(y))
#define RML_FIXNUM_DIV(x,y)	RML_IMMEDIATE(RML_TAGFIXNUM((rml_sint_t)(x) / (rml_sint_t)(y)))
#define RML_FIXNUM_MOD(x,y)	RML_IMMEDIATE((rml_sint_t)(x) % (rml_sint_t)(y))
#define RML_FIXNUM_MUL(x,y)	RML_IMMEDIATE((rml_sint_t)(x) * RML_UNTAGFIXNUM(y))
#define RML_FIXNUM_NEG(x)	RML_IMMEDIATE(-(rml_sint_t)(x))
#define RML_FIXNUM_SUB(x,y)	RML_IMMEDIATE((rml_sint_t)(x) - (rml_sint_t)(y))
#define RML_TAGPTR(p)		((void*)((char*)(p) + 3))
#define RML_UNTAGPTR(x)		((void*)((char*)(x) - 3))
#define RML_ISPTR(x)		((rml_uint_t)(x) & 1)
#define RML_GETHDR(x)		(*(rml_uint_t*)RML_UNTAGPTR(x))

/*
 * A word is a 32-bit quantity.
 * A node is a word-aligned structure, starting with a 32-bit unsigned header.
 * The high 24 bits of the header, `slots', contain the number of words
 * of the node, not counting the header itself.
 * The low 8 bits of the header contain a tag.
 * [ABCDEF00]	a structure with constructor A*32+B*16+C*8+D*4+E*2+F
 * [00000001]	an unbound reference node; `slots' is 1
 * [00000010]	an instantiated reference node; `slots' is 1
 * [XY000101]	a byte string with `slots*4+X*2+Y-4' bytes
 *		slots is always >= 1, and a '\0' follows the last byte
 * [00001001]	a 64-bit floating-point value; `slots' is 2
 * [xxxxxx11]	(used during garbage collection) a forwarded node;
 *		the header itself is the forwarding address, i.e.
 *		the header is RML_TAGPTR(forward_address)
 *
 * (IDEA: let RML_BOUNDHDR be a special case of constructor node, using tag 0)
 *
 * Bit 0 is zero if the node contains pointers, 1 otherwise.
 * Since structure headers have zeroes in their lowest two bits, they
 * could be used to directly index jump tables.
 *
 * On a 64-bit machine, words are 64 bits, the header is 64 bits, `slots'
 * is 56 bits, and strings and reals have the following tags:
 * [XYZ00101]	a byte string with `slots*8+X*4*Y*2+Z-8' bytes
 * [00001001]	a 64-bit floating-point value; `slots' is 1
 *
 * The definition of STRINGHDR(nbytes) is
 *	((nbytes + RML_SIZE_INT) << (8-RML_LOG2_SIZE_INT)) + 5
 * but this requires 3 arithmetic operations (add; shift; add).
 * Noting that (x + y) << z == (x << z) + (y << z), we have
 *	(nbytes<<(8-RML_LOG2_SIZE_INT))+(RML_SIZE_INT<<(8-RML_LOG2_SIZE_INT))+5
 * The middle expression simplifies to (1 << 8), so the final form is:
 *	(nbytes << (8-RML_LOG2_SIZE_INT)) + ((1 << 8) + 5)
 * which only requires 2 arithmetic operations (shift; add).
 */
#define RML_UNBOUNDHDR		(0x101)
#define RML_BOUNDHDR		(0x102)
#define RML_STRINGHDR(nbytes)	(((nbytes)<<(8-RML_LOG2_SIZE_INT))+((1<<8)+5))
#define RML_HDRISSTRING(hdr)	(((hdr) & ((1<<(8-RML_LOG2_SIZE_INT))-1)) == 5)
#define RML_HDRSTRLEN(hdr)	(((hdr) >> (8-RML_LOG2_SIZE_INT)) - RML_SIZE_INT)
#define RML_REALHDR		(((RML_SIZE_DBL/RML_SIZE_INT) << 8) + 9)
#define RML_STRUCTHDR(slots,ctor)	(((slots) << 8) + (((ctor) & 63) << 2))
#define RML_HDRISSTRUCT(hdr)	(!((hdr) & 3))
#define RML_HDRCTOR(hdr)	(((hdr) >> 2) & 63)
#define RML_NILHDR		RML_STRUCTHDR(0,0)
#define RML_CONSHDR		RML_STRUCTHDR(2,1)
#define RML_HDRSLOTS(hdr)	((hdr) >> 8)
#define RML_HDRHASPTRS(hdr)	(!((hdr) & 1))
#define RML_HDRISFORWARD(hdr)	(((hdr) & 3) == 3)

/*
 * Node layout and access macros
 */

struct rml_header {
    rml_uint_t header;
};

/* REFERENCES */

struct rml_ref {
    rml_uint_t header;	/* RML_{UN,}BOUNDHDR */
    void *data;
};
#define RML_REFDATA(x) (((struct rml_ref*)RML_UNTAGPTR(x))->data)

/* STRINGS */

struct rml_string {
    rml_uint_t header;	/* RML_STRINGHDR(bytes) */
    char data[1];	/* `bytes' elements + terminating '\0' */
};
#define RML_STRINGDATA(x) (((struct rml_string*)RML_UNTAGPTR(x))->data)

#define RML_DEFSTRINGLIT(NAME,LEN,VAL)	\
    struct {				\
	rml_uint_t header;		\
	char data[LEN+1];		\
    } NAME = { RML_STRINGHDR(LEN), VAL }
#define RML_REFSTRINGLIT(NAME) RML_TAGPTR(&(NAME).header)

/* REALS */

struct rml_real {
    rml_uint_t header;	/* RML_REALHDR */
    rml_uint_t data[RML_SIZE_DBL/RML_SIZE_INT];
};
#define RML_REALDATA(x) (((struct rml_real*)RML_UNTAGPTR(x))->data)

#ifdef	RML_DBL_PAD
struct rml_real_lit {	/* there must be no padding between `header' and `data' */
    rml_uint_t filler;
    rml_uint_t header;
    double data;
};
#define RML_DEFREALLIT(NAME,VAL) struct rml_real_lit NAME = {0,RML_REALHDR,VAL}
#else	/* !RML_DBL_PAD */
struct rml_real_lit {	/* there must be no padding between `header' and `data' */
    rml_uint_t header;
    double data;
};
#define RML_DEFREALLIT(NAME,VAL) struct rml_real_lit NAME = {RML_REALHDR,VAL}
#endif	/* RML_DBL_PAD */
#define RML_REFREALLIT(NAME) RML_TAGPTR(&(NAME).header)

#ifdef	RML_DBL_STRICT
union rml_double_as_words {
    double d;
    rml_uint_t data[2];
};
extern double rml_prim_get_real(void*);
extern void rml_prim_set_real(struct rml_real*, double);
#else	/* !RML_DBL_STRICT */
#define rml_prim_get_real(x)	(*(double*)RML_REALDATA(x))
#define rml_prim_set_real(p,d)	(*(double*)((p)->data) = (d))
#endif	/* RML_DBL_STRICT */

/* STRUCTS */

struct rml_struct {
    rml_uint_t header;	/* RML_STRUCTHDR(slots,ctor) */
    void *data[1];	/* `slots' elements */
};
#define RML_STRUCTDATA(x) (((struct rml_struct*)RML_UNTAGPTR(x))->data)

#define RML_DEFSTRUCTLIT(NAME,LEN,CON)	\
    struct {				\
	rml_uint_t header;		\
	void *data[LEN];		\
    } NAME = { RML_STRUCTHDR(LEN,CON),
#define RML_DEFSTRUCT0LIT(NAME,CON) struct rml_header NAME = { RML_STRUCTHDR(0,CON) }
#define RML_REFSTRUCTLIT(NAME) RML_TAGPTR(&(NAME).header)

/*
 * Additional operators used by the C code
 */
#define RML_OFFSET(p,i)		((void*)((void**)(p) + (i)))
#define RML_FETCH(p)		(*(void**)(p))
#define RML_STORE(dst,val)	(*(void**)(dst) = (val))

/*
 * Strictly internal declarations
 */
extern rml_sint_t rml_prim_a2i(const struct rml_string*);
#define RML_CLOCKS_PER_SEC	1000	/* milliseconds */
extern unsigned long rml_prim_clock(void);
extern char rml_flag_bench;
extern unsigned long rml_clock_start;
extern char rml_flag_log;
extern unsigned long rml_call_count;
extern void *rmlSPMIN;
extern void *rml_stack[];
extern void *rml_trail[];
#ifdef	RML_MORE_LOGGING
extern const char *rml_latest_module;
extern unsigned char rml_latest_known;
extern unsigned long rml_intra_calls;
extern unsigned long rml_intra_known_calls;
extern unsigned long rml_inter_calls;
extern unsigned long rml_inter_known_calls;
#endif	/*RML_MORE_LOGGING*/
extern void rml_exit(int);
extern void Main_5finit(void);	/* user code's main init proc */
extern void rml_5finit(void);	/* rml runtime init proc */
extern struct rml_string *rml_prim_mkstring(rml_uint_t, rml_uint_t);
extern void *rml_prim_mkreal(double);

/*
 * Memory allocation operations
 */
extern void *rml_prim_alloc(rml_uint_t, rml_uint_t);

/*
 * Primitive operations
 * Some of these have both macro and non-macro versions.
 * These could have the same names in ANSI-C, but alas not
 * in some not-quite ANSI-C compilers.
 */
extern void *rml_prim_deref_any(void*);
extern void *rml_prim_deref_box_(void*);
#define RML_INSPECTBOX(VARDEREF,VARHEADER,X)\
do{\
    VARDEREF = (X);\
    while( (VARHEADER = RML_FETCH(RML_UNTAGPTR(VARDEREF))) == RML_IMMEDIATE(RML_BOUNDHDR) )\
	VARDEREF = RML_REFDATA(VARDEREF);\
}while(0)
#define rml_prim_deref_box(P) ((RML_GETHDR((P)) == RML_BOUNDHDR) ? rml_prim_deref_box_(RML_REFDATA((P))) : (P))
#define rml_prim_deref_imm(P) (RML_ISPTR((P)) ? rml_prim_deref_any((P)) : (P))
extern const struct rml_header rml_prim_nil;
#define rml_prim_marker()	(rmlTP)
extern void rml_prim_print(void*);
extern int rml_print_depth;
extern rml_sint_t rml_prim_stringeq(void*, rml_uint_t, const char*);
extern void *rml_prim_unify(void*, void*);
extern void  rml_prim_unwind_(void*);
#define rml_prim_unwind(XTP) {if( rmlTP < (XTP) ) rml_prim_unwind_((XTP));}

/*
 * Primitive operations for inlinable primitive procedures.
 * Arguments are supposed to be properly instantiated, and
 * any other preconditions are supposed to have been checked.
 */
#define RML_PRIM_MKBOOL(FLAG)	((FLAG) ? RML_TRUE : RML_FALSE)
#define RML_PRIM_BOOL_NOT(X)	RML_PRIM_MKBOOL(((X) == RML_FALSE))
#define RML_PRIM_INT_NEG(X)	RML_FIXNUM_NEG((X))
#define RML_PRIM_INT_ABS(X)	(RML_FIXNUM_LT((X),RML_IMMEDIATE(RML_TAGFIXNUM(0))) ? RML_FIXNUM_NEG((X)) : (X))
#define RML_PRIM_BOOL_AND(X,Y)	RML_FIXNUM_AND((X),(Y))
#define RML_PRIM_BOOL_OR(X,Y)	RML_FIXNUM_OR((X),(Y))
#define RML_PRIM_INT_ADD(X,Y)	RML_FIXNUM_ADD((X),(Y))
#define RML_PRIM_INT_SUB(X,Y)	RML_FIXNUM_SUB((X),(Y))
#define RML_PRIM_INT_MUL(X,Y)	RML_FIXNUM_MUL((X),(Y))
#define RML_PRIM_INT_DIV(X,Y)	RML_FIXNUM_DIV((X),(Y))
#define RML_PRIM_INT_MOD(X,Y)	RML_FIXNUM_MOD((X),(Y))
#define RML_PRIM_INT_MAX(X,Y)	(RML_FIXNUM_GE((X),(Y)) ? (X) : (Y))
#define RML_PRIM_INT_MIN(X,Y)	(RML_FIXNUM_LE((X),(Y)) ? (X) : (Y))
#define RML_PRIM_INT_LT(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_LT((X),(Y)))
#define RML_PRIM_INT_LE(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_LE((X),(Y)))
#define RML_PRIM_INT_EQ(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_EQ((X),(Y)))
#define RML_PRIM_INT_NE(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_NE((X),(Y)))
#define RML_PRIM_INT_GE(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_GE((X),(Y)))
#define RML_PRIM_INT_GT(X,Y)	RML_PRIM_MKBOOL(RML_FIXNUM_GT((X),(Y)))

/*
 * Handling of module-specific roots
 */
struct rml_xroots_t {
    struct rml_xroots_t *next;
    void (*set_nroots)(void);	/* called before gc, if not null */
    rml_uint_t nroots;
    void *root[1];	/* actually `nroots' elements */
};
#define RML_XROOTS_T(N)		\
struct {			\
    struct rml_xroots_t *next;	\
    void (*set_nroots)(void);	\
    rml_uint_t nroots;		\
    void *root[N];		\
}
extern void rml_register_roots(struct rml_xroots_t*);
/*
 * rml-state.h
 */

#ifdef	RML_STATE_JOIN

struct rml_state {
    void *SP, *FC, *SC, *TP, *ARGS[10];
    void **young_next, **young_limit;
};
extern struct rml_state rml_state;

#define rml_state_SP		(rml_state.SP)
#define rml_state_FC		(rml_state.FC)
#define rml_state_SC		(rml_state.SC)
#define rml_state_TP		(rml_state.TP)
#define rml_state_ARGS		(rml_state.ARGS)
#define rml_state_young_next	(rml_state.young_next)
#define rml_state_young_limit	(rml_state.young_limit)

#if	defined(RML_STATE_APTR) || defined(RML_STATE_LPTR)

#define rmlSP			(rmlState->SP)
#define rmlFC			(rmlState->FC)
#define rmlSC			(rmlState->SC)
#define rmlTP			(rmlState->TP)
#define rmlA0			(rmlState->ARGS[0])
#define rmlA1			(rmlState->ARGS[1])
#define rmlA2			(rmlState->ARGS[2])
#define rmlA3			(rmlState->ARGS[3])
#define rmlA4			(rmlState->ARGS[4])
#define rmlA5			(rmlState->ARGS[5])
#define rmlA6			(rmlState->ARGS[6])
#define rmlA7			(rmlState->ARGS[7])
#define rmlA8			(rmlState->ARGS[8])
#define rmlA9			(rmlState->ARGS[9])
#define rml_young_next		(rmlState->young_next)
#define rml_young_limit		(rmlState->young_limit)

#else	/*!(RML_STATE_APTR || RML_STATE_LPTR)*/

#define rmlSP			(rml_state.SP)
#define rmlFC			(rml_state.FC)
#define rmlSC			(rml_state.SC)
#define rmlTP			(rml_state.TP)
#define rmlA0			(rml_state.ARGS[0])
#define rmlA1			(rml_state.ARGS[1])
#define rmlA2			(rml_state.ARGS[2])
#define rmlA3			(rml_state.ARGS[3])
#define rmlA4			(rml_state.ARGS[4])
#define rmlA5			(rml_state.ARGS[5])
#define rmlA6			(rml_state.ARGS[6])
#define rmlA7			(rml_state.ARGS[7])
#define rmlA8			(rml_state.ARGS[8])
#define rmlA9			(rml_state.ARGS[9])
#define rml_young_next		(rml_state.young_next)
#define rml_young_limit		(rml_state.young_limit)

#endif	/*RML_STATE_APTR || RML_STATE_LPTR*/

#else	/*!RML_STATE_JOIN*/

extern void *rmlSP, *rmlFC, *rmlSC, *rmlTP, *rmlARGS[];
extern void **rml_young_next, **rml_young_limit;
#define rml_state_SP		rmlSP
#define rml_state_FC		rmlFC
#define rml_state_SC		rmlSC
#define rml_state_TP		rmlTP
#define rml_state_ARGS		rmlARGS
#define rml_state_young_next	rml_young_next
#define rml_state_young_limit	rml_young_limit
#define rmlA0			(rmlARGS[0])
#define rmlA1			(rmlARGS[1])
#define rmlA2			(rmlARGS[2])
#define rmlA3			(rmlARGS[3])
#define rmlA4			(rmlARGS[4])
#define rmlA5			(rmlARGS[5])
#define rmlA6			(rmlARGS[6])
#define rmlA7			(rmlARGS[7])
#define rmlA8			(rmlARGS[8])
#define rmlA9			(rmlARGS[9])

#endif	/*RML_STATE_JOIN*/
/*
 * rml-labels.h
 * for plain `dispatching labels'
 */

typedef void *rml_labptr_t;
#define RML_LABPTR(LABEL)	((void*)LABEL)
#define RML_LABVAL(LABEL)	RML_IMMEDIATE(LABEL)

#ifdef	RML_STATE_APTR

#define RML_FORWARD_LABEL(LABEL)	void *LABEL(struct rml_state*)
#define RML_BEGIN_LABEL(LABEL)	void *LABEL(struct rml_state *rmlState)
#define RML_END_LABEL		/*empty*/
#ifdef	RML_CRAP_RISC_CC
#define RML_APPLY(LABVAL)	((*(void*(*)())(LABVAL))(rmlState))
#else	/*!RML_CRAP_RISC_CC*/
#define RML_APPLY(LABVAL)	((*(void*(*)(struct rml_state*))(LABVAL))(rmlState))
#endif	/*RML_CRAP_RISC_CC*/

#else	/*!RML_STATE_APTR*/

#ifdef	RML_STATE_LPTR

#define RML_FORWARD_LABEL(LABEL)	void *LABEL(void)
#define RML_BEGIN_LABEL(LABEL)	void *LABEL(void) { struct rml_state *rmlState = &rml_state;
#define RML_END_LABEL		}
#define RML_APPLY(LABVAL)	((*(void*(*)(void))(LABVAL))())

#else	/*!RML_STATE_LPTR*/

#define RML_FORWARD_LABEL(LABEL)	void *LABEL(void)
#define RML_BEGIN_LABEL(LABEL)	void *LABEL(void)
#define RML_END_LABEL		/*empty*/
#define RML_APPLY(LABVAL)	((*(void*(*)(void))(LABVAL))())

#endif	/*RML_STATE_LPTR*/
#endif	/*RML_STATE_APTR*/

#ifdef	RML_MORE_LOGGING
#define RML_DEFINE_MODULE(MODULE)	static const char module[] = MODULE;
#define RML_TAILCALL(LABVAL)	return (rml_latest_module = module, rml_latest_known = 0, (void*)LABVAL)
#define RML_TAILCALLQ(LABEL)	return (rml_latest_module = module, rml_latest_known = 1, RML_LABVAL(LABEL))
#else	/*!RML_MORE_LOGGING*/
#define RML_DEFINE_MODULE(MODULE)	/*empty*/
#define RML_TAILCALL(LABVAL)	return (void*)LABVAL
#define RML_TAILCALLQ(LABEL)	return RML_LABVAL(LABEL)
#endif	/*RML_MORE_LOGGING*/
#define RML_TAILCALLK(KONT)	RML_TAILCALL(RML_FETCH((KONT)))

extern void *rml_prim_gcalloc(rml_uint_t, rml_uint_t);
#define RML_ALLOC(VAR,NWORDS,NARGS) do{(VAR) = (void*)rml_young_next;if((rml_young_next = (void**)(VAR)+(NWORDS)) >= rml_young_limit) (VAR) = rml_prim_gcalloc((NWORDS),(NARGS));}while(0)
/*
 * rml-predef.h
 */

extern void rml_prim_motor(rml_labptr_t);
extern int rml_prim_once(rml_labptr_t);	/* C calls RML */
extern RML_FORWARD_LABEL(Main__main);	/* user code's entry point */

/*
 * Standard procedures
 */
extern RML_FORWARD_LABEL(rml__bool_5fand);
extern RML_FORWARD_LABEL(rml__bool_5fnot);
extern RML_FORWARD_LABEL(rml__bool_5for);
extern RML_FORWARD_LABEL(rml__int_5fabs);
extern RML_FORWARD_LABEL(rml__int_5fadd);
extern RML_FORWARD_LABEL(rml__int_5fdiv);
extern RML_FORWARD_LABEL(rml__int_5feq);
extern RML_FORWARD_LABEL(rml__int_5fge);
extern RML_FORWARD_LABEL(rml__int_5fgt);
extern RML_FORWARD_LABEL(rml__int_5fint);
extern RML_FORWARD_LABEL(rml__int_5fle);
extern RML_FORWARD_LABEL(rml__int_5flt);
extern RML_FORWARD_LABEL(rml__int_5fmax);
extern RML_FORWARD_LABEL(rml__int_5fmin);
extern RML_FORWARD_LABEL(rml__int_5fmod);
extern RML_FORWARD_LABEL(rml__int_5fmul);
extern RML_FORWARD_LABEL(rml__int_5fne);
extern RML_FORWARD_LABEL(rml__int_5fneg);
extern RML_FORWARD_LABEL(rml__int_5freal);
extern RML_FORWARD_LABEL(rml__int_5fstring);
extern RML_FORWARD_LABEL(rml__int_5fsub);
#define rml__char_5fint	rml__int_5fint
#define rml__int_5fchar	rml__int_5fint
extern RML_FORWARD_LABEL(rml__real_5fabs);
extern RML_FORWARD_LABEL(rml__real_5fadd);
extern RML_FORWARD_LABEL(rml__real_5fatan);
extern RML_FORWARD_LABEL(rml__real_5fcos);
extern RML_FORWARD_LABEL(rml__real_5fdiv);
extern RML_FORWARD_LABEL(rml__real_5feq);
extern RML_FORWARD_LABEL(rml__real_5fexp);
extern RML_FORWARD_LABEL(rml__real_5ffloor);
extern RML_FORWARD_LABEL(rml__real_5fge);
extern RML_FORWARD_LABEL(rml__real_5fgt);
extern RML_FORWARD_LABEL(rml__real_5fint);
extern RML_FORWARD_LABEL(rml__real_5fle);
extern RML_FORWARD_LABEL(rml__real_5fln);
extern RML_FORWARD_LABEL(rml__real_5flt);
extern RML_FORWARD_LABEL(rml__real_5fmax);
extern RML_FORWARD_LABEL(rml__real_5fmin);
extern RML_FORWARD_LABEL(rml__real_5fmod);
extern RML_FORWARD_LABEL(rml__real_5fmul);
extern RML_FORWARD_LABEL(rml__real_5fne);
extern RML_FORWARD_LABEL(rml__real_5fneg);
extern RML_FORWARD_LABEL(rml__real_5fpow);
extern RML_FORWARD_LABEL(rml__real_5fsin);
extern RML_FORWARD_LABEL(rml__real_5fsqrt);
extern RML_FORWARD_LABEL(rml__real_5fsub);
extern RML_FORWARD_LABEL(rml__string_5fappend);
extern RML_FORWARD_LABEL(rml__string_5fint);
extern RML_FORWARD_LABEL(rml__string_5flength);
extern RML_FORWARD_LABEL(rml__string_5flist);
extern RML_FORWARD_LABEL(rml__string_5fnth);
extern RML_FORWARD_LABEL(rml__vector_5flength);
extern RML_FORWARD_LABEL(rml__vector_5flist);
extern RML_FORWARD_LABEL(rml__vector_5fnth);
extern RML_FORWARD_LABEL(rml__list_5fappend);
extern RML_FORWARD_LABEL(rml__list_5fdelete);
extern RML_FORWARD_LABEL(rml__list_5flength);
extern RML_FORWARD_LABEL(rml__list_5fmember);
extern RML_FORWARD_LABEL(rml__list_5fnth);
extern RML_FORWARD_LABEL(rml__list_5freverse);
extern RML_FORWARD_LABEL(rml__list_5fstring);
extern RML_FORWARD_LABEL(rml__list_5fvector);
extern RML_FORWARD_LABEL(rml__clock);
extern RML_FORWARD_LABEL(rml__fail);
extern RML_FORWARD_LABEL(rml__isvar);
extern RML_FORWARD_LABEL(rml__print);
extern RML_FORWARD_LABEL(rml__tick);
#ifdef __cplusplus
}
#endif
