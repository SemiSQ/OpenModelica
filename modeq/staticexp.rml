(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 static.rml
 ** module:      Static
 ** description: Static analysis of expressions
 **
 ** RCS: $Id$
 ** 
 ** This module does static analysis and constant evaluation of
 ** expressions.  The analyzed expressions are built using the
 ** constructors in the `Exp' module.  Also, a set of properties of
 ** the expressions is calculated during analysis.
 **)

module Static :

  with "absyn.rml"
  with "exp.rml"
  with "explode.rml"
  with "types.rml"
  with "env.rml"
  with "values.rml"
  with "classinf.rml"
  with "interactive.rml"
  with "cache.rml"

  type Ident = string


  datatype Slot = SLOT of Types.FuncArg *  (* An argument to a function *)
			  bool *	   (* True if the slot has been filled, *)
					   (* i.e. argument has been given a value*)
			  Exp.Exp option   (* Contain the elaborated expression *)
                                           (* for the actual argument *)


  (* Expression analysis *)
  relation elab_exp : (Env.Env, Absyn.Exp,bool,Interactive.InteractiveSymbolTable option)
	    => (Exp.Exp, Types.Properties, Interactive.InteractiveSymbolTable option)
  relation elab_graphics_exp : (Env.Env, Absyn.Exp) => (Exp.Exp,
							Types.Properties) 
	  (* Special relation for graphics annotations, because of inhomogenous *)
	  (* array of graphics primitives *) 
  relation elab_exp_list : (Env.Env, Absyn.Exp list,bool, Interactive.InteractiveSymbolTable option) 
	    => (Exp.Exp list, Types.Properties list, Interactive.InteractiveSymbolTable option)
  relation elab_cref : (Env.Env, Absyn.ComponentRef)
	  => (Exp.Exp, Types.Properties, SCode.Accessibility)
  relation elab_cref_list : (Env.Env, Absyn.ComponentRef list)
	  => (Exp.Exp list, Types.Properties list, SCode.Accessibility list)
  relation elab_subscripts : (Env.Env, Absyn.Subscript list)
	  => (Exp.Subscript list, bool)

  (* Constant propagation *)
  relation ceval : (Env.Env, Exp.Exp, bool, Interactive.InteractiveSymbolTable option)
	    => (Values.Value, Interactive.InteractiveSymbolTable option)
  relation ceval_list : (Env.Env, Exp.Exp list, bool,
			 Interactive.InteractiveSymbolTable option) 
	  => Values.Value list
  relation canon_cref : (Env.Env, Exp.ComponentRef) => Exp.ComponentRef

  (* Property matching (type conversions etc.) *)

  relation deoverload : ((Exp.Operator * Types.Type list * Types.Type) list,
			 (Exp.Exp * Types.Type) list,
			 Absyn.Exp)
	  => (Exp.Operator, Exp.Exp list, Types.Type)
  relation operators : Absyn.Operator
	  => (Exp.Operator * Types.Type list * Types.Type) list

  (* Utility relations *)
  relation eq_cref : (Exp.ComponentRef, Exp.ComponentRef) => ()
  relation value_exp : Values.Value => Exp.Exp
end
