(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with OpenModelica; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:	 tornadoext.rml
 ** module:      TORNADOEXT
 **)

(** 
 ** The TORNADOEXT module is an externally implemented module (in file runtime/tornadoext.cpp) 
 ** used for the BLT and index reduction algorithms in 'DAELow'. The implementation 
 ** mainly consists of several bitvectors implemented using std::vector<bool> since 
 ** such functionality is not available in RML.
 *)

module TORNADOEXT:
  

  relation dump_testing: () => ()
          (** 
           ** arg1 the variable name i.e. "out_1" in "Temp_foo.out_1"
           ** arg2 the class name where is instatiated i.e. "Temp" for Temp_foo
           ** returns the index of variable depending on type and direction
           ** 
           **)
  relation get_var_index: (string,string ) => int

          (**
           ** arg1 what class has this variable
           ** arg2 the name of the variable
           ** arg3 the type of the variable (variable, parameter)
           ** arg4 the direction of the variable (output,input...)

           ** arg5 Unit;                // Unit of quantity
           ** arg6 DefaultValue;        // Default value (in Modelica lingo this is "start" I think)
           ** arg7 LowerBound;          // Lower bound
           ** arg8 UpperBound;          // Upper bound
           ** arg9 Desc;                // Description
           **)
  relation add_variable_to_class: (string,string,string,string,
                                   string,string,string,string,string) => ()
          (**
           ** arg1 is the top class because the top class is
           **      genereation somwhere else
           ** returns (header code, implementation code)
           **)
  relation get_hierachical_code: (string) => (string,string)
(*   relation add_output_var_to_class: (string,string) => () *)

          (**
           ** arg1 what class has this variable
           ** arg2 the name of the variable
           ** arg3 the type of the variable (algstatevar, parameter)
           **)
  relation add_variable_for_index: (string,string,string) => ()
          (** 
           ** arg1 the variable name i.e. "out_1" in "Temp_foo.out_1"
           ** arg2 the class name where is instatiated i.e. "Temp" for Temp_foo
           ** returns the index of variable depending on type and direction
           ** 
           **)
  relation get_flat_var_index: (string,string ) => int

          (** 
           ** arg1 the type of variables: "parameter"
           **)
  relation get_no_of_vars_with_type:(string) => int
          (** 
           ** arg1 the directio of variables: "output"
           ** arg1 the type of variables: "parameter"
           ** arg2 the class name
           ** 
           **)
  relation get_no_of_vars_with_dir_and_type_from_class:(string,string,string) => int
end 

