(** file: types.rml
 **)

module Types :

  with "classinf.rml"
  with "absyn.rml"

  (** - Identifiers *)
  type Ident = string
  (** FIXME: This is declared in many places. *)

  (** - Variables *)
  datatype Var = VAR of Ident * Absyn.VarAttr * Type * Absyn.Exp option
  (** I wonder why this goes here? *)

  (** - Types *)
  datatype Type = TYPE of ClassInf.State * Var list
  (** The `Type' datatype stores information about the type of an *)
  (** instantiated variable. The only information that is kept is the *)
  (** class inference state, and the subcomponents. *)

  (** - Basic types and arrays *)
  datatype BasicType = T_INTEGER
		     | T_REAL
		     | T_STRING
		     | T_BOOL
		     | T_OTHER
		     | T_ARRAY of int * BasicType
  (** To generate the correct set of equations, the translator has to *)
  (** differentiate between the primitive types `Real', `Integer', *)
  (** `String', `Boolean' and types directly derived from then from *)
  (** other, complex types.  For arrays and matrices the type *)
  (** `T_ARRAY' is used, with the first argument being the number of *)
  (** dimensions, and the second being the type of the objects in the *)
  (** array.  The `BasicType' type is used to store *)
  (** information about whether a class is derived from a primitive *)
  (** type, and whether a variable is of one of these types.  *)

  (** - Exported relations *)
  relation same_type : (Type, Type) => ()
  relation lookup_component : (Type, Ident) => Var
  relation known_type : (ClassInf.State, Absyn.ArrayDim) => BasicType
  relation print_type : BasicType => ()

end

(** relation: same_type
 **)

relation same_type : (Type, Type) => () =
	
	(* FIXME: Check state? *)
  rule	same_type_c(els1, els2)
	-----------------------
	same_type(TYPE(st1,els1), TYPE(st2,els2))

end

relation same_type_c : (Var list, Var list) => () =

  axiom same_type_c([], [])

  rule  pick(xs2,n) => (xs2',attr,t2) &
	same_type(t1,t2) &
	same_type_c(xs1,xs2')
	---------------------
	same_type_c(VAR(n,_,t1,_)::xs1, xs2)

end

(** relation: pick *)

relation pick : (Var list, Ident)
	  => (Var list, Absyn.VarAttr, Type) =

  rule  n1 = n2
	-------
	pick(VAR(n1,attr,ty,_)::xs,n2) => (xs,attr,ty)

  rule  pick(xs,n) => (xs',attr,ty)
	---------------------
	pick(_::xs,n) => (xs',attr,ty)

end

(** relation: lookup_component *)

relation lookup_component : (Type, Ident) => Var =

  rule  lookup_component2(cs, id) => v
	------------------------------
	lookup_component(TYPE(st,cs), id) => v

end

(**)

relation lookup_component2 : (Var list , Ident) => Var =

  rule  n = m
	-----
	lookup_component2((v as VAR(n,_,_,_))::_, m) => v

  rule  lookup_component2(vs, n) => v
	-----------------------------
	lookup_component2(v::vs, n) => v

end

(** relation: known_type *)

relation known_type : (ClassInf.State, Absyn.ArrayDim) => BasicType =

  rule	known_type (st, Absyn.NODIM) => t
	---------------------------------
	known_type (st, Absyn.ONEDIM(_)) => T_ARRAY(1,t)

  rule	known_type (st, Absyn.NODIM) => t
	---------------------------------
	known_type (st, Absyn.TWODIM(_,_)) => T_ARRAY(2,t)

  axiom	known_type (ClassInf.TYPE_INTEGER(_),Absyn.NODIM) => T_INTEGER
  axiom	known_type (ClassInf.TYPE_REAL(_),Absyn.NODIM)    => T_REAL
  axiom	known_type (ClassInf.TYPE_STRING(_),Absyn.NODIM)  => T_STRING
  axiom	known_type (ClassInf.TYPE_BOOL(_),Absyn.NODIM)    => T_BOOL
  axiom	known_type (_,Absyn.NODIM)                        => T_OTHER

  rule	print "- known_type failed\n"
	-----------------------------
	known_type (_,_) => fail

end

(** relation: print_type
 **
 ** This relation prints a textual description of a Modelica type.  If
 ** the type is not one of the primitive types, it simply prints
 ** `complex'.
 **)

relation print_type : BasicType => () =

  rule	print "integer"
	---------------
	print_type T_INTEGER

  rule	print "real"
	------------
	print_type T_REAL

  rule	print "string"
	--------------
	print_type T_STRING

  rule	print "bool"
	------------
	print_type T_BOOL

  rule	print "complex"
	------------
	print_type T_OTHER

  rule	print "array(" & int_string dim => s & print s & print ") of " &
	print_type t
	------------
	print_type T_ARRAY(dim,t)

end
