(*
    Copyright PELAB, Linkoping University

    This file is part of Open Source Modelica (OSM).

    OSM is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    OSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Foobar; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*)

(**
 ** file:        values.rml
 ** module:      Values
 ** description: Evaluated expression values
 **
 ** RCS: $Id$
 ** 
 ** The module `Values' contains data structures for representing
 ** constant Modelica values.  These include integer, real, string and
 ** boolean values, and also arrays of any dimensionality and type.
 ** Multidimensional arrays are represented as arrays of arrays.
 **
 ** The code is excluded from the report, since they convey no
 ** semantic information.
 **)

module Values :

  datatype Value = INTEGER of int
		 | REAL of real
		 | STRING of string
		 | BOOL of bool
		 | ARRAY of Value list

  relation val_string : Value => string
  relation print_val : Value => ()

end

(*!ignorecode*) 

(** relation: val_string
 **
 ** This relation returns a textual representation of a value.
 **)

relation val_string : Value => string =

  rule	int_string n => s
	-----------------
	val_string INTEGER(n) => s

  rule	real_string x => s
	------------------
	val_string REAL(x) => s

  axiom	val_string STRING(s) => s

  axiom	val_string BOOL(FALSE) => "false"
  axiom	val_string BOOL(TRUE) => "true"

  rule	val_list_string vs => s &
	string_append("[",s) => s' &
	string_append(s',"]") => s''
	----------------------------
	val_string ARRAY(vs) => s''

  rule	print "- val_string failed\n"
	-----------------------------
	val_string _ => fail

end

(** relation: val_list_string
 **
 ** This relation returns a textual representation of a list of
 ** values, separating each value with a comman.
 **)

relation val_list_string : Value list => string =

  axiom	val_list_string [] => "## EMPTY LIST ##"

  rule	val_string v => s
	-----------------
	val_list_string [v] => s

  rule	val_string v => s &
	val_list_string vs => s' &
	string_append (s,",") => s'' &
	string_append (s'',s') =>s'''
	------------------------------
	val_list_string v::vs => s'''

  rule	print "- val_list_string failed\n"
	----------------------------------
	val_list_string _ => fail

end

(** relation: print_val
 **
 ** This relation prints a value.
 **)

relation print_val : Value => () =

  rule	val_string v => s &
	print s
	-------
	print_val v

end

(*!includecode*)
