// name: PlanarMechanicsV4.Examples.* [simulate]
// status: correct
// teardown_command: rm -rf *PlanarMechanicsV4.Examples*
// provided by Dirk Zimmer with changes from Francesco Casella
//


loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("PlanarMechanicsV4.mo"); getErrorString();

simulate(PlanarMechanicsV4.Examples.FreeBody); getErrorString();
simulate(PlanarMechanicsV4.Examples.Pendulum); getErrorString();
simulate(PlanarMechanicsV4.Examples.CraneCrab); getErrorString();
simulate(PlanarMechanicsV4.Examples.DoublePendulum); getErrorString();
simulate(PlanarMechanicsV4.Examples.PistonEngine); getErrorString();
simulate(PlanarMechanicsV4.Examples.KinematicLoop); getErrorString();
simulate(PlanarMechanicsV4.Examples.FreeWheel); getErrorString();
simulate(PlanarMechanicsV4.Examples.FreeWheelwithFriction); getErrorString();
simulate(PlanarMechanicsV4.Examples.TestIdealWheel); getErrorString();
simulate(PlanarMechanicsV4.Examples.TestDryFrictionWheel); getErrorString();
simulate(PlanarMechanicsV4.Examples.TestSlipBasedWheel); getErrorString();
simulate(PlanarMechanicsV4.Examples.WheelBasedCranCrab); getErrorString();
simulate(PlanarMechanicsV4.Examples.CounterSpin); getErrorString();
simulate(PlanarMechanicsV4.Examples.SingleTrackWithEngine); getErrorString();
simulate(PlanarMechanicsV4.Examples.SingleTrackFixedSteering); getErrorString();
simulate(PlanarMechanicsV4.Examples.SingleTrackFixedSteeringFriction); getErrorString();
simulate(PlanarMechanicsV4.Examples.SimpleCarWithDifferentialGear); getErrorString();
simulate(PlanarMechanicsV4.Examples.TwoTrackStaticLoad); getErrorString();
simulate(PlanarMechanicsV4.Examples.TwoTrackStaticLoad3D); getErrorString();
simulate(PlanarMechanicsV4.Examples.ControlledCraneCrab); getErrorString();
simulate(PlanarMechanicsV4.Examples.InvertedCraneCrab); getErrorString();


// Result:
// true
// ""
// true
// "[PlanarMechanicsV4.mo:4039:24-4039:26:writable] Warning: Treating .8 as 0.8. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [PlanarMechanicsV4.mo:4057:24-4057:26:writable] Warning: Treating .8 as 0.8. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [PlanarMechanicsV4.mo:4475:24-4475:26:writable] Warning: Treating .8 as 0.8. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [PlanarMechanicsV4.mo:4502:24-4502:26:writable] Warning: Treating .8 as 0.8. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [PlanarMechanicsV4.mo:5781:24-5781:26:writable] Warning: Treating .8 as 0.8. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [PlanarMechanicsV4.mo:2651:12-2651:25:writable] Warning: Modelica only supports 32-bit signed integers! Transforming: 1000000000000 into a real
// "
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.FreeBody_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.FreeBody', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.Pendulum_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.Pendulum', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.CraneCrab_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.CraneCrab', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.DoublePendulum_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.DoublePendulum', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.PistonEngine_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.PistonEngine', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.KinematicLoop_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.KinematicLoop', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.FreeWheel_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.FreeWheel', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.FreeWheelwithFriction_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.FreeWheelwithFriction', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.TestIdealWheel_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.TestIdealWheel', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.TestDryFrictionWheel_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.TestDryFrictionWheel', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.TestSlipBasedWheel_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.TestSlipBasedWheel', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.WheelBasedCranCrab_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.WheelBasedCranCrab', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.CounterSpin_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.CounterSpin', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.SingleTrackWithEngine_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.SingleTrackWithEngine', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.SingleTrackFixedSteering_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.SingleTrackFixedSteering', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.SingleTrackFixedSteeringFriction_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.SingleTrackFixedSteeringFriction', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = "ERROR: Division by zero in partial equation: ((-dryFrictionWheelJoint2.f) * dryFrictionWheelJoint2.v_slip_long) / dryFrictionWheelJoint2.v_slip because dryFrictionWheelJoint2.v_slip == 0.
// warning | Error solving nonlinear system SES_ALGORITHM 0 at time 0
// warning | Error solving nonlinear system SES_ALGORITHM 0 at time 0
// [PlanarMechanicsV4.mo:277:7-277:76:writable] warning | Simulation call assert() at time 0.002000
// Level : error
// Message : Variable fixedTranslation1.r0 out of limit 0
// info    | model terminate | Simulation terminated at time 0.002
// "
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.SimpleCarWithDifferentialGear_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.SimpleCarWithDifferentialGear', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.TwoTrackStaticLoad_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.TwoTrackStaticLoad', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.TwoTrackStaticLoad3D', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = "Simulation failed for model: PlanarMechanicsV4.Examples.TwoTrackStaticLoad3D
// [parts.mo:600:5-603:76:writable] Warning: Variable simpleChassis3D.dynamicLoad.r_0: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [parts.mo:604:5-607:76:writable] Warning: Variable simpleChassis3D.dynamicLoad.v_0: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [parts.mo:682:5-686:65:writable] Warning: Variable simpleChassis3D.dynamicLoad.w_a: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then if simpleChassis3D.dynamicLoad.useQuaternions then StateSelect.always else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [parts.mo:697:5-700:119:writable] Warning: Variable simpleChassis3D.dynamicLoad.Q: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then if simpleChassis3D.dynamicLoad.useQuaternions then StateSelect.prefer else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [parts.mo:708:5-711:69:writable] Warning: Variable simpleChassis3D.dynamicLoad.phi: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then if simpleChassis3D.dynamicLoad.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [parts.mo:712:5-714:42:writable] Warning: Variable simpleChassis3D.dynamicLoad.phi_d: Non-array modification 'if simpleChassis3D.dynamicLoad.enforceStates then if simpleChassis3D.dynamicLoad.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Error: Too few equations, underdetermined system. The model has 3335 equation(s) and 3346 variable(s)
// "
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.ControlledCraneCrab_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.ControlledCraneCrab', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// record SimulationResult
//     resultFile = "PlanarMechanicsV4.Examples.InvertedCraneCrab_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'PlanarMechanicsV4.Examples.InvertedCraneCrab', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// ""
// endResult
