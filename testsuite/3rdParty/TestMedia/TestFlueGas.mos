// name: TestFlueGas.mos [instantiate/check/simulate]
// status: correct
// teardown_command: rm -rf *TestMedia.TestModels* output.log
// provided by Francesco Casella
//

loadModel(Modelica); getErrorString();
loadFile("TestMedia.mo"); getErrorString();

instantiateModel(TestMedia.TestModels.TestFlueGas); getErrorString();
checkModel(TestMedia.TestModels.TestFlueGas); getErrorString();
simulate(TestMedia.TestModels.TestFlueGas); getErrorString();

// Result:
// true
// ""
// true
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := if T < data.Tlimit then (data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1])) / T else (data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1])) / T + if exclEnthForm then -data.Hf else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0;
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from Â°Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState \"Automatically generated record constructor for TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[6] X;
//   output ThermodynamicState res;
// end TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState;
// 
// function TestMedia.TestModels.TestFlueGas.Medium.density \"Return density of ideal gas\"
//   input TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (state.T * (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5] + state.X[6]) * 296.803386950531);
// end TestMedia.TestModels.TestFlueGas.Medium.density;
// 
// function TestMedia.TestModels.TestFlueGas.Medium.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768,0.0,0.0,0.232,0.0,0.0} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\",0.0280134,0.0,309498.454311151,1000.0,{22103.71497,-381.846182,6.08273836,-0.00853091441,1.384646189e-05,-9.62579362e-09,2.519705809e-12},{710.846086,-10.76003744},{587712.406,-2239.249073,6.06694922,-0.00061396855,1.491806679e-07,-1.923105485e-11,1.061954386e-15},{12832.10415,-15.86640027},296.803386950531),T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2\",0.00201588,0.0,4200697.46215052,1000.0,{40783.2321,-800.918604,8.21470201,-0.01269714457,1.753605076e-05,-1.20286027e-08,3.36809349e-12},{2682.484665,-30.43788844},{560812.801,-837.150474,2.975364532,0.001252249124,-3.74071619e-07,5.9366252e-11,-3.6069941e-15},{5339.82441,-2.202774769},4124.48756870449),T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO\",0.0280101,-3946262.09831454,309570.619169514,1000.0,{14890.45326,-292.2285939,5.72452717,-0.00817623503,1.456903469e-05,-1.087746302e-08,3.027941827e-12},{-13031.31878,-7.85924135},{461919.725,-1944.704863,5.91671418,-0.000566428283,1.39881454e-07,-1.787680361e-11,9.62093557e-16},{-2466.261084,-13.87413108},296.838354736327),T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\",0.0319988,0.0,271263.422378339,1000.0,{-34255.6342,484.700097,1.119010961,0.00429388924,-6.83630052e-07,-2.0233727e-09,1.039040018e-12},{-3391.45487,18.4969947},{-1037939.022,2344.830282,1.819732036,0.001267847582,-2.188067988e-07,2.053719572e-11,-8.19346705e-16},{-16890.10929,17.38716506},259.836993887271),T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-06,4.95504349e-09,-1.336933246e-12},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-07,9.42646893e-11,-4.82238053e-15},{-13842.86509,-7.97814851},461.523329085088),T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\",0.0440095,-8941478.54440518,212805.621513537,1000.0,{49436.5054,-626.411601,5.30172524,0.002503813816,-2.127308728e-07,-7.68998878e-10,2.849677801e-13},{-45281.9846,-7.04827944},{117696.2419,-1788.791477,8.29152319,-9.22315678e-05,4.86367688e-09,-1.891053312e-12,6.33003659e-16},{-39083.5059,-26.52669281},188.924482214067),T,exclEnthForm,refChoice,h_off)};
// end TestMedia.TestModels.TestFlueGas.Medium.h_TX;
// 
// function TestMedia.TestModels.TestFlueGas.Medium.setState_pTX \"Return thermodynamic state as function of p, T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768,0.0,0.0,0.232,0.0,0.0} \"Mass fractions\";
//   output TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState state;
// algorithm
//   state := if size(X,1) == 6 then TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState(p,T,X) else TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end TestMedia.TestModels.TestFlueGas.Medium.setState_pTX;
// 
// function TestMedia.TestModels.TestFlueGas.Medium.specificEnthalpy \"Return specific enthalpy\"
//   input TestMedia.TestModels.TestFlueGas.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := TestMedia.TestModels.TestFlueGas.Medium.h_TX(state.T,{state.X[1],state.X[2],state.X[3],state.X[4],state.X[5],state.X[6]},true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K,0.0);
// end TestMedia.TestModels.TestFlueGas.Medium.specificEnthalpy;
// 
// class TestMedia.TestModels.TestFlueGas
//   Real state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature of medium\";
//   Real state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state.X[6](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0);
//   Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0);
//   Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0);
//   Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0);
// equation
//   T = 300.0 + 300.0 * time;
//   p = 100000.0;
//   state = TestMedia.TestModels.TestFlueGas.Medium.setState_pTX(p,T,{0.768,0.0,0.0,0.232,0.0,0.0});
//   d = TestMedia.TestModels.TestFlueGas.Medium.density(state);
//   h = TestMedia.TestModels.TestFlueGas.Medium.specificEnthalpy(state);
// end TestMedia.TestModels.TestFlueGas;
// "
// "[package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// "
// "Check of TestMedia.TestModels.TestFlueGas completed successfully.
// 
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// 
// Class TestMedia.TestModels.TestFlueGas has 12 equation(s) and 12 variable(s).
// 9 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "TestMedia.TestModels.TestFlueGas_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'TestMedia.TestModels.TestFlueGas', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// "[package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// "
// endResult
