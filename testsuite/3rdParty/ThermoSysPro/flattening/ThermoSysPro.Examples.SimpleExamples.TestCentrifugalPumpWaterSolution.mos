// name:     ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.mos [instantiate and checkModel]
// keywords: instantiate and check ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.* ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution_* ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.exe ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.cpp ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.makefile ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.libs ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.log ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.c ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("../ThermoSysPro/package.mo"); getErrorString();

instantiateModel(ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution);  getErrorString();
checkModel(ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution);  getErrorString();

// Result:
// true
// ""
// true
// "[GTCombustionChamber.mo:169:20-169:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCombustionChamber.mo:173:20-173:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:153:20-153:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:157:20-157:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GridFurnace.mo:85:20-85:23:writable] Warning: Treating .01 as 0.01. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Pro_FlueGases.mo:4:40-4:42:writable] Warning: Treating .5 as 0.5. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalHeatTransferCoefficient.mo:93:26-93:29:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalTwoPhaseFlowHeatTransferCoefficient.mo:92:24-92:27:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CombustionTurbine.mo:12:18-12:21:writable] Warning: Treating .07 as 0.07. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCICOBarilla.mo:7:28-7:35:writable] Warning: Treating .881225 as 0.881225. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GasTurbine.mo:12:28-12:30:writable] Warning: Treating .9 as 0.9. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [AbsorptionRefrigeratorSystem.mo:4:25-4:32:writable] Warning: Treating .362979 as 0.362979. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:55:12-55:16:writable] Warning: Treating .011 as 0.011. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:58:9-58:12:writable] Warning: Treating .50 as 0.50. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:59:8-59:13:writable] Warning: Treating .2479 as 0.2479. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:60:8-60:13:writable] Warning: Treating .0297 as 0.0297. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:61:8-61:13:writable] Warning: Treating .2088 as 0.2088. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:62:8-62:13:writable] Warning: Treating .0017 as 0.0017. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:63:8-63:13:writable] Warning: Treating .0003 as 0.0003. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:132:8-132:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:136:8-136:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BaseIF97.mo:4589:34-4589:42:writable] Warning: Treating .5132047 as 0.5132047. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:22-4090:39:writable] Warning: Treating .0158271919734802 as 0.0158271919734802. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:53-4090:70:writable] Warning: Treating .0942738402188500 as 0.0942738402188500. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:30-4091:46:writable] Warning: Treating .155071987336585 as 0.155071987336585. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:60-4091:76:writable] Warning: Treating .188821573960182 as 0.188821573960182. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4092:46-4092:62:writable] Warning: Treating .199773405226859 as 0.199773405226859. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4093:29-4093:45:writable] Warning: Treating .224926465333340 as 0.224926465333340. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4094:17-4094:33:writable] Warning: Treating .242611071901408 as 0.242611071901408. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Degasifier.mo:100:71-100:73:writable] Warning: Treating .1 as 0.1. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// "
// "function Modelica.Math.acos
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = acos(u);
// end Modelica.Math.acos;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.Common.GibbsDerivs \"Automatically generated record constructor for Modelica.Media.Common.GibbsDerivs\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtaupi;
//   output GibbsDerivs res;
// end Modelica.Media.Common.GibbsDerivs;
// 
// function Modelica.Media.Common.HelmholtzDerivs \"Automatically generated record constructor for Modelica.Media.Common.HelmholtzDerivs\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") fdeltatau;
//   output HelmholtzDerivs res;
// end Modelica.Media.Common.HelmholtzDerivs;
// 
// function Modelica.Media.Common.Helmholtz_pT \"function to calculate analytic derivatives for computing d and t given p and t\"
//   input Modelica.Media.Common.HelmholtzDerivs f \"dimensionless derivatives of Helmholtz function\";
//   output Modelica.Media.Common.NewtonDerivatives_pT nderivs \"derivatives for Newton iteration to compute d and t from p and t\";
// algorithm
//   nderivs.p := f.d * f.R * f.T * f.delta * f.fdelta;
//   nderivs.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
// end Modelica.Media.Common.Helmholtz_pT;
// 
// function Modelica.Media.Common.NewtonDerivatives_pT \"Automatically generated record constructor for Modelica.Media.Common.NewtonDerivatives_pT\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   output NewtonDerivatives_pT res;
// end Modelica.Media.Common.NewtonDerivatives_pT;
// 
// function ThermoSysPro.Functions.ThermoSquare \"Thermodynamic square\"
//   input Real x;
//   input Real dx;
//   output Real y;
// algorithm
//   y := if abs(x) > dx then x * abs(x) else x * dx;
// end ThermoSysPro.Functions.ThermoSquare;
// 
// function ThermoSysPro.Properties.WaterSolution.SpecificEnthalpy_TX \"Specific enthalpy of the H2O/LiBr solution as a function of T and Xh2o\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Real X \"Water mass fraction in the solution\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy of the solution\";
//   protected Real C1;
//   protected Real C2;
//   protected Real C3;
//   protected Real C4;
//   protected Real C5;
//   protected Real DXi;
//   protected Real Xi \"LiBr mass fraction in the solution\";
//   protected Real Tc(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature in Celsius\";
//   protected Real H1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Liquid LiBr specific enthalpy on the saturation line\";
//   protected Real Hliq(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Liquid H2O specific enthalpy on the saturation line\";
//   protected Real Dh(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Difference in specific enthalpy wrt. ideal mixing\";
// algorithm
//   Hliq := ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT(1500000.0, T, 1);
//   Tc := T + -273.15;
//   Xi := 1.0 - X;
//   DXi := 2.0 * Xi + -1.0;
//   H1 := 508.6682481 + -18.62407335 * Tc + 0.09859458321 * Tc ^ 2.0 + -2.509791095e-05 * Tc ^ 3.0 + 4.15800771e-08 * Tc ^ 4.0;
//   C1 := -1021.608631 + 36.87726426 * Tc + -0.18605141 * Tc ^ 2.0 + -7.512766773e-06 * Tc ^ 3.0;
//   C2 := -533.308211 + 40.28472553 * Tc + -0.1911981148 * Tc ^ 2.0;
//   C3 := 483.6280661 + 39.91418127 * Tc + -0.1992131652 * Tc ^ 2.0;
//   C4 := 1155.132809 + 33.35722311 * Tc + -0.1782584073 * Tc ^ 2.0;
//   C5 := 640.6219484 + 13.10318363 * Tc + -0.07751011421 * Tc ^ 2.0;
//   Dh := (C1 + C2 * DXi + C3 * DXi ^ 2.0 + C4 * DXi ^ 3.0 + C5 * DXi ^ 4.0) * Xi * (1.0 - Xi);
//   h := 1000.0 * (Xi * H1 + (1.0 - Xi) * Hliq / 1000.0 + Dh);
// end ThermoSysPro.Properties.WaterSolution.SpecificEnthalpy_TX;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp \"derivative of saturation temperature w.r.t. pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dtsat(unit = \"K/Pa\") \"derivative of T w.r.t. p\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[49] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * p;
//   o[1] := pi ^ 0.75;
//   o[2] := 1.0 / o[1];
//   o[3] := -4.268461735023 * o[2];
//   o[4] := sqrt(pi);
//   o[5] := 1.0 / o[4];
//   o[6] := 0.5 * o[5];
//   o[7] := o[3] + o[6];
//   o[8] := pi ^ 0.25;
//   o[9] := -3232555.0322333 * o[8];
//   o[10] := -724213.16703206 * o[4];
//   o[11] := 405113.40542057 + o[10] + o[9];
//   o[12] := -4.0 * o[11] * o[7];
//   o[13] := -808138.758058325 * o[2];
//   o[14] := -362106.58351603 * o[5];
//   o[15] := o[13] + o[14];
//   o[16] := -17.073846940092 * o[8];
//   o[17] := 14.91510861353 + o[16] + o[4];
//   o[18] := -4.0 * o[15] * o[17];
//   o[19] := 3005.2061756175 * o[2];
//   o[20] := 583.52607263835 * o[5];
//   o[21] := o[19] + o[20];
//   o[22] := 12020.82470247 * o[8];
//   o[23] := 1167.0521452767 * o[4];
//   o[24] := -4823.2657361591 + o[22] + o[23];
//   o[25] := 2.0 * o[21] * o[24];
//   o[26] := o[12] + o[18] + o[25];
//   o[27] := -4.0 * o[11] * o[17];
//   o[28] := o[24] ^ 2.0;
//   o[29] := o[27] + o[28];
//   o[30] := sqrt(o[29]);
//   o[31] := 1.0 / o[30];
//   o[32] := -o[30];
//   o[33] := -12020.82470247 * o[8];
//   o[34] := -1167.0521452767 * o[4];
//   o[35] := 4823.2657361591 + o[32] + o[33] + o[34];
//   o[36] := o[30];
//   o[37] := -4823.2657361591 + o[22] + o[23] + o[36];
//   o[38] := o[37] ^ 2.0;
//   o[39] := 1.0 / o[38];
//   o[40] := -1.72207339365771 * o[30];
//   o[41] := 21592.2055343628 * o[8];
//   o[42] := o[30] * o[8];
//   o[43] := -8192.87114842946 * o[4];
//   o[44] := -0.510632954559659 * o[30] * o[4];
//   o[45] := -3100.02526152368 * o[1];
//   o[46] := pi;
//   o[47] := 1295.95640782102 * o[46];
//   o[48] := 2862.09212505088 + o[40] + o[41] + o[42] + o[43] + o[44] + o[45] + o[47];
//   o[49] := o[35] ^ -2.0;
//   dtsat := 5e-07 * (2.0 * o[15] / o[35] + -2.0 * o[11] * (-3005.2061756175 * o[2] + -0.5 * o[26] * o[31] + -583.52607263835 * o[5]) * o[49] + -20953.4635664399 * (o[39] * (1295.95640782102 + 5398.05138359071 * o[2] + 0.25 * o[2] * o[30] + -0.861036696828853 * o[26] * o[31] + -0.255316477279829 * o[26] * o[31] * o[4] + -4096.43557421473 * o[5] + -0.255316477279829 * o[30] * o[5] + -2325.01894614276 / o[8] + 0.5 * o[26] * o[31] * o[8]) + -2.0 * (o[19] + o[20] + 0.5 * o[26] * o[31]) * o[48] / o[37] ^ 3.0) / sqrt(o[39] * o[48]));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3 \"Helmholtz function for region 3: f(d,T)\"
//   input Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real[40] o \"vector of auxiliary variables\";
// algorithm
//   f.T := T;
//   f.d := d;
//   f.R := 461.526;
//   f.tau := 647.096 / T;
//   f.delta := if d == 322.0 and T == 647.096 then 0.999999999999999 else abs(d / 322.0);
//   o[1] := f.tau ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] * f.tau;
//   o[4] := o[1] * f.tau;
//   o[5] := o[2] ^ 2.0;
//   o[6] := o[1] * o[5] * f.tau;
//   o[7] := o[5] * f.tau;
//   o[8] := -0.64207765181607 * o[1];
//   o[9] := 0.88521043984318 + o[8];
//   o[10] := o[7] * o[9];
//   o[11] := -1.1524407806681 + o[10];
//   o[12] := o[11] * o[2];
//   o[13] := -1.2654315477714 + o[12];
//   o[14] := o[1] * o[13];
//   o[15] := o[1] * o[2] * o[5] * f.tau;
//   o[16] := o[2] * o[5];
//   o[17] := o[1] * o[5];
//   o[18] := o[5] ^ 2.0;
//   o[19] := o[1] * o[18] * o[2];
//   o[20] := o[1] * o[18] * o[2] * f.tau;
//   o[21] := o[18] * o[5];
//   o[22] := o[1] * o[18] * o[5];
//   o[23] := 0.25116816848616 * o[2];
//   o[24] := 0.078841073758308 + o[23];
//   o[25] := o[15] * o[24];
//   o[26] := -6.100523451393 + o[25];
//   o[27] := o[26] * f.tau;
//   o[28] := 9.7944563083754 + o[27];
//   o[29] := o[2] * o[28];
//   o[30] := -1.70429417648412 + o[29];
//   o[31] := o[1] * o[30];
//   o[32] := f.delta ^ 2.0;
//   o[33] := -10.9153200808732 * o[1];
//   o[34] := 13.2781565976477 + o[33];
//   o[35] := o[34] * o[7];
//   o[36] := -6.9146446840086 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -2.5308630955428 + o[37];
//   o[39] := o[38] * f.tau;
//   o[40] := o[18] * o[5] * f.tau;
//   f.f := -15.732845290239 + f.tau * (20.944396974307 + (-7.6867707878716 + o[3] * (2.6185947787954 + o[4] * (-2.808078114862 + o[1] * (1.2053369696517 + -0.0084566812812502 * o[6])))) * f.tau) + f.delta * (o[14] + f.delta * (0.38493460186671 + o[1] * (-0.85214708824206 + o[2] * (4.8972281541877 + (-3.0502617256965 + o[15] * (0.039420536879154 + 0.12558408424308 * o[2])) * f.tau)) + f.delta * (-0.2799932969871 + o[1] * (1.389979956946 + o[1] * (-2.018991502357 + o[16] * (-0.0082147637173963 + -0.47596035734923 * o[17]))) + f.delta * (0.0439840744735 + o[1] * (-0.44476435428739 + o[1] * (0.90572070719733 + 0.70522450087967 * o[19])) + f.delta * (f.delta * (-0.022175400873096 + o[1] * (0.094260751665092 + 0.16436278447961 * o[21]) + f.delta * (-0.013503372241348 * o[1] + f.delta * (-0.014834345352472 * o[22] + f.delta * (o[1] * (0.00057922953628084 + 0.0032308904703711 * o[21]) + f.delta * (8.0964802996215e-05 + -4.4923899061815e-05 * f.delta * o[22] + -0.00016557679795037 * f.tau))))) + (0.10770512626332 + o[1] * (-0.32913623258954 + -0.50871062041158 * o[20])) * f.tau))))) + 1.0658070028513 * log(f.delta);
//   f.fdelta := (1.0658070028513 + f.delta * (o[14] + f.delta * (0.76986920373342 + o[31] + f.delta * (-0.8399798909613 + o[1] * (4.169939870838 + o[1] * (-6.056974507071 + o[16] * (-0.0246442911521889 + -1.42788107204769 * o[17]))) + f.delta * (0.175936297894 + o[1] * (-1.77905741714956 + o[1] * (3.6228828287893 + 2.82089800351868 * o[19])) + f.delta * (f.delta * (-0.133052405238576 + o[1] * (0.56556450999055 + 0.98617670687766 * o[21]) + f.delta * (-0.094523605689436 * o[1] + f.delta * (-0.118674762819776 * o[22] + f.delta * (o[1] * (0.0052130658265276 + 0.0290780142333399 * o[21]) + f.delta * (0.00080964802996215 + -0.00049416288967996 * f.delta * o[22] + -0.0016557679795037 * f.tau))))) + (0.5385256313166 + o[1] * (-1.6456811629477 + -2.5435531020579 * o[20])) * f.tau)))))) / f.delta;
//   f.fdeltadelta := (-1.0658070028513 + o[32] * (0.76986920373342 + o[31] + f.delta * (-1.6799597819226 + o[1] * (8.339879741676 + o[1] * (-12.113949014142 + o[16] * (-0.049288582304378 + -2.85576214409538 * o[17]))) + f.delta * (0.527808893682 + o[1] * (-5.3371722514487 + o[1] * (10.868648486368 + 8.462694010556 * o[19])) + f.delta * (f.delta * (-0.66526202619288 + o[1] * (2.82782254995276 + 4.9308835343883 * o[21]) + f.delta * (-0.56714163413662 * o[1] + f.delta * (-0.83072333973843 * o[22] + f.delta * (o[1] * (0.04170452661222 + 0.232624113866719 * o[21]) + f.delta * (0.0072868322696594 + -0.0049416288967996 * f.delta * o[22] + -0.0149019118155333 * f.tau))))) + (2.1541025252664 + o[1] * (-6.5827246517908 + -10.1742124082316 * o[20])) * f.tau))))) / o[32];
//   f.ftau := 20.944396974307 + (-15.3735415757432 + o[3] * (18.3301634515678 + o[4] * (-28.08078114862 + o[1] * (14.4640436358204 + -0.194503669468755 * o[6])))) * f.tau + f.delta * (o[39] + f.delta * (f.tau * (-1.70429417648412 + o[2] * (29.3833689251262 + (-21.3518320798755 + o[15] * (0.86725181134139 + 3.2651861903201 * o[2])) * f.tau)) + f.delta * ((2.779959913892 + o[1] * (-8.075966009428 + o[16] * (-0.131436219478341 + -12.37496929108 * o[17]))) * f.tau + f.delta * ((-0.88952870857478 + o[1] * (3.6228828287893 + 18.3358370228714 * o[19])) * f.tau + f.delta * (0.10770512626332 + o[1] * (-0.98740869776862 + -13.2264761307011 * o[20]) + f.delta * ((0.188521503330184 + 4.2734323964699 * o[21]) * f.tau + f.delta * (-0.027006744482696 * f.tau + f.delta * (-0.38569297916427 * o[40] + f.delta * (f.delta * (-0.00016557679795037 + -0.00116802137560719 * f.delta * o[40]) + (0.00115845907256168 + 0.084003152229649 * o[21]) * f.tau)))))))));
//   f.ftautau := -15.3735415757432 + o[3] * (109.980980709407 + o[4] * (-252.72703033758 + o[1] * (159.104479994024 + -4.2790807283126 * o[6]))) + f.delta * (-2.5308630955428 + o[2] * (-34.573223420043 + (185.894192367068 + -174.645121293971 * o[1]) * o[7]) + f.delta * (-1.70429417648412 + o[2] * (146.916844625631 + (-128.110992479253 + o[15] * (18.2122880381691 + 81.629654758002 * o[2])) * f.tau) + f.delta * (2.779959913892 + o[1] * (-24.227898028284 + o[16] * (-1.97154329217511 + -309.374232277 * o[17])) + f.delta * (-0.88952870857478 + o[1] * (10.868648486368 + 458.39592557179 * o[19]) + f.delta * (f.delta * (0.188521503330184 + 106.835809911747 * o[21] + f.delta * (-0.027006744482696 + f.delta * (-9.6423244791068 * o[21] + f.delta * (0.00115845907256168 + 2.10007880574121 * o[21] + -0.0292005343901797 * o[21] * o[32])))) + (-1.97481739553724 + -330.66190326753 * o[20]) * f.tau)))));
//   f.fdeltatau := o[39] + f.delta * (f.tau * (-3.4085883529682 + o[2] * (58.766737850252 + (-42.703664159751 + o[15] * (1.73450362268278 + 6.5303723806402 * o[2])) * f.tau)) + f.delta * ((8.339879741676 + o[1] * (-24.227898028284 + o[16] * (-0.39430865843502 + -37.12490787324 * o[17]))) * f.tau + f.delta * ((-3.5581148342991 + o[1] * (14.4915313151573 + 73.343348091486 * o[19])) * f.tau + f.delta * (0.5385256313166 + o[1] * (-4.9370434888431 + -66.132380653505 * o[20]) + f.delta * ((1.1311290199811 + 25.6405943788192 * o[21]) * f.tau + f.delta * (-0.189047211378872 * f.tau + f.delta * (-3.08554383331418 * o[40] + f.delta * (f.delta * (-0.0016557679795037 + -0.0128482351316791 * f.delta * o[40]) + (0.0104261316530551 + 0.75602837006684 * o[21]) * f.tau))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3 \"Helmholtz function for region 3: f(d,T), including 3rd derivatives\"
//   input Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real del \"dimensionless density\";
//   protected Real[62] o \"vector of auxiliary variables\";
// algorithm
//   f.T := T;
//   f.d := d;
//   f.R := 461.526;
//   tau := 647.096 / T;
//   del := if d == 322.0 and T == 647.096 then 0.999999999999999 else abs(d / 322.0);
//   f.tau := tau;
//   f.delta := del;
//   o[1] := tau ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] * tau;
//   o[4] := o[1] * tau;
//   o[5] := o[2] ^ 2.0;
//   o[6] := o[1] * o[5] * tau;
//   o[7] := o[5] * tau;
//   o[8] := -0.64207765181607 * o[1];
//   o[9] := 0.88521043984318 + o[8];
//   o[10] := o[7] * o[9];
//   o[11] := -1.1524407806681 + o[10];
//   o[12] := o[11] * o[2];
//   o[13] := -1.2654315477714 + o[12];
//   o[14] := o[1] * o[13];
//   o[15] := o[1] * o[2] * o[5] * tau;
//   o[16] := o[2] * o[5];
//   o[17] := o[1] * o[5];
//   o[18] := o[5] ^ 2.0;
//   o[19] := o[1] * o[18] * o[2];
//   o[20] := o[1] * o[18] * o[2] * tau;
//   o[21] := o[18] * o[5];
//   o[22] := o[1] * o[18] * o[5];
//   o[23] := 0.25116816848616 * o[2];
//   o[24] := 0.078841073758308 + o[23];
//   o[25] := o[15] * o[24];
//   o[26] := -6.100523451393 + o[25];
//   o[27] := o[26] * tau;
//   o[28] := 9.7944563083754 + o[27];
//   o[29] := o[2] * o[28];
//   o[30] := -1.70429417648412 + o[29];
//   o[31] := o[1] * o[30];
//   o[32] := del ^ 2.0;
//   o[33] := -2.85576214409538 * o[17];
//   o[34] := -0.0492885823043778 + o[33];
//   o[35] := o[16] * o[34];
//   o[36] := -12.113949014142 + o[35];
//   o[37] := o[1] * o[36];
//   o[38] := 8.339879741676 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := del * o[32];
//   o[41] := -10.9153200808732 * o[1];
//   o[42] := 13.2781565976477 + o[41];
//   o[43] := o[42] * o[7];
//   o[44] := -6.9146446840086 + o[43];
//   o[45] := o[2] * o[44];
//   o[46] := -2.5308630955428 + o[45];
//   o[47] := o[46] * tau;
//   o[48] := o[18] * o[5] * tau;
//   o[49] := -174.645121293971 * o[1];
//   o[50] := 185.894192367068 + o[49];
//   o[51] := o[50] * o[7];
//   o[52] := -34.573223420043 + o[51];
//   o[53] := o[2] * o[52];
//   o[54] := 6.53037238064016 * o[2];
//   o[55] := 1.73450362268278 + o[54];
//   o[56] := o[15] * o[55];
//   o[57] := -42.703664159751 + o[56];
//   o[58] := o[57] * tau;
//   o[59] := 58.7667378502524 + o[58];
//   o[60] := o[2] * o[59];
//   o[61] := -3.40858835296824 + o[60];
//   o[62] := o[61] * tau;
//   f.f := -15.732845290239 + tau * (20.944396974307 + (-7.6867707878716 + o[3] * (2.6185947787954 + o[4] * (-2.808078114862 + o[1] * (1.2053369696517 + -0.0084566812812502 * o[6])))) * tau) + del * (o[14] + del * (0.38493460186671 + o[1] * (-0.85214708824206 + o[2] * (4.8972281541877 + (-3.0502617256965 + o[15] * (0.039420536879154 + 0.12558408424308 * o[2])) * tau)) + del * (-0.2799932969871 + o[1] * (1.389979956946 + o[1] * (-2.018991502357 + o[16] * (-0.0082147637173963 + -0.47596035734923 * o[17]))) + del * (0.0439840744735 + o[1] * (-0.44476435428739 + o[1] * (0.90572070719733 + 0.70522450087967 * o[19])) + del * (del * (-0.022175400873096 + o[1] * (0.094260751665092 + 0.16436278447961 * o[21]) + del * (-0.013503372241348 * o[1] + del * (-0.014834345352472 * o[22] + del * (o[1] * (0.00057922953628084 + 0.0032308904703711 * o[21]) + del * (8.0964802996215e-05 + -4.4923899061815e-05 * del * o[22] + -0.00016557679795037 * tau))))) + (0.10770512626332 + o[1] * (-0.32913623258954 + -0.50871062041158 * o[20])) * tau))))) + 1.0658070028513 * log(del);
//   f.fdelta := (1.0658070028513 + del * (o[14] + del * (0.76986920373342 + o[31] + del * (-0.8399798909613 + o[1] * (4.169939870838 + o[1] * (-6.056974507071 + o[16] * (-0.0246442911521889 + -1.42788107204769 * o[17]))) + del * (0.175936297894 + o[1] * (-1.77905741714956 + o[1] * (3.62288282878932 + 2.82089800351868 * o[19])) + del * (del * (-0.133052405238576 + o[1] * (0.565564509990552 + 0.98617670687766 * o[21]) + del * (-0.094523605689436 * o[1] + del * (-0.118674762819776 * o[22] + del * (o[1] * (0.00521306582652756 + 0.0290780142333399 * o[21]) + del * (0.00080964802996215 + -0.000494162889679965 * del * o[22] + -0.0016557679795037 * tau))))) + (0.5385256313166 + o[1] * (-1.6456811629477 + -2.5435531020579 * o[20])) * tau)))))) / del;
//   f.fdeltadelta := (-1.0658070028513 + o[32] * (0.76986920373342 + o[31] + del * (-1.6799597819226 + o[39] + del * (0.527808893682 + o[1] * (-5.33717225144868 + o[1] * (10.868648486368 + 8.46269401055604 * o[19])) + del * (del * (-0.66526202619288 + o[1] * (2.82782254995276 + 4.9308835343883 * o[21]) + del * (-0.567141634136616 * o[1] + del * (-0.830723339738432 * o[22] + del * (o[1] * (0.0417045266122205 + 0.232624113866719 * o[21]) + del * (0.00728683226965935 + -0.00494162889679965 * del * o[22] + -0.0149019118155333 * tau))))) + (2.1541025252664 + o[1] * (-6.5827246517908 + -10.1742124082316 * o[20])) * tau))))) / o[32];
//   f.fdeltadeltadelta := (2.1316140057026 + o[40] * (-1.6799597819226 + o[39] + del * (1.055617787364 + o[1] * (-10.6743445028974 + o[1] * (21.7372969727359 + 16.9253880211121 * o[19])) + del * (del * (-2.66104810477152 + o[1] * (11.311290199811 + 19.7235341375532 * o[21]) + del * (-2.83570817068308 * o[1] + del * (-4.98434003843059 * o[22] + del * (o[1] * (0.291931686285543 + 1.62836879706703 * o[21]) + del * (0.0582946581572748 + -0.0444746600711968 * del * o[22] + -0.119215294524266 * tau))))) + (6.4623075757992 + o[1] * (-19.7481739553724 + -30.5226372246948 * o[20])) * tau)))) / o[40];
//   f.ftau := 20.944396974307 + (-15.3735415757432 + o[3] * (18.3301634515678 + o[4] * (-28.08078114862 + o[1] * (14.4640436358204 + -0.194503669468755 * o[6])))) * tau + del * (o[47] + del * (tau * (-1.70429417648412 + o[2] * (29.3833689251262 + (-21.3518320798755 + o[15] * (0.867251811341388 + 3.26518619032008 * o[2])) * tau)) + del * ((2.779959913892 + o[1] * (-8.075966009428 + o[16] * (-0.131436219478341 + -12.37496929108 * o[17]))) * tau + del * ((-0.88952870857478 + o[1] * (3.62288282878932 + 18.3358370228714 * o[19])) * tau + del * (0.10770512626332 + o[1] * (-0.98740869776862 + -13.2264761307011 * o[20]) + del * ((0.188521503330184 + 4.27343239646986 * o[21]) * tau + del * (-0.027006744482696 * tau + del * (-0.385692979164272 * o[48] + del * (del * (-0.00016557679795037 + -0.00116802137560719 * del * o[48]) + (0.00115845907256168 + 0.0840031522296486 * o[21]) * tau)))))))));
//   f.ftautau := -15.3735415757432 + o[3] * (109.980980709407 + o[4] * (-252.72703033758 + o[1] * (159.104479994024 + -4.2790807283126 * o[6]))) + del * (-2.5308630955428 + o[53] + del * (-1.70429417648412 + o[2] * (146.916844625631 + (-128.110992479253 + o[15] * (18.2122880381691 + 81.629654758002 * o[2])) * tau) + del * (2.779959913892 + o[1] * (-24.227898028284 + o[16] * (-1.97154329217511 + -309.374232277 * o[17])) + del * (-0.88952870857478 + o[1] * (10.868648486368 + 458.395925571786 * o[19]) + del * (del * (0.188521503330184 + 106.835809911746 * o[21] + del * (-0.027006744482696 + del * (-9.6423244791068 * o[21] + del * (0.00115845907256168 + 2.10007880574121 * o[21] + -0.0292005343901797 * o[21] * o[32])))) + (-1.97481739553724 + -330.661903267527 * o[20]) * tau)))));
//   f.ftautautau := o[2] * (549.904903547034 + o[4] * (-2021.81624270064 + o[1] * (1591.04479994024 + -89.8606952945646 * o[6]))) + del * (o[4] * (-138.292893680172 + (2416.62450077188 + -2619.67681940957 * o[1]) * o[7]) + del * (o[4] * (587.667378502524 + (-640.554962396265 + o[15] * (364.245760763383 + 1959.11171419205 * o[2])) * tau) + del * ((-48.455796056568 + o[16] * (-27.6016060904516 + -7424.98157464799 * o[17])) * tau + del * (del * (-1.97481739553724 + -7935.88567842065 * o[20] + del * (2564.05943788192 * o[20] + o[32] * (-231.415787498563 * o[20] + del * (50.4018913377892 * o[20] + -0.700812825364314 * o[20] * o[32])))) + (21.7372969727359 + 11001.5022137229 * o[19]) * tau))));
//   f.fdeltatau := o[47] + del * (o[62] + del * ((8.339879741676 + o[1] * (-24.227898028284 + o[16] * (-0.394308658435022 + -37.1249078732399 * o[17]))) * tau + del * ((-3.55811483429912 + o[1] * (14.4915313151573 + 73.3433480914857 * o[19])) * tau + del * (0.5385256313166 + o[1] * (-4.9370434888431 + -66.1323806535054 * o[20]) + del * ((1.1311290199811 + 25.6405943788192 * o[21]) * tau + del * (-0.189047211378872 * tau + del * (-3.08554383331418 * o[48] + del * (del * (-0.0016557679795037 + -0.0128482351316791 * del * o[48]) + (0.0104261316530551 + 0.756028370066837 * o[21]) * tau))))))));
//   f.fdeltatautau := -2.5308630955428 + o[53] + del * (-3.40858835296824 + o[2] * (293.833689251262 + (-256.221984958506 + o[15] * (36.4245760763383 + 163.259309516004 * o[2])) * tau) + del * (8.339879741676 + o[1] * (-72.683694084852 + o[16] * (-5.91462987652534 + -928.122696830999 * o[17])) + del * (-3.55811483429912 + o[1] * (43.4745939454718 + 1833.58370228714 * o[19]) + del * (del * (1.1311290199811 + 641.014859470479 * o[21] + del * (-0.189047211378872 + del * (-77.1385958328544 * o[21] + del * (0.0104261316530551 + 18.9007092516709 * o[21] + -0.321205878291977 * o[21] * o[32])))) + (-9.8740869776862 + -1653.30951633764 * o[20]) * tau))));
//   f.fdeltadeltatau := o[62] + del * ((16.679759483352 + o[1] * (-48.455796056568 + o[16] * (-0.788617316870045 + -74.2498157464799 * o[17]))) * tau + del * ((-10.6743445028974 + o[1] * (43.4745939454718 + 220.030044274457 * o[19])) * tau + del * (2.1541025252664 + o[1] * (-19.7481739553724 + -264.529522614022 * o[20]) + del * ((5.65564509990552 + 128.202971894096 * o[21]) * tau + del * (-1.13428326827323 * tau + del * (-21.5988068331992 * o[48] + del * (del * (-0.0149019118155333 + -0.128482351316791 * del * o[48]) + (0.0834090532244409 + 6.0482269605347 * o[21]) * tau)))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1 \"Gibbs function for region 1: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real tau1 \"dimensionless temperature\";
//   protected Real[45] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 16530000.0;
//   g.tau := 1386.0 / max(T, 273.16);
//   pi1 := 7.1 - g.pi;
//   tau1 := -1.222 + g.tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] * tau1;
//   o[5] := 1.0 / o[4];
//   o[6] := o[1] * o[2];
//   o[7] := o[1] * tau1;
//   o[8] := 1.0 / o[7];
//   o[9] := o[1] * o[2] * o[3];
//   o[10] := 1.0 / o[2];
//   o[11] := o[2] * tau1;
//   o[12] := 1.0 / o[11];
//   o[13] := o[2] * o[3];
//   o[14] := 1.0 / o[3];
//   o[15] := pi1 ^ 2.0;
//   o[16] := o[15] * pi1;
//   o[17] := o[15] ^ 2.0;
//   o[18] := o[17] ^ 2.0;
//   o[19] := o[17] * o[18] * pi1;
//   o[20] := o[15] * o[17];
//   o[21] := o[3] ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[22] * o[3] * tau1;
//   o[24] := 1.0 / o[23];
//   o[25] := o[22] * o[3];
//   o[26] := 1.0 / o[25];
//   o[27] := o[1] * o[2] * o[22] * tau1;
//   o[28] := 1.0 / o[27];
//   o[29] := o[1] * o[2] * o[22];
//   o[30] := 1.0 / o[29];
//   o[31] := o[1] * o[2] * o[21] * o[3] * tau1;
//   o[32] := 1.0 / o[31];
//   o[33] := o[2] * o[21] * o[3] * tau1;
//   o[34] := 1.0 / o[33];
//   o[35] := o[1] * o[3] * tau1;
//   o[36] := 1.0 / o[35];
//   o[37] := o[1] * o[3];
//   o[38] := 1.0 / o[37];
//   o[39] := 1.0 / o[6];
//   o[40] := o[1] * o[22] * o[3];
//   o[41] := 1.0 / o[40];
//   o[42] := 1.0 / o[22];
//   o[43] := o[1] * o[2] * o[21] * o[3];
//   o[44] := 1.0 / o[43];
//   o[45] := 1.0 / o[13];
//   g.g := pi1 * (pi1 * (pi1 * (o[10] * (-3.1679644845054e-05 + o[2] * (-2.8270797985312e-06 + -8.5205128120103e-10 * o[6])) + pi1 * (o[12] * (-2.2425281908e-06 + (-6.5171222895601e-07 + -1.4341729937924e-13 * o[13]) * o[7]) + pi1 * (-4.0516996860117e-07 * o[14] + o[16] * ((-1.2734301741641e-09 + -1.7424871230634e-10 * o[11]) * o[36] + o[19] * (-6.8762131295531e-19 * o[34] + o[15] * (1.4478307828521e-20 * o[32] + o[20] * (2.6335781662795e-23 * o[30] + pi1 * (-1.1947622640071e-23 * o[28] + pi1 * (1.8228094581404e-24 * o[26] + -9.3537087292458e-26 * o[24] * pi1))))))))) + o[8] * (-0.00047184321073267 + o[7] * (-0.00030001780793026 + (4.7661393906987e-05 + o[1] * (-4.4141845330846e-06 + -7.2694996297594e-16 * o[9])) * tau1))) + o[5] * (0.00028319080123804 + o[1] * (-0.00060706301565874 + o[6] * (-0.018990068218419 + tau1 * (-0.032529748770505 + (-0.021841717175414 + -5.283835796993e-05 * o[1]) * tau1))))) + (0.14632971213167 + tau1 * (-0.84548187169114 + tau1 * (-3.756360367204 + tau1 * (3.3855169168385 + tau1 * (-0.95791963387872 + tau1 * (0.15772038513228 + (-0.016616417199501 + 0.00081214629983568 * tau1) * tau1)))))) / o[1];
//   g.gpi := pi1 * (pi1 * (o[10] * (9.5038934535162e-05 + o[2] * (8.4812393955936e-06 + 2.55615384360309e-09 * o[6])) + pi1 * (o[12] * (8.9701127632e-06 + (2.60684891582404e-06 + 5.7366919751696e-13 * o[13]) * o[7]) + pi1 * (2.02584984300585e-06 * o[14] + o[16] * ((1.01874413933128e-08 + 1.39398969845072e-09 * o[11]) * o[36] + o[19] * (1.44400475720615e-17 * o[34] + o[15] * (-3.3300108005598e-19 * o[32] + o[20] * (-7.6373766822106e-22 * o[30] + pi1 * (3.5842867920213e-22 * o[28] + pi1 * (-5.6507093202352e-23 * o[26] + 2.99318679335866e-24 * o[24] * pi1))))))))) + o[8] * (0.00094368642146534 + o[7] * (0.00060003561586052 + (-9.5322787813974e-05 + o[1] * (8.8283690661692e-06 + 1.45389992595188e-15 * o[9])) * tau1))) + o[5] * (-0.00028319080123804 + o[1] * (0.00060706301565874 + o[6] * (0.018990068218419 + tau1 * (0.032529748770505 + (0.021841717175414 + 5.283835796993e-05 * o[1]) * tau1))));
//   g.gpipi := pi1 * (o[10] * (-0.000190077869070324 + o[2] * (-1.69624787911872e-05 + -5.1123076872062e-09 * o[6])) + pi1 * (o[12] * (-2.69103382896e-05 + (-7.8205467474721e-06 + -1.72100759255088e-12 * o[13]) * o[7]) + pi1 * (-8.1033993720234e-06 * o[14] + o[16] * ((-7.131208975319e-08 + -9.757927889155e-09 * o[11]) * o[36] + o[19] * (-2.8880095144123e-16 * o[34] + o[15] * (7.3260237612316e-18 * o[32] + o[20] * (2.13846547101895e-20 * o[30] + pi1 * (-1.03944316968618e-20 * o[28] + pi1 * (1.69521279607057e-21 * o[26] + -9.2788790594118e-23 * o[24] * pi1))))))))) + o[8] * (-0.00094368642146534 + o[7] * (-0.00060003561586052 + (9.5322787813974e-05 + o[1] * (-8.8283690661692e-06 + -1.45389992595188e-15 * o[9])) * tau1));
//   g.gtau := pi1 * (o[38] * (-0.00254871721114236 + o[1] * (0.0042494411096112 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (0.00141552963219801 + o[2] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[9]))) + pi1 * (o[12] * (0.000126718579380216 + -5.1123076872062e-09 * o[37]) + pi1 * (o[39] * (1.1212640954e-05 + (1.30342445791202e-06 + -1.4341729937924e-12 * o[13]) * o[7]) + pi1 * (3.2413597488094e-06 * o[5] + o[16] * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[11]) * o[45] + o[19] * (1.9941018075704e-17 * o[44] + o[15] * (-4.4882754268415e-19 * o[42] + o[20] * (-1.00075970318621e-21 * o[28] + pi1 * (4.6595728296277e-22 * o[26] + pi1 * (-7.2912378325616e-23 * o[24] + 3.8350205789908e-24 * o[41] * pi1))))))))))) + o[8] * (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1)))));
//   g.gtautau := pi1 * (o[36] * (0.0254871721114236 + o[1] * (-0.033995528876889 + (-0.037980136436838 + -0.00031703014781958 * o[2]) * o[6])) + pi1 * (o[12] * (-0.005662118528792 + o[6] * (-2.64851071985076e-05 + -1.97730389929456e-13 * o[9])) + pi1 * ((-0.00063359289690108 + -2.55615384360309e-08 * o[37]) * o[39] + pi1 * (pi1 * (-2.91722377392842e-05 * o[38] + o[16] * (o[19] * (-5.9823054227112e-16 * o[32] + o[15] * (o[20] * (3.9029628424262e-20 * o[26] + pi1 * (-1.86382913185108e-20 * o[24] + pi1 * (2.98940751135026e-21 * o[41] + -1.61070864317613e-22 * pi1 / (o[1] * o[22] * o[3] * tau1)))) + 1.43624813658928e-17 / (o[22] * tau1))) + (-1.68092782989661e-07 + -7.3184459168663e-09 * o[11]) / (o[2] * o[3] * tau1))) + (-6.7275845724e-05 + (-3.9102733737361e-06 + -1.29075569441316e-11 * o[13]) * o[7]) / (o[1] * o[2] * tau1))))) + o[10] * (0.87797827279002 + tau1 * (-1.69096374338228 + o[7] * (-1.91583926775744 + tau1 * (0.94632231079368 + (-0.199397006394012 + 0.0162429259967136 * tau1) * tau1))));
//   g.gtaupi := o[38] * (0.00254871721114236 + o[1] * (-0.0042494411096112 + (-0.018990068218419 + (0.021841717175414 + 0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (-0.00283105926439602 + o[2] * (-9.5322787813974e-05 + o[1] * (2.64851071985076e-05 + 2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (-0.00038015573814065 + 1.53369230616185e-08 * o[37]) + pi1 * (o[39] * (-4.4850563816e-05 + (-5.2136978316481e-06 + 5.7366919751696e-12 * o[13]) * o[7]) + pi1 * (-1.62067987440468e-05 * o[5] + o[16] * ((-1.12061855326441e-07 + -8.3639381907043e-09 * o[11]) * o[45] + o[19] * (-4.1876137958978e-16 * o[44] + o[15] * (1.03230334817355e-17 * o[42] + o[20] * (2.90220313924001e-20 * o[28] + pi1 * (-1.39787184888831e-20 * o[26] + pi1 * (2.2602837280941e-21 * o[24] + -1.22720658527705e-22 * o[41] * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3 \"base function for region 1 with 3rd derivatives for sensitivities: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs function and derivatives up to 3rd derivatives\";
//   protected Real pi1;
//   protected Real tau1;
//   protected Real[55] o;
// algorithm
//   assert( p > 611.657, \"IF97 medium function g1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 100000000.0, \"IF97 medium function g1: the input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 100 Mpa\");
//   assert( T >= 273.15, \"IF97 medium function g1: the temperature (= \" + String(T, 0, true, 6) + \" K)  is lower than 273.15 K!\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := p / 16530000.0;
//   g.tau := 1386.0 / T;
//   pi1 := 7.1 - g.pi;
//   tau1 := -1.222 + g.tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] * tau1;
//   o[5] := 1.0 / o[4];
//   o[6] := o[1] * o[2];
//   o[7] := o[1] * tau1;
//   o[8] := 1.0 / o[7];
//   o[9] := o[1] * o[2] * o[3];
//   o[10] := 1.0 / o[2];
//   o[11] := o[2] * tau1;
//   o[12] := 1.0 / o[11];
//   o[13] := o[2] * o[3];
//   o[14] := 1.0 / o[3];
//   o[15] := pi1 ^ 2.0;
//   o[16] := o[15] * pi1;
//   o[17] := o[15] ^ 2.0;
//   o[18] := o[17] ^ 2.0;
//   o[19] := o[17] * o[18] * pi1;
//   o[20] := o[15] * o[17];
//   o[21] := o[3] ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[22] * o[3] * tau1;
//   o[24] := 1.0 / o[23];
//   o[25] := o[22] * o[3];
//   o[26] := 1.0 / o[25];
//   o[27] := o[1] * o[2] * o[22] * tau1;
//   o[28] := 1.0 / o[27];
//   o[29] := o[1] * o[2] * o[22];
//   o[30] := 1.0 / o[29];
//   o[31] := o[1] * o[2] * o[21] * o[3] * tau1;
//   o[32] := 1.0 / o[31];
//   o[33] := o[2] * o[21] * o[3] * tau1;
//   o[34] := 1.0 / o[33];
//   o[35] := o[1] * o[3] * tau1;
//   o[36] := 1.0 / o[35];
//   o[37] := 5.85475673349302e-08 * o[11];
//   o[38] := o[1] * o[3];
//   o[39] := 1.0 / o[38];
//   o[40] := 1.0 / o[6];
//   o[41] := o[1] * o[22] * o[3];
//   o[42] := 1.0 / o[41];
//   o[43] := 1.0 / o[22];
//   o[44] := o[1] * o[2] * o[21] * o[3];
//   o[45] := 1.0 / o[44];
//   o[46] := 1.0 / o[13];
//   o[47] := -0.00031703014781958 * o[2];
//   o[48] := o[1] * o[2] * tau1;
//   o[49] := 1.0 / o[48];
//   o[50] := o[1] * o[22] * o[3] * tau1;
//   o[51] := 1.0 / o[50];
//   o[52] := o[22] * tau1;
//   o[53] := 1.0 / o[52];
//   o[54] := o[2] * o[3] * tau1;
//   o[55] := 1.0 / o[54];
//   g.g := pi1 * (pi1 * (pi1 * (o[10] * (-3.1679644845054e-05 + o[2] * (-2.8270797985312e-06 + -8.5205128120103e-10 * o[6])) + pi1 * (o[12] * (-2.2425281908e-06 + (-6.5171222895601e-07 + -1.4341729937924e-13 * o[13]) * o[7]) + pi1 * (-4.0516996860117e-07 * o[14] + o[16] * ((-1.2734301741641e-09 + -1.7424871230634e-10 * o[11]) * o[36] + o[19] * (-6.8762131295531e-19 * o[34] + o[15] * (1.4478307828521e-20 * o[32] + o[20] * (2.6335781662795e-23 * o[30] + pi1 * (-1.1947622640071e-23 * o[28] + pi1 * (1.8228094581404e-24 * o[26] + -9.3537087292458e-26 * o[24] * pi1))))))))) + o[8] * (-0.00047184321073267 + o[7] * (-0.00030001780793026 + (4.7661393906987e-05 + o[1] * (-4.4141845330846e-06 + -7.2694996297594e-16 * o[9])) * tau1))) + o[5] * (0.00028319080123804 + o[1] * (-0.00060706301565874 + o[6] * (-0.018990068218419 + tau1 * (-0.032529748770505 + (-0.021841717175414 + -5.283835796993e-05 * o[1]) * tau1))))) + (0.14632971213167 + tau1 * (-0.84548187169114 + tau1 * (-3.756360367204 + tau1 * (3.3855169168385 + tau1 * (-0.95791963387872 + tau1 * (0.15772038513228 + (-0.016616417199501 + 0.00081214629983568 * tau1) * tau1)))))) / o[1];
//   g.gpi := pi1 * (pi1 * (o[10] * (9.5038934535162e-05 + o[2] * (8.4812393955936e-06 + 2.55615384360309e-09 * o[6])) + pi1 * (o[12] * (8.9701127632e-06 + (2.60684891582404e-06 + 5.7366919751696e-13 * o[13]) * o[7]) + pi1 * (2.02584984300585e-06 * o[14] + o[16] * ((1.01874413933128e-08 + 1.39398969845072e-09 * o[11]) * o[36] + o[19] * (1.44400475720615e-17 * o[34] + o[15] * (-3.33001080055983e-19 * o[32] + o[20] * (-7.63737668221055e-22 * o[30] + pi1 * (3.5842867920213e-22 * o[28] + pi1 * (-5.65070932023524e-23 * o[26] + 2.99318679335866e-24 * o[24] * pi1))))))))) + o[8] * (0.00094368642146534 + o[7] * (0.00060003561586052 + (-9.5322787813974e-05 + o[1] * (8.8283690661692e-06 + 1.45389992595188e-15 * o[9])) * tau1))) + o[5] * (-0.00028319080123804 + o[1] * (0.00060706301565874 + o[6] * (0.018990068218419 + tau1 * (0.032529748770505 + (0.021841717175414 + 5.283835796993e-05 * o[1]) * tau1))));
//   g.gpipi := pi1 * (o[10] * (-0.000190077869070324 + o[2] * (-1.69624787911872e-05 + -5.11230768720618e-09 * o[6])) + pi1 * (o[12] * (-2.69103382896e-05 + (-7.82054674747212e-06 + -1.72100759255088e-12 * o[13]) * o[7]) + pi1 * (-8.1033993720234e-06 * o[14] + o[16] * ((-7.13120897531896e-08 + -9.75792788915504e-09 * o[11]) * o[36] + o[19] * (-2.8880095144123e-16 * o[34] + o[15] * (7.32602376123163e-18 * o[32] + o[20] * (2.13846547101895e-20 * o[30] + pi1 * (-1.03944316968618e-20 * o[28] + pi1 * (1.69521279607057e-21 * o[26] + -9.27887905941183e-23 * o[24] * pi1))))))))) + o[8] * (-0.00094368642146534 + o[7] * (-0.00060003561586052 + (9.5322787813974e-05 + o[1] * (-8.8283690661692e-06 + -1.45389992595188e-15 * o[9])) * tau1));
//   g.gpipipi := o[10] * (0.000190077869070324 + o[2] * (1.69624787911872e-05 + 5.11230768720618e-09 * o[6])) + pi1 * (o[12] * (5.38206765792e-05 + (1.56410934949442e-05 + 3.44201518510176e-12 * o[13]) * o[7]) + pi1 * (2.43101981160702e-05 * o[14] + o[16] * (o[36] * (4.27872538519138e-07 + o[37]) + o[19] * (5.48721807738337e-15 * o[34] + o[15] * (-1.53846498985864e-16 * o[32] + o[20] * (-5.77385677175118e-19 * o[30] + pi1 * (2.9104408751213e-19 * o[28] + pi1 * (-4.91611710860466e-20 * o[26] + 2.78366371782355e-21 * o[24] * pi1))))))));
//   g.gtau := pi1 * (o[39] * (-0.00254871721114236 + o[1] * (0.00424944110961118 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (0.00141552963219801 + o[2] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[9]))) + pi1 * (o[12] * (0.000126718579380216 + -5.11230768720618e-09 * o[38]) + pi1 * (o[40] * (1.1212640954e-05 + (1.30342445791202e-06 + -1.4341729937924e-12 * o[13]) * o[7]) + pi1 * (3.24135974880936e-06 * o[5] + o[16] * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[11]) * o[46] + o[19] * (1.9941018075704e-17 * o[45] + o[15] * (-4.48827542684151e-19 * o[43] + o[20] * (-1.00075970318621e-21 * o[28] + pi1 * (4.65957282962769e-22 * o[26] + pi1 * (-7.2912378325616e-23 * o[24] + 3.83502057899078e-24 * o[42] * pi1))))))))))) + o[8] * (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1)))));
//   g.gtautau := pi1 * (o[36] * (0.0254871721114236 + o[1] * (-0.0339955288768894 + (-0.037980136436838 + o[47]) * o[6])) + pi1 * (o[12] * (-0.00566211852879204 + o[6] * (-2.64851071985076e-05 + -1.97730389929456e-13 * o[9])) + pi1 * ((-0.00063359289690108 + -2.55615384360309e-08 * o[38]) * o[40] + pi1 * (o[49] * (-6.7275845724e-05 + (-3.91027337373606e-06 + -1.29075569441316e-11 * o[13]) * o[7]) + pi1 * (-2.91722377392842e-05 * o[39] + o[16] * ((-1.68092782989661e-07 + -7.31844591686628e-09 * o[11]) * o[55] + o[19] * (-5.9823054227112e-16 * o[32] + o[15] * (1.43624813658928e-17 * o[53] + o[20] * (3.90296284242622e-20 * o[26] + pi1 * (-1.86382913185108e-20 * o[24] + pi1 * (2.98940751135026e-21 * o[42] + -1.61070864317613e-22 * o[51] * pi1))))))))))) + o[10] * (0.87797827279002 + tau1 * (-1.69096374338228 + o[7] * (-1.91583926775744 + tau1 * (0.94632231079368 + (-0.199397006394012 + 0.0162429259967136 * tau1) * tau1))));
//   g.gtautautau := pi1 * (o[46] * (-0.28035889322566 + o[1] * (0.305959759892005 + (0.113940409310514 + o[47]) * o[6])) + pi1 * (o[40] * (0.0283105926439602 + o[6] * (-2.64851071985076e-05 + -2.96595584894183e-12 * o[9])) + pi1 * ((0.00380155738140648 + -1.02246153744124e-07 * o[38]) * o[49] + pi1 * (o[14] * (0.000470930920068 + (1.56410934949442e-05 + -1.03260455553053e-10 * o[13]) * o[7]) + pi1 * (0.000291722377392842 * o[36] + o[16] * ((2.1852061788656e-06 + o[37]) / o[9] + o[19] * (1.85451468104047e-14 * o[43] + o[15] * (-4.73961885074464e-16 / (o[1] * o[22]) + o[20] * (-1.56118513697049e-18 * o[24] + pi1 * (7.64169944058941e-19 * o[42] + pi1 * (-1.25555115476711e-19 * o[51] + 6.92604716565734e-21 * pi1 / (o[2] * o[22] * o[3])))))))))))) + o[12] * (-3.51191309116008 + tau1 * (5.07289123014684 + o[2] * (0.94632231079368 + (-0.398794012788024 + 0.0487287779901408 * tau1) * tau1)));
//   g.gpitau := o[39] * (0.00254871721114236 + o[1] * (-0.00424944110961118 + (-0.018990068218419 + (0.021841717175414 + 0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (-0.00283105926439602 + o[2] * (-9.5322787813974e-05 + o[1] * (2.64851071985076e-05 + 2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (-0.000380155738140648 + 1.53369230616185e-08 * o[38]) + pi1 * (o[40] * (-4.4850563816e-05 + (-5.21369783164808e-06 + 5.7366919751696e-12 * o[13]) * o[7]) + pi1 * (-1.62067987440468e-05 * o[5] + o[16] * ((-1.12061855326441e-07 + -8.36393819070432e-09 * o[11]) * o[46] + o[19] * (-4.18761379589784e-16 * o[45] + o[15] * (1.03230334817355e-17 * o[43] + o[20] * (2.90220313924001e-20 * o[28] + pi1 * (-1.39787184888831e-20 * o[26] + pi1 * (2.2602837280941e-21 * o[24] + -1.22720658527705e-22 * o[42] * pi1))))))))));
//   g.gpipitau := o[10] * (0.00283105926439602 + o[2] * (9.5322787813974e-05 + o[1] * (-2.64851071985076e-05 + -2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (0.000760311476281296 + -3.06738461232371e-08 * o[38]) + pi1 * (o[40] * (0.000134551691448 + (1.56410934949442e-05 + -1.72100759255088e-11 * o[13]) * o[7]) + pi1 * (6.48271949761872e-05 * o[5] + o[16] * ((7.84432987285086e-07 + o[37]) * o[46] + o[19] * (8.37522759179568e-15 * o[45] + o[15] * (-2.2710673659818e-16 * o[43] + o[20] * (-8.12616878987203e-19 * o[28] + pi1 * (4.05382836177609e-19 * o[26] + pi1 * (-6.78085118428229e-20 * o[24] + 3.80434041435885e-21 * o[42] * pi1)))))))));
//   g.gpitautau := o[36] * (-0.0254871721114236 + o[1] * (0.0339955288768894 + (0.037980136436838 + 0.00031703014781958 * o[2]) * o[6])) + pi1 * (o[12] * (0.0113242370575841 + o[6] * (5.29702143970152e-05 + 3.95460779858911e-13 * o[9])) + pi1 * ((0.00190077869070324 + 7.66846153080927e-08 * o[38]) * o[40] + pi1 * (o[49] * (0.000269103382896 + (1.56410934949442e-05 + 5.16302277765264e-11 * o[13]) * o[7]) + pi1 * (0.000145861188696421 * o[39] + o[16] * ((1.34474226391729e-06 + o[37]) * o[55] + o[19] * (1.25628413876935e-14 * o[32] + o[15] * (-3.30337071415535e-16 * o[53] + o[20] * (-1.1318592243036e-18 * o[26] + pi1 * (5.59148739555323e-19 * o[24] + pi1 * (-9.26716328518579e-20 * o[42] + 5.1542676581636e-21 * o[51] * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2 \"Gibbs function for region 2: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real tau2 \"dimensionless temperature\";
//   protected Real[55] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 1000000.0;
//   g.tau := 540.0 / max(T, 273.16);
//   tau2 := -0.5 + g.tau;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := -0.05032527872793 * o[2];
//   o[4] := -0.057581259083432 + o[3];
//   o[5] := o[4] * tau2;
//   o[6] := -0.045996013696365 + o[5];
//   o[7] := o[6] * tau2;
//   o[8] := -0.017834862292358 + o[7];
//   o[9] := o[8] * tau2;
//   o[10] := o[1] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[10] * o[11] * o[12] * tau2;
//   o[14] := o[1] * o[10] * tau2;
//   o[15] := o[10] * o[11] * tau2;
//   o[16] := o[1] * o[12] * tau2;
//   o[17] := o[1] * o[11] * tau2;
//   o[18] := o[1] * o[10] * o[11];
//   o[19] := o[10] * o[11] * o[12];
//   o[20] := o[1] * o[10];
//   o[21] := g.pi ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[21] * o[22];
//   o[24] := o[10] * o[12] * tau2;
//   o[25] := o[12] ^ 2.0;
//   o[26] := o[11] * o[12] * o[25] * tau2;
//   o[27] := o[10] * o[12];
//   o[28] := o[1] * o[10] * o[11] * tau2;
//   o[29] := o[10] * o[12] * o[25] * tau2;
//   o[30] := o[1] * o[10] * o[25] * tau2;
//   o[31] := o[1] * o[11] * o[12];
//   o[32] := o[1] * o[12];
//   o[33] := g.tau ^ 2.0;
//   o[34] := o[33] ^ 2.0;
//   o[35] := -5.3349095828174e-05 * o[13];
//   o[36] := -0.087594591301146 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -0.007878555448671 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := -0.0003789797503263 + o[39];
//   o[41] := o[40] * tau2;
//   o[42] := -6.6065283340406e-05 + o[41];
//   o[43] := o[42] * tau2;
//   o[44] := 5.7870447262208e-06 * tau2;
//   o[45] := -0.30195167236758 * o[2];
//   o[46] := -0.172743777250296 + o[45];
//   o[47] := o[46] * tau2;
//   o[48] := -0.09199202739273 + o[47];
//   o[49] := o[48] * tau2;
//   o[50] := o[1] * o[11];
//   o[51] := o[10] * o[11];
//   o[52] := o[11] * o[12] * o[25];
//   o[53] := o[10] * o[12] * o[25];
//   o[54] := o[1] * o[10] * o[25];
//   o[55] := o[11] * o[12] * tau2;
//   g.g := g.pi * (-0.0017731742473213 + o[9] + g.pi * (tau2 * (-3.3032641670203e-05 + (-0.00018948987516315 + o[1] * (-0.0039392777243355 + (-0.043797295650573 + -2.6674547914087e-05 * o[13]) * o[2])) * tau2) + g.pi * (2.0481737692309e-08 + (4.3870667284435e-07 + o[1] * (-3.227767723857e-05 + (-0.0015033924542148 + -0.040668253562649 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (2.2922076337661e-06 * o[14] + g.pi * ((-1.6714766451061e-11 + o[15] * (-0.0021171472321355 + -23.895741934104 * o[16])) * o[2] + g.pi * (-5.905956432427e-18 + o[17] * (-1.2621808899101e-06 + -0.038946842435739 * o[18]) + g.pi * (o[11] * (1.1256211360459e-11 + -8.2311340897998 * o[19]) + g.pi * (1.9809712802088e-08 * o[15] + g.pi * (o[10] * (1.0406965210174e-19 + (-1.0234747095929e-13 + -1.0018179379511e-09 * o[10]) * o[20]) + o[23] * (o[13] * (-8.0882908646985e-11 + 0.10693031879409 * o[24]) + o[21] * (-0.33662250574171 * o[26] + o[21] * (o[27] * (8.9185845355421e-25 + (3.0629316876232e-13 + -4.2002467698208e-06 * o[15]) * o[28]) + g.pi * (-5.9056029685639e-26 * o[24] + g.pi * (3.7826947613457e-06 * o[29] + g.pi * (-1.2768608934681e-15 * o[30] + o[31] * (7.3087610595061e-29 + o[18] * (5.5414715350778e-17 + -9.436970724121e-07 * o[32])) * g.pi)))))))))))) + tau2 * (-7.8847309559367e-10 + (1.2790717852285e-08 + 4.8225372718507e-07 * tau2) * tau2))))) + (-0.00560879118302 + g.tau * (0.07145273881455 + g.tau * (-0.4071049823928 + g.tau * (1.424081971444 + g.tau * (-4.38395111945 + g.tau * (-9.692768600217 + g.tau * (10.08665568018 + (-0.2840863260772 + 0.02126846353307 * g.tau) * g.tau) + log(g.pi))))))) / (o[34] * g.tau);
//   g.gpi := (1.0 + g.pi * (-0.0017731742473213 + o[9] + g.pi * (o[43] + g.pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[1] * (-9.683303171571e-05 + (-0.0045101773626444 + -0.122004760687947 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (1.14610381688305e-05 * o[14] + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.012702883392813 + -143.374451604624 * o[16])) * o[2] + g.pi * (-4.1341695026989e-17 + o[17] * (-8.8352662293707e-06 + -0.272627897050173 * o[18]) + g.pi * (o[11] * (9.0049690883672e-11 + -65.849072718398 * o[19]) + g.pi * (1.78287415218792e-07 * o[15] + g.pi * (o[10] * (1.0406965210174e-18 + (-1.0234747095929e-12 + -1.0018179379511e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.29412653835176e-09 + 1.71088510070544 * o[24]) + o[21] * (-6.0592051033508 * o[26] + o[21] * (o[27] * (1.78371690710842e-23 + (6.1258633752464e-12 + -8.4004935396416e-05 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[24] + g.pi * (8.3219284749605e-05 * o[29] + g.pi * (-2.93678005497663e-14 * o[30] + o[31] * (1.75410265428146e-27 + o[18] * (1.32995316841867e-15 + -2.26487297378904e-05 * o[32])) * g.pi)))))))))))) + tau2 * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * tau2) * tau2)))))) / g.pi;
//   g.gpipi := (-1.0 + o[21] * (o[43] + g.pi * (1.22890426153854e-07 + (2.6322400370661e-06 + o[1] * (-0.00019366606343142 + (-0.0090203547252888 + -0.244009521375894 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (4.5844152675322e-05 * o[14] + g.pi * ((-5.0144299353183e-10 + o[15] * (-0.063514416964065 + -716.87225802312 * o[16])) * o[2] + g.pi * (-2.48050170161934e-16 + o[17] * (-5.3011597376224e-05 + -1.63576738230104 * o[18]) + g.pi * (o[11] * (6.303478361857e-10 + -460.94350902879 * o[19]) + g.pi * (1.42629932175034e-06 * o[15] + g.pi * (o[10] * (9.3662686891566e-18 + (-9.2112723863361e-12 + -9.0163614415599e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.94118980752764e-08 + 25.6632765105816 * o[24]) + o[21] * (-103.006486756963 * o[26] + o[21] * (o[27] * (3.389062123506e-22 + (1.16391404129682e-10 + -0.0015960937725319 * o[15]) * o[28]) + g.pi * (-2.48035324679684e-23 * o[24] + g.pi * (0.00174760497974171 * o[29] + g.pi * (-6.4609161209486e-13 * o[30] + o[31] * (4.0344361048474e-26 + o[18] * (3.05889228736295e-14 + -0.00052092078397148 * o[32])) * g.pi)))))))))))) + tau2 * (-9.461677147124e-09 + (1.5348861422742e-07 + o[44]) * tau2))))) / o[21];
//   g.gtau := (0.0280439559151 + g.tau * (-0.2858109552582 + g.tau * (1.2213149471784 + g.tau * (-2.848163942888 + g.tau * (4.38395111945 + o[33] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * g.tau) * g.tau)))))) / (o[33] * o[34]) + g.pi * (-0.017834862292358 + o[49] + g.pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[1] * (-0.015757110897342 + (-0.306581069554011 + -0.00096028372490713 * o[13]) * o[2])) * tau2 + g.pi * (4.3870667284435e-07 + o[1] * (-9.683303171571e-05 + (-0.0090203547252888 + -1.42338887469272 * o[13]) * o[2]) + g.pi * (-7.8847309559367e-10 + g.pi * (1.60454534363627e-05 * o[20] + g.pi * (o[1] * (-5.0144299353183e-11 + o[15] * (-0.033874355714168 + -836.35096769364 * o[16])) + g.pi * ((-1.38839897890111e-05 + -0.97367106089347 * o[18]) * o[50] + g.pi * (o[14] * (9.0049690883672e-11 + -296.320827232793 * o[19]) + g.pi * (2.57526266427144e-07 * o[51] + g.pi * (o[2] * (4.1627860840696e-19 + (-1.0234747095929e-12 + -1.40254511313154e-08 * o[10]) * o[20]) + o[23] * (o[19] * (-2.34560435076256e-09 + 5.3465159397045 * o[24]) + o[21] * (-19.1874828272775 * o[52] + o[21] * (o[16] * (1.78371690710842e-23 + (1.07202609066812e-11 + -0.000201611844951398 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[27] + g.pi * (0.000200482822351322 * o[53] + g.pi * (-4.9797574845256e-14 * o[54] + (1.90027787547159e-27 + o[18] * (2.21658861403112e-15 + -5.4734430199902e-05 * o[32])) * o[55] * g.pi)))))))))))) + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2))));
//   g.gtautau := (-0.1682637354906 + g.tau * (1.429054776291 + g.tau * (-4.8852597887136 + g.tau * (8.544491828664 + g.tau * (-8.7679022389 + o[33] * (-0.5681726521544 + 0.12761078119842 * g.tau) * g.tau))))) / (o[33] * o[34] * g.tau) + g.pi * (-0.09199202739273 + (-0.34548755450059 + -1.5097583618379 * o[2]) * tau2 + g.pi * (-0.0003789797503263 + o[1] * (-0.047271332692026 + (-1.83948641732407 + -0.03360993037175 * o[13]) * o[2]) + g.pi * ((-0.00019366606343142 + (-0.045101773626444 + -48.395221739552 * o[13]) * o[2]) * tau2 + g.pi * (2.558143570457e-08 + 2.89352236311042e-06 * tau2 + g.pi * (9.6272720618176e-05 * o[10] * tau2 + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.50811533571252 + -28435.9329015838 * o[16])) * tau2 + g.pi * (o[11] * (-0.000138839897890111 + -23.3681054614434 * o[18]) * tau2 + g.pi * ((6.303478361857e-10 + -10371.2289531477 * o[19]) * o[20] + g.pi * (3.09031519712573e-06 * o[17] + g.pi * (o[1] * (1.24883582522088e-18 + (-9.2112723863361e-12 + -1.823308647071e-07 * o[10]) * o[20]) + o[23] * (o[1] * o[11] * o[12] * (-6.5676921821352e-08 + 261.979281045521 * o[24]) * tau2 + o[21] * (-1074.49903832754 * o[1] * o[10] * o[12] * o[25] * tau2 + o[21] * ((3.389062123506e-22 + (3.6448887082716e-10 + -0.0094757567127157 * o[15]) * o[28]) * o[32] + g.pi * (-2.48035324679684e-23 * o[16] + g.pi * (0.0104251067622687 * o[1] * o[12] * o[25] * tau2 + g.pi * (o[11] * o[12] * (4.750694688679e-26 + o[18] * (8.6446955947214e-14 + -0.0031198625213944 * o[32])) * g.pi + -1.89230784411972e-12 * o[10] * o[25] * tau2))))))))))))))));
//   g.gtaupi := -0.017834862292358 + o[49] + g.pi * (-6.6065283340406e-05 + (-0.0007579595006526 + o[1] * (-0.031514221794684 + (-0.61316213910802 + -0.00192056744981426 * o[13]) * o[2])) * tau2 + g.pi * (1.31612001853305e-06 + o[1] * (-0.00029049909514713 + (-0.0270610641758664 + -4.2701666240781 * o[13]) * o[2]) + g.pi * (-3.15389238237468e-09 + g.pi * (8.0227267181813e-05 * o[20] + g.pi * (o[1] * (-3.00865796119098e-10 + o[15] * (-0.203246134285008 + -5018.1058061618 * o[16])) + g.pi * ((-9.7187928523078e-05 + -6.8156974262543 * o[18]) * o[50] + g.pi * (o[14] * (7.2039752706938e-10 + -2370.56661786234 * o[19]) + g.pi * (2.3177363978443e-06 * o[51] + g.pi * (o[2] * (4.1627860840696e-18 + (-1.0234747095929e-11 + -1.40254511313154e-07 * o[10]) * o[20]) + o[23] * (o[19] * (-3.7529669612201e-08 + 85.544255035272 * o[24]) + o[21] * (-345.37469089099 * o[52] + o[21] * (o[16] * (3.5674338142168e-22 + (2.14405218133624e-10 + -0.004032236899028 * o[15]) * o[28]) + g.pi * (-2.60437090913668e-23 * o[27] + g.pi * (0.0044106220917291 * o[53] + g.pi * (-1.14534422144089e-12 * o[54] + (4.5606669011318e-26 + o[18] * (5.3198126736747e-14 + -0.00131362632479764 * o[32])) * o[55] * g.pi)))))))))))) + (1.0232574281828e-07 + o[44]) * tau2)));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3 \"base function for region 2 with 3rd derivatives for sensitivities: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs function and derivatives up to 3rd derivatives\";
//   protected Real pi2;
//   protected Real tau2;
//   protected Real[82] o;
// algorithm
//   assert( p > 611.657, \"IF97 medium function g2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 100000000.0, \"IF97 medium function g2: the input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 100 Mpa\");
//   assert( T >= 273.15, \"IF97 medium function g2: the temperature (= \" + String(T, 0, true, 6) + \" K) is lower than 273.15 K!\");
//   assert( T <= 1073.15, \"IF97 medium function g2: the input temperature (= \" + String(T, 0, true, 6) + \" K) is higher than the limit of 1073.15 K\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := p / 1000000.0;
//   g.tau := 540.0 / T;
//   tau2 := -0.5 + g.tau;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := -0.05032527872793 * o[2];
//   o[4] := -0.057581259083432 + o[3];
//   o[5] := o[4] * tau2;
//   o[6] := -0.045996013696365 + o[5];
//   o[7] := o[6] * tau2;
//   o[8] := -0.017834862292358 + o[7];
//   o[9] := o[8] * tau2;
//   o[10] := o[1] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[10] * o[11] * o[12] * tau2;
//   o[14] := o[1] * o[10] * tau2;
//   o[15] := o[10] * o[11] * tau2;
//   o[16] := o[1] * o[12] * tau2;
//   o[17] := o[1] * o[11] * tau2;
//   o[18] := o[1] * o[10] * o[11];
//   o[19] := o[10] * o[11] * o[12];
//   o[20] := o[1] * o[10];
//   o[21] := g.pi ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[21] * o[22];
//   o[24] := o[10] * o[12] * tau2;
//   o[25] := o[12] ^ 2.0;
//   o[26] := o[11] * o[12] * o[25] * tau2;
//   o[27] := o[10] * o[12];
//   o[28] := o[1] * o[10] * o[11] * tau2;
//   o[29] := o[10] * o[12] * o[25] * tau2;
//   o[30] := o[1] * o[10] * o[25] * tau2;
//   o[31] := o[1] * o[11] * o[12];
//   o[32] := o[1] * o[12];
//   o[33] := g.tau ^ 2.0;
//   o[34] := o[33] ^ 2.0;
//   o[35] := -5.3349095828174e-05 * o[13];
//   o[36] := -0.087594591301146 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -0.007878555448671 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := -0.0003789797503263 + o[39];
//   o[41] := o[40] * tau2;
//   o[42] := -6.6065283340406e-05 + o[41];
//   o[43] := o[42] * tau2;
//   o[44] := -0.244009521375894 * o[13];
//   o[45] := -0.0090203547252888 + o[44];
//   o[46] := o[2] * o[45];
//   o[47] := -0.00019366606343142 + o[46];
//   o[48] := o[1] * o[47];
//   o[49] := 2.6322400370661e-06 + o[48];
//   o[50] := o[49] * tau2;
//   o[51] := 5.78704472622084e-06 * tau2;
//   o[52] := o[21] * g.pi;
//   o[53] := 1.15740894524417e-05 * tau2;
//   o[54] := -0.30195167236758 * o[2];
//   o[55] := -0.172743777250296 + o[54];
//   o[56] := o[55] * tau2;
//   o[57] := -0.09199202739273 + o[56];
//   o[58] := o[57] * tau2;
//   o[59] := o[1] * o[11];
//   o[60] := o[10] * o[11];
//   o[61] := o[11] * o[12] * o[25];
//   o[62] := o[10] * o[12] * o[25];
//   o[63] := o[1] * o[10] * o[25];
//   o[64] := o[11] * o[12] * tau2;
//   o[65] := -1.5097583618379 * o[2];
//   o[66] := -0.345487554500592 + o[65];
//   o[67] := o[66] * tau2;
//   o[68] := o[10] * tau2;
//   o[69] := o[11] * tau2;
//   o[70] := o[1] * o[11] * o[12] * tau2;
//   o[71] := o[1] * o[10] * o[12] * o[25] * tau2;
//   o[72] := o[1] * o[12] * o[25] * tau2;
//   o[73] := o[10] * o[25] * tau2;
//   o[74] := o[11] * o[12];
//   o[75] := o[34] ^ 2.0;
//   o[76] := -0.00192056744981426 * o[13];
//   o[77] := -0.613162139108022 + o[76];
//   o[78] := o[2] * o[77];
//   o[79] := -0.031514221794684 + o[78];
//   o[80] := o[1] * o[79];
//   o[81] := -0.0007579595006526 + o[80];
//   o[82] := o[81] * tau2;
//   g.g := g.pi * (-0.0017731742473213 + o[9] + g.pi * (tau2 * (-3.3032641670203e-05 + (-0.00018948987516315 + o[1] * (-0.0039392777243355 + (-0.043797295650573 + -2.6674547914087e-05 * o[13]) * o[2])) * tau2) + g.pi * (2.0481737692309e-08 + (4.3870667284435e-07 + o[1] * (-3.227767723857e-05 + (-0.0015033924542148 + -0.040668253562649 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (2.2922076337661e-06 * o[14] + g.pi * ((-1.6714766451061e-11 + o[15] * (-0.0021171472321355 + -23.895741934104 * o[16])) * o[2] + g.pi * (-5.905956432427e-18 + o[17] * (-1.2621808899101e-06 + -0.038946842435739 * o[18]) + g.pi * (o[11] * (1.1256211360459e-11 + -8.2311340897998 * o[19]) + g.pi * (1.9809712802088e-08 * o[15] + g.pi * (o[10] * (1.0406965210174e-19 + (-1.0234747095929e-13 + -1.0018179379511e-09 * o[10]) * o[20]) + o[23] * (o[13] * (-8.0882908646985e-11 + 0.10693031879409 * o[24]) + o[21] * (-0.33662250574171 * o[26] + o[21] * (o[27] * (8.9185845355421e-25 + (3.0629316876232e-13 + -4.2002467698208e-06 * o[15]) * o[28]) + g.pi * (-5.9056029685639e-26 * o[24] + g.pi * (3.7826947613457e-06 * o[29] + g.pi * (-1.2768608934681e-15 * o[30] + o[31] * (7.3087610595061e-29 + o[18] * (5.5414715350778e-17 + -9.436970724121e-07 * o[32])) * g.pi)))))))))))) + tau2 * (-7.8847309559367e-10 + (1.2790717852285e-08 + 4.8225372718507e-07 * tau2) * tau2))))) + (-0.00560879118302 + g.tau * (0.07145273881455 + g.tau * (-0.4071049823928 + g.tau * (1.424081971444 + g.tau * (-4.38395111945 + g.tau * (-9.692768600217 + g.tau * (10.08665568018 + (-0.2840863260772 + 0.02126846353307 * g.tau) * g.tau) + log(g.pi))))))) / (o[34] * g.tau);
//   g.gpi := (1.0 + g.pi * (-0.0017731742473213 + o[9] + g.pi * (o[43] + g.pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[1] * (-9.683303171571e-05 + (-0.0045101773626444 + -0.122004760687947 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (1.14610381688305e-05 * o[14] + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.012702883392813 + -143.374451604624 * o[16])) * o[2] + g.pi * (-4.1341695026989e-17 + o[17] * (-8.8352662293707e-06 + -0.272627897050173 * o[18]) + g.pi * (o[11] * (9.0049690883672e-11 + -65.8490727183984 * o[19]) + g.pi * (1.78287415218792e-07 * o[15] + g.pi * (o[10] * (1.0406965210174e-18 + (-1.0234747095929e-12 + -1.0018179379511e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.29412653835176e-09 + 1.71088510070544 * o[24]) + o[21] * (-6.05920510335078 * o[26] + o[21] * (o[27] * (1.78371690710842e-23 + (6.1258633752464e-12 + -8.4004935396416e-05 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[24] + g.pi * (8.32192847496054e-05 * o[29] + g.pi * (-2.93678005497663e-14 * o[30] + o[31] * (1.75410265428146e-27 + o[18] * (1.32995316841867e-15 + -2.26487297378904e-05 * o[32])) * g.pi)))))))))))) + tau2 * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * tau2) * tau2)))))) / g.pi;
//   g.gpipi := (-1.0 + o[21] * (o[43] + g.pi * (1.22890426153854e-07 + o[50] + g.pi * (g.pi * (4.5844152675322e-05 * o[14] + g.pi * ((-5.0144299353183e-10 + o[15] * (-0.063514416964065 + -716.87225802312 * o[16])) * o[2] + g.pi * (-2.48050170161934e-16 + o[17] * (-5.30115973762242e-05 + -1.63576738230104 * o[18]) + g.pi * (o[11] * (6.30347836185704e-10 + -460.943509028789 * o[19]) + g.pi * (1.42629932175034e-06 * o[15] + g.pi * (o[10] * (9.3662686891566e-18 + (-9.2112723863361e-12 + -9.0163614415599e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.94118980752764e-08 + 25.6632765105816 * o[24]) + o[21] * (-103.006486756963 * o[26] + o[21] * (o[27] * (3.389062123506e-22 + (1.16391404129682e-10 + -0.0015960937725319 * o[15]) * o[28]) + g.pi * (-2.48035324679684e-23 * o[24] + g.pi * (0.00174760497974171 * o[29] + g.pi * (-6.46091612094859e-13 * o[30] + o[31] * (4.03443610484737e-26 + o[18] * (3.05889228736295e-14 + -0.000520920783971479 * o[32])) * g.pi)))))))))))) + tau2 * (-9.46167714712404e-09 + (1.5348861422742e-07 + o[51]) * tau2))))) / o[21];
//   g.gpipipi := (2.0 + o[52] * (1.22890426153854e-07 + o[50] + g.pi * (g.pi * (0.000137532458025966 * o[14] + g.pi * ((-2.00577197412732e-09 + o[15] * (-0.25405766785626 + -2867.48903209248 * o[16])) * o[2] + g.pi * (-1.24025085080967e-15 + o[17] * (-0.000265057986881121 + -8.17883691150519 * o[18]) + g.pi * (o[11] * (3.78208701711422e-09 + -2765.66105417273 * o[19]) + g.pi * (9.98409525225235e-06 * o[15] + g.pi * (o[10] * (7.49301495132528e-17 + (-7.36901790906888e-11 + -7.21308915324792e-07 * o[10]) * o[20]) + o[23] * (o[13] * (-2.7176657305387e-07 + 359.285871148142 * o[24]) + o[21] * (-1648.10378811141 * o[26] + o[21] * (o[27] * (6.1003118223108e-21 + (2.09504527433427e-09 + -0.0287296879055743 * o[15]) * o[28]) + g.pi * (-4.71267116891399e-22 * o[24] + g.pi * (0.0349520995948343 * o[29] + g.pi * (-1.3567923853992e-11 * o[30] + o[31] * (8.87575943066421e-25 + o[18] * (6.72956303219848e-13 + -0.0114602572473725 * o[32])) * g.pi)))))))))))) + tau2 * (-1.89233542942481e-08 + (3.0697722845484e-07 + o[53]) * tau2)))) / o[52];
//   g.gtau := (0.0280439559151 + g.tau * (-0.2858109552582 + g.tau * (1.2213149471784 + g.tau * (-2.848163942888 + g.tau * (4.38395111945 + o[33] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * g.tau) * g.tau)))))) / (o[33] * o[34]) + g.pi * (-0.017834862292358 + o[58] + g.pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[1] * (-0.015757110897342 + (-0.306581069554011 + -0.000960283724907132 * o[13]) * o[2])) * tau2 + g.pi * (4.3870667284435e-07 + o[1] * (-9.683303171571e-05 + (-0.0090203547252888 + -1.42338887469272 * o[13]) * o[2]) + g.pi * (-7.8847309559367e-10 + g.pi * (1.60454534363627e-05 * o[20] + g.pi * (o[1] * (-5.0144299353183e-11 + o[15] * (-0.033874355714168 + -836.35096769364 * o[16])) + g.pi * ((-1.38839897890111e-05 + -0.973671060893475 * o[18]) * o[59] + g.pi * (o[14] * (9.0049690883672e-11 + -296.320827232793 * o[19]) + g.pi * (2.57526266427144e-07 * o[60] + g.pi * (o[2] * (4.1627860840696e-19 + (-1.0234747095929e-12 + -1.40254511313154e-08 * o[10]) * o[20]) + o[23] * (o[19] * (-2.34560435076256e-09 + 5.3465159397045 * o[24]) + o[21] * (-19.1874828272775 * o[61] + o[21] * (o[16] * (1.78371690710842e-23 + (1.07202609066812e-11 + -0.000201611844951398 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[27] + g.pi * (0.000200482822351322 * o[62] + g.pi * (-4.97975748452559e-14 * o[63] + (1.90027787547159e-27 + o[18] * (2.21658861403112e-15 + -5.47344301999018e-05 * o[32])) * o[64] * g.pi)))))))))))) + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2))));
//   g.gtautau := (-0.1682637354906 + g.tau * (1.429054776291 + g.tau * (-4.8852597887136 + g.tau * (8.544491828664 + g.tau * (-8.7679022389 + o[33] * (-0.5681726521544 + 0.12761078119842 * g.tau) * g.tau))))) / (o[33] * o[34] * g.tau) + g.pi * (-0.09199202739273 + o[67] + g.pi * (-0.0003789797503263 + o[1] * (-0.047271332692026 + (-1.83948641732407 + -0.0336099303717496 * o[13]) * o[2]) + g.pi * ((-0.00019366606343142 + (-0.045101773626444 + -48.3952217395523 * o[13]) * o[2]) * tau2 + g.pi * (2.558143570457e-08 + 2.89352236311042e-06 * tau2 + g.pi * (9.62727206181762e-05 * o[68] + g.pi * (g.pi * ((-0.000138839897890111 + -23.3681054614434 * o[18]) * o[69] + g.pi * ((6.30347836185704e-10 + -10371.2289531477 * o[19]) * o[20] + g.pi * (3.09031519712573e-06 * o[17] + g.pi * (o[1] * (1.24883582522088e-18 + (-9.2112723863361e-12 + -1.823308647071e-07 * o[10]) * o[20]) + o[23] * ((-6.56769218213518e-08 + 261.979281045521 * o[24]) * o[70] + o[21] * (-1074.49903832754 * o[71] + o[21] * ((3.389062123506e-22 + (3.64488870827161e-10 + -0.00947575671271573 * o[15]) * o[28]) * o[32] + g.pi * (-2.48035324679684e-23 * o[16] + g.pi * (0.0104251067622687 * o[72] + g.pi * (-1.89230784411972e-12 * o[73] + (4.75069468867897e-26 + o[18] * (8.64469559472137e-14 + -0.0031198625213944 * o[32])) * o[74] * g.pi)))))))))) + (-1.00288598706366e-10 + o[15] * (-0.50811533571252 + -28435.9329015838 * o[16])) * tau2))))));
//   g.gtautautau := (1.1778461484342 + g.tau * (-8.574328657746 + g.tau * (24.426298943568 + g.tau * (-34.177967314656 + (26.3037067167 + 0.12761078119842 * o[34]) * g.tau)))) / o[75] + g.pi * (-0.345487554500592 + -6.0390334473516 * o[2] + g.pi * ((-0.094542665384052 + (-9.19743208662033 + -1.14273763263949 * o[13]) * o[2]) * tau2 + g.pi * (-0.00019366606343142 + (-0.180407094505776 + -1597.04231740523 * o[13]) * o[2] + g.pi * (2.89352236311042e-06 + g.pi * (0.000481363603090881 * o[10] + g.pi * (-1.00288598706366e-10 + o[15] * (-7.11361469997528 + -938385.785752264 * o[16]) + g.pi * (o[11] * (-0.001249559081011 + -537.466425613198 * o[18]) + g.pi * ((3.78208701711422e-09 + -352621.784407023 * o[19]) * o[68] + g.pi * (3.3993467168383e-05 * o[59] + g.pi * ((2.49767165044176e-18 + (-7.36901790906888e-11 + -2.1879703764852e-06 * o[10]) * o[20]) * tau2 + o[23] * ((-1.7732768891765e-06 + 12575.005490185 * o[24]) * o[31] + o[21] * (-59097.4471080146 * o[1] * o[10] * o[12] * o[25] + o[21] * (o[12] * (6.1003118223108e-21 + (1.20281327372963e-08 + -0.435884808784923 * o[15]) * o[28]) * tau2 + g.pi * (-4.71267116891399e-22 * o[32] + g.pi * (0.531680444875706 * o[1] * o[12] * o[25] + g.pi * (-7.00153902324298e-11 * o[10] * o[25] + o[1] * o[10] * o[12] * (1.14016672528295e-24 + o[18] * (3.28498432599412e-12 + -0.174712301198087 * o[32])) * g.pi * tau2))))))))))))))));
//   g.gpitau := -0.017834862292358 + o[58] + g.pi * (-6.6065283340406e-05 + o[82] + g.pi * (1.31612001853305e-06 + o[1] * (-0.00029049909514713 + (-0.0270610641758664 + -4.27016662407815 * o[13]) * o[2]) + g.pi * (-3.15389238237468e-09 + g.pi * (8.02272671818135e-05 * o[20] + g.pi * (o[1] * (-3.00865796119098e-10 + o[15] * (-0.203246134285008 + -5018.10580616184 * o[16])) + g.pi * ((-9.71879285230777e-05 + -6.81569742625432 * o[18]) * o[59] + g.pi * (o[14] * (7.20397527069376e-10 + -2370.56661786234 * o[19]) + g.pi * (2.3177363978443e-06 * o[60] + g.pi * (o[2] * (4.1627860840696e-18 + (-1.0234747095929e-11 + -1.40254511313154e-07 * o[10]) * o[20]) + o[23] * (o[19] * (-3.7529669612201e-08 + 85.544255035272 * o[24]) + o[21] * (-345.374690890994 * o[61] + o[21] * (o[16] * (3.56743381421684e-22 + (2.14405218133624e-10 + -0.00403223689902797 * o[15]) * o[28]) + g.pi * (-2.60437090913668e-23 * o[27] + g.pi * (0.00441062209172909 * o[62] + g.pi * (-1.14534422144089e-12 * o[63] + (4.56066690113181e-26 + o[18] * (5.31981267367469e-14 + -0.00131362632479764 * o[32])) * o[64] * g.pi)))))))))))) + (1.0232574281828e-07 + o[51]) * tau2)));
//   g.gpipitau := -6.6065283340406e-05 + o[82] + g.pi * (2.6322400370661e-06 + o[1] * (-0.00058099819029426 + (-0.0541221283517328 + -8.54033324815629 * o[13]) * o[2]) + g.pi * (-9.46167714712404e-09 + g.pi * (0.000320909068727254 * o[20] + g.pi * (o[1] * (-1.50432898059549e-09 + o[15] * (-1.01623067142504 + -25090.5290308092 * o[16])) + g.pi * ((-0.000583127571138466 + -40.8941845575259 * o[18]) * o[59] + g.pi * (o[14] * (5.04278268948563e-09 + -16593.9663250364 * o[19]) + g.pi * (1.85418911827544e-05 * o[60] + g.pi * (o[2] * (3.74650747566264e-17 + (-9.2112723863361e-11 + -1.26229060181839e-06 * o[10]) * o[20]) + o[23] * (o[19] * (-5.62945044183016e-07 + 1283.16382552908 * o[24]) + o[21] * (-5871.36974514691 * o[61] + o[21] * (o[16] * (6.778124247012e-21 + (4.07369914453886e-09 + -0.0766125010815314 * o[15]) * o[28]) + g.pi * (-5.20874181827336e-22 * o[27] + g.pi * (0.0926230639263108 * o[62] + g.pi * (-2.51975728716995e-11 * o[63] + (1.04895338726032e-24 + o[18] * (1.22355691494518e-12 + -0.0302134054703458 * o[32])) * o[64] * g.pi)))))))))))) + (3.0697722845484e-07 + 1.73611341786625e-05 * tau2) * tau2));
//   g.gpitautau := -0.09199202739273 + o[67] + g.pi * (-0.0007579595006526 + o[1] * (-0.094542665384052 + (-3.67897283464813 + -0.0672198607434992 * o[13]) * o[2]) + g.pi * ((-0.00058099819029426 + (-0.135305320879332 + -145.185665218657 * o[13]) * o[2]) * tau2 + g.pi * (1.0232574281828e-07 + o[53] + g.pi * (0.000481363603090881 * o[68] + g.pi * (g.pi * ((-0.000971879285230777 + -163.576738230104 * o[18]) * o[69] + g.pi * ((5.04278268948563e-09 + -82969.831625182 * o[19]) * o[20] + g.pi * (2.78128367741315e-05 * o[17] + g.pi * (o[1] * (1.24883582522088e-17 + (-9.2112723863361e-11 + -1.823308647071e-06 * o[10]) * o[20]) + o[23] * ((-1.05083074914163e-06 + 4191.66849672833 * o[24]) * o[70] + o[21] * (-19340.9826898957 * o[71] + o[21] * ((6.778124247012e-21 + (7.28977741654322e-09 + -0.189515134254314 * o[15]) * o[28]) * o[32] + g.pi * (-5.20874181827336e-22 * o[16] + g.pi * (0.229352348769913 * o[72] + g.pi * (-4.35230804147537e-11 * o[73] + (1.14016672528295e-24 + o[18] * (2.07472694273313e-12 + -0.0748767005134657 * o[32])) * o[74] * g.pi)))))))))) + (-6.01731592238196e-10 + o[15] * (-3.04869201427512 + -170615.597409503 * o[16])) * tau2)))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5 \"base function for region 5: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Modelica.Media.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real[11] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 1000000.0;
//   g.tau := 1000.0 / max(T, 273.16);
//   o[1] := g.tau ^ 2.0;
//   o[2] := -0.004594282089991 * o[1];
//   o[3] := 0.0021774678714571 + o[2];
//   o[4] := o[3] * g.tau;
//   o[5] := o[1] * g.tau;
//   o[6] := o[1] ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[7] * g.tau;
//   o[9] := -7.9449656719138e-06 * o[8];
//   o[10] := g.pi ^ 2.0;
//   o[11] := -0.013782846269973 * o[1];
//   g.g := g.pi * (-0.00012563183589592 + o[4] + g.pi * (-3.9724828359569e-06 * o[8] + 1.2919228289784e-07 * o[5] * g.pi)) + (-0.024805148933466 + g.tau * (0.36901534980333 + g.tau * (-3.1161318213925 + g.tau * (-13.179983674201 + (6.8540841634434 + -0.32961626538917 * g.tau) * g.tau + log(g.pi))))) / o[5];
//   g.gpi := (1.0 + g.pi * (-0.00012563183589592 + o[4] + g.pi * (o[9] + 3.8757684869352e-07 * o[5] * g.pi))) / g.pi;
//   g.gpipi := (-1.0 + o[10] * (o[9] + 7.7515369738704e-07 * o[5] * g.pi)) / o[10];
//   g.gtau := g.pi * (0.0021774678714571 + o[11] + g.pi * (-3.5752345523612e-05 * o[7] + 3.8757684869352e-07 * o[1] * g.pi)) + (0.074415446800398 + g.tau * (-0.73803069960666 + (3.1161318213925 + o[1] * (6.8540841634434 + -0.65923253077834 * g.tau)) * g.tau)) / o[6];
//   g.gtautau := (-0.297661787201592 + g.tau * (2.21409209881998 + (-6.232263642785 + -0.65923253077834 * o[5]) * g.tau)) / (o[6] * g.tau) + g.pi * (-0.027565692539946 * g.tau + g.pi * (-0.000286018764188897 * o[1] * o[6] * g.tau + 7.7515369738704e-07 * g.pi * g.tau));
//   g.gtaupi := 0.0021774678714571 + o[11] + g.pi * (-7.1504691047224e-05 * o[7] + 1.16273054608056e-06 * o[1] * g.pi);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3 \"base function for region 5: g(p,T), including 3rd derivatives\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[16] o \"vector of auxiliary variables\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function g5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 10000000.0, \"IF97 medium function g5: input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 10 Mpa in region 5\");
//   assert( T <= 2273.15, \"IF97 medium function g5: input temperature (= \" + String(T, 0, true, 6) + \" K) is higher than limit of 2273.15K in region 5\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   pi := p / 1000000.0;
//   tau := 1000.0 / T;
//   g.pi := pi;
//   g.tau := tau;
//   o[1] := tau ^ 2.0;
//   o[2] := -0.004594282089991 * o[1];
//   o[3] := 0.0021774678714571 + o[2];
//   o[4] := o[3] * tau;
//   o[5] := o[1] * tau;
//   o[6] := o[1] ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[7] * tau;
//   o[9] := -7.9449656719138e-06 * o[8];
//   o[10] := pi ^ 2.0;
//   o[11] := o[10] * pi;
//   o[12] := -0.013782846269973 * o[1];
//   o[13] := -0.027565692539946 * tau;
//   o[14] := o[1] * o[6] * tau;
//   o[15] := o[1] * o[6];
//   o[16] := -7.15046910472242e-05 * o[7];
//   g.g := pi * (-0.00012563183589592 + o[4] + pi * (-3.9724828359569e-06 * o[8] + 1.2919228289784e-07 * o[5] * pi)) + (-0.024805148933466 + tau * (0.36901534980333 + tau * (-3.1161318213925 + tau * (-13.179983674201 + (6.8540841634434 + -0.32961626538917 * tau) * tau + log(pi))))) / o[5];
//   g.gpi := (1.0 + pi * (-0.00012563183589592 + o[4] + pi * (o[9] + 3.8757684869352e-07 * o[5] * pi))) / pi;
//   g.gpipi := (-1.0 + o[10] * (o[9] + 7.7515369738704e-07 * o[5] * pi)) / o[10];
//   g.gpipipi := (2.0 + 7.7515369738704e-07 * o[11] * o[5]) / o[11];
//   g.gtau := pi * (0.0021774678714571 + o[12] + pi * (-3.57523455236121e-05 * o[7] + 3.8757684869352e-07 * o[1] * pi)) + (0.074415446800398 + tau * (-0.73803069960666 + (3.1161318213925 + o[1] * (6.8540841634434 + -0.65923253077834 * tau)) * tau)) / o[6];
//   g.gtautau := (-0.297661787201592 + tau * (2.21409209881998 + (-6.232263642785 + -0.65923253077834 * o[5]) * tau)) / (o[6] * tau) + pi * (o[13] + pi * (-0.000286018764188897 * o[14] + 7.7515369738704e-07 * pi * tau));
//   g.gtautautau := pi * (-0.027565692539946 + (-0.00200213134932228 * o[15] + 7.7515369738704e-07 * pi) * pi) + (1.48830893600796 + tau * (-8.85636839527992 + 18.696790928355 * tau)) / o[15];
//   g.gpitau := 0.0021774678714571 + o[12] + pi * (o[16] + 1.16273054608056e-06 * o[1] * pi);
//   g.gpipitau := o[16] + 2.32546109216112e-06 * o[1] * pi;
//   g.gpitautau := o[13] + pi * (-0.000572037528377794 * o[14] + 2.32546109216112e-06 * pi * tau);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat \"region 4 saturation temperature as a function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real t_sat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[20] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * max(min(p, 22064000.0), 611.657);
//   o[1] := pi ^ 0.25;
//   o[2] := -3232555.0322333 * o[1];
//   o[3] := pi ^ 0.5;
//   o[4] := -724213.16703206 * o[3];
//   o[5] := 405113.40542057 + o[2] + o[4];
//   o[6] := -17.073846940092 * o[1];
//   o[7] := 14.91510861353 + o[3] + o[6];
//   o[8] := -4.0 * o[5] * o[7];
//   o[9] := 12020.82470247 * o[1];
//   o[10] := 1167.0521452767 * o[3];
//   o[11] := -4823.2657361591 + o[10] + o[9];
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[12] + o[8];
//   o[14] := o[13] ^ 0.5;
//   o[15] := -o[14];
//   o[16] := -12020.82470247 * o[1];
//   o[17] := -1167.0521452767 * o[3];
//   o[18] := 4823.2657361591 + o[15] + o[16] + o[17];
//   o[19] := 1.0 / o[18];
//   o[20] := 2.0 * o[19] * o[5];
//   t_sat := 325.08767422399 + 0.5 * (o[20] - (0.95422230271396 + -5201.40278758384 * o[19] * o[5] + (650.17534844798 + o[20]) ^ 2.0) ^ 0.5);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat_der \"derivative function for tsat\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real der_p(unit = \"Pa/s\") \"pressure derivatrive\";
//   output Real der_tsat(unit = \"K/s\") \"temperature derivative\";
//   protected Real dtp;
// algorithm
//   dtp := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp(p);
//   der_tsat := dtp * der_p;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat_der;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13 \"density at the boundary between regions 1 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real p2 \"auxiliary variable\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   p2 := 7.1 + -6.04960677555959e-08 * p;
//   o[1] := p2 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   d := 57.4756752485113 / (0.0737412153522555 + p2 * (0.00145092247736023 + p2 * (0.000102697173772229 + p2 * (1.14683182476084e-05 + p2 * (1.99080616601101e-06 + o[1] * p2 * (1.13217858826367e-08 + o[2] * o[3] * p2 * (1.35549330686006e-17 + o[1] * (-3.11228834832975e-19 + o[1] * o[2] * (-7.02987180039442e-22 + p2 * (3.29199117056433e-22 + (-5.17859076694812e-23 + 2.73712834080283e-24 * p2) * p2))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23 \"density at the boundary between regions 2 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0);
//   protected Real[13] o \"vector of auxiliary variables\";
//   protected Real taug \"auxiliary variable\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real gpi23 \"derivative of g w.r.t. pi on the boundary between regions 2 and 3\";
// algorithm
//   pi := p / 1000000.0;
//   T := 572.54459862746 + 31.3220101646784 * (-13.91883977887 + pi) ^ 0.5;
//   o[1] := (-13.91883977887 + pi) ^ 0.5;
//   taug := -0.5 + 540.0 / (572.54459862746 + 31.3220101646784 * o[1]);
//   o[2] := taug ^ 2.0;
//   o[3] := o[2] * taug;
//   o[4] := o[2] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[5] ^ 2.0;
//   o[7] := o[4] * o[5] * o[6] * taug;
//   o[8] := o[4] * o[5] * taug;
//   o[9] := o[2] * o[4] * o[5];
//   o[10] := pi ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[4] * o[6] * taug;
//   o[13] := o[6] ^ 2.0;
//   gpi23 := (1.0 + pi * (-0.0017731742473213 + taug * (-0.017834862292358 + taug * (-0.045996013696365 + (-0.057581259083432 + -0.05032527872793 * o[3]) * taug)) + pi * (taug * (-6.6065283340406e-05 + (-0.0003789797503263 + o[2] * (-0.007878555448671 + o[3] * (-0.087594591301146 + -5.3349095828174e-05 * o[7]))) * taug) + pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[2] * (-9.683303171571e-05 + o[3] * (-0.0045101773626444 + -0.122004760687947 * o[7]))) * taug + pi * (taug * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * taug) * taug) + pi * (1.14610381688305e-05 * o[2] * o[4] * taug + pi * (o[3] * (-1.00288598706366e-10 + o[8] * (-0.012702883392813 + -143.374451604624 * o[2] * o[6] * taug)) + pi * (-4.1341695026989e-17 + o[2] * o[5] * (-8.8352662293707e-06 + -0.272627897050173 * o[9]) * taug + pi * (o[5] * (9.0049690883672e-11 + -65.8490727183984 * o[4] * o[5] * o[6]) + pi * (1.78287415218792e-07 * o[8] + pi * (o[4] * (1.0406965210174e-18 + o[2] * (-1.0234747095929e-12 + -1.0018179379511e-08 * o[4]) * o[4]) + o[10] * o[11] * ((-1.29412653835176e-09 + 1.71088510070544 * o[12]) * o[7] + o[10] * (-6.05920510335078 * o[13] * o[5] * o[6] * taug + o[10] * (o[4] * o[6] * (1.78371690710842e-23 + o[2] * o[4] * o[5] * (6.1258633752464e-12 + -8.4004935396416e-05 * o[8]) * taug) + pi * (-1.24017662339842e-24 * o[12] + pi * (8.32192847496054e-05 * o[13] * o[4] * o[6] * taug + pi * (o[2] * o[5] * o[6] * (1.75410265428146e-27 + (1.32995316841867e-15 + -2.26487297378904e-05 * o[2] * o[6]) * o[9]) * pi + -2.93678005497663e-14 * o[13] * o[2] * o[4] * taug))))))))))))))))) / pi;
//   d := p / (gpi23 * pi * T * 461.526);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3 \"inverse iteration in region 3: (d) = f(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   input Real delp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"iteration converged if (p-pre(p) < delp)\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   output Integer error = 0 \"error flag: iteration failed if different from 0\";
//   protected Real dguess(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"guess density\";
//   protected Integer i = 0 \"loop counter\";
//   protected Real dp \"pressure difference\";
//   protected Real deld(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density step\";
//   protected Modelica.Media.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Modelica.Media.Common.NewtonDerivatives_pT nDerivs \"derivatives needed in Newton iteration\";
//   protected Boolean found = false \"flag for iteration success\";
//   protected Boolean supercritical \"flag, true for supercritical states\";
//   protected Boolean liquid \"flag, true for liquid states\";
//   protected Real dmin(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"lower density limit\";
//   protected Real dmax(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"upper density limit\";
//   protected Real Tmax(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"maximum temperature\";
// algorithm
//   assert( p >= 16529200.0, \"BaseIF97.dofpt3: function called outside of region 3! p too low
// p = \" + String(p, 0, true, 6) + \" Pa < \" + String(16529200.0, 0, true, 6) + \" Pa\");
//   assert( T >= 623.15, \"BaseIF97.dofpt3: function called outside of region 3! T too low
// T = \" + String(T, 0, true, 6) + \" K < \" + String(623.15, 0, true, 6) + \" K\");
//   assert( p >= ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT(T), \"BaseIF97.dofpt3: function called outside of region 3! T too high
// p = \" + String(p, 0, true, 6) + \" Pa, T = \" + String(T, 0, true, 6) + \" K\");
//   supercritical := p > 22064000.0;
//   dmax := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13(p);
//   dmin := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23(p);
//   Tmax := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp(p);
//   if supercritical then
//     dguess := dmin + (dmax - dmin) * (-623.15 + T) / (623.15 - Tmax);
//   else
//     liquid := T < ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//     if liquid then
//       dguess := 0.5 * (ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(p) + dmax);
//     else
//       dguess := 0.5 * (ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(p) + dmin);
//     end if;
//   end if;
//   while i < 50 and not found loop
//     d := dguess;
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     nDerivs := Modelica.Media.Common.Helmholtz_pT(f);
//     dp := nDerivs.p - p;
//     if abs(dp / p) <= delp then
//       found := true;
//     end if;
//     deld := dp / nDerivs.pd;
//     d := d - deld;
//     if d > dmin and d < dmax then
//       dguess := d;
//     else
//       if d > dmax then
//         dguess := dmax + -3.16227766016838e-08;
//       else
//         dguess := 3.16227766016838e-08 + dmin;
//       end if;
//     end if;
//     i := 1 + i;
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function dofpt3: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT \"boundary function for region boundary between regions 2 and 3 (input temperature)\"
//   input Real t(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   protected constant Real[5] n = {348.05185628969, -1.1671859879975, 0.0010192970039326, 572.54459862746, 13.91883977887};
// algorithm
//   p := 348051856.28969 + 1000000.0 * t * (-1.1671859879975 + 0.0010192970039326 * t);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp \"boundary function for region boundary between regions 2 and 3 (input pressure)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real t(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected constant Real[5] n = {348.05185628969, -1.1671859879975, 0.0010192970039326, 572.54459862746, 13.91883977887};
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function boundary23ofp called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   t := 572.54459862746 + (-13655.3327687308 + pi / 0.0010192970039326) ^ 0.5;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT \"return the current region (valid values: 1,2,3,5) in IF97, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   input Integer mode = 0 \"mode: 0 means check, otherwise assume region=mode\";
//   output Integer region \"region (valid values: 1,2,3,5) in IF97, region 4 is impossible!\";
// algorithm
//   if mode <> 0 then
//     region := mode;
//   else
//     if p < 16529200.0 then
//       if T > 1073.15 then
//         region := 5;
//       elseif T > ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p) then
//         region := 2;
//       else
//         region := 1;
//       end if;
//     else
//       if T < 623.15 then
//         region := 1;
//       elseif T < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp(p) then
//         region := 3;
//       else
//         region := 2;
//       end if;
//     end if;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b \"explicit approximation of liquid density on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dl(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"liquid density\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   if p < 22064000.0 then
//     x := acos(p / 22064000.0);
//     dl := 322.0 + 322.0 * x * (1.90322407909482 + x * (-2.53148618024011 + x * (-8.19144932384355 + x * (94.3419611677839 + x * (-369.367683362338 + x * (796.662791059829 + x * (-994.53853836007 + x * (673.25811770216 + (-191.430773364052 + 0.00052536560808895 * x) * x))))))));
//   else
//     dl := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b \"explicit approximation of vapour density on the boundary between regions 4 and 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dv(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"vapour density\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   if p < 22064000.0 then
//     x := acos(p / 22064000.0);
//     dv := 322.0 + 322.0 * x * (-1.84638508033626 + x * (-1.14478727188785 + x * (59.1870220307656 + x * (-403.539143181161 + x * (1437.20072453324 + x * (-3015.85354030752 + x * (3740.57903486701 + x * (-2537.3758172539 + (725.876197580378 + -0.00111511116583323 * x) * x))))))));
//   else
//     dv := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtaupi;
//   output GibbsDerivs res;
// end ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gpipipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtautautau;
//   input Real(unit=\"1\") gpitau;
//   input Real(unit=\"1\") gpitautau;
//   input Real(unit=\"1\") gpipitau;
//   output GibbsDerivs3rd res;
// end ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") fdeltatau;
//   output HelmholtzDerivs res;
// end ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") fdeltadeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") ftautautau;
//   input Real(unit=\"1\") fdeltatau;
//   input Real(unit=\"1\") fdeltadeltatau;
//   input Real(unit=\"1\") fdeltatautau;
//   output HelmholtzDerivs3rd res;
// end ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT\"
//   input Real(min=1e-09, max=100000.0, nominal=998.0, quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\") d;
//   input Real(min=-1000000.0, max=100000000.0, nominal=1000000.0, start=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(min=-100000000.0, max=100000000.0, nominal=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(min=-1000000.0, max=1000000.0, nominal=1000.0, quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(min=1e-09, max=1e+60, nominal=1000.0, quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(unit=\"kg/(m3.K)\") ddTp;
//   input Real(unit=\"s2/m2\") ddpT;
//   input Real(unit=\"J.m.s2/kg\") dupT;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") duTp;
//   input Real(quantity=\"Mass fraction\", unit=\"1\") x;
//   output ThermoProperties_pT res;
// end ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless derivatives of the Gibbs funciton\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Real vt;
//   protected Real vp;
// algorithm
//   pro.d := max(g.p, 611.657) / (g.gpi * g.pi * g.T * g.R);
//   pro.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   pro.h := g.R * g.T * g.tau * g.gtau;
//   pro.s := g.R * (g.tau * g.gtau - g.g);
//   pro.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * g.R / max(g.p, 611.657);
//   vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / max(g.p, 611.657) ^ 2.0;
//   pro.ddpT := (-pro.d ^ 2.0) * vp;
//   pro.ddTp := (-pro.d ^ 2.0) * vt;
//   pro.duTp := pro.cp - g.p * vt;
//   pro.dupT := (-g.T) * vt - g.p * vp;
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Real pd \"derivative of pressure wrt. density\";
//   protected Real pt \"derivative of pressure wrt. temperature\";
//   protected Real pv \"derivative of pressure wrt. specific volume\";
//   protected Real cv \"Heat capacity at constant volume\";
// algorithm
//   pro.d := f.d;
//   pro.s := f.R * (f.tau * f.ftau - f.f);
//   pro.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   pro.u := f.R * f.T * f.tau * f.ftau;
//   pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   pv := (-f.d ^ -2.0) * pd;
//   pro.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   pro.ddTp := (-pt) / pd;
//   pro.ddpT := 1.0 / pd;
//   pro.dupT := (f.d - f.T * pt) / (f.d ^ 2.0 * pd);
//   pro.duTp := ((-cv) * f.d ^ 2.0 * pd + pt * f.d - f.T * pt ^ 2.0) / (f.d ^ 2.0 * pd);
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   output Real H(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
// algorithm
//   pro := ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT(p, T, mode);
//   H := pro.h;
// end ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT_der
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"Pression\";
//   input Real T_der \"Température\";
//   output Real H \"specific enthalpy\";
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
//   protected Real rho2;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   R := 461.526;
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   elseif region == 3 then
//     (rho, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-07);
//     rho2 := rho ^ 2.0;
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(rho, T);
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     cv := R * (-f.tau ^ 2.0) * f.ftautau;
//     H := (((-rho) * pd + T * pt) * p_der + (rho2 * pd * cv + T * pt * p) * T_der) / (rho2 * pd);
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   else
//     assert( false, \"Water_pT_der: error in region computation of IF97 steam tables(p = \" + String(p, 0, true, 6) + \", T = \" + String(T, 0, true, 6) + \", region = \" + String(region, 0, true) + \")\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT_der;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   elseif region == 3 then
//     (d, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT(f);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   else
//     assert( false, \"Water_PT: Incorrect region number\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT_der
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"Pression\";
//   input Real T_der \"Température\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro_der;
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real p_aux(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   protected Real T_aux(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cpt \"derivative of cp w.r.t. temperature\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cvt \"derivative of cv w.r.t. temperature\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real ptt \"2nd derivative of pressure wrt temperature\";
//   protected Real pdd \"2nd derivative of pressure wrt density\";
//   protected Real ptd \"mixed derivative of pressure w.r.t. density and temperature\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected Real vp \"derivative of specific volume w.r.t. pressure\";
//   protected Real vtt \"2nd derivative of specific volume w.r.t. temperature\";
//   protected Real vpp \"2nd derivative of specific volume w.r.t. pressure\";
//   protected Real vtp \"mixed derivative of specific volume w.r.t. pressure and temperature\";
//   protected Real x \"dryness fraction\";
//   protected Real dpT \"dp/dT derivative of saturation curve\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
//   protected Real vp3 \"vp^3\";
//   protected Real ivp3 \"1/vp3\";
//   protected Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0);
//   protected Real rho2;
//   protected Real quotient;
//   protected Real quotient2;
//   protected Real pd2;
//   protected Real pd3;
//   protected Real pt2;
//   protected Real pt3;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   R := 461.526;
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, T);
//     x := 0.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, T);
//     x := 1.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   elseif region == 3 then
//     (rho, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-07);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(rho, T);
//     rho2 := rho ^ 2.0;
//     h := R * T * (f.tau * f.ftau + f.delta * f.fdelta);
//     s := R * (f.tau * f.ftau - f.f);
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pd2 := pd ^ 2.0;
//     pd3 := pd * pd2;
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     pt2 := pt ^ 2.0;
//     pt3 := pt ^ 3.0;
//     cv := R * (-f.tau ^ 2.0) * f.ftautau;
//     x := 0.0;
//     pdd := (2.0 * f.fdelta + 4.0 * f.delta * f.fdeltadelta + f.delta ^ 2.0 * f.fdeltadeltadelta) * R * T * f.delta / rho;
//     ptt := f.fdeltatautau * R * rho * f.delta * f.tau ^ 2.0 / T;
//     ptd := R * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta + -2.0 * f.tau * f.fdeltatau - f.delta * f.tau * f.fdeltadeltatau);
//     cvt := (2.0 * f.ftautau + f.tau * f.ftautautau) * R * f.tau ^ 2.0 / T;
//     cpt := (cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2 - pt * ptd) / pd;
//     pro_der.x := 0.0;
//     quotient := 1.0 / (pd * rho2);
//     quotient2 := quotient / (pd2 * rho);
//     pro_der.duTp := quotient2 * (((-rho) * pd2 * T * ptt + (-ptd) * rho * pd * p + 2.0 * rho * pd * pt * T * ptd + (-rho) * pd2 * pt + 2.0 * pt * pd * p + -2.0 * pd * pt2 * T + pt * pdd * rho * p - pdd * rho * pt2 * T) * p_der + (rho2 * rho * pd3 * cvt + 3.0 * rho * pd2 * pt * T * ptt + 2.0 * ptd * rho * pd * pt * p + -3.0 * ptd * rho * pd * pt2 * T + rho * pd2 * (pt2 - ptt * p) + -2.0 * pt2 * pd * p + 2.0 * T * pt3 * pd + T * pt3 * pdd * rho - pt2 * pdd * rho * p) * T_der);
//     pro_der.dupT := quotient2 * ((rho * (pd2 - pd * T * ptd) + -2.0 * pd * p + 2.0 * pd * T * pt + pdd * rho * (T * pt - p)) * p_der - (rho * pd2 * T * ptt + ptd * rho * pd * p + -2.0 * rho * pd * pt * T * ptd + rho * pd2 * pt + -2.0 * pt * pd * p + 2.0 * pd * pt2 * T + pdd * rho * pt2 * T - pt * pdd * rho * p) * T_der);
//     pro_der.ddpT := ((-pdd) * p_der + (pt * pdd - ptd * pd) * T_der) / pd3;
//     pro_der.ddTp := ((pt * pdd - ptd * pd) * p_der + ((-ptt) * pd2 + 2.0 * pt * ptd * pd + (-pt2) * pdd) * T_der) / pd3;
//     pro_der.cp := quotient2 * ((-T) * (rho * pd2 * ptt + -2.0 * rho * pd * pt * ptd + 2.0 * pd * pt2 + pdd * rho * pt ^ 2.0) * p_der + (rho2 * rho * pd3 * cvt + 3.0 * rho * pd2 * pt * T * ptt + rho * pd2 * pt2 + -3.0 * ptd * rho * pd * pt2 * T + 2.0 * T * pt3 * pd + T * pt3 * pdd * rho) * T_der);
//     pro_der.s := quotient * ((-pt) * p_der + (cv * rho2 * pd / T + pt2) * T_der);
//     pro_der.u := quotient * ((rho * pd + (-T) * pt) * p_der + (cv * rho2 * pd + pt2 * T - pt * p) * T_der);
//     pro_der.h := quotient * (((-rho) * pd + T * pt) * p_der + (rho2 * pd * cv + T * pt ^ 2.0) * T_der);
//     pro_der.d := (p_der - pt * T_der) / pd;
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3(p, T);
//     x := 1.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   else
//     assert( false, \"Water_pT_der: error in region computation of IF97 steam tables(p = \" + String(p, 0, true, 6) + \", T = \" + String(T, 0, true, 6) + \", region = \" + String(region, 0, true) + \")\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT_der;
// 
// class ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution
//   parameter Real refP.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Fixed fluid pressure\";
//   Real refP.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refP.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refP.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refP.C1.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean refP.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean refP.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real refP.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refP.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refP.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refP.C2.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean refP.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean refP.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real refP.IPressure.signal;
//   parameter Real constante.k = 200000.0 \"Valeur de la sortie\";
//   output Real constante.y.signal;
//   parameter Real pump.VRot(quantity = \"Rotation velocity\", unit = \"1/min\") = 1400.0 \"Rotational speed\";
//   parameter Real pump.VRotn(quantity = \"Rotation velocity\", unit = \"1/min\") = 1400.0 \"Nominal rotational speed\";
//   parameter Real pump.rm = 0.85 \"Product of the pump mechanical and electrical efficiencies\";
//   parameter Boolean pump.adiabatic_compression = false \"true: adiabatic compression - false: non adiabatic compression\";
//   parameter Real pump.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1000.0 \"Fluid density\";
//   parameter Real pump.a1 = -88.67 \"x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)\";
//   parameter Real pump.a2 = 0.0 \"x coef. of the pump characteristics hn = f(vol_flow) (s/m2)\";
//   parameter Real pump.a3 = 43.15 \"Constant coef. of the pump characteristics hn = f(vol_flow) (m)\";
//   parameter Real pump.b1 = -3.7751 \"x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)\";
//   parameter Real pump.b2 = 3.61 \"x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)\";
//   parameter Real pump.b3 = -0.0075464 \"Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)\";
//   protected constant Real pump.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.80665 \"Gravity constant\";
//   protected parameter Real pump.eps = 1e-06 \"Small number\";
//   protected parameter Real pump.rhmin = 0.05 \"Minimum efficiency to avoid zero crossings\";
//   Real pump.rh \"Hydraulic efficiency\";
//   Real pump.hn(quantity = \"Length\", unit = \"m\", start = 10.0) \"Pump head\";
//   Real pump.R \"Ratio VRot/VRotn (s.u.)\";
//   Real pump.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real pump.Qv(quantity = \"VolumeFlowRate\", unit = \"m3/s\", start = 0.5) \"Volumetric flow\";
//   Real pump.Wh(quantity = \"Power\", unit = \"W\") \"Hydraulic power\";
//   Real pump.Wm(quantity = \"Power\", unit = \"W\") \"Motor power\";
//   Real pump.deltaP(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure difference between the outlet and the inlet\";
//   Real pump.h1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid specific enthalpy at the inlet\";
//   Real pump.h2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid specific enthalpy at the outlet\";
//   Real pump.deltaH(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy variation between the outlet and the inlet\";
//   Real pump.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real pump.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real pump.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real pump.C1.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean pump.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean pump.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real pump.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real pump.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real pump.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real pump.C2.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean pump.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean pump.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean pump.commandePompe.signal;
//   input Real pump.VRotation.signal;
//   Real loopBreakerQ.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerQ.Ce.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerQ.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerQ.Ce.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean loopBreakerQ.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean loopBreakerQ.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real loopBreakerQ.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerQ.Cs.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerQ.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerQ.Cs.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean loopBreakerQ.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean loopBreakerQ.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real loopBreakerH.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerH.Ce.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerH.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerH.Ce.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean loopBreakerH.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean loopBreakerH.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real loopBreakerH.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerH.Cs.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerH.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerH.Cs.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean loopBreakerH.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean loopBreakerH.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real refT.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 320.0 \"Fixed fluid temperature\";
//   Real refT.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refT.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refT.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refT.C1.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean refT.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean refT.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real refT.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refT.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refT.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refT.C2.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean refT.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean refT.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real refT.ITemperature.signal;
//   parameter Real lumpedStraightPipe.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real lumpedStraightPipe.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1000.0 \"Fluid density\";
//   protected parameter Real lumpedStraightPipe.eps = 0.001 \"Small number for pressure loss equation\";
//   Real lumpedStraightPipe.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real lumpedStraightPipe.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real lumpedStraightPipe.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real lumpedStraightPipe.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real lumpedStraightPipe.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real lumpedStraightPipe.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real lumpedStraightPipe.C1.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean lumpedStraightPipe.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean lumpedStraightPipe.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real lumpedStraightPipe.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real lumpedStraightPipe.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real lumpedStraightPipe.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real lumpedStraightPipe.C2.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean lumpedStraightPipe.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean lumpedStraightPipe.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real loopBreakerXh20_1.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerXh20_1.Ce.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerXh20_1.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerXh20_1.Ce.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean loopBreakerXh20_1.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean loopBreakerXh20_1.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real loopBreakerXh20_1.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real loopBreakerXh20_1.Cs.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real loopBreakerXh20_1.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real loopBreakerXh20_1.Cs.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean loopBreakerXh20_1.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean loopBreakerXh20_1.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real refXh2o.Xh2o0 = 0.5 \"Fixed Xh2o\";
//   Real refXh2o.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refXh2o.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refXh2o.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refXh2o.C1.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   input Boolean refXh2o.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean refXh2o.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real refXh2o.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real refXh2o.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real refXh2o.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real refXh2o.C2.Xh2o \"H20 mass fraction of the solution in the control volume\";
//   output Boolean refXh2o.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean refXh2o.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real refXh2o.IXh2o.signal;
// equation
//   refP.C1.P = refP.C2.P;
//   refP.C1.T = refP.C2.T;
//   refP.C1.Q = refP.C2.Q;
//   refP.C1.Xh2o = refP.C2.Xh2o;
//   refP.C1.P = refP.IPressure.signal;
//   constante.y.signal = constante.k;
//   pump.commandePompe.signal = true;
//   pump.VRotation.signal = pump.VRot;
//   pump.deltaP = pump.C2.P - pump.C1.P;
//   pump.deltaH = pump.h2 - pump.h1;
//   pump.deltaP = 9.80665 * pump.rho * pump.hn;
//   pump.deltaH = 9.80665 * pump.hn / pump.rh;
//   pump.C1.Xh2o = pump.C2.Xh2o;
//   pump.C1.Q = pump.C2.Q;
//   pump.Q = pump.C1.Q;
//   pump.Q = pump.Qv * pump.rho;
//   pump.R = if pump.commandePompe.signal then pump.VRotation.signal / pump.VRotn else 0.0;
//   pump.hn = pump.a1 * pump.Qv * abs(pump.Qv) + pump.a2 * pump.Qv * pump.R + pump.a3 * pump.R ^ 2.0;
//   pump.rh = max(if noEvent(abs(pump.R) > pump.eps) then pump.b1 * pump.Qv ^ 2.0 / pump.R ^ 2.0 + pump.b2 * pump.Qv / pump.R + pump.b3 else pump.b3, pump.rhmin);
//   pump.Wm = pump.Q * pump.deltaH / pump.rm;
//   pump.Wh = pump.Qv * pump.deltaP / pump.rh;
//   pump.h1 = ThermoSysPro.Properties.WaterSolution.SpecificEnthalpy_TX(pump.C1.T, pump.C1.Xh2o);
//   pump.h2 = ThermoSysPro.Properties.WaterSolution.SpecificEnthalpy_TX(pump.C2.T, pump.C2.Xh2o);
//   loopBreakerQ.Cs.P = loopBreakerQ.Ce.P;
//   loopBreakerQ.Cs.T = loopBreakerQ.Ce.T;
//   loopBreakerQ.Cs.Xh2o = loopBreakerQ.Ce.Xh2o;
//   loopBreakerH.Cs.P = loopBreakerH.Ce.P;
//   loopBreakerH.Cs.Q = loopBreakerH.Ce.Q;
//   loopBreakerH.Cs.Xh2o = loopBreakerH.Ce.Xh2o;
//   refT.ITemperature.signal = refT.T0;
//   refT.C1.P = refT.C2.P;
//   refT.C1.T = refT.C2.T;
//   refT.C1.Q = refT.C2.Q;
//   refT.C1.Xh2o = refT.C2.Xh2o;
//   refT.C1.T = refT.ITemperature.signal;
//   lumpedStraightPipe.C1.P - lumpedStraightPipe.C2.P = lumpedStraightPipe.deltaPf;
//   lumpedStraightPipe.C1.T = lumpedStraightPipe.C2.T;
//   lumpedStraightPipe.C1.Q = lumpedStraightPipe.C2.Q;
//   lumpedStraightPipe.C2.Xh2o = lumpedStraightPipe.C1.Xh2o;
//   lumpedStraightPipe.Q = lumpedStraightPipe.C1.Q;
//   lumpedStraightPipe.T = lumpedStraightPipe.C1.T;
//   lumpedStraightPipe.deltaPf = lumpedStraightPipe.K * ThermoSysPro.Functions.ThermoSquare(lumpedStraightPipe.Q, lumpedStraightPipe.eps) / lumpedStraightPipe.rho;
//   loopBreakerXh20_1.Cs.Q = loopBreakerXh20_1.Ce.Q;
//   loopBreakerXh20_1.Cs.T = loopBreakerXh20_1.Ce.T;
//   loopBreakerXh20_1.Cs.P = loopBreakerXh20_1.Ce.P;
//   refXh2o.IXh2o.signal = refXh2o.Xh2o0;
//   refXh2o.C1.P = refXh2o.C2.P;
//   refXh2o.C1.T = refXh2o.C2.T;
//   refXh2o.C1.Q = refXh2o.C2.Q;
//   refXh2o.C1.Xh2o = refXh2o.C2.Xh2o;
//   refXh2o.C1.Xh2o = refXh2o.IXh2o.signal;
//   loopBreakerH.Ce.P = loopBreakerQ.Cs.P;
//   loopBreakerH.Ce.T = loopBreakerQ.Cs.T;
//   loopBreakerH.Ce.Q = loopBreakerQ.Cs.Q;
//   loopBreakerH.Ce.Xh2o = loopBreakerQ.Cs.Xh2o;
//   loopBreakerH.Ce.a = loopBreakerQ.Cs.a;
//   loopBreakerH.Ce.b = loopBreakerQ.Cs.b;
//   refP.C2.P = refT.C1.P;
//   refP.C2.T = refT.C1.T;
//   refP.C2.Q = refT.C1.Q;
//   refP.C2.Xh2o = refT.C1.Xh2o;
//   refP.C2.a = refT.C1.a;
//   refP.C2.b = refT.C1.b;
//   constante.y.signal = refP.IPressure.signal;
//   loopBreakerQ.Ce.P = pump.C2.P;
//   loopBreakerQ.Ce.T = pump.C2.T;
//   loopBreakerQ.Ce.Q = pump.C2.Q;
//   loopBreakerQ.Ce.Xh2o = pump.C2.Xh2o;
//   loopBreakerQ.Ce.a = pump.C2.a;
//   loopBreakerQ.Ce.b = pump.C2.b;
//   loopBreakerH.Cs.P = loopBreakerXh20_1.Ce.P;
//   loopBreakerH.Cs.T = loopBreakerXh20_1.Ce.T;
//   loopBreakerH.Cs.Q = loopBreakerXh20_1.Ce.Q;
//   loopBreakerH.Cs.Xh2o = loopBreakerXh20_1.Ce.Xh2o;
//   loopBreakerH.Cs.a = loopBreakerXh20_1.Ce.a;
//   loopBreakerH.Cs.b = loopBreakerXh20_1.Ce.b;
//   refT.C2.P = refXh2o.C1.P;
//   refT.C2.T = refXh2o.C1.T;
//   refT.C2.Q = refXh2o.C1.Q;
//   refT.C2.Xh2o = refXh2o.C1.Xh2o;
//   refT.C2.a = refXh2o.C1.a;
//   refT.C2.b = refXh2o.C1.b;
//   pump.C1.P = refXh2o.C2.P;
//   pump.C1.T = refXh2o.C2.T;
//   pump.C1.Q = refXh2o.C2.Q;
//   pump.C1.Xh2o = refXh2o.C2.Xh2o;
//   pump.C1.a = refXh2o.C2.a;
//   pump.C1.b = refXh2o.C2.b;
//   loopBreakerXh20_1.Cs.P = lumpedStraightPipe.C1.P;
//   loopBreakerXh20_1.Cs.T = lumpedStraightPipe.C1.T;
//   loopBreakerXh20_1.Cs.Q = lumpedStraightPipe.C1.Q;
//   loopBreakerXh20_1.Cs.Xh2o = lumpedStraightPipe.C1.Xh2o;
//   loopBreakerXh20_1.Cs.a = lumpedStraightPipe.C1.a;
//   loopBreakerXh20_1.Cs.b = lumpedStraightPipe.C1.b;
//   lumpedStraightPipe.C2.P = refP.C1.P;
//   lumpedStraightPipe.C2.T = refP.C1.T;
//   lumpedStraightPipe.C2.Q = refP.C1.Q;
//   lumpedStraightPipe.C2.Xh2o = refP.C1.Xh2o;
//   lumpedStraightPipe.C2.a = refP.C1.a;
//   lumpedStraightPipe.C2.b = refP.C1.b;
// end ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution;
// "
// "[Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// "
// "Check of ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution completed successfully.
// 
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-50:25:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:52:3-100:26:writable] Warning: Connector ThermoSysPro.WaterSolution.Connectors.WaterSolutionOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// 
// Class ThermoSysPro.Examples.SimpleExamples.TestCentrifugalPumpWaterSolution has 116 equation(s) and 116 variable(s).
// 102 of these are trivial equation(s).
// "
// ""
// endResult
