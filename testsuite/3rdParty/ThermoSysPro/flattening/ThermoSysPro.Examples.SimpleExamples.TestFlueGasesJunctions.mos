// name:     ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.mos [instantiate and checkModel]
// keywords: instantiate and check ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions_* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.exe ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.cpp ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.makefile ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.libs ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.log ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.c ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("../ThermoSysPro/package.mo"); getErrorString();

instantiateModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions); getErrorString();
checkModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions); getErrorString();

// Result:
// true
// ""
// true
// "[GTCombustionChamber.mo:169:20-169:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCombustionChamber.mo:173:20-173:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:153:20-153:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:157:20-157:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GridFurnace.mo:85:20-85:23:writable] Warning: Treating .01 as 0.01. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Pro_FlueGases.mo:4:40-4:42:writable] Warning: Treating .5 as 0.5. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalHeatTransferCoefficient.mo:93:26-93:29:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalTwoPhaseFlowHeatTransferCoefficient.mo:92:24-92:27:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CombustionTurbine.mo:12:18-12:21:writable] Warning: Treating .07 as 0.07. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCICOBarilla.mo:7:28-7:35:writable] Warning: Treating .881225 as 0.881225. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GasTurbine.mo:12:28-12:30:writable] Warning: Treating .9 as 0.9. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [AbsorptionRefrigeratorSystem.mo:4:25-4:32:writable] Warning: Treating .362979 as 0.362979. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:55:12-55:16:writable] Warning: Treating .011 as 0.011. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:58:9-58:12:writable] Warning: Treating .50 as 0.50. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:59:8-59:13:writable] Warning: Treating .2479 as 0.2479. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:60:8-60:13:writable] Warning: Treating .0297 as 0.0297. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:61:8-61:13:writable] Warning: Treating .2088 as 0.2088. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:62:8-62:13:writable] Warning: Treating .0017 as 0.0017. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:63:8-63:13:writable] Warning: Treating .0003 as 0.0003. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:132:8-132:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:136:8-136:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BaseIF97.mo:4589:34-4589:42:writable] Warning: Treating .5132047 as 0.5132047. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:22-4090:39:writable] Warning: Treating .0158271919734802 as 0.0158271919734802. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:53-4090:70:writable] Warning: Treating .0942738402188500 as 0.0942738402188500. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:30-4091:46:writable] Warning: Treating .155071987336585 as 0.155071987336585. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:60-4091:76:writable] Warning: Treating .188821573960182 as 0.188821573960182. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4092:46-4092:62:writable] Warning: Treating .199773405226859 as 0.199773405226859. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4093:29-4093:45:writable] Warning: Treating .224926465333340 as 0.224926465333340. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4094:17-4094:33:writable] Warning: Treating .242611071901408 as 0.242611071901408. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Degasifier.mo:100:71-100:73:writable] Warning: Treating .1 as 0.1. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// "
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := (if T < data.Tlimit then data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1]) / T else data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1]) / T) + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0);
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function ThermoSysPro.Functions.ThermoSquare \"Thermodynamic square\"
//   input Real x;
//   input Real dx;
//   output Real y;
// algorithm
//   y := if abs(x) > dx then x * abs(x) else x * dx;
// end ThermoSysPro.Functions.ThermoSquare;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_h \"Specific enthalpy\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state0;
//   protected Real Xn2 \"N2 mass fraction\";
//   protected constant Real Hlat = 2501599.9019 \"Phase transition energy\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   state0.p := 611.2;
//   state0.T := 273.16;
//   state0.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state) + 2501599.9019 * Xh2o - ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state0);
// end ThermoSysPro.Properties.FlueGases.FlueGases_h;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_rho \"Density\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected Real Xn2 \"N2 mass fraction\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   rho := ThermoSysPro.Properties.ModelicaMediaFlueGases.density(state);
// end ThermoSysPro.Properties.FlueGases.FlueGases_rho;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState \"Automatically generated record constructor for ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[5] X;
//   output ThermodynamicState res;
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.density \"Return density of ideal gas\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (state.T * (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]) * 296.803386950531);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.density;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768, 0.232, 0.0, 0.0, 0.0} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0.0, 309498.454311151, 1000.0, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.803386950531), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0.0, 271263.422378339, 1000.0, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.19346705e-16}, {-16890.10929, 17.38716506}, 259.836993887271), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.8172529, 549760.647628014, 1000.0, {-39479.6083, 575.573102, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.83683048e-07, 9.42646893e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.523329085088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.54440518, 212805.621513537, 1000.0, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.29152319, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.33003659e-16}, {-39083.5059, -26.52669281}, 188.924482214067), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"SO2\", 0.0640638, -4633037.69055223, 164650.348558781, 1000.0, {-53108.4214, 909.031167, -2.356891244, 0.02204449885, -2.510781471e-05, 1.446300484e-08, -3.36907094e-12}, {-41137.5208, 40.45512519}, {-112764.0116, -825.226138, 7.61617863, -0.000199932761, 5.65563143e-08, -5.45431661e-12, 2.918294102e-16}, {-33513.0869, -16.55776085}, 129.78424632944), T, exclEnthForm, refChoice, h_off)};
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy \"Return specific enthalpy\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}, true, Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy;
// 
// class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions
//   Real splitter2.alpha1 \"Extraction coefficient for outlet 1 (<=1)\";
//   Real splitter2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 1000000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real splitter2.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid specific enthalpy\";
//   Real splitter2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real splitter2.Xco2 \"CO2 mass fraction\";
//   Real splitter2.Xh2o \"H20 mass fraction\";
//   Real splitter2.Xo2 \"O2 mass fraction\";
//   Real splitter2.Xso2 \"SO2 mass fraction\";
//   Real splitter2.Xn2 \"N2 mass fraction\";
//   Real splitter2.he(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at the inlet\";
//   Real splitter2.hs1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #1\";
//   Real splitter2.hs2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #2\";
//   Real splitter2.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real splitter2.Ce.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real splitter2.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Ce.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Ce.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Ce.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Ce.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean splitter2.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean splitter2.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real splitter2.Cs1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real splitter2.Cs1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real splitter2.Cs1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean splitter2.Cs1.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean splitter2.Cs1.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real splitter2.Cs2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real splitter2.Cs2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real splitter2.Cs2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real splitter2.Cs2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean splitter2.Cs2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean splitter2.Cs2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real splitter2.Ialpha1.signal;
//   output Real splitter2.Oalpha1.signal;
//   parameter Real sourceP.Q0(quantity = \"MassFlowRate\", unit = \"kg/s\") = 200.0 \"Source mass flow rate\";
//   parameter Real sourceP.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceP.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceP.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceP.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceP.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceP.Xn2 \"N2 mas fraction\";
//   Real sourceP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceP.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceP.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceP.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceP.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceP.IMassFlow.signal;
//   input Real sourceP.ITemperature.signal;
//   parameter Real singularPressureLoss.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real sinkP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sinkP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sinkP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sinkP.Xco2 \"CO2 mass fraction\";
//   Real sinkP.Xh2o \"H2O mass fraction\";
//   Real sinkP.Xo2 \"O2 mass fraction\";
//   Real sinkP.Xso2 \"SO2 mass fraction\";
//   Real sinkP.Xn2 \"N2 mass fraction\";
//   Real sinkP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sinkP.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sinkP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sinkP.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean sinkP.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean sinkP.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sinkP1.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Sink pressure\";
//   Real sinkP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sinkP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sinkP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sinkP1.Xco2 \"CO2 mass fraction\";
//   Real sinkP1.Xh2o \"H2O mass fraction\";
//   Real sinkP1.Xo2 \"O2 mass fraction\";
//   Real sinkP1.Xso2 \"SO2 mass fraction\";
//   Real sinkP1.Xn2 \"N2 mass fraction\";
//   Real sinkP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sinkP1.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sinkP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sinkP1.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP1.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP1.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP1.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean sinkP1.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean sinkP1.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sinkP1.IPressure.signal;
//   parameter Real singularPressureLoss1.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss1.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss1.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss1.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss1.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss1.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss1.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss1.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss1.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss1.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss1.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss1.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss1.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss1.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss1.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss1.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLoss2.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss2.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss2.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss2.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss2.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss2.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss2.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss2.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss2.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss2.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss2.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss2.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss2.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss2.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss2.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss2.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real constante.k = 0.0 \"Valeur de la sortie\";
//   output Real constante.y.signal;
//   Real mixer2_1.alpha1 \"Extraction coefficient for inlet 1 (<=1)\";
//   Real mixer2_1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 1000000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real mixer2_1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy\";
//   Real mixer2_1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real mixer2_1.Xco2 \"CO2 mass fraction\";
//   Real mixer2_1.Xh2o \"H20 mass fraction\";
//   Real mixer2_1.Xo2 \"O2 mass fraction\";
//   Real mixer2_1.Xso2 \"SO2 mass fraction\";
//   Real mixer2_1.Xn2 \"N2 mass fraction\";
//   Real mixer2_1.he1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #1\";
//   Real mixer2_1.he2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #2\";
//   Real mixer2_1.hs(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at the outlet\";
//   Real mixer2_1.Ce2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real mixer2_1.Ce2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real mixer2_1.Ce2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean mixer2_1.Ce2.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean mixer2_1.Ce2.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real mixer2_1.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real mixer2_1.Cs.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real mixer2_1.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Cs.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Cs.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Cs.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Cs.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean mixer2_1.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean mixer2_1.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real mixer2_1.Ce1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real mixer2_1.Ce1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real mixer2_1.Ce1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real mixer2_1.Ce1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean mixer2_1.Ce1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean mixer2_1.Ce1.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real mixer2_1.Ialpha1.signal;
//   output Real mixer2_1.Oalpha1.signal;
//   parameter Real singularPressureLoss3.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss3.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss3.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss3.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss3.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss3.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss3.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss3.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss3.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss3.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss3.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss3.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss3.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss3.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss3.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss3.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss3.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss3.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss3.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLoss4.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss4.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss4.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss4.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss4.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss4.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss4.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss4.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss4.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss4.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss4.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss4.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss4.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss4.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss4.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss4.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss4.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss4.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss4.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLoss5.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLoss5.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLoss5.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLoss5.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLoss5.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLoss5.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLoss5.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLoss5.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLoss5.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss5.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss5.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLoss5.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLoss5.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLoss5.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLoss5.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLoss5.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLoss5.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLoss5.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLoss5.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sourceP1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceP1.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceP1.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceP1.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceP1.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceP1.Xn2 \"N2 mas fraction\";
//   Real sourceP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceP1.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceP1.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP1.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP1.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP1.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceP1.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceP1.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceP1.ITemperature.signal;
//   parameter Real sourceP2.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 200000.0 \"Source pressure\";
//   parameter Real sourceP2.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceP2.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceP2.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceP2.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceP2.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceP2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceP2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceP2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceP2.Xn2 \"N2 mas fraction\";
//   Real sourceP2.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceP2.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceP2.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceP2.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP2.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP2.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceP2.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceP2.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceP2.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceP2.ITemperature.signal;
//   input Real sourceP2.IPressure.signal;
//   parameter Real sinkP2.Q0(quantity = \"MassFlowRate\", unit = \"kg/s\") = 100.0 \"Sink mass flow rate\";
//   Real sinkP2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sinkP2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sinkP2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sinkP2.Xco2 \"CO2 mass fraction\";
//   Real sinkP2.Xh2o \"H2O mass fraction\";
//   Real sinkP2.Xo2 \"O2 mass fraction\";
//   Real sinkP2.Xso2 \"SO2 mass fraction\";
//   Real sinkP2.Xn2 \"N2 mass fraction\";
//   Real sinkP2.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sinkP2.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sinkP2.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sinkP2.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP2.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP2.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkP2.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean sinkP2.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean sinkP2.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sinkP2.IMassFlow.signal;
//   parameter Real constante1.k = 0.5 \"Valeur de la sortie\";
//   output Real constante1.y.signal;
// equation
//   splitter2.P = splitter2.Ce.P;
//   splitter2.P = splitter2.Cs1.P;
//   splitter2.P = splitter2.Cs2.P;
//   splitter2.Cs1.T = splitter2.T;
//   splitter2.Cs2.T = splitter2.T;
//   splitter2.Cs1.Xco2 = splitter2.Xco2;
//   splitter2.Cs1.Xh2o = splitter2.Xh2o;
//   splitter2.Cs1.Xo2 = splitter2.Xo2;
//   splitter2.Cs1.Xso2 = splitter2.Xso2;
//   splitter2.Cs2.Xco2 = splitter2.Xco2;
//   splitter2.Cs2.Xh2o = splitter2.Xh2o;
//   splitter2.Cs2.Xo2 = splitter2.Xo2;
//   splitter2.Cs2.Xso2 = splitter2.Xso2;
//   splitter2.Xn2 = 1.0 + (-splitter2.Xco2) - splitter2.Xso2 - splitter2.Xo2 - splitter2.Xh2o;
//   0.0 = splitter2.Ce.Q + (-splitter2.Cs1.Q) - splitter2.Cs2.Q;
//   0.0 = splitter2.Ce.Q * splitter2.he + (-splitter2.Cs1.Q) * splitter2.hs1 - splitter2.Cs2.Q * splitter2.hs2;
//   0.0 = splitter2.Ce.Xco2 * splitter2.Ce.Q + (-splitter2.Cs1.Xco2) * splitter2.Cs1.Q - splitter2.Cs2.Xco2 * splitter2.Cs2.Q;
//   0.0 = splitter2.Ce.Xh2o * splitter2.Ce.Q + (-splitter2.Cs1.Xh2o) * splitter2.Cs1.Q - splitter2.Cs2.Xh2o * splitter2.Cs2.Q;
//   0.0 = splitter2.Ce.Xo2 * splitter2.Ce.Q + (-splitter2.Cs1.Xo2) * splitter2.Cs1.Q - splitter2.Cs2.Xo2 * splitter2.Cs2.Q;
//   0.0 = splitter2.Ce.Xso2 * splitter2.Ce.Q + (-splitter2.Cs1.Xso2) * splitter2.Cs1.Q - splitter2.Cs2.Xso2 * splitter2.Cs2.Q;
//   splitter2.Cs1.Q = splitter2.Ialpha1.signal * splitter2.Ce.Q;
//   splitter2.alpha1 = splitter2.Cs1.Q / splitter2.Ce.Q;
//   splitter2.Oalpha1.signal = splitter2.alpha1;
//   splitter2.he = ThermoSysPro.Properties.FlueGases.FlueGases_h(splitter2.P, splitter2.Ce.T, splitter2.Ce.Xco2, splitter2.Ce.Xh2o, splitter2.Ce.Xo2, splitter2.Ce.Xso2);
//   splitter2.hs1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(splitter2.P, splitter2.Cs1.T, splitter2.Cs1.Xco2, splitter2.Cs1.Xh2o, splitter2.Cs1.Xo2, splitter2.Cs1.Xso2);
//   splitter2.hs2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(splitter2.P, splitter2.Cs2.T, splitter2.Cs2.Xco2, splitter2.Cs2.Xh2o, splitter2.Cs2.Xo2, splitter2.Cs2.Xso2);
//   splitter2.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(splitter2.P, splitter2.T, splitter2.Xco2, splitter2.Xh2o, splitter2.Xo2, splitter2.Xso2);
//   sourceP.C.P = sourceP.P;
//   sourceP.C.Q = sourceP.Q;
//   sourceP.C.T = sourceP.T;
//   sourceP.C.Xco2 = sourceP.Xco2;
//   sourceP.C.Xh2o = sourceP.Xh2o;
//   sourceP.C.Xo2 = sourceP.Xo2;
//   sourceP.C.Xso2 = sourceP.Xso2;
//   sourceP.Xn2 = 1.0 + (-sourceP.Xco2) - sourceP.Xso2 - sourceP.Xo2 - sourceP.Xh2o;
//   sourceP.IMassFlow.signal = sourceP.Q0;
//   sourceP.Q = sourceP.IMassFlow.signal;
//   sourceP.ITemperature.signal = sourceP.T0;
//   sourceP.T = sourceP.ITemperature.signal;
//   singularPressureLoss.C1.P - singularPressureLoss.C2.P = singularPressureLoss.deltaPf;
//   singularPressureLoss.C1.T = singularPressureLoss.C2.T;
//   singularPressureLoss.C1.Q = singularPressureLoss.C2.Q;
//   singularPressureLoss.C2.Xco2 = singularPressureLoss.C1.Xco2;
//   singularPressureLoss.C2.Xh2o = singularPressureLoss.C1.Xh2o;
//   singularPressureLoss.C2.Xo2 = singularPressureLoss.C1.Xo2;
//   singularPressureLoss.C2.Xso2 = singularPressureLoss.C1.Xso2;
//   singularPressureLoss.Q = singularPressureLoss.C1.Q;
//   singularPressureLoss.deltaPf = singularPressureLoss.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss.Q, singularPressureLoss.eps) / singularPressureLoss.rho;
//   singularPressureLoss.P = singularPressureLoss.C1.P / 2.0 + singularPressureLoss.C2.P / 2.0;
//   singularPressureLoss.T = singularPressureLoss.C2.T;
//   singularPressureLoss.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss.P, singularPressureLoss.T, singularPressureLoss.C2.Xco2, singularPressureLoss.C2.Xh2o, singularPressureLoss.C2.Xo2, singularPressureLoss.C2.Xso2);
//   sinkP.C.P = sinkP.P;
//   sinkP.C.Q = sinkP.Q;
//   sinkP.C.T = sinkP.T;
//   sinkP.C.Xco2 = sinkP.Xco2;
//   sinkP.C.Xh2o = sinkP.Xh2o;
//   sinkP.C.Xo2 = sinkP.Xo2;
//   sinkP.C.Xso2 = sinkP.Xso2;
//   sinkP.Xn2 = 1.0 + (-sinkP.Xco2) - sinkP.Xso2 - sinkP.Xo2 - sinkP.Xh2o;
//   sinkP1.C.P = sinkP1.P;
//   sinkP1.C.Q = sinkP1.Q;
//   sinkP1.C.T = sinkP1.T;
//   sinkP1.C.Xco2 = sinkP1.Xco2;
//   sinkP1.C.Xh2o = sinkP1.Xh2o;
//   sinkP1.C.Xo2 = sinkP1.Xo2;
//   sinkP1.C.Xso2 = sinkP1.Xso2;
//   sinkP1.Xn2 = 1.0 + (-sinkP1.Xco2) - sinkP1.Xso2 - sinkP1.Xo2 - sinkP1.Xh2o;
//   sinkP1.IPressure.signal = sinkP1.P0;
//   sinkP1.P = sinkP1.IPressure.signal;
//   singularPressureLoss1.C1.P - singularPressureLoss1.C2.P = singularPressureLoss1.deltaPf;
//   singularPressureLoss1.C1.T = singularPressureLoss1.C2.T;
//   singularPressureLoss1.C1.Q = singularPressureLoss1.C2.Q;
//   singularPressureLoss1.C2.Xco2 = singularPressureLoss1.C1.Xco2;
//   singularPressureLoss1.C2.Xh2o = singularPressureLoss1.C1.Xh2o;
//   singularPressureLoss1.C2.Xo2 = singularPressureLoss1.C1.Xo2;
//   singularPressureLoss1.C2.Xso2 = singularPressureLoss1.C1.Xso2;
//   singularPressureLoss1.Q = singularPressureLoss1.C1.Q;
//   singularPressureLoss1.deltaPf = singularPressureLoss1.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss1.Q, singularPressureLoss1.eps) / singularPressureLoss1.rho;
//   singularPressureLoss1.P = singularPressureLoss1.C1.P / 2.0 + singularPressureLoss1.C2.P / 2.0;
//   singularPressureLoss1.T = singularPressureLoss1.C2.T;
//   singularPressureLoss1.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss1.P, singularPressureLoss1.T, singularPressureLoss1.C2.Xco2, singularPressureLoss1.C2.Xh2o, singularPressureLoss1.C2.Xo2, singularPressureLoss1.C2.Xso2);
//   singularPressureLoss2.C1.P - singularPressureLoss2.C2.P = singularPressureLoss2.deltaPf;
//   singularPressureLoss2.C1.T = singularPressureLoss2.C2.T;
//   singularPressureLoss2.C1.Q = singularPressureLoss2.C2.Q;
//   singularPressureLoss2.C2.Xco2 = singularPressureLoss2.C1.Xco2;
//   singularPressureLoss2.C2.Xh2o = singularPressureLoss2.C1.Xh2o;
//   singularPressureLoss2.C2.Xo2 = singularPressureLoss2.C1.Xo2;
//   singularPressureLoss2.C2.Xso2 = singularPressureLoss2.C1.Xso2;
//   singularPressureLoss2.Q = singularPressureLoss2.C1.Q;
//   singularPressureLoss2.deltaPf = singularPressureLoss2.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss2.Q, singularPressureLoss2.eps) / singularPressureLoss2.rho;
//   singularPressureLoss2.P = singularPressureLoss2.C1.P / 2.0 + singularPressureLoss2.C2.P / 2.0;
//   singularPressureLoss2.T = singularPressureLoss2.C2.T;
//   singularPressureLoss2.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss2.P, singularPressureLoss2.T, singularPressureLoss2.C2.Xco2, singularPressureLoss2.C2.Xh2o, singularPressureLoss2.C2.Xo2, singularPressureLoss2.C2.Xso2);
//   constante.y.signal = constante.k;
//   mixer2_1.P = mixer2_1.Ce1.P;
//   mixer2_1.P = mixer2_1.Ce2.P;
//   mixer2_1.P = mixer2_1.Cs.P;
//   mixer2_1.Cs.T = mixer2_1.T;
//   mixer2_1.Cs.Xco2 = mixer2_1.Xco2;
//   mixer2_1.Cs.Xh2o = mixer2_1.Xh2o;
//   mixer2_1.Cs.Xo2 = mixer2_1.Xo2;
//   mixer2_1.Cs.Xso2 = mixer2_1.Xso2;
//   mixer2_1.Xn2 = 1.0 + (-mixer2_1.Xco2) - mixer2_1.Xso2 - mixer2_1.Xo2 - mixer2_1.Xh2o;
//   0.0 = mixer2_1.Ce1.Q + mixer2_1.Ce2.Q - mixer2_1.Cs.Q;
//   0.0 = mixer2_1.Ce1.Q * mixer2_1.he1 + mixer2_1.Ce2.Q * mixer2_1.he2 - mixer2_1.Cs.Q * mixer2_1.hs;
//   0.0 = mixer2_1.Ce1.Xco2 * mixer2_1.Ce1.Q + mixer2_1.Ce2.Xco2 * mixer2_1.Ce2.Q - mixer2_1.Cs.Xco2 * mixer2_1.Cs.Q;
//   0.0 = mixer2_1.Ce1.Xh2o * mixer2_1.Ce1.Q + mixer2_1.Ce2.Xh2o * mixer2_1.Ce2.Q - mixer2_1.Cs.Xh2o * mixer2_1.Cs.Q;
//   0.0 = mixer2_1.Ce1.Xo2 * mixer2_1.Ce1.Q + mixer2_1.Ce2.Xo2 * mixer2_1.Ce2.Q - mixer2_1.Cs.Xo2 * mixer2_1.Cs.Q;
//   0.0 = mixer2_1.Ce1.Xso2 * mixer2_1.Ce1.Q + mixer2_1.Ce2.Xso2 * mixer2_1.Ce2.Q - mixer2_1.Cs.Xso2 * mixer2_1.Cs.Q;
//   mixer2_1.Ce1.Q = mixer2_1.Ialpha1.signal * mixer2_1.Cs.Q;
//   mixer2_1.alpha1 = mixer2_1.Ce1.Q / mixer2_1.Cs.Q;
//   mixer2_1.Oalpha1.signal = mixer2_1.alpha1;
//   mixer2_1.he1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(mixer2_1.P, mixer2_1.Ce1.T, mixer2_1.Ce1.Xco2, mixer2_1.Ce1.Xh2o, mixer2_1.Ce1.Xo2, mixer2_1.Ce1.Xso2);
//   mixer2_1.he2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(mixer2_1.P, mixer2_1.Ce2.T, mixer2_1.Ce2.Xco2, mixer2_1.Ce2.Xh2o, mixer2_1.Ce2.Xo2, mixer2_1.Ce2.Xso2);
//   mixer2_1.hs = ThermoSysPro.Properties.FlueGases.FlueGases_h(mixer2_1.P, mixer2_1.Cs.T, mixer2_1.Cs.Xco2, mixer2_1.Cs.Xh2o, mixer2_1.Cs.Xo2, mixer2_1.Cs.Xso2);
//   mixer2_1.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(mixer2_1.P, mixer2_1.T, mixer2_1.Xco2, mixer2_1.Xh2o, mixer2_1.Xo2, mixer2_1.Xso2);
//   singularPressureLoss3.C1.P - singularPressureLoss3.C2.P = singularPressureLoss3.deltaPf;
//   singularPressureLoss3.C1.T = singularPressureLoss3.C2.T;
//   singularPressureLoss3.C1.Q = singularPressureLoss3.C2.Q;
//   singularPressureLoss3.C2.Xco2 = singularPressureLoss3.C1.Xco2;
//   singularPressureLoss3.C2.Xh2o = singularPressureLoss3.C1.Xh2o;
//   singularPressureLoss3.C2.Xo2 = singularPressureLoss3.C1.Xo2;
//   singularPressureLoss3.C2.Xso2 = singularPressureLoss3.C1.Xso2;
//   singularPressureLoss3.Q = singularPressureLoss3.C1.Q;
//   singularPressureLoss3.deltaPf = singularPressureLoss3.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss3.Q, singularPressureLoss3.eps) / singularPressureLoss3.rho;
//   singularPressureLoss3.P = singularPressureLoss3.C1.P / 2.0 + singularPressureLoss3.C2.P / 2.0;
//   singularPressureLoss3.T = singularPressureLoss3.C2.T;
//   singularPressureLoss3.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss3.P, singularPressureLoss3.T, singularPressureLoss3.C2.Xco2, singularPressureLoss3.C2.Xh2o, singularPressureLoss3.C2.Xo2, singularPressureLoss3.C2.Xso2);
//   singularPressureLoss4.C1.P - singularPressureLoss4.C2.P = singularPressureLoss4.deltaPf;
//   singularPressureLoss4.C1.T = singularPressureLoss4.C2.T;
//   singularPressureLoss4.C1.Q = singularPressureLoss4.C2.Q;
//   singularPressureLoss4.C2.Xco2 = singularPressureLoss4.C1.Xco2;
//   singularPressureLoss4.C2.Xh2o = singularPressureLoss4.C1.Xh2o;
//   singularPressureLoss4.C2.Xo2 = singularPressureLoss4.C1.Xo2;
//   singularPressureLoss4.C2.Xso2 = singularPressureLoss4.C1.Xso2;
//   singularPressureLoss4.Q = singularPressureLoss4.C1.Q;
//   singularPressureLoss4.deltaPf = singularPressureLoss4.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss4.Q, singularPressureLoss4.eps) / singularPressureLoss4.rho;
//   singularPressureLoss4.P = singularPressureLoss4.C1.P / 2.0 + singularPressureLoss4.C2.P / 2.0;
//   singularPressureLoss4.T = singularPressureLoss4.C2.T;
//   singularPressureLoss4.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss4.P, singularPressureLoss4.T, singularPressureLoss4.C2.Xco2, singularPressureLoss4.C2.Xh2o, singularPressureLoss4.C2.Xo2, singularPressureLoss4.C2.Xso2);
//   singularPressureLoss5.C1.P - singularPressureLoss5.C2.P = singularPressureLoss5.deltaPf;
//   singularPressureLoss5.C1.T = singularPressureLoss5.C2.T;
//   singularPressureLoss5.C1.Q = singularPressureLoss5.C2.Q;
//   singularPressureLoss5.C2.Xco2 = singularPressureLoss5.C1.Xco2;
//   singularPressureLoss5.C2.Xh2o = singularPressureLoss5.C1.Xh2o;
//   singularPressureLoss5.C2.Xo2 = singularPressureLoss5.C1.Xo2;
//   singularPressureLoss5.C2.Xso2 = singularPressureLoss5.C1.Xso2;
//   singularPressureLoss5.Q = singularPressureLoss5.C1.Q;
//   singularPressureLoss5.deltaPf = singularPressureLoss5.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLoss5.Q, singularPressureLoss5.eps) / singularPressureLoss5.rho;
//   singularPressureLoss5.P = singularPressureLoss5.C1.P / 2.0 + singularPressureLoss5.C2.P / 2.0;
//   singularPressureLoss5.T = singularPressureLoss5.C2.T;
//   singularPressureLoss5.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLoss5.P, singularPressureLoss5.T, singularPressureLoss5.C2.Xco2, singularPressureLoss5.C2.Xh2o, singularPressureLoss5.C2.Xo2, singularPressureLoss5.C2.Xso2);
//   sourceP1.C.P = sourceP1.P;
//   sourceP1.C.Q = sourceP1.Q;
//   sourceP1.C.T = sourceP1.T;
//   sourceP1.C.Xco2 = sourceP1.Xco2;
//   sourceP1.C.Xh2o = sourceP1.Xh2o;
//   sourceP1.C.Xo2 = sourceP1.Xo2;
//   sourceP1.C.Xso2 = sourceP1.Xso2;
//   sourceP1.Xn2 = 1.0 + (-sourceP1.Xco2) - sourceP1.Xso2 - sourceP1.Xo2 - sourceP1.Xh2o;
//   sourceP1.ITemperature.signal = sourceP1.T0;
//   sourceP1.T = sourceP1.ITemperature.signal;
//   sourceP2.C.P = sourceP2.P;
//   sourceP2.C.Q = sourceP2.Q;
//   sourceP2.C.T = sourceP2.T;
//   sourceP2.C.Xco2 = sourceP2.Xco2;
//   sourceP2.C.Xh2o = sourceP2.Xh2o;
//   sourceP2.C.Xo2 = sourceP2.Xo2;
//   sourceP2.C.Xso2 = sourceP2.Xso2;
//   sourceP2.Xn2 = 1.0 + (-sourceP2.Xco2) - sourceP2.Xso2 - sourceP2.Xo2 - sourceP2.Xh2o;
//   sourceP2.IPressure.signal = sourceP2.P0;
//   sourceP2.P = sourceP2.IPressure.signal;
//   sourceP2.ITemperature.signal = sourceP2.T0;
//   sourceP2.T = sourceP2.ITemperature.signal;
//   sinkP2.C.P = sinkP2.P;
//   sinkP2.C.Q = sinkP2.Q;
//   sinkP2.C.T = sinkP2.T;
//   sinkP2.C.Xco2 = sinkP2.Xco2;
//   sinkP2.C.Xh2o = sinkP2.Xh2o;
//   sinkP2.C.Xo2 = sinkP2.Xo2;
//   sinkP2.C.Xso2 = sinkP2.Xso2;
//   sinkP2.Xn2 = 1.0 + (-sinkP2.Xco2) - sinkP2.Xso2 - sinkP2.Xo2 - sinkP2.Xh2o;
//   sinkP2.IMassFlow.signal = sinkP2.Q0;
//   sinkP2.Q = sinkP2.IMassFlow.signal;
//   constante1.y.signal = constante1.k;
//   constante.y.signal = splitter2.Ialpha1.signal;
//   constante1.y.signal = mixer2_1.Ialpha1.signal;
//   singularPressureLoss.C1.P = sourceP.C.P;
//   singularPressureLoss.C1.T = sourceP.C.T;
//   singularPressureLoss.C1.Q = sourceP.C.Q;
//   singularPressureLoss.C1.Xco2 = sourceP.C.Xco2;
//   singularPressureLoss.C1.Xh2o = sourceP.C.Xh2o;
//   singularPressureLoss.C1.Xo2 = sourceP.C.Xo2;
//   singularPressureLoss.C1.Xso2 = sourceP.C.Xso2;
//   singularPressureLoss.C1.a = sourceP.C.a;
//   singularPressureLoss.C1.b = sourceP.C.b;
//   singularPressureLoss.C2.P = splitter2.Ce.P;
//   singularPressureLoss.C2.T = splitter2.Ce.T;
//   singularPressureLoss.C2.Q = splitter2.Ce.Q;
//   singularPressureLoss.C2.Xco2 = splitter2.Ce.Xco2;
//   singularPressureLoss.C2.Xh2o = splitter2.Ce.Xh2o;
//   singularPressureLoss.C2.Xo2 = splitter2.Ce.Xo2;
//   singularPressureLoss.C2.Xso2 = splitter2.Ce.Xso2;
//   singularPressureLoss.C2.a = splitter2.Ce.a;
//   singularPressureLoss.C2.b = splitter2.Ce.b;
//   singularPressureLoss1.C1.P = splitter2.Cs1.P;
//   singularPressureLoss1.C1.T = splitter2.Cs1.T;
//   singularPressureLoss1.C1.Q = splitter2.Cs1.Q;
//   singularPressureLoss1.C1.Xco2 = splitter2.Cs1.Xco2;
//   singularPressureLoss1.C1.Xh2o = splitter2.Cs1.Xh2o;
//   singularPressureLoss1.C1.Xo2 = splitter2.Cs1.Xo2;
//   singularPressureLoss1.C1.Xso2 = splitter2.Cs1.Xso2;
//   singularPressureLoss1.C1.a = splitter2.Cs1.a;
//   singularPressureLoss1.C1.b = splitter2.Cs1.b;
//   singularPressureLoss2.C1.P = splitter2.Cs2.P;
//   singularPressureLoss2.C1.T = splitter2.Cs2.T;
//   singularPressureLoss2.C1.Q = splitter2.Cs2.Q;
//   singularPressureLoss2.C1.Xco2 = splitter2.Cs2.Xco2;
//   singularPressureLoss2.C1.Xh2o = splitter2.Cs2.Xh2o;
//   singularPressureLoss2.C1.Xo2 = splitter2.Cs2.Xo2;
//   singularPressureLoss2.C1.Xso2 = splitter2.Cs2.Xso2;
//   singularPressureLoss2.C1.a = splitter2.Cs2.a;
//   singularPressureLoss2.C1.b = splitter2.Cs2.b;
//   singularPressureLoss1.C2.P = sinkP.C.P;
//   singularPressureLoss1.C2.T = sinkP.C.T;
//   singularPressureLoss1.C2.Q = sinkP.C.Q;
//   singularPressureLoss1.C2.Xco2 = sinkP.C.Xco2;
//   singularPressureLoss1.C2.Xh2o = sinkP.C.Xh2o;
//   singularPressureLoss1.C2.Xo2 = sinkP.C.Xo2;
//   singularPressureLoss1.C2.Xso2 = sinkP.C.Xso2;
//   singularPressureLoss1.C2.a = sinkP.C.a;
//   singularPressureLoss1.C2.b = sinkP.C.b;
//   singularPressureLoss2.C2.P = sinkP1.C.P;
//   singularPressureLoss2.C2.T = sinkP1.C.T;
//   singularPressureLoss2.C2.Q = sinkP1.C.Q;
//   singularPressureLoss2.C2.Xco2 = sinkP1.C.Xco2;
//   singularPressureLoss2.C2.Xh2o = sinkP1.C.Xh2o;
//   singularPressureLoss2.C2.Xo2 = sinkP1.C.Xo2;
//   singularPressureLoss2.C2.Xso2 = sinkP1.C.Xso2;
//   singularPressureLoss2.C2.a = sinkP1.C.a;
//   singularPressureLoss2.C2.b = sinkP1.C.b;
//   singularPressureLoss4.C1.P = sourceP1.C.P;
//   singularPressureLoss4.C1.T = sourceP1.C.T;
//   singularPressureLoss4.C1.Q = sourceP1.C.Q;
//   singularPressureLoss4.C1.Xco2 = sourceP1.C.Xco2;
//   singularPressureLoss4.C1.Xh2o = sourceP1.C.Xh2o;
//   singularPressureLoss4.C1.Xo2 = sourceP1.C.Xo2;
//   singularPressureLoss4.C1.Xso2 = sourceP1.C.Xso2;
//   singularPressureLoss4.C1.a = sourceP1.C.a;
//   singularPressureLoss4.C1.b = sourceP1.C.b;
//   mixer2_1.Ce1.P = singularPressureLoss4.C2.P;
//   mixer2_1.Ce1.T = singularPressureLoss4.C2.T;
//   mixer2_1.Ce1.Q = singularPressureLoss4.C2.Q;
//   mixer2_1.Ce1.Xco2 = singularPressureLoss4.C2.Xco2;
//   mixer2_1.Ce1.Xh2o = singularPressureLoss4.C2.Xh2o;
//   mixer2_1.Ce1.Xo2 = singularPressureLoss4.C2.Xo2;
//   mixer2_1.Ce1.Xso2 = singularPressureLoss4.C2.Xso2;
//   mixer2_1.Ce1.a = singularPressureLoss4.C2.a;
//   mixer2_1.Ce1.b = singularPressureLoss4.C2.b;
//   mixer2_1.Ce2.P = singularPressureLoss5.C2.P;
//   mixer2_1.Ce2.T = singularPressureLoss5.C2.T;
//   mixer2_1.Ce2.Q = singularPressureLoss5.C2.Q;
//   mixer2_1.Ce2.Xco2 = singularPressureLoss5.C2.Xco2;
//   mixer2_1.Ce2.Xh2o = singularPressureLoss5.C2.Xh2o;
//   mixer2_1.Ce2.Xo2 = singularPressureLoss5.C2.Xo2;
//   mixer2_1.Ce2.Xso2 = singularPressureLoss5.C2.Xso2;
//   mixer2_1.Ce2.a = singularPressureLoss5.C2.a;
//   mixer2_1.Ce2.b = singularPressureLoss5.C2.b;
//   mixer2_1.Cs.P = singularPressureLoss3.C1.P;
//   mixer2_1.Cs.T = singularPressureLoss3.C1.T;
//   mixer2_1.Cs.Q = singularPressureLoss3.C1.Q;
//   mixer2_1.Cs.Xco2 = singularPressureLoss3.C1.Xco2;
//   mixer2_1.Cs.Xh2o = singularPressureLoss3.C1.Xh2o;
//   mixer2_1.Cs.Xo2 = singularPressureLoss3.C1.Xo2;
//   mixer2_1.Cs.Xso2 = singularPressureLoss3.C1.Xso2;
//   mixer2_1.Cs.a = singularPressureLoss3.C1.a;
//   mixer2_1.Cs.b = singularPressureLoss3.C1.b;
//   singularPressureLoss3.C2.P = sinkP2.C.P;
//   singularPressureLoss3.C2.T = sinkP2.C.T;
//   singularPressureLoss3.C2.Q = sinkP2.C.Q;
//   singularPressureLoss3.C2.Xco2 = sinkP2.C.Xco2;
//   singularPressureLoss3.C2.Xh2o = sinkP2.C.Xh2o;
//   singularPressureLoss3.C2.Xo2 = sinkP2.C.Xo2;
//   singularPressureLoss3.C2.Xso2 = sinkP2.C.Xso2;
//   singularPressureLoss3.C2.a = sinkP2.C.a;
//   singularPressureLoss3.C2.b = sinkP2.C.b;
//   singularPressureLoss5.C1.P = sourceP2.C.P;
//   singularPressureLoss5.C1.T = sourceP2.C.T;
//   singularPressureLoss5.C1.Q = sourceP2.C.Q;
//   singularPressureLoss5.C1.Xco2 = sourceP2.C.Xco2;
//   singularPressureLoss5.C1.Xh2o = sourceP2.C.Xh2o;
//   singularPressureLoss5.C1.Xo2 = sourceP2.C.Xo2;
//   singularPressureLoss5.C1.Xso2 = sourceP2.C.Xso2;
//   singularPressureLoss5.C1.a = sourceP2.C.a;
//   singularPressureLoss5.C1.b = sourceP2.C.b;
// end ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions;
// "
// "[Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// "
// "Check of ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions completed successfully.
// 
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// 
// Class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesJunctions has 319 equation(s) and 319 variable(s).
// 266 of these are trivial equation(s).
// "
// ""
// endResult
