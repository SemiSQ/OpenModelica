// name:     ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.mos [instantiate and checkModel]
// keywords: instantiate and check ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes_* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.exe ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.cpp ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.makefile ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.libs ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.log ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.c ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("../ThermoSysPro/package.mo"); getErrorString();

instantiateModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes); getErrorString();
checkModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes); getErrorString();

// Result:
// true
// ""
// true
// "[GTCombustionChamber.mo:169:20-169:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCombustionChamber.mo:173:20-173:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:153:20-153:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:157:20-157:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GridFurnace.mo:85:20-85:23:writable] Warning: Treating .01 as 0.01. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Pro_FlueGases.mo:4:40-4:42:writable] Warning: Treating .5 as 0.5. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalHeatTransferCoefficient.mo:93:26-93:29:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalTwoPhaseFlowHeatTransferCoefficient.mo:92:24-92:27:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CombustionTurbine.mo:12:18-12:21:writable] Warning: Treating .07 as 0.07. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCICOBarilla.mo:7:28-7:35:writable] Warning: Treating .881225 as 0.881225. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GasTurbine.mo:12:28-12:30:writable] Warning: Treating .9 as 0.9. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [AbsorptionRefrigeratorSystem.mo:4:25-4:32:writable] Warning: Treating .362979 as 0.362979. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:55:12-55:16:writable] Warning: Treating .011 as 0.011. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:58:9-58:12:writable] Warning: Treating .50 as 0.50. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:59:8-59:13:writable] Warning: Treating .2479 as 0.2479. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:60:8-60:13:writable] Warning: Treating .0297 as 0.0297. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:61:8-61:13:writable] Warning: Treating .2088 as 0.2088. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:62:8-62:13:writable] Warning: Treating .0017 as 0.0017. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:63:8-63:13:writable] Warning: Treating .0003 as 0.0003. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:132:8-132:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:136:8-136:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BaseIF97.mo:4589:34-4589:42:writable] Warning: Treating .5132047 as 0.5132047. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:22-4090:39:writable] Warning: Treating .0158271919734802 as 0.0158271919734802. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:53-4090:70:writable] Warning: Treating .0942738402188500 as 0.0942738402188500. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:30-4091:46:writable] Warning: Treating .155071987336585 as 0.155071987336585. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:60-4091:76:writable] Warning: Treating .188821573960182 as 0.188821573960182. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4092:46-4092:62:writable] Warning: Treating .199773405226859 as 0.199773405226859. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4093:29-4093:45:writable] Warning: Treating .224926465333340 as 0.224926465333340. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4094:17-4094:33:writable] Warning: Treating .242611071901408 as 0.242611071901408. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Degasifier.mo:100:71-100:73:writable] Warning: Treating .1 as 0.1. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// "
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T \"Compute specific heat capacity at constant pressure from temperature and gas data\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity at temperature T\";
// algorithm
//   cp := if T < data.Tlimit then data.R * T ^ -2.0 * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T)))))) else data.R * T ^ -2.0 * (data.ahigh[1] + T * (data.ahigh[2] + T * (data.ahigh[3] + T * (data.ahigh[4] + T * (data.ahigh[5] + T * (data.ahigh[6] + data.ahigh[7] * T))))));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := (if T < data.Tlimit then data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1]) / T else data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1]) / T) + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0);
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function ThermoSysPro.Functions.ThermoSquare \"Thermodynamic square\"
//   input Real x;
//   input Real dx;
//   output Real y;
// algorithm
//   y := if abs(x) > dx then x * abs(x) else x * dx;
// end ThermoSysPro.Functions.ThermoSquare;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_cp \"Specific heat capacity\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected Real Xn2 \"N2 mass fraction\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   cp := ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp(state);
// end ThermoSysPro.Properties.FlueGases.FlueGases_cp;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_h \"Specific enthalpy\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state0;
//   protected Real Xn2 \"N2 mass fraction\";
//   protected constant Real Hlat = 2501599.9019 \"Phase transition energy\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   state0.p := 611.2;
//   state0.T := 273.16;
//   state0.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state) + 2501599.9019 * Xh2o - ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state0);
// end ThermoSysPro.Properties.FlueGases.FlueGases_h;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_rho \"Density\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected Real Xn2 \"N2 mass fraction\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   rho := ThermoSysPro.Properties.ModelicaMediaFlueGases.density(state);
// end ThermoSysPro.Properties.FlueGases.FlueGases_rho;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState \"Automatically generated record constructor for ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[5] X;
//   output ThermodynamicState res;
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.density \"Return density of ideal gas\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (state.T * (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]) * 296.803386950531);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.density;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768, 0.232, 0.0, 0.0, 0.0} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0.0, 309498.454311151, 1000.0, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.803386950531), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0.0, 271263.422378339, 1000.0, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.19346705e-16}, {-16890.10929, 17.38716506}, 259.836993887271), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.8172529, 549760.647628014, 1000.0, {-39479.6083, 575.573102, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.83683048e-07, 9.42646893e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.523329085088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.54440518, 212805.621513537, 1000.0, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.29152319, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.33003659e-16}, {-39083.5059, -26.52669281}, 188.924482214067), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"SO2\", 0.0640638, -4633037.69055223, 164650.348558781, 1000.0, {-53108.4214, 909.031167, -2.356891244, 0.02204449885, -2.510781471e-05, 1.446300484e-08, -3.36907094e-12}, {-41137.5208, 40.45512519}, {-112764.0116, -825.226138, 7.61617863, -0.000199932761, 5.65563143e-08, -5.45431661e-12, 2.918294102e-16}, {-33513.0869, -16.55776085}, 129.78424632944), T, exclEnthForm, refChoice, h_off)};
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy \"Return specific enthalpy\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}, true, Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp \"Return specific heat capacity at constant pressure\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
// algorithm
//   cp := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0.0, 309498.454311151, 1000.0, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.803386950531), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0.0, 271263.422378339, 1000.0, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.19346705e-16}, {-16890.10929, 17.38716506}, 259.836993887271), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.8172529, 549760.647628014, 1000.0, {-39479.6083, 575.573102, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.83683048e-07, 9.42646893e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.523329085088), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.54440518, 212805.621513537, 1000.0, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.29152319, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.33003659e-16}, {-39083.5059, -26.52669281}, 188.924482214067), state.T) * state.X[4] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"SO2\", 0.0640638, -4633037.69055223, 164650.348558781, 1000.0, {-53108.4214, 909.031167, -2.356891244, 0.02204449885, -2.510781471e-05, 1.446300484e-08, -3.36907094e-12}, {-41137.5208, 40.45512519}, {-112764.0116, -825.226138, 7.61617863, -0.000199932761, 5.65563143e-08, -5.45431661e-12, 2.918294102e-16}, {-33513.0869, -16.55776085}, 129.78424632944), state.T) * state.X[5];
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp;
// 
// class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes
//   parameter Real Source_Fumees.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 130000.0 \"Source pressure\";
//   parameter Real Source_Fumees.Q0(quantity = \"MassFlowRate\", unit = \"kg/s\") = 2.0 \"Sink mass flow rate\";
//   parameter Real Source_Fumees.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 300.0 \"Source temperature\";
//   parameter Real Source_Fumees.Xco2 = 0.0 \"CO2 mass fraction\";
//   parameter Real Source_Fumees.Xh2o = 0.006 \"H2O mass fraction\";
//   parameter Real Source_Fumees.Xo2 = 0.23 \"O2 mass fraction\";
//   parameter Real Source_Fumees.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real Source_Fumees.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real Source_Fumees.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real Source_Fumees.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real Source_Fumees.Xn2 \"N2 mas fraction\";
//   Real Source_Fumees.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real Source_Fumees.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real Source_Fumees.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real Source_Fumees.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Source_Fumees.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Source_Fumees.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Source_Fumees.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean Source_Fumees.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean Source_Fumees.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real Source_Fumees.IPressure.signal;
//   input Real Source_Fumees.IMassFlow.signal;
//   input Real Source_Fumees.ITemperature.signal;
//   Real Puits_Fumees.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real Puits_Fumees.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real Puits_Fumees.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real Puits_Fumees.Xco2 \"CO2 mass fraction\";
//   Real Puits_Fumees.Xh2o \"H2O mass fraction\";
//   Real Puits_Fumees.Xo2 \"O2 mass fraction\";
//   Real Puits_Fumees.Xso2 \"SO2 mass fraction\";
//   Real Puits_Fumees.Xn2 \"N2 mass fraction\";
//   Real Puits_Fumees.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real Puits_Fumees.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real Puits_Fumees.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real Puits_Fumees.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Puits_Fumees.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Puits_Fumees.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real Puits_Fumees.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean Puits_Fumees.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean Puits_Fumees.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real dynamicExchanger.V(quantity = \"Volume\", unit = \"m3\") = 1.0 \"Volume\";
//   parameter Real dynamicExchanger.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Initial fluid pressure (active if dynamic_mass_balance=true and steady_state=false)\";
//   parameter Real dynamicExchanger.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 400.0 \"Initial fluid temperature (active if steady_state=false)\";
//   parameter Boolean dynamicExchanger.dynamic_mass_balance = false \"true: dynamic mass balance equation - false: static mass balance equation\";
//   parameter Boolean dynamicExchanger.dynamic_composition_balance = false \"true: dynamic fluid composition balance equation - false: static fluid composition balance equation\";
//   parameter Boolean dynamicExchanger.steady_state = true \"true: start from steady state - false: start from (P0, h0)\";
//   parameter Real dynamicExchanger.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   Real dynamicExchanger.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, StateSelect = StateSelect.always) \"Fluid temperature\";
//   Real dynamicExchanger.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real dynamicExchanger.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy\";
//   Real dynamicExchanger.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real dynamicExchanger.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", start = 1000.0) \"Fluid spécific heat capacity\";
//   Real dynamicExchanger.Xco2 \"CO2 mass fraction\";
//   Real dynamicExchanger.Xh2o \"H20 mass fraction\";
//   Real dynamicExchanger.Xo2 \"O2 mass fraction\";
//   Real dynamicExchanger.Xso2 \"SO2 mass fraction\";
//   Real dynamicExchanger.Xn2 \"N2 mass fraction\";
//   Real dynamicExchanger.BQ(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the mass balance equation\";
//   Real dynamicExchanger.BH(quantity = \"Power\", unit = \"W\") \"Right hand side of the energybalance equation\";
//   Real dynamicExchanger.BXco2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the CO2 balance equation\";
//   Real dynamicExchanger.BXh2o(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the H2O balance equation\";
//   Real dynamicExchanger.BXo2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the O2 balance equation\";
//   Real dynamicExchanger.BXso2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the SO2 balance equation\";
//   Real dynamicExchanger.he(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet\";
//   Real dynamicExchanger.hs1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #1\";
//   Real dynamicExchanger.hs2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #2\";
//   Real dynamicExchanger.hs3(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #3\";
//   Real dynamicExchanger.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real dynamicExchanger.Ce.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real dynamicExchanger.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Ce.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Ce.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Ce.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Ce.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean dynamicExchanger.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean dynamicExchanger.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real dynamicExchanger.Cs1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real dynamicExchanger.Cs1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real dynamicExchanger.Cs1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean dynamicExchanger.Cs1.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean dynamicExchanger.Cs1.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real dynamicExchanger.Cs2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real dynamicExchanger.Cs2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real dynamicExchanger.Cs2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean dynamicExchanger.Cs2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean dynamicExchanger.Cs2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real dynamicExchanger.Cs3.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real dynamicExchanger.Cs3.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real dynamicExchanger.Cs3.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs3.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs3.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs3.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real dynamicExchanger.Cs3.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean dynamicExchanger.Cs3.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean dynamicExchanger.Cs3.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real dynamicExchanger.Cth.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   Real dynamicExchanger.Cth.W(quantity = \"Power\", unit = \"W\") \"Thermal flow rate. Positive when going into the component\";
//   parameter Real heatSource.T0[1](quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 300.0 \"Source temperature (active if option_temperature=1)\";
//   parameter Real heatSource.W0[1](quantity = \"Power\", unit = \"W\") = 20000.0 \"Heat power emitted by the source (active if option_temperature=2)\";
//   parameter Integer heatSource.option_temperature = 2 \"1:temperature fixed - 2:heat power fixed\";
//   input Real heatSource.ISignal.signal;
//   protected parameter Integer heatSource.N = 1;
//   Real heatSource.C[1].T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   Real heatSource.C[1].W(quantity = \"Power\", unit = \"W\") \"Thermal flow rate. Positive when going into the component\";
//   parameter Real singularPressureLossFlueGases.K(fixed = true) = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 10.0, fixed = false) \"Mass flow\";
//   Real singularPressureLossFlueGases.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLossFlueGases1.K(fixed = true) = 0.01 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases1.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases1.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases1.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 11.0, fixed = false) \"Mass flow\";
//   Real singularPressureLossFlueGases1.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases1.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases1.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases1.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases1.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases1.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases1.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases1.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases1.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases1.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases1.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real rampe.Starttime = 50.0 \"Instant de départ de la rampe (s)\";
//   parameter Real rampe.Duration = 50.0 \"Durée de la rampe (s)\";
//   parameter Real rampe.Initialvalue = 10000.0 \"Valeur initiale de la sortie\";
//   parameter Real rampe.Finalvalue = 20000.0 \"Valeur finale de la sortie\";
//   output Real rampe.y.signal;
//   parameter Real staticFan.VRot(quantity = \"Rotation velocity\", unit = \"1/min\") = 3000.0 \"Rotational speed\";
//   parameter Real staticFan.VRotn(quantity = \"Rotation velocity\", unit = \"1/min\") = 2700.0 \"Nominal rotational speed\";
//   parameter Real staticFan.rm = 1.0 \"Product of the pump mechanical and electrical efficiencies\";
//   parameter Boolean staticFan.adiabatic_compression = false \"true: adiabatic compression - false: non adiabatic compression\";
//   parameter Real staticFan.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   parameter Real staticFan.a1 = 45.876 \"x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)\";
//   parameter Real staticFan.a2 = -50.0 \"x coef. of the pump characteristics hn = f(vol_flow) (s/m2)\";
//   parameter Real staticFan.a3 = 45.59 \"Constant coef. of the pump characteristics hn = f(vol_flow) (m)\";
//   parameter Real staticFan.b1 = -3.0752 \"x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)\";
//   parameter Real staticFan.b2 = 4.6593 \"x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)\";
//   parameter Real staticFan.b3 = -0.1533 \"Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)\";
//   protected constant Real staticFan.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.80665 \"Gravity constant\";
//   protected parameter Real staticFan.eps = 1e-06 \"Small number\";
//   protected parameter Real staticFan.rhmin = 0.05 \"Minimum efficiency to avoid zero crossings\";
//   Real staticFan.rh(start = 0.5) \"Hydraulic efficiency\";
//   Real staticFan.hn(quantity = \"Length\", unit = \"m\", start = 10.0) \"Pump head\";
//   Real staticFan.R \"Ratio VRot/VRotn (s.u.)\";
//   Real staticFan.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real staticFan.Qv(quantity = \"VolumeFlowRate\", unit = \"m3/s\", start = 0.5) \"Volumetric flow\";
//   Real staticFan.Wh(quantity = \"Power\", unit = \"W\") \"Hydraulic power\";
//   Real staticFan.Wm(quantity = \"Power\", unit = \"W\") \"Motor power\";
//   Real staticFan.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 998.0) \"Fluid density\";
//   Real staticFan.deltaP(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100000.0, nominal = 100000.0) \"Pressure variation between the outlet and the inlet\";
//   Real staticFan.deltaH(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy variation between the outlet and the inlet\";
//   Real staticFan.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid average pressure\";
//   Real staticFan.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid average specific enthalpy\";
//   Real staticFan.h1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in\";
//   Real staticFan.h2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy out\";
//   Real staticFan.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0) \"Fluid temperature\";
//   input Boolean staticFan.commandeFan.signal;
//   Real staticFan.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real staticFan.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real staticFan.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean staticFan.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean staticFan.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real staticFan.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real staticFan.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real staticFan.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real staticFan.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean staticFan.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean staticFan.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real staticFan.VRotation.signal;
//   parameter Real singularPressureLossFlueGases2.K(fixed = true) = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases2.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases2.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases2.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 10.0, fixed = false) \"Mass flow\";
//   Real singularPressureLossFlueGases2.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases2.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases2.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases2.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases2.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases2.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases2.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases2.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases2.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases2.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases2.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
// initial equation
//   der(dynamicExchanger.T) = 0.0;
// equation
//   Source_Fumees.C.P = Source_Fumees.P;
//   Source_Fumees.C.Q = Source_Fumees.Q;
//   Source_Fumees.C.T = Source_Fumees.T;
//   Source_Fumees.C.Xco2 = Source_Fumees.Xco2;
//   Source_Fumees.C.Xh2o = Source_Fumees.Xh2o;
//   Source_Fumees.C.Xo2 = Source_Fumees.Xo2;
//   Source_Fumees.C.Xso2 = Source_Fumees.Xso2;
//   Source_Fumees.Xn2 = 1.0 + (-Source_Fumees.Xco2) - Source_Fumees.Xso2 - Source_Fumees.Xo2 - Source_Fumees.Xh2o;
//   Source_Fumees.IPressure.signal = Source_Fumees.P0;
//   Source_Fumees.P = Source_Fumees.IPressure.signal;
//   Source_Fumees.IMassFlow.signal = Source_Fumees.Q0;
//   Source_Fumees.Q = Source_Fumees.IMassFlow.signal;
//   Source_Fumees.ITemperature.signal = Source_Fumees.T0;
//   Source_Fumees.T = Source_Fumees.ITemperature.signal;
//   Puits_Fumees.C.P = Puits_Fumees.P;
//   Puits_Fumees.C.Q = Puits_Fumees.Q;
//   Puits_Fumees.C.T = Puits_Fumees.T;
//   Puits_Fumees.C.Xco2 = Puits_Fumees.Xco2;
//   Puits_Fumees.C.Xh2o = Puits_Fumees.Xh2o;
//   Puits_Fumees.C.Xo2 = Puits_Fumees.Xo2;
//   Puits_Fumees.C.Xso2 = Puits_Fumees.Xso2;
//   Puits_Fumees.Xn2 = 1.0 + (-Puits_Fumees.Xco2) - Puits_Fumees.Xso2 - Puits_Fumees.Xo2 - Puits_Fumees.Xh2o;
//   assert(dynamicExchanger.V > 0.0,\"Volume non-positive\");
//   dynamicExchanger.Cs1.Q = 0.0;
//   dynamicExchanger.Cs1.a = true;
//   dynamicExchanger.Cs2.Q = 0.0;
//   dynamicExchanger.Cs2.a = true;
//   dynamicExchanger.BQ = dynamicExchanger.Ce.Q + (-dynamicExchanger.Cs2.Q) - dynamicExchanger.Cs3.Q - dynamicExchanger.Cs1.Q;
//   0.0 = dynamicExchanger.BQ;
//   dynamicExchanger.P = dynamicExchanger.Ce.P;
//   dynamicExchanger.P = dynamicExchanger.Cs1.P;
//   dynamicExchanger.P = dynamicExchanger.Cs2.P;
//   dynamicExchanger.P = dynamicExchanger.Cs3.P;
//   dynamicExchanger.BH = dynamicExchanger.Ce.Q * dynamicExchanger.he + (-dynamicExchanger.Cs1.Q) * dynamicExchanger.hs1 + (-dynamicExchanger.Cs2.Q) * dynamicExchanger.hs2 + dynamicExchanger.Cth.W - dynamicExchanger.Cs3.Q * dynamicExchanger.hs3;
//   dynamicExchanger.V * dynamicExchanger.rho * dynamicExchanger.cp * der(dynamicExchanger.T) = dynamicExchanger.BH;
//   dynamicExchanger.Cs1.T = dynamicExchanger.T;
//   dynamicExchanger.Cs2.T = dynamicExchanger.T;
//   dynamicExchanger.Cs3.T = dynamicExchanger.T;
//   dynamicExchanger.Cth.T = dynamicExchanger.T;
//   dynamicExchanger.BXco2 = dynamicExchanger.Ce.Xco2 * dynamicExchanger.Ce.Q + (-dynamicExchanger.Cs1.Xco2) * dynamicExchanger.Cs1.Q + (-dynamicExchanger.Cs2.Xco2) * dynamicExchanger.Cs2.Q - dynamicExchanger.Cs3.Xco2 * dynamicExchanger.Cs3.Q;
//   dynamicExchanger.BXh2o = dynamicExchanger.Ce.Xh2o * dynamicExchanger.Ce.Q + (-dynamicExchanger.Cs1.Xh2o) * dynamicExchanger.Cs1.Q + (-dynamicExchanger.Cs2.Xh2o) * dynamicExchanger.Cs2.Q - dynamicExchanger.Cs3.Xh2o * dynamicExchanger.Cs3.Q;
//   dynamicExchanger.BXo2 = dynamicExchanger.Ce.Xo2 * dynamicExchanger.Ce.Q + (-dynamicExchanger.Cs1.Xo2) * dynamicExchanger.Cs1.Q + (-dynamicExchanger.Cs2.Xo2) * dynamicExchanger.Cs2.Q - dynamicExchanger.Cs3.Xo2 * dynamicExchanger.Cs3.Q;
//   dynamicExchanger.BXso2 = dynamicExchanger.Ce.Xso2 * dynamicExchanger.Ce.Q + (-dynamicExchanger.Cs1.Xso2) * dynamicExchanger.Cs1.Q + (-dynamicExchanger.Cs2.Xso2) * dynamicExchanger.Cs2.Q - dynamicExchanger.Cs3.Xso2 * dynamicExchanger.Cs3.Q;
//   dynamicExchanger.Xco2 * dynamicExchanger.BQ = dynamicExchanger.BXco2;
//   dynamicExchanger.Xh2o * dynamicExchanger.BQ = dynamicExchanger.BXh2o;
//   dynamicExchanger.Xo2 * dynamicExchanger.BQ = dynamicExchanger.BXo2;
//   dynamicExchanger.Xso2 * dynamicExchanger.BQ = dynamicExchanger.BXso2;
//   dynamicExchanger.Xn2 = 1.0 + (-dynamicExchanger.Xco2) - dynamicExchanger.Xso2 - dynamicExchanger.Xo2 - dynamicExchanger.Xh2o;
//   dynamicExchanger.Cs1.Xco2 = dynamicExchanger.Xco2;
//   dynamicExchanger.Cs1.Xh2o = dynamicExchanger.Xh2o;
//   dynamicExchanger.Cs1.Xo2 = dynamicExchanger.Xo2;
//   dynamicExchanger.Cs1.Xso2 = dynamicExchanger.Xso2;
//   dynamicExchanger.Cs2.Xco2 = dynamicExchanger.Xco2;
//   dynamicExchanger.Cs2.Xh2o = dynamicExchanger.Xh2o;
//   dynamicExchanger.Cs2.Xo2 = dynamicExchanger.Xo2;
//   dynamicExchanger.Cs2.Xso2 = dynamicExchanger.Xso2;
//   dynamicExchanger.Cs3.Xco2 = dynamicExchanger.Xco2;
//   dynamicExchanger.Cs3.Xh2o = dynamicExchanger.Xh2o;
//   dynamicExchanger.Cs3.Xo2 = dynamicExchanger.Xo2;
//   dynamicExchanger.Cs3.Xso2 = dynamicExchanger.Xso2;
//   dynamicExchanger.he = ThermoSysPro.Properties.FlueGases.FlueGases_h(dynamicExchanger.P, dynamicExchanger.Ce.T, dynamicExchanger.Ce.Xco2, dynamicExchanger.Ce.Xh2o, dynamicExchanger.Ce.Xo2, dynamicExchanger.Ce.Xso2);
//   dynamicExchanger.hs1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(dynamicExchanger.P, dynamicExchanger.Cs1.T, dynamicExchanger.Cs1.Xco2, dynamicExchanger.Cs1.Xh2o, dynamicExchanger.Cs1.Xo2, dynamicExchanger.Cs1.Xso2);
//   dynamicExchanger.hs2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(dynamicExchanger.P, dynamicExchanger.Cs2.T, dynamicExchanger.Cs2.Xco2, dynamicExchanger.Cs2.Xh2o, dynamicExchanger.Cs2.Xo2, dynamicExchanger.Cs2.Xso2);
//   dynamicExchanger.hs3 = ThermoSysPro.Properties.FlueGases.FlueGases_h(dynamicExchanger.P, dynamicExchanger.Cs3.T, dynamicExchanger.Cs3.Xco2, dynamicExchanger.Cs3.Xh2o, dynamicExchanger.Cs3.Xo2, dynamicExchanger.Cs3.Xso2);
//   dynamicExchanger.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(dynamicExchanger.P, dynamicExchanger.T, dynamicExchanger.Xco2, dynamicExchanger.Xh2o, dynamicExchanger.Xo2, dynamicExchanger.Xso2);
//   dynamicExchanger.cp = ThermoSysPro.Properties.FlueGases.FlueGases_cp(dynamicExchanger.P, dynamicExchanger.T, dynamicExchanger.Xco2, dynamicExchanger.Xh2o, dynamicExchanger.Xo2, dynamicExchanger.Xso2);
//   dynamicExchanger.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(dynamicExchanger.P, dynamicExchanger.T, dynamicExchanger.Xco2, dynamicExchanger.Xh2o, dynamicExchanger.Xo2, dynamicExchanger.Xso2);
//   heatSource.C[1].W = -heatSource.ISignal.signal;
//   singularPressureLossFlueGases.C1.P - singularPressureLossFlueGases.C2.P = singularPressureLossFlueGases.deltaPf;
//   singularPressureLossFlueGases.C1.T = singularPressureLossFlueGases.C2.T;
//   singularPressureLossFlueGases.C1.Q = singularPressureLossFlueGases.C2.Q;
//   singularPressureLossFlueGases.C2.Xco2 = singularPressureLossFlueGases.C1.Xco2;
//   singularPressureLossFlueGases.C2.Xh2o = singularPressureLossFlueGases.C1.Xh2o;
//   singularPressureLossFlueGases.C2.Xo2 = singularPressureLossFlueGases.C1.Xo2;
//   singularPressureLossFlueGases.C2.Xso2 = singularPressureLossFlueGases.C1.Xso2;
//   singularPressureLossFlueGases.Q = singularPressureLossFlueGases.C1.Q;
//   singularPressureLossFlueGases.deltaPf = singularPressureLossFlueGases.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases.Q, singularPressureLossFlueGases.eps) / singularPressureLossFlueGases.rho;
//   singularPressureLossFlueGases.P = singularPressureLossFlueGases.C1.P / 2.0 + singularPressureLossFlueGases.C2.P / 2.0;
//   singularPressureLossFlueGases.T = singularPressureLossFlueGases.C2.T;
//   singularPressureLossFlueGases.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases.P, singularPressureLossFlueGases.T, singularPressureLossFlueGases.C2.Xco2, singularPressureLossFlueGases.C2.Xh2o, singularPressureLossFlueGases.C2.Xo2, singularPressureLossFlueGases.C2.Xso2);
//   singularPressureLossFlueGases1.C1.P - singularPressureLossFlueGases1.C2.P = singularPressureLossFlueGases1.deltaPf;
//   singularPressureLossFlueGases1.C1.T = singularPressureLossFlueGases1.C2.T;
//   singularPressureLossFlueGases1.C1.Q = singularPressureLossFlueGases1.C2.Q;
//   singularPressureLossFlueGases1.C2.Xco2 = singularPressureLossFlueGases1.C1.Xco2;
//   singularPressureLossFlueGases1.C2.Xh2o = singularPressureLossFlueGases1.C1.Xh2o;
//   singularPressureLossFlueGases1.C2.Xo2 = singularPressureLossFlueGases1.C1.Xo2;
//   singularPressureLossFlueGases1.C2.Xso2 = singularPressureLossFlueGases1.C1.Xso2;
//   singularPressureLossFlueGases1.Q = singularPressureLossFlueGases1.C1.Q;
//   singularPressureLossFlueGases1.deltaPf = singularPressureLossFlueGases1.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases1.Q, singularPressureLossFlueGases1.eps) / singularPressureLossFlueGases1.rho;
//   singularPressureLossFlueGases1.P = singularPressureLossFlueGases1.C1.P / 2.0 + singularPressureLossFlueGases1.C2.P / 2.0;
//   singularPressureLossFlueGases1.T = singularPressureLossFlueGases1.C2.T;
//   singularPressureLossFlueGases1.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases1.P, singularPressureLossFlueGases1.T, singularPressureLossFlueGases1.C2.Xco2, singularPressureLossFlueGases1.C2.Xh2o, singularPressureLossFlueGases1.C2.Xo2, singularPressureLossFlueGases1.C2.Xso2);
//   rampe.y.signal = if time < rampe.Starttime then rampe.Initialvalue else if time > rampe.Starttime + rampe.Duration then rampe.Finalvalue else rampe.Initialvalue + (rampe.Finalvalue - rampe.Initialvalue) * (time - rampe.Starttime) / rampe.Duration;
//   staticFan.commandeFan.signal = true;
//   staticFan.VRotation.signal = staticFan.VRot;
//   staticFan.C1.Xco2 = staticFan.C2.Xco2;
//   staticFan.C1.Xh2o = staticFan.C2.Xh2o;
//   staticFan.C1.Xo2 = staticFan.C2.Xo2;
//   staticFan.C1.Xso2 = staticFan.C2.Xso2;
//   staticFan.deltaP = staticFan.C2.P - staticFan.C1.P;
//   staticFan.deltaH = staticFan.h2 - staticFan.h1;
//   staticFan.deltaP = 9.80665 * staticFan.rho * staticFan.hn;
//   staticFan.deltaH = 9.80665 * staticFan.hn / staticFan.rh;
//   staticFan.C1.Q = staticFan.C2.Q;
//   staticFan.Q = staticFan.C1.Q;
//   staticFan.Q = staticFan.Qv * staticFan.rho;
//   staticFan.R = if staticFan.commandeFan.signal then staticFan.VRotation.signal / staticFan.VRotn else 0.0;
//   staticFan.hn = staticFan.a1 * staticFan.Qv * abs(staticFan.Qv) + staticFan.a2 * staticFan.Qv * staticFan.R + staticFan.a3 * staticFan.R ^ 2.0;
//   staticFan.rh = max(if noEvent(abs(staticFan.R) > staticFan.eps) then staticFan.b1 * staticFan.Qv ^ 2.0 / staticFan.R ^ 2.0 + staticFan.b2 * staticFan.Qv / staticFan.R + staticFan.b3 else staticFan.b3, staticFan.rhmin);
//   staticFan.Wm = staticFan.Q * staticFan.deltaH / staticFan.rm;
//   staticFan.Wh = staticFan.Qv * staticFan.deltaP / staticFan.rh;
//   staticFan.P = staticFan.C1.P / 2.0 + staticFan.C2.P / 2.0;
//   staticFan.h = staticFan.h1 / 2.0 + staticFan.h2 / 2.0;
//   staticFan.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(staticFan.P, staticFan.T, staticFan.C2.Xco2, staticFan.C2.Xh2o, staticFan.C2.Xo2, staticFan.C2.Xso2);
//   staticFan.h2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(staticFan.P, staticFan.C2.T, staticFan.C2.Xco2, staticFan.C2.Xh2o, staticFan.C2.Xo2, staticFan.C2.Xso2);
//   staticFan.h1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(staticFan.P, staticFan.C1.T, staticFan.C2.Xco2, staticFan.C2.Xh2o, staticFan.C2.Xo2, staticFan.C2.Xso2);
//   staticFan.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(staticFan.P, staticFan.T, staticFan.C2.Xco2, staticFan.C2.Xh2o, staticFan.C2.Xo2, staticFan.C2.Xso2);
//   singularPressureLossFlueGases2.C1.P - singularPressureLossFlueGases2.C2.P = singularPressureLossFlueGases2.deltaPf;
//   singularPressureLossFlueGases2.C1.T = singularPressureLossFlueGases2.C2.T;
//   singularPressureLossFlueGases2.C1.Q = singularPressureLossFlueGases2.C2.Q;
//   singularPressureLossFlueGases2.C2.Xco2 = singularPressureLossFlueGases2.C1.Xco2;
//   singularPressureLossFlueGases2.C2.Xh2o = singularPressureLossFlueGases2.C1.Xh2o;
//   singularPressureLossFlueGases2.C2.Xo2 = singularPressureLossFlueGases2.C1.Xo2;
//   singularPressureLossFlueGases2.C2.Xso2 = singularPressureLossFlueGases2.C1.Xso2;
//   singularPressureLossFlueGases2.Q = singularPressureLossFlueGases2.C1.Q;
//   singularPressureLossFlueGases2.deltaPf = singularPressureLossFlueGases2.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases2.Q, singularPressureLossFlueGases2.eps) / singularPressureLossFlueGases2.rho;
//   singularPressureLossFlueGases2.P = singularPressureLossFlueGases2.C1.P / 2.0 + singularPressureLossFlueGases2.C2.P / 2.0;
//   singularPressureLossFlueGases2.T = singularPressureLossFlueGases2.C2.T;
//   singularPressureLossFlueGases2.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases2.P, singularPressureLossFlueGases2.T, singularPressureLossFlueGases2.C2.Xco2, singularPressureLossFlueGases2.C2.Xh2o, singularPressureLossFlueGases2.C2.Xo2, singularPressureLossFlueGases2.C2.Xso2);
//   dynamicExchanger.Cth.W + heatSource.C[1].W = 0.0;
//   Source_Fumees.C.P = singularPressureLossFlueGases1.C1.P;
//   Source_Fumees.C.T = singularPressureLossFlueGases1.C1.T;
//   Source_Fumees.C.Q = singularPressureLossFlueGases1.C1.Q;
//   Source_Fumees.C.Xco2 = singularPressureLossFlueGases1.C1.Xco2;
//   Source_Fumees.C.Xh2o = singularPressureLossFlueGases1.C1.Xh2o;
//   Source_Fumees.C.Xo2 = singularPressureLossFlueGases1.C1.Xo2;
//   Source_Fumees.C.Xso2 = singularPressureLossFlueGases1.C1.Xso2;
//   Source_Fumees.C.a = singularPressureLossFlueGases1.C1.a;
//   Source_Fumees.C.b = singularPressureLossFlueGases1.C1.b;
//   singularPressureLossFlueGases.C2.P = staticFan.C1.P;
//   singularPressureLossFlueGases.C2.T = staticFan.C1.T;
//   singularPressureLossFlueGases.C2.Q = staticFan.C1.Q;
//   singularPressureLossFlueGases.C2.Xco2 = staticFan.C1.Xco2;
//   singularPressureLossFlueGases.C2.Xh2o = staticFan.C1.Xh2o;
//   singularPressureLossFlueGases.C2.Xo2 = staticFan.C1.Xo2;
//   singularPressureLossFlueGases.C2.Xso2 = staticFan.C1.Xso2;
//   singularPressureLossFlueGases.C2.a = staticFan.C1.a;
//   singularPressureLossFlueGases.C2.b = staticFan.C1.b;
//   singularPressureLossFlueGases2.C1.P = staticFan.C2.P;
//   singularPressureLossFlueGases2.C1.T = staticFan.C2.T;
//   singularPressureLossFlueGases2.C1.Q = staticFan.C2.Q;
//   singularPressureLossFlueGases2.C1.Xco2 = staticFan.C2.Xco2;
//   singularPressureLossFlueGases2.C1.Xh2o = staticFan.C2.Xh2o;
//   singularPressureLossFlueGases2.C1.Xo2 = staticFan.C2.Xo2;
//   singularPressureLossFlueGases2.C1.Xso2 = staticFan.C2.Xso2;
//   singularPressureLossFlueGases2.C1.a = staticFan.C2.a;
//   singularPressureLossFlueGases2.C1.b = staticFan.C2.b;
//   dynamicExchanger.Ce.P = singularPressureLossFlueGases1.C2.P;
//   dynamicExchanger.Ce.T = singularPressureLossFlueGases1.C2.T;
//   dynamicExchanger.Ce.Q = singularPressureLossFlueGases1.C2.Q;
//   dynamicExchanger.Ce.Xco2 = singularPressureLossFlueGases1.C2.Xco2;
//   dynamicExchanger.Ce.Xh2o = singularPressureLossFlueGases1.C2.Xh2o;
//   dynamicExchanger.Ce.Xo2 = singularPressureLossFlueGases1.C2.Xo2;
//   dynamicExchanger.Ce.Xso2 = singularPressureLossFlueGases1.C2.Xso2;
//   dynamicExchanger.Ce.a = singularPressureLossFlueGases1.C2.a;
//   dynamicExchanger.Ce.b = singularPressureLossFlueGases1.C2.b;
//   dynamicExchanger.Cs3.P = singularPressureLossFlueGases.C1.P;
//   dynamicExchanger.Cs3.T = singularPressureLossFlueGases.C1.T;
//   dynamicExchanger.Cs3.Q = singularPressureLossFlueGases.C1.Q;
//   dynamicExchanger.Cs3.Xco2 = singularPressureLossFlueGases.C1.Xco2;
//   dynamicExchanger.Cs3.Xh2o = singularPressureLossFlueGases.C1.Xh2o;
//   dynamicExchanger.Cs3.Xo2 = singularPressureLossFlueGases.C1.Xo2;
//   dynamicExchanger.Cs3.Xso2 = singularPressureLossFlueGases.C1.Xso2;
//   dynamicExchanger.Cs3.a = singularPressureLossFlueGases.C1.a;
//   dynamicExchanger.Cs3.b = singularPressureLossFlueGases.C1.b;
//   Puits_Fumees.C.P = singularPressureLossFlueGases2.C2.P;
//   Puits_Fumees.C.T = singularPressureLossFlueGases2.C2.T;
//   Puits_Fumees.C.Q = singularPressureLossFlueGases2.C2.Q;
//   Puits_Fumees.C.Xco2 = singularPressureLossFlueGases2.C2.Xco2;
//   Puits_Fumees.C.Xh2o = singularPressureLossFlueGases2.C2.Xh2o;
//   Puits_Fumees.C.Xo2 = singularPressureLossFlueGases2.C2.Xo2;
//   Puits_Fumees.C.Xso2 = singularPressureLossFlueGases2.C2.Xso2;
//   Puits_Fumees.C.a = singularPressureLossFlueGases2.C2.a;
//   Puits_Fumees.C.b = singularPressureLossFlueGases2.C2.b;
//   heatSource.ISignal.signal = rampe.y.signal;
//   dynamicExchanger.Cth.T = heatSource.C[1].T;
// end ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes;
// "
// "[Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// "
// "Check of ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes completed successfully.
// 
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// 
// Class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes has 199 equation(s) and 199 variable(s).
// 151 of these are trivial equation(s).
// "
// ""
// endResult
