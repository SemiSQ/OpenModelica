// name:     ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.mos [instantiate and checkModel]
// keywords: instantiate and check ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1_* ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1 ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.exe ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.cpp ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.makefile ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.libs ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.log ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.c ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("../ThermoSysPro/package.mo"); getErrorString();

instantiateModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1); getErrorString();
checkModel(ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1); getErrorString();

// Result:
// true
// ""
// true
// "[GTCombustionChamber.mo:169:20-169:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCombustionChamber.mo:173:20-173:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:153:20-153:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:157:20-157:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GridFurnace.mo:85:20-85:23:writable] Warning: Treating .01 as 0.01. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Pro_FlueGases.mo:4:40-4:42:writable] Warning: Treating .5 as 0.5. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalHeatTransferCoefficient.mo:93:26-93:29:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalTwoPhaseFlowHeatTransferCoefficient.mo:92:24-92:27:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CombustionTurbine.mo:12:18-12:21:writable] Warning: Treating .07 as 0.07. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCICOBarilla.mo:7:28-7:35:writable] Warning: Treating .881225 as 0.881225. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GasTurbine.mo:12:28-12:30:writable] Warning: Treating .9 as 0.9. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [AbsorptionRefrigeratorSystem.mo:4:25-4:32:writable] Warning: Treating .362979 as 0.362979. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:55:12-55:16:writable] Warning: Treating .011 as 0.011. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:58:9-58:12:writable] Warning: Treating .50 as 0.50. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:59:8-59:13:writable] Warning: Treating .2479 as 0.2479. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:60:8-60:13:writable] Warning: Treating .0297 as 0.0297. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:61:8-61:13:writable] Warning: Treating .2088 as 0.2088. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:62:8-62:13:writable] Warning: Treating .0017 as 0.0017. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:63:8-63:13:writable] Warning: Treating .0003 as 0.0003. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:132:8-132:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:136:8-136:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BaseIF97.mo:4589:34-4589:42:writable] Warning: Treating .5132047 as 0.5132047. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:22-4090:39:writable] Warning: Treating .0158271919734802 as 0.0158271919734802. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:53-4090:70:writable] Warning: Treating .0942738402188500 as 0.0942738402188500. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:30-4091:46:writable] Warning: Treating .155071987336585 as 0.155071987336585. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:60-4091:76:writable] Warning: Treating .188821573960182 as 0.188821573960182. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4092:46-4092:62:writable] Warning: Treating .199773405226859 as 0.199773405226859. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4093:29-4093:45:writable] Warning: Treating .224926465333340 as 0.224926465333340. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4094:17-4094:33:writable] Warning: Treating .242611071901408 as 0.242611071901408. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Degasifier.mo:100:71-100:73:writable] Warning: Treating .1 as 0.1. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// "
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T \"Compute specific heat capacity at constant pressure from temperature and gas data\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity at temperature T\";
// algorithm
//   cp := if T < data.Tlimit then data.R * T ^ -2.0 * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T)))))) else data.R * T ^ -2.0 * (data.ahigh[1] + T * (data.ahigh[2] + T * (data.ahigh[3] + T * (data.ahigh[4] + T * (data.ahigh[5] + T * (data.ahigh[6] + data.ahigh[7] * T))))));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := (if T < data.Tlimit then data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1]) / T else data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1]) / T) + (if exclEnthForm then -data.Hf else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0) + (if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0);
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function ThermoSysPro.Functions.ThermoSquare \"Thermodynamic square\"
//   input Real x;
//   input Real dx;
//   output Real y;
// algorithm
//   y := if abs(x) > dx then x * abs(x) else x * dx;
// end ThermoSysPro.Functions.ThermoSquare;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_cp \"Specific heat capacity\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected Real Xn2 \"N2 mass fraction\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   cp := ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp(state);
// end ThermoSysPro.Properties.FlueGases.FlueGases_cp;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_h \"Specific enthalpy\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state0;
//   protected Real Xn2 \"N2 mass fraction\";
//   protected constant Real Hlat = 2501599.9019 \"Phase transition energy\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   state0.p := 611.2;
//   state0.T := 273.16;
//   state0.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state) + 2501599.9019 * Xh2o - ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy(state0);
// end ThermoSysPro.Properties.FlueGases.FlueGases_h;
// 
// function ThermoSysPro.Properties.FlueGases.FlueGases_rho \"Density\"
//   input Real PMF(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Flue gases average pressure\";
//   input Real TMF(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Flue gases average temperature\";
//   input Real Xco2 \"CO2 mass fraction\";
//   input Real Xh2o \"H2O mass fraction\";
//   input Real Xo2 \"O2 mass fraction\";
//   input Real Xso2 \"SO2 mass fraction\";
//   output Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Density\";
//   protected ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state;
//   protected Real Xn2 \"N2 mass fraction\";
// algorithm
//   Xn2 := 1.0 + (-Xco2) - Xso2 - Xo2 - Xh2o;
//   state.p := PMF;
//   state.T := TMF;
//   state.X := {Xn2, Xo2, Xh2o, Xco2, Xso2};
//   rho := ThermoSysPro.Properties.ModelicaMediaFlueGases.density(state);
// end ThermoSysPro.Properties.FlueGases.FlueGases_rho;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState \"Automatically generated record constructor for ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[5] X;
//   output ThermodynamicState res;
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.density \"Return density of ideal gas\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := state.p / (state.T * (state.X[1] + state.X[2] + state.X[3] + state.X[4] + state.X[5]) * 296.803386950531);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.density;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768, 0.232, 0.0, 0.0, 0.0} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0.0, 309498.454311151, 1000.0, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.803386950531), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0.0, 271263.422378339, 1000.0, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.19346705e-16}, {-16890.10929, 17.38716506}, 259.836993887271), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.8172529, 549760.647628014, 1000.0, {-39479.6083, 575.573102, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.83683048e-07, 9.42646893e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.523329085088), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.54440518, 212805.621513537, 1000.0, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.29152319, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.33003659e-16}, {-39083.5059, -26.52669281}, 188.924482214067), T, exclEnthForm, refChoice, h_off), Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(Modelica.Media.IdealGases.Common.DataRecord(\"SO2\", 0.0640638, -4633037.69055223, 164650.348558781, 1000.0, {-53108.4214, 909.031167, -2.356891244, 0.02204449885, -2.510781471e-05, 1.446300484e-08, -3.36907094e-12}, {-41137.5208, 40.45512519}, {-112764.0116, -825.226138, 7.61617863, -0.000199932761, 5.65563143e-08, -5.45431661e-12, 2.918294102e-16}, {-33513.0869, -16.55776085}, 129.78424632944), T, exclEnthForm, refChoice, h_off)};
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy \"Return specific enthalpy\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := ThermoSysPro.Properties.ModelicaMediaFlueGases.h_TX(state.T, {state.X[1], state.X[2], state.X[3], state.X[4], state.X[5]}, true, Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K, 0.0);
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.specificEnthalpy;
// 
// function ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp \"Return specific heat capacity at constant pressure\"
//   input ThermoSysPro.Properties.ModelicaMediaFlueGases.ThermodynamicState state \"thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
// algorithm
//   cp := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"N2\", 0.0280134, 0.0, 309498.454311151, 1000.0, {22103.71497, -381.846182, 6.08273836, -0.00853091441, 1.384646189e-05, -9.62579362e-09, 2.519705809e-12}, {710.846086, -10.76003744}, {587712.406, -2239.249073, 6.06694922, -0.00061396855, 1.491806679e-07, -1.923105485e-11, 1.061954386e-15}, {12832.10415, -15.86640027}, 296.803386950531), state.T) * state.X[1] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"O2\", 0.0319988, 0.0, 271263.422378339, 1000.0, {-34255.6342, 484.700097, 1.119010961, 0.00429388924, -6.83630052e-07, -2.0233727e-09, 1.039040018e-12}, {-3391.45487, 18.4969947}, {-1037939.022, 2344.830282, 1.819732036, 0.001267847582, -2.188067988e-07, 2.053719572e-11, -8.19346705e-16}, {-16890.10929, 17.38716506}, 259.836993887271), state.T) * state.X[2] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\", 0.01801528, -13423382.8172529, 549760.647628014, 1000.0, {-39479.6083, 575.573102, 0.931782653, 0.00722271286, -7.34255737e-06, 4.95504349e-09, -1.336933246e-12}, {-33039.7431, 17.24205775}, {1034972.096, -2412.698562, 4.64611078, 0.002291998307, -6.83683048e-07, 9.42646893e-11, -4.82238053e-15}, {-13842.86509, -7.97814851}, 461.523329085088), state.T) * state.X[3] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"CO2\", 0.0440095, -8941478.54440518, 212805.621513537, 1000.0, {49436.5054, -626.411601, 5.30172524, 0.002503813816, -2.127308728e-07, -7.68998878e-10, 2.849677801e-13}, {-45281.9846, -7.04827944}, {117696.2419, -1788.791477, 8.29152319, -9.22315678e-05, 4.86367688e-09, -1.891053312e-12, 6.33003659e-16}, {-39083.5059, -26.52669281}, 188.924482214067), state.T) * state.X[4] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(Modelica.Media.IdealGases.Common.DataRecord(\"SO2\", 0.0640638, -4633037.69055223, 164650.348558781, 1000.0, {-53108.4214, 909.031167, -2.356891244, 0.02204449885, -2.510781471e-05, 1.446300484e-08, -3.36907094e-12}, {-41137.5208, 40.45512519}, {-112764.0116, -825.226138, 7.61617863, -0.000199932761, 5.65563143e-08, -5.45431661e-12, 2.918294102e-16}, {-33513.0869, -16.55776085}, 129.78424632944), state.T) * state.X[5];
// end ThermoSysPro.Properties.ModelicaMediaFlueGases.specificHeatCapacityCp;
// 
// class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1
//   parameter Real singularPressureLossFlueGases1.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases1.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases1.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases1.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases1.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases1.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases1.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases1.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases1.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases1.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases1.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases1.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases1.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases1.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases1.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases1.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sourceFlueGasesP.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 200000.0 \"Source pressure\";
//   parameter Real sourceFlueGasesP.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceFlueGasesP.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceFlueGasesP.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceFlueGasesP.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceFlueGasesP.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceFlueGasesP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceFlueGasesP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceFlueGasesP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceFlueGasesP.Xn2 \"N2 mas fraction\";
//   Real sourceFlueGasesP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceFlueGasesP.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceFlueGasesP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceFlueGasesP.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceFlueGasesP.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceFlueGasesP.ITemperature.signal;
//   input Real sourceFlueGasesP.IPressure.signal;
//   parameter Real sinkFlueGasesP.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Sink pressure\";
//   Real sinkFlueGasesP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sinkFlueGasesP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sinkFlueGasesP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sinkFlueGasesP.Xco2 \"CO2 mass fraction\";
//   Real sinkFlueGasesP.Xh2o \"H2O mass fraction\";
//   Real sinkFlueGasesP.Xo2 \"O2 mass fraction\";
//   Real sinkFlueGasesP.Xso2 \"SO2 mass fraction\";
//   Real sinkFlueGasesP.Xn2 \"N2 mass fraction\";
//   Real sinkFlueGasesP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sinkFlueGasesP.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sinkFlueGasesP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean sinkFlueGasesP.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean sinkFlueGasesP.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sinkFlueGasesP.IPressure.signal;
//   parameter Real volumeFlueGasesATh.V(quantity = \"Volume\", unit = \"m3\") = 1.0 \"Volume\";
//   parameter Real volumeFlueGasesATh.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Initial fluid pressure (active if dynamic_mass_balance=true and steady_state=false)\";
//   parameter Real volumeFlueGasesATh.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 400.0 \"Initial fluid temperature (active if steady_state=false)\";
//   parameter Boolean volumeFlueGasesATh.dynamic_mass_balance = false \"true: dynamic mass balance equation - false: static mass balance equation\";
//   parameter Boolean volumeFlueGasesATh.dynamic_composition_balance = false \"true: dynamic fluid composition balance equation - false: static fluid composition balance equation\";
//   parameter Boolean volumeFlueGasesATh.steady_state = true \"true: start from steady state - false: start from (P0, h0)\";
//   parameter Real volumeFlueGasesATh.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   Real volumeFlueGasesATh.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, StateSelect = StateSelect.always) \"Fluid temperature\";
//   Real volumeFlueGasesATh.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real volumeFlueGasesATh.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy\";
//   Real volumeFlueGasesATh.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real volumeFlueGasesATh.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", start = 1000.0) \"Fluid spécific heat capacity\";
//   Real volumeFlueGasesATh.Xco2 \"CO2 mass fraction\";
//   Real volumeFlueGasesATh.Xh2o \"H20 mass fraction\";
//   Real volumeFlueGasesATh.Xo2 \"O2 mass fraction\";
//   Real volumeFlueGasesATh.Xso2 \"SO2 mass fraction\";
//   Real volumeFlueGasesATh.Xn2 \"N2 mass fraction\";
//   Real volumeFlueGasesATh.BQ(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the mass balance equation\";
//   Real volumeFlueGasesATh.BH(quantity = \"Power\", unit = \"W\") \"Right hand side of the energybalance equation\";
//   Real volumeFlueGasesATh.BXco2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the CO2 balance equation\";
//   Real volumeFlueGasesATh.BXh2o(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the H2O balance equation\";
//   Real volumeFlueGasesATh.BXo2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the O2 balance equation\";
//   Real volumeFlueGasesATh.BXso2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the SO2 balance equation\";
//   Real volumeFlueGasesATh.he1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #1\";
//   Real volumeFlueGasesATh.he2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #2\";
//   Real volumeFlueGasesATh.hs1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #1\";
//   Real volumeFlueGasesATh.hs2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at outlet #2\";
//   Real volumeFlueGasesATh.Ce1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesATh.Ce1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesATh.Ce1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean volumeFlueGasesATh.Ce1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean volumeFlueGasesATh.Ce1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesATh.Cs2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesATh.Cs2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesATh.Cs2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean volumeFlueGasesATh.Cs2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean volumeFlueGasesATh.Cs2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesATh.Cs1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesATh.Cs1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesATh.Cs1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Cs1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean volumeFlueGasesATh.Cs1.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean volumeFlueGasesATh.Cs1.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesATh.Cth.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   Real volumeFlueGasesATh.Cth.W(quantity = \"Power\", unit = \"W\") \"Thermal flow rate. Positive when going into the component\";
//   Real volumeFlueGasesATh.Ce2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesATh.Ce2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesATh.Ce2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesATh.Ce2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean volumeFlueGasesATh.Ce2.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean volumeFlueGasesATh.Ce2.b \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLossFlueGases2.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases2.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases2.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases2.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases2.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases2.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases2.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases2.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases2.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases2.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases2.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases2.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases2.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases2.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases2.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases2.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sinkFlueGasesP1.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Sink pressure\";
//   Real sinkFlueGasesP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sinkFlueGasesP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sinkFlueGasesP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sinkFlueGasesP1.Xco2 \"CO2 mass fraction\";
//   Real sinkFlueGasesP1.Xh2o \"H2O mass fraction\";
//   Real sinkFlueGasesP1.Xo2 \"O2 mass fraction\";
//   Real sinkFlueGasesP1.Xso2 \"SO2 mass fraction\";
//   Real sinkFlueGasesP1.Xn2 \"N2 mass fraction\";
//   Real sinkFlueGasesP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sinkFlueGasesP1.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sinkFlueGasesP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP1.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP1.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP1.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sinkFlueGasesP1.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean sinkFlueGasesP1.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean sinkFlueGasesP1.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sinkFlueGasesP1.IPressure.signal;
//   parameter Real singularPressureLossFlueGases4.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases4.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases4.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases4.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases4.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases4.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases4.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases4.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases4.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases4.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases4.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases4.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases4.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases4.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases4.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases4.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases4.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases4.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases4.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real volumeFlueGasesCTh.V(quantity = \"Volume\", unit = \"m3\") = 1.0 \"Volume\";
//   parameter Real volumeFlueGasesCTh.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 100000.0 \"Initial fluid pressure (active if dynamic_mass_balance=true and steady_state=false)\";
//   parameter Real volumeFlueGasesCTh.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 400.0 \"Initial fluid temperature (active if steady_state=false)\";
//   parameter Boolean volumeFlueGasesCTh.dynamic_mass_balance = false \"true: dynamic mass balance equation - false: static mass balance equation\";
//   parameter Boolean volumeFlueGasesCTh.dynamic_composition_balance = false \"true: dynamic fluid composition balance equation - false: static fluid composition balance equation\";
//   parameter Boolean volumeFlueGasesCTh.steady_state = true \"true: start from steady state - false: start from (P0, h0)\";
//   parameter Real volumeFlueGasesCTh.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   Real volumeFlueGasesCTh.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 500.0, nominal = 500.0, StateSelect = StateSelect.always) \"Fluid temperature\";
//   Real volumeFlueGasesCTh.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real volumeFlueGasesCTh.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy\";
//   Real volumeFlueGasesCTh.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real volumeFlueGasesCTh.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", start = 1000.0) \"Fluid spécific heat capacity\";
//   Real volumeFlueGasesCTh.Xco2 \"CO2 mass fraction\";
//   Real volumeFlueGasesCTh.Xh2o \"H20 mass fraction\";
//   Real volumeFlueGasesCTh.Xo2 \"O2 mass fraction\";
//   Real volumeFlueGasesCTh.Xso2 \"SO2 mass fraction\";
//   Real volumeFlueGasesCTh.Xn2 \"N2 mass fraction\";
//   Real volumeFlueGasesCTh.BQ(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the mass balance equation\";
//   Real volumeFlueGasesCTh.BH(quantity = \"Power\", unit = \"W\") \"Right hand side of the energybalance equation\";
//   Real volumeFlueGasesCTh.BXco2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the CO2 balance equation\";
//   Real volumeFlueGasesCTh.BXh2o(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the H2O balance equation\";
//   Real volumeFlueGasesCTh.BXo2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the O2 balance equation\";
//   Real volumeFlueGasesCTh.BXso2(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Right hand side of the SO2 balance equation\";
//   Real volumeFlueGasesCTh.he1(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #1\";
//   Real volumeFlueGasesCTh.he2(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #2\";
//   Real volumeFlueGasesCTh.he3(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at inlet #3\";
//   Real volumeFlueGasesCTh.hs(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy at the outlet\";
//   Real volumeFlueGasesCTh.Ce1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesCTh.Ce1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesCTh.Ce1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean volumeFlueGasesCTh.Ce1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean volumeFlueGasesCTh.Ce1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesCTh.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesCTh.Cs.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesCTh.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Cs.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Cs.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Cs.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Cs.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean volumeFlueGasesCTh.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean volumeFlueGasesCTh.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesCTh.Cth.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   Real volumeFlueGasesCTh.Cth.W(quantity = \"Power\", unit = \"W\") \"Thermal flow rate. Positive when going into the component\";
//   Real volumeFlueGasesCTh.Ce2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesCTh.Ce2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesCTh.Ce2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean volumeFlueGasesCTh.Ce2.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean volumeFlueGasesCTh.Ce2.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real volumeFlueGasesCTh.Ce3.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real volumeFlueGasesCTh.Ce3.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real volumeFlueGasesCTh.Ce3.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce3.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce3.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce3.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real volumeFlueGasesCTh.Ce3.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean volumeFlueGasesCTh.Ce3.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean volumeFlueGasesCTh.Ce3.b \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLossFlueGases3.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases3.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases3.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases3.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases3.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases3.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases3.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases3.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases3.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases3.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases3.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases3.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases3.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases3.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases3.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases3.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases3.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases3.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases3.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real singularPressureLossFlueGases5.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases5.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases5.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases5.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases5.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases5.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases5.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases5.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases5.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases5.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases5.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases5.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases5.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases5.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases5.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases5.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases5.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases5.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases5.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sourceFlueGasesP1.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 200000.0 \"Source pressure\";
//   parameter Real sourceFlueGasesP1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceFlueGasesP1.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceFlueGasesP1.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceFlueGasesP1.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceFlueGasesP1.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceFlueGasesP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceFlueGasesP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceFlueGasesP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceFlueGasesP1.Xn2 \"N2 mas fraction\";
//   Real sourceFlueGasesP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceFlueGasesP1.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceFlueGasesP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP1.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP1.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP1.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP1.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceFlueGasesP1.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceFlueGasesP1.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceFlueGasesP1.ITemperature.signal;
//   input Real sourceFlueGasesP1.IPressure.signal;
//   parameter Real singularPressureLossFlueGases6.K = 10.0 \"Friction pressure loss coefficient\";
//   parameter Real singularPressureLossFlueGases6.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   protected parameter Real singularPressureLossFlueGases6.eps = 0.001 \"Small number for pressure loss equation\";
//   Real singularPressureLossFlueGases6.deltaPf(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100.0, nominal = 100000.0) \"Friction pressure loss\";
//   Real singularPressureLossFlueGases6.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow\";
//   Real singularPressureLossFlueGases6.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 1.0) \"Fluid density\";
//   Real singularPressureLossFlueGases6.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 290.0, nominal = 500.0) \"Fluid temperature\";
//   Real singularPressureLossFlueGases6.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Average fluid pressure\";
//   Real singularPressureLossFlueGases6.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases6.C1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases6.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C1.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C1.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C1.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C1.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   input Boolean singularPressureLossFlueGases6.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean singularPressureLossFlueGases6.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real singularPressureLossFlueGases6.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real singularPressureLossFlueGases6.C2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real singularPressureLossFlueGases6.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C2.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C2.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C2.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real singularPressureLossFlueGases6.C2.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean singularPressureLossFlueGases6.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean singularPressureLossFlueGases6.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   parameter Real sourceFlueGasesP2.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 200000.0 \"Source pressure\";
//   parameter Real sourceFlueGasesP2.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 400.0 \"Source temperature\";
//   parameter Real sourceFlueGasesP2.Xco2 = 0.1 \"CO2 mass fraction\";
//   parameter Real sourceFlueGasesP2.Xh2o = 0.05 \"H2O mass fraction\";
//   parameter Real sourceFlueGasesP2.Xo2 = 0.22 \"O2 mass fraction\";
//   parameter Real sourceFlueGasesP2.Xso2 = 0.0 \"SO2 mass fraction\";
//   Real sourceFlueGasesP2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceFlueGasesP2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow\";
//   Real sourceFlueGasesP2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceFlueGasesP2.Xn2 \"N2 mas fraction\";
//   Real sourceFlueGasesP2.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceFlueGasesP2.C.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature in the control volume\";
//   Real sourceFlueGasesP2.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP2.C.Xco2 \"CO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP2.C.Xh2o \"H2O mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP2.C.Xo2 \"O2 mass fraction of the fluid crossing the boundary of the control volume\";
//   Real sourceFlueGasesP2.C.Xso2 \"SO2 mass fraction of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceFlueGasesP2.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceFlueGasesP2.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceFlueGasesP2.ITemperature.signal;
//   input Real sourceFlueGasesP2.IPressure.signal;
// initial equation
//   der(volumeFlueGasesATh.T) = 0.0;
//   der(volumeFlueGasesCTh.T) = 0.0;
// equation
//   singularPressureLossFlueGases1.C1.P - singularPressureLossFlueGases1.C2.P = singularPressureLossFlueGases1.deltaPf;
//   singularPressureLossFlueGases1.C1.T = singularPressureLossFlueGases1.C2.T;
//   singularPressureLossFlueGases1.C1.Q = singularPressureLossFlueGases1.C2.Q;
//   singularPressureLossFlueGases1.C2.Xco2 = singularPressureLossFlueGases1.C1.Xco2;
//   singularPressureLossFlueGases1.C2.Xh2o = singularPressureLossFlueGases1.C1.Xh2o;
//   singularPressureLossFlueGases1.C2.Xo2 = singularPressureLossFlueGases1.C1.Xo2;
//   singularPressureLossFlueGases1.C2.Xso2 = singularPressureLossFlueGases1.C1.Xso2;
//   singularPressureLossFlueGases1.Q = singularPressureLossFlueGases1.C1.Q;
//   singularPressureLossFlueGases1.deltaPf = singularPressureLossFlueGases1.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases1.Q, singularPressureLossFlueGases1.eps) / singularPressureLossFlueGases1.rho;
//   singularPressureLossFlueGases1.P = singularPressureLossFlueGases1.C1.P / 2.0 + singularPressureLossFlueGases1.C2.P / 2.0;
//   singularPressureLossFlueGases1.T = singularPressureLossFlueGases1.C2.T;
//   singularPressureLossFlueGases1.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases1.P, singularPressureLossFlueGases1.T, singularPressureLossFlueGases1.C2.Xco2, singularPressureLossFlueGases1.C2.Xh2o, singularPressureLossFlueGases1.C2.Xo2, singularPressureLossFlueGases1.C2.Xso2);
//   sourceFlueGasesP.C.P = sourceFlueGasesP.P;
//   sourceFlueGasesP.C.Q = sourceFlueGasesP.Q;
//   sourceFlueGasesP.C.T = sourceFlueGasesP.T;
//   sourceFlueGasesP.C.Xco2 = sourceFlueGasesP.Xco2;
//   sourceFlueGasesP.C.Xh2o = sourceFlueGasesP.Xh2o;
//   sourceFlueGasesP.C.Xo2 = sourceFlueGasesP.Xo2;
//   sourceFlueGasesP.C.Xso2 = sourceFlueGasesP.Xso2;
//   sourceFlueGasesP.Xn2 = 1.0 + (-sourceFlueGasesP.Xco2) - sourceFlueGasesP.Xso2 - sourceFlueGasesP.Xo2 - sourceFlueGasesP.Xh2o;
//   sourceFlueGasesP.IPressure.signal = sourceFlueGasesP.P0;
//   sourceFlueGasesP.P = sourceFlueGasesP.IPressure.signal;
//   sourceFlueGasesP.ITemperature.signal = sourceFlueGasesP.T0;
//   sourceFlueGasesP.T = sourceFlueGasesP.ITemperature.signal;
//   sinkFlueGasesP.C.P = sinkFlueGasesP.P;
//   sinkFlueGasesP.C.Q = sinkFlueGasesP.Q;
//   sinkFlueGasesP.C.T = sinkFlueGasesP.T;
//   sinkFlueGasesP.C.Xco2 = sinkFlueGasesP.Xco2;
//   sinkFlueGasesP.C.Xh2o = sinkFlueGasesP.Xh2o;
//   sinkFlueGasesP.C.Xo2 = sinkFlueGasesP.Xo2;
//   sinkFlueGasesP.C.Xso2 = sinkFlueGasesP.Xso2;
//   sinkFlueGasesP.Xn2 = 1.0 + (-sinkFlueGasesP.Xco2) - sinkFlueGasesP.Xso2 - sinkFlueGasesP.Xo2 - sinkFlueGasesP.Xh2o;
//   sinkFlueGasesP.IPressure.signal = sinkFlueGasesP.P0;
//   sinkFlueGasesP.P = sinkFlueGasesP.IPressure.signal;
//   assert(volumeFlueGasesATh.V > 0.0,\"Volume non-positive\");
//   volumeFlueGasesATh.BQ = volumeFlueGasesATh.Ce1.Q + volumeFlueGasesATh.Ce2.Q + (-volumeFlueGasesATh.Cs1.Q) - volumeFlueGasesATh.Cs2.Q;
//   0.0 = volumeFlueGasesATh.BQ;
//   volumeFlueGasesATh.P = volumeFlueGasesATh.Ce1.P;
//   volumeFlueGasesATh.P = volumeFlueGasesATh.Ce2.P;
//   volumeFlueGasesATh.P = volumeFlueGasesATh.Cs1.P;
//   volumeFlueGasesATh.P = volumeFlueGasesATh.Cs2.P;
//   volumeFlueGasesATh.BH = volumeFlueGasesATh.Ce1.Q * volumeFlueGasesATh.he1 + volumeFlueGasesATh.Ce2.Q * volumeFlueGasesATh.he2 + (-volumeFlueGasesATh.Cs1.Q) * volumeFlueGasesATh.hs1 + volumeFlueGasesATh.Cth.W - volumeFlueGasesATh.Cs2.Q * volumeFlueGasesATh.hs2;
//   volumeFlueGasesATh.V * volumeFlueGasesATh.rho * volumeFlueGasesATh.cp * der(volumeFlueGasesATh.T) = volumeFlueGasesATh.BH;
//   volumeFlueGasesATh.Cs1.T = volumeFlueGasesATh.T;
//   volumeFlueGasesATh.Cs2.T = volumeFlueGasesATh.T;
//   volumeFlueGasesATh.Cth.T = volumeFlueGasesATh.T;
//   volumeFlueGasesATh.BXco2 = volumeFlueGasesATh.Ce1.Xco2 * volumeFlueGasesATh.Ce1.Q + volumeFlueGasesATh.Ce2.Xco2 * volumeFlueGasesATh.Ce2.Q + (-volumeFlueGasesATh.Cs1.Xco2) * volumeFlueGasesATh.Cs1.Q - volumeFlueGasesATh.Cs2.Xco2 * volumeFlueGasesATh.Cs2.Q;
//   volumeFlueGasesATh.BXh2o = volumeFlueGasesATh.Ce1.Xh2o * volumeFlueGasesATh.Ce1.Q + volumeFlueGasesATh.Ce2.Xh2o * volumeFlueGasesATh.Ce2.Q + (-volumeFlueGasesATh.Cs1.Xh2o) * volumeFlueGasesATh.Cs1.Q - volumeFlueGasesATh.Cs2.Xh2o * volumeFlueGasesATh.Cs2.Q;
//   volumeFlueGasesATh.BXo2 = volumeFlueGasesATh.Ce1.Xo2 * volumeFlueGasesATh.Ce1.Q + volumeFlueGasesATh.Ce2.Xo2 * volumeFlueGasesATh.Ce2.Q + (-volumeFlueGasesATh.Cs1.Xo2) * volumeFlueGasesATh.Cs1.Q - volumeFlueGasesATh.Cs2.Xo2 * volumeFlueGasesATh.Cs2.Q;
//   volumeFlueGasesATh.BXso2 = volumeFlueGasesATh.Ce1.Xso2 * volumeFlueGasesATh.Ce1.Q + volumeFlueGasesATh.Ce2.Xso2 * volumeFlueGasesATh.Ce2.Q + (-volumeFlueGasesATh.Cs1.Xso2) * volumeFlueGasesATh.Cs1.Q - volumeFlueGasesATh.Cs2.Xso2 * volumeFlueGasesATh.Cs2.Q;
//   volumeFlueGasesATh.Xco2 * volumeFlueGasesATh.BQ = volumeFlueGasesATh.BXco2;
//   volumeFlueGasesATh.Xh2o * volumeFlueGasesATh.BQ = volumeFlueGasesATh.BXh2o;
//   volumeFlueGasesATh.Xo2 * volumeFlueGasesATh.BQ = volumeFlueGasesATh.BXo2;
//   volumeFlueGasesATh.Xso2 * volumeFlueGasesATh.BQ = volumeFlueGasesATh.BXso2;
//   volumeFlueGasesATh.Xn2 = 1.0 + (-volumeFlueGasesATh.Xco2) - volumeFlueGasesATh.Xso2 - volumeFlueGasesATh.Xo2 - volumeFlueGasesATh.Xh2o;
//   volumeFlueGasesATh.Cs1.Xco2 = volumeFlueGasesATh.Xco2;
//   volumeFlueGasesATh.Cs1.Xh2o = volumeFlueGasesATh.Xh2o;
//   volumeFlueGasesATh.Cs1.Xo2 = volumeFlueGasesATh.Xo2;
//   volumeFlueGasesATh.Cs1.Xso2 = volumeFlueGasesATh.Xso2;
//   volumeFlueGasesATh.Cs2.Xco2 = volumeFlueGasesATh.Xco2;
//   volumeFlueGasesATh.Cs2.Xh2o = volumeFlueGasesATh.Xh2o;
//   volumeFlueGasesATh.Cs2.Xo2 = volumeFlueGasesATh.Xo2;
//   volumeFlueGasesATh.Cs2.Xso2 = volumeFlueGasesATh.Xso2;
//   volumeFlueGasesATh.he1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesATh.P, volumeFlueGasesATh.Ce1.T, volumeFlueGasesATh.Ce1.Xco2, volumeFlueGasesATh.Ce1.Xh2o, volumeFlueGasesATh.Ce1.Xo2, volumeFlueGasesATh.Ce1.Xso2);
//   volumeFlueGasesATh.he2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesATh.P, volumeFlueGasesATh.Ce2.T, volumeFlueGasesATh.Ce2.Xco2, volumeFlueGasesATh.Ce2.Xh2o, volumeFlueGasesATh.Ce2.Xo2, volumeFlueGasesATh.Ce2.Xso2);
//   volumeFlueGasesATh.hs1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesATh.P, volumeFlueGasesATh.Cs1.T, volumeFlueGasesATh.Cs1.Xco2, volumeFlueGasesATh.Cs1.Xh2o, volumeFlueGasesATh.Cs1.Xo2, volumeFlueGasesATh.Cs1.Xso2);
//   volumeFlueGasesATh.hs2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesATh.P, volumeFlueGasesATh.Cs2.T, volumeFlueGasesATh.Cs2.Xco2, volumeFlueGasesATh.Cs2.Xh2o, volumeFlueGasesATh.Cs2.Xo2, volumeFlueGasesATh.Cs2.Xso2);
//   volumeFlueGasesATh.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesATh.P, volumeFlueGasesATh.T, volumeFlueGasesATh.Xco2, volumeFlueGasesATh.Xh2o, volumeFlueGasesATh.Xo2, volumeFlueGasesATh.Xso2);
//   volumeFlueGasesATh.cp = ThermoSysPro.Properties.FlueGases.FlueGases_cp(volumeFlueGasesATh.P, volumeFlueGasesATh.T, volumeFlueGasesATh.Xco2, volumeFlueGasesATh.Xh2o, volumeFlueGasesATh.Xo2, volumeFlueGasesATh.Xso2);
//   volumeFlueGasesATh.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(volumeFlueGasesATh.P, volumeFlueGasesATh.T, volumeFlueGasesATh.Xco2, volumeFlueGasesATh.Xh2o, volumeFlueGasesATh.Xo2, volumeFlueGasesATh.Xso2);
//   singularPressureLossFlueGases2.C1.P - singularPressureLossFlueGases2.C2.P = singularPressureLossFlueGases2.deltaPf;
//   singularPressureLossFlueGases2.C1.T = singularPressureLossFlueGases2.C2.T;
//   singularPressureLossFlueGases2.C1.Q = singularPressureLossFlueGases2.C2.Q;
//   singularPressureLossFlueGases2.C2.Xco2 = singularPressureLossFlueGases2.C1.Xco2;
//   singularPressureLossFlueGases2.C2.Xh2o = singularPressureLossFlueGases2.C1.Xh2o;
//   singularPressureLossFlueGases2.C2.Xo2 = singularPressureLossFlueGases2.C1.Xo2;
//   singularPressureLossFlueGases2.C2.Xso2 = singularPressureLossFlueGases2.C1.Xso2;
//   singularPressureLossFlueGases2.Q = singularPressureLossFlueGases2.C1.Q;
//   singularPressureLossFlueGases2.deltaPf = singularPressureLossFlueGases2.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases2.Q, singularPressureLossFlueGases2.eps) / singularPressureLossFlueGases2.rho;
//   singularPressureLossFlueGases2.P = singularPressureLossFlueGases2.C1.P / 2.0 + singularPressureLossFlueGases2.C2.P / 2.0;
//   singularPressureLossFlueGases2.T = singularPressureLossFlueGases2.C2.T;
//   singularPressureLossFlueGases2.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases2.P, singularPressureLossFlueGases2.T, singularPressureLossFlueGases2.C2.Xco2, singularPressureLossFlueGases2.C2.Xh2o, singularPressureLossFlueGases2.C2.Xo2, singularPressureLossFlueGases2.C2.Xso2);
//   sinkFlueGasesP1.C.P = sinkFlueGasesP1.P;
//   sinkFlueGasesP1.C.Q = sinkFlueGasesP1.Q;
//   sinkFlueGasesP1.C.T = sinkFlueGasesP1.T;
//   sinkFlueGasesP1.C.Xco2 = sinkFlueGasesP1.Xco2;
//   sinkFlueGasesP1.C.Xh2o = sinkFlueGasesP1.Xh2o;
//   sinkFlueGasesP1.C.Xo2 = sinkFlueGasesP1.Xo2;
//   sinkFlueGasesP1.C.Xso2 = sinkFlueGasesP1.Xso2;
//   sinkFlueGasesP1.Xn2 = 1.0 + (-sinkFlueGasesP1.Xco2) - sinkFlueGasesP1.Xso2 - sinkFlueGasesP1.Xo2 - sinkFlueGasesP1.Xh2o;
//   sinkFlueGasesP1.IPressure.signal = sinkFlueGasesP1.P0;
//   sinkFlueGasesP1.P = sinkFlueGasesP1.IPressure.signal;
//   singularPressureLossFlueGases4.C1.P - singularPressureLossFlueGases4.C2.P = singularPressureLossFlueGases4.deltaPf;
//   singularPressureLossFlueGases4.C1.T = singularPressureLossFlueGases4.C2.T;
//   singularPressureLossFlueGases4.C1.Q = singularPressureLossFlueGases4.C2.Q;
//   singularPressureLossFlueGases4.C2.Xco2 = singularPressureLossFlueGases4.C1.Xco2;
//   singularPressureLossFlueGases4.C2.Xh2o = singularPressureLossFlueGases4.C1.Xh2o;
//   singularPressureLossFlueGases4.C2.Xo2 = singularPressureLossFlueGases4.C1.Xo2;
//   singularPressureLossFlueGases4.C2.Xso2 = singularPressureLossFlueGases4.C1.Xso2;
//   singularPressureLossFlueGases4.Q = singularPressureLossFlueGases4.C1.Q;
//   singularPressureLossFlueGases4.deltaPf = singularPressureLossFlueGases4.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases4.Q, singularPressureLossFlueGases4.eps) / singularPressureLossFlueGases4.rho;
//   singularPressureLossFlueGases4.P = singularPressureLossFlueGases4.C1.P / 2.0 + singularPressureLossFlueGases4.C2.P / 2.0;
//   singularPressureLossFlueGases4.T = singularPressureLossFlueGases4.C2.T;
//   singularPressureLossFlueGases4.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases4.P, singularPressureLossFlueGases4.T, singularPressureLossFlueGases4.C2.Xco2, singularPressureLossFlueGases4.C2.Xh2o, singularPressureLossFlueGases4.C2.Xo2, singularPressureLossFlueGases4.C2.Xso2);
//   assert(volumeFlueGasesCTh.V > 0.0,\"Volume non-positive\");
//   volumeFlueGasesCTh.Ce2.Q = 0.0;
//   volumeFlueGasesCTh.Ce2.T = 400.0;
//   volumeFlueGasesCTh.Ce2.Xco2 = 0.2;
//   volumeFlueGasesCTh.Ce2.Xh2o = 0.05;
//   volumeFlueGasesCTh.Ce2.Xo2 = 0.25;
//   volumeFlueGasesCTh.Ce2.Xso2 = 0.0;
//   volumeFlueGasesCTh.Ce2.b = true;
//   volumeFlueGasesCTh.BQ = volumeFlueGasesCTh.Ce1.Q + volumeFlueGasesCTh.Ce2.Q + volumeFlueGasesCTh.Ce3.Q - volumeFlueGasesCTh.Cs.Q;
//   0.0 = volumeFlueGasesCTh.BQ;
//   volumeFlueGasesCTh.P = volumeFlueGasesCTh.Ce1.P;
//   volumeFlueGasesCTh.P = volumeFlueGasesCTh.Ce2.P;
//   volumeFlueGasesCTh.P = volumeFlueGasesCTh.Ce3.P;
//   volumeFlueGasesCTh.P = volumeFlueGasesCTh.Cs.P;
//   volumeFlueGasesCTh.BH = volumeFlueGasesCTh.Ce1.Q * volumeFlueGasesCTh.he1 + volumeFlueGasesCTh.Ce2.Q * volumeFlueGasesCTh.he2 + volumeFlueGasesCTh.Ce3.Q * volumeFlueGasesCTh.he3 + volumeFlueGasesCTh.Cth.W - volumeFlueGasesCTh.Cs.Q * volumeFlueGasesCTh.hs;
//   volumeFlueGasesCTh.V * volumeFlueGasesCTh.rho * volumeFlueGasesCTh.cp * der(volumeFlueGasesCTh.T) = volumeFlueGasesCTh.BH;
//   volumeFlueGasesCTh.Cs.T = volumeFlueGasesCTh.T;
//   volumeFlueGasesCTh.Cth.T = volumeFlueGasesCTh.T;
//   volumeFlueGasesCTh.BXco2 = volumeFlueGasesCTh.Ce1.Xco2 * volumeFlueGasesCTh.Ce1.Q + volumeFlueGasesCTh.Ce2.Xco2 * volumeFlueGasesCTh.Ce2.Q + volumeFlueGasesCTh.Ce3.Xco2 * volumeFlueGasesCTh.Ce3.Q - volumeFlueGasesCTh.Cs.Xco2 * volumeFlueGasesCTh.Cs.Q;
//   volumeFlueGasesCTh.BXh2o = volumeFlueGasesCTh.Ce1.Xh2o * volumeFlueGasesCTh.Ce1.Q + volumeFlueGasesCTh.Ce2.Xh2o * volumeFlueGasesCTh.Ce2.Q + volumeFlueGasesCTh.Ce3.Xh2o * volumeFlueGasesCTh.Ce3.Q - volumeFlueGasesCTh.Cs.Xh2o * volumeFlueGasesCTh.Cs.Q;
//   volumeFlueGasesCTh.BXo2 = volumeFlueGasesCTh.Ce1.Xo2 * volumeFlueGasesCTh.Ce1.Q + volumeFlueGasesCTh.Ce2.Xo2 * volumeFlueGasesCTh.Ce2.Q + volumeFlueGasesCTh.Ce3.Xo2 * volumeFlueGasesCTh.Ce3.Q - volumeFlueGasesCTh.Cs.Xo2 * volumeFlueGasesCTh.Cs.Q;
//   volumeFlueGasesCTh.BXso2 = volumeFlueGasesCTh.Ce1.Xso2 * volumeFlueGasesCTh.Ce1.Q + volumeFlueGasesCTh.Ce2.Xso2 * volumeFlueGasesCTh.Ce2.Q + volumeFlueGasesCTh.Ce3.Xso2 * volumeFlueGasesCTh.Ce3.Q - volumeFlueGasesCTh.Cs.Xso2 * volumeFlueGasesCTh.Cs.Q;
//   volumeFlueGasesCTh.Xco2 * volumeFlueGasesCTh.BQ = volumeFlueGasesCTh.BXco2;
//   volumeFlueGasesCTh.Xh2o * volumeFlueGasesCTh.BQ = volumeFlueGasesCTh.BXh2o;
//   volumeFlueGasesCTh.Xo2 * volumeFlueGasesCTh.BQ = volumeFlueGasesCTh.BXo2;
//   volumeFlueGasesCTh.Xso2 * volumeFlueGasesCTh.BQ = volumeFlueGasesCTh.BXso2;
//   volumeFlueGasesCTh.Xn2 = 1.0 + (-volumeFlueGasesCTh.Xco2) - volumeFlueGasesCTh.Xso2 - volumeFlueGasesCTh.Xo2 - volumeFlueGasesCTh.Xh2o;
//   volumeFlueGasesCTh.Cs.Xco2 = volumeFlueGasesCTh.Xco2;
//   volumeFlueGasesCTh.Cs.Xh2o = volumeFlueGasesCTh.Xh2o;
//   volumeFlueGasesCTh.Cs.Xo2 = volumeFlueGasesCTh.Xo2;
//   volumeFlueGasesCTh.Cs.Xso2 = volumeFlueGasesCTh.Xso2;
//   volumeFlueGasesCTh.he1 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesCTh.P, volumeFlueGasesCTh.Ce1.T, volumeFlueGasesCTh.Ce1.Xco2, volumeFlueGasesCTh.Ce1.Xh2o, volumeFlueGasesCTh.Ce1.Xo2, volumeFlueGasesCTh.Ce1.Xso2);
//   volumeFlueGasesCTh.he2 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesCTh.P, volumeFlueGasesCTh.Ce2.T, volumeFlueGasesCTh.Ce2.Xco2, volumeFlueGasesCTh.Ce2.Xh2o, volumeFlueGasesCTh.Ce2.Xo2, volumeFlueGasesCTh.Ce2.Xso2);
//   volumeFlueGasesCTh.he3 = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesCTh.P, volumeFlueGasesCTh.Ce3.T, volumeFlueGasesCTh.Ce3.Xco2, volumeFlueGasesCTh.Ce3.Xh2o, volumeFlueGasesCTh.Ce3.Xo2, volumeFlueGasesCTh.Ce3.Xso2);
//   volumeFlueGasesCTh.hs = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesCTh.P, volumeFlueGasesCTh.Cs.T, volumeFlueGasesCTh.Cs.Xco2, volumeFlueGasesCTh.Cs.Xh2o, volumeFlueGasesCTh.Cs.Xo2, volumeFlueGasesCTh.Cs.Xso2);
//   volumeFlueGasesCTh.h = ThermoSysPro.Properties.FlueGases.FlueGases_h(volumeFlueGasesCTh.P, volumeFlueGasesCTh.T, volumeFlueGasesCTh.Xco2, volumeFlueGasesCTh.Xh2o, volumeFlueGasesCTh.Xo2, volumeFlueGasesCTh.Xso2);
//   volumeFlueGasesCTh.cp = ThermoSysPro.Properties.FlueGases.FlueGases_cp(volumeFlueGasesCTh.P, volumeFlueGasesCTh.T, volumeFlueGasesCTh.Xco2, volumeFlueGasesCTh.Xh2o, volumeFlueGasesCTh.Xo2, volumeFlueGasesCTh.Xso2);
//   volumeFlueGasesCTh.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(volumeFlueGasesCTh.P, volumeFlueGasesCTh.T, volumeFlueGasesCTh.Xco2, volumeFlueGasesCTh.Xh2o, volumeFlueGasesCTh.Xo2, volumeFlueGasesCTh.Xso2);
//   singularPressureLossFlueGases3.C1.P - singularPressureLossFlueGases3.C2.P = singularPressureLossFlueGases3.deltaPf;
//   singularPressureLossFlueGases3.C1.T = singularPressureLossFlueGases3.C2.T;
//   singularPressureLossFlueGases3.C1.Q = singularPressureLossFlueGases3.C2.Q;
//   singularPressureLossFlueGases3.C2.Xco2 = singularPressureLossFlueGases3.C1.Xco2;
//   singularPressureLossFlueGases3.C2.Xh2o = singularPressureLossFlueGases3.C1.Xh2o;
//   singularPressureLossFlueGases3.C2.Xo2 = singularPressureLossFlueGases3.C1.Xo2;
//   singularPressureLossFlueGases3.C2.Xso2 = singularPressureLossFlueGases3.C1.Xso2;
//   singularPressureLossFlueGases3.Q = singularPressureLossFlueGases3.C1.Q;
//   singularPressureLossFlueGases3.deltaPf = singularPressureLossFlueGases3.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases3.Q, singularPressureLossFlueGases3.eps) / singularPressureLossFlueGases3.rho;
//   singularPressureLossFlueGases3.P = singularPressureLossFlueGases3.C1.P / 2.0 + singularPressureLossFlueGases3.C2.P / 2.0;
//   singularPressureLossFlueGases3.T = singularPressureLossFlueGases3.C2.T;
//   singularPressureLossFlueGases3.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases3.P, singularPressureLossFlueGases3.T, singularPressureLossFlueGases3.C2.Xco2, singularPressureLossFlueGases3.C2.Xh2o, singularPressureLossFlueGases3.C2.Xo2, singularPressureLossFlueGases3.C2.Xso2);
//   singularPressureLossFlueGases5.C1.P - singularPressureLossFlueGases5.C2.P = singularPressureLossFlueGases5.deltaPf;
//   singularPressureLossFlueGases5.C1.T = singularPressureLossFlueGases5.C2.T;
//   singularPressureLossFlueGases5.C1.Q = singularPressureLossFlueGases5.C2.Q;
//   singularPressureLossFlueGases5.C2.Xco2 = singularPressureLossFlueGases5.C1.Xco2;
//   singularPressureLossFlueGases5.C2.Xh2o = singularPressureLossFlueGases5.C1.Xh2o;
//   singularPressureLossFlueGases5.C2.Xo2 = singularPressureLossFlueGases5.C1.Xo2;
//   singularPressureLossFlueGases5.C2.Xso2 = singularPressureLossFlueGases5.C1.Xso2;
//   singularPressureLossFlueGases5.Q = singularPressureLossFlueGases5.C1.Q;
//   singularPressureLossFlueGases5.deltaPf = singularPressureLossFlueGases5.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases5.Q, singularPressureLossFlueGases5.eps) / singularPressureLossFlueGases5.rho;
//   singularPressureLossFlueGases5.P = singularPressureLossFlueGases5.C1.P / 2.0 + singularPressureLossFlueGases5.C2.P / 2.0;
//   singularPressureLossFlueGases5.T = singularPressureLossFlueGases5.C2.T;
//   singularPressureLossFlueGases5.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases5.P, singularPressureLossFlueGases5.T, singularPressureLossFlueGases5.C2.Xco2, singularPressureLossFlueGases5.C2.Xh2o, singularPressureLossFlueGases5.C2.Xo2, singularPressureLossFlueGases5.C2.Xso2);
//   sourceFlueGasesP1.C.P = sourceFlueGasesP1.P;
//   sourceFlueGasesP1.C.Q = sourceFlueGasesP1.Q;
//   sourceFlueGasesP1.C.T = sourceFlueGasesP1.T;
//   sourceFlueGasesP1.C.Xco2 = sourceFlueGasesP1.Xco2;
//   sourceFlueGasesP1.C.Xh2o = sourceFlueGasesP1.Xh2o;
//   sourceFlueGasesP1.C.Xo2 = sourceFlueGasesP1.Xo2;
//   sourceFlueGasesP1.C.Xso2 = sourceFlueGasesP1.Xso2;
//   sourceFlueGasesP1.Xn2 = 1.0 + (-sourceFlueGasesP1.Xco2) - sourceFlueGasesP1.Xso2 - sourceFlueGasesP1.Xo2 - sourceFlueGasesP1.Xh2o;
//   sourceFlueGasesP1.IPressure.signal = sourceFlueGasesP1.P0;
//   sourceFlueGasesP1.P = sourceFlueGasesP1.IPressure.signal;
//   sourceFlueGasesP1.ITemperature.signal = sourceFlueGasesP1.T0;
//   sourceFlueGasesP1.T = sourceFlueGasesP1.ITemperature.signal;
//   singularPressureLossFlueGases6.C1.P - singularPressureLossFlueGases6.C2.P = singularPressureLossFlueGases6.deltaPf;
//   singularPressureLossFlueGases6.C1.T = singularPressureLossFlueGases6.C2.T;
//   singularPressureLossFlueGases6.C1.Q = singularPressureLossFlueGases6.C2.Q;
//   singularPressureLossFlueGases6.C2.Xco2 = singularPressureLossFlueGases6.C1.Xco2;
//   singularPressureLossFlueGases6.C2.Xh2o = singularPressureLossFlueGases6.C1.Xh2o;
//   singularPressureLossFlueGases6.C2.Xo2 = singularPressureLossFlueGases6.C1.Xo2;
//   singularPressureLossFlueGases6.C2.Xso2 = singularPressureLossFlueGases6.C1.Xso2;
//   singularPressureLossFlueGases6.Q = singularPressureLossFlueGases6.C1.Q;
//   singularPressureLossFlueGases6.deltaPf = singularPressureLossFlueGases6.K * ThermoSysPro.Functions.ThermoSquare(singularPressureLossFlueGases6.Q, singularPressureLossFlueGases6.eps) / singularPressureLossFlueGases6.rho;
//   singularPressureLossFlueGases6.P = singularPressureLossFlueGases6.C1.P / 2.0 + singularPressureLossFlueGases6.C2.P / 2.0;
//   singularPressureLossFlueGases6.T = singularPressureLossFlueGases6.C2.T;
//   singularPressureLossFlueGases6.rho = ThermoSysPro.Properties.FlueGases.FlueGases_rho(singularPressureLossFlueGases6.P, singularPressureLossFlueGases6.T, singularPressureLossFlueGases6.C2.Xco2, singularPressureLossFlueGases6.C2.Xh2o, singularPressureLossFlueGases6.C2.Xo2, singularPressureLossFlueGases6.C2.Xso2);
//   sourceFlueGasesP2.C.P = sourceFlueGasesP2.P;
//   sourceFlueGasesP2.C.Q = sourceFlueGasesP2.Q;
//   sourceFlueGasesP2.C.T = sourceFlueGasesP2.T;
//   sourceFlueGasesP2.C.Xco2 = sourceFlueGasesP2.Xco2;
//   sourceFlueGasesP2.C.Xh2o = sourceFlueGasesP2.Xh2o;
//   sourceFlueGasesP2.C.Xo2 = sourceFlueGasesP2.Xo2;
//   sourceFlueGasesP2.C.Xso2 = sourceFlueGasesP2.Xso2;
//   sourceFlueGasesP2.Xn2 = 1.0 + (-sourceFlueGasesP2.Xco2) - sourceFlueGasesP2.Xso2 - sourceFlueGasesP2.Xo2 - sourceFlueGasesP2.Xh2o;
//   sourceFlueGasesP2.IPressure.signal = sourceFlueGasesP2.P0;
//   sourceFlueGasesP2.P = sourceFlueGasesP2.IPressure.signal;
//   sourceFlueGasesP2.ITemperature.signal = sourceFlueGasesP2.T0;
//   sourceFlueGasesP2.T = sourceFlueGasesP2.ITemperature.signal;
//   volumeFlueGasesATh.Cth.W = 0.0;
//   volumeFlueGasesCTh.Cth.W = 0.0;
//   singularPressureLossFlueGases1.C1.P = sourceFlueGasesP.C.P;
//   singularPressureLossFlueGases1.C1.T = sourceFlueGasesP.C.T;
//   singularPressureLossFlueGases1.C1.Q = sourceFlueGasesP.C.Q;
//   singularPressureLossFlueGases1.C1.Xco2 = sourceFlueGasesP.C.Xco2;
//   singularPressureLossFlueGases1.C1.Xh2o = sourceFlueGasesP.C.Xh2o;
//   singularPressureLossFlueGases1.C1.Xo2 = sourceFlueGasesP.C.Xo2;
//   singularPressureLossFlueGases1.C1.Xso2 = sourceFlueGasesP.C.Xso2;
//   singularPressureLossFlueGases1.C1.a = sourceFlueGasesP.C.a;
//   singularPressureLossFlueGases1.C1.b = sourceFlueGasesP.C.b;
//   singularPressureLossFlueGases1.C2.P = volumeFlueGasesATh.Ce1.P;
//   singularPressureLossFlueGases1.C2.T = volumeFlueGasesATh.Ce1.T;
//   singularPressureLossFlueGases1.C2.Q = volumeFlueGasesATh.Ce1.Q;
//   singularPressureLossFlueGases1.C2.Xco2 = volumeFlueGasesATh.Ce1.Xco2;
//   singularPressureLossFlueGases1.C2.Xh2o = volumeFlueGasesATh.Ce1.Xh2o;
//   singularPressureLossFlueGases1.C2.Xo2 = volumeFlueGasesATh.Ce1.Xo2;
//   singularPressureLossFlueGases1.C2.Xso2 = volumeFlueGasesATh.Ce1.Xso2;
//   singularPressureLossFlueGases1.C2.a = volumeFlueGasesATh.Ce1.a;
//   singularPressureLossFlueGases1.C2.b = volumeFlueGasesATh.Ce1.b;
//   singularPressureLossFlueGases2.C2.P = sinkFlueGasesP.C.P;
//   singularPressureLossFlueGases2.C2.T = sinkFlueGasesP.C.T;
//   singularPressureLossFlueGases2.C2.Q = sinkFlueGasesP.C.Q;
//   singularPressureLossFlueGases2.C2.Xco2 = sinkFlueGasesP.C.Xco2;
//   singularPressureLossFlueGases2.C2.Xh2o = sinkFlueGasesP.C.Xh2o;
//   singularPressureLossFlueGases2.C2.Xo2 = sinkFlueGasesP.C.Xo2;
//   singularPressureLossFlueGases2.C2.Xso2 = sinkFlueGasesP.C.Xso2;
//   singularPressureLossFlueGases2.C2.a = sinkFlueGasesP.C.a;
//   singularPressureLossFlueGases2.C2.b = sinkFlueGasesP.C.b;
//   singularPressureLossFlueGases4.C2.P = sinkFlueGasesP1.C.P;
//   singularPressureLossFlueGases4.C2.T = sinkFlueGasesP1.C.T;
//   singularPressureLossFlueGases4.C2.Q = sinkFlueGasesP1.C.Q;
//   singularPressureLossFlueGases4.C2.Xco2 = sinkFlueGasesP1.C.Xco2;
//   singularPressureLossFlueGases4.C2.Xh2o = sinkFlueGasesP1.C.Xh2o;
//   singularPressureLossFlueGases4.C2.Xo2 = sinkFlueGasesP1.C.Xo2;
//   singularPressureLossFlueGases4.C2.Xso2 = sinkFlueGasesP1.C.Xso2;
//   singularPressureLossFlueGases4.C2.a = sinkFlueGasesP1.C.a;
//   singularPressureLossFlueGases4.C2.b = sinkFlueGasesP1.C.b;
//   singularPressureLossFlueGases2.C1.P = volumeFlueGasesATh.Cs1.P;
//   singularPressureLossFlueGases2.C1.T = volumeFlueGasesATh.Cs1.T;
//   singularPressureLossFlueGases2.C1.Q = volumeFlueGasesATh.Cs1.Q;
//   singularPressureLossFlueGases2.C1.Xco2 = volumeFlueGasesATh.Cs1.Xco2;
//   singularPressureLossFlueGases2.C1.Xh2o = volumeFlueGasesATh.Cs1.Xh2o;
//   singularPressureLossFlueGases2.C1.Xo2 = volumeFlueGasesATh.Cs1.Xo2;
//   singularPressureLossFlueGases2.C1.Xso2 = volumeFlueGasesATh.Cs1.Xso2;
//   singularPressureLossFlueGases2.C1.a = volumeFlueGasesATh.Cs1.a;
//   singularPressureLossFlueGases2.C1.b = volumeFlueGasesATh.Cs1.b;
//   singularPressureLossFlueGases4.C1.P = volumeFlueGasesATh.Cs2.P;
//   singularPressureLossFlueGases4.C1.T = volumeFlueGasesATh.Cs2.T;
//   singularPressureLossFlueGases4.C1.Q = volumeFlueGasesATh.Cs2.Q;
//   singularPressureLossFlueGases4.C1.Xco2 = volumeFlueGasesATh.Cs2.Xco2;
//   singularPressureLossFlueGases4.C1.Xh2o = volumeFlueGasesATh.Cs2.Xh2o;
//   singularPressureLossFlueGases4.C1.Xo2 = volumeFlueGasesATh.Cs2.Xo2;
//   singularPressureLossFlueGases4.C1.Xso2 = volumeFlueGasesATh.Cs2.Xso2;
//   singularPressureLossFlueGases4.C1.a = volumeFlueGasesATh.Cs2.a;
//   singularPressureLossFlueGases4.C1.b = volumeFlueGasesATh.Cs2.b;
//   singularPressureLossFlueGases3.C1.P = volumeFlueGasesCTh.Cs.P;
//   singularPressureLossFlueGases3.C1.T = volumeFlueGasesCTh.Cs.T;
//   singularPressureLossFlueGases3.C1.Q = volumeFlueGasesCTh.Cs.Q;
//   singularPressureLossFlueGases3.C1.Xco2 = volumeFlueGasesCTh.Cs.Xco2;
//   singularPressureLossFlueGases3.C1.Xh2o = volumeFlueGasesCTh.Cs.Xh2o;
//   singularPressureLossFlueGases3.C1.Xo2 = volumeFlueGasesCTh.Cs.Xo2;
//   singularPressureLossFlueGases3.C1.Xso2 = volumeFlueGasesCTh.Cs.Xso2;
//   singularPressureLossFlueGases3.C1.a = volumeFlueGasesCTh.Cs.a;
//   singularPressureLossFlueGases3.C1.b = volumeFlueGasesCTh.Cs.b;
//   singularPressureLossFlueGases3.C2.P = volumeFlueGasesATh.Ce2.P;
//   singularPressureLossFlueGases3.C2.T = volumeFlueGasesATh.Ce2.T;
//   singularPressureLossFlueGases3.C2.Q = volumeFlueGasesATh.Ce2.Q;
//   singularPressureLossFlueGases3.C2.Xco2 = volumeFlueGasesATh.Ce2.Xco2;
//   singularPressureLossFlueGases3.C2.Xh2o = volumeFlueGasesATh.Ce2.Xh2o;
//   singularPressureLossFlueGases3.C2.Xo2 = volumeFlueGasesATh.Ce2.Xo2;
//   singularPressureLossFlueGases3.C2.Xso2 = volumeFlueGasesATh.Ce2.Xso2;
//   singularPressureLossFlueGases3.C2.a = volumeFlueGasesATh.Ce2.a;
//   singularPressureLossFlueGases3.C2.b = volumeFlueGasesATh.Ce2.b;
//   singularPressureLossFlueGases5.C1.P = sourceFlueGasesP1.C.P;
//   singularPressureLossFlueGases5.C1.T = sourceFlueGasesP1.C.T;
//   singularPressureLossFlueGases5.C1.Q = sourceFlueGasesP1.C.Q;
//   singularPressureLossFlueGases5.C1.Xco2 = sourceFlueGasesP1.C.Xco2;
//   singularPressureLossFlueGases5.C1.Xh2o = sourceFlueGasesP1.C.Xh2o;
//   singularPressureLossFlueGases5.C1.Xo2 = sourceFlueGasesP1.C.Xo2;
//   singularPressureLossFlueGases5.C1.Xso2 = sourceFlueGasesP1.C.Xso2;
//   singularPressureLossFlueGases5.C1.a = sourceFlueGasesP1.C.a;
//   singularPressureLossFlueGases5.C1.b = sourceFlueGasesP1.C.b;
//   singularPressureLossFlueGases5.C2.P = volumeFlueGasesCTh.Ce3.P;
//   singularPressureLossFlueGases5.C2.T = volumeFlueGasesCTh.Ce3.T;
//   singularPressureLossFlueGases5.C2.Q = volumeFlueGasesCTh.Ce3.Q;
//   singularPressureLossFlueGases5.C2.Xco2 = volumeFlueGasesCTh.Ce3.Xco2;
//   singularPressureLossFlueGases5.C2.Xh2o = volumeFlueGasesCTh.Ce3.Xh2o;
//   singularPressureLossFlueGases5.C2.Xo2 = volumeFlueGasesCTh.Ce3.Xo2;
//   singularPressureLossFlueGases5.C2.Xso2 = volumeFlueGasesCTh.Ce3.Xso2;
//   singularPressureLossFlueGases5.C2.a = volumeFlueGasesCTh.Ce3.a;
//   singularPressureLossFlueGases5.C2.b = volumeFlueGasesCTh.Ce3.b;
//   singularPressureLossFlueGases6.C1.P = sourceFlueGasesP2.C.P;
//   singularPressureLossFlueGases6.C1.T = sourceFlueGasesP2.C.T;
//   singularPressureLossFlueGases6.C1.Q = sourceFlueGasesP2.C.Q;
//   singularPressureLossFlueGases6.C1.Xco2 = sourceFlueGasesP2.C.Xco2;
//   singularPressureLossFlueGases6.C1.Xh2o = sourceFlueGasesP2.C.Xh2o;
//   singularPressureLossFlueGases6.C1.Xo2 = sourceFlueGasesP2.C.Xo2;
//   singularPressureLossFlueGases6.C1.Xso2 = sourceFlueGasesP2.C.Xso2;
//   singularPressureLossFlueGases6.C1.a = sourceFlueGasesP2.C.a;
//   singularPressureLossFlueGases6.C1.b = sourceFlueGasesP2.C.b;
//   singularPressureLossFlueGases6.C2.P = volumeFlueGasesCTh.Ce1.P;
//   singularPressureLossFlueGases6.C2.T = volumeFlueGasesCTh.Ce1.T;
//   singularPressureLossFlueGases6.C2.Q = volumeFlueGasesCTh.Ce1.Q;
//   singularPressureLossFlueGases6.C2.Xco2 = volumeFlueGasesCTh.Ce1.Xco2;
//   singularPressureLossFlueGases6.C2.Xh2o = volumeFlueGasesCTh.Ce1.Xh2o;
//   singularPressureLossFlueGases6.C2.Xo2 = volumeFlueGasesCTh.Ce1.Xo2;
//   singularPressureLossFlueGases6.C2.Xso2 = volumeFlueGasesCTh.Ce1.Xso2;
//   singularPressureLossFlueGases6.C2.a = volumeFlueGasesCTh.Ce1.a;
//   singularPressureLossFlueGases6.C2.b = volumeFlueGasesCTh.Ce1.b;
// end ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1;
// "
// "[Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// "
// "Check of ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1 completed successfully.
// 
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:55:3-105:21:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesInlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-53:22:writable] Warning: Connector ThermoSysPro.FlueGases.Connectors.FlueGasesOutlet is not balanced: The number of potential variables (7) is not equal to the number of flow variables (0).
// 
// Class ThermoSysPro.Examples.SimpleExamples.TestFlueGasesVolumes1 has 335 equation(s) and 335 variable(s).
// 271 of these are trivial equation(s).
// "
// ""
// endResult
