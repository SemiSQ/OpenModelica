// name:     ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.mos [instantiate and checkModel]
// keywords: instantiate and check ThermoSysPro.Examples.SimpleExamples
// status: correct
// teardown_command: rm -rf _ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.* ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1_* ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1 ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.exe ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.cpp ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.makefile ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.libs ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.log ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.c ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1.o output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica, {"3.1"}); getErrorString();
loadFile("../ThermoSysPro/package.mo"); getErrorString();

instantiateModel(ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1); getErrorString();
checkModel(ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1); getErrorString();

// Result:
// true
// ""
// true
// "[GTCombustionChamber.mo:169:20-169:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCombustionChamber.mo:173:20-173:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:153:20-153:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GenericCombustion.mo:157:20-157:24:writable] Warning: Treating .001 as 0.001. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GridFurnace.mo:85:20-85:23:writable] Warning: Treating .01 as 0.01. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Pro_FlueGases.mo:4:40-4:42:writable] Warning: Treating .5 as 0.5. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalHeatTransferCoefficient.mo:93:26-93:29:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [WBInternalTwoPhaseFlowHeatTransferCoefficient.mo:92:24-92:27:writable] Warning: Treating .12 as 0.12. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CombustionTurbine.mo:12:18-12:21:writable] Warning: Treating .07 as 0.07. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GTCICOBarilla.mo:7:28-7:35:writable] Warning: Treating .881225 as 0.881225. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [GasTurbine.mo:12:28-12:30:writable] Warning: Treating .9 as 0.9. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [AbsorptionRefrigeratorSystem.mo:4:25-4:32:writable] Warning: Treating .362979 as 0.362979. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:55:12-55:16:writable] Warning: Treating .011 as 0.011. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:58:9-58:12:writable] Warning: Treating .50 as 0.50. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:59:8-59:13:writable] Warning: Treating .2479 as 0.2479. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:60:8-60:13:writable] Warning: Treating .0297 as 0.0297. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:61:8-61:13:writable] Warning: Treating .2088 as 0.2088. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:62:8-62:13:writable] Warning: Treating .0017 as 0.0017. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BoilerSystem.mo:63:8-63:13:writable] Warning: Treating .0003 as 0.0003. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:132:8-132:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineBarkantineSystem.mo:136:8-136:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTriGenPredSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:147:8-147:11:writable] Warning: Treating .25 as 0.25. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [CHPEngineTrigenParamSystem.mo:152:8-152:11:writable] Warning: Treating .75 as 0.75. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [BaseIF97.mo:4589:34-4589:42:writable] Warning: Treating .5132047 as 0.5132047. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:22-4090:39:writable] Warning: Treating .0158271919734802 as 0.0158271919734802. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4090:53-4090:70:writable] Warning: Treating .0942738402188500 as 0.0942738402188500. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:30-4091:46:writable] Warning: Treating .155071987336585 as 0.155071987336585. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4091:60-4091:76:writable] Warning: Treating .188821573960182 as 0.188821573960182. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4092:46-4092:62:writable] Warning: Treating .199773405226859 as 0.199773405226859. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4093:29-4093:45:writable] Warning: Treating .224926465333340 as 0.224926465333340. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [IF97_packages.mo:4094:17-4094:33:writable] Warning: Treating .242611071901408 as 0.242611071901408. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// [Degasifier.mo:100:71-100:73:writable] Warning: Treating .1 as 0.1. This is not standard Modelica and only done for compatibility with old code. Support for this feature may be removed in the future.
// "
// "function Modelica.Math.acos
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = acos(u);
// end Modelica.Math.acos;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.Common.GibbsDerivs \"Automatically generated record constructor for Modelica.Media.Common.GibbsDerivs\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtaupi;
//   output GibbsDerivs res;
// end Modelica.Media.Common.GibbsDerivs;
// 
// function Modelica.Media.Common.HelmholtzDerivs \"Automatically generated record constructor for Modelica.Media.Common.HelmholtzDerivs\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") fdeltatau;
//   output HelmholtzDerivs res;
// end Modelica.Media.Common.HelmholtzDerivs;
// 
// function Modelica.Media.Common.Helmholtz_pT \"function to calculate analytic derivatives for computing d and t given p and t\"
//   input Modelica.Media.Common.HelmholtzDerivs f \"dimensionless derivatives of Helmholtz function\";
//   output Modelica.Media.Common.NewtonDerivatives_pT nderivs \"derivatives for Newton iteration to compute d and t from p and t\";
// algorithm
//   nderivs.p := f.d * f.R * f.T * f.delta * f.fdelta;
//   nderivs.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
// end Modelica.Media.Common.Helmholtz_pT;
// 
// function Modelica.Media.Common.Helmholtz_ph \"function to calculate analytic derivatives for computing d and t given p and h\"
//   input Modelica.Media.Common.HelmholtzDerivs f \"dimensionless derivatives of Helmholtz function\";
//   output Modelica.Media.Common.NewtonDerivatives_ph nderivs \"derivatives for Newton iteration to calculate d and t from p and h\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"isochoric heat capacity\";
// algorithm
//   cv := (-f.R) * f.tau ^ 2.0 * f.ftautau;
//   nderivs.p := f.d * f.R * f.T * f.delta * f.fdelta;
//   nderivs.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   nderivs.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   nderivs.pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   nderivs.ht := cv + nderivs.pt / f.d;
//   nderivs.hd := (nderivs.pd + (-f.T) * nderivs.pt / f.d) / f.d;
// end Modelica.Media.Common.Helmholtz_ph;
// 
// function Modelica.Media.Common.Helmholtz_ps \"function to calculate analytic derivatives for computing d and t given p and s\"
//   input Modelica.Media.Common.HelmholtzDerivs f \"dimensionless derivatives of Helmholtz function\";
//   output Modelica.Media.Common.NewtonDerivatives_ps nderivs \"derivatives for Newton iteration to compute d and t from p and s\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"isochoric heat capacity\";
// algorithm
//   cv := (-f.R) * f.tau ^ 2.0 * f.ftautau;
//   nderivs.p := f.d * f.R * f.T * f.delta * f.fdelta;
//   nderivs.s := f.R * (f.tau * f.ftau - f.f);
//   nderivs.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   nderivs.pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   nderivs.st := cv / f.T;
//   nderivs.sd := (-nderivs.pt) / f.d ^ 2.0;
// end Modelica.Media.Common.Helmholtz_ps;
// 
// function Modelica.Media.Common.NewtonDerivatives_pT \"Automatically generated record constructor for Modelica.Media.Common.NewtonDerivatives_pT\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   output NewtonDerivatives_pT res;
// end Modelica.Media.Common.NewtonDerivatives_pT;
// 
// function Modelica.Media.Common.NewtonDerivatives_ph \"Automatically generated record constructor for Modelica.Media.Common.NewtonDerivatives_ph\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") pt;
//   input Real hd;
//   input Real ht;
//   output NewtonDerivatives_ph res;
// end Modelica.Media.Common.NewtonDerivatives_ph;
// 
// function Modelica.Media.Common.NewtonDerivatives_ps \"Automatically generated record constructor for Modelica.Media.Common.NewtonDerivatives_ps\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") pt;
//   input Real sd;
//   input Real st;
//   output NewtonDerivatives_ps res;
// end Modelica.Media.Common.NewtonDerivatives_ps;
// 
// function ThermoSysPro.Functions.SmoothSign \"Smooth sign function\"
//   input Real x;
//   input Real alpha = 100.0;
//   output Real y;
// algorithm
//   y := ThermoSysPro.Functions.SmoothStep(x, alpha) - ThermoSysPro.Functions.SmoothStep(-x, alpha);
// end ThermoSysPro.Functions.SmoothSign;
// 
// function ThermoSysPro.Functions.SmoothStep \"Smooth step function\"
//   input Real x;
//   input Real alpha = 100.0;
//   output Real y;
// algorithm
//   y := 1.0 / (1.0 + exp((-alpha) * x / 2.0));
// end ThermoSysPro.Functions.SmoothStep;
// 
// function ThermoSysPro.Properties.C3H3F5.C3H3F5_Ph \"11133-C3H3F5 physical properties as a function of P and h\"
//   input Real P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Saturation temperature\";
//   protected Real Psc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Critical pressure\";
//   protected Real Pcalc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Variable for the computation of the pressure\";
//   protected Real hcalc(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Variable for the computation of the specific  enthalpy\";
//   protected Real hsatL(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Boiling specific enthalpy\";
//   protected Real hsatV(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Condensation specific enthalpy\";
//   protected Real ssatL(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Boiling specific entropy\";
//   protected Real ssatV(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Condensation specific entropy\";
//   protected Real rhoSatL(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Boiling density\";
//   protected Real rhoSatV(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Condensation density\";
//   protected Real A1;
//   protected Real B1;
//   protected Real C1;
//   protected Real A2;
//   protected Real B2;
//   protected Real C2;
//   protected Real D2;
//   protected Real A3;
//   protected Real B3;
//   protected Real C3;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
// algorithm
//   Psc := 3640000.0;
//   if P > Psc then
//     Pcalc := Psc / 100000.0;
//   elseif P <= 0.0 then
//     Pcalc := 1e-05;
//   else
//     Pcalc := P / 100000.0;
//   end if;
//   if h > 640000.0 then
//     hcalc := 640.0;
//   elseif h < 100000.0 then
//     hcalc := 100.0;
//   else
//     hcalc := h / 1000.0;
//   end if;
//   hsatV := 385.22149853 + -2.74e-06 * Pcalc ^ 6.0 + 0.00032217 * Pcalc ^ 5.0 + -0.01489673 * Pcalc ^ 4.0 + 0.3425803 * Pcalc ^ 3.0 + -4.15381744 * Pcalc ^ 2.0 + 27.64876596 * Pcalc;
//   hsatL := 166.7823742593 + -3.9275e-06 * Pcalc ^ 6.0 + 0.000478004 * Pcalc ^ 5.0 + -0.0227439765 * Pcalc ^ 4.0 + 0.5370471515 * Pcalc ^ 3.0 + -6.6496487588 * Pcalc ^ 2.0 + 46.8685173786 * Pcalc;
//   ssatV := 1766.7560947 + 1000.0 * (1.7e-09 * Pcalc ^ 6.0 + -2.159e-07 * Pcalc ^ 5.0 + 1.0223e-05 * Pcalc ^ 4.0 + -0.0002295813 * Pcalc ^ 3.0 + 0.0023692545 * Pcalc ^ 2.0 + -0.0062966866 * Pcalc);
//   ssatL := 868.5336198 + 1000.0 * (-1.64e-08 * Pcalc ^ 6.0 + 1.9814e-06 * Pcalc ^ 5.0 + -9.34768e-05 * Pcalc ^ 4.0 + 0.002182751 * Pcalc ^ 3.0 + -0.0265228817 * Pcalc ^ 2.0 + 0.1740890297 * Pcalc);
//   rhoSatL := 1467.5902188299 + 5.7803e-06 * Pcalc ^ 6.0 + -0.0007528646 * Pcalc ^ 5.0 + 0.03773738 * Pcalc ^ 4.0 + -0.9314090824 * Pcalc ^ 3.0 + 11.9184348938 * Pcalc ^ 2.0 + -89.9582798898 * Pcalc;
//   rhoSatV := 2.12959146 + 2.07e-06 * Pcalc ^ 6.0 + -0.00019163 * Pcalc ^ 5.0 + 0.00675913 * Pcalc ^ 4.0 + -0.10924667 * Pcalc ^ 3.0 + 0.84661954 * Pcalc ^ 2.0 + 2.83415571 * Pcalc;
//   Tsat := 246.4280421048 + -3.3655e-06 * Pcalc ^ 6.0 + 0.0004044854 * Pcalc ^ 5.0 + -0.0190328128 * Pcalc ^ 4.0 + 0.4443722095 * Pcalc ^ 3.0 + -5.4337547883 * Pcalc ^ 2.0 + 36.7572359309 * Pcalc;
//   if hcalc >= hsatL and hcalc <= hsatV then
//     pro.T := Tsat;
//     pro.x := (hcalc - hsatL) / (hsatV - hsatL);
//     pro.d := rhoSatL * (1.0 - pro.x) + rhoSatV * pro.x;
//     pro.s := ssatL * (1.0 - pro.x) + ssatV * pro.x;
//   elseif hcalc < hsatL then
//     pro.T := 93.9602333 + -0.0005311 * hcalc ^ 2.0 + 0.9990391 * hcalc;
//     if pro.T > Tsat then
//       pro.T := Tsat;
//     end if;
//     pro.x := 0.0;
//     pro.d := 1916.6958695 + -1.54e-05 * hcalc ^ 3.0 + 0.0095634 * hcalc ^ 2.0 + -3.8184877 * hcalc;
//     if pro.d < rhoSatL then
//       pro.d := rhoSatL;
//     end if;
//     pro.s := 100.2293 + 1000.0 * (-3.7e-06 * hcalc ^ 2.0 + 0.00516 * hcalc);
//     if pro.s > ssatL then
//       pro.s := ssatL;
//     end if;
//   else
//     A1 := 6.98e-05 * Pcalc + -0.0008618;
//     B1 := 1.8849272 + -0.0858201 * Pcalc;
//     C1 := 27.0570743 * Pcalc + -353.7594967;
//     pro.T := A1 * hcalc ^ 2.0 + B1 * hcalc + C1;
//     if pro.T < Tsat then
//       pro.T := Tsat;
//     end if;
//     pro.x := 1.0;
//     A2 := -9.58e-08 * Pcalc ^ 2.0 + 6.742e-07 * Pcalc + -2.691e-07;
//     B2 := 0.000469 + 0.0001689 * Pcalc ^ 2.0 + -0.0011644 * Pcalc;
//     C2 := -0.0995131 * Pcalc ^ 2.0 + 0.6639841 * Pcalc + -0.2724718;
//     D2 := 52.8361115 + 19.6224804 * Pcalc ^ 2.0 + -121.4944333 * Pcalc;
//     pro.d := A2 * hcalc ^ 3.0 + B2 * hcalc ^ 2.0 + C2 * hcalc + D2;
//     if pro.d > rhoSatV then
//       pro.d := rhoSatV;
//     end if;
//     A3 := -3.2e-09 * Pcalc ^ 2.0 + 1.779e-07 * Pcalc + -3.7134e-06;
//     B3 := 0.0064718 + 3.4e-06 * Pcalc ^ 2.0 + -0.0001957 * Pcalc;
//     C3 := -0.0001958 * Pcalc ^ 2.0 + 0.0194928 * Pcalc + -0.1696592;
//     pro.s := 1000.0 * (A3 * hcalc ^ 2.0 + B3 * hcalc + C3);
//     if pro.s < ssatV then
//       pro.s := ssatV;
//     end if;
//   end if;
// end ThermoSysPro.Properties.C3H3F5.C3H3F5_Ph;
// 
// function ThermoSysPro.Properties.C3H3F5.C3H3F5_Ps \"11133-C3H3F5 physical properties as a function of P and s\"
//   input Real P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Specific entropy\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected Real Psc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Critical pressure\";
//   protected Real Pcalc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Variable for the computation of the pressure\";
//   protected Real scalc(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Variable for the computation of the specific entropy\";
//   protected Real hsatL(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Boiling specific enthalpy\";
//   protected Real hsatV(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Condensation specific enthalpy\";
//   protected Real ssatL(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Boiling specific entropy\";
//   protected Real ssatV(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Condensation specific entropy\";
//   protected Real x \"Vapor mass fraction\";
//   protected Real A;
//   protected Real B;
//   protected Real C;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps props;
//   protected ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
// algorithm
//   Psc := 3640000.0;
//   if P > Psc then
//     Pcalc := Psc / 100000.0;
//   elseif P <= 0.0 then
//     Pcalc := 1e-05;
//   else
//     Pcalc := P / 100000.0;
//   end if;
//   if s > 2520.0 then
//     scalc := 2.52;
//   elseif s < 600.0 then
//     scalc := 0.6;
//   else
//     scalc := s / 1000.0;
//   end if;
//   hsatV := 385.22149853 + -2.74e-06 * Pcalc ^ 6.0 + 0.00032217 * Pcalc ^ 5.0 + -0.01489673 * Pcalc ^ 4.0 + 0.3425803 * Pcalc ^ 3.0 + -4.15381744 * Pcalc ^ 2.0 + 27.64876596 * Pcalc;
//   hsatL := 166.7823742593 + -3.9275e-06 * Pcalc ^ 6.0 + 0.000478004 * Pcalc ^ 5.0 + -0.0227439765 * Pcalc ^ 4.0 + 0.5370471515 * Pcalc ^ 3.0 + -6.6496487588 * Pcalc ^ 2.0 + 46.8685173786 * Pcalc;
//   ssatV := 1.7667560947 + 1.7e-09 * Pcalc ^ 6.0 + -2.159e-07 * Pcalc ^ 5.0 + 1.0223e-05 * Pcalc ^ 4.0 + -0.0002295813 * Pcalc ^ 3.0 + 0.0023692545 * Pcalc ^ 2.0 + -0.0062966866 * Pcalc;
//   ssatL := 0.8685336198 + -1.64e-08 * Pcalc ^ 6.0 + 1.9814e-06 * Pcalc ^ 5.0 + -9.34768e-05 * Pcalc ^ 4.0 + 0.002182751 * Pcalc ^ 3.0 + -0.0265228817 * Pcalc ^ 2.0 + 0.1740890297 * Pcalc;
//   if scalc >= ssatL and scalc <= ssatV then
//     x := (scalc - ssatL) / (ssatV - ssatL);
//     h := 1000.0 * (hsatL * (1.0 - x) + hsatV * x);
//   elseif scalc < ssatL then
//     h := 39292.0 + 1000.0 * (112.482 * scalc ^ 2.0 + 50.525 * scalc);
//     if h > hsatL then
//       h := 1000.0 * hsatL;
//     end if;
//   else
//     A := 185.5998054 + -0.0396219 * Pcalc ^ 2.0 + 0.2873498 * Pcalc;
//     B := -0.1114991 * Pcalc ^ 2.0 + 12.841798 * Pcalc + -415.1029137;
//     C := 540.557801 + 0.1219352 * Pcalc ^ 2.0 + -13.803117 * Pcalc;
//     h := 1000.0 * (A * scalc ^ 2.0 + B * scalc + C);
//     if h < hsatV then
//       h := 1000.0 * hsatV;
//     end if;
//   end if;
//   pro := ThermoSysPro.Properties.C3H3F5.C3H3F5_Ph(P, h);
//   props.T := pro.T;
//   props.d := pro.d;
//   props.u := pro.u;
//   props.h := h;
//   props.cp := pro.cp;
//   props.x := x;
// end ThermoSysPro.Properties.C3H3F5.C3H3F5_Ps;
// 
// function ThermoSysPro.Properties.Fluid.Ph
//   input Real P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   input Integer mode = 0 \"IF97 region - 0:automatic computation\";
//   input Integer fluid = 1 \"Fluid number - 1: IF97 - 2: C3H3F5\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
// algorithm
//   if fluid == 1 then
//     pro := ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph(P, h, mode);
//   elseif fluid == 2 then
//     pro := ThermoSysPro.Properties.C3H3F5.C3H3F5_Ph(P, h);
//   else
//     assert( false, \"Prop.Ph : incorrect fluid number\");
//   end if;
// end ThermoSysPro.Properties.Fluid.Ph;
// 
// function ThermoSysPro.Properties.Fluid.Ps
//   input Real P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Specific entropy\";
//   input Integer mode = 0 \"IF97 region - 0:automatic computation\";
//   input Integer fluid = 1 \"Fluid number - 1: IF97 - 2: C3H3F5\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro;
// algorithm
//   if fluid == 1 then
//     pro := ThermoSysPro.Properties.WaterSteam.IF97.Water_Ps(P, s, mode);
//   elseif fluid == 2 then
//     pro := ThermoSysPro.Properties.C3H3F5.C3H3F5_Ps(P, s);
//   else
//     assert( false, \"Prop.Ps : incorrect fluid number\");
//   end if;
// end ThermoSysPro.Properties.Fluid.Ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ph \"Region 3 a: inverse function T(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   protected constant Real[31] n = {-1.33645667811215e-07, 4.55912656802978e-06, -1.46294640700979e-05, 0.0063934131297008, 372.783927268847, -7186.54377460447, 573494.7521034, -2675693.29111439, -3.34066283302614e-05, -0.0245479214069597, 47.8087847764996, 7.64664131818904e-06, 0.00128350627676972, 0.0171219081377331, -8.51007304583213, -0.0136513461629781, -3.84460997596657e-06, 0.00337423807911655, -0.551624873066791, 0.72920227710747, -0.00992522757376041, -0.119308831407288, 0.793929190615421, 0.454270731799386, 0.20999859125991, -0.00642109823904738, -0.023515586860454, 0.00252233108341612, -0.00764885133368119, 0.0136176427574291, -0.0133027883575669};
//   protected constant Real[31] I = {-12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -10.0, -10.0, -10.0, -8.0, -8.0, -8.0, -8.0, -5.0, -3.0, -2.0, -2.0, -2.0, -1.0, -1.0, 0.0, 0.0, 1.0, 3.0, 3.0, 4.0, 4.0, 10.0, 12.0};
//   protected constant Real[31] J = {0.0, 1.0, 2.0, 6.0, 14.0, 16.0, 20.0, 22.0, 1.0, 5.0, 12.0, 0.0, 2.0, 4.0, 10.0, 2.0, 0.0, 1.0, 3.0, 4.0, 0.0, 2.0, 0.0, 1.0, 1.0, 0.0, 1.0, 0.0, 3.0, 4.0, 5.0};
//   protected constant Real hstar(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 2300000.0 \"normalization enthalpy\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real Tstar(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 760.0 \"normalization temperature\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real eta = h / 2300000.0 \"normalized specific enthalpy\";
// algorithm
//   T := 391.060044824687 + 760.0 * (-1.33645667811215e-07 / (0.24 + pi) ^ 12.0 + 4.55912656802978e-06 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) + -1.46294640700979e-05 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 2.0 + 0.0063934131297008 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 6.0 + 372.783927268847 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 14.0 + -7186.54377460447 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 16.0 + 573494.7521034 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 20.0 + -2675693.29111439 * (0.24 + pi) ^ -12.0 * (-0.615 + eta) ^ 22.0 + -3.34066283302614e-05 * (0.24 + pi) ^ -10.0 * (-0.615 + eta) + -0.0245479214069597 * (0.24 + pi) ^ -10.0 * (-0.615 + eta) ^ 5.0 + 47.8087847764996 * (0.24 + pi) ^ -10.0 * (-0.615 + eta) ^ 12.0 + 7.64664131818904e-06 / (0.24 + pi) ^ 8.0 + 0.00128350627676972 * (0.24 + pi) ^ -8.0 * (-0.615 + eta) ^ 2.0 + 0.0171219081377331 * (0.24 + pi) ^ -8.0 * (-0.615 + eta) ^ 4.0 + -8.51007304583213 * (0.24 + pi) ^ -8.0 * (-0.615 + eta) ^ 10.0 + -0.0136513461629781 * (0.24 + pi) ^ -5.0 * (-0.615 + eta) ^ 2.0 + -3.84460997596657e-06 / (0.24 + pi) ^ 3.0 + 0.00337423807911655 * (0.24 + pi) ^ -2.0 * (-0.615 + eta) + -0.551624873066791 * (0.24 + pi) ^ -2.0 * (-0.615 + eta) ^ 3.0 + 0.72920227710747 * (0.24 + pi) ^ -2.0 * (-0.615 + eta) ^ 4.0 + -0.00992522757376041 / (0.24 + pi) + -0.119308831407288 * (-0.615 + eta) ^ 2.0 / (0.24 + pi) + 0.454270731799386 * eta + 0.20999859125991 * (0.24 + pi) * (-0.615 + eta) + -0.00642109823904738 * (0.24 + pi) ^ 3.0 + -0.023515586860454 * (0.24 + pi) ^ 3.0 * (-0.615 + eta) + 0.00252233108341612 * (0.24 + pi) ^ 4.0 + -0.00764885133368119 * (0.24 + pi) ^ 4.0 * (-0.615 + eta) ^ 3.0 + 0.0136176427574291 * (0.24 + pi) ^ 10.0 * (-0.615 + eta) ^ 4.0 + -0.0133027883575669 * (0.24 + pi) ^ 12.0 * (-0.615 + eta) ^ 5.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ps \"Region 3 a: inverse function T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   protected constant Real[33] n = {1500420082.63875, -159397258480.424, 0.000502181140217975, -67.2057767855466, 1450.58545404456, -8238.8953488889, -0.154852214233853, 11.2305046746695, -29.7000213482822, 43856513263.5495, 0.00137837838635464, -2.97478527157462, 9717779473494.13, -5.71527767052398e-05, 28830.794977842, -74442828926270.3, 12.8017324848921, -368.275545889071, 6.64768904779177e+15, 0.044935925195888, -4.22897836099655, -0.240614376434179, -4.74341365254924, 0.72409399912611, 0.923874349695897, 3.99043655281015, 0.0384066651868009, -0.00359344365571848, -0.735196448821653, 0.188367048396131, 0.000141064266818704, -0.00257418501496337, 0.00123220024851555};
//   protected constant Real[33] I = {-12.0, -12.0, -10.0, -10.0, -10.0, -10.0, -8.0, -8.0, -8.0, -8.0, -6.0, -6.0, -6.0, -5.0, -5.0, -5.0, -4.0, -4.0, -4.0, -2.0, -2.0, -1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 3.0, 8.0, 8.0, 10.0};
//   protected constant Real[33] J = {28.0, 32.0, 4.0, 10.0, 12.0, 14.0, 5.0, 7.0, 8.0, 28.0, 2.0, 6.0, 32.0, 0.0, 14.0, 32.0, 6.0, 10.0, 36.0, 1.0, 4.0, 1.0, 6.0, 0.0, 1.0, 4.0, 0.0, 0.0, 3.0, 2.0, 0.0, 1.0, 2.0};
//   protected constant Real Tstar(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 760.0 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real sstar(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 4400.0 \"normalization entropy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real sigma = s / 4400.0 \"normalized specific entropy\";
// algorithm
//   T := 63.7092275103923 + 760.0 * (1500420082.63875 * (0.24 + pi) ^ -12.0 * (-0.703 + sigma) ^ 28.0 + -159397258480.424 * (0.24 + pi) ^ -12.0 * (-0.703 + sigma) ^ 32.0 + 0.000502181140217975 * (0.24 + pi) ^ -10.0 * (-0.703 + sigma) ^ 4.0 + -67.2057767855466 * (0.24 + pi) ^ -10.0 * (-0.703 + sigma) ^ 10.0 + 1450.58545404456 * (0.24 + pi) ^ -10.0 * (-0.703 + sigma) ^ 12.0 + -8238.8953488889 * (0.24 + pi) ^ -10.0 * (-0.703 + sigma) ^ 14.0 + -0.154852214233853 * (0.24 + pi) ^ -8.0 * (-0.703 + sigma) ^ 5.0 + 11.2305046746695 * (0.24 + pi) ^ -8.0 * (-0.703 + sigma) ^ 7.0 + -29.7000213482822 * (0.24 + pi) ^ -8.0 * (-0.703 + sigma) ^ 8.0 + 43856513263.5495 * (0.24 + pi) ^ -8.0 * (-0.703 + sigma) ^ 28.0 + 0.00137837838635464 * (0.24 + pi) ^ -6.0 * (-0.703 + sigma) ^ 2.0 + -2.97478527157462 * (0.24 + pi) ^ -6.0 * (-0.703 + sigma) ^ 6.0 + 9717779473494.13 * (0.24 + pi) ^ -6.0 * (-0.703 + sigma) ^ 32.0 + -5.71527767052398e-05 / (0.24 + pi) ^ 5.0 + 28830.794977842 * (0.24 + pi) ^ -5.0 * (-0.703 + sigma) ^ 14.0 + -74442828926270.3 * (0.24 + pi) ^ -5.0 * (-0.703 + sigma) ^ 32.0 + 12.8017324848921 * (0.24 + pi) ^ -4.0 * (-0.703 + sigma) ^ 6.0 + -368.275545889071 * (0.24 + pi) ^ -4.0 * (-0.703 + sigma) ^ 10.0 + 6.64768904779177e+15 * (0.24 + pi) ^ -4.0 * (-0.703 + sigma) ^ 36.0 + 0.044935925195888 * (0.24 + pi) ^ -2.0 * (-0.703 + sigma) + -4.22897836099655 * (0.24 + pi) ^ -2.0 * (-0.703 + sigma) ^ 4.0 + (0.169151906633228 + -0.240614376434179 * sigma) / (0.24 + pi) + -4.74341365254924 * (-0.703 + sigma) ^ 6.0 / (0.24 + pi) + 0.923874349695897 * sigma + 3.99043655281015 * (-0.703 + sigma) ^ 4.0 + 0.0384066651868009 * pi + -0.00359344365571848 * (0.24 + pi) ^ 2.0 + -0.735196448821653 * (0.24 + pi) ^ 2.0 * (-0.703 + sigma) ^ 3.0 + 0.188367048396131 * (0.24 + pi) ^ 3.0 * (-0.703 + sigma) ^ 2.0 + 0.000141064266818704 * (0.24 + pi) ^ 8.0 + -0.00257418501496337 * (0.24 + pi) ^ 8.0 * (-0.703 + sigma) + 0.00123220024851555 * (0.24 + pi) ^ 10.0 * (-0.703 + sigma) ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ph \"Region 3 b: inverse function T(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   protected constant Real[33] n = {3.2325457364492e-05, -0.000127575556587181, -0.000475851877356068, 0.00156183014181602, 0.105724860113781, -85.8514221132534, 724.140095480911, 0.00296475810273257, -0.00592721983365988, -0.0126305422818666, -0.115716196364853, 84.9000969739595, -0.0108602260086615, 0.0154304475328851, 0.0750455441524466, 0.0252520973612982, -0.0602507901232996, -3.07622221350501, -0.0574011959864879, 5.03471360939849, -0.925081888584834, 3.91733882917546, -77.314600713019, 9493.08762098587, -1410437.19679409, 8491662.30819026, 0.861095729446704, 0.32334644281172, 0.873281936020439, -0.436653048526683, 0.286596714529479, -0.131778331276228, 0.00676682064330275};
//   protected constant Real[33] I = {-12.0, -12.0, -10.0, -10.0, -10.0, -10.0, -10.0, -8.0, -8.0, -8.0, -8.0, -8.0, -6.0, -6.0, -6.0, -4.0, -4.0, -3.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 1.0, 3.0, 5.0, 6.0, 8.0};
//   protected constant Real[33] J = {0.0, 1.0, 0.0, 1.0, 5.0, 10.0, 12.0, 0.0, 1.0, 2.0, 4.0, 10.0, 0.0, 1.0, 2.0, 0.0, 1.0, 5.0, 0.0, 4.0, 2.0, 4.0, 6.0, 10.0, 14.0, 16.0, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0};
//   protected constant Real Tstar(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 860.0 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real hstar(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 2800000.0 \"normalization enthalpy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real eta = h / 2800000.0 \"normalized specific enthalpy\";
// algorithm
//   T := 740.542327324165 + 860.0 * (3.2325457364492e-05 / (0.298 + pi) ^ 12.0 + -0.000127575556587181 * (0.298 + pi) ^ -12.0 * (-0.72 + eta) + -0.000475851877356068 / (0.298 + pi) ^ 10.0 + 0.00156183014181602 * (0.298 + pi) ^ -10.0 * (-0.72 + eta) + 0.105724860113781 * (0.298 + pi) ^ -10.0 * (-0.72 + eta) ^ 5.0 + -85.8514221132534 * (0.298 + pi) ^ -10.0 * (-0.72 + eta) ^ 10.0 + 724.140095480911 * (0.298 + pi) ^ -10.0 * (-0.72 + eta) ^ 12.0 + 0.00296475810273257 / (0.298 + pi) ^ 8.0 + -0.00592721983365988 * (0.298 + pi) ^ -8.0 * (-0.72 + eta) + -0.0126305422818666 * (0.298 + pi) ^ -8.0 * (-0.72 + eta) ^ 2.0 + -0.115716196364853 * (0.298 + pi) ^ -8.0 * (-0.72 + eta) ^ 4.0 + 84.9000969739595 * (0.298 + pi) ^ -8.0 * (-0.72 + eta) ^ 10.0 + -0.0108602260086615 / (0.298 + pi) ^ 6.0 + 0.0154304475328851 * (0.298 + pi) ^ -6.0 * (-0.72 + eta) + 0.0750455441524466 * (0.298 + pi) ^ -6.0 * (-0.72 + eta) ^ 2.0 + 0.0252520973612982 / (0.298 + pi) ^ 4.0 + -0.0602507901232996 * (0.298 + pi) ^ -4.0 * (-0.72 + eta) + -3.07622221350501 * (0.298 + pi) ^ -3.0 * (-0.72 + eta) ^ 5.0 + -0.0574011959864879 / (0.298 + pi) ^ 2.0 + 5.03471360939849 * (0.298 + pi) ^ -2.0 * (-0.72 + eta) ^ 4.0 + -0.925081888584834 * (-0.72 + eta) ^ 2.0 / (0.298 + pi) + 3.91733882917546 * (-0.72 + eta) ^ 4.0 / (0.298 + pi) + -77.314600713019 * (-0.72 + eta) ^ 6.0 / (0.298 + pi) + 9493.08762098587 * (-0.72 + eta) ^ 10.0 / (0.298 + pi) + -1410437.19679409 * (-0.72 + eta) ^ 14.0 / (0.298 + pi) + 8491662.30819026 * (-0.72 + eta) ^ 16.0 / (0.298 + pi) + 0.32334644281172 * (-0.72 + eta) ^ 2.0 + 0.873281936020439 * (0.298 + pi) * (-0.72 + eta) + -0.436653048526683 * (0.298 + pi) ^ 3.0 * (-0.72 + eta) + 0.286596714529479 * (0.298 + pi) ^ 5.0 * (-0.72 + eta) + -0.131778331276228 * (0.298 + pi) ^ 6.0 * (-0.72 + eta) + 0.00676682064330275 * (0.298 + pi) ^ 8.0 * (-0.72 + eta));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ps \"Region 3 b: inverse function T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   protected constant Real[28] n = {0.52711170160166, -40.1317830052742, 153.020073134484, -2247.99398218827, -0.193993484669048, -1.40467557893768, 42.6799878114024, 0.752810643416743, 22.6657238616417, -622.873556909932, -0.660823667935396, 0.841267087271658, -25.3717501764397, 485.708963532948, 880.531517490555, 2650155.92794626, -0.359287150025783, -656.991567673753, 2.41768149185367, 0.856873461222588, 0.655143675313458, -0.213535213206406, 0.00562974957606348, -316955725450471, -0.000699997000152457, 0.0119845803210767, 1.93848122022095e-05, -2.15095749182309e-05};
//   protected constant Real[28] I = {-12.0, -12.0, -12.0, -12.0, -8.0, -8.0, -8.0, -6.0, -6.0, -6.0, -5.0, -5.0, -5.0, -5.0, -5.0, -4.0, -3.0, -3.0, -2.0, 0.0, 2.0, 3.0, 4.0, 5.0, 6.0, 8.0, 12.0, 14.0};
//   protected constant Real[28] J = {1.0, 3.0, 4.0, 7.0, 0.0, 1.0, 3.0, 0.0, 2.0, 4.0, 0.0, 1.0, 2.0, 4.0, 6.0, 12.0, 1.0, 6.0, 2.0, 0.0, 1.0, 1.0, 0.0, 24.0, 0.0, 3.0, 1.0, 2.0};
//   protected constant Real Tstar(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 860.0 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real sstar(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 5300.0 \"normalization entropy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real sigma = s / 5300.0 \"normalized specific entropy\";
// algorithm
//   T := 736.911176651426 + 860.0 * (0.52711170160166 * (0.76 + pi) ^ -12.0 * (-0.818 + sigma) + -40.1317830052742 * (0.76 + pi) ^ -12.0 * (-0.818 + sigma) ^ 3.0 + 153.020073134484 * (0.76 + pi) ^ -12.0 * (-0.818 + sigma) ^ 4.0 + -2247.99398218827 * (0.76 + pi) ^ -12.0 * (-0.818 + sigma) ^ 7.0 + -0.193993484669048 / (0.76 + pi) ^ 8.0 + -1.40467557893768 * (0.76 + pi) ^ -8.0 * (-0.818 + sigma) + 42.6799878114024 * (0.76 + pi) ^ -8.0 * (-0.818 + sigma) ^ 3.0 + 0.752810643416743 / (0.76 + pi) ^ 6.0 + 22.6657238616417 * (0.76 + pi) ^ -6.0 * (-0.818 + sigma) ^ 2.0 + -622.873556909932 * (0.76 + pi) ^ -6.0 * (-0.818 + sigma) ^ 4.0 + -0.660823667935396 / (0.76 + pi) ^ 5.0 + 0.841267087271658 * (0.76 + pi) ^ -5.0 * (-0.818 + sigma) + -25.3717501764397 * (0.76 + pi) ^ -5.0 * (-0.818 + sigma) ^ 2.0 + 485.708963532948 * (0.76 + pi) ^ -5.0 * (-0.818 + sigma) ^ 4.0 + 880.531517490555 * (0.76 + pi) ^ -5.0 * (-0.818 + sigma) ^ 6.0 + 2650155.92794626 * (0.76 + pi) ^ -4.0 * (-0.818 + sigma) ^ 12.0 + -0.359287150025783 * (0.76 + pi) ^ -3.0 * (-0.818 + sigma) + -656.991567673753 * (0.76 + pi) ^ -3.0 * (-0.818 + sigma) ^ 6.0 + 2.41768149185367 * (0.76 + pi) ^ -2.0 * (-0.818 + sigma) ^ 2.0 + 0.655143675313458 * (0.76 + pi) ^ 2.0 * (-0.818 + sigma) + -0.213535213206406 * (0.76 + pi) ^ 3.0 * (-0.818 + sigma) + 0.00562974957606348 * (0.76 + pi) ^ 4.0 + -316955725450471 * (0.76 + pi) ^ 5.0 * (-0.818 + sigma) ^ 24.0 + -0.000699997000152457 * (0.76 + pi) ^ 6.0 + 0.0119845803210767 * (0.76 + pi) ^ 8.0 * (-0.818 + sigma) ^ 3.0 + 1.93848122022095e-05 * (0.76 + pi) ^ 12.0 * (-0.818 + sigma) + -2.15095749182309e-05 * (0.76 + pi) ^ 14.0 * (-0.818 + sigma) ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT \"derivative of pressure wrt temperature along the saturation pressure curve\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real dpt(unit = \"Pa/K\") \"temperature derivative of pressure\";
//   protected Real[31] o \"vector of auxiliary variables\";
//   protected Real Tlim \"temperature limited to TCRIT\";
// algorithm
//   Tlim := min(T, 647.096);
//   o[1] := -650.17534844798 + Tlim;
//   o[2] := 1.0 / o[1];
//   o[3] := -0.23855557567849 * o[2];
//   o[4] := o[3] + Tlim;
//   o[5] := -4823.2657361591 * o[4];
//   o[6] := o[4] ^ 2.0;
//   o[7] := 14.91510861353 * o[6];
//   o[8] := 405113.40542057 + o[5] + o[7];
//   o[9] := o[8] ^ 2.0;
//   o[10] := o[9] ^ 2.0;
//   o[11] := o[1] ^ 2.0;
//   o[12] := 1.0 / o[11];
//   o[13] := 0.23855557567849 * o[12];
//   o[14] := 1.0 + o[13];
//   o[15] := 12020.82470247 * o[4];
//   o[16] := -17.073846940092 * o[6];
//   o[17] := -3232555.0322333 + o[15] + o[16];
//   o[18] := -4823.2657361591 * o[14];
//   o[19] := 29.83021722706 * o[14] * o[4];
//   o[20] := o[18] + o[19];
//   o[21] := 1167.0521452767 * o[4];
//   o[22] := -724213.16703206 + o[21] + o[6];
//   o[23] := o[17] ^ 2.0;
//   o[24] := -4.0 * o[22] * o[8];
//   o[25] := o[23] + o[24];
//   o[26] := sqrt(o[25]);
//   o[27] := -12020.82470247 * o[4];
//   o[28] := 17.073846940092 * o[6];
//   o[29] := 3232555.0322333 + o[26] + o[27] + o[28];
//   o[30] := o[29] ^ 2.0;
//   o[31] := o[30] ^ 2.0;
//   dpt := 1000000.0 * (-64.0 * o[10] * (-12020.82470247 * o[14] + 34.147693880184 * o[14] * o[4] + 0.5 * (-4.0 * o[20] * o[22] + 2.0 * o[17] * (12020.82470247 * o[14] + -34.147693880184 * o[14] * o[4]) + -4.0 * (1167.0521452767 * o[14] + 2.0 * o[14] * o[4]) * o[8]) / o[26]) / (o[31] * o[29]) + 64.0 * o[20] * o[8] * o[9] / o[31]);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp \"derivative of saturation temperature w.r.t. pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dtsat(unit = \"K/Pa\") \"derivative of T w.r.t. p\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[49] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * p;
//   o[1] := pi ^ 0.75;
//   o[2] := 1.0 / o[1];
//   o[3] := -4.268461735023 * o[2];
//   o[4] := sqrt(pi);
//   o[5] := 1.0 / o[4];
//   o[6] := 0.5 * o[5];
//   o[7] := o[3] + o[6];
//   o[8] := pi ^ 0.25;
//   o[9] := -3232555.0322333 * o[8];
//   o[10] := -724213.16703206 * o[4];
//   o[11] := 405113.40542057 + o[10] + o[9];
//   o[12] := -4.0 * o[11] * o[7];
//   o[13] := -808138.758058325 * o[2];
//   o[14] := -362106.58351603 * o[5];
//   o[15] := o[13] + o[14];
//   o[16] := -17.073846940092 * o[8];
//   o[17] := 14.91510861353 + o[16] + o[4];
//   o[18] := -4.0 * o[15] * o[17];
//   o[19] := 3005.2061756175 * o[2];
//   o[20] := 583.52607263835 * o[5];
//   o[21] := o[19] + o[20];
//   o[22] := 12020.82470247 * o[8];
//   o[23] := 1167.0521452767 * o[4];
//   o[24] := -4823.2657361591 + o[22] + o[23];
//   o[25] := 2.0 * o[21] * o[24];
//   o[26] := o[12] + o[18] + o[25];
//   o[27] := -4.0 * o[11] * o[17];
//   o[28] := o[24] ^ 2.0;
//   o[29] := o[27] + o[28];
//   o[30] := sqrt(o[29]);
//   o[31] := 1.0 / o[30];
//   o[32] := -o[30];
//   o[33] := -12020.82470247 * o[8];
//   o[34] := -1167.0521452767 * o[4];
//   o[35] := 4823.2657361591 + o[32] + o[33] + o[34];
//   o[36] := o[30];
//   o[37] := -4823.2657361591 + o[22] + o[23] + o[36];
//   o[38] := o[37] ^ 2.0;
//   o[39] := 1.0 / o[38];
//   o[40] := -1.72207339365771 * o[30];
//   o[41] := 21592.2055343628 * o[8];
//   o[42] := o[30] * o[8];
//   o[43] := -8192.87114842946 * o[4];
//   o[44] := -0.510632954559659 * o[30] * o[4];
//   o[45] := -3100.02526152368 * o[1];
//   o[46] := pi;
//   o[47] := 1295.95640782102 * o[46];
//   o[48] := 2862.09212505088 + o[40] + o[41] + o[42] + o[43] + o[44] + o[45] + o[47];
//   o[49] := o[35] ^ -2.0;
//   dtsat := 5e-07 * (2.0 * o[15] / o[35] + -2.0 * o[11] * (-3005.2061756175 * o[2] + -0.5 * o[26] * o[31] + -583.52607263835 * o[5]) * o[49] + -20953.4635664399 * (o[39] * (1295.95640782102 + 5398.05138359071 * o[2] + 0.25 * o[2] * o[30] + -0.861036696828853 * o[26] * o[31] + -0.255316477279829 * o[26] * o[31] * o[4] + -4096.43557421473 * o[5] + -0.255316477279829 * o[30] * o[5] + -2325.01894614276 / o[8] + 0.5 * o[26] * o[31] * o[8]) + -2.0 * (o[19] + o[20] + 0.5 * o[26] * o[31]) * o[48] / o[37] ^ 3.0) / sqrt(o[39] * o[48]));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3 \"Helmholtz function for region 3: f(d,T)\"
//   input Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real[40] o \"vector of auxiliary variables\";
// algorithm
//   f.T := T;
//   f.d := d;
//   f.R := 461.526;
//   f.tau := 647.096 / T;
//   f.delta := if d == 322.0 and T == 647.096 then 0.999999999999999 else abs(d / 322.0);
//   o[1] := f.tau ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] * f.tau;
//   o[4] := o[1] * f.tau;
//   o[5] := o[2] ^ 2.0;
//   o[6] := o[1] * o[5] * f.tau;
//   o[7] := o[5] * f.tau;
//   o[8] := -0.64207765181607 * o[1];
//   o[9] := 0.88521043984318 + o[8];
//   o[10] := o[7] * o[9];
//   o[11] := -1.1524407806681 + o[10];
//   o[12] := o[11] * o[2];
//   o[13] := -1.2654315477714 + o[12];
//   o[14] := o[1] * o[13];
//   o[15] := o[1] * o[2] * o[5] * f.tau;
//   o[16] := o[2] * o[5];
//   o[17] := o[1] * o[5];
//   o[18] := o[5] ^ 2.0;
//   o[19] := o[1] * o[18] * o[2];
//   o[20] := o[1] * o[18] * o[2] * f.tau;
//   o[21] := o[18] * o[5];
//   o[22] := o[1] * o[18] * o[5];
//   o[23] := 0.25116816848616 * o[2];
//   o[24] := 0.078841073758308 + o[23];
//   o[25] := o[15] * o[24];
//   o[26] := -6.100523451393 + o[25];
//   o[27] := o[26] * f.tau;
//   o[28] := 9.7944563083754 + o[27];
//   o[29] := o[2] * o[28];
//   o[30] := -1.70429417648412 + o[29];
//   o[31] := o[1] * o[30];
//   o[32] := f.delta ^ 2.0;
//   o[33] := -10.9153200808732 * o[1];
//   o[34] := 13.2781565976477 + o[33];
//   o[35] := o[34] * o[7];
//   o[36] := -6.9146446840086 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -2.5308630955428 + o[37];
//   o[39] := o[38] * f.tau;
//   o[40] := o[18] * o[5] * f.tau;
//   f.f := -15.732845290239 + f.tau * (20.944396974307 + (-7.6867707878716 + o[3] * (2.6185947787954 + o[4] * (-2.808078114862 + o[1] * (1.2053369696517 + -0.0084566812812502 * o[6])))) * f.tau) + f.delta * (o[14] + f.delta * (0.38493460186671 + o[1] * (-0.85214708824206 + o[2] * (4.8972281541877 + (-3.0502617256965 + o[15] * (0.039420536879154 + 0.12558408424308 * o[2])) * f.tau)) + f.delta * (-0.2799932969871 + o[1] * (1.389979956946 + o[1] * (-2.018991502357 + o[16] * (-0.0082147637173963 + -0.47596035734923 * o[17]))) + f.delta * (0.0439840744735 + o[1] * (-0.44476435428739 + o[1] * (0.90572070719733 + 0.70522450087967 * o[19])) + f.delta * (f.delta * (-0.022175400873096 + o[1] * (0.094260751665092 + 0.16436278447961 * o[21]) + f.delta * (-0.013503372241348 * o[1] + f.delta * (-0.014834345352472 * o[22] + f.delta * (o[1] * (0.00057922953628084 + 0.0032308904703711 * o[21]) + f.delta * (8.0964802996215e-05 + -4.4923899061815e-05 * f.delta * o[22] + -0.00016557679795037 * f.tau))))) + (0.10770512626332 + o[1] * (-0.32913623258954 + -0.50871062041158 * o[20])) * f.tau))))) + 1.0658070028513 * log(f.delta);
//   f.fdelta := (1.0658070028513 + f.delta * (o[14] + f.delta * (0.76986920373342 + o[31] + f.delta * (-0.8399798909613 + o[1] * (4.169939870838 + o[1] * (-6.056974507071 + o[16] * (-0.0246442911521889 + -1.42788107204769 * o[17]))) + f.delta * (0.175936297894 + o[1] * (-1.77905741714956 + o[1] * (3.6228828287893 + 2.82089800351868 * o[19])) + f.delta * (f.delta * (-0.133052405238576 + o[1] * (0.56556450999055 + 0.98617670687766 * o[21]) + f.delta * (-0.094523605689436 * o[1] + f.delta * (-0.118674762819776 * o[22] + f.delta * (o[1] * (0.0052130658265276 + 0.0290780142333399 * o[21]) + f.delta * (0.00080964802996215 + -0.00049416288967996 * f.delta * o[22] + -0.0016557679795037 * f.tau))))) + (0.5385256313166 + o[1] * (-1.6456811629477 + -2.5435531020579 * o[20])) * f.tau)))))) / f.delta;
//   f.fdeltadelta := (-1.0658070028513 + o[32] * (0.76986920373342 + o[31] + f.delta * (-1.6799597819226 + o[1] * (8.339879741676 + o[1] * (-12.113949014142 + o[16] * (-0.049288582304378 + -2.85576214409538 * o[17]))) + f.delta * (0.527808893682 + o[1] * (-5.3371722514487 + o[1] * (10.868648486368 + 8.462694010556 * o[19])) + f.delta * (f.delta * (-0.66526202619288 + o[1] * (2.82782254995276 + 4.9308835343883 * o[21]) + f.delta * (-0.56714163413662 * o[1] + f.delta * (-0.83072333973843 * o[22] + f.delta * (o[1] * (0.04170452661222 + 0.232624113866719 * o[21]) + f.delta * (0.0072868322696594 + -0.0049416288967996 * f.delta * o[22] + -0.0149019118155333 * f.tau))))) + (2.1541025252664 + o[1] * (-6.5827246517908 + -10.1742124082316 * o[20])) * f.tau))))) / o[32];
//   f.ftau := 20.944396974307 + (-15.3735415757432 + o[3] * (18.3301634515678 + o[4] * (-28.08078114862 + o[1] * (14.4640436358204 + -0.194503669468755 * o[6])))) * f.tau + f.delta * (o[39] + f.delta * (f.tau * (-1.70429417648412 + o[2] * (29.3833689251262 + (-21.3518320798755 + o[15] * (0.86725181134139 + 3.2651861903201 * o[2])) * f.tau)) + f.delta * ((2.779959913892 + o[1] * (-8.075966009428 + o[16] * (-0.131436219478341 + -12.37496929108 * o[17]))) * f.tau + f.delta * ((-0.88952870857478 + o[1] * (3.6228828287893 + 18.3358370228714 * o[19])) * f.tau + f.delta * (0.10770512626332 + o[1] * (-0.98740869776862 + -13.2264761307011 * o[20]) + f.delta * ((0.188521503330184 + 4.2734323964699 * o[21]) * f.tau + f.delta * (-0.027006744482696 * f.tau + f.delta * (-0.38569297916427 * o[40] + f.delta * (f.delta * (-0.00016557679795037 + -0.00116802137560719 * f.delta * o[40]) + (0.00115845907256168 + 0.084003152229649 * o[21]) * f.tau)))))))));
//   f.ftautau := -15.3735415757432 + o[3] * (109.980980709407 + o[4] * (-252.72703033758 + o[1] * (159.104479994024 + -4.2790807283126 * o[6]))) + f.delta * (-2.5308630955428 + o[2] * (-34.573223420043 + (185.894192367068 + -174.645121293971 * o[1]) * o[7]) + f.delta * (-1.70429417648412 + o[2] * (146.916844625631 + (-128.110992479253 + o[15] * (18.2122880381691 + 81.629654758002 * o[2])) * f.tau) + f.delta * (2.779959913892 + o[1] * (-24.227898028284 + o[16] * (-1.97154329217511 + -309.374232277 * o[17])) + f.delta * (-0.88952870857478 + o[1] * (10.868648486368 + 458.39592557179 * o[19]) + f.delta * (f.delta * (0.188521503330184 + 106.835809911747 * o[21] + f.delta * (-0.027006744482696 + f.delta * (-9.6423244791068 * o[21] + f.delta * (0.00115845907256168 + 2.10007880574121 * o[21] + -0.0292005343901797 * o[21] * o[32])))) + (-1.97481739553724 + -330.66190326753 * o[20]) * f.tau)))));
//   f.fdeltatau := o[39] + f.delta * (f.tau * (-3.4085883529682 + o[2] * (58.766737850252 + (-42.703664159751 + o[15] * (1.73450362268278 + 6.5303723806402 * o[2])) * f.tau)) + f.delta * ((8.339879741676 + o[1] * (-24.227898028284 + o[16] * (-0.39430865843502 + -37.12490787324 * o[17]))) * f.tau + f.delta * ((-3.5581148342991 + o[1] * (14.4915313151573 + 73.343348091486 * o[19])) * f.tau + f.delta * (0.5385256313166 + o[1] * (-4.9370434888431 + -66.132380653505 * o[20]) + f.delta * ((1.1311290199811 + 25.6405943788192 * o[21]) * f.tau + f.delta * (-0.189047211378872 * f.tau + f.delta * (-3.08554383331418 * o[40] + f.delta * (f.delta * (-0.0016557679795037 + -0.0128482351316791 * f.delta * o[40]) + (0.0104261316530551 + 0.75602837006684 * o[21]) * f.tau))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3 \"Helmholtz function for region 3: f(d,T), including 3rd derivatives\"
//   input Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real del \"dimensionless density\";
//   protected Real[62] o \"vector of auxiliary variables\";
// algorithm
//   f.T := T;
//   f.d := d;
//   f.R := 461.526;
//   tau := 647.096 / T;
//   del := if d == 322.0 and T == 647.096 then 0.999999999999999 else abs(d / 322.0);
//   f.tau := tau;
//   f.delta := del;
//   o[1] := tau ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] * tau;
//   o[4] := o[1] * tau;
//   o[5] := o[2] ^ 2.0;
//   o[6] := o[1] * o[5] * tau;
//   o[7] := o[5] * tau;
//   o[8] := -0.64207765181607 * o[1];
//   o[9] := 0.88521043984318 + o[8];
//   o[10] := o[7] * o[9];
//   o[11] := -1.1524407806681 + o[10];
//   o[12] := o[11] * o[2];
//   o[13] := -1.2654315477714 + o[12];
//   o[14] := o[1] * o[13];
//   o[15] := o[1] * o[2] * o[5] * tau;
//   o[16] := o[2] * o[5];
//   o[17] := o[1] * o[5];
//   o[18] := o[5] ^ 2.0;
//   o[19] := o[1] * o[18] * o[2];
//   o[20] := o[1] * o[18] * o[2] * tau;
//   o[21] := o[18] * o[5];
//   o[22] := o[1] * o[18] * o[5];
//   o[23] := 0.25116816848616 * o[2];
//   o[24] := 0.078841073758308 + o[23];
//   o[25] := o[15] * o[24];
//   o[26] := -6.100523451393 + o[25];
//   o[27] := o[26] * tau;
//   o[28] := 9.7944563083754 + o[27];
//   o[29] := o[2] * o[28];
//   o[30] := -1.70429417648412 + o[29];
//   o[31] := o[1] * o[30];
//   o[32] := del ^ 2.0;
//   o[33] := -2.85576214409538 * o[17];
//   o[34] := -0.0492885823043778 + o[33];
//   o[35] := o[16] * o[34];
//   o[36] := -12.113949014142 + o[35];
//   o[37] := o[1] * o[36];
//   o[38] := 8.339879741676 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := del * o[32];
//   o[41] := -10.9153200808732 * o[1];
//   o[42] := 13.2781565976477 + o[41];
//   o[43] := o[42] * o[7];
//   o[44] := -6.9146446840086 + o[43];
//   o[45] := o[2] * o[44];
//   o[46] := -2.5308630955428 + o[45];
//   o[47] := o[46] * tau;
//   o[48] := o[18] * o[5] * tau;
//   o[49] := -174.645121293971 * o[1];
//   o[50] := 185.894192367068 + o[49];
//   o[51] := o[50] * o[7];
//   o[52] := -34.573223420043 + o[51];
//   o[53] := o[2] * o[52];
//   o[54] := 6.53037238064016 * o[2];
//   o[55] := 1.73450362268278 + o[54];
//   o[56] := o[15] * o[55];
//   o[57] := -42.703664159751 + o[56];
//   o[58] := o[57] * tau;
//   o[59] := 58.7667378502524 + o[58];
//   o[60] := o[2] * o[59];
//   o[61] := -3.40858835296824 + o[60];
//   o[62] := o[61] * tau;
//   f.f := -15.732845290239 + tau * (20.944396974307 + (-7.6867707878716 + o[3] * (2.6185947787954 + o[4] * (-2.808078114862 + o[1] * (1.2053369696517 + -0.0084566812812502 * o[6])))) * tau) + del * (o[14] + del * (0.38493460186671 + o[1] * (-0.85214708824206 + o[2] * (4.8972281541877 + (-3.0502617256965 + o[15] * (0.039420536879154 + 0.12558408424308 * o[2])) * tau)) + del * (-0.2799932969871 + o[1] * (1.389979956946 + o[1] * (-2.018991502357 + o[16] * (-0.0082147637173963 + -0.47596035734923 * o[17]))) + del * (0.0439840744735 + o[1] * (-0.44476435428739 + o[1] * (0.90572070719733 + 0.70522450087967 * o[19])) + del * (del * (-0.022175400873096 + o[1] * (0.094260751665092 + 0.16436278447961 * o[21]) + del * (-0.013503372241348 * o[1] + del * (-0.014834345352472 * o[22] + del * (o[1] * (0.00057922953628084 + 0.0032308904703711 * o[21]) + del * (8.0964802996215e-05 + -4.4923899061815e-05 * del * o[22] + -0.00016557679795037 * tau))))) + (0.10770512626332 + o[1] * (-0.32913623258954 + -0.50871062041158 * o[20])) * tau))))) + 1.0658070028513 * log(del);
//   f.fdelta := (1.0658070028513 + del * (o[14] + del * (0.76986920373342 + o[31] + del * (-0.8399798909613 + o[1] * (4.169939870838 + o[1] * (-6.056974507071 + o[16] * (-0.0246442911521889 + -1.42788107204769 * o[17]))) + del * (0.175936297894 + o[1] * (-1.77905741714956 + o[1] * (3.62288282878932 + 2.82089800351868 * o[19])) + del * (del * (-0.133052405238576 + o[1] * (0.565564509990552 + 0.98617670687766 * o[21]) + del * (-0.094523605689436 * o[1] + del * (-0.118674762819776 * o[22] + del * (o[1] * (0.00521306582652756 + 0.0290780142333399 * o[21]) + del * (0.00080964802996215 + -0.000494162889679965 * del * o[22] + -0.0016557679795037 * tau))))) + (0.5385256313166 + o[1] * (-1.6456811629477 + -2.5435531020579 * o[20])) * tau)))))) / del;
//   f.fdeltadelta := (-1.0658070028513 + o[32] * (0.76986920373342 + o[31] + del * (-1.6799597819226 + o[39] + del * (0.527808893682 + o[1] * (-5.33717225144868 + o[1] * (10.868648486368 + 8.46269401055604 * o[19])) + del * (del * (-0.66526202619288 + o[1] * (2.82782254995276 + 4.9308835343883 * o[21]) + del * (-0.567141634136616 * o[1] + del * (-0.830723339738432 * o[22] + del * (o[1] * (0.0417045266122205 + 0.232624113866719 * o[21]) + del * (0.00728683226965935 + -0.00494162889679965 * del * o[22] + -0.0149019118155333 * tau))))) + (2.1541025252664 + o[1] * (-6.5827246517908 + -10.1742124082316 * o[20])) * tau))))) / o[32];
//   f.fdeltadeltadelta := (2.1316140057026 + o[40] * (-1.6799597819226 + o[39] + del * (1.055617787364 + o[1] * (-10.6743445028974 + o[1] * (21.7372969727359 + 16.9253880211121 * o[19])) + del * (del * (-2.66104810477152 + o[1] * (11.311290199811 + 19.7235341375532 * o[21]) + del * (-2.83570817068308 * o[1] + del * (-4.98434003843059 * o[22] + del * (o[1] * (0.291931686285543 + 1.62836879706703 * o[21]) + del * (0.0582946581572748 + -0.0444746600711968 * del * o[22] + -0.119215294524266 * tau))))) + (6.4623075757992 + o[1] * (-19.7481739553724 + -30.5226372246948 * o[20])) * tau)))) / o[40];
//   f.ftau := 20.944396974307 + (-15.3735415757432 + o[3] * (18.3301634515678 + o[4] * (-28.08078114862 + o[1] * (14.4640436358204 + -0.194503669468755 * o[6])))) * tau + del * (o[47] + del * (tau * (-1.70429417648412 + o[2] * (29.3833689251262 + (-21.3518320798755 + o[15] * (0.867251811341388 + 3.26518619032008 * o[2])) * tau)) + del * ((2.779959913892 + o[1] * (-8.075966009428 + o[16] * (-0.131436219478341 + -12.37496929108 * o[17]))) * tau + del * ((-0.88952870857478 + o[1] * (3.62288282878932 + 18.3358370228714 * o[19])) * tau + del * (0.10770512626332 + o[1] * (-0.98740869776862 + -13.2264761307011 * o[20]) + del * ((0.188521503330184 + 4.27343239646986 * o[21]) * tau + del * (-0.027006744482696 * tau + del * (-0.385692979164272 * o[48] + del * (del * (-0.00016557679795037 + -0.00116802137560719 * del * o[48]) + (0.00115845907256168 + 0.0840031522296486 * o[21]) * tau)))))))));
//   f.ftautau := -15.3735415757432 + o[3] * (109.980980709407 + o[4] * (-252.72703033758 + o[1] * (159.104479994024 + -4.2790807283126 * o[6]))) + del * (-2.5308630955428 + o[53] + del * (-1.70429417648412 + o[2] * (146.916844625631 + (-128.110992479253 + o[15] * (18.2122880381691 + 81.629654758002 * o[2])) * tau) + del * (2.779959913892 + o[1] * (-24.227898028284 + o[16] * (-1.97154329217511 + -309.374232277 * o[17])) + del * (-0.88952870857478 + o[1] * (10.868648486368 + 458.395925571786 * o[19]) + del * (del * (0.188521503330184 + 106.835809911746 * o[21] + del * (-0.027006744482696 + del * (-9.6423244791068 * o[21] + del * (0.00115845907256168 + 2.10007880574121 * o[21] + -0.0292005343901797 * o[21] * o[32])))) + (-1.97481739553724 + -330.661903267527 * o[20]) * tau)))));
//   f.ftautautau := o[2] * (549.904903547034 + o[4] * (-2021.81624270064 + o[1] * (1591.04479994024 + -89.8606952945646 * o[6]))) + del * (o[4] * (-138.292893680172 + (2416.62450077188 + -2619.67681940957 * o[1]) * o[7]) + del * (o[4] * (587.667378502524 + (-640.554962396265 + o[15] * (364.245760763383 + 1959.11171419205 * o[2])) * tau) + del * ((-48.455796056568 + o[16] * (-27.6016060904516 + -7424.98157464799 * o[17])) * tau + del * (del * (-1.97481739553724 + -7935.88567842065 * o[20] + del * (2564.05943788192 * o[20] + o[32] * (-231.415787498563 * o[20] + del * (50.4018913377892 * o[20] + -0.700812825364314 * o[20] * o[32])))) + (21.7372969727359 + 11001.5022137229 * o[19]) * tau))));
//   f.fdeltatau := o[47] + del * (o[62] + del * ((8.339879741676 + o[1] * (-24.227898028284 + o[16] * (-0.394308658435022 + -37.1249078732399 * o[17]))) * tau + del * ((-3.55811483429912 + o[1] * (14.4915313151573 + 73.3433480914857 * o[19])) * tau + del * (0.5385256313166 + o[1] * (-4.9370434888431 + -66.1323806535054 * o[20]) + del * ((1.1311290199811 + 25.6405943788192 * o[21]) * tau + del * (-0.189047211378872 * tau + del * (-3.08554383331418 * o[48] + del * (del * (-0.0016557679795037 + -0.0128482351316791 * del * o[48]) + (0.0104261316530551 + 0.756028370066837 * o[21]) * tau))))))));
//   f.fdeltatautau := -2.5308630955428 + o[53] + del * (-3.40858835296824 + o[2] * (293.833689251262 + (-256.221984958506 + o[15] * (36.4245760763383 + 163.259309516004 * o[2])) * tau) + del * (8.339879741676 + o[1] * (-72.683694084852 + o[16] * (-5.91462987652534 + -928.122696830999 * o[17])) + del * (-3.55811483429912 + o[1] * (43.4745939454718 + 1833.58370228714 * o[19]) + del * (del * (1.1311290199811 + 641.014859470479 * o[21] + del * (-0.189047211378872 + del * (-77.1385958328544 * o[21] + del * (0.0104261316530551 + 18.9007092516709 * o[21] + -0.321205878291977 * o[21] * o[32])))) + (-9.8740869776862 + -1653.30951633764 * o[20]) * tau))));
//   f.fdeltadeltatau := o[62] + del * ((16.679759483352 + o[1] * (-48.455796056568 + o[16] * (-0.788617316870045 + -74.2498157464799 * o[17]))) * tau + del * ((-10.6743445028974 + o[1] * (43.4745939454718 + 220.030044274457 * o[19])) * tau + del * (2.1541025252664 + o[1] * (-19.7481739553724 + -264.529522614022 * o[20]) + del * ((5.65564509990552 + 128.202971894096 * o[21]) * tau + del * (-1.13428326827323 * tau + del * (-21.5988068331992 * o[48] + del * (del * (-0.0149019118155333 + -0.128482351316791 * del * o[48]) + (0.0834090532244409 + 6.0482269605347 * o[21]) * tau)))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1 \"Gibbs function for region 1: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real tau1 \"dimensionless temperature\";
//   protected Real[45] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 16530000.0;
//   g.tau := 1386.0 / max(T, 273.16);
//   pi1 := 7.1 - g.pi;
//   tau1 := -1.222 + g.tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] * tau1;
//   o[5] := 1.0 / o[4];
//   o[6] := o[1] * o[2];
//   o[7] := o[1] * tau1;
//   o[8] := 1.0 / o[7];
//   o[9] := o[1] * o[2] * o[3];
//   o[10] := 1.0 / o[2];
//   o[11] := o[2] * tau1;
//   o[12] := 1.0 / o[11];
//   o[13] := o[2] * o[3];
//   o[14] := 1.0 / o[3];
//   o[15] := pi1 ^ 2.0;
//   o[16] := o[15] * pi1;
//   o[17] := o[15] ^ 2.0;
//   o[18] := o[17] ^ 2.0;
//   o[19] := o[17] * o[18] * pi1;
//   o[20] := o[15] * o[17];
//   o[21] := o[3] ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[22] * o[3] * tau1;
//   o[24] := 1.0 / o[23];
//   o[25] := o[22] * o[3];
//   o[26] := 1.0 / o[25];
//   o[27] := o[1] * o[2] * o[22] * tau1;
//   o[28] := 1.0 / o[27];
//   o[29] := o[1] * o[2] * o[22];
//   o[30] := 1.0 / o[29];
//   o[31] := o[1] * o[2] * o[21] * o[3] * tau1;
//   o[32] := 1.0 / o[31];
//   o[33] := o[2] * o[21] * o[3] * tau1;
//   o[34] := 1.0 / o[33];
//   o[35] := o[1] * o[3] * tau1;
//   o[36] := 1.0 / o[35];
//   o[37] := o[1] * o[3];
//   o[38] := 1.0 / o[37];
//   o[39] := 1.0 / o[6];
//   o[40] := o[1] * o[22] * o[3];
//   o[41] := 1.0 / o[40];
//   o[42] := 1.0 / o[22];
//   o[43] := o[1] * o[2] * o[21] * o[3];
//   o[44] := 1.0 / o[43];
//   o[45] := 1.0 / o[13];
//   g.g := pi1 * (pi1 * (pi1 * (o[10] * (-3.1679644845054e-05 + o[2] * (-2.8270797985312e-06 + -8.5205128120103e-10 * o[6])) + pi1 * (o[12] * (-2.2425281908e-06 + (-6.5171222895601e-07 + -1.4341729937924e-13 * o[13]) * o[7]) + pi1 * (-4.0516996860117e-07 * o[14] + o[16] * ((-1.2734301741641e-09 + -1.7424871230634e-10 * o[11]) * o[36] + o[19] * (-6.8762131295531e-19 * o[34] + o[15] * (1.4478307828521e-20 * o[32] + o[20] * (2.6335781662795e-23 * o[30] + pi1 * (-1.1947622640071e-23 * o[28] + pi1 * (1.8228094581404e-24 * o[26] + -9.3537087292458e-26 * o[24] * pi1))))))))) + o[8] * (-0.00047184321073267 + o[7] * (-0.00030001780793026 + (4.7661393906987e-05 + o[1] * (-4.4141845330846e-06 + -7.2694996297594e-16 * o[9])) * tau1))) + o[5] * (0.00028319080123804 + o[1] * (-0.00060706301565874 + o[6] * (-0.018990068218419 + tau1 * (-0.032529748770505 + (-0.021841717175414 + -5.283835796993e-05 * o[1]) * tau1))))) + (0.14632971213167 + tau1 * (-0.84548187169114 + tau1 * (-3.756360367204 + tau1 * (3.3855169168385 + tau1 * (-0.95791963387872 + tau1 * (0.15772038513228 + (-0.016616417199501 + 0.00081214629983568 * tau1) * tau1)))))) / o[1];
//   g.gpi := pi1 * (pi1 * (o[10] * (9.5038934535162e-05 + o[2] * (8.4812393955936e-06 + 2.55615384360309e-09 * o[6])) + pi1 * (o[12] * (8.9701127632e-06 + (2.60684891582404e-06 + 5.7366919751696e-13 * o[13]) * o[7]) + pi1 * (2.02584984300585e-06 * o[14] + o[16] * ((1.01874413933128e-08 + 1.39398969845072e-09 * o[11]) * o[36] + o[19] * (1.44400475720615e-17 * o[34] + o[15] * (-3.3300108005598e-19 * o[32] + o[20] * (-7.6373766822106e-22 * o[30] + pi1 * (3.5842867920213e-22 * o[28] + pi1 * (-5.6507093202352e-23 * o[26] + 2.99318679335866e-24 * o[24] * pi1))))))))) + o[8] * (0.00094368642146534 + o[7] * (0.00060003561586052 + (-9.5322787813974e-05 + o[1] * (8.8283690661692e-06 + 1.45389992595188e-15 * o[9])) * tau1))) + o[5] * (-0.00028319080123804 + o[1] * (0.00060706301565874 + o[6] * (0.018990068218419 + tau1 * (0.032529748770505 + (0.021841717175414 + 5.283835796993e-05 * o[1]) * tau1))));
//   g.gpipi := pi1 * (o[10] * (-0.000190077869070324 + o[2] * (-1.69624787911872e-05 + -5.1123076872062e-09 * o[6])) + pi1 * (o[12] * (-2.69103382896e-05 + (-7.8205467474721e-06 + -1.72100759255088e-12 * o[13]) * o[7]) + pi1 * (-8.1033993720234e-06 * o[14] + o[16] * ((-7.131208975319e-08 + -9.757927889155e-09 * o[11]) * o[36] + o[19] * (-2.8880095144123e-16 * o[34] + o[15] * (7.3260237612316e-18 * o[32] + o[20] * (2.13846547101895e-20 * o[30] + pi1 * (-1.03944316968618e-20 * o[28] + pi1 * (1.69521279607057e-21 * o[26] + -9.2788790594118e-23 * o[24] * pi1))))))))) + o[8] * (-0.00094368642146534 + o[7] * (-0.00060003561586052 + (9.5322787813974e-05 + o[1] * (-8.8283690661692e-06 + -1.45389992595188e-15 * o[9])) * tau1));
//   g.gtau := pi1 * (o[38] * (-0.00254871721114236 + o[1] * (0.0042494411096112 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (0.00141552963219801 + o[2] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[9]))) + pi1 * (o[12] * (0.000126718579380216 + -5.1123076872062e-09 * o[37]) + pi1 * (o[39] * (1.1212640954e-05 + (1.30342445791202e-06 + -1.4341729937924e-12 * o[13]) * o[7]) + pi1 * (3.2413597488094e-06 * o[5] + o[16] * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[11]) * o[45] + o[19] * (1.9941018075704e-17 * o[44] + o[15] * (-4.4882754268415e-19 * o[42] + o[20] * (-1.00075970318621e-21 * o[28] + pi1 * (4.6595728296277e-22 * o[26] + pi1 * (-7.2912378325616e-23 * o[24] + 3.8350205789908e-24 * o[41] * pi1))))))))))) + o[8] * (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1)))));
//   g.gtautau := pi1 * (o[36] * (0.0254871721114236 + o[1] * (-0.033995528876889 + (-0.037980136436838 + -0.00031703014781958 * o[2]) * o[6])) + pi1 * (o[12] * (-0.005662118528792 + o[6] * (-2.64851071985076e-05 + -1.97730389929456e-13 * o[9])) + pi1 * ((-0.00063359289690108 + -2.55615384360309e-08 * o[37]) * o[39] + pi1 * (pi1 * (-2.91722377392842e-05 * o[38] + o[16] * (o[19] * (-5.9823054227112e-16 * o[32] + o[15] * (o[20] * (3.9029628424262e-20 * o[26] + pi1 * (-1.86382913185108e-20 * o[24] + pi1 * (2.98940751135026e-21 * o[41] + -1.61070864317613e-22 * pi1 / (o[1] * o[22] * o[3] * tau1)))) + 1.43624813658928e-17 / (o[22] * tau1))) + (-1.68092782989661e-07 + -7.3184459168663e-09 * o[11]) / (o[2] * o[3] * tau1))) + (-6.7275845724e-05 + (-3.9102733737361e-06 + -1.29075569441316e-11 * o[13]) * o[7]) / (o[1] * o[2] * tau1))))) + o[10] * (0.87797827279002 + tau1 * (-1.69096374338228 + o[7] * (-1.91583926775744 + tau1 * (0.94632231079368 + (-0.199397006394012 + 0.0162429259967136 * tau1) * tau1))));
//   g.gtaupi := o[38] * (0.00254871721114236 + o[1] * (-0.0042494411096112 + (-0.018990068218419 + (0.021841717175414 + 0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (-0.00283105926439602 + o[2] * (-9.5322787813974e-05 + o[1] * (2.64851071985076e-05 + 2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (-0.00038015573814065 + 1.53369230616185e-08 * o[37]) + pi1 * (o[39] * (-4.4850563816e-05 + (-5.2136978316481e-06 + 5.7366919751696e-12 * o[13]) * o[7]) + pi1 * (-1.62067987440468e-05 * o[5] + o[16] * ((-1.12061855326441e-07 + -8.3639381907043e-09 * o[11]) * o[45] + o[19] * (-4.1876137958978e-16 * o[44] + o[15] * (1.03230334817355e-17 * o[42] + o[20] * (2.90220313924001e-20 * o[28] + pi1 * (-1.39787184888831e-20 * o[26] + pi1 * (2.2602837280941e-21 * o[24] + -1.22720658527705e-22 * o[41] * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3 \"base function for region 1 with 3rd derivatives for sensitivities: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs function and derivatives up to 3rd derivatives\";
//   protected Real pi1;
//   protected Real tau1;
//   protected Real[55] o;
// algorithm
//   assert( p > 611.657, \"IF97 medium function g1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 100000000.0, \"IF97 medium function g1: the input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 100 Mpa\");
//   assert( T >= 273.15, \"IF97 medium function g1: the temperature (= \" + String(T, 0, true, 6) + \" K)  is lower than 273.15 K!\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := p / 16530000.0;
//   g.tau := 1386.0 / T;
//   pi1 := 7.1 - g.pi;
//   tau1 := -1.222 + g.tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] * tau1;
//   o[5] := 1.0 / o[4];
//   o[6] := o[1] * o[2];
//   o[7] := o[1] * tau1;
//   o[8] := 1.0 / o[7];
//   o[9] := o[1] * o[2] * o[3];
//   o[10] := 1.0 / o[2];
//   o[11] := o[2] * tau1;
//   o[12] := 1.0 / o[11];
//   o[13] := o[2] * o[3];
//   o[14] := 1.0 / o[3];
//   o[15] := pi1 ^ 2.0;
//   o[16] := o[15] * pi1;
//   o[17] := o[15] ^ 2.0;
//   o[18] := o[17] ^ 2.0;
//   o[19] := o[17] * o[18] * pi1;
//   o[20] := o[15] * o[17];
//   o[21] := o[3] ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[22] * o[3] * tau1;
//   o[24] := 1.0 / o[23];
//   o[25] := o[22] * o[3];
//   o[26] := 1.0 / o[25];
//   o[27] := o[1] * o[2] * o[22] * tau1;
//   o[28] := 1.0 / o[27];
//   o[29] := o[1] * o[2] * o[22];
//   o[30] := 1.0 / o[29];
//   o[31] := o[1] * o[2] * o[21] * o[3] * tau1;
//   o[32] := 1.0 / o[31];
//   o[33] := o[2] * o[21] * o[3] * tau1;
//   o[34] := 1.0 / o[33];
//   o[35] := o[1] * o[3] * tau1;
//   o[36] := 1.0 / o[35];
//   o[37] := 5.85475673349302e-08 * o[11];
//   o[38] := o[1] * o[3];
//   o[39] := 1.0 / o[38];
//   o[40] := 1.0 / o[6];
//   o[41] := o[1] * o[22] * o[3];
//   o[42] := 1.0 / o[41];
//   o[43] := 1.0 / o[22];
//   o[44] := o[1] * o[2] * o[21] * o[3];
//   o[45] := 1.0 / o[44];
//   o[46] := 1.0 / o[13];
//   o[47] := -0.00031703014781958 * o[2];
//   o[48] := o[1] * o[2] * tau1;
//   o[49] := 1.0 / o[48];
//   o[50] := o[1] * o[22] * o[3] * tau1;
//   o[51] := 1.0 / o[50];
//   o[52] := o[22] * tau1;
//   o[53] := 1.0 / o[52];
//   o[54] := o[2] * o[3] * tau1;
//   o[55] := 1.0 / o[54];
//   g.g := pi1 * (pi1 * (pi1 * (o[10] * (-3.1679644845054e-05 + o[2] * (-2.8270797985312e-06 + -8.5205128120103e-10 * o[6])) + pi1 * (o[12] * (-2.2425281908e-06 + (-6.5171222895601e-07 + -1.4341729937924e-13 * o[13]) * o[7]) + pi1 * (-4.0516996860117e-07 * o[14] + o[16] * ((-1.2734301741641e-09 + -1.7424871230634e-10 * o[11]) * o[36] + o[19] * (-6.8762131295531e-19 * o[34] + o[15] * (1.4478307828521e-20 * o[32] + o[20] * (2.6335781662795e-23 * o[30] + pi1 * (-1.1947622640071e-23 * o[28] + pi1 * (1.8228094581404e-24 * o[26] + -9.3537087292458e-26 * o[24] * pi1))))))))) + o[8] * (-0.00047184321073267 + o[7] * (-0.00030001780793026 + (4.7661393906987e-05 + o[1] * (-4.4141845330846e-06 + -7.2694996297594e-16 * o[9])) * tau1))) + o[5] * (0.00028319080123804 + o[1] * (-0.00060706301565874 + o[6] * (-0.018990068218419 + tau1 * (-0.032529748770505 + (-0.021841717175414 + -5.283835796993e-05 * o[1]) * tau1))))) + (0.14632971213167 + tau1 * (-0.84548187169114 + tau1 * (-3.756360367204 + tau1 * (3.3855169168385 + tau1 * (-0.95791963387872 + tau1 * (0.15772038513228 + (-0.016616417199501 + 0.00081214629983568 * tau1) * tau1)))))) / o[1];
//   g.gpi := pi1 * (pi1 * (o[10] * (9.5038934535162e-05 + o[2] * (8.4812393955936e-06 + 2.55615384360309e-09 * o[6])) + pi1 * (o[12] * (8.9701127632e-06 + (2.60684891582404e-06 + 5.7366919751696e-13 * o[13]) * o[7]) + pi1 * (2.02584984300585e-06 * o[14] + o[16] * ((1.01874413933128e-08 + 1.39398969845072e-09 * o[11]) * o[36] + o[19] * (1.44400475720615e-17 * o[34] + o[15] * (-3.33001080055983e-19 * o[32] + o[20] * (-7.63737668221055e-22 * o[30] + pi1 * (3.5842867920213e-22 * o[28] + pi1 * (-5.65070932023524e-23 * o[26] + 2.99318679335866e-24 * o[24] * pi1))))))))) + o[8] * (0.00094368642146534 + o[7] * (0.00060003561586052 + (-9.5322787813974e-05 + o[1] * (8.8283690661692e-06 + 1.45389992595188e-15 * o[9])) * tau1))) + o[5] * (-0.00028319080123804 + o[1] * (0.00060706301565874 + o[6] * (0.018990068218419 + tau1 * (0.032529748770505 + (0.021841717175414 + 5.283835796993e-05 * o[1]) * tau1))));
//   g.gpipi := pi1 * (o[10] * (-0.000190077869070324 + o[2] * (-1.69624787911872e-05 + -5.11230768720618e-09 * o[6])) + pi1 * (o[12] * (-2.69103382896e-05 + (-7.82054674747212e-06 + -1.72100759255088e-12 * o[13]) * o[7]) + pi1 * (-8.1033993720234e-06 * o[14] + o[16] * ((-7.13120897531896e-08 + -9.75792788915504e-09 * o[11]) * o[36] + o[19] * (-2.8880095144123e-16 * o[34] + o[15] * (7.32602376123163e-18 * o[32] + o[20] * (2.13846547101895e-20 * o[30] + pi1 * (-1.03944316968618e-20 * o[28] + pi1 * (1.69521279607057e-21 * o[26] + -9.27887905941183e-23 * o[24] * pi1))))))))) + o[8] * (-0.00094368642146534 + o[7] * (-0.00060003561586052 + (9.5322787813974e-05 + o[1] * (-8.8283690661692e-06 + -1.45389992595188e-15 * o[9])) * tau1));
//   g.gpipipi := o[10] * (0.000190077869070324 + o[2] * (1.69624787911872e-05 + 5.11230768720618e-09 * o[6])) + pi1 * (o[12] * (5.38206765792e-05 + (1.56410934949442e-05 + 3.44201518510176e-12 * o[13]) * o[7]) + pi1 * (2.43101981160702e-05 * o[14] + o[16] * (o[36] * (4.27872538519138e-07 + o[37]) + o[19] * (5.48721807738337e-15 * o[34] + o[15] * (-1.53846498985864e-16 * o[32] + o[20] * (-5.77385677175118e-19 * o[30] + pi1 * (2.9104408751213e-19 * o[28] + pi1 * (-4.91611710860466e-20 * o[26] + 2.78366371782355e-21 * o[24] * pi1))))))));
//   g.gtau := pi1 * (o[39] * (-0.00254871721114236 + o[1] * (0.00424944110961118 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (0.00141552963219801 + o[2] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[9]))) + pi1 * (o[12] * (0.000126718579380216 + -5.11230768720618e-09 * o[38]) + pi1 * (o[40] * (1.1212640954e-05 + (1.30342445791202e-06 + -1.4341729937924e-12 * o[13]) * o[7]) + pi1 * (3.24135974880936e-06 * o[5] + o[16] * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[11]) * o[46] + o[19] * (1.9941018075704e-17 * o[45] + o[15] * (-4.48827542684151e-19 * o[43] + o[20] * (-1.00075970318621e-21 * o[28] + pi1 * (4.65957282962769e-22 * o[26] + pi1 * (-7.2912378325616e-23 * o[24] + 3.83502057899078e-24 * o[42] * pi1))))))))))) + o[8] * (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1)))));
//   g.gtautau := pi1 * (o[36] * (0.0254871721114236 + o[1] * (-0.0339955288768894 + (-0.037980136436838 + o[47]) * o[6])) + pi1 * (o[12] * (-0.00566211852879204 + o[6] * (-2.64851071985076e-05 + -1.97730389929456e-13 * o[9])) + pi1 * ((-0.00063359289690108 + -2.55615384360309e-08 * o[38]) * o[40] + pi1 * (o[49] * (-6.7275845724e-05 + (-3.91027337373606e-06 + -1.29075569441316e-11 * o[13]) * o[7]) + pi1 * (-2.91722377392842e-05 * o[39] + o[16] * ((-1.68092782989661e-07 + -7.31844591686628e-09 * o[11]) * o[55] + o[19] * (-5.9823054227112e-16 * o[32] + o[15] * (1.43624813658928e-17 * o[53] + o[20] * (3.90296284242622e-20 * o[26] + pi1 * (-1.86382913185108e-20 * o[24] + pi1 * (2.98940751135026e-21 * o[42] + -1.61070864317613e-22 * o[51] * pi1))))))))))) + o[10] * (0.87797827279002 + tau1 * (-1.69096374338228 + o[7] * (-1.91583926775744 + tau1 * (0.94632231079368 + (-0.199397006394012 + 0.0162429259967136 * tau1) * tau1))));
//   g.gtautautau := pi1 * (o[46] * (-0.28035889322566 + o[1] * (0.305959759892005 + (0.113940409310514 + o[47]) * o[6])) + pi1 * (o[40] * (0.0283105926439602 + o[6] * (-2.64851071985076e-05 + -2.96595584894183e-12 * o[9])) + pi1 * ((0.00380155738140648 + -1.02246153744124e-07 * o[38]) * o[49] + pi1 * (o[14] * (0.000470930920068 + (1.56410934949442e-05 + -1.03260455553053e-10 * o[13]) * o[7]) + pi1 * (0.000291722377392842 * o[36] + o[16] * ((2.1852061788656e-06 + o[37]) / o[9] + o[19] * (1.85451468104047e-14 * o[43] + o[15] * (-4.73961885074464e-16 / (o[1] * o[22]) + o[20] * (-1.56118513697049e-18 * o[24] + pi1 * (7.64169944058941e-19 * o[42] + pi1 * (-1.25555115476711e-19 * o[51] + 6.92604716565734e-21 * pi1 / (o[2] * o[22] * o[3])))))))))))) + o[12] * (-3.51191309116008 + tau1 * (5.07289123014684 + o[2] * (0.94632231079368 + (-0.398794012788024 + 0.0487287779901408 * tau1) * tau1)));
//   g.gpitau := o[39] * (0.00254871721114236 + o[1] * (-0.00424944110961118 + (-0.018990068218419 + (0.021841717175414 + 0.00015851507390979 * o[1]) * o[1]) * o[6])) + pi1 * (o[10] * (-0.00283105926439602 + o[2] * (-9.5322787813974e-05 + o[1] * (2.64851071985076e-05 + 2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (-0.000380155738140648 + 1.53369230616185e-08 * o[38]) + pi1 * (o[40] * (-4.4850563816e-05 + (-5.21369783164808e-06 + 5.7366919751696e-12 * o[13]) * o[7]) + pi1 * (-1.62067987440468e-05 * o[5] + o[16] * ((-1.12061855326441e-07 + -8.36393819070432e-09 * o[11]) * o[46] + o[19] * (-4.18761379589784e-16 * o[45] + o[15] * (1.03230334817355e-17 * o[43] + o[20] * (2.90220313924001e-20 * o[28] + pi1 * (-1.39787184888831e-20 * o[26] + pi1 * (2.2602837280941e-21 * o[24] + -1.22720658527705e-22 * o[42] * pi1))))))))));
//   g.gpipitau := o[10] * (0.00283105926439602 + o[2] * (9.5322787813974e-05 + o[1] * (-2.64851071985076e-05 + -2.4716298741182e-14 * o[9]))) + pi1 * (o[12] * (0.000760311476281296 + -3.06738461232371e-08 * o[38]) + pi1 * (o[40] * (0.000134551691448 + (1.56410934949442e-05 + -1.72100759255088e-11 * o[13]) * o[7]) + pi1 * (6.48271949761872e-05 * o[5] + o[16] * ((7.84432987285086e-07 + o[37]) * o[46] + o[19] * (8.37522759179568e-15 * o[45] + o[15] * (-2.2710673659818e-16 * o[43] + o[20] * (-8.12616878987203e-19 * o[28] + pi1 * (4.05382836177609e-19 * o[26] + pi1 * (-6.78085118428229e-20 * o[24] + 3.80434041435885e-21 * o[42] * pi1)))))))));
//   g.gpitautau := o[36] * (-0.0254871721114236 + o[1] * (0.0339955288768894 + (0.037980136436838 + 0.00031703014781958 * o[2]) * o[6])) + pi1 * (o[12] * (0.0113242370575841 + o[6] * (5.29702143970152e-05 + 3.95460779858911e-13 * o[9])) + pi1 * ((0.00190077869070324 + 7.66846153080927e-08 * o[38]) * o[40] + pi1 * (o[49] * (0.000269103382896 + (1.56410934949442e-05 + 5.16302277765264e-11 * o[13]) * o[7]) + pi1 * (0.000145861188696421 * o[39] + o[16] * ((1.34474226391729e-06 + o[37]) * o[55] + o[19] * (1.25628413876935e-14 * o[32] + o[15] * (-3.30337071415535e-16 * o[53] + o[20] * (-1.1318592243036e-18 * o[26] + pi1 * (5.59148739555323e-19 * o[24] + pi1 * (-9.26716328518579e-20 * o[42] + 5.1542676581636e-21 * o[51] * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2 \"Gibbs function for region 2: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real tau2 \"dimensionless temperature\";
//   protected Real[55] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 1000000.0;
//   g.tau := 540.0 / max(T, 273.16);
//   tau2 := -0.5 + g.tau;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := -0.05032527872793 * o[2];
//   o[4] := -0.057581259083432 + o[3];
//   o[5] := o[4] * tau2;
//   o[6] := -0.045996013696365 + o[5];
//   o[7] := o[6] * tau2;
//   o[8] := -0.017834862292358 + o[7];
//   o[9] := o[8] * tau2;
//   o[10] := o[1] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[10] * o[11] * o[12] * tau2;
//   o[14] := o[1] * o[10] * tau2;
//   o[15] := o[10] * o[11] * tau2;
//   o[16] := o[1] * o[12] * tau2;
//   o[17] := o[1] * o[11] * tau2;
//   o[18] := o[1] * o[10] * o[11];
//   o[19] := o[10] * o[11] * o[12];
//   o[20] := o[1] * o[10];
//   o[21] := g.pi ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[21] * o[22];
//   o[24] := o[10] * o[12] * tau2;
//   o[25] := o[12] ^ 2.0;
//   o[26] := o[11] * o[12] * o[25] * tau2;
//   o[27] := o[10] * o[12];
//   o[28] := o[1] * o[10] * o[11] * tau2;
//   o[29] := o[10] * o[12] * o[25] * tau2;
//   o[30] := o[1] * o[10] * o[25] * tau2;
//   o[31] := o[1] * o[11] * o[12];
//   o[32] := o[1] * o[12];
//   o[33] := g.tau ^ 2.0;
//   o[34] := o[33] ^ 2.0;
//   o[35] := -5.3349095828174e-05 * o[13];
//   o[36] := -0.087594591301146 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -0.007878555448671 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := -0.0003789797503263 + o[39];
//   o[41] := o[40] * tau2;
//   o[42] := -6.6065283340406e-05 + o[41];
//   o[43] := o[42] * tau2;
//   o[44] := 5.7870447262208e-06 * tau2;
//   o[45] := -0.30195167236758 * o[2];
//   o[46] := -0.172743777250296 + o[45];
//   o[47] := o[46] * tau2;
//   o[48] := -0.09199202739273 + o[47];
//   o[49] := o[48] * tau2;
//   o[50] := o[1] * o[11];
//   o[51] := o[10] * o[11];
//   o[52] := o[11] * o[12] * o[25];
//   o[53] := o[10] * o[12] * o[25];
//   o[54] := o[1] * o[10] * o[25];
//   o[55] := o[11] * o[12] * tau2;
//   g.g := g.pi * (-0.0017731742473213 + o[9] + g.pi * (tau2 * (-3.3032641670203e-05 + (-0.00018948987516315 + o[1] * (-0.0039392777243355 + (-0.043797295650573 + -2.6674547914087e-05 * o[13]) * o[2])) * tau2) + g.pi * (2.0481737692309e-08 + (4.3870667284435e-07 + o[1] * (-3.227767723857e-05 + (-0.0015033924542148 + -0.040668253562649 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (2.2922076337661e-06 * o[14] + g.pi * ((-1.6714766451061e-11 + o[15] * (-0.0021171472321355 + -23.895741934104 * o[16])) * o[2] + g.pi * (-5.905956432427e-18 + o[17] * (-1.2621808899101e-06 + -0.038946842435739 * o[18]) + g.pi * (o[11] * (1.1256211360459e-11 + -8.2311340897998 * o[19]) + g.pi * (1.9809712802088e-08 * o[15] + g.pi * (o[10] * (1.0406965210174e-19 + (-1.0234747095929e-13 + -1.0018179379511e-09 * o[10]) * o[20]) + o[23] * (o[13] * (-8.0882908646985e-11 + 0.10693031879409 * o[24]) + o[21] * (-0.33662250574171 * o[26] + o[21] * (o[27] * (8.9185845355421e-25 + (3.0629316876232e-13 + -4.2002467698208e-06 * o[15]) * o[28]) + g.pi * (-5.9056029685639e-26 * o[24] + g.pi * (3.7826947613457e-06 * o[29] + g.pi * (-1.2768608934681e-15 * o[30] + o[31] * (7.3087610595061e-29 + o[18] * (5.5414715350778e-17 + -9.436970724121e-07 * o[32])) * g.pi)))))))))))) + tau2 * (-7.8847309559367e-10 + (1.2790717852285e-08 + 4.8225372718507e-07 * tau2) * tau2))))) + (-0.00560879118302 + g.tau * (0.07145273881455 + g.tau * (-0.4071049823928 + g.tau * (1.424081971444 + g.tau * (-4.38395111945 + g.tau * (-9.692768600217 + g.tau * (10.08665568018 + (-0.2840863260772 + 0.02126846353307 * g.tau) * g.tau) + log(g.pi))))))) / (o[34] * g.tau);
//   g.gpi := (1.0 + g.pi * (-0.0017731742473213 + o[9] + g.pi * (o[43] + g.pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[1] * (-9.683303171571e-05 + (-0.0045101773626444 + -0.122004760687947 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (1.14610381688305e-05 * o[14] + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.012702883392813 + -143.374451604624 * o[16])) * o[2] + g.pi * (-4.1341695026989e-17 + o[17] * (-8.8352662293707e-06 + -0.272627897050173 * o[18]) + g.pi * (o[11] * (9.0049690883672e-11 + -65.849072718398 * o[19]) + g.pi * (1.78287415218792e-07 * o[15] + g.pi * (o[10] * (1.0406965210174e-18 + (-1.0234747095929e-12 + -1.0018179379511e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.29412653835176e-09 + 1.71088510070544 * o[24]) + o[21] * (-6.0592051033508 * o[26] + o[21] * (o[27] * (1.78371690710842e-23 + (6.1258633752464e-12 + -8.4004935396416e-05 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[24] + g.pi * (8.3219284749605e-05 * o[29] + g.pi * (-2.93678005497663e-14 * o[30] + o[31] * (1.75410265428146e-27 + o[18] * (1.32995316841867e-15 + -2.26487297378904e-05 * o[32])) * g.pi)))))))))))) + tau2 * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * tau2) * tau2)))))) / g.pi;
//   g.gpipi := (-1.0 + o[21] * (o[43] + g.pi * (1.22890426153854e-07 + (2.6322400370661e-06 + o[1] * (-0.00019366606343142 + (-0.0090203547252888 + -0.244009521375894 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (4.5844152675322e-05 * o[14] + g.pi * ((-5.0144299353183e-10 + o[15] * (-0.063514416964065 + -716.87225802312 * o[16])) * o[2] + g.pi * (-2.48050170161934e-16 + o[17] * (-5.3011597376224e-05 + -1.63576738230104 * o[18]) + g.pi * (o[11] * (6.303478361857e-10 + -460.94350902879 * o[19]) + g.pi * (1.42629932175034e-06 * o[15] + g.pi * (o[10] * (9.3662686891566e-18 + (-9.2112723863361e-12 + -9.0163614415599e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.94118980752764e-08 + 25.6632765105816 * o[24]) + o[21] * (-103.006486756963 * o[26] + o[21] * (o[27] * (3.389062123506e-22 + (1.16391404129682e-10 + -0.0015960937725319 * o[15]) * o[28]) + g.pi * (-2.48035324679684e-23 * o[24] + g.pi * (0.00174760497974171 * o[29] + g.pi * (-6.4609161209486e-13 * o[30] + o[31] * (4.0344361048474e-26 + o[18] * (3.05889228736295e-14 + -0.00052092078397148 * o[32])) * g.pi)))))))))))) + tau2 * (-9.461677147124e-09 + (1.5348861422742e-07 + o[44]) * tau2))))) / o[21];
//   g.gtau := (0.0280439559151 + g.tau * (-0.2858109552582 + g.tau * (1.2213149471784 + g.tau * (-2.848163942888 + g.tau * (4.38395111945 + o[33] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * g.tau) * g.tau)))))) / (o[33] * o[34]) + g.pi * (-0.017834862292358 + o[49] + g.pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[1] * (-0.015757110897342 + (-0.306581069554011 + -0.00096028372490713 * o[13]) * o[2])) * tau2 + g.pi * (4.3870667284435e-07 + o[1] * (-9.683303171571e-05 + (-0.0090203547252888 + -1.42338887469272 * o[13]) * o[2]) + g.pi * (-7.8847309559367e-10 + g.pi * (1.60454534363627e-05 * o[20] + g.pi * (o[1] * (-5.0144299353183e-11 + o[15] * (-0.033874355714168 + -836.35096769364 * o[16])) + g.pi * ((-1.38839897890111e-05 + -0.97367106089347 * o[18]) * o[50] + g.pi * (o[14] * (9.0049690883672e-11 + -296.320827232793 * o[19]) + g.pi * (2.57526266427144e-07 * o[51] + g.pi * (o[2] * (4.1627860840696e-19 + (-1.0234747095929e-12 + -1.40254511313154e-08 * o[10]) * o[20]) + o[23] * (o[19] * (-2.34560435076256e-09 + 5.3465159397045 * o[24]) + o[21] * (-19.1874828272775 * o[52] + o[21] * (o[16] * (1.78371690710842e-23 + (1.07202609066812e-11 + -0.000201611844951398 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[27] + g.pi * (0.000200482822351322 * o[53] + g.pi * (-4.9797574845256e-14 * o[54] + (1.90027787547159e-27 + o[18] * (2.21658861403112e-15 + -5.4734430199902e-05 * o[32])) * o[55] * g.pi)))))))))))) + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2))));
//   g.gtautau := (-0.1682637354906 + g.tau * (1.429054776291 + g.tau * (-4.8852597887136 + g.tau * (8.544491828664 + g.tau * (-8.7679022389 + o[33] * (-0.5681726521544 + 0.12761078119842 * g.tau) * g.tau))))) / (o[33] * o[34] * g.tau) + g.pi * (-0.09199202739273 + (-0.34548755450059 + -1.5097583618379 * o[2]) * tau2 + g.pi * (-0.0003789797503263 + o[1] * (-0.047271332692026 + (-1.83948641732407 + -0.03360993037175 * o[13]) * o[2]) + g.pi * ((-0.00019366606343142 + (-0.045101773626444 + -48.395221739552 * o[13]) * o[2]) * tau2 + g.pi * (2.558143570457e-08 + 2.89352236311042e-06 * tau2 + g.pi * (9.6272720618176e-05 * o[10] * tau2 + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.50811533571252 + -28435.9329015838 * o[16])) * tau2 + g.pi * (o[11] * (-0.000138839897890111 + -23.3681054614434 * o[18]) * tau2 + g.pi * ((6.303478361857e-10 + -10371.2289531477 * o[19]) * o[20] + g.pi * (3.09031519712573e-06 * o[17] + g.pi * (o[1] * (1.24883582522088e-18 + (-9.2112723863361e-12 + -1.823308647071e-07 * o[10]) * o[20]) + o[23] * (o[1] * o[11] * o[12] * (-6.5676921821352e-08 + 261.979281045521 * o[24]) * tau2 + o[21] * (-1074.49903832754 * o[1] * o[10] * o[12] * o[25] * tau2 + o[21] * ((3.389062123506e-22 + (3.6448887082716e-10 + -0.0094757567127157 * o[15]) * o[28]) * o[32] + g.pi * (-2.48035324679684e-23 * o[16] + g.pi * (0.0104251067622687 * o[1] * o[12] * o[25] * tau2 + g.pi * (o[11] * o[12] * (4.750694688679e-26 + o[18] * (8.6446955947214e-14 + -0.0031198625213944 * o[32])) * g.pi + -1.89230784411972e-12 * o[10] * o[25] * tau2))))))))))))))));
//   g.gtaupi := -0.017834862292358 + o[49] + g.pi * (-6.6065283340406e-05 + (-0.0007579595006526 + o[1] * (-0.031514221794684 + (-0.61316213910802 + -0.00192056744981426 * o[13]) * o[2])) * tau2 + g.pi * (1.31612001853305e-06 + o[1] * (-0.00029049909514713 + (-0.0270610641758664 + -4.2701666240781 * o[13]) * o[2]) + g.pi * (-3.15389238237468e-09 + g.pi * (8.0227267181813e-05 * o[20] + g.pi * (o[1] * (-3.00865796119098e-10 + o[15] * (-0.203246134285008 + -5018.1058061618 * o[16])) + g.pi * ((-9.7187928523078e-05 + -6.8156974262543 * o[18]) * o[50] + g.pi * (o[14] * (7.2039752706938e-10 + -2370.56661786234 * o[19]) + g.pi * (2.3177363978443e-06 * o[51] + g.pi * (o[2] * (4.1627860840696e-18 + (-1.0234747095929e-11 + -1.40254511313154e-07 * o[10]) * o[20]) + o[23] * (o[19] * (-3.7529669612201e-08 + 85.544255035272 * o[24]) + o[21] * (-345.37469089099 * o[52] + o[21] * (o[16] * (3.5674338142168e-22 + (2.14405218133624e-10 + -0.004032236899028 * o[15]) * o[28]) + g.pi * (-2.60437090913668e-23 * o[27] + g.pi * (0.0044106220917291 * o[53] + g.pi * (-1.14534422144089e-12 * o[54] + (4.5606669011318e-26 + o[18] * (5.3198126736747e-14 + -0.00131362632479764 * o[32])) * o[55] * g.pi)))))))))))) + (1.0232574281828e-07 + o[44]) * tau2)));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3 \"base function for region 2 with 3rd derivatives for sensitivities: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs function and derivatives up to 3rd derivatives\";
//   protected Real pi2;
//   protected Real tau2;
//   protected Real[82] o;
// algorithm
//   assert( p > 611.657, \"IF97 medium function g2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 100000000.0, \"IF97 medium function g2: the input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 100 Mpa\");
//   assert( T >= 273.15, \"IF97 medium function g2: the temperature (= \" + String(T, 0, true, 6) + \" K) is lower than 273.15 K!\");
//   assert( T <= 1073.15, \"IF97 medium function g2: the input temperature (= \" + String(T, 0, true, 6) + \" K) is higher than the limit of 1073.15 K\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := p / 1000000.0;
//   g.tau := 540.0 / T;
//   tau2 := -0.5 + g.tau;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := -0.05032527872793 * o[2];
//   o[4] := -0.057581259083432 + o[3];
//   o[5] := o[4] * tau2;
//   o[6] := -0.045996013696365 + o[5];
//   o[7] := o[6] * tau2;
//   o[8] := -0.017834862292358 + o[7];
//   o[9] := o[8] * tau2;
//   o[10] := o[1] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[10] * o[11] * o[12] * tau2;
//   o[14] := o[1] * o[10] * tau2;
//   o[15] := o[10] * o[11] * tau2;
//   o[16] := o[1] * o[12] * tau2;
//   o[17] := o[1] * o[11] * tau2;
//   o[18] := o[1] * o[10] * o[11];
//   o[19] := o[10] * o[11] * o[12];
//   o[20] := o[1] * o[10];
//   o[21] := g.pi ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   o[23] := o[21] * o[22];
//   o[24] := o[10] * o[12] * tau2;
//   o[25] := o[12] ^ 2.0;
//   o[26] := o[11] * o[12] * o[25] * tau2;
//   o[27] := o[10] * o[12];
//   o[28] := o[1] * o[10] * o[11] * tau2;
//   o[29] := o[10] * o[12] * o[25] * tau2;
//   o[30] := o[1] * o[10] * o[25] * tau2;
//   o[31] := o[1] * o[11] * o[12];
//   o[32] := o[1] * o[12];
//   o[33] := g.tau ^ 2.0;
//   o[34] := o[33] ^ 2.0;
//   o[35] := -5.3349095828174e-05 * o[13];
//   o[36] := -0.087594591301146 + o[35];
//   o[37] := o[2] * o[36];
//   o[38] := -0.007878555448671 + o[37];
//   o[39] := o[1] * o[38];
//   o[40] := -0.0003789797503263 + o[39];
//   o[41] := o[40] * tau2;
//   o[42] := -6.6065283340406e-05 + o[41];
//   o[43] := o[42] * tau2;
//   o[44] := -0.244009521375894 * o[13];
//   o[45] := -0.0090203547252888 + o[44];
//   o[46] := o[2] * o[45];
//   o[47] := -0.00019366606343142 + o[46];
//   o[48] := o[1] * o[47];
//   o[49] := 2.6322400370661e-06 + o[48];
//   o[50] := o[49] * tau2;
//   o[51] := 5.78704472622084e-06 * tau2;
//   o[52] := o[21] * g.pi;
//   o[53] := 1.15740894524417e-05 * tau2;
//   o[54] := -0.30195167236758 * o[2];
//   o[55] := -0.172743777250296 + o[54];
//   o[56] := o[55] * tau2;
//   o[57] := -0.09199202739273 + o[56];
//   o[58] := o[57] * tau2;
//   o[59] := o[1] * o[11];
//   o[60] := o[10] * o[11];
//   o[61] := o[11] * o[12] * o[25];
//   o[62] := o[10] * o[12] * o[25];
//   o[63] := o[1] * o[10] * o[25];
//   o[64] := o[11] * o[12] * tau2;
//   o[65] := -1.5097583618379 * o[2];
//   o[66] := -0.345487554500592 + o[65];
//   o[67] := o[66] * tau2;
//   o[68] := o[10] * tau2;
//   o[69] := o[11] * tau2;
//   o[70] := o[1] * o[11] * o[12] * tau2;
//   o[71] := o[1] * o[10] * o[12] * o[25] * tau2;
//   o[72] := o[1] * o[12] * o[25] * tau2;
//   o[73] := o[10] * o[25] * tau2;
//   o[74] := o[11] * o[12];
//   o[75] := o[34] ^ 2.0;
//   o[76] := -0.00192056744981426 * o[13];
//   o[77] := -0.613162139108022 + o[76];
//   o[78] := o[2] * o[77];
//   o[79] := -0.031514221794684 + o[78];
//   o[80] := o[1] * o[79];
//   o[81] := -0.0007579595006526 + o[80];
//   o[82] := o[81] * tau2;
//   g.g := g.pi * (-0.0017731742473213 + o[9] + g.pi * (tau2 * (-3.3032641670203e-05 + (-0.00018948987516315 + o[1] * (-0.0039392777243355 + (-0.043797295650573 + -2.6674547914087e-05 * o[13]) * o[2])) * tau2) + g.pi * (2.0481737692309e-08 + (4.3870667284435e-07 + o[1] * (-3.227767723857e-05 + (-0.0015033924542148 + -0.040668253562649 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (2.2922076337661e-06 * o[14] + g.pi * ((-1.6714766451061e-11 + o[15] * (-0.0021171472321355 + -23.895741934104 * o[16])) * o[2] + g.pi * (-5.905956432427e-18 + o[17] * (-1.2621808899101e-06 + -0.038946842435739 * o[18]) + g.pi * (o[11] * (1.1256211360459e-11 + -8.2311340897998 * o[19]) + g.pi * (1.9809712802088e-08 * o[15] + g.pi * (o[10] * (1.0406965210174e-19 + (-1.0234747095929e-13 + -1.0018179379511e-09 * o[10]) * o[20]) + o[23] * (o[13] * (-8.0882908646985e-11 + 0.10693031879409 * o[24]) + o[21] * (-0.33662250574171 * o[26] + o[21] * (o[27] * (8.9185845355421e-25 + (3.0629316876232e-13 + -4.2002467698208e-06 * o[15]) * o[28]) + g.pi * (-5.9056029685639e-26 * o[24] + g.pi * (3.7826947613457e-06 * o[29] + g.pi * (-1.2768608934681e-15 * o[30] + o[31] * (7.3087610595061e-29 + o[18] * (5.5414715350778e-17 + -9.436970724121e-07 * o[32])) * g.pi)))))))))))) + tau2 * (-7.8847309559367e-10 + (1.2790717852285e-08 + 4.8225372718507e-07 * tau2) * tau2))))) + (-0.00560879118302 + g.tau * (0.07145273881455 + g.tau * (-0.4071049823928 + g.tau * (1.424081971444 + g.tau * (-4.38395111945 + g.tau * (-9.692768600217 + g.tau * (10.08665568018 + (-0.2840863260772 + 0.02126846353307 * g.tau) * g.tau) + log(g.pi))))))) / (o[34] * g.tau);
//   g.gpi := (1.0 + g.pi * (-0.0017731742473213 + o[9] + g.pi * (o[43] + g.pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[1] * (-9.683303171571e-05 + (-0.0045101773626444 + -0.122004760687947 * o[13]) * o[2])) * tau2 + g.pi * (g.pi * (1.14610381688305e-05 * o[14] + g.pi * ((-1.00288598706366e-10 + o[15] * (-0.012702883392813 + -143.374451604624 * o[16])) * o[2] + g.pi * (-4.1341695026989e-17 + o[17] * (-8.8352662293707e-06 + -0.272627897050173 * o[18]) + g.pi * (o[11] * (9.0049690883672e-11 + -65.8490727183984 * o[19]) + g.pi * (1.78287415218792e-07 * o[15] + g.pi * (o[10] * (1.0406965210174e-18 + (-1.0234747095929e-12 + -1.0018179379511e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.29412653835176e-09 + 1.71088510070544 * o[24]) + o[21] * (-6.05920510335078 * o[26] + o[21] * (o[27] * (1.78371690710842e-23 + (6.1258633752464e-12 + -8.4004935396416e-05 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[24] + g.pi * (8.32192847496054e-05 * o[29] + g.pi * (-2.93678005497663e-14 * o[30] + o[31] * (1.75410265428146e-27 + o[18] * (1.32995316841867e-15 + -2.26487297378904e-05 * o[32])) * g.pi)))))))))))) + tau2 * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * tau2) * tau2)))))) / g.pi;
//   g.gpipi := (-1.0 + o[21] * (o[43] + g.pi * (1.22890426153854e-07 + o[50] + g.pi * (g.pi * (4.5844152675322e-05 * o[14] + g.pi * ((-5.0144299353183e-10 + o[15] * (-0.063514416964065 + -716.87225802312 * o[16])) * o[2] + g.pi * (-2.48050170161934e-16 + o[17] * (-5.30115973762242e-05 + -1.63576738230104 * o[18]) + g.pi * (o[11] * (6.30347836185704e-10 + -460.943509028789 * o[19]) + g.pi * (1.42629932175034e-06 * o[15] + g.pi * (o[10] * (9.3662686891566e-18 + (-9.2112723863361e-12 + -9.0163614415599e-08 * o[10]) * o[20]) + o[23] * (o[13] * (-1.94118980752764e-08 + 25.6632765105816 * o[24]) + o[21] * (-103.006486756963 * o[26] + o[21] * (o[27] * (3.389062123506e-22 + (1.16391404129682e-10 + -0.0015960937725319 * o[15]) * o[28]) + g.pi * (-2.48035324679684e-23 * o[24] + g.pi * (0.00174760497974171 * o[29] + g.pi * (-6.46091612094859e-13 * o[30] + o[31] * (4.03443610484737e-26 + o[18] * (3.05889228736295e-14 + -0.000520920783971479 * o[32])) * g.pi)))))))))))) + tau2 * (-9.46167714712404e-09 + (1.5348861422742e-07 + o[51]) * tau2))))) / o[21];
//   g.gpipipi := (2.0 + o[52] * (1.22890426153854e-07 + o[50] + g.pi * (g.pi * (0.000137532458025966 * o[14] + g.pi * ((-2.00577197412732e-09 + o[15] * (-0.25405766785626 + -2867.48903209248 * o[16])) * o[2] + g.pi * (-1.24025085080967e-15 + o[17] * (-0.000265057986881121 + -8.17883691150519 * o[18]) + g.pi * (o[11] * (3.78208701711422e-09 + -2765.66105417273 * o[19]) + g.pi * (9.98409525225235e-06 * o[15] + g.pi * (o[10] * (7.49301495132528e-17 + (-7.36901790906888e-11 + -7.21308915324792e-07 * o[10]) * o[20]) + o[23] * (o[13] * (-2.7176657305387e-07 + 359.285871148142 * o[24]) + o[21] * (-1648.10378811141 * o[26] + o[21] * (o[27] * (6.1003118223108e-21 + (2.09504527433427e-09 + -0.0287296879055743 * o[15]) * o[28]) + g.pi * (-4.71267116891399e-22 * o[24] + g.pi * (0.0349520995948343 * o[29] + g.pi * (-1.3567923853992e-11 * o[30] + o[31] * (8.87575943066421e-25 + o[18] * (6.72956303219848e-13 + -0.0114602572473725 * o[32])) * g.pi)))))))))))) + tau2 * (-1.89233542942481e-08 + (3.0697722845484e-07 + o[53]) * tau2)))) / o[52];
//   g.gtau := (0.0280439559151 + g.tau * (-0.2858109552582 + g.tau * (1.2213149471784 + g.tau * (-2.848163942888 + g.tau * (4.38395111945 + o[33] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * g.tau) * g.tau)))))) / (o[33] * o[34]) + g.pi * (-0.017834862292358 + o[58] + g.pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[1] * (-0.015757110897342 + (-0.306581069554011 + -0.000960283724907132 * o[13]) * o[2])) * tau2 + g.pi * (4.3870667284435e-07 + o[1] * (-9.683303171571e-05 + (-0.0090203547252888 + -1.42338887469272 * o[13]) * o[2]) + g.pi * (-7.8847309559367e-10 + g.pi * (1.60454534363627e-05 * o[20] + g.pi * (o[1] * (-5.0144299353183e-11 + o[15] * (-0.033874355714168 + -836.35096769364 * o[16])) + g.pi * ((-1.38839897890111e-05 + -0.973671060893475 * o[18]) * o[59] + g.pi * (o[14] * (9.0049690883672e-11 + -296.320827232793 * o[19]) + g.pi * (2.57526266427144e-07 * o[60] + g.pi * (o[2] * (4.1627860840696e-19 + (-1.0234747095929e-12 + -1.40254511313154e-08 * o[10]) * o[20]) + o[23] * (o[19] * (-2.34560435076256e-09 + 5.3465159397045 * o[24]) + o[21] * (-19.1874828272775 * o[61] + o[21] * (o[16] * (1.78371690710842e-23 + (1.07202609066812e-11 + -0.000201611844951398 * o[15]) * o[28]) + g.pi * (-1.24017662339842e-24 * o[27] + g.pi * (0.000200482822351322 * o[62] + g.pi * (-4.97975748452559e-14 * o[63] + (1.90027787547159e-27 + o[18] * (2.21658861403112e-15 + -5.47344301999018e-05 * o[32])) * o[64] * g.pi)))))))))))) + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2))));
//   g.gtautau := (-0.1682637354906 + g.tau * (1.429054776291 + g.tau * (-4.8852597887136 + g.tau * (8.544491828664 + g.tau * (-8.7679022389 + o[33] * (-0.5681726521544 + 0.12761078119842 * g.tau) * g.tau))))) / (o[33] * o[34] * g.tau) + g.pi * (-0.09199202739273 + o[67] + g.pi * (-0.0003789797503263 + o[1] * (-0.047271332692026 + (-1.83948641732407 + -0.0336099303717496 * o[13]) * o[2]) + g.pi * ((-0.00019366606343142 + (-0.045101773626444 + -48.3952217395523 * o[13]) * o[2]) * tau2 + g.pi * (2.558143570457e-08 + 2.89352236311042e-06 * tau2 + g.pi * (9.62727206181762e-05 * o[68] + g.pi * (g.pi * ((-0.000138839897890111 + -23.3681054614434 * o[18]) * o[69] + g.pi * ((6.30347836185704e-10 + -10371.2289531477 * o[19]) * o[20] + g.pi * (3.09031519712573e-06 * o[17] + g.pi * (o[1] * (1.24883582522088e-18 + (-9.2112723863361e-12 + -1.823308647071e-07 * o[10]) * o[20]) + o[23] * ((-6.56769218213518e-08 + 261.979281045521 * o[24]) * o[70] + o[21] * (-1074.49903832754 * o[71] + o[21] * ((3.389062123506e-22 + (3.64488870827161e-10 + -0.00947575671271573 * o[15]) * o[28]) * o[32] + g.pi * (-2.48035324679684e-23 * o[16] + g.pi * (0.0104251067622687 * o[72] + g.pi * (-1.89230784411972e-12 * o[73] + (4.75069468867897e-26 + o[18] * (8.64469559472137e-14 + -0.0031198625213944 * o[32])) * o[74] * g.pi)))))))))) + (-1.00288598706366e-10 + o[15] * (-0.50811533571252 + -28435.9329015838 * o[16])) * tau2))))));
//   g.gtautautau := (1.1778461484342 + g.tau * (-8.574328657746 + g.tau * (24.426298943568 + g.tau * (-34.177967314656 + (26.3037067167 + 0.12761078119842 * o[34]) * g.tau)))) / o[75] + g.pi * (-0.345487554500592 + -6.0390334473516 * o[2] + g.pi * ((-0.094542665384052 + (-9.19743208662033 + -1.14273763263949 * o[13]) * o[2]) * tau2 + g.pi * (-0.00019366606343142 + (-0.180407094505776 + -1597.04231740523 * o[13]) * o[2] + g.pi * (2.89352236311042e-06 + g.pi * (0.000481363603090881 * o[10] + g.pi * (-1.00288598706366e-10 + o[15] * (-7.11361469997528 + -938385.785752264 * o[16]) + g.pi * (o[11] * (-0.001249559081011 + -537.466425613198 * o[18]) + g.pi * ((3.78208701711422e-09 + -352621.784407023 * o[19]) * o[68] + g.pi * (3.3993467168383e-05 * o[59] + g.pi * ((2.49767165044176e-18 + (-7.36901790906888e-11 + -2.1879703764852e-06 * o[10]) * o[20]) * tau2 + o[23] * ((-1.7732768891765e-06 + 12575.005490185 * o[24]) * o[31] + o[21] * (-59097.4471080146 * o[1] * o[10] * o[12] * o[25] + o[21] * (o[12] * (6.1003118223108e-21 + (1.20281327372963e-08 + -0.435884808784923 * o[15]) * o[28]) * tau2 + g.pi * (-4.71267116891399e-22 * o[32] + g.pi * (0.531680444875706 * o[1] * o[12] * o[25] + g.pi * (-7.00153902324298e-11 * o[10] * o[25] + o[1] * o[10] * o[12] * (1.14016672528295e-24 + o[18] * (3.28498432599412e-12 + -0.174712301198087 * o[32])) * g.pi * tau2))))))))))))))));
//   g.gpitau := -0.017834862292358 + o[58] + g.pi * (-6.6065283340406e-05 + o[82] + g.pi * (1.31612001853305e-06 + o[1] * (-0.00029049909514713 + (-0.0270610641758664 + -4.27016662407815 * o[13]) * o[2]) + g.pi * (-3.15389238237468e-09 + g.pi * (8.02272671818135e-05 * o[20] + g.pi * (o[1] * (-3.00865796119098e-10 + o[15] * (-0.203246134285008 + -5018.10580616184 * o[16])) + g.pi * ((-9.71879285230777e-05 + -6.81569742625432 * o[18]) * o[59] + g.pi * (o[14] * (7.20397527069376e-10 + -2370.56661786234 * o[19]) + g.pi * (2.3177363978443e-06 * o[60] + g.pi * (o[2] * (4.1627860840696e-18 + (-1.0234747095929e-11 + -1.40254511313154e-07 * o[10]) * o[20]) + o[23] * (o[19] * (-3.7529669612201e-08 + 85.544255035272 * o[24]) + o[21] * (-345.374690890994 * o[61] + o[21] * (o[16] * (3.56743381421684e-22 + (2.14405218133624e-10 + -0.00403223689902797 * o[15]) * o[28]) + g.pi * (-2.60437090913668e-23 * o[27] + g.pi * (0.00441062209172909 * o[62] + g.pi * (-1.14534422144089e-12 * o[63] + (4.56066690113181e-26 + o[18] * (5.31981267367469e-14 + -0.00131362632479764 * o[32])) * o[64] * g.pi)))))))))))) + (1.0232574281828e-07 + o[51]) * tau2)));
//   g.gpipitau := -6.6065283340406e-05 + o[82] + g.pi * (2.6322400370661e-06 + o[1] * (-0.00058099819029426 + (-0.0541221283517328 + -8.54033324815629 * o[13]) * o[2]) + g.pi * (-9.46167714712404e-09 + g.pi * (0.000320909068727254 * o[20] + g.pi * (o[1] * (-1.50432898059549e-09 + o[15] * (-1.01623067142504 + -25090.5290308092 * o[16])) + g.pi * ((-0.000583127571138466 + -40.8941845575259 * o[18]) * o[59] + g.pi * (o[14] * (5.04278268948563e-09 + -16593.9663250364 * o[19]) + g.pi * (1.85418911827544e-05 * o[60] + g.pi * (o[2] * (3.74650747566264e-17 + (-9.2112723863361e-11 + -1.26229060181839e-06 * o[10]) * o[20]) + o[23] * (o[19] * (-5.62945044183016e-07 + 1283.16382552908 * o[24]) + o[21] * (-5871.36974514691 * o[61] + o[21] * (o[16] * (6.778124247012e-21 + (4.07369914453886e-09 + -0.0766125010815314 * o[15]) * o[28]) + g.pi * (-5.20874181827336e-22 * o[27] + g.pi * (0.0926230639263108 * o[62] + g.pi * (-2.51975728716995e-11 * o[63] + (1.04895338726032e-24 + o[18] * (1.22355691494518e-12 + -0.0302134054703458 * o[32])) * o[64] * g.pi)))))))))))) + (3.0697722845484e-07 + 1.73611341786625e-05 * tau2) * tau2));
//   g.gpitautau := -0.09199202739273 + o[67] + g.pi * (-0.0007579595006526 + o[1] * (-0.094542665384052 + (-3.67897283464813 + -0.0672198607434992 * o[13]) * o[2]) + g.pi * ((-0.00058099819029426 + (-0.135305320879332 + -145.185665218657 * o[13]) * o[2]) * tau2 + g.pi * (1.0232574281828e-07 + o[53] + g.pi * (0.000481363603090881 * o[68] + g.pi * (g.pi * ((-0.000971879285230777 + -163.576738230104 * o[18]) * o[69] + g.pi * ((5.04278268948563e-09 + -82969.831625182 * o[19]) * o[20] + g.pi * (2.78128367741315e-05 * o[17] + g.pi * (o[1] * (1.24883582522088e-17 + (-9.2112723863361e-11 + -1.823308647071e-06 * o[10]) * o[20]) + o[23] * ((-1.05083074914163e-06 + 4191.66849672833 * o[24]) * o[70] + o[21] * (-19340.9826898957 * o[71] + o[21] * ((6.778124247012e-21 + (7.28977741654322e-09 + -0.189515134254314 * o[15]) * o[28]) * o[32] + g.pi * (-5.20874181827336e-22 * o[16] + g.pi * (0.229352348769913 * o[72] + g.pi * (-4.35230804147537e-11 * o[73] + (1.14016672528295e-24 + o[18] * (2.07472694273313e-12 + -0.0748767005134657 * o[32])) * o[74] * g.pi)))))))))) + (-6.01731592238196e-10 + o[15] * (-3.04869201427512 + -170615.597409503 * o[16])) * tau2)))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5 \"base function for region 5: g(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Modelica.Media.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real[11] o \"vector of auxiliary variables\";
// algorithm
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   g.pi := max(p, 611.657) / 1000000.0;
//   g.tau := 1000.0 / max(T, 273.16);
//   o[1] := g.tau ^ 2.0;
//   o[2] := -0.004594282089991 * o[1];
//   o[3] := 0.0021774678714571 + o[2];
//   o[4] := o[3] * g.tau;
//   o[5] := o[1] * g.tau;
//   o[6] := o[1] ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[7] * g.tau;
//   o[9] := -7.9449656719138e-06 * o[8];
//   o[10] := g.pi ^ 2.0;
//   o[11] := -0.013782846269973 * o[1];
//   g.g := g.pi * (-0.00012563183589592 + o[4] + g.pi * (-3.9724828359569e-06 * o[8] + 1.2919228289784e-07 * o[5] * g.pi)) + (-0.024805148933466 + g.tau * (0.36901534980333 + g.tau * (-3.1161318213925 + g.tau * (-13.179983674201 + (6.8540841634434 + -0.32961626538917 * g.tau) * g.tau + log(g.pi))))) / o[5];
//   g.gpi := (1.0 + g.pi * (-0.00012563183589592 + o[4] + g.pi * (o[9] + 3.8757684869352e-07 * o[5] * g.pi))) / g.pi;
//   g.gpipi := (-1.0 + o[10] * (o[9] + 7.7515369738704e-07 * o[5] * g.pi)) / o[10];
//   g.gtau := g.pi * (0.0021774678714571 + o[11] + g.pi * (-3.5752345523612e-05 * o[7] + 3.8757684869352e-07 * o[1] * g.pi)) + (0.074415446800398 + g.tau * (-0.73803069960666 + (3.1161318213925 + o[1] * (6.8540841634434 + -0.65923253077834 * g.tau)) * g.tau)) / o[6];
//   g.gtautau := (-0.297661787201592 + g.tau * (2.21409209881998 + (-6.232263642785 + -0.65923253077834 * o[5]) * g.tau)) / (o[6] * g.tau) + g.pi * (-0.027565692539946 * g.tau + g.pi * (-0.000286018764188897 * o[1] * o[6] * g.tau + 7.7515369738704e-07 * g.pi * g.tau));
//   g.gtaupi := 0.0021774678714571 + o[11] + g.pi * (-7.1504691047224e-05 * o[7] + 1.16273054608056e-06 * o[1] * g.pi);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3 \"base function for region 5: g(p,T), including 3rd derivatives\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[16] o \"vector of auxiliary variables\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function g5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   assert( p <= 10000000.0, \"IF97 medium function g5: input pressure (= \" + String(p, 0, true, 6) + \" Pa) is higher than 10 Mpa in region 5\");
//   assert( T <= 2273.15, \"IF97 medium function g5: input temperature (= \" + String(T, 0, true, 6) + \" K) is higher than limit of 2273.15K in region 5\");
//   g.p := p;
//   g.T := T;
//   g.R := 461.526;
//   pi := p / 1000000.0;
//   tau := 1000.0 / T;
//   g.pi := pi;
//   g.tau := tau;
//   o[1] := tau ^ 2.0;
//   o[2] := -0.004594282089991 * o[1];
//   o[3] := 0.0021774678714571 + o[2];
//   o[4] := o[3] * tau;
//   o[5] := o[1] * tau;
//   o[6] := o[1] ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[7] * tau;
//   o[9] := -7.9449656719138e-06 * o[8];
//   o[10] := pi ^ 2.0;
//   o[11] := o[10] * pi;
//   o[12] := -0.013782846269973 * o[1];
//   o[13] := -0.027565692539946 * tau;
//   o[14] := o[1] * o[6] * tau;
//   o[15] := o[1] * o[6];
//   o[16] := -7.15046910472242e-05 * o[7];
//   g.g := pi * (-0.00012563183589592 + o[4] + pi * (-3.9724828359569e-06 * o[8] + 1.2919228289784e-07 * o[5] * pi)) + (-0.024805148933466 + tau * (0.36901534980333 + tau * (-3.1161318213925 + tau * (-13.179983674201 + (6.8540841634434 + -0.32961626538917 * tau) * tau + log(pi))))) / o[5];
//   g.gpi := (1.0 + pi * (-0.00012563183589592 + o[4] + pi * (o[9] + 3.8757684869352e-07 * o[5] * pi))) / pi;
//   g.gpipi := (-1.0 + o[10] * (o[9] + 7.7515369738704e-07 * o[5] * pi)) / o[10];
//   g.gpipipi := (2.0 + 7.7515369738704e-07 * o[11] * o[5]) / o[11];
//   g.gtau := pi * (0.0021774678714571 + o[12] + pi * (-3.57523455236121e-05 * o[7] + 3.8757684869352e-07 * o[1] * pi)) + (0.074415446800398 + tau * (-0.73803069960666 + (3.1161318213925 + o[1] * (6.8540841634434 + -0.65923253077834 * tau)) * tau)) / o[6];
//   g.gtautau := (-0.297661787201592 + tau * (2.21409209881998 + (-6.232263642785 + -0.65923253077834 * o[5]) * tau)) / (o[6] * tau) + pi * (o[13] + pi * (-0.000286018764188897 * o[14] + 7.7515369738704e-07 * pi * tau));
//   g.gtautautau := pi * (-0.027565692539946 + (-0.00200213134932228 * o[15] + 7.7515369738704e-07 * pi) * pi) + (1.48830893600796 + tau * (-8.85636839527992 + 18.696790928355 * tau)) / o[15];
//   g.gpitau := 0.0021774678714571 + o[12] + pi * (o[16] + 1.16273054608056e-06 * o[1] * pi);
//   g.gpipitau := o[16] + 2.32546109216112e-06 * o[1] * pi;
//   g.gpitautau := o[13] + pi * (-0.000572037528377794 * o[14] + 2.32546109216112e-06 * pi * tau);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.h3ab_p \"ergion 3 a b boundary for pressure/enthalpy\"
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Enthalpy\";
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   protected constant Real[4] n = {2014.64004206875, 3.74696550136983, -0.0219921901054187, 8.7513168600995e-05};
//   protected constant Real hstar(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 1000.0 \"normalization enthalpy\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 1000000.0 \"normalization pressure\";
//   protected Real pi = p / 1000000.0 \"normalized specific pressure\";
// algorithm
//   h := 2014640.04206875 + 1000.0 * (3.74696550136983 * pi + -0.0219921901054187 * pi ^ 2.0 + 8.7513168600995e-05 * pi ^ 3.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.h3ab_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat \"region 4 saturation pressure as a functionx of temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real p_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   protected Real[7] o \"vector of auxiliary variables\";
//   protected Real C \"auxiliary variable\";
//   protected Real B \"auxiliary variable\";
//   protected Real A \"auxiliary variable\";
//   protected Real Tlim = min(T, 647.096);
// algorithm
//   assert( T >= 273.16, \"IF97 medium function psat: input temperature (= 611.657 K).
// lower than the triple point temperature 273.16 K\");
//   o[1] := -650.17534844798 + Tlim;
//   o[2] := 1.0 / o[1];
//   o[3] := -0.23855557567849 * o[2];
//   o[4] := o[3] + Tlim;
//   o[5] := -4823.2657361591 * o[4];
//   o[6] := o[4] ^ 2.0;
//   o[7] := 14.91510861353 * o[6];
//   C := 405113.40542057 + o[5] + o[7];
//   B := -3232555.0322333 + 12020.82470247 * o[4] + -17.073846940092 * o[6];
//   A := -724213.16703206 + 1167.0521452767 * o[4] + o[6];
//   p_sat := 16000000.0 * C ^ 4.0 / ((-4.0 * A * C + B ^ 2.0) ^ 0.5 - B) ^ 4.0;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat_der \"derivative function for psat\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   input Real der_T(unit = \"K/s\") \"temperature derivative\";
//   output Real der_psat(unit = \"Pa/s\") \"pressure\";
//   protected Real dpt;
// algorithm
//   dpt := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(T);
//   der_psat := dpt * der_T;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat_der;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph1 \"inverse function for region 1: T(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real eta1 \"dimensionless specific enthalpy\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function tph1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   pi := p / 1000000.0;
//   eta1 := 1.0 + h / 2500000.0;
//   o[1] := eta1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   T := -238.72489924521 + -13.391744872602 * pi + eta1 * (404.21188637945 + 43.211039183559 * pi + eta1 * (113.49746881718 + -54.010067170506 * pi + eta1 * (30.535892203916 * pi + eta1 * (-6.5964749423638 * pi + o[1] * (-5.8457616048039 + o[2] * (pi * (0.0093965400878363 + (-2.5858641282073e-05 + 6.6456186191635e-08 * pi) * pi) + o[2] * o[3] * (-0.0001528548241314 + o[1] * o[3] * (-1.0866707695377e-06 + pi * (1.157364750534e-07 + pi * (-4.0644363084799e-09 + pi * (8.0670734103027e-11 + pi * (-9.3477771213947e-13 + (5.8265442020601e-15 + -1.5020185953503e-17 * pi) * pi))))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph2 \"reverse function for region 2: T(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real pi2b \"dimensionless pressure\";
//   protected Real pi2c \"dimensionless pressure\";
//   protected Real eta \"dimensionless specific enthalpy\";
//   protected Real etabc \"dimensionless specific enthalpy\";
//   protected Real eta2a \"dimensionless specific enthalpy\";
//   protected Real eta2b \"dimensionless specific enthalpy\";
//   protected Real eta2c \"dimensionless specific enthalpy\";
//   protected Real[8] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * p;
//   eta := 5e-07 * h;
//   etabc := 0.001 * h;
//   if pi < 4.0 then
//     eta2a := eta + -2.1;
//     o[1] := eta2a ^ 2.0;
//     o[2] := o[1] ^ 2.0;
//     o[3] := pi ^ 2.0;
//     o[4] := o[3] ^ 2.0;
//     o[5] := o[3] * pi;
//     T := 1089.8952318288 + (1.844574935579 + -0.0061707422868339 * pi) * pi + eta2a * (849.51654495535 + -4.1792700549624 * pi + eta2a * (-107.81748091826 + (6.2478196935812 + -0.31078046629583 * pi) * pi + eta2a * (33.153654801263 + -17.344563108114 * pi + o[2] * (-7.4232016790248 + pi * (-200.58176862096 + 11.670873077107 * pi) + o[1] * (271.96065473796 * pi + o[1] * (-455.11318285818 * pi + eta2a * (1.3865724283226 * o[4] + o[1] * o[2] * (3091.9688604755 * pi + o[1] * (11.765048724356 + o[2] * (-13551.334240775 * o[5] + o[2] * (-62.459855192507 * o[3] * o[4] * pi + o[2] * (o[4] * (235988.32556514 + 7399.9835474766 * pi) + o[1] * (19127.72923966 * o[3] * o[4] + o[1] * (o[3] * (128127984.04046 + -551966.9703006 * o[5]) + o[1] * (-985549096.23276 * o[3] + o[1] * (2822454697.3002 * o[3] + o[1] * (o[3] * (-3594897141.0703 + 3715408.5996233 * o[5]) + o[1] * pi * (252266.40357872 + pi * (1722734991.3197 + pi * (12848734.66465 + (-13105236.545054 + -415351.64835634 * o[3]) * pi))))))))))))))))))));
//   elseif pi < 905.84278514723 + (-0.67955786399241 + 0.00012809002730136 * etabc) * etabc then
//     eta2b := eta + -2.6;
//     pi2b := pi + -2.0;
//     o[1] := pi2b ^ 2.0;
//     o[2] := o[1] * pi2b;
//     o[3] := o[1] ^ 2.0;
//     o[4] := eta2b ^ 2.0;
//     o[5] := o[4] ^ 2.0;
//     o[6] := o[4] * o[5];
//     o[7] := o[5] ^ 2.0;
//     T := 1489.5041079516 + 0.93747147377932 * pi2b + eta2b * (743.07798314034 + o[2] * (0.00011032831789999 + -1.7565233969407e-18 * o[1] * o[3]) + eta2b * (-97.708318797837 + pi2b * (3.3593118604916 + pi2b * (-0.021810755324761 + pi2b * (0.00018955248387902 + (2.8640237477456e-07 + -8.1456365207833e-14 * o[2]) * pi2b))) + o[5] * (3.3809355601454 * pi2b + o[4] * (-0.10829784403677 * o[1] + o[5] * (2.4742464705674 + (0.16844539671904 + o[1] * (0.0030891541160537 + -1.0779857357512e-05 * pi2b)) * pi2b + o[6] * (-0.63281320016026 + pi2b * (0.73875745236695 + (-0.046333324635812 + o[1] * (-7.6462712454814e-05 + 2.821728163504e-07 * pi2b)) * pi2b) + o[6] * (1.1385952129658 + pi2b * (-0.47128737436186 + o[1] * (0.0013555504554949 + (1.4052392818316e-05 + 1.2704902271945e-06 * pi2b) * pi2b)) + o[5] * (-0.47811863648625 + (0.15020273139707 + o[2] * (-3.1083814331434e-05 + o[1] * (-1.1030139238909e-08 + -2.5180545682962e-11 * pi2b))) * pi2b + o[5] * o[7] * (0.0085208123431544 + pi2b * (-0.002176411421975 + pi2b * (7.1280351959551e-05 + o[1] * (-1.0302738212103e-06 + (7.3803353468292e-08 + 8.6934156344163e-15 * o[3]) * pi2b))))))))))));
//   else
//     eta2c := eta + -1.8;
//     pi2c := 25.0 + pi;
//     o[1] := pi2c ^ 2.0;
//     o[2] := o[1] ^ 2.0;
//     o[3] := o[1] * o[2] * pi2c;
//     o[4] := 1.0 / o[3];
//     o[5] := o[1] * o[2];
//     o[6] := eta2c ^ 2.0;
//     o[7] := o[2] ^ 2.0;
//     o[8] := o[6] ^ 2.0;
//     T := eta2c * ((859777.2253558 + o[1] * (482.19755109255 + 1.126159740723e-12 * o[5])) / o[1] + eta2c * ((-583401318515.9 + (20825544563.171 + 31081.088422714 * o[2]) * pi2c) / o[5] + o[6] * (o[8] * (o[6] * (1.2324579690832e-07 * o[5] + o[6] * (-1.1606921130984e-06 * o[5] + o[8] * (2.7846367088554e-05 * o[5] + (-0.00059270038474176 * o[5] + 0.0012918582991878 * o[5] * o[6]) * o[8]))) + -10.842984880077 * pi2c) + o[4] * (7326335090218.1 + o[7] * (3.7966001272486 + (-0.04536417267666 + -1.7804982240686e-11 * o[2]) * pi2c))))) + o[4] * (-3236839855524.2 + pi2c * (358250899454.47 + pi2c * (-10783068217.47 + o[1] * pi2c * (610747.83564516 + pi2c * (-25745.72360417 + (1208.2315865936 + 1.4559115658698e-13 * o[5]) * pi2c)))));
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps1 \"inverse function for region 1: T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 1000000.0;
//   protected constant Real sstar(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 1000.0;
//   protected Real pi \"dimensionless pressure\";
//   protected Real sigma1 \"dimensionless specific entropy\";
//   protected Real[6] o \"vector of auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function tps1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   sigma1 := 2.0 + s / 1000.0;
//   o[1] := sigma1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[1] * o[2] * o[4];
//   T := 174.78268058307 + sigma1 * (34.806930892873 + sigma1 * (6.5292584978455 + (0.33039981775489 + o[3] * (-1.9281382923196e-07 + -2.4909197244573e-23 * o[2] * o[4])) * sigma1)) + pi * (-0.26107636489332 + pi * (0.00056608900654837 + pi * (o[1] * o[3] * (2.6400441360689e-13 + 7.8124600459723e-29 * o[6]) + -3.0732199903668e-31 * o[5] * pi) + sigma1 * (-0.00032635483139717 + sigma1 * (4.4778286690632e-05 + o[1] * o[2] * (-5.1322156908507e-10 + -4.2522657042207e-26 * o[6]) * sigma1))) + sigma1 * (0.22592965981586 + sigma1 * (-0.064256463395226 + sigma1 * (0.0078876289270526 + o[3] * sigma1 * (3.5672110607366e-10 + 1.7332496994895e-24 * o[1] * o[4] * sigma1)))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2 \"reverse function for region 2: T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected Real pi \"dimensionless pressure\";
//   protected constant Real SLIMIT(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 5850.0 \"subregion boundary specific entropy between regions 2a and 2b\";
// algorithm
//   if p < 4000000.0 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2a(p, s);
//   elseif s > 5850.0 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2b(p, s);
//   else
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2c(p, s);
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2a \"reverse function for region 2a: T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected Real[12] o \"vector of auxiliary variables\";
//   protected constant Real IPSTAR = 1e-06 \"scaling variable\";
//   protected constant Real ISSTAR2A = 0.0005 \"scaling variable\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real sigma2a \"dimensionless specific entropy\";
// algorithm
//   pi := 1e-06 * p;
//   sigma2a := 0.0005 * s + -2.0;
//   o[1] := pi ^ 0.5;
//   o[2] := sigma2a ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := pi ^ 0.25;
//   o[7] := o[2] * o[4] * o[5];
//   o[8] := 1.0 / o[7];
//   o[9] := o[3] * sigma2a;
//   o[10] := o[2] * o[3] * sigma2a;
//   o[11] := o[3] * o[4] * sigma2a;
//   o[12] := o[2] * sigma2a;
//   T := ((-392359.83861984 + (515265.7382727 + o[3] * (40482.443161048 + o[2] * o[3] * (-321.93790923902 + o[2] * (96.961424218694 + -22.867846371773 * sigma2a)))) * sigma2a) / (o[5] * o[4]) + o[6] * ((-449429.14124357 + o[3] * (-5011.8336020166 + 0.35684463560015 * o[4] * sigma2a)) / (sigma2a * o[5] * o[2]) + o[6] * (o[8] * (44235.33584819 + o[9] * (-13673.388811708 + o[3] * (421632.60207864 + (22516.925837475 + o[10] * (474.42144865646 + -149.31130797647 * sigma2a)) * sigma2a))) + o[6] * ((-197811.26320452 + -23554.39947076 * sigma2a) / (sigma2a * o[4] * o[3] * o[2]) + o[6] * ((-19070.616302076 + o[11] * (55375.669883164 + (3829.3691437363 + -603.91860580567 * o[2]) * o[3])) * o[8] + o[6] * ((1936.3102620331 + o[2] * (4266.064369861 + o[2] * o[3] * o[4] * (-5978.0638872718 + -704.01463926862 * o[9]))) / (sigma2a * o[5] * o[4] * o[2]) + o[1] * ((338.36784107553 + o[12] * (20.862786635187 + (0.033834172656196 + -4.3124428414893e-05 * o[12]) * o[3])) * sigma2a + o[6] * (166.53791356412 + sigma2a * (-139.86292055898 + o[3] * (-0.78849547999872 + (0.072132411753872 + o[3] * (-0.0059754839398283 + (-1.2141358953904e-05 + 2.3227096733871e-07 * o[2]) * o[3])) * sigma2a)) + o[6] * (-10.538463566194 + o[3] * (2.0718925496502 + (-0.072193155260427 + 2.074988708112e-07 * o[4]) * o[9]) + o[6] * (o[6] * (o[12] * (0.21037527893619 + 0.00025681239729999 * o[3] * o[4]) + (-0.012799002933781 + -8.2198102652018e-06 * o[11]) * o[6] * o[9]) + o[10] * (-0.018340657911379 + 2.9036272348696e-07 * o[2] * o[4] * sigma2a))))))))))) / (pi * o[1]);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2a;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2b \"reverse function for region 2b: T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected Real[8] o \"vector of auxiliary variables\";
//   protected constant Real IPSTAR = 1e-06 \"scaling variable\";
//   protected constant Real ISSTAR2B = 0.00127339870113332 \"scaling variable\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real sigma2b \"dimensionless specific entropy\";
// algorithm
//   pi := 1e-06 * p;
//   sigma2b := 10.0 + -0.00127339870113332 * s;
//   o[1] := pi ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := sigma2b ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[3] * o[5] * sigma2b;
//   o[7] := o[3] * o[5];
//   o[8] := o[3] * sigma2b;
//   T := (316876.65083497 + 20.864175881858 * o[6] + pi * (-398593.99803599 + -21.816058518877 * o[6] + pi * (223697.85194242 + (-2784.1703445817 + 9.920743607148 * o[7]) * sigma2b + pi * (-75197.512299157 + (2970.8605951158 + o[7] * (-3.4406878548526 + 0.38815564249115 * sigma2b)) * sigma2b + pi * (17511.29508575 + sigma2b * (-1423.7112854449 + (1.0943803364167 + 0.89971619308495 * o[4]) * o[4] * sigma2b) + pi * (-3375.9740098958 + (471.62885818355 + o[4] * (-1.9188241993679 + o[8] * (0.41078580492196 + -0.33465378172097 * sigma2b))) * sigma2b + pi * (1387.0034777505 + sigma2b * (-406.63326195838 + sigma2b * (41.72734715961 + o[3] * (2.1932549434532 + sigma2b * (-1.0320050009077 + (0.35882943516703 + 0.0052511453726066 * o[8]) * sigma2b)))) + pi * (12.838916450705 + sigma2b * (-2.8642437219381 + sigma2b * (0.56912683664855 + (-0.099962954584931 + o[4] * (-0.0032632037778459 + 0.00023320922576723 * sigma2b)) * sigma2b)) + pi * (-0.1533480985745 + (0.029072288239902 + 0.00037534702741167 * o[4]) * sigma2b + pi * (0.0017296691702411 + (-0.00038556050844504 + -3.5017712292608e-05 * o[3]) * sigma2b + pi * (-1.4566393631492e-05 + 5.6420857267269e-06 * sigma2b + pi * (4.1286150074605e-08 + (-2.0684671118824e-08 + 1.6409393674725e-09 * sigma2b) * sigma2b)))))))))))) / (o[2] * o[1]);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2c \"reverse function for region 2c: T(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected constant Real IPSTAR = 1e-06 \"scaling variable\";
//   protected constant Real ISSTAR2C = 0.000341868654063109 \"scaling variable\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real sigma2c \"dimensionless specific entropy\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * p;
//   sigma2c := 2.0 + -0.000341868654063109 * s;
//   o[1] := pi ^ 2.0;
//   o[2] := sigma2c ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   T := (909.68501005365 + 2404.566708842 * sigma2c + pi * (-591.6232638713 + pi * (541.45404128074 + sigma2c * (-270.98308411192 + (979.76525097926 + -469.66772959435 * sigma2c) * sigma2c) + pi * (14.399274604723 + (-19.104204230429 + o[2] * (5.3299167111971 + -21.252975375934 * sigma2c)) * sigma2c + pi * (-0.3114733441376 + (0.60334840894623 + -0.042764839702509 * sigma2c) * sigma2c + pi * (0.0058185597255259 + (-0.014597008284753 + 0.0056631175631027 * o[3]) * sigma2c + pi * (-7.6155864584577e-05 + sigma2c * (0.00022440342919332 + -1.2561095013413e-05 * o[2] * sigma2c) + pi * (6.3323132660934e-07 + (-2.0541989675375e-06 + 3.6405370390082e-08 * sigma2c) * sigma2c + pi * (-2.9759897789215e-09 + 1.0136618529763e-08 * sigma2c + pi * (5.9925719692351e-12 + sigma2c * (-2.0677870105164e-11 + o[2] * (-2.0874278181886e-11 + (1.0162166825089e-10 + -1.6429828281347e-10 * sigma2c) * sigma2c)))))))))))) / o[1];
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2c;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat \"region 4 saturation temperature as a function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real t_sat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[20] o \"vector of auxiliary variables\";
// algorithm
//   pi := 1e-06 * max(min(p, 22064000.0), 611.657);
//   o[1] := pi ^ 0.25;
//   o[2] := -3232555.0322333 * o[1];
//   o[3] := pi ^ 0.5;
//   o[4] := -724213.16703206 * o[3];
//   o[5] := 405113.40542057 + o[2] + o[4];
//   o[6] := -17.073846940092 * o[1];
//   o[7] := 14.91510861353 + o[3] + o[6];
//   o[8] := -4.0 * o[5] * o[7];
//   o[9] := 12020.82470247 * o[1];
//   o[10] := 1167.0521452767 * o[3];
//   o[11] := -4823.2657361591 + o[10] + o[9];
//   o[12] := o[11] ^ 2.0;
//   o[13] := o[12] + o[8];
//   o[14] := o[13] ^ 0.5;
//   o[15] := -o[14];
//   o[16] := -12020.82470247 * o[1];
//   o[17] := -1167.0521452767 * o[3];
//   o[18] := 4823.2657361591 + o[15] + o[16] + o[17];
//   o[19] := 1.0 / o[18];
//   o[20] := 2.0 * o[19] * o[5];
//   t_sat := 325.08767422399 + 0.5 * (o[20] - (0.95422230271396 + -5201.40278758384 * o[19] * o[5] + (650.17534844798 + o[20]) ^ 2.0) ^ 0.5);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat_der \"derivative function for tsat\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real der_p(unit = \"Pa/s\") \"pressure derivatrive\";
//   output Real der_tsat(unit = \"K/s\") \"temperature derivative\";
//   protected Real dtp;
// algorithm
//   dtp := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dtsatofp(p);
//   der_tsat := dtp * der_p;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat_der;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ph \"Region 3 a: inverse function v(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0) \"specific volume\";
//   protected constant Real[32] n = {0.00529944062966028, -0.170099690234461, 11.1323814312927, -2178.98123145125, -0.000506061827980875, 0.556495239685324, -9.43672726094016, -0.297856807561527, 93.9353943717186, 0.0192944939465981, 0.421740664704763, -3689141.2628233, -0.00737566847600639, -0.354753242424366, -1.99768169338727, 1.15456297059049, 5683.6687581596, 0.00808169540124668, 0.172416341519307, 1.04270175292927, -0.297691372792847, 0.560394465163593, 0.275234661176914, -0.148347894866012, -0.0651142513478515, -2.92468715386302, 0.0664876096952665, 3.52335014263844, -0.0146340792313332, -2.24503486668184, 1.10533464706142, -0.0408757344495612};
//   protected constant Real[32] I = {-12.0, -12.0, -12.0, -12.0, -10.0, -10.0, -10.0, -8.0, -8.0, -6.0, -6.0, -6.0, -4.0, -4.0, -3.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 4.0, 5.0, 8.0};
//   protected constant Real[32] J = {6.0, 8.0, 12.0, 18.0, 4.0, 7.0, 10.0, 5.0, 12.0, 3.0, 4.0, 22.0, 2.0, 3.0, 7.0, 3.0, 16.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 0.0, 1.0, 2.0, 0.0, 2.0, 0.0, 2.0, 2.0, 2.0};
//   protected constant Real vstar(quantity = \"Volume\", unit = \"m3\") = 0.0028 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real hstar(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 2100000.0 \"normalization enthalpy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real eta = h / 2100000.0 \"normalized specific enthalpy\";
// algorithm
//   v := 0.000955668940646356 + 0.0028 * (0.00529944062966028 * (0.128 + pi) ^ -12.0 * (-0.727 + eta) ^ 6.0 + -0.170099690234461 * (0.128 + pi) ^ -12.0 * (-0.727 + eta) ^ 8.0 + 11.1323814312927 * (0.128 + pi) ^ -12.0 * (-0.727 + eta) ^ 12.0 + -2178.98123145125 * (0.128 + pi) ^ -12.0 * (-0.727 + eta) ^ 18.0 + -0.000506061827980875 * (0.128 + pi) ^ -10.0 * (-0.727 + eta) ^ 4.0 + 0.556495239685324 * (0.128 + pi) ^ -10.0 * (-0.727 + eta) ^ 7.0 + -9.43672726094016 * (0.128 + pi) ^ -10.0 * (-0.727 + eta) ^ 10.0 + -0.297856807561527 * (0.128 + pi) ^ -8.0 * (-0.727 + eta) ^ 5.0 + 93.9353943717186 * (0.128 + pi) ^ -8.0 * (-0.727 + eta) ^ 12.0 + 0.0192944939465981 * (0.128 + pi) ^ -6.0 * (-0.727 + eta) ^ 3.0 + 0.421740664704763 * (0.128 + pi) ^ -6.0 * (-0.727 + eta) ^ 4.0 + -3689141.2628233 * (0.128 + pi) ^ -6.0 * (-0.727 + eta) ^ 22.0 + -0.00737566847600639 * (0.128 + pi) ^ -4.0 * (-0.727 + eta) ^ 2.0 + -0.354753242424366 * (0.128 + pi) ^ -4.0 * (-0.727 + eta) ^ 3.0 + -1.99768169338727 * (0.128 + pi) ^ -3.0 * (-0.727 + eta) ^ 7.0 + 1.15456297059049 * (0.128 + pi) ^ -2.0 * (-0.727 + eta) ^ 3.0 + 5683.6687581596 * (0.128 + pi) ^ -2.0 * (-0.727 + eta) ^ 16.0 + 0.00808169540124668 / (0.128 + pi) + (-0.125346680284536 + 0.172416341519307 * eta) / (0.128 + pi) + 1.04270175292927 * (-0.727 + eta) ^ 2.0 / (0.128 + pi) + -0.297691372792847 * (-0.727 + eta) ^ 3.0 / (0.128 + pi) + 0.275234661176914 * eta + -0.148347894866012 * pi + -0.0651142513478515 * (0.128 + pi) * (-0.727 + eta) + -2.92468715386302 * (0.128 + pi) * (-0.727 + eta) ^ 2.0 + 0.0664876096952665 * (0.128 + pi) ^ 2.0 + 3.52335014263844 * ((0.128 + pi) * (-0.727 + eta)) ^ 2.0 + -0.0146340792313332 * (0.128 + pi) ^ 3.0 + -2.24503486668184 * (0.128 + pi) ^ 4.0 * (-0.727 + eta) ^ 2.0 + 1.10533464706142 * (0.128 + pi) ^ 5.0 * (-0.727 + eta) ^ 2.0 + -0.0408757344495612 * (0.128 + pi) ^ 8.0 * (-0.727 + eta) ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ps \"Region 3 a: inverse function v(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0) \"specific volume\";
//   protected constant Real[28] n = {79.5544074093975, -2382.6124298459, 17681.3100617787, -0.00110524727080379, -15.3213833655326, 297.544599376982, -35031520.6871242, 0.277513761062119, -0.523964271036888, -148011.182995403, 1600148.99374266, 1708023226634.27, 0.000246866996006494, 1.6532608479798, -0.118008384666987, 2.537986423559, 0.965127704669424, -28.2172420532826, 0.203224612353823, 1.10648186063513, 0.52612794845128, 0.277000018736321, 1.08153340501132, -0.0744127885357893, 0.0164094443541384, -0.0680468275301065, 0.025798857610164, -0.000145749861944416};
//   protected constant Real[28] I = {-12.0, -12.0, -12.0, -10.0, -10.0, -10.0, -10.0, -8.0, -8.0, -8.0, -8.0, -6.0, -5.0, -4.0, -3.0, -3.0, -2.0, -2.0, -1.0, -1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 5.0, 6.0};
//   protected constant Real[28] J = {10.0, 12.0, 14.0, 4.0, 8.0, 10.0, 20.0, 5.0, 6.0, 14.0, 16.0, 28.0, 1.0, 5.0, 2.0, 4.0, 3.0, 8.0, 1.0, 2.0, 0.0, 1.0, 3.0, 0.0, 0.0, 2.0, 2.0, 0.0};
//   protected constant Real vstar(quantity = \"Volume\", unit = \"m3\") = 0.0028 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real sstar(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 4400.0 \"normalization entropy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real sigma = s / 4400.0 \"normalized specific entropy\";
// algorithm
//   v := 0.000848617679977662 + 0.0028 * (79.5544074093975 * (0.187 + pi) ^ -12.0 * (-0.755 + sigma) ^ 10.0 + -2382.6124298459 * (0.187 + pi) ^ -12.0 * (-0.755 + sigma) ^ 12.0 + 17681.3100617787 * (0.187 + pi) ^ -12.0 * (-0.755 + sigma) ^ 14.0 + -0.00110524727080379 * (0.187 + pi) ^ -10.0 * (-0.755 + sigma) ^ 4.0 + -15.3213833655326 * (0.187 + pi) ^ -10.0 * (-0.755 + sigma) ^ 8.0 + 297.544599376982 * (0.187 + pi) ^ -10.0 * (-0.755 + sigma) ^ 10.0 + -35031520.6871242 * (0.187 + pi) ^ -10.0 * (-0.755 + sigma) ^ 20.0 + 0.277513761062119 * (0.187 + pi) ^ -8.0 * (-0.755 + sigma) ^ 5.0 + -0.523964271036888 * (0.187 + pi) ^ -8.0 * (-0.755 + sigma) ^ 6.0 + -148011.182995403 * (0.187 + pi) ^ -8.0 * (-0.755 + sigma) ^ 14.0 + 1600148.99374266 * (0.187 + pi) ^ -8.0 * (-0.755 + sigma) ^ 16.0 + 1708023226634.27 * (0.187 + pi) ^ -6.0 * (-0.755 + sigma) ^ 28.0 + 0.000246866996006494 * (0.187 + pi) ^ -5.0 * (-0.755 + sigma) + 1.6532608479798 * (0.187 + pi) ^ -4.0 * (-0.755 + sigma) ^ 5.0 + -0.118008384666987 * (0.187 + pi) ^ -3.0 * (-0.755 + sigma) ^ 2.0 + 2.537986423559 * (0.187 + pi) ^ -3.0 * (-0.755 + sigma) ^ 4.0 + 0.965127704669424 * (0.187 + pi) ^ -2.0 * (-0.755 + sigma) ^ 3.0 + -28.2172420532826 * (0.187 + pi) ^ -2.0 * (-0.755 + sigma) ^ 8.0 + (-0.153434582327136 + 0.203224612353823 * sigma) / (0.187 + pi) + 1.10648186063513 * (-0.755 + sigma) ^ 2.0 / (0.187 + pi) + 0.277000018736321 * sigma + 1.08153340501132 * (-0.755 + sigma) ^ 3.0 + -0.0744127885357893 * pi + 0.0164094443541384 * (0.187 + pi) ^ 2.0 + -0.0680468275301065 * (0.187 + pi) ^ 4.0 * (-0.755 + sigma) ^ 2.0 + 0.025798857610164 * (0.187 + pi) ^ 5.0 * (-0.755 + sigma) ^ 2.0 + -0.000145749861944416 * (0.187 + pi) ^ 6.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ph \"Region 3 b: inverse function v(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0) \"specific volume\";
//   protected constant Real[30] n = {-2.25196934336318e-09, 1.40674363313486e-08, 2.3378408528056e-06, -3.31833715229001e-05, 0.00107956778514318, -0.271382067378863, 1.07202262490333, -0.853821329075382, -2.15214194340526e-05, 0.00076965608822273, -0.00431136580433864, 0.453342167309331, -0.507749535873652, -100.475154528389, -0.219201924648793, -3.21087965668917, 607.567815637771, 0.000557686450685932, 0.18749904002955, 0.00905368030448107, 0.285417173048685, 0.0329924030996098, 0.239897419685483, 4.82754995951394, -11.8035753702231, 0.169490044091791, -0.0179967222507787, 0.0371810116332674, -0.0536288335065096, 1.6069710109252};
//   protected constant Real[30] I = {-12.0, -12.0, -8.0, -8.0, -8.0, -8.0, -8.0, -8.0, -6.0, -6.0, -6.0, -6.0, -6.0, -6.0, -4.0, -4.0, -4.0, -3.0, -3.0, -2.0, -2.0, -1.0, -1.0, -1.0, -1.0, 0.0, 1.0, 1.0, 2.0, 2.0};
//   protected constant Real[30] J = {0.0, 1.0, 0.0, 1.0, 3.0, 6.0, 7.0, 8.0, 0.0, 1.0, 2.0, 5.0, 6.0, 10.0, 3.0, 6.0, 10.0, 0.0, 2.0, 1.0, 2.0, 0.0, 1.0, 4.0, 5.0, 0.0, 0.0, 1.0, 2.0, 6.0};
//   protected constant Real vstar(quantity = \"Volume\", unit = \"m3\") = 0.0088 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real hstar(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 2800000.0 \"normalization enthalpy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real eta = h / 2800000.0 \"normalized specific enthalpy\";
// algorithm
//   v := 0.00148104405460893 + 0.0088 * (-2.25196934336318e-09 / (0.0661 + pi) ^ 12.0 + 1.40674363313486e-08 * (0.0661 + pi) ^ -12.0 * (-0.72 + eta) + 2.3378408528056e-06 / (0.0661 + pi) ^ 8.0 + -3.31833715229001e-05 * (0.0661 + pi) ^ -8.0 * (-0.72 + eta) + 0.00107956778514318 * (0.0661 + pi) ^ -8.0 * (-0.72 + eta) ^ 3.0 + -0.271382067378863 * (0.0661 + pi) ^ -8.0 * (-0.72 + eta) ^ 6.0 + 1.07202262490333 * (0.0661 + pi) ^ -8.0 * (-0.72 + eta) ^ 7.0 + -0.853821329075382 * (0.0661 + pi) ^ -8.0 * (-0.72 + eta) ^ 8.0 + -2.15214194340526e-05 / (0.0661 + pi) ^ 6.0 + 0.00076965608822273 * (0.0661 + pi) ^ -6.0 * (-0.72 + eta) + -0.00431136580433864 * (0.0661 + pi) ^ -6.0 * (-0.72 + eta) ^ 2.0 + 0.453342167309331 * (0.0661 + pi) ^ -6.0 * (-0.72 + eta) ^ 5.0 + -0.507749535873652 * (0.0661 + pi) ^ -6.0 * (-0.72 + eta) ^ 6.0 + -100.475154528389 * (0.0661 + pi) ^ -6.0 * (-0.72 + eta) ^ 10.0 + -0.219201924648793 * (0.0661 + pi) ^ -4.0 * (-0.72 + eta) ^ 3.0 + -3.21087965668917 * (0.0661 + pi) ^ -4.0 * (-0.72 + eta) ^ 6.0 + 607.567815637771 * (0.0661 + pi) ^ -4.0 * (-0.72 + eta) ^ 10.0 + 0.000557686450685932 / (0.0661 + pi) ^ 3.0 + 0.18749904002955 * (0.0661 + pi) ^ -3.0 * (-0.72 + eta) ^ 2.0 + 0.00905368030448107 * (0.0661 + pi) ^ -2.0 * (-0.72 + eta) + 0.285417173048685 * (0.0661 + pi) ^ -2.0 * (-0.72 + eta) ^ 2.0 + 0.0329924030996098 / (0.0661 + pi) + (-0.172726142173548 + 0.239897419685483 * eta) / (0.0661 + pi) + 4.82754995951394 * (-0.72 + eta) ^ 4.0 / (0.0661 + pi) + -11.8035753702231 * (-0.72 + eta) ^ 5.0 / (0.0661 + pi) + -0.0179967222507787 * pi + 0.0371810116332674 * (0.0661 + pi) * (-0.72 + eta) + -0.0536288335065096 * ((0.0661 + pi) * (-0.72 + eta)) ^ 2.0 + 1.6069710109252 * (0.0661 + pi) ^ 2.0 * (-0.72 + eta) ^ 6.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ps \"Region 3 b: inverse function v(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   output Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0) \"specific volume\";
//   protected constant Real[31] n = {5.91599780322238e-05, -0.00185465997137856, 0.0104190510480013, 0.0059864730203859, -0.771391189901699, 1.72549765557036, -0.000467076079846526, 0.0134533823384439, -0.0808094336805495, 0.508139374365767, 0.00128584643361683, -1.63899353915435, 5.86938199318063, -2.92466667918613, -0.00614076301499537, 5.76199014049172, -12.1613320606788, 1.67637540957944, -7.44135838773463, 0.0378168091437659, 4.01432203027688, 16.0279837479185, 3.17848779347728, -3.58362310304853, -1159952.60446827, 0.199256573577909, -0.122270624794624, -19.1449143716586, -0.0150448002905284, 14.6407900162154, -3.2747778718823};
//   protected constant Real[31] I = {-12.0, -12.0, -12.0, -12.0, -12.0, -12.0, -10.0, -10.0, -10.0, -10.0, -8.0, -5.0, -5.0, -5.0, -4.0, -4.0, -4.0, -4.0, -3.0, -2.0, -2.0, -2.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0};
//   protected constant Real[31] J = {0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 0.0, 1.0, 2.0, 4.0, 0.0, 1.0, 2.0, 3.0, 0.0, 1.0, 2.0, 3.0, 1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 12.0, 0.0, 1.0, 2.0, 0.0, 2.0, 2.0};
//   protected constant Real vstar(quantity = \"Volume\", unit = \"m3\") = 0.0088 \"normalization temperature\";
//   protected constant Real pstar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 100000000.0 \"normalization pressure\";
//   protected constant Real sstar(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") = 5300.0 \"normalization entropy\";
//   protected Real pi = p / 100000000.0 \"normalized specific pressure\";
//   protected Real sigma = s / 5300.0 \"normalized specific entropy\";
// algorithm
//   v := 0.00259200526572895 + 0.0088 * (5.91599780322238e-05 / (0.298 + pi) ^ 12.0 + -0.00185465997137856 * (0.298 + pi) ^ -12.0 * (-0.816 + sigma) + 0.0104190510480013 * (0.298 + pi) ^ -12.0 * (-0.816 + sigma) ^ 2.0 + 0.0059864730203859 * (0.298 + pi) ^ -12.0 * (-0.816 + sigma) ^ 3.0 + -0.771391189901699 * (0.298 + pi) ^ -12.0 * (-0.816 + sigma) ^ 5.0 + 1.72549765557036 * (0.298 + pi) ^ -12.0 * (-0.816 + sigma) ^ 6.0 + -0.000467076079846526 / (0.298 + pi) ^ 10.0 + 0.0134533823384439 * (0.298 + pi) ^ -10.0 * (-0.816 + sigma) + -0.0808094336805495 * (0.298 + pi) ^ -10.0 * (-0.816 + sigma) ^ 2.0 + 0.508139374365767 * (0.298 + pi) ^ -10.0 * (-0.816 + sigma) ^ 4.0 + 0.00128584643361683 / (0.298 + pi) ^ 8.0 + -1.63899353915435 * (0.298 + pi) ^ -5.0 * (-0.816 + sigma) + 5.86938199318063 * (0.298 + pi) ^ -5.0 * (-0.816 + sigma) ^ 2.0 + -2.92466667918613 * (0.298 + pi) ^ -5.0 * (-0.816 + sigma) ^ 3.0 + -0.00614076301499537 / (0.298 + pi) ^ 4.0 + 5.76199014049172 * (0.298 + pi) ^ -4.0 * (-0.816 + sigma) + -12.1613320606788 * (0.298 + pi) ^ -4.0 * (-0.816 + sigma) ^ 2.0 + 1.67637540957944 * (0.298 + pi) ^ -4.0 * (-0.816 + sigma) ^ 3.0 + -7.44135838773463 * (0.298 + pi) ^ -3.0 * (-0.816 + sigma) + 0.0378168091437659 / (0.298 + pi) ^ 2.0 + 4.01432203027688 * (0.298 + pi) ^ -2.0 * (-0.816 + sigma) + 16.0279837479185 * (0.298 + pi) ^ -2.0 * (-0.816 + sigma) ^ 2.0 + 3.17848779347728 * (0.298 + pi) ^ -2.0 * (-0.816 + sigma) ^ 3.0 + -3.58362310304853 * (0.298 + pi) ^ -2.0 * (-0.816 + sigma) ^ 4.0 + -1159952.60446827 * (0.298 + pi) ^ -2.0 * (-0.816 + sigma) ^ 12.0 + -0.122270624794624 * sigma + -19.1449143716586 * (-0.816 + sigma) ^ 2.0 + -0.0150448002905284 * pi + 14.6407900162154 * (0.298 + pi) * (-0.816 + sigma) ^ 2.0 + -3.2747778718823 * ((0.298 + pi) * (-0.816 + sigma)) ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13 \"density at the boundary between regions 1 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real p2 \"auxiliary variable\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   p2 := 7.1 + -6.04960677555959e-08 * p;
//   o[1] := p2 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   d := 57.4756752485113 / (0.0737412153522555 + p2 * (0.00145092247736023 + p2 * (0.000102697173772229 + p2 * (1.14683182476084e-05 + p2 * (1.99080616601101e-06 + o[1] * p2 * (1.13217858826367e-08 + o[2] * o[3] * p2 * (1.35549330686006e-17 + o[1] * (-3.11228834832975e-19 + o[1] * o[2] * (-7.02987180039442e-22 + p2 * (3.29199117056433e-22 + (-5.17859076694812e-23 + 2.73712834080283e-24 * p2) * p2))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23 \"density at the boundary between regions 2 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0);
//   protected Real[13] o \"vector of auxiliary variables\";
//   protected Real taug \"auxiliary variable\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real gpi23 \"derivative of g w.r.t. pi on the boundary between regions 2 and 3\";
// algorithm
//   pi := p / 1000000.0;
//   T := 572.54459862746 + 31.3220101646784 * (-13.91883977887 + pi) ^ 0.5;
//   o[1] := (-13.91883977887 + pi) ^ 0.5;
//   taug := -0.5 + 540.0 / (572.54459862746 + 31.3220101646784 * o[1]);
//   o[2] := taug ^ 2.0;
//   o[3] := o[2] * taug;
//   o[4] := o[2] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[5] ^ 2.0;
//   o[7] := o[4] * o[5] * o[6] * taug;
//   o[8] := o[4] * o[5] * taug;
//   o[9] := o[2] * o[4] * o[5];
//   o[10] := pi ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[4] * o[6] * taug;
//   o[13] := o[6] ^ 2.0;
//   gpi23 := (1.0 + pi * (-0.0017731742473213 + taug * (-0.017834862292358 + taug * (-0.045996013696365 + (-0.057581259083432 + -0.05032527872793 * o[3]) * taug)) + pi * (taug * (-6.6065283340406e-05 + (-0.0003789797503263 + o[2] * (-0.007878555448671 + o[3] * (-0.087594591301146 + -5.3349095828174e-05 * o[7]))) * taug) + pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[2] * (-9.683303171571e-05 + o[3] * (-0.0045101773626444 + -0.122004760687947 * o[7]))) * taug + pi * (taug * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * taug) * taug) + pi * (1.14610381688305e-05 * o[2] * o[4] * taug + pi * (o[3] * (-1.00288598706366e-10 + o[8] * (-0.012702883392813 + -143.374451604624 * o[2] * o[6] * taug)) + pi * (-4.1341695026989e-17 + o[2] * o[5] * (-8.8352662293707e-06 + -0.272627897050173 * o[9]) * taug + pi * (o[5] * (9.0049690883672e-11 + -65.8490727183984 * o[4] * o[5] * o[6]) + pi * (1.78287415218792e-07 * o[8] + pi * (o[4] * (1.0406965210174e-18 + o[2] * (-1.0234747095929e-12 + -1.0018179379511e-08 * o[4]) * o[4]) + o[10] * o[11] * ((-1.29412653835176e-09 + 1.71088510070544 * o[12]) * o[7] + o[10] * (-6.05920510335078 * o[13] * o[5] * o[6] * taug + o[10] * (o[4] * o[6] * (1.78371690710842e-23 + o[2] * o[4] * o[5] * (6.1258633752464e-12 + -8.4004935396416e-05 * o[8]) * taug) + pi * (-1.24017662339842e-24 * o[12] + pi * (8.32192847496054e-05 * o[13] * o[4] * o[6] * taug + pi * (o[2] * o[5] * o[6] * (1.75410265428146e-27 + (1.32995316841867e-15 + -2.26487297378904e-05 * o[2] * o[6]) * o[9]) * pi + -2.93678005497663e-14 * o[13] * o[2] * o[4] * taug))))))))))))))))) / pi;
//   d := p / (gpi23 * pi * T * 461.526);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3 \"inverse iteration in region 3: (d) = f(p,T)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   input Real delp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"iteration converged if (p-pre(p) < delp)\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   output Integer error = 0 \"error flag: iteration failed if different from 0\";
//   protected Real dguess(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"guess density\";
//   protected Integer i = 0 \"loop counter\";
//   protected Real dp \"pressure difference\";
//   protected Real deld(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density step\";
//   protected Modelica.Media.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Modelica.Media.Common.NewtonDerivatives_pT nDerivs \"derivatives needed in Newton iteration\";
//   protected Boolean found = false \"flag for iteration success\";
//   protected Boolean supercritical \"flag, true for supercritical states\";
//   protected Boolean liquid \"flag, true for liquid states\";
//   protected Real dmin(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"lower density limit\";
//   protected Real dmax(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"upper density limit\";
//   protected Real Tmax(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"maximum temperature\";
// algorithm
//   assert( p >= 16529200.0, \"BaseIF97.dofpt3: function called outside of region 3! p too low
// p = \" + String(p, 0, true, 6) + \" Pa < \" + String(16529200.0, 0, true, 6) + \" Pa\");
//   assert( T >= 623.15, \"BaseIF97.dofpt3: function called outside of region 3! T too low
// T = \" + String(T, 0, true, 6) + \" K < \" + String(623.15, 0, true, 6) + \" K\");
//   assert( p >= ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT(T), \"BaseIF97.dofpt3: function called outside of region 3! T too high
// p = \" + String(p, 0, true, 6) + \" Pa, T = \" + String(T, 0, true, 6) + \" K\");
//   supercritical := p > 22064000.0;
//   dmax := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp13(p);
//   dmin := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofp23(p);
//   Tmax := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp(p);
//   if supercritical then
//     dguess := dmin + (dmax - dmin) * (-623.15 + T) / (623.15 - Tmax);
//   else
//     liquid := T < ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//     if liquid then
//       dguess := 0.5 * (ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(p) + dmax);
//     else
//       dguess := 0.5 * (ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(p) + dmin);
//     end if;
//   end if;
//   while i < 50 and not found loop
//     d := dguess;
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     nDerivs := Modelica.Media.Common.Helmholtz_pT(f);
//     dp := nDerivs.p - p;
//     if abs(dp / p) <= delp then
//       found := true;
//     end if;
//     deld := dp / nDerivs.pd;
//     d := d - deld;
//     if d > dmin and d < dmax then
//       dguess := d;
//     else
//       if d > dmax then
//         dguess := dmax + -3.16227766016838e-08;
//       else
//         dguess := 3.16227766016838e-08 + dmin;
//       end if;
//     end if;
//     i := 1 + i;
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function dofpt3: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofph3 \"inverse iteration in region 3: (d,T) = f(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   input Real delp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"iteration accuracy\";
//   input Real delh(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"iteration accuracy\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Integer error \"error flag: iteration failed if different from 0\";
//   protected Real Tguess(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"initial temperature\";
//   protected Real dguess(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"initial density\";
//   protected Integer i \"iteration counter\";
//   protected Real dh \"Newton-error in h-direction\";
//   protected Real dp \"Newton-error in p-direction\";
//   protected Real det \"determinant of directional derivatives\";
//   protected Real deld \"Newton-step in d-direction\";
//   protected Real delt \"Newton-step in T-direction\";
//   protected Modelica.Media.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Modelica.Media.Common.NewtonDerivatives_ph nDerivs \"derivatives needed in Newton iteration\";
//   protected Boolean found \"flag for iteration success\";
//   protected Integer subregion \"1 for subregion 3a, 2 for subregion 3b\";
// algorithm
//   if p < 22064000.0 then
//     subregion := if h < 10.0 + ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p(p) then 1 else if h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p(p) + -10.0 then 2 else 0;
//     assert( subregion <> 0, \"inverse iteration of dt from ph called in 2 phase region: this can not work\");
//   else
//     subregion := if h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.h3ab_p(p) then 1 else 2;
//   end if;
//   T := if subregion == 1 then ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ph(p, h) else ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ph(p, h);
//   d := if subregion == 1 then 1.0 / ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ph(p, h) else 1.0 / ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ph(p, h);
//   i := 0;
//   error := 0;
//   while i < 50 and not found loop
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     nDerivs := Modelica.Media.Common.Helmholtz_ph(f);
//     dh := nDerivs.h - h;
//     dp := nDerivs.p - p;
//     if abs(dh / h) <= delh and abs(dp / p) <= delp then
//       found := true;
//     end if;
//     det := nDerivs.ht * nDerivs.pd - nDerivs.pt * nDerivs.hd;
//     delt := (nDerivs.pd * dh - nDerivs.hd * dp) / det;
//     deld := (nDerivs.ht * dp - nDerivs.pt * dh) / det;
//     T := T - delt;
//     d := d - deld;
//     dguess := d;
//     Tguess := T;
//     i := 1 + i;
//     (d, T) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.fixdT(dguess, Tguess);
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function dtofph3: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofph3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofps3 \"inverse iteration in region 3: (d,T) = f(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   input Real delp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"iteration accuracy\";
//   input Real dels(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"iteration accuracy\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Integer error \"error flag: iteration failed if different from 0\";
//   protected Real Tguess(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"initial temperature\";
//   protected Real dguess(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"initial density\";
//   protected Integer i \"iteration counter\";
//   protected Real ds \"Newton-error in s-direction\";
//   protected Real dp \"Newton-error in p-direction\";
//   protected Real det \"determinant of directional derivatives\";
//   protected Real deld \"Newton-step in d-direction\";
//   protected Real delt \"Newton-step in T-direction\";
//   protected Modelica.Media.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Modelica.Media.Common.NewtonDerivatives_ps nDerivs \"derivatives needed in Newton iteration\";
//   protected Boolean found \"flag for iteration success\";
//   protected Integer subregion \"1 for subregion 3a, 2 for subregion 3b\";
// algorithm
//   i := 0;
//   error := 0;
//   found := false;
//   if p < 22064000.0 then
//     subregion := if s < 10.0 + ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p(p) then 1 else if s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p(p) + -10.0 then 2 else 0;
//     assert( subregion <> 0, \"inverse iteration of dt from ps called in 2 phase region: this is illegal!\");
//   else
//     subregion := if s < 4412.02148223476 then 1 else 2;
//   end if;
//   T := if subregion == 1 then ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3a_ps(p, s) else ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.T3b_ps(p, s);
//   d := if subregion == 1 then 1.0 / ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3a_ps(p, s) else 1.0 / ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.v3b_ps(p, s);
//   while i < 50 and not found loop
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     nDerivs := Modelica.Media.Common.Helmholtz_ps(f);
//     ds := nDerivs.s - s;
//     dp := nDerivs.p - p;
//     if abs(ds / s) <= dels and abs(dp / p) <= delp then
//       found := true;
//     end if;
//     det := nDerivs.st * nDerivs.pd - nDerivs.pt * nDerivs.sd;
//     delt := (nDerivs.pd * ds - nDerivs.sd * dp) / det;
//     deld := (nDerivs.st * dp - nDerivs.pt * ds) / det;
//     T := T - delt;
//     d := d - deld;
//     dguess := d;
//     Tguess := T;
//     i := 1 + i;
//     (d, T) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.fixdT(dguess, Tguess);
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function dtofps3: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofps3;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.fixdT \"region limits for inverse iteration in region 3\"
//   input Real din(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   input Real Tin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   output Real dout(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   output Real Tout(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real Tmin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"approximation of minimum temperature\";
//   protected Real Tmax(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"approximation of maximum temperature\";
// algorithm
//   if din > 765.0 then
//     dout := 765.0;
//   elseif din < 110.0 then
//     dout := 110.0;
//   else
//     dout := din;
//   end if;
//   if dout < 390.0 then
//     Tmax := 554.3557377 + 0.809344262 * dout;
//   else
//     Tmax := 1116.85 + -0.632948717 * dout;
//   end if;
//   if dout < 322.0 then
//     Tmin := 647.096 + -0.000647096 * (-322.0 + dout) ^ 2.0;
//   else
//     Tmin := 647.096 + -0.000449372222222222 * (-322.0 + dout) ^ 2.0;
//   end if;
//   if Tin < Tmin then
//     Tout := Tmin;
//   elseif Tin > Tmax then
//     Tout := Tmax;
//   else
//     Tout := Tin;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.fixdT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofph5 \"inverse iteration in region 5: (p,T) = f(p,h)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   input Real reldh(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"iteration accuracy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Integer error \"error flag: iteration failed if different from 0\";
//   protected Modelica.Media.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real proh(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"h for current guess in T\";
//   protected constant Real Tguess(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 1500.0 \"initial temperature\";
//   protected Integer i \"iteration counter\";
//   protected Real relerr \"relative error in h\";
//   protected Real dh \"Newton-error in h-direction\";
//   protected Real dT \"Newton-step in T-direction\";
//   protected Boolean found \"flag for iteration success\";
// algorithm
//   i := 0;
//   error := 0;
//   T := 1500.0;
//   found := false;
//   while i < 50 and not found loop
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     proh := 461.526 * T * g.tau * g.gtau;
//     dh := proh - h;
//     relerr := dh / h;
//     if abs(relerr) < reldh then
//       found := true;
//     end if;
//     dT := dh / (g.tau ^ 2.0 * g.gtautau * -461.526);
//     T := T - dT;
//     i := 1 + i;
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function tofph5: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofph5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofps5 \"inverse iteration in region 5: (p,T) = f(p,s)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   input Real relds(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"iteration accuracy\";
//   output Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Integer error \"error flag: iteration failed if different from 0\";
//   protected Modelica.Media.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected Real pros(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"s for current guess in T\";
//   protected parameter Real Tguess(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 1500.0 \"initial temperature\";
//   protected Integer i \"iteration counter\";
//   protected Real relerr \"relative error in s\";
//   protected Real ds \"Newton-error in s-direction\";
//   protected Real dT \"Newton-step in T-direction\";
//   protected Boolean found \"flag for iteration success\";
// algorithm
//   i := 0;
//   error := 0;
//   T := Tguess;
//   found := false;
//   while i < 50 and not found loop
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     pros := 461.526 * (g.tau * g.gtau - g.g);
//     ds := pros - s;
//     relerr := ds / s;
//     if abs(relerr) < relds then
//       found := true;
//     end if;
//     dT := ds * T / (g.tau ^ 2.0 * g.gtautau * -461.526);
//     T := T - dT;
//     i := 1 + i;
//   end while;
//   if not found then
//     error := 1;
//   end if;
//   assert( error <> 1, \"error in inverse function tofps5: iteration failed\");
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofps5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT1 \"special function for specific enthalpy and specific entropy in region 1\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real[28] o \"vector of auxiliary variables\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau1 \"dimensionless temperature\";
//   protected Real g \"dimensionless Gibbs energy\";
//   protected Real gtau \"derivative of  dimensionless Gibbs energy w.r.t. tau\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function handsofpT1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   tau := 1386.0 / T;
//   pi1 := 7.1 + (-p) / 16530000.0;
//   tau1 := -1.222 + tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[3] * tau1;
//   o[5] := 1.0 / o[4];
//   o[6] := o[1] * o[2];
//   o[7] := o[1] * tau1;
//   o[8] := 1.0 / o[7];
//   o[9] := o[1] * o[2] * o[3];
//   o[10] := 1.0 / o[2];
//   o[11] := o[2] * tau1;
//   o[12] := 1.0 / o[11];
//   o[13] := o[2] * o[3];
//   o[14] := pi1 ^ 2.0;
//   o[15] := o[14] * pi1;
//   o[16] := o[14] ^ 2.0;
//   o[17] := o[16] ^ 2.0;
//   o[18] := o[16] * o[17] * pi1;
//   o[19] := o[14] * o[16];
//   o[20] := o[3] ^ 2.0;
//   o[21] := o[20] ^ 2.0;
//   o[22] := o[21] * o[3] * tau1;
//   o[23] := 1.0 / o[22];
//   o[24] := o[21] * o[3];
//   o[25] := 1.0 / o[24];
//   o[26] := o[1] * o[2] * o[21] * tau1;
//   o[27] := 1.0 / o[26];
//   o[28] := o[1] * o[3];
//   g := pi1 * (pi1 * (pi1 * (o[10] * (-3.1679644845054e-05 + o[2] * (-2.8270797985312e-06 + -8.5205128120103e-10 * o[6])) + pi1 * (o[12] * (-2.2425281908e-06 + (-6.5171222895601e-07 + -1.4341729937924e-13 * o[13]) * o[7]) + pi1 * (-4.0516996860117e-07 / o[3] + o[15] * (o[18] * (o[14] * (o[19] * (2.6335781662795e-23 / (o[1] * o[2] * o[21]) + pi1 * (-1.1947622640071e-23 * o[27] + pi1 * (1.8228094581404e-24 * o[25] + -9.3537087292458e-26 * o[23] * pi1))) + 1.4478307828521e-20 / (o[1] * o[2] * o[20] * o[3] * tau1)) + -6.8762131295531e-19 / (o[2] * o[20] * o[3] * tau1)) + (-1.2734301741641e-09 + -1.7424871230634e-10 * o[11]) / (o[1] * o[3] * tau1))))) + o[8] * (-0.00047184321073267 + o[7] * (-0.00030001780793026 + (4.7661393906987e-05 + o[1] * (-4.4141845330846e-06 + -7.2694996297594e-16 * o[9])) * tau1))) + o[5] * (0.00028319080123804 + o[1] * (-0.00060706301565874 + o[6] * (-0.018990068218419 + tau1 * (-0.032529748770505 + (-0.021841717175414 + -5.283835796993e-05 * o[1]) * tau1))))) + (0.14632971213167 + tau1 * (-0.84548187169114 + tau1 * (-3.756360367204 + tau1 * (3.3855169168385 + tau1 * (-0.95791963387872 + tau1 * (0.15772038513228 + (-0.016616417199501 + 0.00081214629983568 * tau1) * tau1)))))) / o[1];
//   gtau := pi1 * ((-0.00254871721114236 + o[1] * (0.00424944110961118 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) / o[28] + pi1 * (o[10] * (0.00141552963219801 + o[2] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[9]))) + pi1 * (o[12] * (0.000126718579380216 + -5.11230768720618e-09 * o[28]) + pi1 * ((1.1212640954e-05 + (1.30342445791202e-06 + -1.4341729937924e-12 * o[13]) * o[7]) / o[6] + pi1 * (3.24135974880936e-06 * o[5] + o[15] * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[11]) / o[13] + o[18] * (1.9941018075704e-17 / (o[1] * o[2] * o[20] * o[3]) + o[14] * (-4.48827542684151e-19 / o[21] + o[19] * (-1.00075970318621e-21 * o[27] + pi1 * (4.65957282962769e-22 * o[25] + pi1 * (-7.2912378325616e-23 * o[23] + 3.83502057899078e-24 * pi1 / (o[1] * o[21] * o[3])))))))))))) + o[8] * (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1)))));
//   h := 461.526 * T * tau * gtau;
//   s := 461.526 * (tau * gtau - g);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT2 \"function for isentropic specific enthalpy and specific entropy in region 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real[22] o \"vector of auxiliary variables\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau2 \"dimensionless temperature\";
//   protected Real g \"dimensionless Gibbs energy\";
//   protected Real gtau \"derivative of  dimensionless Gibbs energy w.r.t. tau\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function handsofpT2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   tau := 540.0 / T;
//   pi := p / 1000000.0;
//   tau2 := tau + -0.5;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := o[1] ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[3] * o[4] * o[5] * tau2;
//   o[7] := o[1] * o[3] * tau2;
//   o[8] := o[3] * o[4] * tau2;
//   o[9] := o[1] * o[5] * tau2;
//   o[10] := o[1] * o[3] * o[4];
//   o[11] := o[3] * o[4] * o[5];
//   o[12] := o[1] * o[3];
//   o[13] := pi ^ 2.0;
//   o[14] := o[13] ^ 2.0;
//   o[15] := o[13] * o[14];
//   o[16] := o[3] * o[5] * tau2;
//   o[17] := o[5] ^ 2.0;
//   o[18] := o[3] * o[5];
//   o[19] := o[1] * o[3] * o[4] * tau2;
//   o[20] := o[1] * o[5];
//   o[21] := tau ^ 2.0;
//   o[22] := o[21] ^ 2.0;
//   g := pi * (-0.0017731742473213 + tau2 * (-0.017834862292358 + tau2 * (-0.045996013696365 + (-0.057581259083432 + -0.05032527872793 * o[2]) * tau2)) + pi * (tau2 * (-3.3032641670203e-05 + (-0.00018948987516315 + o[1] * (-0.0039392777243355 + o[2] * (-0.043797295650573 + -2.6674547914087e-05 * o[6]))) * tau2) + pi * (2.0481737692309e-08 + (4.3870667284435e-07 + o[1] * (-3.227767723857e-05 + o[2] * (-0.0015033924542148 + -0.040668253562649 * o[6]))) * tau2 + pi * (tau2 * (-7.8847309559367e-10 + (1.2790717852285e-08 + 4.8225372718507e-07 * tau2) * tau2) + pi * (2.2922076337661e-06 * o[7] + pi * (o[2] * (-1.6714766451061e-11 + o[8] * (-0.0021171472321355 + -23.895741934104 * o[9])) + pi * (-5.905956432427e-18 + o[1] * (-1.2621808899101e-06 + -0.038946842435739 * o[10]) * o[4] * tau2 + pi * ((1.1256211360459e-11 + -8.2311340897998 * o[11]) * o[4] + pi * (1.9809712802088e-08 * o[8] + pi * ((1.0406965210174e-19 + o[12] * (-1.0234747095929e-13 + -1.0018179379511e-09 * o[3])) * o[3] + o[15] * ((-8.0882908646985e-11 + 0.10693031879409 * o[16]) * o[6] + o[13] * (-0.33662250574171 * o[17] * o[4] * o[5] * tau2 + o[13] * (o[18] * (8.9185845355421e-25 + o[19] * (3.0629316876232e-13 + -4.2002467698208e-06 * o[8])) + pi * (-5.9056029685639e-26 * o[16] + pi * (3.7826947613457e-06 * o[17] * o[3] * o[5] * tau2 + pi * (o[1] * (7.3087610595061e-29 + o[10] * (5.5414715350778e-17 + -9.436970724121e-07 * o[20])) * o[4] * o[5] * pi + -1.2768608934681e-15 * o[1] * o[17] * o[3] * tau2)))))))))))))))) + (-0.00560879118302 + tau * (0.07145273881455 + tau * (-0.4071049823928 + tau * (1.424081971444 + tau * (-4.38395111945 + tau * (-9.692768600217 + tau * (10.08665568018 + (-0.2840863260772 + 0.02126846353307 * tau) * tau) + log(pi))))))) / (o[22] * tau);
//   gtau := (0.0280439559151 + tau * (-0.2858109552582 + tau * (1.2213149471784 + tau * (-2.848163942888 + tau * (4.38395111945 + o[21] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * tau) * tau)))))) / (o[21] * o[22]) + pi * (-0.017834862292358 + tau2 * (-0.09199202739273 + (-0.172743777250296 + -0.30195167236758 * o[2]) * tau2) + pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[1] * (-0.015757110897342 + o[2] * (-0.306581069554011 + -0.000960283724907132 * o[6]))) * tau2 + pi * (4.3870667284435e-07 + o[1] * (-9.683303171571e-05 + o[2] * (-0.0090203547252888 + -1.42338887469272 * o[6])) + pi * (-7.8847309559367e-10 + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2 + pi * (1.60454534363627e-05 * o[12] + pi * (o[1] * (-5.0144299353183e-11 + o[8] * (-0.033874355714168 + -836.35096769364 * o[9])) + pi * (o[1] * (-1.38839897890111e-05 + -0.973671060893475 * o[10]) * o[4] + pi * ((9.0049690883672e-11 + -296.320827232793 * o[11]) * o[7] + pi * (2.57526266427144e-07 * o[3] * o[4] + pi * (o[2] * (4.1627860840696e-19 + o[12] * (-1.0234747095929e-12 + -1.40254511313154e-08 * o[3])) + o[15] * (o[11] * (-2.34560435076256e-09 + 5.3465159397045 * o[16]) + o[13] * (-19.1874828272775 * o[17] * o[4] * o[5] + o[13] * ((1.78371690710842e-23 + o[19] * (1.07202609066812e-11 + -0.000201611844951398 * o[8])) * o[9] + pi * (-1.24017662339842e-24 * o[18] + pi * (0.000200482822351322 * o[17] * o[3] * o[5] + pi * (-4.97975748452559e-14 * o[1] * o[17] * o[3] + (1.90027787547159e-27 + o[10] * (2.21658861403112e-15 + -5.47344301999018e-05 * o[20])) * o[4] * o[5] * pi * tau2))))))))))))))));
//   h := 461.526 * T * tau * gtau;
//   s := 461.526 * (tau * gtau - g);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT1 \"intermediate function for isentropic specific enthalpy in region 1\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real[13] o \"vector of auxiliary variables\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau1 \"dimensionless temperature\";
// algorithm
//   tau := 1386.0 / T;
//   pi1 := 7.1 + (-p) / 16530000.0;
//   assert( p > 611.657, \"IF97 medium function hofpT1  called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   tau1 := -1.222 + tau;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] * tau1;
//   o[3] := o[1] ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[1] * o[4];
//   o[6] := o[1] * o[3];
//   o[7] := o[3] * tau1;
//   o[8] := o[3] * o[4];
//   o[9] := pi1 ^ 2.0;
//   o[10] := o[9] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   o[12] := o[4] ^ 2.0;
//   o[13] := o[12] ^ 2.0;
//   h := 461.526 * T * tau * (pi1 * ((-0.00254871721114236 + o[1] * (0.00424944110961118 + (0.018990068218419 + (-0.021841717175414 + -0.00015851507390979 * o[1]) * o[1]) * o[6])) / o[5] + pi1 * ((0.00141552963219801 + o[3] * (4.7661393906987e-05 + o[1] * (-1.32425535992538e-05 + -1.2358149370591e-14 * o[1] * o[3] * o[4]))) / o[3] + pi1 * ((0.000126718579380216 + -5.11230768720618e-09 * o[5]) / o[7] + pi1 * ((1.1212640954e-05 + o[2] * (1.30342445791202e-06 + -1.4341729937924e-12 * o[8])) / o[6] + pi1 * (o[9] * pi1 * ((1.40077319158051e-08 + 1.04549227383804e-09 * o[7]) / o[8] + o[10] * o[11] * pi1 * (1.9941018075704e-17 / (o[4] * o[3] * o[12] * o[1]) + o[9] * (-4.48827542684151e-19 / o[13] + o[10] * o[9] * (pi1 * (4.65957282962769e-22 / (o[4] * o[13]) + pi1 * (3.83502057899078e-24 * pi1 / (o[4] * o[13] * o[1]) + -7.2912378325616e-23 / (tau1 * o[4] * o[13]))) + -1.00075970318621e-21 / (tau1 * o[3] * o[13] * o[1]))))) + 3.24135974880936e-06 / (tau1 * o[4])))))) + (-0.29265942426334 + tau1 * (0.84548187169114 + o[1] * (3.3855169168385 + tau1 * (-1.91583926775744 + tau1 * (0.47316115539684 + (-0.066465668798004 + 0.0040607314991784 * tau1) * tau1))))) / o[2]);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT2 \"intermediate function for isentropic specific enthalpy in region 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real[16] o \"vector of auxiliary variables\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau2 \"dimensionless temperature\";
// algorithm
//   assert( p > 611.657, \"IF97 medium function hofpT2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   pi := p / 1000000.0;
//   tau := 540.0 / T;
//   tau2 := -0.5 + tau;
//   o[1] := tau ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := tau2 ^ 2.0;
//   o[4] := o[3] * tau2;
//   o[5] := o[3] ^ 2.0;
//   o[6] := o[5] ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[5] * o[6] * o[7] * tau2;
//   o[9] := o[3] * o[5];
//   o[10] := o[5] * o[6] * tau2;
//   o[11] := o[3] * o[7] * tau2;
//   o[12] := o[3] * o[5] * o[6];
//   o[13] := o[5] * o[6] * o[7];
//   o[14] := pi ^ 2.0;
//   o[15] := o[14] ^ 2.0;
//   o[16] := o[7] ^ 2.0;
//   h := 461.526 * T * tau * ((0.0280439559151 + tau * (-0.2858109552582 + tau * (1.2213149471784 + tau * (-2.848163942888 + tau * (4.38395111945 + o[1] * (10.08665568018 + (-0.5681726521544 + 0.06380539059921 * tau) * tau)))))) / (o[2] * o[1]) + pi * (-0.017834862292358 + tau2 * (-0.09199202739273 + (-0.172743777250296 + -0.30195167236758 * o[4]) * tau2) + pi * (-3.3032641670203e-05 + (-0.0003789797503263 + o[3] * (-0.015757110897342 + o[4] * (-0.306581069554011 + -0.000960283724907132 * o[8]))) * tau2 + pi * (4.3870667284435e-07 + o[3] * (-9.683303171571e-05 + o[4] * (-0.0090203547252888 + -1.42338887469272 * o[8])) + pi * (-7.8847309559367e-10 + (2.558143570457e-08 + 1.44676118155521e-06 * tau2) * tau2 + pi * (1.60454534363627e-05 * o[9] + pi * ((-5.0144299353183e-11 + o[10] * (-0.033874355714168 + -836.35096769364 * o[11])) * o[3] + pi * ((-1.38839897890111e-05 + -0.973671060893475 * o[12]) * o[3] * o[6] + pi * ((9.0049690883672e-11 + -296.320827232793 * o[13]) * o[3] * o[5] * tau2 + pi * (2.57526266427144e-07 * o[5] * o[6] + pi * (o[4] * (4.1627860840696e-19 + (-1.0234747095929e-12 + -1.40254511313154e-08 * o[5]) * o[9]) + o[14] * o[15] * (o[13] * (-2.34560435076256e-09 + 5.3465159397045 * o[5] * o[7] * tau2) + o[14] * (-19.1874828272775 * o[16] * o[6] * o[7] + o[14] * (o[11] * (1.78371690710842e-23 + (1.07202609066812e-11 + -0.000201611844951398 * o[10]) * o[3] * o[5] * o[6] * tau2) + pi * (-1.24017662339842e-24 * o[5] * o[7] + pi * (0.000200482822351322 * o[16] * o[5] * o[7] + pi * (-4.97975748452559e-14 * o[16] * o[3] * o[5] + o[6] * o[7] * (1.90027787547159e-27 + o[12] * (2.21658861403112e-15 + -5.47344301999018e-05 * o[3] * o[7])) * pi * tau2)))))))))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boilingcurve_p \"properties on the boiling curve\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties bpro \"property record\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives\";
//   protected Real plim(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = min(p, 22063999.9999999) \"pressure limited to critical pressure - epsilon\";
//   protected Boolean region3boundary \"true if boundary between 2-phase and region 3\";
//   protected Real pv \"partial derivative of p w.r.t v\";
// algorithm
//   bpro.R := 461.526;
//   bpro.T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(plim);
//   bpro.dpT := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(bpro.T);
//   region3boundary := bpro.T > 623.15;
//   if not region3boundary then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, bpro.T);
//     bpro.d := p / (g.gpi * g.pi * bpro.T * bpro.R);
//     bpro.h := if p > plim then 2087546.84511715 else bpro.R * bpro.T * g.tau * g.gtau;
//     bpro.s := g.R * (g.tau * g.gtau - g.g);
//     bpro.cp := (-bpro.R) * g.tau ^ 2.0 * g.gtautau;
//     bpro.vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * bpro.R / p;
//     bpro.vp := g.gpipi * g.pi ^ 2.0 * bpro.R * bpro.T / p ^ 2.0;
//     bpro.pt := (g.tau * g.gtaupi - g.gpi) * p / (g.pi * g.gpipi * bpro.T);
//     bpro.pd := (-bpro.R) * bpro.T * g.gpi ^ 2.0 / g.gpipi;
//   else
//     bpro.d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(plim);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(bpro.d, bpro.T);
//     bpro.h := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p_R4b(plim);
//     bpro.s := f.R * (f.tau * f.ftau - f.f);
//     bpro.cv := bpro.R * (-f.tau ^ 2.0) * f.ftautau;
//     bpro.pt := bpro.R * bpro.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     bpro.pd := bpro.R * bpro.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pv := (-f.d ^ 2.0) * bpro.pd;
//     bpro.vp := 1.0 / pv;
//     bpro.vt := (-bpro.pt) / pv;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boilingcurve_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT \"boundary function for region boundary between regions 2 and 3 (input temperature)\"
//   input Real t(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   protected constant Real[5] n = {348.05185628969, -1.1671859879975, 0.0010192970039326, 572.54459862746, 13.91883977887};
// algorithm
//   p := 348051856.28969 + 1000000.0 * t * (-1.1671859879975 + 0.0010192970039326 * t);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp \"boundary function for region boundary between regions 2 and 3 (input pressure)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real t(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   protected constant Real[5] n = {348.05185628969, -1.1671859879975, 0.0010192970039326, 572.54459862746, 13.91883977887};
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function boundary23ofp called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   t := 572.54459862746 + (-13655.3327687308 + pi / 0.0010192970039326) ^ 0.5;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d1n \"density in region 1 as function of p and T\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau1 \"dimensionless temperature\";
//   protected Real gpi \"dimensionless Gibbs-derivative w.r.t. pi\";
//   protected Real[11] o \"auxiliary variables\";
// algorithm
//   pi := p / 16530000.0;
//   tau := 1386.0 / T;
//   pi1 := 7.1 - pi;
//   tau1 := tau + -1.222;
//   o[1] := tau1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := o[1] * o[2];
//   o[5] := o[1] * tau1;
//   o[6] := o[2] * tau1;
//   o[7] := pi1 ^ 2.0;
//   o[8] := o[7] ^ 2.0;
//   o[9] := o[8] ^ 2.0;
//   o[10] := o[3] ^ 2.0;
//   o[11] := o[10] ^ 2.0;
//   gpi := pi1 * (pi1 * ((9.5038934535162e-05 + o[2] * (8.4812393955936e-06 + 2.55615384360309e-09 * o[4])) / o[2] + pi1 * ((8.9701127632e-06 + (2.60684891582404e-06 + 5.7366919751696e-13 * o[2] * o[3]) * o[5]) / o[6] + pi1 * (2.02584984300585e-06 / o[3] + o[7] * pi1 * (o[8] * o[9] * pi1 * (o[7] * (o[7] * o[8] * (-7.63737668221055e-22 / (o[1] * o[11] * o[2]) + pi1 * (pi1 * (-5.65070932023524e-23 / (o[11] * o[3]) + 2.99318679335866e-24 * pi1 / (o[11] * o[3] * tau1)) + 3.5842867920213e-22 / (o[1] * o[11] * o[2] * tau1))) + -3.33001080055983e-19 / (o[1] * o[10] * o[2] * o[3] * tau1)) + 1.44400475720615e-17 / (o[10] * o[2] * o[3] * tau1)) + (1.01874413933128e-08 + 1.39398969845072e-09 * o[6]) / (o[1] * o[3] * tau1))))) + (0.00094368642146534 + o[5] * (0.00060003561586052 + (-9.5322787813974e-05 + o[1] * (8.8283690661692e-06 + 1.45389992595188e-15 * o[1] * o[2] * o[3])) * tau1)) / o[5]) + (-0.00028319080123804 + o[1] * (0.00060706301565874 + o[4] * (0.018990068218419 + tau1 * (0.032529748770505 + (0.021841717175414 + 5.283835796993e-05 * o[1]) * tau1)))) / (o[3] * tau1);
//   d := p / (gpi * pi * T * 461.526);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d1n;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d2n \"density in region 2  as function of p and T\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real tau \"dimensionless temperature\";
//   protected Real tau2 \"dimensionless temperature\";
//   protected Real gpi \"dimensionless Gibbs-derivative w.r.t. pi\";
//   protected Real[12] o \"auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   tau := 540.0 / T;
//   tau2 := tau + -0.5;
//   o[1] := tau2 ^ 2.0;
//   o[2] := o[1] * tau2;
//   o[3] := o[1] ^ 2.0;
//   o[4] := o[3] ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := o[3] * o[4] * o[5] * tau2;
//   o[7] := o[3] * o[4] * tau2;
//   o[8] := o[1] * o[3] * o[4];
//   o[9] := pi ^ 2.0;
//   o[10] := o[9] ^ 2.0;
//   o[11] := o[3] * o[5] * tau2;
//   o[12] := o[5] ^ 2.0;
//   gpi := (1.0 + pi * (-0.0017731742473213 + tau2 * (-0.017834862292358 + tau2 * (-0.045996013696365 + (-0.057581259083432 + -0.05032527872793 * o[2]) * tau2)) + pi * (tau2 * (-6.6065283340406e-05 + (-0.0003789797503263 + o[1] * (-0.007878555448671 + o[2] * (-0.087594591301146 + -5.3349095828174e-05 * o[6]))) * tau2) + pi * (6.1445213076927e-08 + (1.31612001853305e-06 + o[1] * (-9.683303171571e-05 + o[2] * (-0.0045101773626444 + -0.122004760687947 * o[6]))) * tau2 + pi * (tau2 * (-3.15389238237468e-09 + (5.116287140914e-08 + 1.92901490874028e-06 * tau2) * tau2) + pi * (1.14610381688305e-05 * o[1] * o[3] * tau2 + pi * (o[2] * (-1.00288598706366e-10 + o[7] * (-0.012702883392813 + -143.374451604624 * o[1] * o[5] * tau2)) + pi * (-4.1341695026989e-17 + o[1] * o[4] * (-8.8352662293707e-06 + -0.272627897050173 * o[8]) * tau2 + pi * (o[4] * (9.0049690883672e-11 + -65.8490727183984 * o[3] * o[4] * o[5]) + pi * (1.78287415218792e-07 * o[7] + pi * (o[3] * (1.0406965210174e-18 + o[1] * (-1.0234747095929e-12 + -1.0018179379511e-08 * o[3]) * o[3]) + o[10] * o[9] * ((-1.29412653835176e-09 + 1.71088510070544 * o[11]) * o[6] + o[9] * (-6.05920510335078 * o[12] * o[4] * o[5] * tau2 + o[9] * (o[3] * o[5] * (1.78371690710842e-23 + o[1] * o[3] * o[4] * (6.1258633752464e-12 + -8.4004935396416e-05 * o[7]) * tau2) + pi * (-1.24017662339842e-24 * o[11] + pi * (8.32192847496054e-05 * o[12] * o[3] * o[5] * tau2 + pi * (o[1] * o[4] * o[5] * (1.75410265428146e-27 + (1.32995316841867e-15 + -2.26487297378904e-05 * o[1] * o[5]) * o[8]) * pi + -2.93678005497663e-14 * o[1] * o[12] * o[3] * tau2))))))))))))))))) / pi;
//   d := p / (gpi * pi * T * 461.526);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d2n;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.dewcurve_p \"properties on the dew curve\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties bpro \"property record\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz function and dervatives\";
//   protected Real plim(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = min(p, 22063999.9999999) \"pressure limited to critical pressure - epsilon\";
//   protected Boolean region3boundary \"true if boundary between 2-phase and region 3\";
//   protected Real pv \"partial derivative of p w.r.t v\";
// algorithm
//   bpro.R := 461.526;
//   bpro.T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(plim);
//   bpro.dpT := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(bpro.T);
//   region3boundary := bpro.T > 623.15;
//   if not region3boundary then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, bpro.T);
//     bpro.d := p / (g.gpi * g.pi * bpro.T * bpro.R);
//     bpro.h := if p > plim then 2087546.84511715 else bpro.R * bpro.T * g.tau * g.gtau;
//     bpro.s := g.R * (g.tau * g.gtau - g.g);
//     bpro.cp := (-bpro.R) * g.tau ^ 2.0 * g.gtautau;
//     bpro.vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * bpro.R / p;
//     bpro.vp := g.gpipi * g.pi ^ 2.0 * bpro.R * bpro.T / p ^ 2.0;
//     bpro.pt := (g.tau * g.gtaupi - g.gpi) * p / (g.pi * g.gpipi * bpro.T);
//     bpro.pd := (-bpro.R) * bpro.T * g.gpi ^ 2.0 / g.gpipi;
//   else
//     bpro.d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(plim);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(bpro.d, bpro.T);
//     bpro.h := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p_R4b(plim);
//     bpro.s := f.R * (f.tau * f.ftau - f.f);
//     bpro.cv := bpro.R * (-f.tau ^ 2.0) * f.ftautau;
//     bpro.pt := bpro.R * bpro.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     bpro.pd := bpro.R * bpro.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pv := (-f.d ^ 2.0) * bpro.pd;
//     bpro.vp := 1.0 / pv;
//     bpro.vt := (-bpro.pt) / pv;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.dewcurve_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p \"liquid specific enthalpy on the boundary between regions 4 and 3 or 1\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
// algorithm
//   h := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p(p, ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boilingcurve_p(p));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p_R4b \"explicit approximation of liquid specific enthalpy on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   x := acos(p / 22064000.0);
//   h := 2087546.84511715 + 2087546.84511715 * x * (-0.494558695817518 + x * (1.3468000165649 + x * (-3.88938815320975 + x * (6.67938547288793 + x * (-6.75820241066552 + x * (3.5589197446565 + (-0.717981855497894 + -0.000115203294561782 * x) * x))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp1 \"explicit lower specific enthalpy limit of region 1 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   pi1 := 7.1 + (-p) / 16530000.0;
//   assert( p > 611.657, \"IF97 medium function hlowerofp1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   o[1] := pi1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   h := 110906.487302526 + 639675.036 * pi1 * (-0.022914084306349 + pi1 * (-0.00017146768241932 + pi1 * (-4.18695814670391e-06 + pi1 * (-2.41630417490008e-07 + pi1 * (1.73545618580828e-11 + o[1] * pi1 * (8.43755552264362e-14 + o[2] * o[3] * pi1 * (5.35429206228374e-35 + o[1] * (-8.12140581014818e-38 + o[1] * o[2] * (-1.43870236842915e-44 + pi1 * (1.73894459122923e-45 + (-7.06381628462585e-47 + 9.64504638626269e-49 * pi1) * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp2 \"explicit lower specific enthalpy limit of region 2 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real q1 \"auxiliary variable\";
//   protected Real q2 \"auxiliary variable\";
//   protected Real[18] o \"vector of auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function hlowerofp2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   q1 := 572.54459862746 + 31.3220101646784 * (-13.91883977887 + pi) ^ 0.5;
//   q2 := -0.5 + 540.0 / q1;
//   o[1] := q1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   o[4] := pi ^ 2.0;
//   o[5] := o[4] ^ 2.0;
//   o[6] := q2 ^ 2.0;
//   o[7] := o[6] ^ 2.0;
//   o[8] := o[6] * o[7];
//   o[9] := o[5] ^ 2.0;
//   o[10] := o[7] ^ 2.0;
//   o[11] := o[9] ^ 2.0;
//   o[12] := o[10] ^ 2.0;
//   o[13] := o[12] ^ 2.0;
//   o[14] := o[7] * q2;
//   o[15] := o[6] * q2;
//   o[16] := o[10] * o[6];
//   o[17] := o[13] * o[6];
//   o[18] := o[13] * o[6] * q2;
//   h := (4636975733.03507 + 3.74686560065793 * o[2] + 3.57966647812489e-06 * o[1] * o[2] + 2.81881548488163e-13 * o[3] + -76465233.2452145 * q1 + -0.00450789338787835 * o[2] * q1 + -1.55131504410292e-09 * o[1] * o[2] * q1 + o[1] * (2513837.07870341 + -4781981.98764471 * o[10] * o[11] * o[12] * o[13] * o[4] + 49.9651389369988 * o[11] * o[12] * o[13] * o[4] * o[5] * o[7] + o[15] * o[4] * (1.03746636552761e-13 + -0.00349547959376899 * o[16] + -2.55074501962569e-07 * o[8]) * o[9] + (-242662.235426958 * o[10] * o[12] + -3.46022402653609 * o[16]) * o[4] * o[5] * pi + o[4] * (0.109336249381227 + -2248.08924686956 * o[14] + -354742.725841972 * o[17] + -24.1331193696374 * o[6]) * pi + -3.09081828396912e-19 * o[11] * o[12] * o[5] * o[7] * pi + -1.24107527851371e-08 * o[11] * o[13] * o[4] * o[5] * o[6] * o[7] * pi + 3.99891272904219 * o[5] * o[8] * pi + 0.0641817365250892 * o[10] * o[7] * o[9] * pi + pi * (-4444.87643334512 + -75253.6156722047 * o[14] + -43051.9020511789 * o[6] + -22926.6247146068 * q2) + o[4] * (-8.23252840892034 + -3927.0508365636 * o[15] + -239.325789467604 * o[18] + -76407.3727417716 * o[8] + -94.4508644545118 * q2) + 0.360567666582363 * o[5] * (-0.0161221195808321 + q2) * (0.0338039844460968 + q2) + o[11] * (-0.000584580992538624 * o[10] * o[12] * o[7] + 1332480.30241755 * o[12] * o[13] * q2) + o[9] * (-73850273.6990986 * o[18] + 2.24425477627799e-05 * o[6] * o[7] * q2) + o[4] * o[5] * (-208438767.026518 * o[17] + -1.24971648677697e-05 * o[6] + -8442.30378348203 * o[10] * o[6] * o[7] * q2) + o[11] * (o[9] * (4.73594929247646e-22 * o[10] * o[12] * q2 + -13.6411358215175 * o[10] * o[12] * o[13] * q2 + 5.52427169406836e-10 * o[13] * o[6] * o[7] * q2) + o[5] * (2.67174673301715e-06 * o[17] + 4.44545133805865e-18 * o[12] * o[6] * q2 + -50.2465185106411 * o[10] * o[13] * o[6] * o[7] * q2)))) / o[1];
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp5 \"explicit lower specific enthalpy limit of region 5 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function hlowerofp5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   h := 4160681.29030826 + 461526.0 * pi * (-0.00979043490246092 + (-2.03245575263501e-05 + 3.36540214679088e-07 * pi) * pi);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp1 \"explicit upper specific enthalpy limit of region 1 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   pi1 := 7.1 + (-p) / 16530000.0;
//   assert( p > 611.657, \"IF97 medium function hupperofp1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   o[1] := pi1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   h := 1553751.00989561 + 639675.036 * pi1 * (-0.00141131225285294 + pi1 * (0.00143759406818289 + pi1 * (0.000125338925082983 + pi1 * (1.23617764767172e-05 + pi1 * (3.17834967400818e-06 + o[1] * pi1 * (1.46754947271665e-08 + o[2] * o[3] * pi1 * (1.86779322717506e-17 + o[1] * (-4.18568363667416e-19 + o[1] * o[2] * (-9.19148577641497e-22 + pi1 * (4.27026404402408e-22 + (-6.66749357417962e-23 + 3.49930466305574e-24 * pi1) * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp2 \"explicit upper specific enthalpy limit of region 2 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[2] o \"vector of auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function hupperofp2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   o[1] := pi ^ 2.0;
//   o[2] := o[1] ^ 3.0;
//   h := 4160663.37647071 + pi * (-4518.48617188327 + pi * (-8.53409968320258 + pi * (0.109090430596056 + pi * (-0.000172486052272327 + pi * (4.2261295097284e-15 + pi * (-1.27295130636232e-10 + pi * (-3.79407294691742e-25 + pi * (7.56960433802525e-23 + pi * (7.16825117265975e-32 + pi * (3.37267475986401e-21 + (-7.5656940729795e-74 + o[1] * (-8.00969737237617e-134 + (1.6746290980312e-65 + pi * (-3.71600586812966e-69 + pi * (8.06630589170884e-129 + (-1.76117969553159e-103 + 1.88543121025106e-84 * pi) * pi))) * o[1])) * o[2]))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp5 \"explicit upper specific enthalpy limit of region 5 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function hupperofp5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   h := 7376980.41924296 + 461526.0 * pi * (-0.000489898813722568 + (-5.01510211858761e-08 + 7.5006972718273e-08 * pi) * pi);
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p \"vapour specific enthalpy on the boundary between regions 4 and 3 or 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
// algorithm
//   h := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p(p, ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.dewcurve_p(p));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p_R4b \"explicit approximation of vapour specific enthalpy on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   x := acos(p / 22064000.0);
//   h := 2087546.84511715 + 2087546.84511715 * x * (0.488015371865569 + x * (0.207967074625069 + x * (-6.08412269842162 + x * (25.0888760229353 + x * (-48.3821518026952 + x * (45.6648916483321 + (-16.9855544296155 + 0.000661693646005769 * x) * x))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p \"Inline after index reduction\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties bpro \"property record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
// algorithm
//   h := bpro.h;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p_der \"derivative function for the specific enthalpy along the phase boundary\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties bpro \"property record\";
//   input Real p_der \"derivative of pressure\";
//   output Real h_der \"time derivative of specific enthalpy along the phase boundary\";
// algorithm
//   h_der := (1.0 / bpro.d - bpro.T * bpro.vt) * p_der + p_der * bpro.cp / bpro.dpT;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hvl_p_der;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT \"return the current region (valid values: 1,2,3,5) in IF97, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature (K)\";
//   input Integer mode = 0 \"mode: 0 means check, otherwise assume region=mode\";
//   output Integer region \"region (valid values: 1,2,3,5) in IF97, region 4 is impossible!\";
// algorithm
//   if mode <> 0 then
//     region := mode;
//   else
//     if p < 16529200.0 then
//       if T > 1073.15 then
//         region := 5;
//       elseif T > ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p) then
//         region := 2;
//       else
//         region := 1;
//       end if;
//     else
//       if T < 623.15 then
//         region := 1;
//       elseif T < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.boundary23ofp(p) then
//         region := 3;
//       else
//         region := 2;
//       end if;
//     end if;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ph \"return the current region (valid values: 1,2,3,4,5) in IF97 for given pressure and specific enthalpy\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   input Integer phase = 0 \"phase: 2 for two-phase, 1 for one phase, 0 if not known\";
//   input Integer mode = 0 \"mode: 0 means check, otherwise assume region=mode\";
//   output Integer region \"region (valid values: 1,2,3,4,5) in IF97\";
//   protected Boolean hsubcrit;
//   protected Real Ttest(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0);
//   protected Real hl(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"bubble enthalpy\";
//   protected Real hv(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"dew enthalpy\";
// algorithm
//   if mode <> 0 then
//     region := mode;
//   else
//     hl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p(p);
//     hv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p(p);
//     if phase == 2 then
//       region := 4;
//     else
//       if p < 611.657 or p > 100000000.0 or h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp1(p) or p < 10000000.0 and h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp5(p) or p >= 10000000.0 and h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp2(p) then
//         region := -1;
//       else
//         hsubcrit := h < 2087546.84511715;
//         if p < 16529200.0 then
//           if hsubcrit then
//             if phase == 1 then
//               region := 1;
//             else
//               if h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT1(p, ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p)) then
//                 region := 1;
//               else
//                 region := 4;
//               end if;
//             end if;
//           else
//             if h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp5(p) then
//               if p < 10000000.0 and h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp5(p) then
//                 region := 5;
//               else
//                 region := -2;
//               end if;
//             else
//               if phase == 1 then
//                 region := 2;
//               else
//                 if h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.hofpT2(p, ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p)) then
//                   region := 2;
//                 else
//                   region := 4;
//                 end if;
//               end if;
//             end if;
//           end if;
//         else
//           if hsubcrit then
//             if h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hupperofp1(p) then
//               region := 1;
//             else
//               if h < hl or p > 22064000.0 then
//                 region := 3;
//               else
//                 region := 4;
//               end if;
//             end if;
//           else
//             if h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hlowerofp2(p) then
//               region := 2;
//             else
//               if h > hv or p > 22064000.0 then
//                 region := 3;
//               else
//                 region := 4;
//               end if;
//             end if;
//           end if;
//         end if;
//       end if;
//     end if;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ps \"return the current region (valid values: 1,2,3,4,5) in IF97 for given pressure and specific entropy\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   input Integer phase = 0 \"phase: 2 for two-phase, 1 for one phase, 0 if unknown\";
//   input Integer mode = 0 \"mode: 0 means check, otherwise assume region=mode\";
//   output Integer region \"region (valid values: 1,2,3,4,5) in IF97\";
//   protected Boolean ssubcrit;
//   protected Real Ttest(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0);
//   protected Real sl(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"bubble entropy\";
//   protected Real sv(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"dew entropy\";
// algorithm
//   if mode <> 0 then
//     region := mode;
//   else
//     sl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p(p);
//     sv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p(p);
//     if phase == 2 or phase == 0 and s > sl and s < sv and p < 22064000.0 then
//       region := 4;
//     else
//       region := 0;
//       if p < 611.657 then
//         region := -2;
//       end if;
//       if p > 100000000.0 then
//         region := -3;
//       end if;
//       if p < 10000000.0 and s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp5(p) then
//         region := -5;
//       end if;
//       if p >= 10000000.0 and s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp2(p) then
//         region := -6;
//       end if;
//       if region < 0 then
//         assert( false, \"region computation from p and s failed: function called outside the legal region\");
//       else
//         ssubcrit := s < 4412.02148223476;
//         if p < 16529200.0 then
//           if ssubcrit then
//             region := 1;
//           else
//             if s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp5(p) then
//               if p < 10000000.0 and s < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp5(p) then
//                 region := 5;
//               else
//                 region := -1;
//               end if;
//             else
//               region := 2;
//             end if;
//           end if;
//         else
//           if ssubcrit then
//             if s < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp1(p) then
//               region := 1;
//             else
//               if s < sl or p > 22064000.0 then
//                 region := 3;
//               else
//                 region := 4;
//               end if;
//             end if;
//           else
//             if s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp2(p) then
//               region := 2;
//             else
//               if s > sv or p > 22064000.0 then
//                 region := 3;
//               else
//                 region := 4;
//               end if;
//             end if;
//           end if;
//         end if;
//       end if;
//     end if;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_T \"density of saturated water\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density of water at the boiling point\";
//   protected Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"saturation pressure\";
// algorithm
//   p := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat(T);
//   if T < 623.15 then
//     d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d1n(p, T);
//   elseif T < 647.096 then
//     d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(p);
//   else
//     d := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_T;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b \"explicit approximation of liquid density on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dl(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"liquid density\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   if p < 22064000.0 then
//     x := acos(p / 22064000.0);
//     dl := 322.0 + 322.0 * x * (1.90322407909482 + x * (-2.53148618024011 + x * (-8.19144932384355 + x * (94.3419611677839 + x * (-369.367683362338 + x * (796.662791059829 + x * (-994.53853836007 + x * (673.25811770216 + (-191.430773364052 + 0.00052536560808895 * x) * x))))))));
//   else
//     dl := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_T \"density of saturated vapour\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density of steam at the condensation point\";
//   protected Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"saturation pressure\";
// algorithm
//   p := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.psat(T);
//   if T < 623.15 then
//     d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.d2n(p, T);
//   elseif T < 647.096 then
//     d := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(p);
//   else
//     d := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_T;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b \"explicit approximation of vapour density on the boundary between regions 4 and 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real dv(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"vapour density\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   if p < 22064000.0 then
//     x := acos(p / 22064000.0);
//     dv := 322.0 + 322.0 * x * (-1.84638508033626 + x * (-1.14478727188785 + x * (59.1870220307656 + x * (-403.539143181161 + x * (1437.20072453324 + x * (-3015.85354030752 + x * (3740.57903486701 + x * (-2537.3758172539 + (725.876197580378 + -0.00111511116583323 * x) * x))))))));
//   else
//     dv := 322.0;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p \"liquid specific entropy on the boundary between regions 4 and 3 or 1\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"saturation temperature\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
// algorithm
//   if p < 16529200.0 then
//     Tsat := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//     (h, s) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT1(p, Tsat);
//   elseif p < 22064000.0 then
//     s := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p_R4b(p);
//   else
//     s := 4412.02148223476;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p_R4b \"explicit approximation of liquid specific entropy on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real x \"auxiliary variable\";
// algorithm
//   x := acos(p / 22064000.0);
//   s := 4412.02148223476 + 4412.02148223476 * x * (-0.361606922456481 + x * (0.996277863048665 + x * (-2.85955481441711 + x * (4.90630115955533 + x * (-4.97409230961421 + x * (2.62496516992045 + (-0.531995437529902 + -8.06449743188064e-05 * x) * x))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp2 \"explicit lower specific entropy limit of region 2 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real q1 \"auxiliary variable\";
//   protected Real q2 \"auxiliary variable\";
//   protected Real[40] o \"vector of auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function slowerofp2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   q1 := 572.54459862746 + 31.3220101646784 * (-13.91883977887 + pi) ^ 0.5;
//   q2 := -0.5 + 540.0 / q1;
//   o[1] := pi ^ 2.0;
//   o[2] := o[1] * pi;
//   o[3] := o[1] ^ 2.0;
//   o[4] := o[1] * o[3] * pi;
//   o[5] := q1 ^ 2.0;
//   o[6] := o[5] * q1;
//   o[7] := 1.0 / o[5];
//   o[8] := 1.0 / q1;
//   o[9] := o[5] ^ 2.0;
//   o[10] := o[9] * q1;
//   o[11] := q2 ^ 2.0;
//   o[12] := o[11] * q2;
//   o[13] := o[1] * o[3];
//   o[14] := o[11] ^ 2.0;
//   o[15] := o[3] ^ 2.0;
//   o[16] := o[1] * o[15];
//   o[17] := o[11] * o[14];
//   o[18] := o[11] * o[14] * q2;
//   o[19] := o[3] * pi;
//   o[20] := o[14] ^ 2.0;
//   o[21] := o[11] * o[20];
//   o[22] := o[15] * pi;
//   o[23] := o[14] * o[20] * q2;
//   o[24] := o[20] ^ 2.0;
//   o[25] := o[15] ^ 2.0;
//   o[26] := o[25] * o[3];
//   o[27] := o[14] * o[24];
//   o[28] := o[25] * o[3] * pi;
//   o[29] := o[20] * o[24] * q2;
//   o[30] := o[15] * o[25];
//   o[31] := o[24] ^ 2.0;
//   o[32] := o[11] * o[31] * q2;
//   o[33] := o[14] * o[31];
//   o[34] := o[1] * o[25] * o[3] * pi;
//   o[35] := o[11] * o[14] * o[31] * q2;
//   o[36] := o[1] * o[25] * o[3];
//   o[37] := o[1] * o[25];
//   o[38] := o[20] * o[24] * o[31] * q2;
//   o[39] := o[14] * q2;
//   o[40] := o[11] * o[31];
//   s := 4473.46472098375 + 461.526 * (1.22151969114703e-16 * o[10] + 0.00018948987516315 * o[1] * o[11] + 1.6714766451061e-11 * o[12] * o[13] + 0.0039392777243355 * o[1] * o[14] + -1.0406965210174e-19 * o[14] * o[16] + 0.043797295650573 * o[1] * o[18] + -2.2922076337661e-06 * o[18] * o[19] + -2.0481737692309e-08 * o[2] + 3.227767723857e-05 * o[12] * o[2] + 0.0015033924542148 * o[17] * o[2] + -1.1256211360459e-11 * o[15] * o[20] + 1.0018179379511e-09 * o[11] * o[14] * o[16] * o[20] + 1.0234747095929e-13 * o[16] * o[21] + -1.9809712802088e-08 * o[22] * o[23] + 0.0021171472321355 * o[13] * o[24] + -8.9185845355421e-25 * o[26] * o[27] + -1.2790717852285e-08 * o[11] * o[3] + -4.8225372718507e-07 * o[12] * o[3] + -7.3087610595061e-29 * o[11] * o[20] * o[24] * o[30] + -0.10693031879409 * o[11] * o[24] * o[25] * o[31] + 4.2002467698208e-06 * o[24] * o[26] * o[31] + -5.5414715350778e-17 * o[20] * o[30] * o[31] + 9.436970724121e-07 * o[11] * o[20] * o[24] * o[30] * o[31] + 23.895741934104 * o[13] * o[32] + 0.040668253562649 * o[2] * o[32] + -3.0629316876232e-13 * o[26] * o[32] + 2.6674547914087e-05 * o[1] * o[33] + 8.2311340897998 * o[15] * o[33] + 1.2768608934681e-15 * o[34] * o[35] + 0.33662250574171 * o[37] * o[38] + 5.905956432427e-18 * o[4] + 0.038946842435739 * o[29] * o[4] + -4.88368302964335e-06 * o[5] + -3349017.34177133 / o[6] + 2.58538448402683e-09 * o[6] + 82839.5726841115 * o[7] + -5446.7940672972 * o[8] + -8.40318337484194e-13 * o[9] + 0.0017731742473213 * pi + 0.045996013696365 * o[11] * pi + 0.057581259083432 * o[12] * pi + 0.05032527872793 * o[17] * pi + o[8] * pi * (9.63082563787332 + -0.008917431146179 * q1) + 0.00811842799898148 * q1 + 3.3032641670203e-05 * o[1] * q2 + -4.3870667284435e-07 * o[2] * q2 + 8.0882908646985e-11 * o[14] * o[20] * o[24] * o[25] * q2 + 5.9056029685639e-26 * o[14] * o[24] * o[28] * q2 + 7.8847309559367e-10 * o[3] * q2 + -3.7826947613457e-06 * o[14] * o[24] * o[31] * o[36] * q2 + 1.2621808899101e-06 * o[11] * o[20] * o[4] * q2 + 540.0 * o[8] * (10.08665568018 + -3.3032641670203e-05 * o[1] + -6.2245802776607e-15 * o[10] + -0.015757110897342 * o[1] * o[12] + -5.0144299353183e-11 * o[11] * o[13] + 4.1627860840696e-19 * o[12] * o[16] + -0.306581069554011 * o[1] * o[17] + 9.0049690883672e-11 * o[15] * o[18] + 1.60454534363627e-05 * o[17] * o[19] + 4.3870667284435e-07 * o[2] + -9.683303171571e-05 * o[11] * o[2] + 2.57526266427144e-07 * o[14] * o[20] * o[22] + -1.40254511313154e-08 * o[16] * o[23] + -2.34560435076256e-09 * o[14] * o[20] * o[24] * o[25] + -1.24017662339842e-24 * o[27] * o[28] + -7.8847309559367e-10 * o[3] + 1.44676118155521e-06 * o[11] * o[3] + 1.90027787547159e-27 * o[29] * o[30] + -0.000960283724907132 * o[1] * o[32] + -296.320827232793 * o[15] * o[32] + -4.97975748452559e-14 * o[11] * o[14] * o[31] * o[34] + 2.21658861403112e-15 * o[30] * o[35] + 0.000200482822351322 * o[14] * o[24] * o[31] * o[36] + -19.1874828272775 * o[20] * o[24] * o[31] * o[37] + -5.47344301999018e-05 * o[30] * o[38] + -0.0090203547252888 * o[2] * o[39] + -1.38839897890111e-05 * o[21] * o[4] + -0.973671060893475 * o[20] * o[24] * o[4] + -836.35096769364 * o[13] * o[40] + -1.42338887469272 * o[2] * o[40] + 1.07202609066812e-11 * o[26] * o[40] + 1.50341259240398e-05 * o[5] + -1.8087714924605e-08 * o[6] + 18605.6518987296 * o[7] + -306.813232163376 * o[8] + 1.43632471334824e-11 * o[9] + 1.13103675106207e-18 * o[5] * o[9] + -0.017834862292358 * pi + -0.172743777250296 * o[11] * pi + -0.30195167236758 * o[39] * pi + o[8] * pi * (-49.6756947920742 + 0.045996013696365 * q1) + -0.0003789797503263 * o[1] * q2 + -0.033874355714168 * o[11] * o[13] * o[14] * o[20] * q2 + -1.0234747095929e-12 * o[16] * o[20] * q2 + 1.78371690710842e-23 * o[11] * o[24] * o[26] * q2 + 2.558143570457e-08 * o[3] * q2 + 5.3465159397045 * o[24] * o[25] * o[31] * q2 + -0.000201611844951398 * o[11] * o[14] * o[20] * o[26] * o[31] * q2) - log(pi));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp5 \"explicit lower specific entropy limit of region 5 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function slowerofp5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   s := 8505.74926072812 + 461.526 * (pi * (-0.00730911805860036 + (-1.68348072093888e-05 + 2.09066899426354e-07 * pi) * pi) - log(pi));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.slowerofp5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp1 \"explicit upper specific entropy limit of region 1 as function of pressure (meets region 4 saturation pressure curve at 623.15 K)\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pi1 \"dimensionless pressure\";
//   protected Real[3] o \"vector of auxiliary variables\";
// algorithm
//   pi1 := 7.1 + (-p) / 16530000.0;
//   assert( p > 611.657, \"IF97 medium function supperofp1 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   o[1] := pi1 ^ 2.0;
//   o[2] := o[1] ^ 2.0;
//   o[3] := o[2] ^ 2.0;
//   s := 3361.3696336621 + 461.526 * pi1 * (0.070602197808399 + pi1 * (0.0039229343647356 + pi1 * (0.000313009170788845 + pi1 * (3.03619398631619e-05 + pi1 * (7.46739440045781e-06 + o[1] * pi1 * (3.40562176858676e-08 + o[2] * o[3] * pi1 * (4.21886233340801e-17 + o[1] * (-9.44504571473549e-19 + o[1] * o[2] * (-2.06859611434475e-21 + pi1 * (9.60758422254987e-22 + (-1.49967810652241e-22 + 7.86863124555783e-24 * pi1) * pi1))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp1;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp2 \"explicit upper specific entropy limit of region 2 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pi \"dimensionless pressure\";
//   protected Real[2] o \"vector of auxiliary variables\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function supperofp2 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   o[1] := pi ^ 2.0;
//   o[2] := o[1] ^ 3.0;
//   s := 8505.73409708683 + -461.526 * log(pi) + pi * (-3.36563543302584 + pi * (-0.00790283552165338 + pi * (9.15558349202221e-05 + pi * (-1.59634706513e-07 + pi * (3.93449217595397e-18 + pi * (-1.18367426347994e-13 + pi * (2.72575244843195e-15 + pi * (7.04803892603536e-26 + pi * (6.67637687381772e-35 + pi * (3.1377970315132e-24 + (-7.04844558482265e-77 + o[1] * (-7.46289531275314e-137 + (1.55998511254305e-68 + pi * (-3.46166288915497e-72 + pi * (7.51557618628583e-132 + (-1.64086406733212e-106 + 1.75648443097063e-87 * pi) * pi))) * o[1])) * o[2] ^ 2.0))))))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp2;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp5 \"explicit upper specific entropy limit of region 5 as function of pressure\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pi \"dimensionless pressure\";
// algorithm
//   pi := p / 1000000.0;
//   assert( p > 611.657, \"IF97 medium function supperofp5 called with too low pressure
// p = \" + String(p, 0, true, 6) + \" Pa <= \" + String(611.657, 0, true, 6) + \" Pa (triple point pressure)\");
//   s := 10489.6336095181 + 461.526 * (pi * (-0.000656650220627603 + (-1.96109739782049e-08 + 2.19979537113031e-08 * pi) * pi) - log(pi));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.supperofp5;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p \"vapour specific entropy on the boundary between regions 4 and 3 or 2\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"saturation temperature\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
// algorithm
//   if p < 16529200.0 then
//     Tsat := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//     (h, s) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Isentropic.handsofpT2(p, Tsat);
//   elseif p < 22064000.0 then
//     s := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p_R4b(p);
//   else
//     s := 4412.02148223476;
//   end if;
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p;
// 
// function ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p_R4b \"explicit approximation of vapour specific entropy on the boundary between regions 4 and 3\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\");
//   protected Real x \"auxiliary variable\";
// algorithm
//   x := acos(p / 22064000.0);
//   s := 4412.02148223476 + 4412.02148223476 * x * (0.356826418266743 + x * (0.164245702781549 + x * (-4.42535037742245 + x * (18.3244778599831 + x * (-35.3386316259487 + x * (33.3618102581628 + (-12.4087114905858 + 0.000481004983410923 * x) * x))))));
// end ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p_R4b;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtaupi;
//   output GibbsDerivs res;
// end ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd\"
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") pi;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") g;
//   input Real(unit=\"1\") gpi;
//   input Real(unit=\"1\") gpipi;
//   input Real(unit=\"1\") gpipipi;
//   input Real(unit=\"1\") gtau;
//   input Real(unit=\"1\") gtautau;
//   input Real(unit=\"1\") gtautautau;
//   input Real(unit=\"1\") gpitau;
//   input Real(unit=\"1\") gpitautau;
//   input Real(unit=\"1\") gpipitau;
//   output GibbsDerivs3rd res;
// end ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") fdeltatau;
//   output HelmholtzDerivs res;
// end ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(unit=\"1\") delta;
//   input Real(unit=\"1\") tau;
//   input Real(unit=\"1\") f;
//   input Real(unit=\"1\") fdelta;
//   input Real(unit=\"1\") fdeltadelta;
//   input Real(unit=\"1\") fdeltadeltadelta;
//   input Real(unit=\"1\") ftau;
//   input Real(unit=\"1\") ftautau;
//   input Real(unit=\"1\") ftautautau;
//   input Real(unit=\"1\") fdeltatau;
//   input Real(unit=\"1\") fdeltadeltatau;
//   input Real(unit=\"1\") fdeltatautau;
//   output HelmholtzDerivs3rd res;
// end ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties\"
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cv;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") dpT;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") pt;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   input Real(unit=\"m3/(kg.K)\") vt;
//   input Real(unit=\"m3/(kg.Pa)\") vp;
//   output IF97PhaseBoundaryProperties res;
// end ThermoSysPro.Properties.WaterSteam.Common.IF97PhaseBoundaryProperties;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cv;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") pt;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   output PhaseBoundaryProperties res;
// end ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") dpT;
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) d;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cv;
//   input Real(quantity=\"DerPressureByTemperature\", unit=\"Pa/K\") pt;
//   input Real(quantity=\"DerPressureByDensity\", unit=\"Pa.m3/kg\") pd;
//   input Real cvt;
//   input Real cpt;
//   input Real ptt;
//   input Real pdd;
//   input Real ptd;
//   input Real vt;
//   input Real vp;
//   input Real vtt;
//   input Real vpp;
//   input Real vtp;
//   output PhaseBoundaryProperties3rd res;
// end ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT\"
//   input Real(min=1e-09, max=100000.0, nominal=998.0, quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\") d;
//   input Real(min=-1000000.0, max=100000000.0, nominal=1000000.0, start=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(min=-100000000.0, max=100000000.0, nominal=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(min=-1000000.0, max=1000000.0, nominal=1000.0, quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(min=1e-09, max=1e+60, nominal=1000.0, quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(unit=\"kg/(m3.K)\") ddTp;
//   input Real(unit=\"s2/m2\") ddpT;
//   input Real(unit=\"J.m.s2/kg\") dupT;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") duTp;
//   input Real(quantity=\"Mass fraction\", unit=\"1\") x;
//   output ThermoProperties_pT res;
// end ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph\"
//   input Real(min=200.0, max=6000.0, nominal=320.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(min=1e-09, max=100000.0, nominal=998.0, quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\") d;
//   input Real(min=-100000000.0, max=100000000.0, nominal=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(min=-1000000.0, max=1000000.0, nominal=1000.0, quantity=\"SpecificEntropy\", unit=\"J/(kg.K)\") s;
//   input Real(min=1e-09, max=1e+60, nominal=1000.0, quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(unit=\"kg.s2/m5\") ddhp;
//   input Real(unit=\"s2/m2\") ddph;
//   input Real(unit=\"m3/kg\") duph;
//   input Real(unit=\"1\") duhp;
//   input Real(quantity=\"Mass fraction\", unit=\"1\") x;
//   output ThermoProperties_ph res;
// end ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps \"Automatically generated record constructor for ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps\"
//   input Real(min=200.0, max=6000.0, nominal=320.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(min=1e-09, max=100000.0, nominal=998.0, quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\") d;
//   input Real(min=-100000000.0, max=100000000.0, nominal=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") u;
//   input Real(min=-1000000.0, max=100000000.0, nominal=1000000.0, start=1000000.0, quantity=\"SpecificEnergy\", unit=\"J/kg\") h;
//   input Real(min=1e-09, max=1e+60, nominal=1000.0, quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp;
//   input Real(quantity=\"DerDensityByEntropy\", unit=\"kg2.K/(m3.J)\") ddsp;
//   input Real(unit=\"s2/m2\") ddps;
//   input Real(quantity=\"Mass fraction\", unit=\"1\") x;
//   output ThermoProperties_ps res;
// end ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.cv2Phase
//   input ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties liq;
//   input ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties vap;
//   input Real x \"Vapor mass fraction\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0);
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0);
//   output Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\");
//   protected Real dpT;
//   protected Real dxv;
//   protected Real dvT;
//   protected Real dvTl;
//   protected Real dvTv;
//   protected Real duTl;
//   protected Real duTv;
//   protected Real dxt;
// algorithm
//   dxv := if liq.d <> vap.d then liq.d * vap.d / (liq.d - vap.d) else 0.0;
//   dpT := (vap.s - liq.s) * dxv;
//   dvTl := (liq.pt - dpT) / (liq.d ^ 2.0 * liq.pd);
//   dvTv := (vap.pt - dpT) / (vap.d ^ 2.0 * vap.pd);
//   dxt := (-dxv) * (dvTl + x * (dvTv - dvTl));
//   duTl := liq.cv + (T * liq.pt - p) * dvTl;
//   duTv := vap.cv + (T * vap.pt - p) * dvTv;
//   cv := duTl + x * (duTv - duTl) + dxt * (vap.u - liq.u);
// end ThermoSysPro.Properties.WaterSteam.Common.cv2Phase;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps \"calulate phase boundary property record from dimensionless Gibbs function\"
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless derivatives of Gibbs function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties sat \"phase boundary properties\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected Real vp \"derivative of specific volume w.r.t. pressure\";
// algorithm
//   sat.d := g.p / (g.gpi * g.pi * g.T * g.R);
//   sat.h := g.R * g.T * g.tau * g.gtau;
//   sat.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   sat.s := g.R * (g.tau * g.gtau - g.g);
//   sat.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   sat.cv := g.R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gtaupi) ^ 2.0 / g.gpipi);
//   vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * g.R / g.p;
//   vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / g.p ^ 2.0;
//   sat.pt := (g.tau * g.gtaupi - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//   sat.pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd \"calulate phase boundary property record from dimensionless Gibbs function\"
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless derivatives of Gibbs function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd sat \"phase boundary properties\";
//   protected Real v \"specific volume\";
//   protected Real vp3 \"Third power of vp\";
//   protected Real ivp3 \"Inverse of third power of vp\";
// algorithm
//   sat.d := g.p / (g.gpi * g.pi * g.T * g.R);
//   sat.h := g.R * g.T * g.tau * g.gtau;
//   sat.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   sat.s := g.R * (g.tau * g.gtau - g.g);
//   sat.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   sat.cv := g.R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//   sat.pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//   sat.pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//   v := 1.0 / sat.d;
//   sat.vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * g.R / g.p;
//   sat.vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / g.p ^ 2.0;
//   sat.vtt := g.gpitautau * g.tau ^ 2.0 * g.R * g.pi / (g.T * g.p);
//   sat.vtp := (g.gpipi - g.tau * g.gpipitau) * g.R * g.pi ^ 2.0 / g.p ^ 2.0;
//   sat.vpp := g.gpipipi * g.R * g.T * g.pi ^ 3.0 / g.p ^ 3.0;
//   sat.cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * g.R * g.tau ^ 2.0 / g.T;
//   vp3 := sat.vp ^ 3.0;
//   ivp3 := 1.0 / vp3;
//   sat.ptt := ((-sat.vtt) * sat.vp ^ 2.0 + 2.0 * sat.vt * sat.vtp * sat.vp + (-sat.vt ^ 2.0) * sat.vpp) * ivp3;
//   sat.pdd := (-sat.vpp) * ivp3 * v ^ 4.0 + -2.0 * v * sat.pd;
//   sat.ptd := (sat.vtp * sat.vp - sat.vt * sat.vpp) * ivp3 / sat.d ^ 2.0;
//   sat.cvt := (vp3 * sat.cpt + (sat.vp * sat.vt) ^ 2.0 + 3.0 * sat.vp ^ 2.0 * g.T * sat.vt * sat.vtt + -3.0 * sat.vtp * sat.vp * g.T * sat.vt ^ 2.0 + g.T * sat.vt ^ 3.0 * sat.vpp) * ivp3;
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless derivatives of the Gibbs funciton\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Real vt;
//   protected Real vp;
// algorithm
//   pro.d := max(g.p, 611.657) / (g.gpi * g.pi * g.T * g.R);
//   pro.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   pro.h := g.R * g.T * g.tau * g.gtau;
//   pro.s := g.R * (g.tau * g.gtau - g.g);
//   pro.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * g.R / max(g.p, 611.657);
//   vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / max(g.p, 611.657) ^ 2.0;
//   pro.ddpT := (-pro.d ^ 2.0) * vp;
//   pro.ddTp := (-pro.d ^ 2.0) * vt;
//   pro.duTp := pro.cp - g.p * vt;
//   pro.dupT := (-g.T) * vt - g.p * vp;
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ph
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless derivatives of the Gibbs function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
//   protected Real vt;
//   protected Real vp;
// algorithm
//   pro.T := min(max(g.T, 200.0), 6000.0);
//   pro.d := max(g.p, 611.657) / (g.gpi * g.pi * pro.T * g.R);
//   pro.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   pro.s := g.R * (g.tau * g.gtau - g.g);
//   pro.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * g.R / max(g.p, 611.657);
//   vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / max(g.p, 611.657) ^ 2.0;
//   pro.ddhp := (-pro.d ^ 2.0) * vt / pro.cp;
//   pro.ddph := (-pro.d ^ 2.0) * (vp * pro.cp + (-vt) / pro.d + g.T * vt ^ 2.0) / pro.cp;
//   pro.duph := -1.0 / pro.d + pro.ddph * g.p / pro.d ^ 2.0;
//   pro.duhp := 1.0 + pro.ddhp * g.p / pro.d ^ 2.0;
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ps
//   input ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless derivatives of the Gibbs function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro;
//   protected Real vt;
//   protected Real vp;
// algorithm
//   pro.T := g.T;
//   pro.d := g.p / (g.gpi * g.pi * pro.T * g.R);
//   pro.u := g.T * g.R * (g.tau * g.gtau - g.pi * g.gpi);
//   pro.h := g.R * g.T * g.tau * g.gtau;
//   pro.cp := (-g.R) * g.tau ^ 2.0 * g.gtautau;
//   vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * g.R / g.p;
//   vp := g.gpipi * g.pi ^ 2.0 * g.R * g.T / g.p ^ 2.0;
//   pro.ddsp := (-pro.d ^ 2.0) * vt * g.T / pro.cp;
//   pro.ddps := (-pro.d ^ 2.0) * (vp + g.T * vt ^ 2.0 / pro.cp);
// end ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps \"calulate phase boundary property record from dimensionless Helmholtz function\"
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless derivatives of Helmholtz function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties sat \"phase boundary property record\";
//   protected Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
// algorithm
//   p := f.R * f.d * f.T * f.delta * f.fdelta;
//   sat.d := f.d;
//   sat.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   sat.s := f.R * (f.tau * f.ftau - f.f);
//   sat.u := f.R * f.T * f.tau * f.ftau;
//   sat.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   sat.cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   sat.pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   sat.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd \"calulate phase boundary property record from dimensionless Helmholtz function\"
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless derivatives of Helmholtz function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd sat \"phase boundary property record\";
//   protected Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
// algorithm
//   p := f.R * f.d * f.T * f.delta * f.fdelta;
//   sat.d := f.d;
//   sat.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   sat.s := f.R * (f.tau * f.ftau - f.f);
//   sat.u := f.R * f.T * f.tau * f.ftau;
//   sat.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   sat.cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   sat.pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   sat.pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   sat.pdd := (2.0 * f.fdelta + 4.0 * f.delta * f.fdeltadelta + f.delta ^ 2.0 * f.fdeltadeltadelta) * f.R * f.T * f.delta / f.d;
//   sat.ptt := f.fdeltatautau * f.R * f.d * f.delta * f.tau ^ 2.0 / f.T;
//   sat.ptd := f.R * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta + -2.0 * f.tau * f.fdeltatau - f.delta * f.tau * f.fdeltadeltatau);
//   sat.cvt := (2.0 * f.ftautau + f.tau * f.ftautautau) * f.R * f.tau ^ 2.0 / f.T;
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Real pd \"derivative of pressure wrt. density\";
//   protected Real pt \"derivative of pressure wrt. temperature\";
//   protected Real pv \"derivative of pressure wrt. specific volume\";
//   protected Real cv \"Heat capacity at constant volume\";
// algorithm
//   pro.d := f.d;
//   pro.s := f.R * (f.tau * f.ftau - f.f);
//   pro.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   pro.u := f.R * f.T * f.tau * f.ftau;
//   pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   pv := (-f.d ^ -2.0) * pd;
//   pro.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   pro.ddTp := (-pt) / pd;
//   pro.ddpT := 1.0 / pd;
//   pro.dupT := (f.d - f.T * pt) / (f.d ^ 2.0 * pd);
//   pro.duTp := ((-cv) * f.d ^ 2.0 * pd + pt * f.d - f.T * pt ^ 2.0) / (f.d ^ 2.0 * pd);
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ph
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless derivatives of the Helmholtz function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
//   protected Real pd;
//   protected Real pt;
//   protected Real cv \"Heat capacity at constant volume\";
// algorithm
//   pro.d := f.d;
//   pro.T := f.T;
//   pro.s := f.R * (f.tau * f.ftau - f.f);
//   pro.u := f.R * f.T * f.tau * f.ftau;
//   cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   pro.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   pro.ddph := f.d * (cv * f.d + pt) / (f.d ^ 2.0 * pd * cv + f.T * pt ^ 2.0);
//   pro.ddhp := (-f.d ^ 2.0) * pt / (f.d ^ 2.0 * pd * cv + f.T * pt ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ph;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ps
//   input ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless derivatives of the Helmholtz function\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro;
//   protected Real pd;
//   protected Real pt;
//   protected Real cv \"Heat capacity at constant volume\";
// algorithm
//   pro.d := f.d;
//   pro.T := f.T;
//   pro.u := f.R * f.T * f.tau * f.ftau;
//   pro.h := f.R * f.T * (f.tau * f.ftau + f.delta * f.fdelta);
//   pro.cp := f.R * ((-f.tau ^ 2.0) * f.ftautau + (f.delta * (f.fdelta - f.tau * f.fdeltatau)) ^ 2.0 / (2.0 * f.delta * f.fdelta + f.delta ^ 2.0 * f.fdeltadelta));
//   cv := f.R * (-f.tau ^ 2.0) * f.ftautau;
//   pd := f.R * f.T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//   pt := f.R * f.d * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//   pro.ddps := f.d ^ 2.0 * cv / (pd * f.d ^ 2.0 * cv + pt ^ 2.0 * f.T);
//   pro.ddsp := (-f.d ^ 2.0) * pt * f.T / (f.d ^ 2.0 * pd * cv + f.T * pt ^ 2.0);
// end ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ps;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.water_ph_r4
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0);
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0);
//   protected Real x;
//   protected Real dpT;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties liq;
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties vap;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs gl;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs gv;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs fl;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs fv;
//   protected Real dl(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real dv(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real cv \"Heat capacity at constant volume\";
// algorithm
//   pro.T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//   dpT := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(pro.T);
//   dl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(p);
//   dv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(p);
//   if p < 16529200.0 then
//     gl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, pro.T);
//     gv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, pro.T);
//     liq := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps(gl);
//     vap := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps(gv);
//   else
//     fl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(dl, pro.T);
//     fv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(dv, pro.T);
//     liq := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps(fl);
//     vap := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps(fv);
//   end if;
//   x := if vap.h <> liq.h then (h - liq.h) / (vap.h - liq.h) else 1.0;
//   cv := ThermoSysPro.Properties.WaterSteam.Common.cv2Phase(liq, vap, x, pro.T, p);
//   pro.d := liq.d * vap.d / (vap.d + x * (liq.d - vap.d));
//   pro.x := x;
//   pro.u := x * vap.u + (1.0 - x) * liq.u;
//   pro.s := x * vap.s + (1.0 - x) * liq.s;
//   pro.cp := x * vap.cp + (1.0 - x) * liq.cp;
//   pro.ddph := pro.d * (1.0 + pro.d * cv / dpT) / (pro.T * dpT);
//   pro.ddhp := (-pro.d ^ 2.0) / (pro.T * dpT);
// end ThermoSysPro.Properties.WaterSteam.Common.water_ph_r4;
// 
// function ThermoSysPro.Properties.WaterSteam.Common.water_ps_r4
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real x;
//   protected Real dpT;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro;
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties liq;
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties vap;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs gl \"dimensionless Gibbs function and derivatives wrt dimensionless presure and temperature\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs gv \"dimensionless Gibbs function and derivatives wrt dimensionless presure and temperature\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs fl \"dimensionless Helmholtz function and derivatives wrt dimensionless presure and temperature\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs fv \"dimensionless Helmholtz function and derivatives wrt dimensionless presure and temperature\";
//   protected Real cv \"Heat capacity at constant volume\";
//   protected Real dl(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real dv(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
// algorithm
//   pro.T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//   dpT := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(pro.T);
//   dl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_p_R4b(p);
//   dv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_p_R4b(p);
//   if p < 16529200.0 then
//     gl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, pro.T);
//     gv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, pro.T);
//     liq := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps(gl);
//     vap := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps(gv);
//   else
//     fl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(dl, pro.T);
//     fv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(dv, pro.T);
//     liq := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps(fl);
//     vap := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps(fv);
//   end if;
//   x := if vap.s <> liq.s then (s - liq.s) / (vap.s - liq.s) else 1.0;
//   pro.x := x;
//   pro.d := liq.d * vap.d / (vap.d + x * (liq.d - vap.d));
//   pro.u := x * vap.u + (1.0 - x) * liq.u;
//   pro.h := x * vap.h + (1.0 - x) * liq.h;
//   pro.cp := 1e+60;
//   cv := ThermoSysPro.Properties.WaterSteam.Common.cv2Phase(liq, vap, x, pro.T, p);
//   pro.ddps := cv * pro.d ^ 2.0 / (dpT ^ 2.0 * pro.T);
//   pro.ddsp := (-pro.d ^ 2.0) / dpT;
// end ThermoSysPro.Properties.WaterSteam.Common.water_ps_r4;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   output Real H(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
// algorithm
//   pro := ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT(p, T, mode);
//   H := pro.h;
// end ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT_der
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"Pression\";
//   input Real T_der \"Température\";
//   output Real H \"specific enthalpy\";
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
//   protected Real rho2;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   R := 461.526;
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   elseif region == 3 then
//     (rho, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-07);
//     rho2 := rho ^ 2.0;
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(rho, T);
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     cv := R * (-f.tau ^ 2.0) * f.ftautau;
//     H := (((-rho) * pd + T * pt) * p_der + (rho2 * pd * cv + T * pt * p) * T_der) / (rho2 * pd);
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gtaupi) * R / p;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     H := (1.0 / rho - T * vt) * p_der + cp * T_der;
//   else
//     assert( false, \"Water_pT_der: error in region computation of IF97 steam tables(p = \" + String(p, 0, true, 6) + \", T = \" + String(T, 0, true, 6) + \", region = \" + String(region, 0, true) + \")\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT_der;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   protected Integer phase;
//   protected Integer region;
//   protected Integer error;
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0);
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Boolean supercritical;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph pro;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
// algorithm
//   supercritical := p > 22064000.0;
//   phase := if h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p(p) or h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p(p) or supercritical then 1 else 2;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ph(p, h, phase, mode);
//   if region == 1 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph1(p, h);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ph(g);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 2 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph2(p, h);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ph(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   elseif region == 3 then
//     (d, T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofph3(p, h, 1e-07, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ph(f);
//     if h > 2087546.84511715 then
//       pro.x := if supercritical then -1.0 else 1.0;
//     else
//       pro.x := if supercritical then -1.0 else 0.0;
//     end if;
//   elseif region == 4 then
//     pro := ThermoSysPro.Properties.WaterSteam.Common.water_ph_r4(p, h);
//   elseif region == 5 then
//     (T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofph5(p, h, 1e-07);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ph(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   else
//     assert( false, \"Water_Ph: Incorrect region number (\" + String(region, 0, true) + \")\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph_der \"Derivative function of Water_Ph\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"derivative of Pressure\";
//   input Real h_der \"derivative of Specific enthalpy\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ph der_pro \"Derivative\";
//   protected Integer phase;
//   protected Integer region;
//   protected Boolean supercritical;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0);
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real vp \"derivative of specific volume w.r.t. pressure\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real dpT \"dp/dT derivative of saturation curve\";
//   protected Real dxv \"der of x wrt v\";
//   protected Real dvTl \"der of v wrt T at boiling\";
//   protected Real dvTv \"der of v wrt T at dew\";
//   protected Real dxT \"der of x wrt T\";
//   protected Real duTl \"der of u wrt T at boiling\";
//   protected Real duTv \"der of u wrt T at dew\";
//   protected Real vtt \"2nd derivative of specific volume w.r.t. temperature\";
//   protected Real cpt \"derivative of cp w.r.t. temperature\";
//   protected Real cvt \"derivative of cv w.r.t. temperature\";
//   protected Real dpTT \"2nd der of p wrt T\";
//   protected Real dxdd \"2nd der of x wrt d\";
//   protected Real dxTd \"2nd der of x wrt d and T\";
//   protected Real dvTTl \"2nd der of v wrt T at boiling\";
//   protected Real dvTTv \"2nd der of v wrt T at dew\";
//   protected Real dxTT \" 2nd der of x wrt T\";
//   protected Real duTTl \"2nd der of u wrt T at boiling\";
//   protected Real duTTv \"2nd der of u wrt T at dew\";
//   protected Integer error \"error flag for inverse iterations\";
//   protected Real h_liq(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"liquid specific enthalpy\";
//   protected Real d_liq(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"liquid density\";
//   protected Real h_vap(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"vapour specific enthalpy\";
//   protected Real d_vap(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"vapour density\";
//   protected Real x \"dryness fraction\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd liq \"phase boundary property record\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd vap \"phase boundary property record\";
//   protected Real t1(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature at phase boundary, using inverse from region 1\";
//   protected Real t2(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature at phase boundary, using inverse from region 2\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd gl \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd gv \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd fl \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd fv \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0);
//   protected Real ptt \"2nd derivative of pressure wrt temperature\";
//   protected Real pdd \"2nd derivative of pressure wrt density\";
//   protected Real ptd \"mixed derivative of pressure w.r.t. density and temperature\";
//   protected Real vpp \"2nd derivative of specific volume w.r.t. pressure\";
//   protected Real vtp \"mixed derivative of specific volume w.r.t. pressure and temperature\";
//   protected Real vp3 \"vp^3\";
//   protected Real ivp3 \"1/vp3\";
//   protected Real detPH \"Determinant\";
//   protected Real dht;
//   protected Real dhd;
//   protected Real ddhp;
//   protected Real ddph;
//   protected Real dtph;
//   protected Real dthp;
//   protected Real detPH_d;
//   protected Real detPH_t;
//   protected Real dhtt;
//   protected Real dhtd;
//   protected Real ddph_t;
//   protected Real ddph_d;
//   protected Real ddhp_t;
//   protected Real ddhp_d;
//   protected Real duhp_t;
//   protected Real duph_t;
//   protected Real duph_d;
//   protected Real dupp;
//   protected Real duph;
//   protected Real duhh;
//   protected Real dcp_d;
//   protected Real rho2 \"square of density\";
//   protected Real rho3 \"cube of density\";
//   protected Real cp3 \"cube of specific heat capacity\";
//   protected Real cpcpp;
//   protected Real quotient;
//   protected Real vt2;
//   protected Real pt2;
//   protected Real pt3;
// algorithm
//   supercritical := p > 22064000.0;
//   phase := if h < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p(p) or h > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p(p) or supercritical then 1 else 2;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ph(p, h, phase, mode);
//   R := 461.526;
//   if region == 1 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph1(p, h);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cp3 := cp ^ 3.0;
//     cpcpp := cp ^ 2.0 * p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     v := 1.0 / rho;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt2) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + vp ^ 2.0 * vt2 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt2 + T * vt2 * vt * vpp) * ivp3;
//     detPH := cp * pd;
//     dht := cv + pt / rho;
//     dhd := (pd + (-T) * pt / rho) / rho;
//     ddph := dht / detPH;
//     ddhp := (-pt) / detPH;
//     dtph := (-dhd) / detPH;
//     dthp := pd / detPH;
//     detPH_d := cv * pdd + (2.0 * pt * (ptd + (-pt) / rho) - ptt * pd) * T / rho2;
//     detPH_t := cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2;
//     dhtt := cvt + ptt * v;
//     dhtd := (ptd - (T * ptt + pt) * v) * v;
//     ddhp_t := ddhp * (ptt / pt + (-detPH_t) / detPH);
//     ddhp_d := ddhp * (ptd / pt + (-detPH_d) / detPH);
//     ddph_t := ddph * (dhtt / dht + (-detPH_t) / detPH);
//     ddph_d := ddph * (dhtd / dht + (-detPH_d) / detPH);
//     dupp := (-2.0 * cp3 * vp + (-cp3) * p * vpp + 2.0 * (cp ^ 2.0 * vt * v + cpcpp * vtp * v) + -2.0 * cp ^ 2.0 * T * vt2 + -3.0 * cpcpp * vt * T * vtp + 4.0 * T * vtt * cp * p * vt * v + -3.0 * T ^ 2.0 * vtt * cp * p * vt2 + (-cp) * p * vtt / rho2 + cpt * p * vt / rho2 + -2.0 * cpt * p * vt2 * v * T + cpt * p * vt2 * T ^ 2.0 - (-cpcpp) * vt * vp) / cp3;
//     duph := ((-vtp) * cpcpp + (-cp ^ 2.0) * vt + -2.0 * cp * p * vt * T * vtt + (-cpt) * p * vt * v + cpt * p * vt2 * T - (-cp) * p * vtt * v) / cp3;
//     duhh := (-p) * (cp * vtt - cpt * vt) / cp3;
//     der_pro.x := 0.0;
//     der_pro.duhp := duph * p_der + duhh * h_der;
//     der_pro.duph := dupp * p_der + duph * h_der;
//     der_pro.ddph := (ddph * ddph_d + dtph * ddph_t) * p_der + (ddph * ddhp_d + dtph * ddhp_t) * h_der;
//     der_pro.ddhp := (ddhp * ddhp_d + dthp * ddhp_t) * h_der + (ddph * ddhp_d + dtph * ddhp_t) * p_der;
//     der_pro.cp := p_der * ((-T) * vtt * cp + cpt * T * vt + (-cpt) / rho) / cp + h_der * cpt / cp;
//     der_pro.s := (-p_der) / (T * rho) + h_der / T;
//     der_pro.u := p_der * ((-p) * vp * cp + (-cp) * v + (-p) * (vt2 * T - vt * v)) / cp + h_der * (cp - p * vt) / cp;
//     der_pro.T := p_der * (T * vt - v) / cp + h_der / cp;
//     der_pro.d := p_der * (-rho2) * (vp * cp + (-vt) / rho + T * vt2) / cp + h_der * (-rho2) * vt / cp;
//   elseif region == 2 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph2(p, h);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cp3 := cp ^ 3.0;
//     cpcpp := cp ^ 2.0 * p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     v := 1.0 / rho;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt2) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + vp ^ 2.0 * vt2 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt2 + T * vt2 * vt * vpp) * ivp3;
//     detPH := cp * pd;
//     dht := cv + pt / rho;
//     dhd := (pd + (-T) * pt / rho) / rho;
//     ddph := dht / detPH;
//     ddhp := (-pt) / detPH;
//     dtph := (-dhd) / detPH;
//     dthp := pd / detPH;
//     detPH_d := cv * pdd + (2.0 * pt * (ptd + (-pt) / rho) - ptt * pd) * T / rho2;
//     detPH_t := cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2;
//     dhtt := cvt + ptt * v;
//     dhtd := (ptd - (T * ptt + pt) * v) * v;
//     ddhp_t := ddhp * (ptt / pt + (-detPH_t) / detPH);
//     ddhp_d := ddhp * (ptd / pt + (-detPH_d) / detPH);
//     ddph_t := ddph * (dhtt / dht + (-detPH_t) / detPH);
//     ddph_d := ddph * (dhtd / dht + (-detPH_d) / detPH);
//     dupp := (-2.0 * cp3 * vp + (-cp3) * p * vpp + 2.0 * (cp ^ 2.0 * vt * v + cpcpp * vtp * v) + -2.0 * cp ^ 2.0 * T * vt2 + -3.0 * cpcpp * vt * T * vtp + 4.0 * T * vtt * cp * p * vt * v + -3.0 * T ^ 2.0 * vtt * cp * p * vt2 + (-cp) * p * vtt / rho2 + cpt * p * vt / rho2 + -2.0 * cpt * p * vt2 * v * T + cpt * p * vt2 * T ^ 2.0 - (-cpcpp) * vt * vp) / cp3;
//     duph := ((-vtp) * cpcpp + (-cp ^ 2.0) * vt + -2.0 * cp * p * vt * T * vtt + (-cpt) * p * vt * v + cpt * p * vt2 * T - (-cp) * p * vtt * v) / cp3;
//     duhh := (-p) * (cp * vtt - cpt * vt) / cp3;
//     der_pro.x := 0.0;
//     der_pro.duhp := duph * p_der + duhh * h_der;
//     der_pro.duph := dupp * p_der + duph * h_der;
//     der_pro.ddph := (ddph * ddph_d + dtph * ddph_t) * p_der + (ddph * ddhp_d + dtph * ddhp_t) * h_der;
//     der_pro.ddhp := (ddhp * ddhp_d + dthp * ddhp_t) * h_der + (ddph * ddhp_d + dtph * ddhp_t) * p_der;
//     der_pro.cp := p_der * ((-T) * vtt * cp + cpt * T * vt + (-cpt) / rho) / cp + h_der * cpt / cp;
//     der_pro.s := (-p_der) / (T * rho) + h_der / T;
//     der_pro.u := p_der * ((-p) * vp * cp + (-cp) * v + (-p) * (vt2 * T - vt * v)) / cp + h_der * (cp - p * vt) / cp;
//     der_pro.T := p_der * (T * vt - v) / cp + h_der / cp;
//     der_pro.d := p_der * (-rho2) * (vp * cp + (-vt) / rho + T * vt2) / cp + h_der * (-rho2) * vt / cp;
//   elseif region == 3 then
//     (rho, T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofph3(p, h, 1e-07, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(rho, T);
//     rho2 := rho ^ 2.0;
//     rho3 := rho * rho2;
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     pt2 := pt ^ 2.0;
//     pt3 := pt2 * pt;
//     cv := abs(R * (-f.tau ^ 2.0) * f.ftautau);
//     cp := (rho2 * pd * cv + T * pt2) / (pd * rho2);
//     pdd := (2.0 * f.fdelta + 4.0 * f.delta * f.fdeltadelta + f.delta ^ 2.0 * f.fdeltadeltadelta) * R * T * f.delta / rho;
//     ptt := f.fdeltatautau * R * rho * f.delta * f.tau ^ 2.0 / T;
//     ptd := R * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta + -2.0 * f.tau * f.fdeltatau - f.delta * f.tau * f.fdeltadeltatau);
//     cvt := (2.0 * f.ftautau + f.tau * f.ftautautau) * R * f.tau ^ 2.0 / T;
//     cpt := (cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2 - cp * ptd) / pd;
//     detPH := cp * pd;
//     dht := cv + pt / rho;
//     dhd := (pd + (-T) * pt / rho) / rho;
//     ddph := dht / detPH;
//     ddhp := (-pt) / detPH;
//     dtph := (-dhd) / detPH;
//     dthp := pd / detPH;
//     detPH_d := cv * pdd + (2.0 * pt * (ptd + (-pt) / rho) - ptt * pd) * T / rho2;
//     detPH_t := cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2;
//     dhtt := cvt + ptt * v;
//     dhtd := (ptd - (T * ptt + pt) * v) * v;
//     ddhp_t := ddhp * (ptt / pt + (-detPH_t) / detPH);
//     ddhp_d := ddhp * (ptd / pt + (-detPH_d) / detPH);
//     ddph_t := ddph * (dhtt / dht + (-detPH_t) / detPH);
//     ddph_d := ddph * (dhtd / dht + (-detPH_d) / detPH);
//     dcp_d := (detPH_d - cp * pdd) / pd;
//     quotient := (cv * rho2 * pd + T * pt2) ^ -3.0;
//     dupp := (4.0 * ptt * p * cv * rho2 * pd * T * pt + -2.0 * p * cvt * rho2 * T * pt2 * pd + 2.0 * ptt * p * T * pt2 * rho * pd + -3.0 * p * (cv ^ 2.0 * rho3 * ptd * T * pt + cv * rho * T ^ 2.0 * pt2 * ptt) + 2.0 * pt * p * cv * rho3 * ptd * pd + -4.0 * pt2 * p * cv * rho2 * ptd * T + 2.0 * T ^ 2.0 * pt2 * pt3 + 4.0 * (pt2 * cv ^ 2.0 * rho3 * pd * T + pt3 * cv * rho2 * T * pd) + (-ptt) * p * cv * rho3 * pd ^ 2.0 + 2.0 * p * (cv * rho2) ^ 2.0 * ptd * pd + -2.0 * p * cv * rho2 * pt2 * pd + -2.0 * p * cv * rho * pt3 * T + p * cvt * rho * T ^ 2.0 * pt3 + (-ptd) * p * rho * T * pt3 + -5.0 * pt * p * cv ^ 2.0 * rho3 * pd + -2.0 * pt * p * (cv * rho2) ^ 2.0 * pdd + (-pt2) * p * cv * rho3 * pdd + -2.0 * pt2 ^ 2.0 * p * T + 2.0 * cv ^ 3.0 * rho3 * rho2 * pd ^ 2.0 + 2.0 * pt * (cv * rho2 * pd) ^ 2.0 + 2.0 * pt2 ^ 2.0 * cv * rho * T ^ 2.0 + -2.0 * ptt * p * T ^ 2.0 * pt3 + pt * p * cvt * rho3 * pd ^ 2.0 + -2.0 * p * cv ^ 3.0 * rho2 ^ 2.0 * pd + pt3 * p * rho * pd - p * cv ^ 3.0 * rho2 * rho3 * pdd) * quotient / rho;
//     duph := (-2.0 * ptt * p * cv * rho2 * pd * T * pt + p * cvt * rho2 * T * pt2 * pd + -2.0 * (ptt * p * T * pt2 * rho * pd + pt * p * cv * rho3 * ptd * pd) + 2.0 * pt2 * p * cv * rho2 * ptd * T + -2.0 * pt3 * cv * rho2 * T * pd + ptt * p * cv * rho3 * pd ^ 2.0 + (-T ^ 2.0) * pt3 * pt2 + 2.0 * p * cv * rho2 * pt2 * pd + (-p) * (cv * rho2) ^ 2.0 * ptd * pd + ptd * p * rho * T * pt3 + 2.0 * pt * p * cv ^ 2.0 * rho3 * pd + pt * p * ((cv * rho2) ^ 2.0 * pdd - cvt * rho3 * pd ^ 2.0) + pt2 * p * cv * rho3 * pdd + pt2 ^ 2.0 * p * T + ptt * p * T ^ 2.0 * pt3 + (-pt) * (cv * rho2 * pd) ^ 2.0 - pt3 * p * rho * pd) * quotient;
//     duhh := p * ((-pt3) * T * ptd + 2.0 * ptd * cv * rho2 * pd * pt + -2.0 * pt2 * cv * rho * pd + pt * cvt * rho2 * pd ^ 2.0 + 2.0 * pt2 * T * ptt * pd + (-pt2) * cv * rho2 * pdd + pt3 * pd - ptt * cv * rho2 * pd ^ 2.0) * rho2 * quotient;
//     der_pro.x := 0.0;
//     der_pro.duhp := duph * p_der + duhh * h_der;
//     der_pro.duph := dupp * p_der + duph * h_der;
//     der_pro.ddph := (ddph * ddph_d + dtph * ddph_t) * p_der + (ddph * ddhp_d + dtph * ddhp_t) * h_der;
//     der_pro.ddhp := (ddhp * ddhp_d + dthp * ddhp_t) * h_der + (ddph * ddhp_d + dtph * ddhp_t) * p_der;
//     der_pro.cp := (ddph * dcp_d + dtph * cpt) * p_der + (ddhp * dcp_d + dthp * cpt) * h_der;
//     der_pro.s := (-p_der) / (T * rho) + h_der / T;
//     der_pro.u := h_der * (cv * rho2 * pd + T * pt2 - pt * p) / (cv * rho2 * pd + T * pt2) + p_der * (cv * rho2 * pd + (-p) * cv * rho + T * pt2 - pt * p) / ((cv * rho2 * pd + T * pt2) * rho);
//     der_pro.T := p_der * ((-rho) * pd + T * pt) / (rho2 * pd * cv + T * pt ^ 2.0) + h_der * rho2 * pd / (rho2 * pd * cv + T * pt2);
//     der_pro.d := p_der * rho * (cv * rho + pt) / (rho2 * pd * cv + T * pt2) + h_der * (-rho2) * pt / (rho2 * pd * cv + T * pt2);
//   elseif region == 4 then
//     h_liq := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hl_p(p);
//     h_vap := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.hv_p(p);
//     x := if h_vap <> h_liq then (h - h_liq) / (h_vap - h_liq) else 1.0;
//     if p < 16529200.0 then
//       t1 := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph1(p, h_liq);
//       t2 := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tph2(p, h_vap);
//       gl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, t1);
//       gv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, t2);
//       liq := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd(gl);
//       vap := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd(gv);
//       T := t1 + x * (t2 - t1);
//     else
//       T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//       d_liq := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_T(T);
//       d_vap := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_T(T);
//       fl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(d_liq, T);
//       fv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(d_vap, T);
//       liq := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd(fl);
//       vap := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd(fv);
//     end if;
//     rho := liq.d * vap.d / (vap.d + x * (liq.d - vap.d));
//     rho2 := rho ^ 2.0;
//     rho3 := rho * rho2;
//     v := 1.0 / rho;
//     dxv := if liq.d <> vap.d then liq.d * vap.d / (liq.d - vap.d) else 0.0;
//     dpT := if liq.d <> vap.d then (vap.s - liq.s) * dxv else ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(T);
//     dvTl := (liq.pt - dpT) / (liq.d ^ 2.0 * liq.pd);
//     dvTv := (vap.pt - dpT) / (vap.d ^ 2.0 * vap.pd);
//     dxT := (-dxv) * (dvTl + x * (dvTv - dvTl));
//     duTl := liq.cv + (T * liq.pt - p) * dvTl;
//     duTv := vap.cv + (T * vap.pt - p) * dvTv;
//     cv := duTl + x * (duTv - duTl) + dxT * (vap.u - liq.u);
//     dpTT := dxv * (vap.cv / T + (-liq.cv) / T + dvTv * (vap.pt - dpT) - dvTl * (liq.pt - dpT));
//     dxdd := 2.0 * dxv / rho3;
//     dxTd := dxv ^ 2.0 * (dvTv - dvTl) / rho2;
//     dvTTl := ((liq.ptt - dpTT) / liq.d ^ 2.0 + dvTl * (liq.d * dvTl * (2.0 * liq.pd + liq.d * liq.pdd) + -2.0 * liq.ptd)) / liq.pd;
//     dvTTv := ((vap.ptt - dpTT) / vap.d ^ 2.0 + dvTv * (vap.d * dvTv * (2.0 * vap.pd + vap.d * vap.pdd) + -2.0 * vap.ptd)) / vap.pd;
//     dxTT := (-dxv) * (2.0 * dxT * (dvTv - dvTl) + dvTTl + x * (dvTTv - dvTTl));
//     duTTl := liq.cvt + (liq.pt + T * (2.0 * liq.ptt - liq.d ^ 2.0 * liq.ptd * dvTl) - dpT) * dvTl + (T * liq.pt - p) * dvTTl;
//     duTTv := vap.cvt + (vap.pt + T * (2.0 * vap.ptt - vap.d ^ 2.0 * vap.ptd * dvTv) - dpT) * dvTv + (T * vap.pt - p) * dvTTv;
//     cvt := duTTl + x * (duTTv - duTTl) + 2.0 * dxT * (duTv - duTl) + dxTT * (vap.u - liq.u);
//     ptt := dpTT;
//     dht := cv + dpT * v;
//     dhd := (-T) * dpT * v ^ 2.0;
//     detPH := (-dpT) * dhd;
//     dtph := 1.0 / dpT;
//     ddph := dht / detPH;
//     ddhp := (-dpT) / detPH;
//     detPH_d := -2.0 * v;
//     detPH_t := 2.0 * ptt / dpT + 1.0 / T;
//     dhtt := cvt + ptt * v;
//     dhtd := ((-T) * ptt - dpT) * v ^ 2.0;
//     ddhp_t := ddhp * (ptt / dpT - detPH_t);
//     ddhp_d := (-ddhp) * detPH_d;
//     ddph_t := ddph * (dhtt / dht - detPH_t);
//     ddph_d := ddph * (dhtd / dht - detPH_d);
//     duhp_t := (ddhp * dpT + p * ddhp_t) / rho2;
//     duph_t := (ddph * dpT + p * ddph_t) / rho2;
//     duph_d := (1.0 + (-2.0 * ddph / rho + ddph_d) * p) / rho2;
//     der_pro.x := if h_vap <> h_liq then h_der / (h_vap - h_liq) else 0.0;
//     der_pro.duhp := dtph * duhp_t * p_der;
//     der_pro.duph := (ddph * duph_d + dtph * duph_t) * p_der + dtph * duhp_t * h_der;
//     der_pro.ddph := (ddph * ddph_d + dtph * ddph_t) * p_der + ddhp * ddph_d * h_der;
//     der_pro.ddhp := ddhp * (ddhp_d * h_der + ddph_d * p_der);
//     der_pro.cp := 0.0;
//     der_pro.s := (-p_der) / (T * rho) + h_der / T;
//     der_pro.u := p_der * (-1.0 + ddph * p / rho) / rho + (1.0 + ddhp * p / rho2) * h_der;
//     der_pro.T := p_der / dpT;
//     der_pro.d := p_der * rho * (1.0 + rho * cv / dpT) / (T * dpT) + (-h_der) * rho2 / (T * dpT);
//   elseif region == 5 then
//     (T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofph5(p, h, 1e-07);
//     assert( error == 0, \"error in inverse iteration of steam tables\");
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3(p, T);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cp3 := cp ^ 3.0;
//     cpcpp := cp ^ 2.0 * p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     v := 1.0 / rho;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt2) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + vp ^ 2.0 * vt2 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt2 + T * vt2 * vt * vpp) * ivp3;
//     detPH := cp * pd;
//     dht := cv + pt / rho;
//     dhd := (pd + (-T) * pt / rho) / rho;
//     ddph := dht / detPH;
//     ddhp := (-pt) / detPH;
//     dtph := (-dhd) / detPH;
//     dthp := pd / detPH;
//     detPH_d := cv * pdd + (2.0 * pt * (ptd + (-pt) / rho) - ptt * pd) * T / rho2;
//     detPH_t := cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2;
//     dhtt := cvt + ptt * v;
//     dhtd := (ptd - (T * ptt + pt) * v) * v;
//     ddhp_t := ddhp * (ptt / pt + (-detPH_t) / detPH);
//     ddhp_d := ddhp * (ptd / pt + (-detPH_d) / detPH);
//     ddph_t := ddph * (dhtt / dht + (-detPH_t) / detPH);
//     ddph_d := ddph * (dhtd / dht + (-detPH_d) / detPH);
//     dupp := (-2.0 * cp3 * vp + (-cp3) * p * vpp + 2.0 * (cp ^ 2.0 * vt * v + cpcpp * vtp * v) + -2.0 * cp ^ 2.0 * T * vt2 + -3.0 * cpcpp * vt * T * vtp + 4.0 * T * vtt * cp * p * vt * v + -3.0 * T ^ 2.0 * vtt * cp * p * vt2 + (-cp) * p * vtt / rho2 + cpt * p * vt / rho2 + -2.0 * cpt * p * vt2 * v * T + cpt * p * vt2 * T ^ 2.0 - (-cpcpp) * vt * vp) / cp3;
//     duph := ((-vtp) * cpcpp + (-cp ^ 2.0) * vt + -2.0 * cp * p * vt * T * vtt + (-cpt) * p * vt * v + cpt * p * vt2 * T - (-cp) * p * vtt * v) / cp3;
//     duhh := (-p) * (cp * vtt - cpt * vt) / cp3;
//     der_pro.x := 0.0;
//     der_pro.duhp := duph * p_der + duhh * h_der;
//     der_pro.duph := dupp * p_der + duph * h_der;
//     der_pro.ddph := (ddph * ddph_d + dtph * ddph_t) * p_der + (ddph * ddhp_d + dtph * ddhp_t) * h_der;
//     der_pro.ddhp := (ddhp * ddhp_d + dthp * ddhp_t) * h_der + (ddph * ddhp_d + dtph * ddhp_t) * p_der;
//     der_pro.cp := p_der * ((-T) * vtt * cp + cpt * T * vt + (-cpt) / rho) / cp + h_der * cpt / cp;
//     der_pro.s := (-p_der) / (T * rho) + h_der / T;
//     der_pro.u := p_der * ((-p) * vp * cp + (-cp) * v + (-p) * (vt2 * T - vt * v)) / cp + h_der * (cp - p * vt) / cp;
//     der_pro.T := p_der * (T * vt - v) / cp + h_der / cp;
//     der_pro.d := p_der * (-rho2) * (vp * cp + (-vt) / rho + T * vt2) / cp + h_der * (-rho2) * vt / cp;
//   else
//     assert( false, \"Water_Ph_der: Incorrect region number\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph_der;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.Water_Ps
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Specific entropy\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   protected Integer phase;
//   protected Integer region;
//   protected Integer error;
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0);
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Boolean supercritical;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
// algorithm
//   supercritical := p > 22064000.0;
//   phase := if s < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p(p) or s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p(p) or supercritical then 1 else 2;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ps(p, s, phase, mode);
//   if region == 1 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps1(p, s);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ps(g);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 2 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2(p, s);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ps(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   elseif region == 3 then
//     (d, T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofps3(p, s, 1e-07, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_ps(f);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 4 then
//     pro := ThermoSysPro.Properties.WaterSteam.Common.water_ps_r4(p, s);
//   elseif region == 5 then
//     (T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofps5(p, s, 1e-07);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_ps(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   else
//     assert( false, \"Water_Ps: Incorrect region number\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.Water_Ps;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97.Water_Ps_der
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pression\";
//   input Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"Entropie spécifique\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"derivative of Pressure\";
//   input Real s_der \"derivative of Specific enthropy\";
//   protected Boolean supercritical;
//   protected Integer phase \"phase: 2 for two-phase, 1 for one phase, 0 if unknown\";
//   protected Integer region(min = 1, max = 5) \"IF 97 region\";
//   protected Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cpt \"derivative of cp w.r.t. temperature\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cvt \"derivative of cv w.r.t. temperature\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real ptt \"2nd derivative of pressure wrt temperature\";
//   protected Real pdd \"2nd derivative of pressure wrt density\";
//   protected Real ptd \"mixed derivative of pressure w.r.t. density and temperature\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected Real vp \"derivative of specific volume w.r.t. pressure\";
//   protected Real vtt \"2nd derivative of specific volume w.r.t. temperature\";
//   protected Real vpp \"2nd derivative of specific volume w.r.t. pressure\";
//   protected Real vtp \"mixed derivative of specific volume w.r.t. pressure and temperature\";
//   protected Real x \"dryness fraction\";
//   protected Real dpT \"dp/dT derivative of saturation curve\";
//   protected Real auxs(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Integer error \"error flag for inverse iterations\";
//   protected Real s_liq(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"liquid specific entropy\";
//   protected Real d_liq(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"liquid density\";
//   protected Real s_vap(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"vapour specific entropy\";
//   protected Real d_vap(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"vapour density\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd liq \"phase boundary property record\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.PhaseBoundaryProperties3rd vap \"phase boundary property record\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd gl \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd gv \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd fl \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd fv \"dimensionless Helmholtz function and dervatives wrt delta and tau\";
//   protected Real t1(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature at phase boundary, using inverse from region 1\";
//   protected Real t2(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature at phase boundary, using inverse from region 2\";
//   protected Real detPH;
//   protected Real dtsp;
//   protected Real dtps;
//   protected Real ddsp;
//   protected Real ddps;
//   protected Real dsd;
//   protected Real detPH_t;
//   protected Real detPH_d;
//   protected Real dcp_t;
//   protected Real dcp_d;
//   protected Real dcps;
//   protected Real dcpp;
//   protected Real dxv;
//   protected Real dxd;
//   protected Real dvTl;
//   protected Real dvTv;
//   protected Real dxT;
//   protected Real duTl;
//   protected Real duTv;
//   protected Real dpTT;
//   protected Real dxdd;
//   protected Real dxTd;
//   protected Real dvTTl;
//   protected Real dvTTv;
//   protected Real dxTT;
//   protected Real duTTl;
//   protected Real duTTv;
//   protected Real rho2;
//   protected Real cp3;
//   protected Real invcp3;
//   protected Real cpinv;
//   protected Real vt2;
//   protected Real pt2;
//   protected Real pt3;
//   protected Real quotient;
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_ps pro_der;
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
// algorithm
//   supercritical := p > 22064000.0;
//   phase := if s < ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p(p) or s > ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p(p) or supercritical then 1 else 2;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_ps(p, s, phase, mode);
//   R := 461.526;
//   auxs := s;
//   if region == 1 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps1(p, s);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, T);
//     h := R * T * g.tau * g.gtau;
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cpinv := 1.0 / cp;
//     cp3 := cp ^ 3.0;
//     invcp3 := 1.0 / cp3;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     x := 0.0;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pro_der.cp := cpinv * T * ((cpt * vt - vtt * cp) * p_der + cpt * s_der);
//     pro_der.x := 0.0;
//     pro_der.ddps := (-rho2) * ((cp3 * vpp + 3.0 * (cp ^ 2.0 * T * vt * vtp + T ^ 2.0 * vtt * cp * vt2) + T * vt2 * vt * cp - T ^ 2.0 * vt2 * vt * cpt) * invcp3 * p_der + T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * s_der);
//     pro_der.ddsp := (-rho2) * (T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * p_der + ((-cpt) * T * vt + cp * vt + T * vtt * cp) * T * invcp3 * s_der);
//     pro_der.h := p_der / rho + T * s_der;
//     pro_der.u := cpinv * ((-p) * (vp * cp + T * vt2) * p_der + (cp - p * vt) * T * s_der);
//     pro_der.d := cpinv * (-rho2) * ((vp * cp + T * vt2) * p_der + vt * T * s_der);
//     pro_der.T := T * cpinv * (vt * p_der + s_der);
//   elseif region == 2 then
//     T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2(p, s);
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, T);
//     h := R * T * g.tau * g.gtau;
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cpinv := 1.0 / cp;
//     cp3 := cp ^ 3.0;
//     invcp3 := 1.0 / cp3;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     x := 0.0;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pro_der.cp := cpinv * T * ((cpt * vt - vtt * cp) * p_der + cpt * s_der);
//     pro_der.x := 0.0;
//     pro_der.ddps := (-rho2) * ((cp3 * vpp + 3.0 * (cp ^ 2.0 * T * vt * vtp + T ^ 2.0 * vtt * cp * vt2) + T * vt2 * vt * cp - T ^ 2.0 * vt2 * vt * cpt) * invcp3 * p_der + T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * s_der);
//     pro_der.ddsp := (-rho2) * (T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * p_der + ((-cpt) * T * vt + cp * vt + T * vtt * cp) * T * invcp3 * s_der);
//     pro_der.h := p_der / rho + T * s_der;
//     pro_der.u := cpinv * ((-p) * (vp * cp + T * vt2) * p_der + (cp - p * vt) * T * s_der);
//     pro_der.d := cpinv * (-rho2) * ((vp * cp + T * vt2) * p_der + vt * T * s_der);
//     pro_der.T := T * cpinv * (vt * p_der + s_der);
//   elseif region == 3 then
//     (rho, T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dtofps3(p, s, 1e-07, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(rho, T);
//     rho2 := rho ^ 2.0;
//     h := R * T * (f.tau * f.ftau + f.delta * f.fdelta);
//     auxs := R * (f.tau * f.ftau - f.f);
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     pt2 := pt ^ 2.0;
//     pt3 := pt2 * pt;
//     cv := abs(R * (-f.tau ^ 2.0) * f.ftautau);
//     cp := (rho2 * pd * cv + T * pt ^ 2.0) / (rho ^ 2.0 * pd);
//     pdd := (2.0 * f.fdelta + 4.0 * f.delta * f.fdeltadelta + f.delta ^ 2.0 * f.fdeltadeltadelta) * R * T * f.delta / rho;
//     ptt := f.fdeltatautau * R * rho * f.delta * f.tau ^ 2.0 / T;
//     ptd := R * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta + -2.0 * f.tau * f.fdeltatau - f.delta * f.tau * f.fdeltadeltatau);
//     cvt := (2.0 * f.ftautau + f.tau * f.ftautautau) * R * f.tau ^ 2.0 / T;
//     x := 0.0;
//     dsd := (-pt) / rho2;
//     detPH := cp * pd;
//     dtsp := T * pd / detPH;
//     dtps := (-T) * dsd / detPH;
//     ddsp := (-T) * pt / detPH;
//     ddps := cv / detPH;
//     detPH_t := cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2;
//     detPH_d := cv * pdd + (2.0 * pt * (ptd + (-pt) / rho) - ptt * pd) * T / rho2;
//     dcp_t := (detPH_t - cp * ptd) / pd;
//     dcp_d := (detPH_d - cp * pdd) / pd;
//     dcps := ddsp * dcp_d + dtsp * dcp_t;
//     dcpp := ddps * dcp_d + dtps * dcp_t;
//     quotient := 1.0 / (cv * rho2 * pd + pt2 * T);
//     pro_der.cp := dcps * s_der + dcpp * p_der;
//     pro_der.x := 0.0;
//     pro_der.ddps := ((cvt * T ^ 2.0 * pt3 + -3.0 * (cv ^ 2.0 * T * pt * rho2 * ptd + cv * T ^ 2.0 * pt2 * ptt) + (-cv) * T * pt3 + 2.0 * cv ^ 2.0 * rho * pt2 * T + (-cv ^ 3.0) * rho2 ^ 2.0 * pdd) * p_der + (pt2 * T * cvt * rho2 * pd + 2.0 * pt2 * T * cv * rho2 * ptd + pt3 * T ^ 2.0 * ptt + -2.0 * pt * T * ptt * cv * rho2 * pd + (cv * rho2) ^ 2.0 * pt * pdd + -2.0 * cv * rho * T * pt3 + (-pt2) * cv * rho2 * pd - (cv * rho2) ^ 2.0 * ptd * pd) * T * s_der) * rho2 / quotient ^ 3.0;
//     pro_der.ddsp := (((-pt2) * T * cvt * rho2 * pd + -2.0 * pt2 * T * cv * rho2 * ptd + (-pt3) * T ^ 2.0 * ptt + 2.0 * pt * T * ptt * cv * rho2 * pd + (-(cv * rho2) ^ 2.0) * pt * pdd + 2.0 * cv * rho * T * pt3 + (cv * rho2) ^ 2.0 * ptd * pd - (-pt2) * cv * rho2 * pd) * p_der - (rho ^ 3.0 * pd ^ 2.0 * T * pt * cvt + 2.0 * (rho2 * rho * pd * T * pt * cv * ptd + rho * pd * T ^ 2.0 * pt2 * ptt) + (-rho2) * rho * pd ^ 2.0 * pt * cv + (-ptt) * rho2 * rho * T * pd ^ 2.0 * cv + (-T) * pt2 * rho2 * rho * cv * pdd + 2.0 * (T * pt2) ^ 2.0 - T ^ 2.0 * pt3 * rho * ptd) * s_der) * quotient / (rho2 * T * pt2);
//     pro_der.h := p_der / rho + T * s_der;
//     pro_der.u := quotient * ((cv * rho2 * pd + pt2 * T - pt * p) * T * s_der + cv * p * p_der);
//     pro_der.d := rho2 * quotient * ((-T) * pt * s_der + cv * p_der);
//     pro_der.T := T * quotient * (pt * p_der + rho2 * pd * s_der);
//   elseif region == 4 then
//     s_liq := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sl_p(p);
//     s_vap := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.sv_p(p);
//     x := if s_vap <> s_liq then (s - s_liq) / (s_vap - s_liq) else 1.0;
//     if p < 16529200.0 then
//       t1 := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps1(p, s_liq);
//       t2 := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tps2(p, s_vap);
//       gl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, t1);
//       gv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, t2);
//       liq := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd(gl);
//       vap := ThermoSysPro.Properties.WaterSteam.Common.gibbsToBoundaryProps3rd(gv);
//       T := t1 + x * (t2 - t1);
//     else
//       T := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.tsat(p);
//       d_liq := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhol_T(T);
//       d_vap := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.rhov_T(T);
//       fl := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(d_liq, T);
//       fv := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(d_vap, T);
//       liq := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd(fl);
//       vap := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToBoundaryProps3rd(fv);
//     end if;
//     dpT := if liq.d <> vap.d then (vap.s - liq.s) * liq.d * vap.d / (liq.d - vap.d) else ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(T);
//     h := h + x * (vap.h - liq.h);
//     rho := liq.d * vap.d / (vap.d + x * (liq.d - vap.d));
//     rho2 := rho ^ 2.0;
//     dxv := if liq.d <> vap.d then liq.d * vap.d / (liq.d - vap.d) else 0.0;
//     dxd := (-dxv) / rho2;
//     dpT := if liq.d <> vap.d then (vap.s - liq.s) * dxv else ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.dptofT(T);
//     dvTl := (liq.pt - dpT) / (liq.d ^ 2.0 * liq.pd);
//     dvTv := (vap.pt - dpT) / (vap.d ^ 2.0 * vap.pd);
//     dxT := (-dxv) * (dvTl + x * (dvTv - dvTl));
//     duTl := liq.cv + (T * liq.pt - p) * dvTl;
//     duTv := vap.cv + (T * vap.pt - p) * dvTv;
//     cv := duTl + x * (duTv - duTl) + dxT * (vap.u - liq.u);
//     dpTT := dxv * (vap.cv / T + (-liq.cv) / T + dvTv * (vap.pt - dpT) - dvTl * (liq.pt - dpT));
//     dxdd := 2.0 * dxv / (rho * rho2);
//     dxTd := dxv ^ 2.0 * (dvTv - dvTl) / rho2;
//     dvTTl := ((liq.ptt - dpTT) / liq.d ^ 2.0 + dvTl * (liq.d * dvTl * (2.0 * liq.pd + liq.d * liq.pdd) + -2.0 * liq.ptd)) / liq.pd;
//     dvTTv := ((vap.ptt - dpTT) / vap.d ^ 2.0 + dvTv * (vap.d * dvTv * (2.0 * vap.pd + vap.d * vap.pdd) + -2.0 * vap.ptd)) / vap.pd;
//     dxTT := (-dxv) * (2.0 * dxT * (dvTv - dvTl) + dvTTl + x * (dvTTv - dvTTl));
//     duTTl := liq.cvt + (liq.pt + T * (2.0 * liq.ptt - liq.d ^ 2.0 * liq.ptd * dvTl) - dpT) * dvTl + (T * liq.pt - p) * dvTTl;
//     duTTv := vap.cvt + (vap.pt + T * (2.0 * vap.ptt - vap.d ^ 2.0 * vap.ptd * dvTv) - dpT) * dvTv + (T * vap.pt - p) * dvTTv;
//     cvt := duTTl + x * (duTTv - duTTl) + 2.0 * dxT * (duTv - duTl) + dxTT * (vap.u - liq.u);
//     detPH := T * dpT ^ 2.0 / rho2;
//     dtps := 1.0 / dpT;
//     ddsp := (-T) * dpT / detPH;
//     ddps := cv / detPH;
//     ptt := dpTT;
//     pro_der.x := if s_vap <> s_liq then s_der / (s_vap - s_liq) else 0.0;
//     pro_der.ddps := p_der * (-rho2) * ((-cvt) * T * dpT + 3.0 * cv * T * ptt + cv * dpT + -2.0 * cv ^ 2.0 * rho) / (dpT ^ 4.0 * T ^ 2.0) + s_der * (T * ptt + -2.0 * cv * rho) * rho2 / (dpT ^ 3.0 * T);
//     pro_der.ddsp := p_der * ((-T) * ptt + 2.0 * cv * rho) / (dpT * T * rho2) + -2.0 * s_der / rho;
//     pro_der.cp := 0.0;
//     pro_der.h := p_der / rho + T * s_der;
//     pro_der.u := p_der * ddps * p / rho2 + (ddsp * p / rho2 + T) * s_der;
//     pro_der.d := ddps * p_der + ddsp * s_der;
//     pro_der.T := dtps * p_der;
//   elseif region == 5 then
//     (T, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.tofps5(p, s, 1e-07);
//     assert( error == 0, \"error in inverse iteration of steam tables\");
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3(p, T);
//     h := R * T * g.tau * g.gtau;
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vt2 := vt ^ 2.0;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cpinv := 1.0 / cp;
//     cp3 := cp ^ 3.0;
//     invcp3 := 1.0 / cp3;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     x := 0.0;
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pro_der.cp := cpinv * T * ((cpt * vt - vtt * cp) * p_der + cpt * s_der);
//     pro_der.x := 0.0;
//     pro_der.ddps := (-rho2) * ((cp3 * vpp + 3.0 * (cp ^ 2.0 * T * vt * vtp + T ^ 2.0 * vtt * cp * vt2) + T * vt2 * vt * cp - T ^ 2.0 * vt2 * vt * cpt) * invcp3 * p_der + T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * s_der);
//     pro_der.ddsp := (-rho2) * (T * (2.0 * vtt * T * vt * cp + cp ^ 2.0 * vtp + cp * vt2 - cpt * T * vt2) * invcp3 * p_der + ((-cpt) * T * vt + cp * vt + T * vtt * cp) * T * invcp3 * s_der);
//     pro_der.h := p_der / rho + T * s_der;
//     pro_der.u := cpinv * ((-p) * (vp * cp + T * vt2) * p_der + (cp - p * vt) * T * s_der);
//     pro_der.d := cpinv * (-rho2) * ((vp * cp + T * vt2) * p_der + vt * T * s_der);
//     pro_der.T := T * cpinv * (vt * p_der + s_der);
//   else
//     assert( false, \"Water_Ps_der: Incorrect region number\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97.Water_Ps_der;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"IF97 region. 0:automatic\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro;
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs f;
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs g;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   elseif region == 3 then
//     (d, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-06);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3(d, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.helmholtzToProps_pT(f);
//     pro.x := if supercritical then -1.0 else 0.0;
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5(p, T);
//     pro := ThermoSysPro.Properties.WaterSteam.Common.gibbsToProps_pT(g);
//     pro.x := if supercritical then -1.0 else 1.0;
//   else
//     assert( false, \"Water_PT: Incorrect region number\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT;
// 
// function ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT_der
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature\";
//   input Integer mode = 0 \"Région IF97 - 0:calcul automatique\";
//   input Real p_der \"Pression\";
//   input Real T_der \"Température\";
//   output ThermoSysPro.Properties.WaterSteam.Common.ThermoProperties_pT pro_der;
//   protected Integer region;
//   protected Boolean supercritical;
//   protected Integer error;
//   protected Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0);
//   protected Real p_aux(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   protected Real T_aux(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   protected Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"specific enthalpy\";
//   protected Real R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"gas constant\";
//   protected Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cpt \"derivative of cp w.r.t. temperature\";
//   protected Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   protected Real cvt \"derivative of cv w.r.t. temperature\";
//   protected Real rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"density\";
//   protected Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\") \"specific entropy\";
//   protected Real pt(quantity = \"DerPressureByTemperature\", unit = \"Pa/K\") \"derivative of pressure wrt temperature\";
//   protected Real pd(quantity = \"DerPressureByDensity\", unit = \"Pa.m3/kg\") \"derivative of pressure wrt density\";
//   protected Real ptt \"2nd derivative of pressure wrt temperature\";
//   protected Real pdd \"2nd derivative of pressure wrt density\";
//   protected Real ptd \"mixed derivative of pressure w.r.t. density and temperature\";
//   protected Real vt \"derivative of specific volume w.r.t. temperature\";
//   protected Real vp \"derivative of specific volume w.r.t. pressure\";
//   protected Real vtt \"2nd derivative of specific volume w.r.t. temperature\";
//   protected Real vpp \"2nd derivative of specific volume w.r.t. pressure\";
//   protected Real vtp \"mixed derivative of specific volume w.r.t. pressure and temperature\";
//   protected Real x \"dryness fraction\";
//   protected Real dpT \"dp/dT derivative of saturation curve\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.GibbsDerivs3rd g \"dimensionless Gibbs funcion and dervatives wrt pi and tau\";
//   protected ThermoSysPro.Properties.WaterSteam.Common.HelmholtzDerivs3rd f \"dimensionless Helmholtz funcion and dervatives wrt delta and tau\";
//   protected Real vp3 \"vp^3\";
//   protected Real ivp3 \"1/vp3\";
//   protected Real v(quantity = \"SpecificVolume\", unit = \"m3/kg\", min = 0.0);
//   protected Real rho2;
//   protected Real quotient;
//   protected Real quotient2;
//   protected Real pd2;
//   protected Real pd3;
//   protected Real pt2;
//   protected Real pt3;
// algorithm
//   supercritical := p > 22064000.0;
//   region := ThermoSysPro.Properties.WaterSteam.BaseIF97.Regions.region_pT(p, T, mode);
//   R := 461.526;
//   if region == 1 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g1L3(p, T);
//     x := 0.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   elseif region == 2 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g2L3(p, T);
//     x := 1.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   elseif region == 3 then
//     (rho, error) := ThermoSysPro.Properties.WaterSteam.BaseIF97.Inverses.dofpt3(p, T, 1e-07);
//     f := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.f3L3(rho, T);
//     rho2 := rho ^ 2.0;
//     h := R * T * (f.tau * f.ftau + f.delta * f.fdelta);
//     s := R * (f.tau * f.ftau - f.f);
//     pd := R * T * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta);
//     pd2 := pd ^ 2.0;
//     pd3 := pd * pd2;
//     pt := R * rho * f.delta * (f.fdelta - f.tau * f.fdeltatau);
//     pt2 := pt ^ 2.0;
//     pt3 := pt ^ 3.0;
//     cv := R * (-f.tau ^ 2.0) * f.ftautau;
//     x := 0.0;
//     pdd := (2.0 * f.fdelta + 4.0 * f.delta * f.fdeltadelta + f.delta ^ 2.0 * f.fdeltadeltadelta) * R * T * f.delta / rho;
//     ptt := f.fdeltatautau * R * rho * f.delta * f.tau ^ 2.0 / T;
//     ptd := R * f.delta * (2.0 * f.fdelta + f.delta * f.fdeltadelta + -2.0 * f.tau * f.fdeltatau - f.delta * f.tau * f.fdeltadeltatau);
//     cvt := (2.0 * f.ftautau + f.tau * f.ftautautau) * R * f.tau ^ 2.0 / T;
//     cpt := (cvt * pd + cv * ptd + (pt + 2.0 * T * ptt) * pt / rho2 - pt * ptd) / pd;
//     pro_der.x := 0.0;
//     quotient := 1.0 / (pd * rho2);
//     quotient2 := quotient / (pd2 * rho);
//     pro_der.duTp := quotient2 * (((-rho) * pd2 * T * ptt + (-ptd) * rho * pd * p + 2.0 * rho * pd * pt * T * ptd + (-rho) * pd2 * pt + 2.0 * pt * pd * p + -2.0 * pd * pt2 * T + pt * pdd * rho * p - pdd * rho * pt2 * T) * p_der + (rho2 * rho * pd3 * cvt + 3.0 * rho * pd2 * pt * T * ptt + 2.0 * ptd * rho * pd * pt * p + -3.0 * ptd * rho * pd * pt2 * T + rho * pd2 * (pt2 - ptt * p) + -2.0 * pt2 * pd * p + 2.0 * T * pt3 * pd + T * pt3 * pdd * rho - pt2 * pdd * rho * p) * T_der);
//     pro_der.dupT := quotient2 * ((rho * (pd2 - pd * T * ptd) + -2.0 * pd * p + 2.0 * pd * T * pt + pdd * rho * (T * pt - p)) * p_der - (rho * pd2 * T * ptt + ptd * rho * pd * p + -2.0 * rho * pd * pt * T * ptd + rho * pd2 * pt + -2.0 * pt * pd * p + 2.0 * pd * pt2 * T + pdd * rho * pt2 * T - pt * pdd * rho * p) * T_der);
//     pro_der.ddpT := ((-pdd) * p_der + (pt * pdd - ptd * pd) * T_der) / pd3;
//     pro_der.ddTp := ((pt * pdd - ptd * pd) * p_der + ((-ptt) * pd2 + 2.0 * pt * ptd * pd + (-pt2) * pdd) * T_der) / pd3;
//     pro_der.cp := quotient2 * ((-T) * (rho * pd2 * ptt + -2.0 * rho * pd * pt * ptd + 2.0 * pd * pt2 + pdd * rho * pt ^ 2.0) * p_der + (rho2 * rho * pd3 * cvt + 3.0 * rho * pd2 * pt * T * ptt + rho * pd2 * pt2 + -3.0 * ptd * rho * pd * pt2 * T + 2.0 * T * pt3 * pd + T * pt3 * pdd * rho) * T_der);
//     pro_der.s := quotient * ((-pt) * p_der + (cv * rho2 * pd / T + pt2) * T_der);
//     pro_der.u := quotient * ((rho * pd + (-T) * pt) * p_der + (cv * rho2 * pd + pt2 * T - pt * p) * T_der);
//     pro_der.h := quotient * (((-rho) * pd + T * pt) * p_der + (rho2 * pd * cv + T * pt ^ 2.0) * T_der);
//     pro_der.d := (p_der - pt * T_der) / pd;
//   elseif region == 5 then
//     g := ThermoSysPro.Properties.WaterSteam.BaseIF97.Basic.g5L3(p, T);
//     x := 1.0;
//     h := R * T * g.tau * g.gtau;
//     s := R * (g.tau * g.gtau - g.g);
//     rho := p / (g.gpi * g.pi * T * R);
//     rho2 := rho ^ 2.0;
//     vt := (g.pi * g.gpi - g.tau * g.pi * g.gpitau) * R / p;
//     vp := g.gpipi * g.pi ^ 2.0 * R * T / p ^ 2.0;
//     cp := (-R) * g.tau ^ 2.0 * g.gtautau;
//     cv := R * ((-g.tau ^ 2.0) * g.gtautau + (g.gpi - g.tau * g.gpitau) ^ 2.0 / g.gpipi);
//     vtt := g.gpitautau * g.tau ^ 2.0 * R * g.pi / (T * p);
//     vtp := (g.gpipi - g.tau * g.gpipitau) * R * g.pi ^ 2.0 / p ^ 2.0;
//     vpp := g.gpipipi * R * T * g.pi ^ 3.0 / p ^ 3.0;
//     cpt := (2.0 * g.gtautau + g.tau * g.gtautautau) * R * g.tau ^ 2.0 / T;
//     pt := (g.tau * g.gpitau - g.gpi) * g.p / (g.pi * g.gpipi * g.T);
//     pd := (-g.R) * g.T * g.gpi ^ 2.0 / g.gpipi;
//     v := 1.0 / rho;
//     vp3 := vp ^ 3.0;
//     ivp3 := 1.0 / vp3;
//     ptt := ((-vtt) * vp ^ 2.0 + 2.0 * vt * vtp * vp + (-vt ^ 2.0) * vpp) * ivp3;
//     pdd := (-vpp) * ivp3 / rho2 ^ 2.0 + -2.0 * v * pd;
//     ptd := (vtp * vp - vt * vpp) * ivp3 / rho2;
//     cvt := (vp3 * cpt + (vp * vt) ^ 2.0 + 3.0 * vp ^ 2.0 * T * vt * vtt + -3.0 * vtp * vp * T * vt ^ 2.0 + T * vt ^ 3.0 * vpp) * ivp3;
//     pro_der.x := 0.0;
//     pro_der.duTp := ((-T) * vtt + (-p) * vtp - vt) * p_der + (cpt - p * vtt) * T_der;
//     pro_der.dupT := ((-T) * vtp + (-vp) - p * vpp) * p_der + ((-T) * vtt + (-p) * vtp - vt) * T_der;
//     pro_der.ddpT := (-rho2) * (vpp * p_der + vtp * T_der);
//     pro_der.ddTp := (-rho2) * (vtp * p_der + vtt * T_der);
//     pro_der.cp := (-T) * vtt * p_der + cpt * T_der;
//     pro_der.s := (-vt) * p_der + T_der * cp / T;
//     pro_der.u := (v - T * vt) * p_der + (cp - p * vt) * T_der;
//     pro_der.h := (v - T * vt) * p_der + cp * T_der;
//     pro_der.d := (-rho2) * (vp * p_der + vt * T_der);
//   else
//     assert( false, \"Water_pT_der: error in region computation of IF97 steam tables(p = \" + String(p, 0, true, 6) + \", T = \" + String(T, 0, true, 6) + \", region = \" + String(region, 0, true) + \")\");
//   end if;
// end ThermoSysPro.Properties.WaterSteam.IF97_packages.IF97_wAJ.Water_PT_der;
// 
// class ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1
//   parameter Real stodolaTurbine.Cst = 10000000.0 \"Stodola's ellipse coefficient\";
//   parameter Real stodolaTurbine.W_fric = 0.0 \"Power losses due to hydrodynamic friction (percent)\";
//   parameter Real stodolaTurbine.eta_stato = 1.0 \"Efficiency to account for cinetic losses (<= 1) (s.u.)\";
//   parameter Real stodolaTurbine.area_nz(quantity = \"Area\", unit = \"m2\") = 1.0 \"Nozzle area\";
//   parameter Real stodolaTurbine.eta_nz = 1.0 \"Nozzle efficency (eta_nz < 1 - turbine with nozzle - eta_nz = 1 - turbine without nozzle)\";
//   parameter Real stodolaTurbine.Qmax(quantity = \"MassFlowRate\", unit = \"kg/s\") = 1.0 \"Maximum mass flow through the turbine\";
//   parameter Real stodolaTurbine.eta_is_nom = 0.8 \"Nominal isentropic efficiency\";
//   parameter Real stodolaTurbine.eta_is_min = 0.35 \"Minimum isentropic efficiency\";
//   parameter Real stodolaTurbine.a = -1.3889 \"x^2 coefficient of the isentropic efficiency characteristics eta_is=f(Q/Qmax)\";
//   parameter Real stodolaTurbine.b = 2.6944 \"x coefficient of the isentropic efficiency characteristics eta_is=f(Q/Qmax)\";
//   parameter Real stodolaTurbine.c = -0.5056 \"Constant coefficient of the isentropic efficiency characteristics eta_is=f(Q/Qmax)\";
//   parameter Integer stodolaTurbine.fluid = 1 \"1: water/steam - 2: C3H3F5\";
//   parameter Integer stodolaTurbine.mode_e = 0 \"IF97 region before expansion. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   parameter Integer stodolaTurbine.mode_s = 0 \"IF97 region after expansion. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   parameter Integer stodolaTurbine.mode_ps = 0 \"IF97 region after isentropic expansion. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   Real stodolaTurbine.eta_is(start = 0.85) \"Isentropic efficiency\";
//   Real stodolaTurbine.W(quantity = \"Power\", unit = \"W\") \"Mechanical power produced by the turbine\";
//   Real stodolaTurbine.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate\";
//   Real stodolaTurbine.His(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid specific enthalpy after isentropic expansion\";
//   Real stodolaTurbine.Hrs(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid specific enthalpy after the real expansion\";
//   Real stodolaTurbine.Pe(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 1000000000.0, start = 1000000.0, nominal = 1000000.0) \"Pressure at the inlet\";
//   Real stodolaTurbine.Ps(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 1000000000.0, start = 1000000.0, nominal = 1000000.0) \"Pressure at the outlet\";
//   Real stodolaTurbine.Te(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature at the inlet\";
//   Real stodolaTurbine.Ts(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Temperature at the outlet\";
//   Real stodolaTurbine.Vs(quantity = \"Velocity\", unit = \"m/s\") \"Fluid velocity at the outlet\";
//   Real stodolaTurbine.rhos(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, start = 200.0) \"Fluid density at the outlet\";
//   Real stodolaTurbine.xm(min = 0.0, start = 1.0) \"Average vapor mass fraction\";
//   Real stodolaTurbine.proe.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real stodolaTurbine.proe.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real stodolaTurbine.proe.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real stodolaTurbine.proe.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real stodolaTurbine.proe.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real stodolaTurbine.proe.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.proe.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.proe.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.proe.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.proe.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   Real stodolaTurbine.pros.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real stodolaTurbine.pros.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real stodolaTurbine.pros.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real stodolaTurbine.pros.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real stodolaTurbine.pros.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real stodolaTurbine.pros.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.pros.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.pros.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.pros.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.pros.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   Real stodolaTurbine.Ce.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real stodolaTurbine.Ce.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real stodolaTurbine.Ce.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real stodolaTurbine.Ce.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   input Boolean stodolaTurbine.Ce.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean stodolaTurbine.Ce.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real stodolaTurbine.Cs.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real stodolaTurbine.Cs.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real stodolaTurbine.Cs.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real stodolaTurbine.Cs.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   output Boolean stodolaTurbine.Cs.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean stodolaTurbine.Cs.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real stodolaTurbine.props.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real stodolaTurbine.props.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real stodolaTurbine.props.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real stodolaTurbine.props.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1000000.0) \"Specific enthalpy\";
//   Real stodolaTurbine.props.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
//   Real stodolaTurbine.props.ddsp(quantity = \"DerDensityByEntropy\", unit = \"kg2.K/(m3.J)\") \"Derivative of the density wrt. specific entropy at constant pressure\";
//   Real stodolaTurbine.props.ddps(unit = \"s2/m2\") \"Derivative of the density wrt. pressure at constant specific entropy\";
//   Real stodolaTurbine.props.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   Real stodolaTurbine.M.Ctr(quantity = \"Torque\", unit = \"N.m\") \"Torque\";
//   Real stodolaTurbine.M.w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity\";
//   output Real stodolaTurbine.MechPower.signal;
//   Real stodolaTurbine.pros1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real stodolaTurbine.pros1.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real stodolaTurbine.pros1.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real stodolaTurbine.pros1.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real stodolaTurbine.pros1.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real stodolaTurbine.pros1.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.pros1.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.pros1.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real stodolaTurbine.pros1.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real stodolaTurbine.pros1.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   parameter Real puitsP.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 4500000.0 \"Sink pressure\";
//   parameter Real puitsP.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 290.0 \"Sink temperature (active if option_temperature=1)\";
//   parameter Real puitsP.h0(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) = 100000.0 \"Sink specific enthalpy (active if option_temperature=2)\";
//   parameter Integer puitsP.option_temperature = 1 \"1:temperature fixed - 2:specific enthalpy fixed\";
//   parameter Integer puitsP.mode = 0 \"IF97 region. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   Real puitsP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real puitsP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate\";
//   Real puitsP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real puitsP.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid enthalpy\";
//   Real puitsP.pro.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real puitsP.pro.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real puitsP.pro.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real puitsP.pro.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real puitsP.pro.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real puitsP.pro.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real puitsP.pro.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real puitsP.pro.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real puitsP.pro.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real puitsP.pro.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   input Real puitsP.IPressure.signal;
//   input Real puitsP.ISpecificEnthalpy.signal;
//   Real puitsP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real puitsP.C.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real puitsP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real puitsP.C.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   input Boolean puitsP.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean puitsP.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real puitsP.ITemperature.signal;
//   parameter Real sourceP.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 6500000.0 \"Source pressure\";
//   parameter Real sourceP.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 290.0 \"Source temperature (active if option_temperature=1)\";
//   parameter Real sourceP.h0(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) = 3000000.0 \"Source specific enthalpy (active if option_temperature=2)\";
//   parameter Integer sourceP.option_temperature = 2 \"1:temperature fixed - 2:specific enthalpy fixed\";
//   parameter Integer sourceP.mode = 2 \"IF97 region. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   Real sourceP.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceP.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate\";
//   Real sourceP.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceP.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid enthalpy\";
//   Real sourceP.pro.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real sourceP.pro.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real sourceP.pro.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real sourceP.pro.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real sourceP.pro.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real sourceP.pro.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real sourceP.pro.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real sourceP.pro.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real sourceP.pro.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real sourceP.pro.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   input Real sourceP.IPressure.signal;
//   input Real sourceP.ISpecificEnthalpy.signal;
//   Real sourceP.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceP.C.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real sourceP.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real sourceP.C.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceP.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceP.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceP.ITemperature.signal;
//   parameter Real DynamicCentrifugalPump1.VRotn(quantity = \"Rotation velocity\", unit = \"1/min\") = 1400.0 \"Nominal rotational speed\";
//   parameter Real DynamicCentrifugalPump1.VRot0(quantity = \"Rotation velocity\", unit = \"1/min\") = 0.0 \"Initial rotational speed (active if steady_state_mech=false)\";
//   parameter Real DynamicCentrifugalPump1.V(quantity = \"Volume\", unit = \"m3\") = 1.0 \"Pump volume (only if dynamic_energy_balance = true)\";
//   parameter Real DynamicCentrifugalPump1.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = 10.0 \"Pump moment of inertia\";
//   parameter Real DynamicCentrifugalPump1.Cf0 = 10.0 \"Mechanical friction coefficient\";
//   parameter Boolean DynamicCentrifugalPump1.steady_state_mech = true \"true: start from steady state - false: start from VRot0\";
//   parameter Boolean DynamicCentrifugalPump1.dynamic_energy_balance = true \"true: dynamic energy balance equation - false: static energy balance equation\";
//   parameter Boolean DynamicCentrifugalPump1.continuous_flow_reversal = false \"true: continuous flow reversal - false: discontinuous flow reversal\";
//   parameter Integer DynamicCentrifugalPump1.fluid = 1 \"1: water/steam - 2: C3H3F5\";
//   parameter Real DynamicCentrifugalPump1.p_rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 0.0 \"If > 0, fixed fluid density\";
//   parameter Integer DynamicCentrifugalPump1.mode = 0 \"IF97 region. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   parameter Real DynamicCentrifugalPump1.a1 = -88.67 \"x^2 coef. of the pump characteristics hn = f(vol_flow) (s2/m5)\";
//   parameter Real DynamicCentrifugalPump1.a2 = 0.0 \"x coef. of the pump characteristics hn = f(vol_flow) (s/m2)\";
//   parameter Real DynamicCentrifugalPump1.a3 = 43.15 \"Constant coef. of the pump characteristics hn = f(vol_flow) (m)\";
//   parameter Real DynamicCentrifugalPump1.b1 = -3.7751 \"x^2 coef. of the pump efficiency characteristics rh = f(vol_flow) (s2/m6)\";
//   parameter Real DynamicCentrifugalPump1.b2 = 3.61 \"x coef. of the pump efficiency characteristics rh = f(vol_flow) (s/m3)\";
//   parameter Real DynamicCentrifugalPump1.b3 = -0.0075464 \"Constant coef. of the pump efficiency characteristics rh = f(vol_flow) (s.u.)\";
//   protected constant Real DynamicCentrifugalPump1.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.80665 \"Gravity constant\";
//   protected constant Real DynamicCentrifugalPump1.pi = 3.14159265358979 \"pi\";
//   protected parameter Real DynamicCentrifugalPump1.eps = 1e-06 \"Small number\";
//   protected parameter Real DynamicCentrifugalPump1.rhmin = 0.05 \"Minimum efficiency to avoid zero crossings\";
//   protected parameter Real DynamicCentrifugalPump1.Qeps(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.001 \"Small mass flow for continuous flow reversal\";
//   Real DynamicCentrifugalPump1.rh \"Hydraulic efficiency\";
//   Real DynamicCentrifugalPump1.hn(quantity = \"Length\", unit = \"m\", min = 0.0, start = 10.0) \"Pump head\";
//   Real DynamicCentrifugalPump1.w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular speed\";
//   Real DynamicCentrifugalPump1.R \"Ratio VRot/VRotn (s.u.)\";
//   Real DynamicCentrifugalPump1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 50.0, fixed = true) \"Mass flow rate\";
//   Real DynamicCentrifugalPump1.Qv(quantity = \"VolumeFlowRate\", unit = \"m3/s\", start = 0.5) \"Volume flow rate\";
//   Real DynamicCentrifugalPump1.Cm(quantity = \"Torque\", unit = \"N.m\") \"Motor torque\";
//   Real DynamicCentrifugalPump1.Ch(quantity = \"Torque\", unit = \"N.m\") \"Hydraulic torque\";
//   Real DynamicCentrifugalPump1.Cf(quantity = \"Torque\", unit = \"N.m\") \"Mechanical friction torque\";
//   Real DynamicCentrifugalPump1.Wm(quantity = \"Power\", unit = \"W\") \"Motor power\";
//   Real DynamicCentrifugalPump1.Wh(quantity = \"Power\", unit = \"W\") \"Hydraulic power\";
//   Real DynamicCentrifugalPump1.Wf(quantity = \"Power\", unit = \"W\") \"Mechanical friction power\";
//   Real DynamicCentrifugalPump1.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Fluid density\";
//   Real DynamicCentrifugalPump1.deltaP(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = -1000000000.0, max = 1000000000.0, start = 100000.0, nominal = 100000.0) \"Pressure variation between the outlet and the inlet\";
//   Real DynamicCentrifugalPump1.deltaH(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Specific enthalpy variation between the outlet and the inlet\";
//   Real DynamicCentrifugalPump1.Pm(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid average pressure\";
//   Real DynamicCentrifugalPump1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid average specific enthalpy\";
//   Real DynamicCentrifugalPump1.pro.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real DynamicCentrifugalPump1.pro.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real DynamicCentrifugalPump1.pro.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real DynamicCentrifugalPump1.pro.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real DynamicCentrifugalPump1.pro.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real DynamicCentrifugalPump1.pro.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real DynamicCentrifugalPump1.pro.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real DynamicCentrifugalPump1.pro.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real DynamicCentrifugalPump1.pro.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real DynamicCentrifugalPump1.pro.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   Real DynamicCentrifugalPump1.M.Ctr(quantity = \"Torque\", unit = \"N.m\") \"Torque\";
//   Real DynamicCentrifugalPump1.M.w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity\";
//   Real DynamicCentrifugalPump1.C1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real DynamicCentrifugalPump1.C1.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real DynamicCentrifugalPump1.C1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real DynamicCentrifugalPump1.C1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   input Boolean DynamicCentrifugalPump1.C1.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean DynamicCentrifugalPump1.C1.b \"Pseudo-variable for the verification of the connection orientation\";
//   Real DynamicCentrifugalPump1.C2.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 300000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real DynamicCentrifugalPump1.C2.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real DynamicCentrifugalPump1.C2.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real DynamicCentrifugalPump1.C2.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   output Boolean DynamicCentrifugalPump1.C2.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean DynamicCentrifugalPump1.C2.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   Real DynamicCentrifugalPump1.VRot(quantity = \"Rotation velocity\", unit = \"1/min\", start = DynamicCentrifugalPump1.VRotn) \"Rotational speed\";
//   parameter Real Shaft1.Ke = 0.2 \"Elasticity coefficient (s.u.)\";
//   parameter Real Shaft1.D = 0.3 \"Damping coefficient (n.u.)\";
//   parameter Boolean Shaft1.steady_state_mech = true \"true: start from steady state - false: start from delta=0\";
//   Real Shaft1.delta(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = 0.0) \"Torsion angle\";
//   Real Shaft1.w_rel(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Relative angular speed between the two extremities of the shaft\";
//   Real Shaft1.Ctr(quantity = \"Torque\", unit = \"N.m\") \"Transmitted torque\";
//   Real Shaft1.C2.Ctr(quantity = \"Torque\", unit = \"N.m\") \"Torque\";
//   Real Shaft1.C2.w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity\";
//   Real Shaft1.C1.Ctr(quantity = \"Torque\", unit = \"N.m\") \"Torque\";
//   Real Shaft1.C1.w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity\";
//   parameter Real puitsP1.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, fixed = false, nominal = 1000000.0) = 4500000.0 \"Sink pressure\";
//   parameter Real puitsP1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 290.0 \"Sink temperature (active if option_temperature=1)\";
//   parameter Real puitsP1.h0(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) = 100000.0 \"Sink specific enthalpy (active if option_temperature=2)\";
//   parameter Integer puitsP1.option_temperature = 1 \"1:temperature fixed - 2:specific enthalpy fixed\";
//   parameter Integer puitsP1.mode = 0 \"IF97 region. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   Real puitsP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real puitsP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate\";
//   Real puitsP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real puitsP1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid enthalpy\";
//   Real puitsP1.pro.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real puitsP1.pro.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real puitsP1.pro.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real puitsP1.pro.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real puitsP1.pro.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real puitsP1.pro.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real puitsP1.pro.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real puitsP1.pro.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real puitsP1.pro.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real puitsP1.pro.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   input Real puitsP1.IPressure.signal;
//   input Real puitsP1.ISpecificEnthalpy.signal;
//   Real puitsP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real puitsP1.C.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real puitsP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real puitsP1.C.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   input Boolean puitsP1.C.a = true \"Pseudo-variable for the verification of the connection orientation\";
//   output Boolean puitsP1.C.b \"Pseudo-variable for the verification of the connection orientation\";
//   input Real puitsP1.ITemperature.signal;
//   parameter Real sourceP1.P0(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) = 1000000.0 \"Source pressure\";
//   parameter Real sourceP1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) = 290.0 \"Source temperature (active if option_temperature=1)\";
//   parameter Real sourceP1.h0(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) = 3000000.0 \"Source specific enthalpy (active if option_temperature=2)\";
//   parameter Integer sourceP1.option_temperature = 2 \"1:temperature fixed - 2:specific enthalpy fixed\";
//   parameter Integer sourceP1.mode = 2 \"IF97 region. 1:liquid - 2:steam - 4:saturation line - 0:automatic\";
//   Real sourceP1.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure\";
//   Real sourceP1.Q(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate\";
//   Real sourceP1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 500.0) \"Fluid temperature\";
//   Real sourceP1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 1000000.0, nominal = 1500000.0) \"Fluid enthalpy\";
//   Real sourceP1.pro.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 200.0, max = 6000.0, start = 300.0, nominal = 320.0) \"Temperature\";
//   Real sourceP1.pro.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 1e-09, max = 100000.0, nominal = 998.0) \"Density\";
//   Real sourceP1.pro.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific inner energy\";
//   Real sourceP1.pro.s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
//   Real sourceP1.pro.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 1e-09, max = 1e+60, nominal = 1000.0) \"Specific heat capacity at constant presure\";
//   Real sourceP1.pro.ddhp(unit = \"kg.s2/m5\") \"Derivative of density wrt. specific enthalpy at constant pressure\";
//   Real sourceP1.pro.ddph(unit = \"s2/m2\") \"Derivative of density wrt. pressure at constant specific enthalpy\";
//   Real sourceP1.pro.duph(unit = \"m3/kg\") \"Derivative of specific inner energy wrt. pressure at constant specific enthalpy\";
//   Real sourceP1.pro.duhp(unit = \"1\") \"Derivative of specific inner energy wrt. specific enthalpy at constant pressure\";
//   Real sourceP1.pro.x(quantity = \"Mass fraction\", unit = \"1\") \"Vapor mass fraction\";
//   input Real sourceP1.IPressure.signal;
//   input Real sourceP1.ISpecificEnthalpy.signal;
//   Real sourceP1.C.P(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 100.0, max = 1000000000.0, start = 100000.0, nominal = 1000000.0) \"Fluid pressure in the control volume\";
//   Real sourceP1.C.h_vol(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Fluid specific enthalpy in the control volume\";
//   Real sourceP1.C.Q(quantity = \"MassFlowRate\", unit = \"kg/s\", start = 500.0) \"Mass flow rate of the fluid crossing the boundary of the control volume\";
//   Real sourceP1.C.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -1000000.0, max = 100000000.0, start = 100000.0, nominal = 1500000.0) \"Specific enthalpy of the fluid crossing the boundary of the control volume\";
//   output Boolean sourceP1.C.a \"Pseudo-variable for the verification of the connection orientation\";
//   input Boolean sourceP1.C.b = true \"Pseudo-variable for the verification of the connection orientation\";
//   input Real sourceP1.ITemperature.signal;
// initial equation
//   der(DynamicCentrifugalPump1.w) = 0.0;
//   der(DynamicCentrifugalPump1.h) = 0.0;
//   der(Shaft1.delta) = 0.0;
// equation
//   stodolaTurbine.M.Ctr * stodolaTurbine.M.w = stodolaTurbine.W;
//   stodolaTurbine.Pe = stodolaTurbine.Ce.P;
//   stodolaTurbine.Ps = stodolaTurbine.Cs.P;
//   stodolaTurbine.Ce.Q = stodolaTurbine.Cs.Q;
//   stodolaTurbine.Q = stodolaTurbine.Ce.Q;
//   0.0 = stodolaTurbine.Ce.h - stodolaTurbine.Ce.h_vol;
//   stodolaTurbine.eta_is = if stodolaTurbine.Q < stodolaTurbine.Qmax then max(stodolaTurbine.eta_is_min, stodolaTurbine.a * (stodolaTurbine.Q / stodolaTurbine.Qmax) ^ 2.0 + stodolaTurbine.b * stodolaTurbine.Q / stodolaTurbine.Qmax + stodolaTurbine.c) else stodolaTurbine.eta_is_nom;
//   stodolaTurbine.xm = stodolaTurbine.proe.x / 2.0 + stodolaTurbine.pros1.x / 2.0;
//   stodolaTurbine.Q = sqrt((stodolaTurbine.Pe ^ 2.0 - stodolaTurbine.Ps ^ 2.0) / (stodolaTurbine.proe.x * stodolaTurbine.Te * stodolaTurbine.Cst));
//   stodolaTurbine.Hrs - stodolaTurbine.Ce.h = stodolaTurbine.xm * stodolaTurbine.eta_is * (stodolaTurbine.His - stodolaTurbine.Ce.h);
//   stodolaTurbine.Vs = stodolaTurbine.Q / (stodolaTurbine.area_nz * stodolaTurbine.rhos);
//   stodolaTurbine.Cs.h - stodolaTurbine.Hrs = (1.0 - stodolaTurbine.eta_nz) * stodolaTurbine.Vs ^ 2.0 / 2.0;
//   stodolaTurbine.W = stodolaTurbine.Q * stodolaTurbine.eta_stato * (stodolaTurbine.Ce.h - stodolaTurbine.Cs.h) * (1.0 + (-stodolaTurbine.W_fric) / 100.0);
//   stodolaTurbine.MechPower.signal = stodolaTurbine.W;
//   stodolaTurbine.proe = ThermoSysPro.Properties.Fluid.Ph(stodolaTurbine.Pe, stodolaTurbine.Ce.h, stodolaTurbine.mode_e, stodolaTurbine.fluid);
//   stodolaTurbine.Te = stodolaTurbine.proe.T;
//   stodolaTurbine.pros1 = ThermoSysPro.Properties.Fluid.Ph(stodolaTurbine.Ps, stodolaTurbine.Hrs, stodolaTurbine.mode_s, stodolaTurbine.fluid);
//   stodolaTurbine.pros = ThermoSysPro.Properties.Fluid.Ph(stodolaTurbine.Ps, stodolaTurbine.Cs.h, stodolaTurbine.mode_s, stodolaTurbine.fluid);
//   stodolaTurbine.Ts = stodolaTurbine.pros.T;
//   stodolaTurbine.rhos = stodolaTurbine.pros.d;
//   stodolaTurbine.props = ThermoSysPro.Properties.Fluid.Ps(stodolaTurbine.Ps, stodolaTurbine.proe.s, stodolaTurbine.mode_ps, stodolaTurbine.fluid);
//   stodolaTurbine.His = stodolaTurbine.props.h;
//   puitsP.C.P = puitsP.P;
//   puitsP.C.Q = puitsP.Q;
//   puitsP.C.h_vol = puitsP.h;
//   puitsP.IPressure.signal = puitsP.P0;
//   puitsP.P = puitsP.IPressure.signal;
//   puitsP.ITemperature.signal = puitsP.T0;
//   puitsP.ISpecificEnthalpy.signal = puitsP.h0;
//   puitsP.T = puitsP.ITemperature.signal;
//   puitsP.h = ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT(puitsP.P, puitsP.T, 0);
//   puitsP.pro = ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph(puitsP.P, puitsP.h, puitsP.mode);
//   sourceP.C.P = sourceP.P;
//   sourceP.C.Q = sourceP.Q;
//   sourceP.C.h_vol = sourceP.h;
//   sourceP.IPressure.signal = sourceP.P0;
//   sourceP.P = sourceP.IPressure.signal;
//   sourceP.ITemperature.signal = sourceP.T0;
//   sourceP.ISpecificEnthalpy.signal = sourceP.h0;
//   sourceP.h = sourceP.ISpecificEnthalpy.signal;
//   sourceP.T = sourceP.pro.T;
//   sourceP.pro = ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph(sourceP.P, sourceP.h, sourceP.mode);
//   DynamicCentrifugalPump1.Cm = DynamicCentrifugalPump1.M.Ctr;
//   DynamicCentrifugalPump1.w = DynamicCentrifugalPump1.M.w;
//   DynamicCentrifugalPump1.deltaP = DynamicCentrifugalPump1.C2.P - DynamicCentrifugalPump1.C1.P;
//   DynamicCentrifugalPump1.deltaH = DynamicCentrifugalPump1.C2.h - DynamicCentrifugalPump1.C1.h;
//   DynamicCentrifugalPump1.C1.Q = DynamicCentrifugalPump1.C2.Q;
//   DynamicCentrifugalPump1.Q = DynamicCentrifugalPump1.C1.Q;
//   DynamicCentrifugalPump1.Q = DynamicCentrifugalPump1.Qv * DynamicCentrifugalPump1.rho;
//   DynamicCentrifugalPump1.deltaP = 9.80665 * DynamicCentrifugalPump1.rho * DynamicCentrifugalPump1.hn;
//   0.0 = if DynamicCentrifugalPump1.Q > 0.0 then DynamicCentrifugalPump1.C1.h - DynamicCentrifugalPump1.C1.h_vol else DynamicCentrifugalPump1.C2.h - DynamicCentrifugalPump1.C2.h_vol;
//   DynamicCentrifugalPump1.V * DynamicCentrifugalPump1.rho * der(DynamicCentrifugalPump1.h) = (-DynamicCentrifugalPump1.Q) * DynamicCentrifugalPump1.deltaH + DynamicCentrifugalPump1.Wh + DynamicCentrifugalPump1.Wf;
//   DynamicCentrifugalPump1.VRot = 9.54929658551372 * DynamicCentrifugalPump1.w;
//   DynamicCentrifugalPump1.R = DynamicCentrifugalPump1.VRot / DynamicCentrifugalPump1.VRotn;
//   DynamicCentrifugalPump1.hn = DynamicCentrifugalPump1.a1 * DynamicCentrifugalPump1.Qv * abs(DynamicCentrifugalPump1.Qv) + DynamicCentrifugalPump1.a2 * DynamicCentrifugalPump1.Qv * DynamicCentrifugalPump1.R + DynamicCentrifugalPump1.a3 * DynamicCentrifugalPump1.R * abs(DynamicCentrifugalPump1.R);
//   DynamicCentrifugalPump1.rh = max(if noEvent(abs(DynamicCentrifugalPump1.R) > DynamicCentrifugalPump1.eps) then DynamicCentrifugalPump1.b1 * DynamicCentrifugalPump1.Qv ^ 2.0 / DynamicCentrifugalPump1.R ^ 2.0 + DynamicCentrifugalPump1.b2 * DynamicCentrifugalPump1.Qv / DynamicCentrifugalPump1.R + DynamicCentrifugalPump1.b3 else DynamicCentrifugalPump1.b3, DynamicCentrifugalPump1.rhmin);
//   DynamicCentrifugalPump1.J * der(DynamicCentrifugalPump1.w) = DynamicCentrifugalPump1.Cm + (-DynamicCentrifugalPump1.Cf) - DynamicCentrifugalPump1.Ch;
//   DynamicCentrifugalPump1.Wm = DynamicCentrifugalPump1.Cm * DynamicCentrifugalPump1.w;
//   DynamicCentrifugalPump1.Wh = DynamicCentrifugalPump1.Qv * DynamicCentrifugalPump1.deltaP / DynamicCentrifugalPump1.rh;
//   DynamicCentrifugalPump1.Wh = DynamicCentrifugalPump1.Ch * DynamicCentrifugalPump1.w;
//   DynamicCentrifugalPump1.Cf = if noEvent(abs(DynamicCentrifugalPump1.R) < 1.0) then ThermoSysPro.Functions.SmoothSign(DynamicCentrifugalPump1.R, 100) * DynamicCentrifugalPump1.Cf0 * (1.0 - abs(DynamicCentrifugalPump1.R)) else 0.0;
//   DynamicCentrifugalPump1.Wf = DynamicCentrifugalPump1.Cf * DynamicCentrifugalPump1.w;
//   DynamicCentrifugalPump1.Pm = DynamicCentrifugalPump1.C1.P / 2.0 + DynamicCentrifugalPump1.C2.P / 2.0;
//   DynamicCentrifugalPump1.h = DynamicCentrifugalPump1.C1.h / 2.0 + DynamicCentrifugalPump1.C2.h / 2.0;
//   DynamicCentrifugalPump1.pro = ThermoSysPro.Properties.Fluid.Ph(DynamicCentrifugalPump1.Pm, DynamicCentrifugalPump1.h, DynamicCentrifugalPump1.mode, DynamicCentrifugalPump1.fluid);
//   DynamicCentrifugalPump1.rho = DynamicCentrifugalPump1.pro.d;
//   Shaft1.w_rel = Shaft1.C1.w - Shaft1.C2.w;
//   der(Shaft1.delta) = Shaft1.w_rel;
//   Shaft1.Ctr = Shaft1.Ke * Shaft1.delta + Shaft1.D * Shaft1.w_rel;
//   Shaft1.C1.Ctr = Shaft1.Ctr;
//   Shaft1.C2.Ctr = Shaft1.Ctr;
//   puitsP1.C.P = puitsP1.P;
//   puitsP1.C.Q = puitsP1.Q;
//   puitsP1.C.h_vol = puitsP1.h;
//   puitsP1.IPressure.signal = puitsP1.P0;
//   puitsP1.P = puitsP1.IPressure.signal;
//   puitsP1.ITemperature.signal = puitsP1.T0;
//   puitsP1.ISpecificEnthalpy.signal = puitsP1.h0;
//   puitsP1.T = puitsP1.ITemperature.signal;
//   puitsP1.h = ThermoSysPro.Properties.WaterSteam.IF97.SpecificEnthalpy_PT(puitsP1.P, puitsP1.T, 0);
//   puitsP1.pro = ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph(puitsP1.P, puitsP1.h, puitsP1.mode);
//   sourceP1.C.P = sourceP1.P;
//   sourceP1.C.Q = sourceP1.Q;
//   sourceP1.C.h_vol = sourceP1.h;
//   sourceP1.IPressure.signal = sourceP1.P0;
//   sourceP1.P = sourceP1.IPressure.signal;
//   sourceP1.ITemperature.signal = sourceP1.T0;
//   sourceP1.ISpecificEnthalpy.signal = sourceP1.h0;
//   sourceP1.h = sourceP1.ISpecificEnthalpy.signal;
//   sourceP1.T = sourceP1.pro.T;
//   sourceP1.pro = ThermoSysPro.Properties.WaterSteam.IF97.Water_Ph(sourceP1.P, sourceP1.h, sourceP1.mode);
//   DynamicCentrifugalPump1.M.Ctr = Shaft1.C2.Ctr;
//   DynamicCentrifugalPump1.M.w = Shaft1.C2.w;
//   Shaft1.C1.Ctr = stodolaTurbine.M.Ctr;
//   Shaft1.C1.w = stodolaTurbine.M.w;
//   DynamicCentrifugalPump1.C1.P = sourceP1.C.P;
//   DynamicCentrifugalPump1.C1.h_vol = sourceP1.C.h_vol;
//   DynamicCentrifugalPump1.C1.Q = sourceP1.C.Q;
//   DynamicCentrifugalPump1.C1.h = sourceP1.C.h;
//   DynamicCentrifugalPump1.C1.a = sourceP1.C.a;
//   DynamicCentrifugalPump1.C1.b = sourceP1.C.b;
//   DynamicCentrifugalPump1.C2.P = puitsP1.C.P;
//   DynamicCentrifugalPump1.C2.h_vol = puitsP1.C.h_vol;
//   DynamicCentrifugalPump1.C2.Q = puitsP1.C.Q;
//   DynamicCentrifugalPump1.C2.h = puitsP1.C.h;
//   DynamicCentrifugalPump1.C2.a = puitsP1.C.a;
//   DynamicCentrifugalPump1.C2.b = puitsP1.C.b;
//   sourceP.C.P = stodolaTurbine.Ce.P;
//   sourceP.C.h_vol = stodolaTurbine.Ce.h_vol;
//   sourceP.C.Q = stodolaTurbine.Ce.Q;
//   sourceP.C.h = stodolaTurbine.Ce.h;
//   sourceP.C.a = stodolaTurbine.Ce.a;
//   sourceP.C.b = stodolaTurbine.Ce.b;
//   puitsP.C.P = stodolaTurbine.Cs.P;
//   puitsP.C.h_vol = stodolaTurbine.Cs.h_vol;
//   puitsP.C.Q = stodolaTurbine.Cs.Q;
//   puitsP.C.h = stodolaTurbine.Cs.h;
//   puitsP.C.a = stodolaTurbine.Cs.a;
//   puitsP.C.b = stodolaTurbine.Cs.b;
// end ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1;
// "
// "[Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// "
// "Check of ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1 completed successfully.
// 
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-33:24:writable] Warning: Connector ThermoSysPro.ElectroMechanics.Connectors.MechanichalTorque is not balanced: The number of potential variables (2) is not equal to the number of flow variables (0).
// [Connectors.mo:3:3-42:17:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidInlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// [Connectors.mo:86:3-126:18:writable] Warning: Connector ThermoSysPro.WaterSteam.Connectors.FluidOutlet is not balanced: The number of potential variables (4) is not equal to the number of flow variables (0).
// 
// Class ThermoSysPro.Examples.SimpleExamples.TestStodolaTurbine1 has 206 equation(s) and 206 variable(s).
// 88 of these are trivial equation(s).
// "
// ""
// endResult
