// name: SimCodeTest
// cflags: +g=MetaModelica
// status: correct
// setup_command: rm -f SimCodeC_abc.c SimCodeC_abc.h SimCodeC_abc.makefile

setCommandLineOptions({"+g=MetaModelica","+d=rml"});
setOption(envCache,false);

runScript("LoadCompilerSources.mos"); getErrorString();
loadFile("SimCodeTest.mo");getErrorString();

SimCodeTest.test(); getErrorString();

readFileShowLineNumbers("SimCodeC_abc.h");
readFileShowLineNumbers("SimCodeC_abc.c");
// Do not read the makefile; it's different depending on the OS
// readFile("SimCodeC_abc.makefile");

// Result:
// {true,true}
// true
// Loaded all files without error
// "true
// "
// ""
// true
// ""
// 
// ""
// "1: #ifndef SimCodeC_abc__H
// 2: #define SimCodeC_abc__H
// 3: #include \"modelica.h\"
// 4: #include <stdio.h>
// 5: #include <stdlib.h>
// 6: #include <errno.h>
// 7: #ifdef __cplusplus
// 8: extern \"C\" {
// 9: #endif
// 10: void _SimCodeC_abc();
// 11: #ifdef __cplusplus
// 12: }
// 13: #endif
// 14: #endif
// "
// "1: #include \"SimCodeC_abc.h\"
// 2: #define MODELICA_ASSERT(info,msg) { printInfo(stderr,info); fprintf(stderr,\"Modelica Assert: %s!\\n\", msg); }
// 3: #define MODELICA_TERMINATE(msg) { fprintf(stderr,\"Modelica Terminate: %s!\\n\", msg); fflush(stderr); }
// 4: void _SimCodeC_abc()
// 5: {
// 6:   /* functionBodyRegularFunction: GC: save roots mark when you enter the function */
// 7:   /* functionBodyRegularFunction: GC: adding inputs as roots! */
// 8:   
// 9:   /* functionBodyRegularFunction: GC: do garbage collection */
// 10:   
// 11:   /* functionBodyRegularFunction: arguments */
// 12:   /* functionBodyRegularFunction: locals */
// 13:   state tmp1;
// 14:   _tailrecursive:
// 15:   /* functionBodyRegularFunction: out inits */
// 16:   
// 17:   /* functionBodyRegularFunction: state in */
// 18:   tmp1 = get_memory_state();
// 19:   
// 20:   /* functionBodyRegularFunction: var inits */
// 21:   /* functionBodyRegularFunction: body */
// 22:   
// 23:   _return:
// 24:   /* functionBodyRegularFunction: out var copy */
// 25:   /* functionBodyRegularFunction: state out */
// 26:   restore_memory_state(tmp1);
// 27:   /* functionBodyRegularFunction: out var assign */
// 28:   
// 29:   /* GC: pop the mark! */
// 30:   
// 31:   /* functionBodyRegularFunction: return the outs */
// 32:   return ;
// 33: }
// 34: int in_SimCodeC_abc(type_description * inArgs, type_description * outVar)
// 35: {
// 36:   MMC_TRY_TOP()
// 37:   _SimCodeC_abc();
// 38:   MMC_CATCH_TOP(return 1)
// 39:   write_noretcall(outVar);
// 40:   fflush(NULL);
// 41:   
// 42:   return 0;
// 43: }
// "
// endResult
