// name: minvalue
// keywords: initialization, min
// status: correct
// cflags:
// teardown_command: rm -rf initializationTests.minvalue_* _initializationTests.minvalue_* output.log
//
//  case for initialization with min-values
//

loadString("
within ;
package initializationTests
  model minvalue
    parameter Integer N = 2;
    Real x[N](each min = 0, each start = 1, each fixed = false);
  initial equation
    for i in 1:N loop
      x[i] ^ i = i ^ i;
    end for;
  equation
    for i in 1:N loop
      der(x[i]) = time;
    end for;
  end minvalue;

  model minvalue_02
    extends minvalue(N=2);
  end minvalue_02;

  model minvalue_04
    extends minvalue(N=4);
  end minvalue_04;
end initializationTests;
");
getErrorString();

simulate(initializationTests.minvalue_02, startTime=0.0, stopTime=0.0, simflags="-iom kinsol");
val(x[1], 0);
val(x[2], 0);

simulate(initializationTests.minvalue_04, startTime=0.0, stopTime=0.0, simflags="-iom kinsol");
val(x[1], 0);
val(x[2], 0);
val(x[3], 0);
val(x[4], 0);

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "initializationTests.minvalue_02_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'initializationTests.minvalue_02', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = '-iom kinsol'",
//     messages = ""
// end SimulationResult;
// 1.0
// 2.0
// record SimulationResult
//     resultFile = "initializationTests.minvalue_04_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 0.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'initializationTests.minvalue_04', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = '-iom kinsol'",
//     messages = ""
// end SimulationResult;
// 1.0
// 2.0
// 3.0
// 4.0
// endResult
