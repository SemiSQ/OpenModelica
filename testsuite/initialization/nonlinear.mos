// name: nonlinear
// keywords: initialization, nonlinear
// status: correct
// cflags:
// teardown_command: rm -rf initializationTests.nonlinear_* _initializationTests.nonlinear_* output.log
//
// case for nonlinear problems with singular jacobian
//

loadString("
within ;
package initializationTests
  model nonlinear
    parameter Integer N = 3;
    Real x[N](each min = 0, each start = 0, each fixed = false);
  initial equation
    for i in 1:N - 1 loop
      x[i] ^ i * x[i + 1] = i ^ i * (i + 1);
    end for;
    x[N] ^ N * x[1] = N ^ N;
  equation
    for i in 1:N loop
      der(x[i]) = time;
    end for;
  end nonlinear;

  model nonlinear_03
    extends nonlinear(N=3);
  end nonlinear_03;

  model nonlinear_05
    extends nonlinear(N=5);
  end nonlinear_05;
end initializationTests;
");
getErrorString();

simulate(initializationTests.nonlinear_03);
val(x[1], 0);
val(x[2], 0);
val(x[3], 0);

simulate(initializationTests.nonlinear_05);
val(x[1], 0);
val(x[2], 0);
val(x[3], 0);
val(x[4], 0);
val(x[5], 0);

// Result:
// true
// ""
// record SimulationResult
//     resultFile = "initializationTests.nonlinear_03_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'initializationTests.nonlinear_03', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// 1.0
// 2.0
// 3.0
// record SimulationResult
//     resultFile = "initializationTests.nonlinear_05_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 0.000001, method = 'dassl', fileNamePrefix = 'initializationTests.nonlinear_05', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = '', simflags = ''",
//     messages = ""
// end SimulationResult;
// 1.0
// 2.0
// 3.0
// 4.0
// 5.0
// endResult
