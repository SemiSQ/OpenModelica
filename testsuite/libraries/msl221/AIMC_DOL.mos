//name:        AIMC_DOL
//keyword:     instantiating msl221
//status:      correct
//
// instantiate example
//

loadModel(Modelica,{"2.2.1"});
instantiateModel(Modelica.Electrical.Machines.Examples.AIMC_DOL);
getErrorString();
// Result:
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = atan2(u1, u2);
// end Modelica.Math.atan2;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// function Modelica.SIunits.Conversions.from_rpm \"Convert from revolutions per minute to radian per second\"
//   input Real rpm(quantity = \"AngularVelocity\", unit = \"rev/min\") \"revolutions per minute value\";
//   output Real rs(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"radian per second value\";
// algorithm
//   rs := 0.10471975511965977 * rpm;
// end Modelica.SIunits.Conversions.from_rpm;
// 
// function Modelica.SIunits.Conversions.to_rpm \"Convert from radian per second to revolutions per minute\"
//   input Real rs(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"radian per second value\";
//   output Real rpm(quantity = \"AngularVelocity\", unit = \"rev/min\") \"revolutions per minute value\";
// algorithm
//   rpm := 9.549296585513721 * rs;
// end Modelica.SIunits.Conversions.to_rpm;
// 
// class Modelica.Electrical.Machines.Examples.AIMC_DOL
//   constant Integer m = 3 \"number of phases\";
//   parameter Real VNominal(quantity = \"ElectricPotential\", unit = \"V\") = 100.0 \"nominal RMS voltage per phase\";
//   parameter Real fNominal(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"nominal frequency\";
//   parameter Real tStart1(quantity = \"Time\", unit = \"s\") = 0.1 \"start time\";
//   parameter Real T_Load(quantity = \"Torque\", unit = \"N.m\") = 161.4 \"nominal load torque\";
//   parameter Real rpmLoad(quantity = \"AngularVelocity\", unit = \"rev/min\") = 1440.45 \"nominal load speed\";
//   parameter Real J_Load(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = 0.29 \"load's moment of inertia\";
//   parameter Real AIMC1.J_Rotor(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = 0.29 \"rotor's moment of inertia\";
//   output Real AIMC1.phi_mechanical(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = AIMC1.flange_a.phi \"mechanical angle of rotor against stator\";
//   output Real AIMC1.w_mechanical(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = der(AIMC1.phi_mechanical) \"mechanical angular velocity of rotor against stator\";
//   output Real AIMC1.rpm_mechanical(quantity = \"AngularVelocity\", unit = \"rev/min\") = Modelica.SIunits.Conversions.to_rpm(AIMC1.w_mechanical) \"mechanical speed of rotor against stator [rpm]\";
//   output Real AIMC1.tau_electrical(quantity = \"Torque\", unit = \"N.m\") = AIMC1.inertiaRotor.flange_a.tau \"electromagnetic torque\";
//   output Real AIMC1.tau_shaft(quantity = \"Torque\", unit = \"N.m\") = -AIMC1.flange_a.tau \"shaft torque\";
//   Real AIMC1.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real AIMC1.fixedHousing.phi0(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Fixed offset angle of housing\";
//   Real AIMC1.fixedHousing.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.fixedHousing.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real AIMC1.internalSupport.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.internalSupport.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   constant Real AIMC1.pi = 3.141592653589793;
//   constant Integer AIMC1.m = 3 \"number of phases\";
//   parameter Integer AIMC1.p(min = 1) = 2 \"number of pole pairs (Integer)\";
//   constant Real AIMC1.fNominal(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"nominal frequency\";
//   parameter Real AIMC1.Rs(quantity = \"Resistance\", unit = \"Ohm\") = 0.03 \"|Nominal resistances and inductances|warm stator resistance per phase\";
//   parameter Real AIMC1.Rr(quantity = \"Resistance\", unit = \"Ohm\") = 0.04 \"|Nominal resistances and inductances|warm rotor resistance\";
//   output Real AIMC1.i_0_s(quantity = \"ElectricCurrent\", unit = \"A\", StateSelect = StateSelect.default) = AIMC1.spacePhasorS.zero.i \"stator zero-sequence current\";
//   output Real AIMC1.idq_ss[1](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.airGapS.i_ss[1] \"stator space phasor current / stator fixed frame\";
//   output Real AIMC1.idq_ss[2](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.airGapS.i_ss[2] \"stator space phasor current / stator fixed frame\";
//   output Real AIMC1.idq_sr[1](quantity = \"ElectricCurrent\", unit = \"A\", StateSelect = StateSelect.prefer) = AIMC1.airGapS.i_sr[1] \"stator space phasor current / rotor fixed frame\";
//   output Real AIMC1.idq_sr[2](quantity = \"ElectricCurrent\", unit = \"A\", StateSelect = StateSelect.prefer) = AIMC1.airGapS.i_sr[2] \"stator space phasor current / rotor fixed frame\";
//   output Real AIMC1.idq_rs[1](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.airGapS.i_rs[1] \"rotor space phasor current / stator fixed frame\";
//   output Real AIMC1.idq_rs[2](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.airGapS.i_rs[2] \"rotor space phasor current / stator fixed frame\";
//   output Real AIMC1.idq_rr[1](quantity = \"ElectricCurrent\", unit = \"A\", StateSelect = StateSelect.prefer) = AIMC1.airGapS.i_rr[1] \"rotor space phasor current / rotor fixed frame\";
//   output Real AIMC1.idq_rr[2](quantity = \"ElectricCurrent\", unit = \"A\", StateSelect = StateSelect.prefer) = AIMC1.airGapS.i_rr[2] \"rotor space phasor current / rotor fixed frame\";
//   constant Integer AIMC1.spacePhasorS.m = 3 \"number of phases\";
//   constant Real AIMC1.spacePhasorS.pi = 3.141592653589793;
//   Real AIMC1.spacePhasorS.zero.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.zero.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.ground.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.ground.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.gnd.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.gnd.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.spacePhasor.v_[1](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.spacePhasorS.spacePhasor.v_[2](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.spacePhasorS.spacePhasor.i_[1](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.spacePhasorS.spacePhasor.i_[2](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.spacePhasorS.v[1](quantity = \"ElectricPotential\", unit = \"V\") \"instantaneous phase voltages\";
//   Real AIMC1.spacePhasorS.v[2](quantity = \"ElectricPotential\", unit = \"V\") \"instantaneous phase voltages\";
//   Real AIMC1.spacePhasorS.v[3](quantity = \"ElectricPotential\", unit = \"V\") \"instantaneous phase voltages\";
//   Real AIMC1.spacePhasorS.i[1](quantity = \"ElectricCurrent\", unit = \"A\") \"instantaneous phase currents\";
//   Real AIMC1.spacePhasorS.i[2](quantity = \"ElectricCurrent\", unit = \"A\") \"instantaneous phase currents\";
//   Real AIMC1.spacePhasorS.i[3](quantity = \"ElectricCurrent\", unit = \"A\") \"instantaneous phase currents\";
//   parameter Integer AIMC1.spacePhasorS.plug_p.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.spacePhasorS.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer AIMC1.spacePhasorS.plug_n.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.spacePhasorS.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.spacePhasorS.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.spacePhasorS.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[1,1] = 0.6666666666666666;
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[1,2] = -0.33333333333333315;
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[1,3] = -0.3333333333333336;
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[2,1] = 0.0;
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[2,2] = 0.5773502691896257;
//   protected parameter Real AIMC1.spacePhasorS.TransformationMatrix[2,3] = -0.5773502691896255;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[1,1] = 1.0;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[1,2] = 0.0;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[2,1] = -0.4999999999999998;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[2,2] = 0.8660254037844387;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[3,1] = -0.5000000000000004;
//   protected parameter Real AIMC1.spacePhasorS.InverseTransformation[3,2] = -0.8660254037844384;
//   Real AIMC1.inertiaRotor.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = AIMC1.inertiaRotor.phi_start, StateSelect = StateSelect.default) \"Absolute rotation angle of component (= flange_a.phi = flange_b.phi)\";
//   Real AIMC1.inertiaRotor.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.inertiaRotor.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real AIMC1.inertiaRotor.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.inertiaRotor.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real AIMC1.inertiaRotor.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = AIMC1.J_Rotor \"Moment of inertia\";
//   parameter Integer AIMC1.inertiaRotor.initType(min = 1, max = 9) = 1 \"Type of initialization (defines usage of start values below)\";
//   parameter Real AIMC1.inertiaRotor.phi_start(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial or guess value of rotor rotation angle phi\";
//   parameter Real AIMC1.inertiaRotor.w_start(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = 0.0 \"Initial or guess value of angular velocity w = der(phi)\";
//   parameter Real AIMC1.inertiaRotor.a_start(quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial value of angular acceleration a = der(w)\";
//   parameter Integer AIMC1.inertiaRotor.stateSelection(min = 1, max = 5) = 3 \"Priority to use phi and w as states\";
//   Real AIMC1.inertiaRotor.w(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", start = AIMC1.inertiaRotor.w_start, StateSelect = StateSelect.default) \"Absolute angular velocity of component\";
//   Real AIMC1.inertiaRotor.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of component\";
//   output Real AIMC1.vs[1](quantity = \"ElectricPotential\", unit = \"V\") = AIMC1.plug_sp.pin[1].v - AIMC1.plug_sn.pin[1].v \"stator instantaneous voltages\";
//   output Real AIMC1.vs[2](quantity = \"ElectricPotential\", unit = \"V\") = AIMC1.plug_sp.pin[2].v - AIMC1.plug_sn.pin[2].v \"stator instantaneous voltages\";
//   output Real AIMC1.vs[3](quantity = \"ElectricPotential\", unit = \"V\") = AIMC1.plug_sp.pin[3].v - AIMC1.plug_sn.pin[3].v \"stator instantaneous voltages\";
//   output Real AIMC1.is[1](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.plug_sp.pin[1].i \"stator instantaneous currents\";
//   output Real AIMC1.is[2](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.plug_sp.pin[2].i \"stator instantaneous currents\";
//   output Real AIMC1.is[3](quantity = \"ElectricCurrent\", unit = \"A\") = AIMC1.plug_sp.pin[3].i \"stator instantaneous currents\";
//   parameter Integer AIMC1.plug_sp.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.plug_sp.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sp.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.plug_sp.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sp.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.plug_sp.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sp.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer AIMC1.plug_sn.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.plug_sn.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sn.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.plug_sn.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sn.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.plug_sn.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.plug_sn.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.Lssigma(quantity = \"Inductance\", unit = \"H\") = 0.0003239643625499069 \"|Nominal resistances and inductances|stator stray inductance per phase\";
//   parameter Real AIMC1.Lm(quantity = \"Inductance\", unit = \"H\") = 0.009225332222963813 \"|Nominal resistances and inductances|main field inductance\";
//   parameter Real AIMC1.Lrsigma(quantity = \"Inductance\", unit = \"H\") = 0.0003239643625499069 \"|Nominal resistances and inductances|rotor stray inductance\";
//   constant Integer AIMC1.airGapS.m = 3 \"number of phases\";
//   parameter Integer AIMC1.airGapS.p(min = 1) = AIMC1.p \"number of pole pairs\";
//   parameter Real AIMC1.airGapS.Lm(quantity = \"Inductance\", unit = \"H\") = AIMC1.Lm \"main field inductance\";
//   output Real AIMC1.airGapS.tau_electrical(quantity = \"Torque\", unit = \"N.m\");
//   Real AIMC1.airGapS.gamma(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotor displacement angle\";
//   Real AIMC1.airGapS.i_ss[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Stator current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.i_ss[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Stator current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.i_sr[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Stator current space phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.i_sr[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Stator current space phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.i_rs[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Rotor current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.i_rs[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Rotor current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.i_rr[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Rotor current space phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.i_rr[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Rotor current space phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.i_ms[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Magnetizing current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.i_ms[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Magnetizing current space phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.psi_ms[1](quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetizing flux phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.psi_ms[2](quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetizing flux phasor with respect to the stator fixed frame\";
//   Real AIMC1.airGapS.psi_mr[1](quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetizing flux phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.psi_mr[2](quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetizing flux phasor with respect to the rotor fixed frame\";
//   Real AIMC1.airGapS.RotationMatrix[1,1] \"matrix of rotation from rotor to stator\";
//   Real AIMC1.airGapS.RotationMatrix[1,2] \"matrix of rotation from rotor to stator\";
//   Real AIMC1.airGapS.RotationMatrix[2,1] \"matrix of rotation from rotor to stator\";
//   Real AIMC1.airGapS.RotationMatrix[2,2] \"matrix of rotation from rotor to stator\";
//   Real AIMC1.airGapS.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.airGapS.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real AIMC1.airGapS.support.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real AIMC1.airGapS.support.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real AIMC1.airGapS.spacePhasor_s.v_[1](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.airGapS.spacePhasor_s.v_[2](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.airGapS.spacePhasor_s.i_[1](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.airGapS.spacePhasor_s.i_[2](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.airGapS.spacePhasor_r.v_[1](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.airGapS.spacePhasor_r.v_[2](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.airGapS.spacePhasor_r.i_[1](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.airGapS.spacePhasor_r.i_[2](quantity = \"ElectricCurrent\", unit = \"A\");
//   protected parameter Real AIMC1.airGapS.L[1,1](quantity = \"Inductance\", unit = \"H\") = AIMC1.airGapS.Lm \"inductance matrix\";
//   protected parameter Real AIMC1.airGapS.L[1,2](quantity = \"Inductance\", unit = \"H\") = 0.0 \"inductance matrix\";
//   protected parameter Real AIMC1.airGapS.L[2,1](quantity = \"Inductance\", unit = \"H\") = 0.0 \"inductance matrix\";
//   protected parameter Real AIMC1.airGapS.L[2,2](quantity = \"Inductance\", unit = \"H\") = AIMC1.airGapS.Lm \"inductance matrix\";
//   parameter Real AIMC1.squirrelCageR.Lrsigma(quantity = \"Inductance\", unit = \"H\") = AIMC1.Lrsigma \"rotor stray inductance per phase translated to stator\";
//   parameter Real AIMC1.squirrelCageR.Rr(quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.Rr \"warm rotor resistance per phase translated to stator\";
//   Real AIMC1.squirrelCageR.spacePhasor_r.v_[1](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.squirrelCageR.spacePhasor_r.v_[2](quantity = \"ElectricPotential\", unit = \"V\");
//   Real AIMC1.squirrelCageR.spacePhasor_r.i_[1](quantity = \"ElectricCurrent\", unit = \"A\");
//   Real AIMC1.squirrelCageR.spacePhasor_r.i_[2](quantity = \"ElectricCurrent\", unit = \"A\");
//   parameter Integer AIMC1.rs.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.rs.v[1](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.rs.v[2](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.rs.v[3](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.rs.i[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real AIMC1.rs.i[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real AIMC1.rs.i[3](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   parameter Integer AIMC1.rs.plug_p.m(min = 1) = AIMC1.rs.m \"number of phases\";
//   Real AIMC1.rs.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer AIMC1.rs.plug_n.m(min = 1) = AIMC1.rs.m \"number of phases\";
//   Real AIMC1.rs.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.rs.R[1](quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.Rs \"Resistance\";
//   parameter Real AIMC1.rs.R[2](quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.Rs \"Resistance\";
//   parameter Real AIMC1.rs.R[3](quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.Rs \"Resistance\";
//   Real AIMC1.rs.resistor[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.rs.resistor[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.rs.resistor[1].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[1].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.resistor[1].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[1].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.rs.resistor[1].R(quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.rs.R[1] \"Resistance\";
//   Real AIMC1.rs.resistor[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.rs.resistor[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.rs.resistor[2].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[2].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.resistor[2].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[2].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.rs.resistor[2].R(quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.rs.R[2] \"Resistance\";
//   Real AIMC1.rs.resistor[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.rs.resistor[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.rs.resistor[3].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[3].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.rs.resistor[3].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.rs.resistor[3].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.rs.resistor[3].R(quantity = \"Resistance\", unit = \"Ohm\") = AIMC1.rs.R[3] \"Resistance\";
//   parameter Integer AIMC1.lssigma.m(min = 1) = 3 \"number of phases\";
//   Real AIMC1.lssigma.v[1](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.lssigma.v[2](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.lssigma.v[3](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real AIMC1.lssigma.i[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real AIMC1.lssigma.i[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real AIMC1.lssigma.i[3](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   parameter Integer AIMC1.lssigma.plug_p.m(min = 1) = AIMC1.lssigma.m \"number of phases\";
//   Real AIMC1.lssigma.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer AIMC1.lssigma.plug_n.m(min = 1) = AIMC1.lssigma.m \"number of phases\";
//   Real AIMC1.lssigma.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.lssigma.L[1](quantity = \"Inductance\", unit = \"H\") = AIMC1.Lssigma \"Inductance\";
//   parameter Real AIMC1.lssigma.L[2](quantity = \"Inductance\", unit = \"H\") = AIMC1.Lssigma \"Inductance\";
//   parameter Real AIMC1.lssigma.L[3](quantity = \"Inductance\", unit = \"H\") = AIMC1.Lssigma \"Inductance\";
//   Real AIMC1.lssigma.inductor[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.lssigma.inductor[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.lssigma.inductor[1].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[1].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.inductor[1].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[1].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.lssigma.inductor[1].L(quantity = \"Inductance\", unit = \"H\") = AIMC1.lssigma.L[1] \"Inductance\";
//   Real AIMC1.lssigma.inductor[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.lssigma.inductor[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.lssigma.inductor[2].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[2].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.inductor[2].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[2].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.lssigma.inductor[2].L(quantity = \"Inductance\", unit = \"H\") = AIMC1.lssigma.L[2] \"Inductance\";
//   Real AIMC1.lssigma.inductor[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real AIMC1.lssigma.inductor[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real AIMC1.lssigma.inductor[3].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[3].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real AIMC1.lssigma.inductor[3].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real AIMC1.lssigma.inductor[3].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real AIMC1.lssigma.inductor[3].L(quantity = \"Inductance\", unit = \"H\") = AIMC1.lssigma.L[3] \"Inductance\";
//   constant Integer CurrentRMSsensor1.m(min = 1) = 3 \"number of phases\";
//   parameter Integer CurrentRMSsensor1.ToSpacePhasor1.nout = 2 \"Number of outputs\";
//   constant Integer CurrentRMSsensor1.ToSpacePhasor1.m = 3 \"number of phases\";
//   constant Real CurrentRMSsensor1.ToSpacePhasor1.pi = 3.141592653589793;
//   output Real CurrentRMSsensor1.ToSpacePhasor1.zero;
//   output Real CurrentRMSsensor1.ToSpacePhasor1.y[1] \"Connector of Real output signals\";
//   output Real CurrentRMSsensor1.ToSpacePhasor1.y[2] \"Connector of Real output signals\";
//   parameter Integer CurrentRMSsensor1.ToSpacePhasor1.nin = 3 \"Number of inputs\";
//   input Real CurrentRMSsensor1.ToSpacePhasor1.u[1] \"Connector of Real input signals\";
//   input Real CurrentRMSsensor1.ToSpacePhasor1.u[2] \"Connector of Real input signals\";
//   input Real CurrentRMSsensor1.ToSpacePhasor1.u[3] \"Connector of Real input signals\";
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,1] = 0.6666666666666666;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,2] = -0.33333333333333315;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,3] = -0.3333333333333336;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,1] = 0.0;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,2] = 0.5773502691896257;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,3] = -0.5773502691896255;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[1,1] = 1.0;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[1,2] = 0.0;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[2,1] = -0.4999999999999998;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[2,2] = 0.8660254037844387;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[3,1] = -0.5000000000000004;
//   protected parameter Real CurrentRMSsensor1.ToSpacePhasor1.InverseTransformation[3,2] = -0.8660254037844384;
//   parameter Integer CurrentRMSsensor1.ToPolar1.n = 2 \"Number of inputs (= number of outputs)\";
//   constant Real CurrentRMSsensor1.ToPolar1.small = 1e-60;
//   input Real CurrentRMSsensor1.ToPolar1.u[1] \"Connector of Real input signals\";
//   input Real CurrentRMSsensor1.ToPolar1.u[2] \"Connector of Real input signals\";
//   output Real CurrentRMSsensor1.ToPolar1.y[1] \"Connector of Real output signals\";
//   output Real CurrentRMSsensor1.ToPolar1.y[2] \"Connector of Real output signals\";
//   parameter Real CurrentRMSsensor1.Gain1.k = 0.7071067811865475 \"Gain value multiplied with input signal\";
//   input Real CurrentRMSsensor1.Gain1.u \"Input signal connector\";
//   output Real CurrentRMSsensor1.Gain1.y \"Output signal connector\";
//   output Real CurrentRMSsensor1.I(quantity = \"ElectricCurrent\", unit = \"A\");
//   parameter Integer CurrentRMSsensor1.plug_p.m(min = 1) = 3 \"number of phases\";
//   Real CurrentRMSsensor1.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer CurrentRMSsensor1.plug_n.m(min = 1) = 3 \"number of phases\";
//   Real CurrentRMSsensor1.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer CurrentRMSsensor1.CurrentSensor1.m(min = 1) = 3 \"number of phases\";
//   parameter Integer CurrentRMSsensor1.CurrentSensor1.plug_p.m(min = 1) = CurrentRMSsensor1.CurrentSensor1.m \"number of phases\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer CurrentRMSsensor1.CurrentSensor1.plug_n.m(min = 1) = CurrentRMSsensor1.CurrentSensor1.m \"number of phases\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   output Real CurrentRMSsensor1.CurrentSensor1.currentSensor[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"current in the branch from p to n as output signal\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   output Real CurrentRMSsensor1.CurrentSensor1.currentSensor[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"current in the branch from p to n as output signal\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   output Real CurrentRMSsensor1.CurrentSensor1.currentSensor[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"current in the branch from p to n as output signal\";
//   output Real CurrentRMSsensor1.CurrentSensor1.i[1] \"current in the branch from p to n as output signal\";
//   output Real CurrentRMSsensor1.CurrentSensor1.i[2] \"current in the branch from p to n as output signal\";
//   output Real CurrentRMSsensor1.CurrentSensor1.i[3] \"current in the branch from p to n as output signal\";
//   constant Integer TerminalBox1.m = 3 \"number of phases\";
//   parameter String TerminalBox1.StarDelta = \"D\";
//   parameter Integer TerminalBox1.positiveMachinePlug.m(min = 1) = 3 \"number of phases\";
//   Real TerminalBox1.positiveMachinePlug.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.positiveMachinePlug.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.positiveMachinePlug.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.positiveMachinePlug.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.positiveMachinePlug.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.positiveMachinePlug.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer TerminalBox1.negativeMachinePlug.m(min = 1) = 3 \"number of phases\";
//   Real TerminalBox1.negativeMachinePlug.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.negativeMachinePlug.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.negativeMachinePlug.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.negativeMachinePlug.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.negativeMachinePlug.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.negativeMachinePlug.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer TerminalBox1.plugToGrid.m(min = 1) = 3 \"number of phases\";
//   Real TerminalBox1.plugToGrid.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.plugToGrid.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.plugToGrid.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.plugToGrid.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.plugToGrid.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.plugToGrid.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer TerminalBox1.delta.m(min = 2) = 3 \"number of phases\";
//   parameter Integer TerminalBox1.delta.plug_p.m(min = 1) = TerminalBox1.delta.m \"number of phases\";
//   Real TerminalBox1.delta.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.delta.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.delta.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer TerminalBox1.delta.plug_n.m(min = 1) = TerminalBox1.delta.m \"number of phases\";
//   Real TerminalBox1.delta.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.delta.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real TerminalBox1.delta.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real TerminalBox1.delta.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer Star1.m(min = 1) = 3 \"number of phases\";
//   Real Star1.pin_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Star1.pin_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer Star1.plug_p.m(min = 1) = Star1.m \"number of phases\";
//   Real Star1.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Star1.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Star1.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Star1.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Star1.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Star1.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer IdealCloser1.m(min = 1) = 3 \"number of phases\";
//   Real IdealCloser1.v[1](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real IdealCloser1.v[2](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real IdealCloser1.v[3](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real IdealCloser1.i[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real IdealCloser1.i[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real IdealCloser1.i[3](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   parameter Integer IdealCloser1.plug_p.m(min = 1) = IdealCloser1.m \"number of phases\";
//   Real IdealCloser1.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer IdealCloser1.plug_n.m(min = 1) = IdealCloser1.m \"number of phases\";
//   Real IdealCloser1.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean IdealCloser1.control[1] \"true => p--n connected, false => switch open\";
//   input Boolean IdealCloser1.control[2] \"true => p--n connected, false => switch open\";
//   input Boolean IdealCloser1.control[3] \"true => p--n connected, false => switch open\";
//   parameter Real IdealCloser1.Ron[1](quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 0.00001 \"Closed switch resistance\";
//   parameter Real IdealCloser1.Ron[2](quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 0.00001 \"Closed switch resistance\";
//   parameter Real IdealCloser1.Ron[3](quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 0.00001 \"Closed switch resistance\";
//   parameter Real IdealCloser1.Goff[1](quantity = \"Conductance\", unit = \"S\", min = 0.0) = 0.00001 \"Opened switch conductance\";
//   parameter Real IdealCloser1.Goff[2](quantity = \"Conductance\", unit = \"S\", min = 0.0) = 0.00001 \"Opened switch conductance\";
//   parameter Real IdealCloser1.Goff[3](quantity = \"Conductance\", unit = \"S\", min = 0.0) = 0.00001 \"Opened switch conductance\";
//   Real IdealCloser1.idealClosingSwitch[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealCloser1.idealClosingSwitch[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealCloser1.idealClosingSwitch[1].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[1].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.idealClosingSwitch[1].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[1].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealCloser1.idealClosingSwitch[1].Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = IdealCloser1.Ron[1] \"Closed switch resistance\";
//   parameter Real IdealCloser1.idealClosingSwitch[1].Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = IdealCloser1.Goff[1] \"Opened switch conductance\";
//   input Boolean IdealCloser1.idealClosingSwitch[1].control \"true => p--n connected, false => switch open\";
//   protected Real IdealCloser1.idealClosingSwitch[1].s \"Auxiliary variable\";
//   protected parameter Real IdealCloser1.idealClosingSwitch[1].unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealCloser1.idealClosingSwitch[1].unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealCloser1.idealClosingSwitch[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealCloser1.idealClosingSwitch[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealCloser1.idealClosingSwitch[2].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[2].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.idealClosingSwitch[2].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[2].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealCloser1.idealClosingSwitch[2].Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = IdealCloser1.Ron[2] \"Closed switch resistance\";
//   parameter Real IdealCloser1.idealClosingSwitch[2].Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = IdealCloser1.Goff[2] \"Opened switch conductance\";
//   input Boolean IdealCloser1.idealClosingSwitch[2].control \"true => p--n connected, false => switch open\";
//   protected Real IdealCloser1.idealClosingSwitch[2].s \"Auxiliary variable\";
//   protected parameter Real IdealCloser1.idealClosingSwitch[2].unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealCloser1.idealClosingSwitch[2].unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealCloser1.idealClosingSwitch[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealCloser1.idealClosingSwitch[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealCloser1.idealClosingSwitch[3].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[3].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealCloser1.idealClosingSwitch[3].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealCloser1.idealClosingSwitch[3].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealCloser1.idealClosingSwitch[3].Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = IdealCloser1.Ron[3] \"Closed switch resistance\";
//   parameter Real IdealCloser1.idealClosingSwitch[3].Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = IdealCloser1.Goff[3] \"Opened switch conductance\";
//   input Boolean IdealCloser1.idealClosingSwitch[3].control \"true => p--n connected, false => switch open\";
//   protected Real IdealCloser1.idealClosingSwitch[3].s \"Auxiliary variable\";
//   protected parameter Real IdealCloser1.idealClosingSwitch[3].unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealCloser1.idealClosingSwitch[3].unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   output Boolean BooleanStep1[1].y \"Connector of Boolean output signal\";
//   parameter Real BooleanStep1[1].startTime(quantity = \"Time\", unit = \"s\") = tStart1 \"Time instant of step start\";
//   parameter Boolean BooleanStep1[1].startValue = false \"Output before startTime\";
//   output Boolean BooleanStep1[2].y \"Connector of Boolean output signal\";
//   parameter Real BooleanStep1[2].startTime(quantity = \"Time\", unit = \"s\") = tStart1 \"Time instant of step start\";
//   parameter Boolean BooleanStep1[2].startValue = false \"Output before startTime\";
//   output Boolean BooleanStep1[3].y \"Connector of Boolean output signal\";
//   parameter Real BooleanStep1[3].startTime(quantity = \"Time\", unit = \"s\") = tStart1 \"Time instant of step start\";
//   parameter Boolean BooleanStep1[3].startValue = false \"Output before startTime\";
//   Real QuadraticLoadTorque1.w(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = der(QuadraticLoadTorque1.flange.phi) \"Angular velocity at flange\";
//   Real QuadraticLoadTorque1.tau(quantity = \"Torque\", unit = \"N.m\") = QuadraticLoadTorque1.flange.tau \"accelerating torque acting at flange\";
//   Real QuadraticLoadTorque1.flange.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real QuadraticLoadTorque1.flange.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real QuadraticLoadTorque1.bearing.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real QuadraticLoadTorque1.bearing.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real QuadraticLoadTorque1.tau_nominal(quantity = \"Torque\", unit = \"N.m\") = -T_Load \"nominal torque (if negative, torque is acting as load)\";
//   parameter Boolean QuadraticLoadTorque1.TorqueDirection = true \"same direction of torque in both directions of rotation\";
//   parameter Real QuadraticLoadTorque1.w_nominal(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", min = 0.000000000000001) = Modelica.SIunits.Conversions.from_rpm(rpmLoad) \"nominal speed\";
//   Real LoadInertia.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = LoadInertia.phi_start, StateSelect = StateSelect.default) \"Absolute rotation angle of component (= flange_a.phi = flange_b.phi)\";
//   Real LoadInertia.flange_a.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real LoadInertia.flange_a.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real LoadInertia.flange_b.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real LoadInertia.flange_b.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   parameter Real LoadInertia.J(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = J_Load \"Moment of inertia\";
//   parameter Integer LoadInertia.initType(min = 1, max = 9) = 1 \"Type of initialization (defines usage of start values below)\";
//   parameter Real LoadInertia.phi_start(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial or guess value of rotor rotation angle phi\";
//   parameter Real LoadInertia.w_start(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = 0.0 \"Initial or guess value of angular velocity w = der(phi)\";
//   parameter Real LoadInertia.a_start(quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial value of angular acceleration a = der(w)\";
//   parameter Integer LoadInertia.stateSelection(min = 1, max = 5) = 3 \"Priority to use phi and w as states\";
//   Real LoadInertia.w(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", start = LoadInertia.w_start, StateSelect = StateSelect.default) \"Absolute angular velocity of component\";
//   Real LoadInertia.a(quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of component\";
//   parameter Integer SineVoltage1.m(min = 1) = 3 \"number of phases\";
//   Real SineVoltage1.v[1](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real SineVoltage1.v[2](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real SineVoltage1.v[3](quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drops between the two plugs\";
//   Real SineVoltage1.i[1](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real SineVoltage1.i[2](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   Real SineVoltage1.i[3](quantity = \"ElectricCurrent\", unit = \"A\") \"Currents flowing into positive plugs\";
//   parameter Integer SineVoltage1.plug_p.m(min = 1) = SineVoltage1.m \"number of phases\";
//   Real SineVoltage1.plug_p.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_p.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.plug_p.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_p.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.plug_p.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_p.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Integer SineVoltage1.plug_n.m(min = 1) = SineVoltage1.m \"number of phases\";
//   Real SineVoltage1.plug_n.pin[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_n.pin[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.plug_n.pin[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_n.pin[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.plug_n.pin[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.plug_n.pin[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.V[1](quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VNominal \"Amplitudes of sine waves\";
//   parameter Real SineVoltage1.V[2](quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VNominal \"Amplitudes of sine waves\";
//   parameter Real SineVoltage1.V[3](quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VNominal \"Amplitudes of sine waves\";
//   parameter Real SineVoltage1.phase[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phases of sine waves\";
//   parameter Real SineVoltage1.phase[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = -6.283185307179586 / Real(SineVoltage1.m) \"Phases of sine waves\";
//   parameter Real SineVoltage1.phase[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = -12.566370614359172 / Real(SineVoltage1.m) \"Phases of sine waves\";
//   parameter Real SineVoltage1.freqHz[1](quantity = \"Frequency\", unit = \"Hz\") = fNominal \"Frequencies of sine waves\";
//   parameter Real SineVoltage1.freqHz[2](quantity = \"Frequency\", unit = \"Hz\") = fNominal \"Frequencies of sine waves\";
//   parameter Real SineVoltage1.freqHz[3](quantity = \"Frequency\", unit = \"Hz\") = fNominal \"Frequencies of sine waves\";
//   parameter Real SineVoltage1.offset[1](quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offsets\";
//   parameter Real SineVoltage1.offset[2](quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offsets\";
//   parameter Real SineVoltage1.offset[3](quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offsets\";
//   parameter Real SineVoltage1.startTime[1](quantity = \"Time\", unit = \"s\") = 0.0 \"Time offsets\";
//   parameter Real SineVoltage1.startTime[2](quantity = \"Time\", unit = \"s\") = 0.0 \"Time offsets\";
//   parameter Real SineVoltage1.startTime[3](quantity = \"Time\", unit = \"s\") = 0.0 \"Time offsets\";
//   Real SineVoltage1.sineVoltage[1].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage1.sineVoltage[1].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage1.sineVoltage[1].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[1].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.sineVoltage[1].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[1].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.sineVoltage[1].offset(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.offset[1] \"Voltage offset\";
//   parameter Real SineVoltage1.sineVoltage[1].startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.startTime[1] \"Time offset\";
//   parameter Real SineVoltage1.sineVoltage[1].V(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.V[1] \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[1].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.phase[1] \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[1].freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.freqHz[1] \"Frequency of sine wave\";
//   output Real SineVoltage1.sineVoltage[1].signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage1.sineVoltage[1].signalSource.amplitude = SineVoltage1.sineVoltage[1].V \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[1].signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.sineVoltage[1].freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[1].signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.sineVoltage[1].phase \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[1].signalSource.offset = SineVoltage1.sineVoltage[1].offset \"Offset of output signal\";
//   parameter Real SineVoltage1.sineVoltage[1].signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.sineVoltage[1].startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage1.sineVoltage[1].signalSource.pi = 3.141592653589793;
//   Real SineVoltage1.sineVoltage[2].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage1.sineVoltage[2].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage1.sineVoltage[2].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[2].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.sineVoltage[2].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[2].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.sineVoltage[2].offset(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.offset[2] \"Voltage offset\";
//   parameter Real SineVoltage1.sineVoltage[2].startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.startTime[2] \"Time offset\";
//   parameter Real SineVoltage1.sineVoltage[2].V(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.V[2] \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[2].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.phase[2] \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[2].freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.freqHz[2] \"Frequency of sine wave\";
//   output Real SineVoltage1.sineVoltage[2].signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage1.sineVoltage[2].signalSource.amplitude = SineVoltage1.sineVoltage[2].V \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[2].signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.sineVoltage[2].freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[2].signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.sineVoltage[2].phase \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[2].signalSource.offset = SineVoltage1.sineVoltage[2].offset \"Offset of output signal\";
//   parameter Real SineVoltage1.sineVoltage[2].signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.sineVoltage[2].startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage1.sineVoltage[2].signalSource.pi = 3.141592653589793;
//   Real SineVoltage1.sineVoltage[3].v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage1.sineVoltage[3].i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage1.sineVoltage[3].p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[3].p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.sineVoltage[3].n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.sineVoltage[3].n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.sineVoltage[3].offset(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.offset[3] \"Voltage offset\";
//   parameter Real SineVoltage1.sineVoltage[3].startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.startTime[3] \"Time offset\";
//   parameter Real SineVoltage1.sineVoltage[3].V(quantity = \"ElectricPotential\", unit = \"V\") = SineVoltage1.V[3] \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[3].phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.phase[3] \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[3].freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.freqHz[3] \"Frequency of sine wave\";
//   output Real SineVoltage1.sineVoltage[3].signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage1.sineVoltage[3].signalSource.amplitude = SineVoltage1.sineVoltage[3].V \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[3].signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.sineVoltage[3].freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[3].signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.sineVoltage[3].phase \"Phase of sine wave\";
//   parameter Real SineVoltage1.sineVoltage[3].signalSource.offset = SineVoltage1.sineVoltage[3].offset \"Offset of output signal\";
//   parameter Real SineVoltage1.sineVoltage[3].signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.sineVoltage[3].startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage1.sineVoltage[3].signalSource.pi = 3.141592653589793;
// equation
//   AIMC1.fixedHousing.flange_b.phi = AIMC1.fixedHousing.phi0;
//   AIMC1.spacePhasorS.gnd.p.v = 0.0;
//   AIMC1.spacePhasorS.v[1] = AIMC1.spacePhasorS.plug_p.pin[1].v - AIMC1.spacePhasorS.plug_n.pin[1].v;
//   AIMC1.spacePhasorS.v[2] = AIMC1.spacePhasorS.plug_p.pin[2].v - AIMC1.spacePhasorS.plug_n.pin[2].v;
//   AIMC1.spacePhasorS.v[3] = AIMC1.spacePhasorS.plug_p.pin[3].v - AIMC1.spacePhasorS.plug_n.pin[3].v;
//   AIMC1.spacePhasorS.i[1] = AIMC1.spacePhasorS.plug_p.pin[1].i;
//   AIMC1.spacePhasorS.i[2] = AIMC1.spacePhasorS.plug_p.pin[2].i;
//   AIMC1.spacePhasorS.i[3] = AIMC1.spacePhasorS.plug_p.pin[3].i;
//   AIMC1.spacePhasorS.i[1] = -AIMC1.spacePhasorS.plug_n.pin[1].i;
//   AIMC1.spacePhasorS.i[2] = -AIMC1.spacePhasorS.plug_n.pin[2].i;
//   AIMC1.spacePhasorS.i[3] = -AIMC1.spacePhasorS.plug_n.pin[3].i;
//   AIMC1.spacePhasorS.zero.v = 0.3333333333333333 * (AIMC1.spacePhasorS.v[1] + (AIMC1.spacePhasorS.v[2] + AIMC1.spacePhasorS.v[3]));
//   AIMC1.spacePhasorS.spacePhasor.v_[1] = AIMC1.spacePhasorS.TransformationMatrix[1,1] * AIMC1.spacePhasorS.v[1] + AIMC1.spacePhasorS.TransformationMatrix[1,2] * AIMC1.spacePhasorS.v[2] + AIMC1.spacePhasorS.TransformationMatrix[1,3] * AIMC1.spacePhasorS.v[3];
//   AIMC1.spacePhasorS.spacePhasor.v_[2] = AIMC1.spacePhasorS.TransformationMatrix[2,1] * AIMC1.spacePhasorS.v[1] + AIMC1.spacePhasorS.TransformationMatrix[2,2] * AIMC1.spacePhasorS.v[2] + AIMC1.spacePhasorS.TransformationMatrix[2,3] * AIMC1.spacePhasorS.v[3];
//   -AIMC1.spacePhasorS.zero.i = 0.3333333333333333 * (AIMC1.spacePhasorS.i[1] + (AIMC1.spacePhasorS.i[2] + AIMC1.spacePhasorS.i[3]));
//   -AIMC1.spacePhasorS.spacePhasor.i_[1] = AIMC1.spacePhasorS.TransformationMatrix[1,1] * AIMC1.spacePhasorS.i[1] + AIMC1.spacePhasorS.TransformationMatrix[1,2] * AIMC1.spacePhasorS.i[2] + AIMC1.spacePhasorS.TransformationMatrix[1,3] * AIMC1.spacePhasorS.i[3];
//   -AIMC1.spacePhasorS.spacePhasor.i_[2] = AIMC1.spacePhasorS.TransformationMatrix[2,1] * AIMC1.spacePhasorS.i[1] + AIMC1.spacePhasorS.TransformationMatrix[2,2] * AIMC1.spacePhasorS.i[2] + AIMC1.spacePhasorS.TransformationMatrix[2,3] * AIMC1.spacePhasorS.i[3];
//   AIMC1.inertiaRotor.w = der(AIMC1.inertiaRotor.phi);
//   AIMC1.inertiaRotor.a = der(AIMC1.inertiaRotor.w);
//   AIMC1.inertiaRotor.J * AIMC1.inertiaRotor.a = AIMC1.inertiaRotor.flange_a.tau + AIMC1.inertiaRotor.flange_b.tau;
//   AIMC1.inertiaRotor.flange_a.phi = AIMC1.inertiaRotor.phi;
//   AIMC1.inertiaRotor.flange_b.phi = AIMC1.inertiaRotor.phi;
//   AIMC1.airGapS.gamma = Real(AIMC1.airGapS.p) * (AIMC1.airGapS.flange_a.phi - AIMC1.airGapS.support.phi);
//   AIMC1.airGapS.RotationMatrix[1,1] = cos(AIMC1.airGapS.gamma);
//   AIMC1.airGapS.RotationMatrix[1,2] = -sin(AIMC1.airGapS.gamma);
//   AIMC1.airGapS.RotationMatrix[2,1] = sin(AIMC1.airGapS.gamma);
//   AIMC1.airGapS.RotationMatrix[2,2] = cos(AIMC1.airGapS.gamma);
//   AIMC1.airGapS.i_ss[1] = AIMC1.airGapS.spacePhasor_s.i_[1];
//   AIMC1.airGapS.i_ss[2] = AIMC1.airGapS.spacePhasor_s.i_[2];
//   AIMC1.airGapS.i_ss[1] = AIMC1.airGapS.RotationMatrix[1,1] * AIMC1.airGapS.i_sr[1] + AIMC1.airGapS.RotationMatrix[1,2] * AIMC1.airGapS.i_sr[2];
//   AIMC1.airGapS.i_ss[2] = AIMC1.airGapS.RotationMatrix[2,1] * AIMC1.airGapS.i_sr[1] + AIMC1.airGapS.RotationMatrix[2,2] * AIMC1.airGapS.i_sr[2];
//   AIMC1.airGapS.i_rr[1] = AIMC1.airGapS.spacePhasor_r.i_[1];
//   AIMC1.airGapS.i_rr[2] = AIMC1.airGapS.spacePhasor_r.i_[2];
//   AIMC1.airGapS.i_rs[1] = AIMC1.airGapS.RotationMatrix[1,1] * AIMC1.airGapS.i_rr[1] + AIMC1.airGapS.RotationMatrix[1,2] * AIMC1.airGapS.i_rr[2];
//   AIMC1.airGapS.i_rs[2] = AIMC1.airGapS.RotationMatrix[2,1] * AIMC1.airGapS.i_rr[1] + AIMC1.airGapS.RotationMatrix[2,2] * AIMC1.airGapS.i_rr[2];
//   AIMC1.airGapS.i_ms[1] = AIMC1.airGapS.i_ss[1] + AIMC1.airGapS.i_rs[1];
//   AIMC1.airGapS.i_ms[2] = AIMC1.airGapS.i_ss[2] + AIMC1.airGapS.i_rs[2];
//   AIMC1.airGapS.psi_ms[1] = AIMC1.airGapS.L[1,1] * AIMC1.airGapS.i_ms[1] + AIMC1.airGapS.L[1,2] * AIMC1.airGapS.i_ms[2];
//   AIMC1.airGapS.psi_ms[2] = AIMC1.airGapS.L[2,1] * AIMC1.airGapS.i_ms[1] + AIMC1.airGapS.L[2,2] * AIMC1.airGapS.i_ms[2];
//   AIMC1.airGapS.psi_mr[1] = AIMC1.airGapS.RotationMatrix[1,1] * AIMC1.airGapS.psi_ms[1] + AIMC1.airGapS.RotationMatrix[2,1] * AIMC1.airGapS.psi_ms[2];
//   AIMC1.airGapS.psi_mr[2] = AIMC1.airGapS.RotationMatrix[1,2] * AIMC1.airGapS.psi_ms[1] + AIMC1.airGapS.RotationMatrix[2,2] * AIMC1.airGapS.psi_ms[2];
//   AIMC1.airGapS.spacePhasor_s.v_[1] = der(AIMC1.airGapS.psi_ms[1]);
//   AIMC1.airGapS.spacePhasor_s.v_[2] = der(AIMC1.airGapS.psi_ms[2]);
//   AIMC1.airGapS.spacePhasor_r.v_[1] = der(AIMC1.airGapS.psi_mr[1]);
//   AIMC1.airGapS.spacePhasor_r.v_[2] = der(AIMC1.airGapS.psi_mr[2]);
//   AIMC1.airGapS.tau_electrical = 1.5 * (Real(AIMC1.airGapS.p) * (AIMC1.airGapS.spacePhasor_s.i_[2] * AIMC1.airGapS.psi_ms[1] - AIMC1.airGapS.spacePhasor_s.i_[1] * AIMC1.airGapS.psi_ms[2]));
//   AIMC1.airGapS.flange_a.tau = -AIMC1.airGapS.tau_electrical;
//   AIMC1.airGapS.support.tau = AIMC1.airGapS.tau_electrical;
//   AIMC1.squirrelCageR.spacePhasor_r.v_[1] = AIMC1.squirrelCageR.spacePhasor_r.i_[1] * AIMC1.squirrelCageR.Rr + der(AIMC1.squirrelCageR.spacePhasor_r.i_[1]) * AIMC1.squirrelCageR.Lrsigma;
//   AIMC1.squirrelCageR.spacePhasor_r.v_[2] = AIMC1.squirrelCageR.spacePhasor_r.i_[2] * AIMC1.squirrelCageR.Rr + der(AIMC1.squirrelCageR.spacePhasor_r.i_[2]) * AIMC1.squirrelCageR.Lrsigma;
//   AIMC1.rs.resistor[1].R * AIMC1.rs.resistor[1].i = AIMC1.rs.resistor[1].v;
//   AIMC1.rs.resistor[1].v = AIMC1.rs.resistor[1].p.v - AIMC1.rs.resistor[1].n.v;
//   0.0 = AIMC1.rs.resistor[1].p.i + AIMC1.rs.resistor[1].n.i;
//   AIMC1.rs.resistor[1].i = AIMC1.rs.resistor[1].p.i;
//   AIMC1.rs.resistor[2].R * AIMC1.rs.resistor[2].i = AIMC1.rs.resistor[2].v;
//   AIMC1.rs.resistor[2].v = AIMC1.rs.resistor[2].p.v - AIMC1.rs.resistor[2].n.v;
//   0.0 = AIMC1.rs.resistor[2].p.i + AIMC1.rs.resistor[2].n.i;
//   AIMC1.rs.resistor[2].i = AIMC1.rs.resistor[2].p.i;
//   AIMC1.rs.resistor[3].R * AIMC1.rs.resistor[3].i = AIMC1.rs.resistor[3].v;
//   AIMC1.rs.resistor[3].v = AIMC1.rs.resistor[3].p.v - AIMC1.rs.resistor[3].n.v;
//   0.0 = AIMC1.rs.resistor[3].p.i + AIMC1.rs.resistor[3].n.i;
//   AIMC1.rs.resistor[3].i = AIMC1.rs.resistor[3].p.i;
//   AIMC1.rs.v[1] = AIMC1.rs.plug_p.pin[1].v - AIMC1.rs.plug_n.pin[1].v;
//   AIMC1.rs.v[2] = AIMC1.rs.plug_p.pin[2].v - AIMC1.rs.plug_n.pin[2].v;
//   AIMC1.rs.v[3] = AIMC1.rs.plug_p.pin[3].v - AIMC1.rs.plug_n.pin[3].v;
//   AIMC1.rs.i[1] = AIMC1.rs.plug_p.pin[1].i;
//   AIMC1.rs.i[2] = AIMC1.rs.plug_p.pin[2].i;
//   AIMC1.rs.i[3] = AIMC1.rs.plug_p.pin[3].i;
//   AIMC1.lssigma.inductor[1].L * der(AIMC1.lssigma.inductor[1].i) = AIMC1.lssigma.inductor[1].v;
//   AIMC1.lssigma.inductor[1].v = AIMC1.lssigma.inductor[1].p.v - AIMC1.lssigma.inductor[1].n.v;
//   0.0 = AIMC1.lssigma.inductor[1].p.i + AIMC1.lssigma.inductor[1].n.i;
//   AIMC1.lssigma.inductor[1].i = AIMC1.lssigma.inductor[1].p.i;
//   AIMC1.lssigma.inductor[2].L * der(AIMC1.lssigma.inductor[2].i) = AIMC1.lssigma.inductor[2].v;
//   AIMC1.lssigma.inductor[2].v = AIMC1.lssigma.inductor[2].p.v - AIMC1.lssigma.inductor[2].n.v;
//   0.0 = AIMC1.lssigma.inductor[2].p.i + AIMC1.lssigma.inductor[2].n.i;
//   AIMC1.lssigma.inductor[2].i = AIMC1.lssigma.inductor[2].p.i;
//   AIMC1.lssigma.inductor[3].L * der(AIMC1.lssigma.inductor[3].i) = AIMC1.lssigma.inductor[3].v;
//   AIMC1.lssigma.inductor[3].v = AIMC1.lssigma.inductor[3].p.v - AIMC1.lssigma.inductor[3].n.v;
//   0.0 = AIMC1.lssigma.inductor[3].p.i + AIMC1.lssigma.inductor[3].n.i;
//   AIMC1.lssigma.inductor[3].i = AIMC1.lssigma.inductor[3].p.i;
//   AIMC1.lssigma.v[1] = AIMC1.lssigma.plug_p.pin[1].v - AIMC1.lssigma.plug_n.pin[1].v;
//   AIMC1.lssigma.v[2] = AIMC1.lssigma.plug_p.pin[2].v - AIMC1.lssigma.plug_n.pin[2].v;
//   AIMC1.lssigma.v[3] = AIMC1.lssigma.plug_p.pin[3].v - AIMC1.lssigma.plug_n.pin[3].v;
//   AIMC1.lssigma.i[1] = AIMC1.lssigma.plug_p.pin[1].i;
//   AIMC1.lssigma.i[2] = AIMC1.lssigma.plug_p.pin[2].i;
//   AIMC1.lssigma.i[3] = AIMC1.lssigma.plug_p.pin[3].i;
//   assert(AIMC1.spacePhasorS.plug_n.m == AIMC1.plug_sn.m,\"automatically generated from connect\");
//   assert(AIMC1.rs.plug_p.m == AIMC1.plug_sp.m,\"automatically generated from connect\");
//   assert(AIMC1.rs.plug_n.m == AIMC1.lssigma.plug_p.m,\"automatically generated from connect\");
//   assert(AIMC1.lssigma.plug_n.m == AIMC1.spacePhasorS.plug_p.m,\"automatically generated from connect\");
//   CurrentRMSsensor1.ToSpacePhasor1.zero = 0.3333333333333333 * (CurrentRMSsensor1.ToSpacePhasor1.u[1] + (CurrentRMSsensor1.ToSpacePhasor1.u[2] + CurrentRMSsensor1.ToSpacePhasor1.u[3]));
//   CurrentRMSsensor1.ToSpacePhasor1.y[1] = CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,1] * CurrentRMSsensor1.ToSpacePhasor1.u[1] + CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,2] * CurrentRMSsensor1.ToSpacePhasor1.u[2] + CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[1,3] * CurrentRMSsensor1.ToSpacePhasor1.u[3];
//   CurrentRMSsensor1.ToSpacePhasor1.y[2] = CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,1] * CurrentRMSsensor1.ToSpacePhasor1.u[1] + CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,2] * CurrentRMSsensor1.ToSpacePhasor1.u[2] + CurrentRMSsensor1.ToSpacePhasor1.TransformationMatrix[2,3] * CurrentRMSsensor1.ToSpacePhasor1.u[3];
//   CurrentRMSsensor1.ToPolar1.y[1] = sqrt(CurrentRMSsensor1.ToPolar1.u[1] ^ 2.0 + CurrentRMSsensor1.ToPolar1.u[2] ^ 2.0);
//   CurrentRMSsensor1.ToPolar1.y[2] = if noEvent(CurrentRMSsensor1.ToPolar1.y[1] <= 1e-60) then 0.0 else atan2(CurrentRMSsensor1.ToPolar1.u[2],CurrentRMSsensor1.ToPolar1.u[1]);
//   CurrentRMSsensor1.Gain1.y = CurrentRMSsensor1.Gain1.k * CurrentRMSsensor1.Gain1.u;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.v = CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.i = CurrentRMSsensor1.CurrentSensor1.currentSensor[1].i;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.i = -CurrentRMSsensor1.CurrentSensor1.currentSensor[1].i;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.v = CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.i = CurrentRMSsensor1.CurrentSensor1.currentSensor[2].i;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.i = -CurrentRMSsensor1.CurrentSensor1.currentSensor[2].i;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.v = CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.i = CurrentRMSsensor1.CurrentSensor1.currentSensor[3].i;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.i = -CurrentRMSsensor1.CurrentSensor1.currentSensor[3].i;
//   assert(CurrentRMSsensor1.CurrentSensor1.plug_n.m == CurrentRMSsensor1.plug_n.m,\"automatically generated from connect\");
//   assert(CurrentRMSsensor1.plug_p.m == CurrentRMSsensor1.CurrentSensor1.plug_p.m,\"automatically generated from connect\");
//   assert(TerminalBox1.positiveMachinePlug.m == TerminalBox1.plugToGrid.m,\"automatically generated from connect\");
//   assert(TerminalBox1.delta.plug_p.m == TerminalBox1.positiveMachinePlug.m,\"automatically generated from connect\");
//   assert(TerminalBox1.negativeMachinePlug.m == TerminalBox1.delta.plug_n.m,\"automatically generated from connect\");
//   Ground1.p.v = 0.0;
//   IdealCloser1.idealClosingSwitch[1].v = IdealCloser1.idealClosingSwitch[1].s * (IdealCloser1.idealClosingSwitch[1].unitCurrent * (if IdealCloser1.idealClosingSwitch[1].control then IdealCloser1.idealClosingSwitch[1].Ron else 1.0));
//   IdealCloser1.idealClosingSwitch[1].i = IdealCloser1.idealClosingSwitch[1].s * (IdealCloser1.idealClosingSwitch[1].unitVoltage * (if IdealCloser1.idealClosingSwitch[1].control then 1.0 else IdealCloser1.idealClosingSwitch[1].Goff));
//   IdealCloser1.idealClosingSwitch[1].v = IdealCloser1.idealClosingSwitch[1].p.v - IdealCloser1.idealClosingSwitch[1].n.v;
//   0.0 = IdealCloser1.idealClosingSwitch[1].p.i + IdealCloser1.idealClosingSwitch[1].n.i;
//   IdealCloser1.idealClosingSwitch[1].i = IdealCloser1.idealClosingSwitch[1].p.i;
//   IdealCloser1.idealClosingSwitch[2].v = IdealCloser1.idealClosingSwitch[2].s * (IdealCloser1.idealClosingSwitch[2].unitCurrent * (if IdealCloser1.idealClosingSwitch[2].control then IdealCloser1.idealClosingSwitch[2].Ron else 1.0));
//   IdealCloser1.idealClosingSwitch[2].i = IdealCloser1.idealClosingSwitch[2].s * (IdealCloser1.idealClosingSwitch[2].unitVoltage * (if IdealCloser1.idealClosingSwitch[2].control then 1.0 else IdealCloser1.idealClosingSwitch[2].Goff));
//   IdealCloser1.idealClosingSwitch[2].v = IdealCloser1.idealClosingSwitch[2].p.v - IdealCloser1.idealClosingSwitch[2].n.v;
//   0.0 = IdealCloser1.idealClosingSwitch[2].p.i + IdealCloser1.idealClosingSwitch[2].n.i;
//   IdealCloser1.idealClosingSwitch[2].i = IdealCloser1.idealClosingSwitch[2].p.i;
//   IdealCloser1.idealClosingSwitch[3].v = IdealCloser1.idealClosingSwitch[3].s * (IdealCloser1.idealClosingSwitch[3].unitCurrent * (if IdealCloser1.idealClosingSwitch[3].control then IdealCloser1.idealClosingSwitch[3].Ron else 1.0));
//   IdealCloser1.idealClosingSwitch[3].i = IdealCloser1.idealClosingSwitch[3].s * (IdealCloser1.idealClosingSwitch[3].unitVoltage * (if IdealCloser1.idealClosingSwitch[3].control then 1.0 else IdealCloser1.idealClosingSwitch[3].Goff));
//   IdealCloser1.idealClosingSwitch[3].v = IdealCloser1.idealClosingSwitch[3].p.v - IdealCloser1.idealClosingSwitch[3].n.v;
//   0.0 = IdealCloser1.idealClosingSwitch[3].p.i + IdealCloser1.idealClosingSwitch[3].n.i;
//   IdealCloser1.idealClosingSwitch[3].i = IdealCloser1.idealClosingSwitch[3].p.i;
//   IdealCloser1.v[1] = IdealCloser1.plug_p.pin[1].v - IdealCloser1.plug_n.pin[1].v;
//   IdealCloser1.v[2] = IdealCloser1.plug_p.pin[2].v - IdealCloser1.plug_n.pin[2].v;
//   IdealCloser1.v[3] = IdealCloser1.plug_p.pin[3].v - IdealCloser1.plug_n.pin[3].v;
//   IdealCloser1.i[1] = IdealCloser1.plug_p.pin[1].i;
//   IdealCloser1.i[2] = IdealCloser1.plug_p.pin[2].i;
//   IdealCloser1.i[3] = IdealCloser1.plug_p.pin[3].i;
//   BooleanStep1[1].y = if time >= BooleanStep1[1].startTime then not BooleanStep1[1].startValue else BooleanStep1[1].startValue;
//   BooleanStep1[2].y = if time >= BooleanStep1[2].startTime then not BooleanStep1[2].startValue else BooleanStep1[2].startValue;
//   BooleanStep1[3].y = if time >= BooleanStep1[3].startTime then not BooleanStep1[3].startValue else BooleanStep1[3].startValue;
//   QuadraticLoadTorque1.tau = (-QuadraticLoadTorque1.tau_nominal) * (QuadraticLoadTorque1.w / QuadraticLoadTorque1.w_nominal) ^ 2.0;
//   QuadraticLoadTorque1.bearing.phi = 0.0;
//   LoadInertia.w = der(LoadInertia.phi);
//   LoadInertia.a = der(LoadInertia.w);
//   LoadInertia.J * LoadInertia.a = LoadInertia.flange_a.tau + LoadInertia.flange_b.tau;
//   LoadInertia.flange_a.phi = LoadInertia.phi;
//   LoadInertia.flange_b.phi = LoadInertia.phi;
//   SineVoltage1.sineVoltage[1].signalSource.y = SineVoltage1.sineVoltage[1].signalSource.offset + (if time < SineVoltage1.sineVoltage[1].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[1].signalSource.amplitude * sin(6.283185307179586 * (SineVoltage1.sineVoltage[1].signalSource.freqHz * (time - SineVoltage1.sineVoltage[1].signalSource.startTime)) + SineVoltage1.sineVoltage[1].signalSource.phase));
//   SineVoltage1.sineVoltage[1].v = SineVoltage1.sineVoltage[1].signalSource.y;
//   SineVoltage1.sineVoltage[1].v = SineVoltage1.sineVoltage[1].p.v - SineVoltage1.sineVoltage[1].n.v;
//   0.0 = SineVoltage1.sineVoltage[1].p.i + SineVoltage1.sineVoltage[1].n.i;
//   SineVoltage1.sineVoltage[1].i = SineVoltage1.sineVoltage[1].p.i;
//   SineVoltage1.sineVoltage[2].signalSource.y = SineVoltage1.sineVoltage[2].signalSource.offset + (if time < SineVoltage1.sineVoltage[2].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[2].signalSource.amplitude * sin(6.283185307179586 * (SineVoltage1.sineVoltage[2].signalSource.freqHz * (time - SineVoltage1.sineVoltage[2].signalSource.startTime)) + SineVoltage1.sineVoltage[2].signalSource.phase));
//   SineVoltage1.sineVoltage[2].v = SineVoltage1.sineVoltage[2].signalSource.y;
//   SineVoltage1.sineVoltage[2].v = SineVoltage1.sineVoltage[2].p.v - SineVoltage1.sineVoltage[2].n.v;
//   0.0 = SineVoltage1.sineVoltage[2].p.i + SineVoltage1.sineVoltage[2].n.i;
//   SineVoltage1.sineVoltage[2].i = SineVoltage1.sineVoltage[2].p.i;
//   SineVoltage1.sineVoltage[3].signalSource.y = SineVoltage1.sineVoltage[3].signalSource.offset + (if time < SineVoltage1.sineVoltage[3].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[3].signalSource.amplitude * sin(6.283185307179586 * (SineVoltage1.sineVoltage[3].signalSource.freqHz * (time - SineVoltage1.sineVoltage[3].signalSource.startTime)) + SineVoltage1.sineVoltage[3].signalSource.phase));
//   SineVoltage1.sineVoltage[3].v = SineVoltage1.sineVoltage[3].signalSource.y;
//   SineVoltage1.sineVoltage[3].v = SineVoltage1.sineVoltage[3].p.v - SineVoltage1.sineVoltage[3].n.v;
//   0.0 = SineVoltage1.sineVoltage[3].p.i + SineVoltage1.sineVoltage[3].n.i;
//   SineVoltage1.sineVoltage[3].i = SineVoltage1.sineVoltage[3].p.i;
//   SineVoltage1.v[1] = SineVoltage1.plug_p.pin[1].v - SineVoltage1.plug_n.pin[1].v;
//   SineVoltage1.v[2] = SineVoltage1.plug_p.pin[2].v - SineVoltage1.plug_n.pin[2].v;
//   SineVoltage1.v[3] = SineVoltage1.plug_p.pin[3].v - SineVoltage1.plug_n.pin[3].v;
//   SineVoltage1.i[1] = SineVoltage1.plug_p.pin[1].i;
//   SineVoltage1.i[2] = SineVoltage1.plug_p.pin[2].i;
//   SineVoltage1.i[3] = SineVoltage1.plug_p.pin[3].i;
//   assert(TerminalBox1.plugToGrid.m == CurrentRMSsensor1.plug_n.m,\"automatically generated from connect\");
//   assert(IdealCloser1.plug_n.m == CurrentRMSsensor1.plug_p.m,\"automatically generated from connect\");
//   assert(SineVoltage1.plug_p.m == IdealCloser1.plug_p.m,\"automatically generated from connect\");
//   assert(TerminalBox1.negativeMachinePlug.m == AIMC1.plug_sn.m,\"automatically generated from connect\");
//   assert(TerminalBox1.positiveMachinePlug.m == AIMC1.plug_sp.m,\"automatically generated from connect\");
//   assert(SineVoltage1.plug_n.m == Star1.plug_p.m,\"automatically generated from connect\");
//   AIMC1.flange_a.tau + LoadInertia.flange_a.tau = 0.0;
//   AIMC1.fixedHousing.flange_b.tau + -AIMC1.internalSupport.tau + AIMC1.airGapS.support.tau = 0.0;
//   AIMC1.internalSupport.tau = 0.0;
//   AIMC1.spacePhasorS.zero.i + AIMC1.spacePhasorS.ground.i = 0.0;
//   -AIMC1.spacePhasorS.ground.i + AIMC1.spacePhasorS.gnd.p.i = 0.0;
//   AIMC1.spacePhasorS.spacePhasor.i_[1] + AIMC1.airGapS.spacePhasor_s.i_[1] = 0.0;
//   AIMC1.spacePhasorS.spacePhasor.i_[2] + AIMC1.airGapS.spacePhasor_s.i_[2] = 0.0;
//   AIMC1.spacePhasorS.plug_p.pin[1].i + AIMC1.lssigma.plug_n.pin[1].i = 0.0;
//   AIMC1.spacePhasorS.plug_p.pin[2].i + AIMC1.lssigma.plug_n.pin[2].i = 0.0;
//   AIMC1.spacePhasorS.plug_p.pin[3].i + AIMC1.lssigma.plug_n.pin[3].i = 0.0;
//   AIMC1.spacePhasorS.plug_n.pin[1].i + -AIMC1.plug_sn.pin[1].i = 0.0;
//   AIMC1.spacePhasorS.plug_n.pin[2].i + -AIMC1.plug_sn.pin[2].i = 0.0;
//   AIMC1.spacePhasorS.plug_n.pin[3].i + -AIMC1.plug_sn.pin[3].i = 0.0;
//   AIMC1.spacePhasorS.gnd.p.v = AIMC1.spacePhasorS.ground.v;
//   AIMC1.inertiaRotor.flange_a.tau + AIMC1.airGapS.flange_a.tau = 0.0;
//   -AIMC1.flange_a.tau + AIMC1.inertiaRotor.flange_b.tau = 0.0;
//   AIMC1.plug_sp.pin[1].i + TerminalBox1.positiveMachinePlug.pin[1].i = 0.0;
//   AIMC1.plug_sp.pin[2].i + TerminalBox1.positiveMachinePlug.pin[2].i = 0.0;
//   AIMC1.plug_sp.pin[3].i + TerminalBox1.positiveMachinePlug.pin[3].i = 0.0;
//   AIMC1.plug_sn.pin[1].i + TerminalBox1.negativeMachinePlug.pin[1].i = 0.0;
//   AIMC1.plug_sn.pin[2].i + TerminalBox1.negativeMachinePlug.pin[2].i = 0.0;
//   AIMC1.plug_sn.pin[3].i + TerminalBox1.negativeMachinePlug.pin[3].i = 0.0;
//   AIMC1.airGapS.spacePhasor_r.i_[1] + AIMC1.squirrelCageR.spacePhasor_r.i_[1] = 0.0;
//   AIMC1.airGapS.spacePhasor_r.i_[2] + AIMC1.squirrelCageR.spacePhasor_r.i_[2] = 0.0;
//   -AIMC1.plug_sp.pin[1].i + AIMC1.rs.plug_p.pin[1].i = 0.0;
//   -AIMC1.plug_sp.pin[2].i + AIMC1.rs.plug_p.pin[2].i = 0.0;
//   -AIMC1.plug_sp.pin[3].i + AIMC1.rs.plug_p.pin[3].i = 0.0;
//   AIMC1.rs.plug_n.pin[1].i + AIMC1.lssigma.plug_p.pin[1].i = 0.0;
//   AIMC1.rs.plug_n.pin[2].i + AIMC1.lssigma.plug_p.pin[2].i = 0.0;
//   AIMC1.rs.plug_n.pin[3].i + AIMC1.lssigma.plug_p.pin[3].i = 0.0;
//   -AIMC1.rs.plug_p.pin[1].i + AIMC1.rs.resistor[1].p.i = 0.0;
//   -AIMC1.rs.plug_n.pin[1].i + AIMC1.rs.resistor[1].n.i = 0.0;
//   -AIMC1.rs.plug_p.pin[2].i + AIMC1.rs.resistor[2].p.i = 0.0;
//   -AIMC1.rs.plug_n.pin[2].i + AIMC1.rs.resistor[2].n.i = 0.0;
//   -AIMC1.rs.plug_p.pin[3].i + AIMC1.rs.resistor[3].p.i = 0.0;
//   -AIMC1.rs.plug_n.pin[3].i + AIMC1.rs.resistor[3].n.i = 0.0;
//   AIMC1.rs.plug_n.pin[1].v = AIMC1.rs.resistor[1].n.v;
//   AIMC1.rs.plug_n.pin[2].v = AIMC1.rs.resistor[2].n.v;
//   AIMC1.rs.plug_n.pin[3].v = AIMC1.rs.resistor[3].n.v;
//   AIMC1.rs.plug_p.pin[1].v = AIMC1.rs.resistor[1].p.v;
//   AIMC1.rs.plug_p.pin[2].v = AIMC1.rs.resistor[2].p.v;
//   AIMC1.rs.plug_p.pin[3].v = AIMC1.rs.resistor[3].p.v;
//   -AIMC1.lssigma.plug_p.pin[1].i + AIMC1.lssigma.inductor[1].p.i = 0.0;
//   -AIMC1.lssigma.plug_n.pin[1].i + AIMC1.lssigma.inductor[1].n.i = 0.0;
//   -AIMC1.lssigma.plug_p.pin[2].i + AIMC1.lssigma.inductor[2].p.i = 0.0;
//   -AIMC1.lssigma.plug_n.pin[2].i + AIMC1.lssigma.inductor[2].n.i = 0.0;
//   -AIMC1.lssigma.plug_p.pin[3].i + AIMC1.lssigma.inductor[3].p.i = 0.0;
//   -AIMC1.lssigma.plug_n.pin[3].i + AIMC1.lssigma.inductor[3].n.i = 0.0;
//   AIMC1.lssigma.inductor[1].n.v = AIMC1.lssigma.plug_n.pin[1].v;
//   AIMC1.lssigma.inductor[2].n.v = AIMC1.lssigma.plug_n.pin[2].v;
//   AIMC1.lssigma.inductor[3].n.v = AIMC1.lssigma.plug_n.pin[3].v;
//   AIMC1.lssigma.inductor[1].p.v = AIMC1.lssigma.plug_p.pin[1].v;
//   AIMC1.lssigma.inductor[2].p.v = AIMC1.lssigma.plug_p.pin[2].v;
//   AIMC1.lssigma.inductor[3].p.v = AIMC1.lssigma.plug_p.pin[3].v;
//   AIMC1.airGapS.support.phi = AIMC1.fixedHousing.flange_b.phi;
//   AIMC1.airGapS.support.phi = AIMC1.internalSupport.phi;
//   AIMC1.airGapS.flange_a.phi = AIMC1.inertiaRotor.flange_a.phi;
//   AIMC1.plug_sn.pin[1].v = AIMC1.spacePhasorS.plug_n.pin[1].v;
//   AIMC1.plug_sn.pin[2].v = AIMC1.spacePhasorS.plug_n.pin[2].v;
//   AIMC1.plug_sn.pin[3].v = AIMC1.spacePhasorS.plug_n.pin[3].v;
//   AIMC1.plug_sp.pin[1].v = AIMC1.rs.plug_p.pin[1].v;
//   AIMC1.plug_sp.pin[2].v = AIMC1.rs.plug_p.pin[2].v;
//   AIMC1.plug_sp.pin[3].v = AIMC1.rs.plug_p.pin[3].v;
//   AIMC1.lssigma.plug_p.pin[1].v = AIMC1.rs.plug_n.pin[1].v;
//   AIMC1.lssigma.plug_p.pin[2].v = AIMC1.rs.plug_n.pin[2].v;
//   AIMC1.lssigma.plug_p.pin[3].v = AIMC1.rs.plug_n.pin[3].v;
//   AIMC1.lssigma.plug_n.pin[1].v = AIMC1.spacePhasorS.plug_p.pin[1].v;
//   AIMC1.lssigma.plug_n.pin[2].v = AIMC1.spacePhasorS.plug_p.pin[2].v;
//   AIMC1.lssigma.plug_n.pin[3].v = AIMC1.spacePhasorS.plug_p.pin[3].v;
//   AIMC1.spacePhasorS.ground.v = AIMC1.spacePhasorS.zero.v;
//   AIMC1.airGapS.spacePhasor_s.v_[1] = AIMC1.spacePhasorS.spacePhasor.v_[1];
//   AIMC1.airGapS.spacePhasor_s.v_[2] = AIMC1.spacePhasorS.spacePhasor.v_[2];
//   AIMC1.airGapS.spacePhasor_r.v_[1] = AIMC1.squirrelCageR.spacePhasor_r.v_[1];
//   AIMC1.airGapS.spacePhasor_r.v_[2] = AIMC1.squirrelCageR.spacePhasor_r.v_[2];
//   AIMC1.flange_a.phi = AIMC1.inertiaRotor.flange_b.phi;
//   CurrentRMSsensor1.plug_p.pin[1].i + IdealCloser1.plug_n.pin[1].i = 0.0;
//   CurrentRMSsensor1.plug_p.pin[2].i + IdealCloser1.plug_n.pin[2].i = 0.0;
//   CurrentRMSsensor1.plug_p.pin[3].i + IdealCloser1.plug_n.pin[3].i = 0.0;
//   CurrentRMSsensor1.plug_n.pin[1].i + TerminalBox1.plugToGrid.pin[1].i = 0.0;
//   CurrentRMSsensor1.plug_n.pin[2].i + TerminalBox1.plugToGrid.pin[2].i = 0.0;
//   CurrentRMSsensor1.plug_n.pin[3].i + TerminalBox1.plugToGrid.pin[3].i = 0.0;
//   -CurrentRMSsensor1.plug_p.pin[1].i + CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].i = 0.0;
//   -CurrentRMSsensor1.plug_p.pin[2].i + CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].i = 0.0;
//   -CurrentRMSsensor1.plug_p.pin[3].i + CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].i = 0.0;
//   -CurrentRMSsensor1.plug_n.pin[1].i + CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].i = 0.0;
//   -CurrentRMSsensor1.plug_n.pin[2].i + CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].i = 0.0;
//   -CurrentRMSsensor1.plug_n.pin[3].i + CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.i = 0.0;
//   -CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].i + CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.i = 0.0;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].n.v = CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].n.v = CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].n.v = CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].p.v = CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].p.v = CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].p.v = CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].v;
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[1].i = CurrentRMSsensor1.CurrentSensor1.i[1];
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[2].i = CurrentRMSsensor1.CurrentSensor1.i[2];
//   CurrentRMSsensor1.CurrentSensor1.currentSensor[3].i = CurrentRMSsensor1.CurrentSensor1.i[3];
//   CurrentRMSsensor1.ToPolar1.u[1] = CurrentRMSsensor1.ToSpacePhasor1.y[1];
//   CurrentRMSsensor1.ToPolar1.u[2] = CurrentRMSsensor1.ToSpacePhasor1.y[2];
//   CurrentRMSsensor1.CurrentSensor1.i[1] = CurrentRMSsensor1.ToSpacePhasor1.u[1];
//   CurrentRMSsensor1.CurrentSensor1.i[2] = CurrentRMSsensor1.ToSpacePhasor1.u[2];
//   CurrentRMSsensor1.CurrentSensor1.i[3] = CurrentRMSsensor1.ToSpacePhasor1.u[3];
//   CurrentRMSsensor1.Gain1.u = CurrentRMSsensor1.ToPolar1.y[1];
//   CurrentRMSsensor1.CurrentSensor1.plug_n.pin[1].v = CurrentRMSsensor1.plug_n.pin[1].v;
//   CurrentRMSsensor1.CurrentSensor1.plug_n.pin[2].v = CurrentRMSsensor1.plug_n.pin[2].v;
//   CurrentRMSsensor1.CurrentSensor1.plug_n.pin[3].v = CurrentRMSsensor1.plug_n.pin[3].v;
//   CurrentRMSsensor1.CurrentSensor1.plug_p.pin[1].v = CurrentRMSsensor1.plug_p.pin[1].v;
//   CurrentRMSsensor1.CurrentSensor1.plug_p.pin[2].v = CurrentRMSsensor1.plug_p.pin[2].v;
//   CurrentRMSsensor1.CurrentSensor1.plug_p.pin[3].v = CurrentRMSsensor1.plug_p.pin[3].v;
//   CurrentRMSsensor1.Gain1.y = CurrentRMSsensor1.I;
//   -TerminalBox1.positiveMachinePlug.pin[1].i + -TerminalBox1.plugToGrid.pin[1].i + TerminalBox1.delta.plug_p.pin[1].i = 0.0;
//   -TerminalBox1.positiveMachinePlug.pin[2].i + -TerminalBox1.plugToGrid.pin[2].i + TerminalBox1.delta.plug_p.pin[2].i = 0.0;
//   -TerminalBox1.positiveMachinePlug.pin[3].i + -TerminalBox1.plugToGrid.pin[3].i + TerminalBox1.delta.plug_p.pin[3].i = 0.0;
//   -TerminalBox1.negativeMachinePlug.pin[1].i + TerminalBox1.delta.plug_n.pin[1].i = 0.0;
//   -TerminalBox1.negativeMachinePlug.pin[2].i + TerminalBox1.delta.plug_n.pin[2].i = 0.0;
//   -TerminalBox1.negativeMachinePlug.pin[3].i + TerminalBox1.delta.plug_n.pin[3].i = 0.0;
//   TerminalBox1.delta.plug_n.pin[1].v = TerminalBox1.delta.plug_p.pin[2].v;
//   -TerminalBox1.delta.plug_p.pin[2].i + -TerminalBox1.delta.plug_n.pin[1].i = 0.0;
//   TerminalBox1.delta.plug_n.pin[2].v = TerminalBox1.delta.plug_p.pin[3].v;
//   -TerminalBox1.delta.plug_p.pin[3].i + -TerminalBox1.delta.plug_n.pin[2].i = 0.0;
//   TerminalBox1.delta.plug_n.pin[3].v = TerminalBox1.delta.plug_p.pin[1].v;
//   -TerminalBox1.delta.plug_p.pin[1].i + -TerminalBox1.delta.plug_n.pin[3].i = 0.0;
//   TerminalBox1.delta.plug_p.pin[1].v = TerminalBox1.plugToGrid.pin[1].v;
//   TerminalBox1.delta.plug_p.pin[1].v = TerminalBox1.positiveMachinePlug.pin[1].v;
//   TerminalBox1.delta.plug_p.pin[2].v = TerminalBox1.plugToGrid.pin[2].v;
//   TerminalBox1.delta.plug_p.pin[2].v = TerminalBox1.positiveMachinePlug.pin[2].v;
//   TerminalBox1.delta.plug_p.pin[3].v = TerminalBox1.plugToGrid.pin[3].v;
//   TerminalBox1.delta.plug_p.pin[3].v = TerminalBox1.positiveMachinePlug.pin[3].v;
//   TerminalBox1.delta.plug_n.pin[1].v = TerminalBox1.negativeMachinePlug.pin[1].v;
//   TerminalBox1.delta.plug_n.pin[2].v = TerminalBox1.negativeMachinePlug.pin[2].v;
//   TerminalBox1.delta.plug_n.pin[3].v = TerminalBox1.negativeMachinePlug.pin[3].v;
//   Ground1.p.i + Star1.pin_n.i = 0.0;
//   Star1.plug_p.pin[1].i + SineVoltage1.plug_n.pin[1].i = 0.0;
//   Star1.plug_p.pin[2].i + SineVoltage1.plug_n.pin[2].i = 0.0;
//   Star1.plug_p.pin[3].i + SineVoltage1.plug_n.pin[3].i = 0.0;
//   Star1.pin_n.v = Star1.plug_p.pin[1].v;
//   Star1.pin_n.v = Star1.plug_p.pin[2].v;
//   Star1.pin_n.v = Star1.plug_p.pin[3].v;
//   -Star1.pin_n.i + -Star1.plug_p.pin[1].i + -Star1.plug_p.pin[2].i + -Star1.plug_p.pin[3].i = 0.0;
//   IdealCloser1.plug_p.pin[1].i + SineVoltage1.plug_p.pin[1].i = 0.0;
//   IdealCloser1.plug_p.pin[2].i + SineVoltage1.plug_p.pin[2].i = 0.0;
//   IdealCloser1.plug_p.pin[3].i + SineVoltage1.plug_p.pin[3].i = 0.0;
//   -IdealCloser1.plug_p.pin[1].i + IdealCloser1.idealClosingSwitch[1].p.i = 0.0;
//   -IdealCloser1.plug_n.pin[1].i + IdealCloser1.idealClosingSwitch[1].n.i = 0.0;
//   -IdealCloser1.plug_p.pin[2].i + IdealCloser1.idealClosingSwitch[2].p.i = 0.0;
//   -IdealCloser1.plug_n.pin[2].i + IdealCloser1.idealClosingSwitch[2].n.i = 0.0;
//   -IdealCloser1.plug_p.pin[3].i + IdealCloser1.idealClosingSwitch[3].p.i = 0.0;
//   -IdealCloser1.plug_n.pin[3].i + IdealCloser1.idealClosingSwitch[3].n.i = 0.0;
//   IdealCloser1.idealClosingSwitch[1].n.v = IdealCloser1.plug_n.pin[1].v;
//   IdealCloser1.idealClosingSwitch[2].n.v = IdealCloser1.plug_n.pin[2].v;
//   IdealCloser1.idealClosingSwitch[3].n.v = IdealCloser1.plug_n.pin[3].v;
//   IdealCloser1.idealClosingSwitch[1].p.v = IdealCloser1.plug_p.pin[1].v;
//   IdealCloser1.idealClosingSwitch[2].p.v = IdealCloser1.plug_p.pin[2].v;
//   IdealCloser1.idealClosingSwitch[3].p.v = IdealCloser1.plug_p.pin[3].v;
//   IdealCloser1.control[1] = IdealCloser1.idealClosingSwitch[1].control;
//   IdealCloser1.control[2] = IdealCloser1.idealClosingSwitch[2].control;
//   IdealCloser1.control[3] = IdealCloser1.idealClosingSwitch[3].control;
//   QuadraticLoadTorque1.flange.tau + LoadInertia.flange_b.tau = 0.0;
//   QuadraticLoadTorque1.bearing.tau = 0.0;
//   -SineVoltage1.plug_p.pin[1].i + SineVoltage1.sineVoltage[1].p.i = 0.0;
//   -SineVoltage1.plug_n.pin[1].i + SineVoltage1.sineVoltage[1].n.i = 0.0;
//   -SineVoltage1.plug_p.pin[2].i + SineVoltage1.sineVoltage[2].p.i = 0.0;
//   -SineVoltage1.plug_n.pin[2].i + SineVoltage1.sineVoltage[2].n.i = 0.0;
//   -SineVoltage1.plug_p.pin[3].i + SineVoltage1.sineVoltage[3].p.i = 0.0;
//   -SineVoltage1.plug_n.pin[3].i + SineVoltage1.sineVoltage[3].n.i = 0.0;
//   SineVoltage1.plug_n.pin[1].v = SineVoltage1.sineVoltage[1].n.v;
//   SineVoltage1.plug_n.pin[2].v = SineVoltage1.sineVoltage[2].n.v;
//   SineVoltage1.plug_n.pin[3].v = SineVoltage1.sineVoltage[3].n.v;
//   SineVoltage1.plug_p.pin[1].v = SineVoltage1.sineVoltage[1].p.v;
//   SineVoltage1.plug_p.pin[2].v = SineVoltage1.sineVoltage[2].p.v;
//   SineVoltage1.plug_p.pin[3].v = SineVoltage1.sineVoltage[3].p.v;
//   CurrentRMSsensor1.plug_n.pin[1].v = TerminalBox1.plugToGrid.pin[1].v;
//   CurrentRMSsensor1.plug_n.pin[2].v = TerminalBox1.plugToGrid.pin[2].v;
//   CurrentRMSsensor1.plug_n.pin[3].v = TerminalBox1.plugToGrid.pin[3].v;
//   CurrentRMSsensor1.plug_p.pin[1].v = IdealCloser1.plug_n.pin[1].v;
//   CurrentRMSsensor1.plug_p.pin[2].v = IdealCloser1.plug_n.pin[2].v;
//   CurrentRMSsensor1.plug_p.pin[3].v = IdealCloser1.plug_n.pin[3].v;
//   IdealCloser1.plug_p.pin[1].v = SineVoltage1.plug_p.pin[1].v;
//   IdealCloser1.plug_p.pin[2].v = SineVoltage1.plug_p.pin[2].v;
//   IdealCloser1.plug_p.pin[3].v = SineVoltage1.plug_p.pin[3].v;
//   BooleanStep1[1].y = IdealCloser1.control[1];
//   BooleanStep1[2].y = IdealCloser1.control[2];
//   BooleanStep1[3].y = IdealCloser1.control[3];
//   AIMC1.flange_a.phi = LoadInertia.flange_a.phi;
//   AIMC1.plug_sn.pin[1].v = TerminalBox1.negativeMachinePlug.pin[1].v;
//   AIMC1.plug_sn.pin[2].v = TerminalBox1.negativeMachinePlug.pin[2].v;
//   AIMC1.plug_sn.pin[3].v = TerminalBox1.negativeMachinePlug.pin[3].v;
//   AIMC1.plug_sp.pin[1].v = TerminalBox1.positiveMachinePlug.pin[1].v;
//   AIMC1.plug_sp.pin[2].v = TerminalBox1.positiveMachinePlug.pin[2].v;
//   AIMC1.plug_sp.pin[3].v = TerminalBox1.positiveMachinePlug.pin[3].v;
//   LoadInertia.flange_b.phi = QuadraticLoadTorque1.flange.phi;
//   SineVoltage1.plug_n.pin[1].v = Star1.plug_p.pin[1].v;
//   SineVoltage1.plug_n.pin[2].v = Star1.plug_p.pin[2].v;
//   SineVoltage1.plug_n.pin[3].v = Star1.plug_p.pin[3].v;
//   Ground1.p.v = Star1.pin_n.v;
// end Modelica.Electrical.Machines.Examples.AIMC_DOL;
// "
// "Notification: Modelica language version set to 2.x due to loading of MSL 2.2.1.
// "
// endResult
