//name:         CauerLowPassSC
//keyword:      instantiating msl221
//status:       correct
//env: OPENMODELICALIBRARY=../../../libraries/msl221
//
// instantiate example
//

loadModel(Modelica);
instantiateModel(Modelica.Electrical.Analog.Examples.CauerLowPassSC);
getErrorString();
// Result:
// true
// "class Modelica.Electrical.Analog.Examples.CauerLowPassSC
//   parameter Real l1 = 1.304;
//   parameter Real l2 = 0.8586;
//   parameter Real c1 = 1.072;
//   parameter Real c2 = 1.0 / l1 / 2.906997720064;
//   parameter Real c3 = 1.682;
//   parameter Real c4 = 1.0 / l2 / 1.392270203025;
//   parameter Real c5 = 0.7262;
//   Real C1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c1 + c2 \"Capacitance\";
//   Real C2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C2.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c2 \"Capacitance\";
//   Real C3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C3.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C3.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C3.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C3.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C3.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = l1 \"Capacitance\";
//   Real C4.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C4.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C4.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C4.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C4.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C4.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C4.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c4 \"Capacitance\";
//   Real C5.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C5.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C5.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C5.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C5.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C5.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C5.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c2 \"Capacitance\";
//   Real Op1.in_p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op1.in_p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op1.in_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op1.in_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op1.out.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op1.out.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real G.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op2.in_p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op2.in_p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op2.in_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op2.in_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op2.out.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op2.out.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op3.in_p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op3.in_p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op3.in_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op3.in_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op3.out.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op3.out.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real G1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C6.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C6.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C6.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C6.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C6.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C6.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C6.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c2 + (c3 + c4) \"Capacitance\";
//   Real Op4.in_p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op4.in_p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op4.in_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op4.in_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op4.out.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op4.out.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op5.in_p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op5.in_p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op5.in_n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op5.in_n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Op5.out.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Op5.out.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C7.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C7.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C7.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C7.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C7.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C7.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C7.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = l2 \"Capacitance\";
//   Real C8.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C8.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C8.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C8.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C8.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C8.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C8.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c4 \"Capacitance\";
//   Real C9.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real C9.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real C9.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C9.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real C9.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real C9.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real C9.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = c4 + c5 \"Capacitance\";
//   Real G2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real G3.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G3.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real G4.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G4.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real V.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real V.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real V.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real V.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real V.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real V.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real V.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real V.startTime(quantity = \"Time\", unit = \"s\") = 1.0 \"Time offset\";
//   output Real V.signalSource.y \"Connector of Real output signal\";
//   parameter Real V.signalSource.offset = V.offset \"offset of output signal\";
//   parameter Real V.signalSource.startTime(quantity = \"Time\", unit = \"s\") = V.startTime \"output = offset for time < startTime\";
//   parameter Real V.signalSource.height = V.V \"Height of step\";
//   parameter Real V.V(quantity = \"ElectricPotential\", unit = \"V\") = 1.0 \"Height of step\";
//   Real Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R4.clock = 0.1;
//   parameter Real R4.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R4.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R4.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R4.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R4.clock \"Time for one period\";
//   parameter Real R4.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R4.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R4.BooleanPulse1.period * R4.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R4.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R4.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R4.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R4.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R4.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R4.R * R4.clock \"Capacitance\";
//   parameter Real R4.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R4.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R4.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R4.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R4.IdealCommutingSwitch1.s1;
//   protected Real R4.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R4.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R4.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R4.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R4.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R4.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R4.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R4.IdealCommutingSwitch2.s1;
//   protected Real R4.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R4.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R4.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R4.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R4.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R4.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R5.clock = 0.1;
//   parameter Real R5.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R5.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R5.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R5.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R5.clock \"Time for one period\";
//   parameter Real R5.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R5.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R5.BooleanPulse1.period * R5.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R5.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R5.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R5.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R5.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R5.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R5.R * R5.clock \"Capacitance\";
//   parameter Real R5.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R5.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R5.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R5.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R5.IdealCommutingSwitch1.s1;
//   protected Real R5.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R5.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R5.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R5.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R5.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R5.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R5.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R5.IdealCommutingSwitch2.s1;
//   protected Real R5.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R5.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R5.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R5.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R5.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R5.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R8.clock = 0.1;
//   parameter Real R8.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R8.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R8.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R8.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R8.clock \"Time for one period\";
//   parameter Real R8.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R8.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R8.BooleanPulse1.period * R8.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R8.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R8.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R8.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R8.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R8.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R8.R * R8.clock \"Capacitance\";
//   parameter Real R8.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R8.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R8.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R8.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R8.IdealCommutingSwitch1.s1;
//   protected Real R8.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R8.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R8.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R8.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R8.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R8.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R8.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R8.IdealCommutingSwitch2.s1;
//   protected Real R8.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R8.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R8.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R8.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R8.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R8.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R9.clock = 0.1;
//   parameter Real R9.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R9.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R9.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R9.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R9.clock \"Time for one period\";
//   parameter Real R9.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R9.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R9.BooleanPulse1.period * R9.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R9.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R9.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R9.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R9.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R9.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R9.R * R9.clock \"Capacitance\";
//   parameter Real R9.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R9.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R9.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R9.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R9.IdealCommutingSwitch1.s1;
//   protected Real R9.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R9.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R9.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R9.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R9.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R9.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R9.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R9.IdealCommutingSwitch2.s1;
//   protected Real R9.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R9.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R9.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R9.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R9.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R9.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R1.clock = 0.1;
//   parameter Real R1.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R1.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R1.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R1.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R1.clock \"Time for one period\";
//   parameter Real R1.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R1.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R1.BooleanPulse1.period * R1.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R1.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R1.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R1.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R1.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R1.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R1.R * R1.clock \"Capacitance\";
//   parameter Real R1.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R1.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R1.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R1.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R1.IdealCommutingSwitch1.s1;
//   protected Real R1.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R1.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R1.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R1.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R1.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R1.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R1.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R1.IdealCommutingSwitch2.s1;
//   protected Real R1.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R1.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R1.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R1.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R2.clock = 0.1;
//   parameter Real R2.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R2.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R2.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R2.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R2.clock \"Time for one period\";
//   parameter Real R2.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R2.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R2.BooleanPulse1.period * R2.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R2.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R2.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R2.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R2.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R2.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R2.R * R2.clock \"Capacitance\";
//   parameter Real R2.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R2.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R2.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R2.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R2.IdealCommutingSwitch1.s1;
//   protected Real R2.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R2.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R2.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R2.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R2.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R2.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R2.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R2.IdealCommutingSwitch2.s1;
//   protected Real R2.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R2.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R2.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R2.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R3.clock = 0.1;
//   parameter Real R3.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R3.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R3.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R3.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R3.clock \"Time for one period\";
//   parameter Real R3.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R3.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R3.BooleanPulse1.period * R3.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R3.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R3.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R3.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R3.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R3.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R3.R * R3.clock \"Capacitance\";
//   parameter Real R3.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R3.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R3.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R3.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R3.IdealCommutingSwitch1.s1;
//   protected Real R3.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R3.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R3.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R3.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R3.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R3.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R3.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R3.IdealCommutingSwitch2.s1;
//   protected Real R3.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R3.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R3.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R3.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R3.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R3.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Rp1.clock = 0.1;
//   parameter Real Rp1.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean Rp1.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real Rp1.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real Rp1.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = Rp1.clock \"Time for one period\";
//   parameter Real Rp1.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real Rp1.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = Rp1.BooleanPulse1.period * Rp1.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real Rp1.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real Rp1.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Rp1.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Rp1.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Rp1.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = Rp1.R * Rp1.clock \"Capacitance\";
//   parameter Real Rp1.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real Rp1.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real Rp1.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean Rp1.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real Rp1.IdealCommutingSwitch1.s1;
//   protected Real Rp1.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real Rp1.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real Rp1.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real Rp1.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real Rp1.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real Rp1.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean Rp1.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real Rp1.IdealCommutingSwitch2.s1;
//   protected Real Rp1.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real Rp1.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real Rp1.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real Rp1.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Rp1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Rp1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R7.clock = 0.1;
//   parameter Real R7.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R7.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R7.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R7.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R7.clock \"Time for one period\";
//   parameter Real R7.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R7.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R7.BooleanPulse1.period * R7.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R7.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R7.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R7.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R7.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R7.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R7.R * R7.clock \"Capacitance\";
//   parameter Real R7.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R7.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R7.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R7.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R7.IdealCommutingSwitch1.s1;
//   protected Real R7.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R7.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R7.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R7.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R7.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R7.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R7.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R7.IdealCommutingSwitch2.s1;
//   protected Real R7.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R7.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R7.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R7.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R7.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R7.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R10.clock = 0.1;
//   parameter Real R10.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R10.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R10.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R10.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R10.clock \"Time for one period\";
//   parameter Real R10.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R10.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R10.BooleanPulse1.period * R10.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R10.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R10.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R10.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R10.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R10.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R10.R * R10.clock \"Capacitance\";
//   parameter Real R10.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R10.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R10.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R10.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R10.IdealCommutingSwitch1.s1;
//   protected Real R10.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R10.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R10.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R10.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R10.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R10.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R10.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R10.IdealCommutingSwitch2.s1;
//   protected Real R10.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R10.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R10.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R10.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R10.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R10.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R11.clock = 0.1;
//   parameter Real R11.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   output Boolean R11.BooleanPulse1.y \"Connector of Boolean output signal\";
//   parameter Real R11.BooleanPulse1.width(min = 1e-60, max = 100.0) = 50.0 \"Width of pulse in % of period\";
//   parameter Real R11.BooleanPulse1.period(quantity = \"Time\", unit = \"s\", min = 1e-60) = R11.clock \"Time for one period\";
//   parameter Real R11.BooleanPulse1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time instant of first pulse\";
//   protected parameter Real R11.BooleanPulse1.Twidth(quantity = \"Time\", unit = \"s\") = R11.BooleanPulse1.period * R11.BooleanPulse1.width / 100.0 \"width of one pulse\";
//   protected discrete Real R11.BooleanPulse1.pulsStart(quantity = \"Time\", unit = \"s\") \"Start time of pulse\";
//   Real R11.Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R11.Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R11.Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R11.Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = R11.R * R11.clock \"Capacitance\";
//   parameter Real R11.IdealCommutingSwitch1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R11.IdealCommutingSwitch1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R11.IdealCommutingSwitch1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.IdealCommutingSwitch1.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch1.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.IdealCommutingSwitch1.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch1.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R11.IdealCommutingSwitch1.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R11.IdealCommutingSwitch1.s1;
//   protected Real R11.IdealCommutingSwitch1.s2 \"Auxiliary variables\";
//   protected parameter Real R11.IdealCommutingSwitch1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R11.IdealCommutingSwitch1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   parameter Real R11.IdealCommutingSwitch2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = 1e-05 \"Closed switch resistance\";
//   parameter Real R11.IdealCommutingSwitch2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = 1e-05 \"Opened switch conductance\";
//   Real R11.IdealCommutingSwitch2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.IdealCommutingSwitch2.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch2.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.IdealCommutingSwitch2.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.IdealCommutingSwitch2.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Boolean R11.IdealCommutingSwitch2.control \"true => p--n2 connected, false => p--n1 connected\";
//   protected Real R11.IdealCommutingSwitch2.s1;
//   protected Real R11.IdealCommutingSwitch2.s2 \"Auxiliary variables\";
//   protected parameter Real R11.IdealCommutingSwitch2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real R11.IdealCommutingSwitch2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real R11.Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.Ground2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.Ground2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R11.n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R11.n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n4.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n4.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n5.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n5.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real p1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n6.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n6.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n7.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n7.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n8.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n8.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real p2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real out1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real out1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real p3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n9.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n9.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n10.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n10.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n11.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n11.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n12.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n12.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n13.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n13.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real p4.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p4.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n14.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n14.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
// initial equation
//   R4.BooleanPulse1.pulsStart = R4.BooleanPulse1.startTime;
//   R5.BooleanPulse1.pulsStart = R5.BooleanPulse1.startTime;
//   R8.BooleanPulse1.pulsStart = R8.BooleanPulse1.startTime;
//   R9.BooleanPulse1.pulsStart = R9.BooleanPulse1.startTime;
//   R1.BooleanPulse1.pulsStart = R1.BooleanPulse1.startTime;
//   R2.BooleanPulse1.pulsStart = R2.BooleanPulse1.startTime;
//   R3.BooleanPulse1.pulsStart = R3.BooleanPulse1.startTime;
//   Rp1.BooleanPulse1.pulsStart = Rp1.BooleanPulse1.startTime;
//   R7.BooleanPulse1.pulsStart = R7.BooleanPulse1.startTime;
//   R10.BooleanPulse1.pulsStart = R10.BooleanPulse1.startTime;
//   R11.BooleanPulse1.pulsStart = R11.BooleanPulse1.startTime;
// equation
//   C1.i = C1.C * der(C1.v);
//   C1.v = C1.p.v - C1.n.v;
//   0.0 = C1.p.i + C1.n.i;
//   C1.i = C1.p.i;
//   C2.i = C2.C * der(C2.v);
//   C2.v = C2.p.v - C2.n.v;
//   0.0 = C2.p.i + C2.n.i;
//   C2.i = C2.p.i;
//   C3.i = C3.C * der(C3.v);
//   C3.v = C3.p.v - C3.n.v;
//   0.0 = C3.p.i + C3.n.i;
//   C3.i = C3.p.i;
//   C4.i = C4.C * der(C4.v);
//   C4.v = C4.p.v - C4.n.v;
//   0.0 = C4.p.i + C4.n.i;
//   C4.i = C4.p.i;
//   C5.i = C5.C * der(C5.v);
//   C5.v = C5.p.v - C5.n.v;
//   0.0 = C5.p.i + C5.n.i;
//   C5.i = C5.p.i;
//   Op1.in_p.v = Op1.in_n.v;
//   Op1.in_p.i = 0.0;
//   Op1.in_n.i = 0.0;
//   G.p.v = 0.0;
//   Op2.in_p.v = Op2.in_n.v;
//   Op2.in_p.i = 0.0;
//   Op2.in_n.i = 0.0;
//   Op3.in_p.v = Op3.in_n.v;
//   Op3.in_p.i = 0.0;
//   Op3.in_n.i = 0.0;
//   G1.p.v = 0.0;
//   C6.i = C6.C * der(C6.v);
//   C6.v = C6.p.v - C6.n.v;
//   0.0 = C6.p.i + C6.n.i;
//   C6.i = C6.p.i;
//   Op4.in_p.v = Op4.in_n.v;
//   Op4.in_p.i = 0.0;
//   Op4.in_n.i = 0.0;
//   Op5.in_p.v = Op5.in_n.v;
//   Op5.in_p.i = 0.0;
//   Op5.in_n.i = 0.0;
//   C7.i = C7.C * der(C7.v);
//   C7.v = C7.p.v - C7.n.v;
//   0.0 = C7.p.i + C7.n.i;
//   C7.i = C7.p.i;
//   C8.i = C8.C * der(C8.v);
//   C8.v = C8.p.v - C8.n.v;
//   0.0 = C8.p.i + C8.n.i;
//   C8.i = C8.p.i;
//   C9.i = C9.C * der(C9.v);
//   C9.v = C9.p.v - C9.n.v;
//   0.0 = C9.p.i + C9.n.i;
//   C9.i = C9.p.i;
//   G2.p.v = 0.0;
//   G3.p.v = 0.0;
//   G4.p.v = 0.0;
//   V.signalSource.y = V.signalSource.offset + (if time < V.signalSource.startTime then 0.0 else V.signalSource.height);
//   V.v = V.signalSource.y;
//   V.v = V.p.v - V.n.v;
//   0.0 = V.p.i + V.n.i;
//   V.i = V.p.i;
//   Ground1.p.v = 0.0;
//   when sample(R4.BooleanPulse1.startTime,R4.BooleanPulse1.period) then
//   R4.BooleanPulse1.pulsStart = time;
//   end when;
//   R4.BooleanPulse1.y = time >= R4.BooleanPulse1.pulsStart AND time < R4.BooleanPulse1.pulsStart + R4.BooleanPulse1.Twidth;
//   R4.Capacitor1.i = R4.Capacitor1.C * der(R4.Capacitor1.v);
//   R4.Capacitor1.v = R4.Capacitor1.p.v - R4.Capacitor1.n.v;
//   0.0 = R4.Capacitor1.p.i + R4.Capacitor1.n.i;
//   R4.Capacitor1.i = R4.Capacitor1.p.i;
//   0.0 = R4.IdealCommutingSwitch1.p.i + (R4.IdealCommutingSwitch1.n2.i + R4.IdealCommutingSwitch1.n1.i);
//   R4.IdealCommutingSwitch1.p.v - R4.IdealCommutingSwitch1.n1.v = R4.IdealCommutingSwitch1.s1 * (R4.IdealCommutingSwitch1.unitCurrent * (if R4.IdealCommutingSwitch1.control then 1.0 else R4.IdealCommutingSwitch1.Ron));
//   R4.IdealCommutingSwitch1.n1.i = (-R4.IdealCommutingSwitch1.s1) * (R4.IdealCommutingSwitch1.unitVoltage * (if R4.IdealCommutingSwitch1.control then R4.IdealCommutingSwitch1.Goff else 1.0));
//   R4.IdealCommutingSwitch1.p.v - R4.IdealCommutingSwitch1.n2.v = R4.IdealCommutingSwitch1.s2 * (R4.IdealCommutingSwitch1.unitCurrent * (if R4.IdealCommutingSwitch1.control then R4.IdealCommutingSwitch1.Ron else 1.0));
//   R4.IdealCommutingSwitch1.n2.i = (-R4.IdealCommutingSwitch1.s2) * (R4.IdealCommutingSwitch1.unitVoltage * (if R4.IdealCommutingSwitch1.control then 1.0 else R4.IdealCommutingSwitch1.Goff));
//   0.0 = R4.IdealCommutingSwitch2.p.i + (R4.IdealCommutingSwitch2.n2.i + R4.IdealCommutingSwitch2.n1.i);
//   R4.IdealCommutingSwitch2.p.v - R4.IdealCommutingSwitch2.n1.v = R4.IdealCommutingSwitch2.s1 * (R4.IdealCommutingSwitch2.unitCurrent * (if R4.IdealCommutingSwitch2.control then 1.0 else R4.IdealCommutingSwitch2.Ron));
//   R4.IdealCommutingSwitch2.n1.i = (-R4.IdealCommutingSwitch2.s1) * (R4.IdealCommutingSwitch2.unitVoltage * (if R4.IdealCommutingSwitch2.control then R4.IdealCommutingSwitch2.Goff else 1.0));
//   R4.IdealCommutingSwitch2.p.v - R4.IdealCommutingSwitch2.n2.v = R4.IdealCommutingSwitch2.s2 * (R4.IdealCommutingSwitch2.unitCurrent * (if R4.IdealCommutingSwitch2.control then R4.IdealCommutingSwitch2.Ron else 1.0));
//   R4.IdealCommutingSwitch2.n2.i = (-R4.IdealCommutingSwitch2.s2) * (R4.IdealCommutingSwitch2.unitVoltage * (if R4.IdealCommutingSwitch2.control then 1.0 else R4.IdealCommutingSwitch2.Goff));
//   R4.Ground1.p.v = 0.0;
//   R4.Ground2.p.v = 0.0;
//   when sample(R5.BooleanPulse1.startTime,R5.BooleanPulse1.period) then
//   R5.BooleanPulse1.pulsStart = time;
//   end when;
//   R5.BooleanPulse1.y = time >= R5.BooleanPulse1.pulsStart AND time < R5.BooleanPulse1.pulsStart + R5.BooleanPulse1.Twidth;
//   R5.Capacitor1.i = R5.Capacitor1.C * der(R5.Capacitor1.v);
//   R5.Capacitor1.v = R5.Capacitor1.p.v - R5.Capacitor1.n.v;
//   0.0 = R5.Capacitor1.p.i + R5.Capacitor1.n.i;
//   R5.Capacitor1.i = R5.Capacitor1.p.i;
//   0.0 = R5.IdealCommutingSwitch1.p.i + (R5.IdealCommutingSwitch1.n2.i + R5.IdealCommutingSwitch1.n1.i);
//   R5.IdealCommutingSwitch1.p.v - R5.IdealCommutingSwitch1.n1.v = R5.IdealCommutingSwitch1.s1 * (R5.IdealCommutingSwitch1.unitCurrent * (if R5.IdealCommutingSwitch1.control then 1.0 else R5.IdealCommutingSwitch1.Ron));
//   R5.IdealCommutingSwitch1.n1.i = (-R5.IdealCommutingSwitch1.s1) * (R5.IdealCommutingSwitch1.unitVoltage * (if R5.IdealCommutingSwitch1.control then R5.IdealCommutingSwitch1.Goff else 1.0));
//   R5.IdealCommutingSwitch1.p.v - R5.IdealCommutingSwitch1.n2.v = R5.IdealCommutingSwitch1.s2 * (R5.IdealCommutingSwitch1.unitCurrent * (if R5.IdealCommutingSwitch1.control then R5.IdealCommutingSwitch1.Ron else 1.0));
//   R5.IdealCommutingSwitch1.n2.i = (-R5.IdealCommutingSwitch1.s2) * (R5.IdealCommutingSwitch1.unitVoltage * (if R5.IdealCommutingSwitch1.control then 1.0 else R5.IdealCommutingSwitch1.Goff));
//   0.0 = R5.IdealCommutingSwitch2.p.i + (R5.IdealCommutingSwitch2.n2.i + R5.IdealCommutingSwitch2.n1.i);
//   R5.IdealCommutingSwitch2.p.v - R5.IdealCommutingSwitch2.n1.v = R5.IdealCommutingSwitch2.s1 * (R5.IdealCommutingSwitch2.unitCurrent * (if R5.IdealCommutingSwitch2.control then 1.0 else R5.IdealCommutingSwitch2.Ron));
//   R5.IdealCommutingSwitch2.n1.i = (-R5.IdealCommutingSwitch2.s1) * (R5.IdealCommutingSwitch2.unitVoltage * (if R5.IdealCommutingSwitch2.control then R5.IdealCommutingSwitch2.Goff else 1.0));
//   R5.IdealCommutingSwitch2.p.v - R5.IdealCommutingSwitch2.n2.v = R5.IdealCommutingSwitch2.s2 * (R5.IdealCommutingSwitch2.unitCurrent * (if R5.IdealCommutingSwitch2.control then R5.IdealCommutingSwitch2.Ron else 1.0));
//   R5.IdealCommutingSwitch2.n2.i = (-R5.IdealCommutingSwitch2.s2) * (R5.IdealCommutingSwitch2.unitVoltage * (if R5.IdealCommutingSwitch2.control then 1.0 else R5.IdealCommutingSwitch2.Goff));
//   R5.Ground1.p.v = 0.0;
//   R5.Ground2.p.v = 0.0;
//   when sample(R8.BooleanPulse1.startTime,R8.BooleanPulse1.period) then
//   R8.BooleanPulse1.pulsStart = time;
//   end when;
//   R8.BooleanPulse1.y = time >= R8.BooleanPulse1.pulsStart AND time < R8.BooleanPulse1.pulsStart + R8.BooleanPulse1.Twidth;
//   R8.Capacitor1.i = R8.Capacitor1.C * der(R8.Capacitor1.v);
//   R8.Capacitor1.v = R8.Capacitor1.p.v - R8.Capacitor1.n.v;
//   0.0 = R8.Capacitor1.p.i + R8.Capacitor1.n.i;
//   R8.Capacitor1.i = R8.Capacitor1.p.i;
//   0.0 = R8.IdealCommutingSwitch1.p.i + (R8.IdealCommutingSwitch1.n2.i + R8.IdealCommutingSwitch1.n1.i);
//   R8.IdealCommutingSwitch1.p.v - R8.IdealCommutingSwitch1.n1.v = R8.IdealCommutingSwitch1.s1 * (R8.IdealCommutingSwitch1.unitCurrent * (if R8.IdealCommutingSwitch1.control then 1.0 else R8.IdealCommutingSwitch1.Ron));
//   R8.IdealCommutingSwitch1.n1.i = (-R8.IdealCommutingSwitch1.s1) * (R8.IdealCommutingSwitch1.unitVoltage * (if R8.IdealCommutingSwitch1.control then R8.IdealCommutingSwitch1.Goff else 1.0));
//   R8.IdealCommutingSwitch1.p.v - R8.IdealCommutingSwitch1.n2.v = R8.IdealCommutingSwitch1.s2 * (R8.IdealCommutingSwitch1.unitCurrent * (if R8.IdealCommutingSwitch1.control then R8.IdealCommutingSwitch1.Ron else 1.0));
//   R8.IdealCommutingSwitch1.n2.i = (-R8.IdealCommutingSwitch1.s2) * (R8.IdealCommutingSwitch1.unitVoltage * (if R8.IdealCommutingSwitch1.control then 1.0 else R8.IdealCommutingSwitch1.Goff));
//   0.0 = R8.IdealCommutingSwitch2.p.i + (R8.IdealCommutingSwitch2.n2.i + R8.IdealCommutingSwitch2.n1.i);
//   R8.IdealCommutingSwitch2.p.v - R8.IdealCommutingSwitch2.n1.v = R8.IdealCommutingSwitch2.s1 * (R8.IdealCommutingSwitch2.unitCurrent * (if R8.IdealCommutingSwitch2.control then 1.0 else R8.IdealCommutingSwitch2.Ron));
//   R8.IdealCommutingSwitch2.n1.i = (-R8.IdealCommutingSwitch2.s1) * (R8.IdealCommutingSwitch2.unitVoltage * (if R8.IdealCommutingSwitch2.control then R8.IdealCommutingSwitch2.Goff else 1.0));
//   R8.IdealCommutingSwitch2.p.v - R8.IdealCommutingSwitch2.n2.v = R8.IdealCommutingSwitch2.s2 * (R8.IdealCommutingSwitch2.unitCurrent * (if R8.IdealCommutingSwitch2.control then R8.IdealCommutingSwitch2.Ron else 1.0));
//   R8.IdealCommutingSwitch2.n2.i = (-R8.IdealCommutingSwitch2.s2) * (R8.IdealCommutingSwitch2.unitVoltage * (if R8.IdealCommutingSwitch2.control then 1.0 else R8.IdealCommutingSwitch2.Goff));
//   R8.Ground1.p.v = 0.0;
//   R8.Ground2.p.v = 0.0;
//   when sample(R9.BooleanPulse1.startTime,R9.BooleanPulse1.period) then
//   R9.BooleanPulse1.pulsStart = time;
//   end when;
//   R9.BooleanPulse1.y = time >= R9.BooleanPulse1.pulsStart AND time < R9.BooleanPulse1.pulsStart + R9.BooleanPulse1.Twidth;
//   R9.Capacitor1.i = R9.Capacitor1.C * der(R9.Capacitor1.v);
//   R9.Capacitor1.v = R9.Capacitor1.p.v - R9.Capacitor1.n.v;
//   0.0 = R9.Capacitor1.p.i + R9.Capacitor1.n.i;
//   R9.Capacitor1.i = R9.Capacitor1.p.i;
//   0.0 = R9.IdealCommutingSwitch1.p.i + (R9.IdealCommutingSwitch1.n2.i + R9.IdealCommutingSwitch1.n1.i);
//   R9.IdealCommutingSwitch1.p.v - R9.IdealCommutingSwitch1.n1.v = R9.IdealCommutingSwitch1.s1 * (R9.IdealCommutingSwitch1.unitCurrent * (if R9.IdealCommutingSwitch1.control then 1.0 else R9.IdealCommutingSwitch1.Ron));
//   R9.IdealCommutingSwitch1.n1.i = (-R9.IdealCommutingSwitch1.s1) * (R9.IdealCommutingSwitch1.unitVoltage * (if R9.IdealCommutingSwitch1.control then R9.IdealCommutingSwitch1.Goff else 1.0));
//   R9.IdealCommutingSwitch1.p.v - R9.IdealCommutingSwitch1.n2.v = R9.IdealCommutingSwitch1.s2 * (R9.IdealCommutingSwitch1.unitCurrent * (if R9.IdealCommutingSwitch1.control then R9.IdealCommutingSwitch1.Ron else 1.0));
//   R9.IdealCommutingSwitch1.n2.i = (-R9.IdealCommutingSwitch1.s2) * (R9.IdealCommutingSwitch1.unitVoltage * (if R9.IdealCommutingSwitch1.control then 1.0 else R9.IdealCommutingSwitch1.Goff));
//   0.0 = R9.IdealCommutingSwitch2.p.i + (R9.IdealCommutingSwitch2.n2.i + R9.IdealCommutingSwitch2.n1.i);
//   R9.IdealCommutingSwitch2.p.v - R9.IdealCommutingSwitch2.n1.v = R9.IdealCommutingSwitch2.s1 * (R9.IdealCommutingSwitch2.unitCurrent * (if R9.IdealCommutingSwitch2.control then 1.0 else R9.IdealCommutingSwitch2.Ron));
//   R9.IdealCommutingSwitch2.n1.i = (-R9.IdealCommutingSwitch2.s1) * (R9.IdealCommutingSwitch2.unitVoltage * (if R9.IdealCommutingSwitch2.control then R9.IdealCommutingSwitch2.Goff else 1.0));
//   R9.IdealCommutingSwitch2.p.v - R9.IdealCommutingSwitch2.n2.v = R9.IdealCommutingSwitch2.s2 * (R9.IdealCommutingSwitch2.unitCurrent * (if R9.IdealCommutingSwitch2.control then R9.IdealCommutingSwitch2.Ron else 1.0));
//   R9.IdealCommutingSwitch2.n2.i = (-R9.IdealCommutingSwitch2.s2) * (R9.IdealCommutingSwitch2.unitVoltage * (if R9.IdealCommutingSwitch2.control then 1.0 else R9.IdealCommutingSwitch2.Goff));
//   R9.Ground1.p.v = 0.0;
//   R9.Ground2.p.v = 0.0;
//   when sample(R1.BooleanPulse1.startTime,R1.BooleanPulse1.period) then
//   R1.BooleanPulse1.pulsStart = time;
//   end when;
//   R1.BooleanPulse1.y = time >= R1.BooleanPulse1.pulsStart AND time < R1.BooleanPulse1.pulsStart + R1.BooleanPulse1.Twidth;
//   R1.Capacitor1.i = R1.Capacitor1.C * der(R1.Capacitor1.v);
//   R1.Capacitor1.v = R1.Capacitor1.p.v - R1.Capacitor1.n.v;
//   0.0 = R1.Capacitor1.p.i + R1.Capacitor1.n.i;
//   R1.Capacitor1.i = R1.Capacitor1.p.i;
//   0.0 = R1.IdealCommutingSwitch1.p.i + (R1.IdealCommutingSwitch1.n2.i + R1.IdealCommutingSwitch1.n1.i);
//   R1.IdealCommutingSwitch1.p.v - R1.IdealCommutingSwitch1.n1.v = R1.IdealCommutingSwitch1.s1 * (R1.IdealCommutingSwitch1.unitCurrent * (if R1.IdealCommutingSwitch1.control then 1.0 else R1.IdealCommutingSwitch1.Ron));
//   R1.IdealCommutingSwitch1.n1.i = (-R1.IdealCommutingSwitch1.s1) * (R1.IdealCommutingSwitch1.unitVoltage * (if R1.IdealCommutingSwitch1.control then R1.IdealCommutingSwitch1.Goff else 1.0));
//   R1.IdealCommutingSwitch1.p.v - R1.IdealCommutingSwitch1.n2.v = R1.IdealCommutingSwitch1.s2 * (R1.IdealCommutingSwitch1.unitCurrent * (if R1.IdealCommutingSwitch1.control then R1.IdealCommutingSwitch1.Ron else 1.0));
//   R1.IdealCommutingSwitch1.n2.i = (-R1.IdealCommutingSwitch1.s2) * (R1.IdealCommutingSwitch1.unitVoltage * (if R1.IdealCommutingSwitch1.control then 1.0 else R1.IdealCommutingSwitch1.Goff));
//   0.0 = R1.IdealCommutingSwitch2.p.i + (R1.IdealCommutingSwitch2.n2.i + R1.IdealCommutingSwitch2.n1.i);
//   R1.IdealCommutingSwitch2.p.v - R1.IdealCommutingSwitch2.n1.v = R1.IdealCommutingSwitch2.s1 * (R1.IdealCommutingSwitch2.unitCurrent * (if R1.IdealCommutingSwitch2.control then 1.0 else R1.IdealCommutingSwitch2.Ron));
//   R1.IdealCommutingSwitch2.n1.i = (-R1.IdealCommutingSwitch2.s1) * (R1.IdealCommutingSwitch2.unitVoltage * (if R1.IdealCommutingSwitch2.control then R1.IdealCommutingSwitch2.Goff else 1.0));
//   R1.IdealCommutingSwitch2.p.v - R1.IdealCommutingSwitch2.n2.v = R1.IdealCommutingSwitch2.s2 * (R1.IdealCommutingSwitch2.unitCurrent * (if R1.IdealCommutingSwitch2.control then R1.IdealCommutingSwitch2.Ron else 1.0));
//   R1.IdealCommutingSwitch2.n2.i = (-R1.IdealCommutingSwitch2.s2) * (R1.IdealCommutingSwitch2.unitVoltage * (if R1.IdealCommutingSwitch2.control then 1.0 else R1.IdealCommutingSwitch2.Goff));
//   R1.Ground1.p.v = 0.0;
//   R1.Ground2.p.v = 0.0;
//   when sample(R2.BooleanPulse1.startTime,R2.BooleanPulse1.period) then
//   R2.BooleanPulse1.pulsStart = time;
//   end when;
//   R2.BooleanPulse1.y = time >= R2.BooleanPulse1.pulsStart AND time < R2.BooleanPulse1.pulsStart + R2.BooleanPulse1.Twidth;
//   R2.Capacitor1.i = R2.Capacitor1.C * der(R2.Capacitor1.v);
//   R2.Capacitor1.v = R2.Capacitor1.p.v - R2.Capacitor1.n.v;
//   0.0 = R2.Capacitor1.p.i + R2.Capacitor1.n.i;
//   R2.Capacitor1.i = R2.Capacitor1.p.i;
//   0.0 = R2.IdealCommutingSwitch1.p.i + (R2.IdealCommutingSwitch1.n2.i + R2.IdealCommutingSwitch1.n1.i);
//   R2.IdealCommutingSwitch1.p.v - R2.IdealCommutingSwitch1.n1.v = R2.IdealCommutingSwitch1.s1 * (R2.IdealCommutingSwitch1.unitCurrent * (if R2.IdealCommutingSwitch1.control then 1.0 else R2.IdealCommutingSwitch1.Ron));
//   R2.IdealCommutingSwitch1.n1.i = (-R2.IdealCommutingSwitch1.s1) * (R2.IdealCommutingSwitch1.unitVoltage * (if R2.IdealCommutingSwitch1.control then R2.IdealCommutingSwitch1.Goff else 1.0));
//   R2.IdealCommutingSwitch1.p.v - R2.IdealCommutingSwitch1.n2.v = R2.IdealCommutingSwitch1.s2 * (R2.IdealCommutingSwitch1.unitCurrent * (if R2.IdealCommutingSwitch1.control then R2.IdealCommutingSwitch1.Ron else 1.0));
//   R2.IdealCommutingSwitch1.n2.i = (-R2.IdealCommutingSwitch1.s2) * (R2.IdealCommutingSwitch1.unitVoltage * (if R2.IdealCommutingSwitch1.control then 1.0 else R2.IdealCommutingSwitch1.Goff));
//   0.0 = R2.IdealCommutingSwitch2.p.i + (R2.IdealCommutingSwitch2.n2.i + R2.IdealCommutingSwitch2.n1.i);
//   R2.IdealCommutingSwitch2.p.v - R2.IdealCommutingSwitch2.n1.v = R2.IdealCommutingSwitch2.s1 * (R2.IdealCommutingSwitch2.unitCurrent * (if R2.IdealCommutingSwitch2.control then 1.0 else R2.IdealCommutingSwitch2.Ron));
//   R2.IdealCommutingSwitch2.n1.i = (-R2.IdealCommutingSwitch2.s1) * (R2.IdealCommutingSwitch2.unitVoltage * (if R2.IdealCommutingSwitch2.control then R2.IdealCommutingSwitch2.Goff else 1.0));
//   R2.IdealCommutingSwitch2.p.v - R2.IdealCommutingSwitch2.n2.v = R2.IdealCommutingSwitch2.s2 * (R2.IdealCommutingSwitch2.unitCurrent * (if R2.IdealCommutingSwitch2.control then R2.IdealCommutingSwitch2.Ron else 1.0));
//   R2.IdealCommutingSwitch2.n2.i = (-R2.IdealCommutingSwitch2.s2) * (R2.IdealCommutingSwitch2.unitVoltage * (if R2.IdealCommutingSwitch2.control then 1.0 else R2.IdealCommutingSwitch2.Goff));
//   R2.Ground1.p.v = 0.0;
//   R2.Ground2.p.v = 0.0;
//   when sample(R3.BooleanPulse1.startTime,R3.BooleanPulse1.period) then
//   R3.BooleanPulse1.pulsStart = time;
//   end when;
//   R3.BooleanPulse1.y = time >= R3.BooleanPulse1.pulsStart AND time < R3.BooleanPulse1.pulsStart + R3.BooleanPulse1.Twidth;
//   R3.Capacitor1.i = R3.Capacitor1.C * der(R3.Capacitor1.v);
//   R3.Capacitor1.v = R3.Capacitor1.p.v - R3.Capacitor1.n.v;
//   0.0 = R3.Capacitor1.p.i + R3.Capacitor1.n.i;
//   R3.Capacitor1.i = R3.Capacitor1.p.i;
//   0.0 = R3.IdealCommutingSwitch1.p.i + (R3.IdealCommutingSwitch1.n2.i + R3.IdealCommutingSwitch1.n1.i);
//   R3.IdealCommutingSwitch1.p.v - R3.IdealCommutingSwitch1.n1.v = R3.IdealCommutingSwitch1.s1 * (R3.IdealCommutingSwitch1.unitCurrent * (if R3.IdealCommutingSwitch1.control then 1.0 else R3.IdealCommutingSwitch1.Ron));
//   R3.IdealCommutingSwitch1.n1.i = (-R3.IdealCommutingSwitch1.s1) * (R3.IdealCommutingSwitch1.unitVoltage * (if R3.IdealCommutingSwitch1.control then R3.IdealCommutingSwitch1.Goff else 1.0));
//   R3.IdealCommutingSwitch1.p.v - R3.IdealCommutingSwitch1.n2.v = R3.IdealCommutingSwitch1.s2 * (R3.IdealCommutingSwitch1.unitCurrent * (if R3.IdealCommutingSwitch1.control then R3.IdealCommutingSwitch1.Ron else 1.0));
//   R3.IdealCommutingSwitch1.n2.i = (-R3.IdealCommutingSwitch1.s2) * (R3.IdealCommutingSwitch1.unitVoltage * (if R3.IdealCommutingSwitch1.control then 1.0 else R3.IdealCommutingSwitch1.Goff));
//   0.0 = R3.IdealCommutingSwitch2.p.i + (R3.IdealCommutingSwitch2.n2.i + R3.IdealCommutingSwitch2.n1.i);
//   R3.IdealCommutingSwitch2.p.v - R3.IdealCommutingSwitch2.n1.v = R3.IdealCommutingSwitch2.s1 * (R3.IdealCommutingSwitch2.unitCurrent * (if R3.IdealCommutingSwitch2.control then 1.0 else R3.IdealCommutingSwitch2.Ron));
//   R3.IdealCommutingSwitch2.n1.i = (-R3.IdealCommutingSwitch2.s1) * (R3.IdealCommutingSwitch2.unitVoltage * (if R3.IdealCommutingSwitch2.control then R3.IdealCommutingSwitch2.Goff else 1.0));
//   R3.IdealCommutingSwitch2.p.v - R3.IdealCommutingSwitch2.n2.v = R3.IdealCommutingSwitch2.s2 * (R3.IdealCommutingSwitch2.unitCurrent * (if R3.IdealCommutingSwitch2.control then R3.IdealCommutingSwitch2.Ron else 1.0));
//   R3.IdealCommutingSwitch2.n2.i = (-R3.IdealCommutingSwitch2.s2) * (R3.IdealCommutingSwitch2.unitVoltage * (if R3.IdealCommutingSwitch2.control then 1.0 else R3.IdealCommutingSwitch2.Goff));
//   R3.Ground1.p.v = 0.0;
//   R3.Ground2.p.v = 0.0;
//   when sample(Rp1.BooleanPulse1.startTime,Rp1.BooleanPulse1.period) then
//   Rp1.BooleanPulse1.pulsStart = time;
//   end when;
//   Rp1.BooleanPulse1.y = time >= Rp1.BooleanPulse1.pulsStart AND time < Rp1.BooleanPulse1.pulsStart + Rp1.BooleanPulse1.Twidth;
//   Rp1.Capacitor1.i = Rp1.Capacitor1.C * der(Rp1.Capacitor1.v);
//   Rp1.Capacitor1.v = Rp1.Capacitor1.p.v - Rp1.Capacitor1.n.v;
//   0.0 = Rp1.Capacitor1.p.i + Rp1.Capacitor1.n.i;
//   Rp1.Capacitor1.i = Rp1.Capacitor1.p.i;
//   0.0 = Rp1.IdealCommutingSwitch1.p.i + (Rp1.IdealCommutingSwitch1.n2.i + Rp1.IdealCommutingSwitch1.n1.i);
//   Rp1.IdealCommutingSwitch1.p.v - Rp1.IdealCommutingSwitch1.n1.v = Rp1.IdealCommutingSwitch1.s1 * (Rp1.IdealCommutingSwitch1.unitCurrent * (if Rp1.IdealCommutingSwitch1.control then 1.0 else Rp1.IdealCommutingSwitch1.Ron));
//   Rp1.IdealCommutingSwitch1.n1.i = (-Rp1.IdealCommutingSwitch1.s1) * (Rp1.IdealCommutingSwitch1.unitVoltage * (if Rp1.IdealCommutingSwitch1.control then Rp1.IdealCommutingSwitch1.Goff else 1.0));
//   Rp1.IdealCommutingSwitch1.p.v - Rp1.IdealCommutingSwitch1.n2.v = Rp1.IdealCommutingSwitch1.s2 * (Rp1.IdealCommutingSwitch1.unitCurrent * (if Rp1.IdealCommutingSwitch1.control then Rp1.IdealCommutingSwitch1.Ron else 1.0));
//   Rp1.IdealCommutingSwitch1.n2.i = (-Rp1.IdealCommutingSwitch1.s2) * (Rp1.IdealCommutingSwitch1.unitVoltage * (if Rp1.IdealCommutingSwitch1.control then 1.0 else Rp1.IdealCommutingSwitch1.Goff));
//   0.0 = Rp1.IdealCommutingSwitch2.p.i + (Rp1.IdealCommutingSwitch2.n2.i + Rp1.IdealCommutingSwitch2.n1.i);
//   Rp1.IdealCommutingSwitch2.p.v - Rp1.IdealCommutingSwitch2.n1.v = Rp1.IdealCommutingSwitch2.s1 * (Rp1.IdealCommutingSwitch2.unitCurrent * (if Rp1.IdealCommutingSwitch2.control then 1.0 else Rp1.IdealCommutingSwitch2.Ron));
//   Rp1.IdealCommutingSwitch2.n1.i = (-Rp1.IdealCommutingSwitch2.s1) * (Rp1.IdealCommutingSwitch2.unitVoltage * (if Rp1.IdealCommutingSwitch2.control then Rp1.IdealCommutingSwitch2.Goff else 1.0));
//   Rp1.IdealCommutingSwitch2.p.v - Rp1.IdealCommutingSwitch2.n2.v = Rp1.IdealCommutingSwitch2.s2 * (Rp1.IdealCommutingSwitch2.unitCurrent * (if Rp1.IdealCommutingSwitch2.control then Rp1.IdealCommutingSwitch2.Ron else 1.0));
//   Rp1.IdealCommutingSwitch2.n2.i = (-Rp1.IdealCommutingSwitch2.s2) * (Rp1.IdealCommutingSwitch2.unitVoltage * (if Rp1.IdealCommutingSwitch2.control then 1.0 else Rp1.IdealCommutingSwitch2.Goff));
//   Rp1.Ground1.p.v = 0.0;
//   Rp1.Ground2.p.v = 0.0;
//   when sample(R7.BooleanPulse1.startTime,R7.BooleanPulse1.period) then
//   R7.BooleanPulse1.pulsStart = time;
//   end when;
//   R7.BooleanPulse1.y = time >= R7.BooleanPulse1.pulsStart AND time < R7.BooleanPulse1.pulsStart + R7.BooleanPulse1.Twidth;
//   R7.Capacitor1.i = R7.Capacitor1.C * der(R7.Capacitor1.v);
//   R7.Capacitor1.v = R7.Capacitor1.p.v - R7.Capacitor1.n.v;
//   0.0 = R7.Capacitor1.p.i + R7.Capacitor1.n.i;
//   R7.Capacitor1.i = R7.Capacitor1.p.i;
//   0.0 = R7.IdealCommutingSwitch1.p.i + (R7.IdealCommutingSwitch1.n2.i + R7.IdealCommutingSwitch1.n1.i);
//   R7.IdealCommutingSwitch1.p.v - R7.IdealCommutingSwitch1.n1.v = R7.IdealCommutingSwitch1.s1 * (R7.IdealCommutingSwitch1.unitCurrent * (if R7.IdealCommutingSwitch1.control then 1.0 else R7.IdealCommutingSwitch1.Ron));
//   R7.IdealCommutingSwitch1.n1.i = (-R7.IdealCommutingSwitch1.s1) * (R7.IdealCommutingSwitch1.unitVoltage * (if R7.IdealCommutingSwitch1.control then R7.IdealCommutingSwitch1.Goff else 1.0));
//   R7.IdealCommutingSwitch1.p.v - R7.IdealCommutingSwitch1.n2.v = R7.IdealCommutingSwitch1.s2 * (R7.IdealCommutingSwitch1.unitCurrent * (if R7.IdealCommutingSwitch1.control then R7.IdealCommutingSwitch1.Ron else 1.0));
//   R7.IdealCommutingSwitch1.n2.i = (-R7.IdealCommutingSwitch1.s2) * (R7.IdealCommutingSwitch1.unitVoltage * (if R7.IdealCommutingSwitch1.control then 1.0 else R7.IdealCommutingSwitch1.Goff));
//   0.0 = R7.IdealCommutingSwitch2.p.i + (R7.IdealCommutingSwitch2.n2.i + R7.IdealCommutingSwitch2.n1.i);
//   R7.IdealCommutingSwitch2.p.v - R7.IdealCommutingSwitch2.n1.v = R7.IdealCommutingSwitch2.s1 * (R7.IdealCommutingSwitch2.unitCurrent * (if R7.IdealCommutingSwitch2.control then 1.0 else R7.IdealCommutingSwitch2.Ron));
//   R7.IdealCommutingSwitch2.n1.i = (-R7.IdealCommutingSwitch2.s1) * (R7.IdealCommutingSwitch2.unitVoltage * (if R7.IdealCommutingSwitch2.control then R7.IdealCommutingSwitch2.Goff else 1.0));
//   R7.IdealCommutingSwitch2.p.v - R7.IdealCommutingSwitch2.n2.v = R7.IdealCommutingSwitch2.s2 * (R7.IdealCommutingSwitch2.unitCurrent * (if R7.IdealCommutingSwitch2.control then R7.IdealCommutingSwitch2.Ron else 1.0));
//   R7.IdealCommutingSwitch2.n2.i = (-R7.IdealCommutingSwitch2.s2) * (R7.IdealCommutingSwitch2.unitVoltage * (if R7.IdealCommutingSwitch2.control then 1.0 else R7.IdealCommutingSwitch2.Goff));
//   R7.Ground1.p.v = 0.0;
//   R7.Ground2.p.v = 0.0;
//   when sample(R10.BooleanPulse1.startTime,R10.BooleanPulse1.period) then
//   R10.BooleanPulse1.pulsStart = time;
//   end when;
//   R10.BooleanPulse1.y = time >= R10.BooleanPulse1.pulsStart AND time < R10.BooleanPulse1.pulsStart + R10.BooleanPulse1.Twidth;
//   R10.Capacitor1.i = R10.Capacitor1.C * der(R10.Capacitor1.v);
//   R10.Capacitor1.v = R10.Capacitor1.p.v - R10.Capacitor1.n.v;
//   0.0 = R10.Capacitor1.p.i + R10.Capacitor1.n.i;
//   R10.Capacitor1.i = R10.Capacitor1.p.i;
//   0.0 = R10.IdealCommutingSwitch1.p.i + (R10.IdealCommutingSwitch1.n2.i + R10.IdealCommutingSwitch1.n1.i);
//   R10.IdealCommutingSwitch1.p.v - R10.IdealCommutingSwitch1.n1.v = R10.IdealCommutingSwitch1.s1 * (R10.IdealCommutingSwitch1.unitCurrent * (if R10.IdealCommutingSwitch1.control then 1.0 else R10.IdealCommutingSwitch1.Ron));
//   R10.IdealCommutingSwitch1.n1.i = (-R10.IdealCommutingSwitch1.s1) * (R10.IdealCommutingSwitch1.unitVoltage * (if R10.IdealCommutingSwitch1.control then R10.IdealCommutingSwitch1.Goff else 1.0));
//   R10.IdealCommutingSwitch1.p.v - R10.IdealCommutingSwitch1.n2.v = R10.IdealCommutingSwitch1.s2 * (R10.IdealCommutingSwitch1.unitCurrent * (if R10.IdealCommutingSwitch1.control then R10.IdealCommutingSwitch1.Ron else 1.0));
//   R10.IdealCommutingSwitch1.n2.i = (-R10.IdealCommutingSwitch1.s2) * (R10.IdealCommutingSwitch1.unitVoltage * (if R10.IdealCommutingSwitch1.control then 1.0 else R10.IdealCommutingSwitch1.Goff));
//   0.0 = R10.IdealCommutingSwitch2.p.i + (R10.IdealCommutingSwitch2.n2.i + R10.IdealCommutingSwitch2.n1.i);
//   R10.IdealCommutingSwitch2.p.v - R10.IdealCommutingSwitch2.n1.v = R10.IdealCommutingSwitch2.s1 * (R10.IdealCommutingSwitch2.unitCurrent * (if R10.IdealCommutingSwitch2.control then 1.0 else R10.IdealCommutingSwitch2.Ron));
//   R10.IdealCommutingSwitch2.n1.i = (-R10.IdealCommutingSwitch2.s1) * (R10.IdealCommutingSwitch2.unitVoltage * (if R10.IdealCommutingSwitch2.control then R10.IdealCommutingSwitch2.Goff else 1.0));
//   R10.IdealCommutingSwitch2.p.v - R10.IdealCommutingSwitch2.n2.v = R10.IdealCommutingSwitch2.s2 * (R10.IdealCommutingSwitch2.unitCurrent * (if R10.IdealCommutingSwitch2.control then R10.IdealCommutingSwitch2.Ron else 1.0));
//   R10.IdealCommutingSwitch2.n2.i = (-R10.IdealCommutingSwitch2.s2) * (R10.IdealCommutingSwitch2.unitVoltage * (if R10.IdealCommutingSwitch2.control then 1.0 else R10.IdealCommutingSwitch2.Goff));
//   R10.Ground1.p.v = 0.0;
//   R10.Ground2.p.v = 0.0;
//   when sample(R11.BooleanPulse1.startTime,R11.BooleanPulse1.period) then
//   R11.BooleanPulse1.pulsStart = time;
//   end when;
//   R11.BooleanPulse1.y = time >= R11.BooleanPulse1.pulsStart AND time < R11.BooleanPulse1.pulsStart + R11.BooleanPulse1.Twidth;
//   R11.Capacitor1.i = R11.Capacitor1.C * der(R11.Capacitor1.v);
//   R11.Capacitor1.v = R11.Capacitor1.p.v - R11.Capacitor1.n.v;
//   0.0 = R11.Capacitor1.p.i + R11.Capacitor1.n.i;
//   R11.Capacitor1.i = R11.Capacitor1.p.i;
//   0.0 = R11.IdealCommutingSwitch1.p.i + (R11.IdealCommutingSwitch1.n2.i + R11.IdealCommutingSwitch1.n1.i);
//   R11.IdealCommutingSwitch1.p.v - R11.IdealCommutingSwitch1.n1.v = R11.IdealCommutingSwitch1.s1 * (R11.IdealCommutingSwitch1.unitCurrent * (if R11.IdealCommutingSwitch1.control then 1.0 else R11.IdealCommutingSwitch1.Ron));
//   R11.IdealCommutingSwitch1.n1.i = (-R11.IdealCommutingSwitch1.s1) * (R11.IdealCommutingSwitch1.unitVoltage * (if R11.IdealCommutingSwitch1.control then R11.IdealCommutingSwitch1.Goff else 1.0));
//   R11.IdealCommutingSwitch1.p.v - R11.IdealCommutingSwitch1.n2.v = R11.IdealCommutingSwitch1.s2 * (R11.IdealCommutingSwitch1.unitCurrent * (if R11.IdealCommutingSwitch1.control then R11.IdealCommutingSwitch1.Ron else 1.0));
//   R11.IdealCommutingSwitch1.n2.i = (-R11.IdealCommutingSwitch1.s2) * (R11.IdealCommutingSwitch1.unitVoltage * (if R11.IdealCommutingSwitch1.control then 1.0 else R11.IdealCommutingSwitch1.Goff));
//   0.0 = R11.IdealCommutingSwitch2.p.i + (R11.IdealCommutingSwitch2.n2.i + R11.IdealCommutingSwitch2.n1.i);
//   R11.IdealCommutingSwitch2.p.v - R11.IdealCommutingSwitch2.n1.v = R11.IdealCommutingSwitch2.s1 * (R11.IdealCommutingSwitch2.unitCurrent * (if R11.IdealCommutingSwitch2.control then 1.0 else R11.IdealCommutingSwitch2.Ron));
//   R11.IdealCommutingSwitch2.n1.i = (-R11.IdealCommutingSwitch2.s1) * (R11.IdealCommutingSwitch2.unitVoltage * (if R11.IdealCommutingSwitch2.control then R11.IdealCommutingSwitch2.Goff else 1.0));
//   R11.IdealCommutingSwitch2.p.v - R11.IdealCommutingSwitch2.n2.v = R11.IdealCommutingSwitch2.s2 * (R11.IdealCommutingSwitch2.unitCurrent * (if R11.IdealCommutingSwitch2.control then R11.IdealCommutingSwitch2.Ron else 1.0));
//   R11.IdealCommutingSwitch2.n2.i = (-R11.IdealCommutingSwitch2.s2) * (R11.IdealCommutingSwitch2.unitVoltage * (if R11.IdealCommutingSwitch2.control then 1.0 else R11.IdealCommutingSwitch2.Goff));
//   R11.Ground1.p.v = 0.0;
//   R11.Ground2.p.v = 0.0;
//   Op1.in_p.i + G.p.i = 0.0;
//   G.p.v = Op1.in_p.v;
//   G1.p.i + Op2.in_p.i = 0.0;
//   G1.p.v = Op2.in_p.v;
//   C2.n.i + (R1.n2.i + ((-n1.i) + (R2.n2.i + ((-n2.i) + (R3.n1.i + ((-n3.i) + (C1.p.i + Op1.in_n.i))))))) = 0.0;
//   C1.p.v = C2.n.v;
//   C1.p.v = Op1.in_n.v;
//   C1.p.v = R1.n2.v;
//   C1.p.v = R2.n2.v;
//   C1.p.v = R3.n1.v;
//   C1.p.v = n1.v;
//   C1.p.v = n2.v;
//   C1.p.v = n3.v;
//   C1.n.i + (R3.n2.i + ((-n4.i) + (C5.p.i + (Op1.out.i + R4.n1.i)))) = 0.0;
//   C1.n.v = C5.p.v;
//   C1.n.v = Op1.out.v;
//   C1.n.v = R3.n2.v;
//   C1.n.v = R4.n1.v;
//   C1.n.v = n4.v;
//   C3.p.i + (R4.n2.i + (R5.n2.i + ((-n5.i) + Op2.in_n.i))) = 0.0;
//   C3.p.v = Op2.in_n.v;
//   C3.p.v = R4.n2.v;
//   C3.p.v = R5.n2.v;
//   C3.p.v = n5.v;
//   C2.p.i + (C6.n.i + (Op3.out.i + (R9.n1.i + (R5.n1.i + ((-p1.i) + ((-out1.i) + C8.p.i)))))) = 0.0;
//   C2.p.v = C6.n.v;
//   C2.p.v = C8.p.v;
//   C2.p.v = Op3.out.v;
//   C2.p.v = R5.n1.v;
//   C2.p.v = R9.n1.v;
//   C2.p.v = out1.v;
//   C2.p.v = p1.v;
//   C3.n.i + (R2.n1.i + ((-n6.i) + (Op2.out.i + R7.n1.i))) = 0.0;
//   C3.n.v = Op2.out.v;
//   C3.n.v = R2.n1.v;
//   C3.n.v = R7.n1.v;
//   C3.n.v = n6.v;
//   C5.n.i + (R7.n2.i + ((-n7.i) + (C6.p.i + (Rp1.n2.i + ((-n8.i) + (C4.n.i + ((-p2.i) + Op3.in_n.i))))))) = 0.0;
//   C4.n.v = C5.n.v;
//   C4.n.v = C6.p.v;
//   C4.n.v = Op3.in_n.v;
//   C4.n.v = R7.n2.v;
//   C4.n.v = Rp1.n2.v;
//   C4.n.v = n7.v;
//   C4.n.v = n8.v;
//   C4.n.v = p2.v;
//   C4.p.i + ((-p3.i) + (R8.n1.i + (C9.n.i + (R11.n2.i + ((-n12.i) + ((-n13.i) + Op5.out.i)))))) = 0.0;
//   C4.p.v = C9.n.v;
//   C4.p.v = Op5.out.v;
//   C4.p.v = R11.n2.v;
//   C4.p.v = R8.n1.v;
//   C4.p.v = n12.v;
//   C4.p.v = n13.v;
//   C4.p.v = p3.v;
//   R8.n2.i + ((-n9.i) + (C7.p.i + (R9.n2.i + ((-n10.i) + Op4.in_n.i)))) = 0.0;
//   C7.p.v = Op4.in_n.v;
//   C7.p.v = R8.n2.v;
//   C7.p.v = R9.n2.v;
//   C7.p.v = n10.v;
//   C7.p.v = n9.v;
//   C7.n.i + (Rp1.n1.i + ((-n11.i) + (R10.n1.i + Op4.out.i))) = 0.0;
//   C7.n.v = Op4.out.v;
//   C7.n.v = R10.n1.v;
//   C7.n.v = Rp1.n1.v;
//   C7.n.v = n11.v;
//   G2.p.i + Op3.in_p.i = 0.0;
//   G2.p.v = Op3.in_p.v;
//   C9.p.i + (R11.n1.i + ((-p4.i) + (Op5.in_n.i + (C8.n.i + (R10.n2.i + (-n14.i)))))) = 0.0;
//   C8.n.v = C9.p.v;
//   C8.n.v = Op5.in_n.v;
//   C8.n.v = R10.n2.v;
//   C8.n.v = R11.n1.v;
//   C8.n.v = n14.v;
//   C8.n.v = p4.v;
//   Op4.in_p.i + G3.p.i = 0.0;
//   G3.p.v = Op4.in_p.v;
//   Op5.in_p.i + G4.p.i = 0.0;
//   G4.p.v = Op5.in_p.v;
//   V.p.i + Ground1.p.i = 0.0;
//   Ground1.p.v = V.p.v;
//   R1.n1.i + V.n.i = 0.0;
//   R1.n1.v = V.n.v;
//   n14.i = 0.0;
//   p4.i = 0.0;
//   n13.i = 0.0;
//   n12.i = 0.0;
//   n11.i = 0.0;
//   n10.i = 0.0;
//   n9.i = 0.0;
//   p3.i = 0.0;
//   out1.i = 0.0;
//   p2.i = 0.0;
//   n8.i = 0.0;
//   n7.i = 0.0;
//   n6.i = 0.0;
//   p1.i = 0.0;
//   n5.i = 0.0;
//   n4.i = 0.0;
//   n3.i = 0.0;
//   n2.i = 0.0;
//   n1.i = 0.0;
//   R11.IdealCommutingSwitch2.n1.i + (-R11.n2.i) = 0.0;
//   R11.IdealCommutingSwitch2.n1.v = R11.n2.v;
//   R11.IdealCommutingSwitch1.n1.i + (-R11.n1.i) = 0.0;
//   R11.IdealCommutingSwitch1.n1.v = R11.n1.v;
//   R11.Ground2.p.i + R11.IdealCommutingSwitch2.n2.i = 0.0;
//   R11.Ground2.p.v = R11.IdealCommutingSwitch2.n2.v;
//   R11.Ground1.p.i + R11.IdealCommutingSwitch1.n2.i = 0.0;
//   R11.Ground1.p.v = R11.IdealCommutingSwitch1.n2.v;
//   R11.BooleanPulse1.y = R11.IdealCommutingSwitch1.control;
//   R11.BooleanPulse1.y = R11.IdealCommutingSwitch2.control;
//   R11.Capacitor1.n.i + R11.IdealCommutingSwitch2.p.i = 0.0;
//   R11.Capacitor1.n.v = R11.IdealCommutingSwitch2.p.v;
//   R11.IdealCommutingSwitch1.p.i + R11.Capacitor1.p.i = 0.0;
//   R11.Capacitor1.p.v = R11.IdealCommutingSwitch1.p.v;
//   R10.IdealCommutingSwitch2.n1.i + (-R10.n2.i) = 0.0;
//   R10.IdealCommutingSwitch2.n1.v = R10.n2.v;
//   R10.IdealCommutingSwitch1.n1.i + (-R10.n1.i) = 0.0;
//   R10.IdealCommutingSwitch1.n1.v = R10.n1.v;
//   R10.Ground2.p.i + R10.IdealCommutingSwitch2.n2.i = 0.0;
//   R10.Ground2.p.v = R10.IdealCommutingSwitch2.n2.v;
//   R10.Ground1.p.i + R10.IdealCommutingSwitch1.n2.i = 0.0;
//   R10.Ground1.p.v = R10.IdealCommutingSwitch1.n2.v;
//   R10.BooleanPulse1.y = R10.IdealCommutingSwitch1.control;
//   R10.BooleanPulse1.y = R10.IdealCommutingSwitch2.control;
//   R10.Capacitor1.n.i + R10.IdealCommutingSwitch2.p.i = 0.0;
//   R10.Capacitor1.n.v = R10.IdealCommutingSwitch2.p.v;
//   R10.IdealCommutingSwitch1.p.i + R10.Capacitor1.p.i = 0.0;
//   R10.Capacitor1.p.v = R10.IdealCommutingSwitch1.p.v;
//   R7.IdealCommutingSwitch2.n1.i + (-R7.n2.i) = 0.0;
//   R7.IdealCommutingSwitch2.n1.v = R7.n2.v;
//   R7.IdealCommutingSwitch1.n1.i + (-R7.n1.i) = 0.0;
//   R7.IdealCommutingSwitch1.n1.v = R7.n1.v;
//   R7.Ground2.p.i + R7.IdealCommutingSwitch2.n2.i = 0.0;
//   R7.Ground2.p.v = R7.IdealCommutingSwitch2.n2.v;
//   R7.Ground1.p.i + R7.IdealCommutingSwitch1.n2.i = 0.0;
//   R7.Ground1.p.v = R7.IdealCommutingSwitch1.n2.v;
//   R7.BooleanPulse1.y = R7.IdealCommutingSwitch1.control;
//   R7.BooleanPulse1.y = R7.IdealCommutingSwitch2.control;
//   R7.Capacitor1.n.i + R7.IdealCommutingSwitch2.p.i = 0.0;
//   R7.Capacitor1.n.v = R7.IdealCommutingSwitch2.p.v;
//   R7.IdealCommutingSwitch1.p.i + R7.Capacitor1.p.i = 0.0;
//   R7.Capacitor1.p.v = R7.IdealCommutingSwitch1.p.v;
//   Rp1.IdealCommutingSwitch2.n1.i + (-Rp1.n2.i) = 0.0;
//   Rp1.IdealCommutingSwitch2.n1.v = Rp1.n2.v;
//   Rp1.IdealCommutingSwitch1.n1.i + (-Rp1.n1.i) = 0.0;
//   Rp1.IdealCommutingSwitch1.n1.v = Rp1.n1.v;
//   Rp1.Ground2.p.i + Rp1.IdealCommutingSwitch2.n2.i = 0.0;
//   Rp1.Ground2.p.v = Rp1.IdealCommutingSwitch2.n2.v;
//   Rp1.Ground1.p.i + Rp1.IdealCommutingSwitch1.n2.i = 0.0;
//   Rp1.Ground1.p.v = Rp1.IdealCommutingSwitch1.n2.v;
//   Rp1.BooleanPulse1.y = Rp1.IdealCommutingSwitch1.control;
//   Rp1.BooleanPulse1.y = Rp1.IdealCommutingSwitch2.control;
//   Rp1.Capacitor1.n.i + Rp1.IdealCommutingSwitch2.p.i = 0.0;
//   Rp1.Capacitor1.n.v = Rp1.IdealCommutingSwitch2.p.v;
//   Rp1.IdealCommutingSwitch1.p.i + Rp1.Capacitor1.p.i = 0.0;
//   Rp1.Capacitor1.p.v = Rp1.IdealCommutingSwitch1.p.v;
//   R3.IdealCommutingSwitch2.n1.i + (-R3.n2.i) = 0.0;
//   R3.IdealCommutingSwitch2.n1.v = R3.n2.v;
//   R3.IdealCommutingSwitch1.n1.i + (-R3.n1.i) = 0.0;
//   R3.IdealCommutingSwitch1.n1.v = R3.n1.v;
//   R3.Ground2.p.i + R3.IdealCommutingSwitch2.n2.i = 0.0;
//   R3.Ground2.p.v = R3.IdealCommutingSwitch2.n2.v;
//   R3.Ground1.p.i + R3.IdealCommutingSwitch1.n2.i = 0.0;
//   R3.Ground1.p.v = R3.IdealCommutingSwitch1.n2.v;
//   R3.BooleanPulse1.y = R3.IdealCommutingSwitch1.control;
//   R3.BooleanPulse1.y = R3.IdealCommutingSwitch2.control;
//   R3.Capacitor1.n.i + R3.IdealCommutingSwitch2.p.i = 0.0;
//   R3.Capacitor1.n.v = R3.IdealCommutingSwitch2.p.v;
//   R3.IdealCommutingSwitch1.p.i + R3.Capacitor1.p.i = 0.0;
//   R3.Capacitor1.p.v = R3.IdealCommutingSwitch1.p.v;
//   R2.IdealCommutingSwitch2.n1.i + (-R2.n2.i) = 0.0;
//   R2.IdealCommutingSwitch2.n1.v = R2.n2.v;
//   R2.IdealCommutingSwitch1.n1.i + (-R2.n1.i) = 0.0;
//   R2.IdealCommutingSwitch1.n1.v = R2.n1.v;
//   R2.Ground2.p.i + R2.IdealCommutingSwitch2.n2.i = 0.0;
//   R2.Ground2.p.v = R2.IdealCommutingSwitch2.n2.v;
//   R2.Ground1.p.i + R2.IdealCommutingSwitch1.n2.i = 0.0;
//   R2.Ground1.p.v = R2.IdealCommutingSwitch1.n2.v;
//   R2.BooleanPulse1.y = R2.IdealCommutingSwitch1.control;
//   R2.BooleanPulse1.y = R2.IdealCommutingSwitch2.control;
//   R2.Capacitor1.n.i + R2.IdealCommutingSwitch2.p.i = 0.0;
//   R2.Capacitor1.n.v = R2.IdealCommutingSwitch2.p.v;
//   R2.IdealCommutingSwitch1.p.i + R2.Capacitor1.p.i = 0.0;
//   R2.Capacitor1.p.v = R2.IdealCommutingSwitch1.p.v;
//   R1.IdealCommutingSwitch2.n1.i + (-R1.n2.i) = 0.0;
//   R1.IdealCommutingSwitch2.n1.v = R1.n2.v;
//   R1.IdealCommutingSwitch1.n1.i + (-R1.n1.i) = 0.0;
//   R1.IdealCommutingSwitch1.n1.v = R1.n1.v;
//   R1.Ground2.p.i + R1.IdealCommutingSwitch2.n2.i = 0.0;
//   R1.Ground2.p.v = R1.IdealCommutingSwitch2.n2.v;
//   R1.Ground1.p.i + R1.IdealCommutingSwitch1.n2.i = 0.0;
//   R1.Ground1.p.v = R1.IdealCommutingSwitch1.n2.v;
//   R1.BooleanPulse1.y = R1.IdealCommutingSwitch1.control;
//   R1.BooleanPulse1.y = R1.IdealCommutingSwitch2.control;
//   R1.Capacitor1.n.i + R1.IdealCommutingSwitch2.p.i = 0.0;
//   R1.Capacitor1.n.v = R1.IdealCommutingSwitch2.p.v;
//   R1.IdealCommutingSwitch1.p.i + R1.Capacitor1.p.i = 0.0;
//   R1.Capacitor1.p.v = R1.IdealCommutingSwitch1.p.v;
//   R9.Ground1.p.i + R9.IdealCommutingSwitch1.n1.i = 0.0;
//   R9.Ground1.p.v = R9.IdealCommutingSwitch1.n1.v;
//   (-R9.n1.i) + R9.IdealCommutingSwitch1.n2.i = 0.0;
//   R9.IdealCommutingSwitch1.n2.v = R9.n1.v;
//   R9.IdealCommutingSwitch2.n1.i + (-R9.n2.i) = 0.0;
//   R9.IdealCommutingSwitch2.n1.v = R9.n2.v;
//   R9.Ground2.p.i + R9.IdealCommutingSwitch2.n2.i = 0.0;
//   R9.Ground2.p.v = R9.IdealCommutingSwitch2.n2.v;
//   R9.BooleanPulse1.y = R9.IdealCommutingSwitch1.control;
//   R9.BooleanPulse1.y = R9.IdealCommutingSwitch2.control;
//   R9.Capacitor1.n.i + R9.IdealCommutingSwitch2.p.i = 0.0;
//   R9.Capacitor1.n.v = R9.IdealCommutingSwitch2.p.v;
//   R9.IdealCommutingSwitch1.p.i + R9.Capacitor1.p.i = 0.0;
//   R9.Capacitor1.p.v = R9.IdealCommutingSwitch1.p.v;
//   R8.Ground1.p.i + R8.IdealCommutingSwitch1.n1.i = 0.0;
//   R8.Ground1.p.v = R8.IdealCommutingSwitch1.n1.v;
//   (-R8.n1.i) + R8.IdealCommutingSwitch1.n2.i = 0.0;
//   R8.IdealCommutingSwitch1.n2.v = R8.n1.v;
//   R8.IdealCommutingSwitch2.n1.i + (-R8.n2.i) = 0.0;
//   R8.IdealCommutingSwitch2.n1.v = R8.n2.v;
//   R8.Ground2.p.i + R8.IdealCommutingSwitch2.n2.i = 0.0;
//   R8.Ground2.p.v = R8.IdealCommutingSwitch2.n2.v;
//   R8.BooleanPulse1.y = R8.IdealCommutingSwitch1.control;
//   R8.BooleanPulse1.y = R8.IdealCommutingSwitch2.control;
//   R8.Capacitor1.n.i + R8.IdealCommutingSwitch2.p.i = 0.0;
//   R8.Capacitor1.n.v = R8.IdealCommutingSwitch2.p.v;
//   R8.IdealCommutingSwitch1.p.i + R8.Capacitor1.p.i = 0.0;
//   R8.Capacitor1.p.v = R8.IdealCommutingSwitch1.p.v;
//   R5.Ground1.p.i + R5.IdealCommutingSwitch1.n1.i = 0.0;
//   R5.Ground1.p.v = R5.IdealCommutingSwitch1.n1.v;
//   (-R5.n1.i) + R5.IdealCommutingSwitch1.n2.i = 0.0;
//   R5.IdealCommutingSwitch1.n2.v = R5.n1.v;
//   R5.IdealCommutingSwitch2.n1.i + (-R5.n2.i) = 0.0;
//   R5.IdealCommutingSwitch2.n1.v = R5.n2.v;
//   R5.Ground2.p.i + R5.IdealCommutingSwitch2.n2.i = 0.0;
//   R5.Ground2.p.v = R5.IdealCommutingSwitch2.n2.v;
//   R5.BooleanPulse1.y = R5.IdealCommutingSwitch1.control;
//   R5.BooleanPulse1.y = R5.IdealCommutingSwitch2.control;
//   R5.Capacitor1.n.i + R5.IdealCommutingSwitch2.p.i = 0.0;
//   R5.Capacitor1.n.v = R5.IdealCommutingSwitch2.p.v;
//   R5.IdealCommutingSwitch1.p.i + R5.Capacitor1.p.i = 0.0;
//   R5.Capacitor1.p.v = R5.IdealCommutingSwitch1.p.v;
//   R4.Ground1.p.i + R4.IdealCommutingSwitch1.n1.i = 0.0;
//   R4.Ground1.p.v = R4.IdealCommutingSwitch1.n1.v;
//   (-R4.n1.i) + R4.IdealCommutingSwitch1.n2.i = 0.0;
//   R4.IdealCommutingSwitch1.n2.v = R4.n1.v;
//   R4.IdealCommutingSwitch2.n1.i + (-R4.n2.i) = 0.0;
//   R4.IdealCommutingSwitch2.n1.v = R4.n2.v;
//   R4.Ground2.p.i + R4.IdealCommutingSwitch2.n2.i = 0.0;
//   R4.Ground2.p.v = R4.IdealCommutingSwitch2.n2.v;
//   R4.BooleanPulse1.y = R4.IdealCommutingSwitch1.control;
//   R4.BooleanPulse1.y = R4.IdealCommutingSwitch2.control;
//   R4.Capacitor1.n.i + R4.IdealCommutingSwitch2.p.i = 0.0;
//   R4.Capacitor1.n.v = R4.IdealCommutingSwitch2.p.v;
//   R4.IdealCommutingSwitch1.p.i + R4.Capacitor1.p.i = 0.0;
//   R4.Capacitor1.p.v = R4.IdealCommutingSwitch1.p.v;
// end Modelica.Electrical.Analog.Examples.CauerLowPassSC;
// "
// ""
// endResult
