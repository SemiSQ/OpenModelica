//name:         CharacteristicIdealDiodes
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadFile("Modelica/package.mo");
instantiateModel(Modelica.Electrical.Analog.Examples.CharacteristicIdealDiodes);
getErrorString();
// Result:
// true
// "function Modelica.Math.sin
// input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
// output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// fclass Modelica.Electrical.Analog.Examples.CharacteristicIdealDiodes
// Real Ideal.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real Ideal.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real Ideal.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real Ideal.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real Ideal.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real Ideal.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real Ideal.Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.0 "Forward state-on differential resistance (closed diode resistance)";
// parameter Real Ideal.Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.0 "Backward state-off conductance (opened diode conductance)";
// parameter Real Ideal.Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0) = 0.0 "Forward threshold voltage";
// Boolean Ideal.off(start = true) "Switching state";
// protected Real Ideal.s "Auxiliary variable: if on then current, if opened then voltage";
// protected parameter Real Ideal.unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
// protected parameter Real Ideal.unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
// Real With_Ron_Goff.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real With_Ron_Goff.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real With_Ron_Goff.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real With_Ron_Goff.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real With_Ron_Goff.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real With_Ron_Goff.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real With_Ron_Goff.Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.1 "Forward state-on differential resistance (closed diode resistance)";
// parameter Real With_Ron_Goff.Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.1 "Backward state-off conductance (opened diode conductance)";
// parameter Real With_Ron_Goff.Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0) = 0.0 "Forward threshold voltage";
// Boolean With_Ron_Goff.off(start = true) "Switching state";
// protected Real With_Ron_Goff.s "Auxiliary variable: if on then current, if opened then voltage";
// protected parameter Real With_Ron_Goff.unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
// protected parameter Real With_Ron_Goff.unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
// Real With_Ron_Goff_Vknee.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real With_Ron_Goff_Vknee.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real With_Ron_Goff_Vknee.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real With_Ron_Goff_Vknee.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real With_Ron_Goff_Vknee.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real With_Ron_Goff_Vknee.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real With_Ron_Goff_Vknee.Ron(quantity = "Resistance", unit = "Ohm", min = 0.0) = 0.2 "Forward state-on differential resistance (closed diode resistance)";
// parameter Real With_Ron_Goff_Vknee.Goff(quantity = "Conductance", unit = "S", min = 0.0) = 0.2 "Backward state-off conductance (opened diode conductance)";
// parameter Real With_Ron_Goff_Vknee.Vknee(quantity = "ElectricPotential", unit = "V", min = 0.0) = 5.0 "Forward threshold voltage";
// Boolean With_Ron_Goff_Vknee.off(start = true) "Switching state";
// protected Real With_Ron_Goff_Vknee.s "Auxiliary variable: if on then current, if opened then voltage";
// protected parameter Real With_Ron_Goff_Vknee.unitVoltage(quantity = "ElectricPotential", unit = "V") = 1.0;
// protected parameter Real With_Ron_Goff_Vknee.unitCurrent(quantity = "ElectricCurrent", unit = "A") = 1.0;
// Real SineVoltage1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage1.offset(quantity = "ElectricPotential", unit = "V") = -9.0 "Voltage offset";
// parameter Real SineVoltage1.startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
// output Real SineVoltage1.signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage1.signalSource.amplitude = SineVoltage1.V "Amplitude of sine wave";
// parameter Real SineVoltage1.signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.freqHz "Frequency of sine wave";
// parameter Real SineVoltage1.signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.phase "Phase of sine wave";
// parameter Real SineVoltage1.signalSource.offset = SineVoltage1.offset "Offset of output signal";
// parameter Real SineVoltage1.signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage1.startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage1.signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage1.V(quantity = "ElectricPotential", unit = "V") = 10.0 "Amplitude of sine wave";
// parameter Real SineVoltage1.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
// parameter Real SineVoltage1.freqHz(quantity = "Frequency", unit = "Hz") = 1.0 "Frequency of sine wave";
// Real Ground1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real Ground1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real R1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real R1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real R1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real R1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real R1.R(quantity = "Resistance", unit = "Ohm") = 0.001 "Resistance";
// Real R2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real R2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real R2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real R2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real R2.R(quantity = "Resistance", unit = "Ohm") = 0.001 "Resistance";
// Real R3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real R3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real R3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real R3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real R3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real R3.R(quantity = "Resistance", unit = "Ohm") = 0.001 "Resistance";
// Real SineVoltage2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage2.offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
// parameter Real SineVoltage2.startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
// output Real SineVoltage2.signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage2.signalSource.amplitude = SineVoltage2.V "Amplitude of sine wave";
// parameter Real SineVoltage2.signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage2.freqHz "Frequency of sine wave";
// parameter Real SineVoltage2.signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage2.phase "Phase of sine wave";
// parameter Real SineVoltage2.signalSource.offset = SineVoltage2.offset "Offset of output signal";
// parameter Real SineVoltage2.signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage2.startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage2.signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage2.V(quantity = "ElectricPotential", unit = "V") = 10.0 "Amplitude of sine wave";
// parameter Real SineVoltage2.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
// parameter Real SineVoltage2.freqHz(quantity = "Frequency", unit = "Hz") = 1.0 "Frequency of sine wave";
// Real SineVoltage3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage3.offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
// parameter Real SineVoltage3.startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
// output Real SineVoltage3.signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage3.signalSource.amplitude = SineVoltage3.V "Amplitude of sine wave";
// parameter Real SineVoltage3.signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage3.freqHz "Frequency of sine wave";
// parameter Real SineVoltage3.signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage3.phase "Phase of sine wave";
// parameter Real SineVoltage3.signalSource.offset = SineVoltage3.offset "Offset of output signal";
// parameter Real SineVoltage3.signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage3.startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage3.signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage3.V(quantity = "ElectricPotential", unit = "V") = 10.0 "Amplitude of sine wave";
// parameter Real SineVoltage3.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
// parameter Real SineVoltage3.freqHz(quantity = "Frequency", unit = "Hz") = 1.0 "Frequency of sine wave";
// equation
//   Ideal.off = Ideal.s < 0.0;
//   Ideal.v = Ideal.s * (Ideal.unitCurrent * (if Ideal.off then 1.0 else Ideal.Ron)) + Ideal.Vknee;
//   Ideal.i = Ideal.s * (Ideal.unitVoltage * (if Ideal.off then Ideal.Goff else 1.0)) + Ideal.Goff * Ideal.Vknee;
//   Ideal.v = Ideal.p.v - Ideal.n.v;
//   0.0 = Ideal.p.i + Ideal.n.i;
//   Ideal.i = Ideal.p.i;
//   With_Ron_Goff.off = With_Ron_Goff.s < 0.0;
//   With_Ron_Goff.v = With_Ron_Goff.s * (With_Ron_Goff.unitCurrent * (if With_Ron_Goff.off then 1.0 else With_Ron_Goff.Ron)) + With_Ron_Goff.Vknee;
//   With_Ron_Goff.i = With_Ron_Goff.s * (With_Ron_Goff.unitVoltage * (if With_Ron_Goff.off then With_Ron_Goff.Goff else 1.0)) + With_Ron_Goff.Goff * With_Ron_Goff.Vknee;
//   With_Ron_Goff.v = With_Ron_Goff.p.v - With_Ron_Goff.n.v;
//   0.0 = With_Ron_Goff.p.i + With_Ron_Goff.n.i;
//   With_Ron_Goff.i = With_Ron_Goff.p.i;
//   With_Ron_Goff_Vknee.off = With_Ron_Goff_Vknee.s < 0.0;
//   With_Ron_Goff_Vknee.v = With_Ron_Goff_Vknee.s * (With_Ron_Goff_Vknee.unitCurrent * (if With_Ron_Goff_Vknee.off then 1.0 else With_Ron_Goff_Vknee.Ron)) + With_Ron_Goff_Vknee.Vknee;
//   With_Ron_Goff_Vknee.i = With_Ron_Goff_Vknee.s * (With_Ron_Goff_Vknee.unitVoltage * (if With_Ron_Goff_Vknee.off then With_Ron_Goff_Vknee.Goff else 1.0)) + With_Ron_Goff_Vknee.Goff * With_Ron_Goff_Vknee.Vknee;
//   With_Ron_Goff_Vknee.v = With_Ron_Goff_Vknee.p.v - With_Ron_Goff_Vknee.n.v;
//   0.0 = With_Ron_Goff_Vknee.p.i + With_Ron_Goff_Vknee.n.i;
//   With_Ron_Goff_Vknee.i = With_Ron_Goff_Vknee.p.i;
//   SineVoltage1.signalSource.y = SineVoltage1.signalSource.offset + (if time < SineVoltage1.signalSource.startTime then 0.0 else SineVoltage1.signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage1.signalSource.freqHz * (time - SineVoltage1.signalSource.startTime)) + SineVoltage1.signalSource.phase));
//   SineVoltage1.v = SineVoltage1.signalSource.y;
//   SineVoltage1.v = SineVoltage1.p.v - SineVoltage1.n.v;
//   0.0 = SineVoltage1.p.i + SineVoltage1.n.i;
//   SineVoltage1.i = SineVoltage1.p.i;
//   Ground1.p.v = 0.0;
//   R1.R * R1.i = R1.v;
//   R1.v = R1.p.v - R1.n.v;
//   0.0 = R1.p.i + R1.n.i;
//   R1.i = R1.p.i;
//   R2.R * R2.i = R2.v;
//   R2.v = R2.p.v - R2.n.v;
//   0.0 = R2.p.i + R2.n.i;
//   R2.i = R2.p.i;
//   R3.R * R3.i = R3.v;
//   R3.v = R3.p.v - R3.n.v;
//   0.0 = R3.p.i + R3.n.i;
//   R3.i = R3.p.i;
//   SineVoltage2.signalSource.y = SineVoltage2.signalSource.offset + (if time < SineVoltage2.signalSource.startTime then 0.0 else SineVoltage2.signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage2.signalSource.freqHz * (time - SineVoltage2.signalSource.startTime)) + SineVoltage2.signalSource.phase));
//   SineVoltage2.v = SineVoltage2.signalSource.y;
//   SineVoltage2.v = SineVoltage2.p.v - SineVoltage2.n.v;
//   0.0 = SineVoltage2.p.i + SineVoltage2.n.i;
//   SineVoltage2.i = SineVoltage2.p.i;
//   SineVoltage3.signalSource.y = SineVoltage3.signalSource.offset + (if time < SineVoltage3.signalSource.startTime then 0.0 else SineVoltage3.signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage3.signalSource.freqHz * (time - SineVoltage3.signalSource.startTime)) + SineVoltage3.signalSource.phase));
//   SineVoltage3.v = SineVoltage3.signalSource.y;
//   SineVoltage3.v = SineVoltage3.p.v - SineVoltage3.n.v;
//   0.0 = SineVoltage3.p.i + SineVoltage3.n.i;
//   SineVoltage3.i = SineVoltage3.p.i;
//   R1.n.i + (R2.n.i + (R3.n.i + (SineVoltage2.n.i + (SineVoltage3.n.i + (Ground1.p.i + SineVoltage1.n.i))))) = 0.0;
// R1.n.v = R2.n.v;
// R2.n.v = R3.n.v;
// R3.n.v = SineVoltage2.n.v;
// SineVoltage2.n.v = SineVoltage3.n.v;
// SineVoltage3.n.v = Ground1.p.v;
// Ground1.p.v = SineVoltage1.n.v;
//   Ideal.n.i + R1.p.i = 0.0;
// Ideal.n.v = R1.p.v;
//   With_Ron_Goff.n.i + R2.p.i = 0.0;
// With_Ron_Goff.n.v = R2.p.v;
//   With_Ron_Goff_Vknee.n.i + R3.p.i = 0.0;
// With_Ron_Goff_Vknee.n.v = R3.p.v;
//   SineVoltage2.p.i + Ideal.p.i = 0.0;
// SineVoltage2.p.v = Ideal.p.v;
//   SineVoltage1.p.i + With_Ron_Goff.p.i = 0.0;
// SineVoltage1.p.v = With_Ron_Goff.p.v;
//   With_Ron_Goff_Vknee.p.i + SineVoltage3.p.i = 0.0;
// With_Ron_Goff_Vknee.p.v = SineVoltage3.p.v;
// end Modelica.Electrical.Analog.Examples.CharacteristicIdealDiodes;
// "
// ""
// endResult
