//name:         HeatingRectifier
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadModel(Modelica,{"2.2.1"});
instantiateModel(Modelica.Electrical.Analog.Examples.HeatingRectifier);
getErrorString();
// Result:
// true
// "function Modelica.Electrical.Analog.Semiconductors.exlin \"Exponential function linearly continued for x > Maxexp\"
//   input Real x;
//   input Real Maxexp;
//   output Real z;
// algorithm
//   z := if x > Maxexp then exp(Maxexp) * (1.0 + x - Maxexp) else exp(x);
// end Modelica.Electrical.Analog.Semiconductors.exlin;
// 
// function Modelica.Electrical.Analog.Semiconductors.pow \"Just a helper function for x^y in order that a symbolic engine can apply some transformations more easily\"
//   input Real x;
//   input Real y;
//   output Real z;
// algorithm
//   z := x ^ y;
// end Modelica.Electrical.Analog.Semiconductors.pow;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Electrical.Analog.Examples.HeatingRectifier
//   parameter Real HeatCapacitor1.C(quantity = \"HeatCapacity\", unit = \"J/K\") = 1.0 \"Heat capacity of part (= cp*m)\";
//   parameter Boolean HeatCapacitor1.steadyStateStart = false \"true, if component shall start in steady state\";
//   Real HeatCapacitor1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 293.15) \"Temperature of part\";
//   Real HeatCapacitor1.port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real HeatCapacitor1.port.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   Real ThermalConductor1.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate from port_a -> port_b\";
//   Real ThermalConductor1.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"port_a.T - port_b.T\";
//   Real ThermalConductor1.port_a.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real ThermalConductor1.port_a.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   Real ThermalConductor1.port_b.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real ThermalConductor1.port_b.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   parameter Real ThermalConductor1.G(quantity = \"ThermalConductance\", unit = \"W/K\") = 10.0 \"Constant thermal conductance of material\";
//   Real HeatingDiode1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real HeatingDiode1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real HeatingDiode1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real HeatingDiode1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real HeatingDiode1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real HeatingDiode1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real HeatingDiode1.Ids(quantity = \"ElectricCurrent\", unit = \"A\") = 1e-006 \"Saturation current\";
//   parameter Real HeatingDiode1.Maxexp(min = 1e-060) = 15.0 \"Max. exponent for linear continuation\";
//   parameter Real HeatingDiode1.R(quantity = \"Resistance\", unit = \"Ohm\") = 100000000.0 \"Parallel ohmic resistance\";
//   parameter Real HeatingDiode1.EG = 1.11 \"activation energy\";
//   parameter Real HeatingDiode1.N = 1.0 \"Emission coefficient\";
//   parameter Real HeatingDiode1.TNOM(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Parameter measurement temperature\";
//   parameter Real HeatingDiode1.XTI = 3.0 \"Temperature exponent of saturation current\";
//   Real HeatingDiode1.vt_t(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature voltage\";
//   Real HeatingDiode1.id(quantity = \"ElectricCurrent\", unit = \"A\") \"diode current\";
//   Real HeatingDiode1.heatPort.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = 300.15) \"Port temperature\";
//   Real HeatingDiode1.heatPort.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   protected Real HeatingDiode1.k = 1.380662e-023 \"Boltzmann's constant, J/K\";
//   protected Real HeatingDiode1.q = 1.6021892e-019 \"Electron charge, As\";
//   protected Real HeatingDiode1.htemp(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"auxiliary temperature\";
//   protected Real HeatingDiode1.aux;
//   protected Real HeatingDiode1.auxp;
//   protected Real HeatingDiode1.maxexp = exp(HeatingDiode1.Maxexp);
//   Real G.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real G.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 1.0 \"Capacitance\";
//   Real R.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real R.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real R.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real R.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real R.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real R.R(quantity = \"Resistance\", unit = \"Ohm\") = 1.0 \"Resistance\";
//   Real SineVoltage1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real SineVoltage1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   parameter Real SineVoltage1.V(quantity = \"ElectricPotential\", unit = \"V\") = 1.0 \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real SineVoltage1.freqHz(quantity = \"Frequency\", unit = \"Hz\") = 1.0 \"Frequency of sine wave\";
//   output Real SineVoltage1.signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage1.signalSource.amplitude = SineVoltage1.V \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage1.signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.phase \"Phase of sine wave\";
//   parameter Real SineVoltage1.signalSource.offset = SineVoltage1.offset \"Offset of output signal\";
//   parameter Real SineVoltage1.signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage1.signalSource.pi = 3.14159265358979;
// equation
//   HeatCapacitor1.T = HeatCapacitor1.port.T;
//   HeatCapacitor1.C * der(HeatCapacitor1.T) = HeatCapacitor1.port.Q_flow;
//   ThermalConductor1.Q_flow = ThermalConductor1.G * ThermalConductor1.dT;
//   ThermalConductor1.dT = ThermalConductor1.port_a.T - ThermalConductor1.port_b.T;
//   ThermalConductor1.port_a.Q_flow = ThermalConductor1.Q_flow;
//   ThermalConductor1.port_b.Q_flow = -ThermalConductor1.Q_flow;
//   assert(HeatingDiode1.heatPort.T > 0.0,\"temperature must be positive\");
//   HeatingDiode1.htemp = HeatingDiode1.heatPort.T;
//   HeatingDiode1.vt_t = (HeatingDiode1.k * HeatingDiode1.htemp) / HeatingDiode1.q;
//   HeatingDiode1.id = Modelica.Electrical.Analog.Semiconductors.exlin(HeatingDiode1.v / (HeatingDiode1.vt_t * HeatingDiode1.N),HeatingDiode1.Maxexp) + -1.0;
//   HeatingDiode1.aux = ((-1.0 + HeatingDiode1.htemp / HeatingDiode1.TNOM) * HeatingDiode1.EG) / (HeatingDiode1.vt_t * HeatingDiode1.N);
//   HeatingDiode1.auxp = exp(HeatingDiode1.aux);
//   HeatingDiode1.i = HeatingDiode1.Ids * (HeatingDiode1.id * (Modelica.Electrical.Analog.Semiconductors.pow(HeatingDiode1.htemp / HeatingDiode1.TNOM,HeatingDiode1.XTI / HeatingDiode1.N) * HeatingDiode1.auxp)) + HeatingDiode1.v / HeatingDiode1.R;
//   HeatingDiode1.heatPort.Q_flow = (-HeatingDiode1.i) * HeatingDiode1.v;
//   HeatingDiode1.v = HeatingDiode1.p.v - HeatingDiode1.n.v;
//   0.0 = HeatingDiode1.p.i + HeatingDiode1.n.i;
//   HeatingDiode1.i = HeatingDiode1.p.i;
//   G.p.v = 0.0;
//   Capacitor1.i = Capacitor1.C * der(Capacitor1.v);
//   Capacitor1.v = Capacitor1.p.v - Capacitor1.n.v;
//   0.0 = Capacitor1.p.i + Capacitor1.n.i;
//   Capacitor1.i = Capacitor1.p.i;
//   R.R * R.i = R.v;
//   R.v = R.p.v - R.n.v;
//   0.0 = R.p.i + R.n.i;
//   R.i = R.p.i;
//   SineVoltage1.signalSource.y = SineVoltage1.signalSource.offset + (if time < SineVoltage1.signalSource.startTime then 0.0 else SineVoltage1.signalSource.amplitude * sin(6.28318530717959 * (SineVoltage1.signalSource.freqHz * (time - SineVoltage1.signalSource.startTime)) + SineVoltage1.signalSource.phase));
//   SineVoltage1.v = SineVoltage1.signalSource.y;
//   SineVoltage1.v = SineVoltage1.p.v - SineVoltage1.n.v;
//   0.0 = SineVoltage1.p.i + SineVoltage1.n.i;
//   SineVoltage1.i = SineVoltage1.p.i;
//   HeatCapacitor1.port.Q_flow + ThermalConductor1.port_b.Q_flow = 0.0;
//   ThermalConductor1.port_a.Q_flow + HeatingDiode1.heatPort.Q_flow = 0.0;
//   HeatingDiode1.p.i + SineVoltage1.p.i = 0.0;
//   HeatingDiode1.n.i + Capacitor1.p.i + R.p.i = 0.0;
//   G.p.i + Capacitor1.n.i + R.n.i + SineVoltage1.n.i = 0.0;
//   Capacitor1.n.v = G.p.v;
//   Capacitor1.n.v = R.n.v;
//   Capacitor1.n.v = SineVoltage1.n.v;
//   Capacitor1.p.v = HeatingDiode1.n.v;
//   Capacitor1.p.v = R.p.v;
//   HeatCapacitor1.port.T = ThermalConductor1.port_b.T;
//   HeatingDiode1.heatPort.T = ThermalConductor1.port_a.T;
//   HeatingDiode1.p.v = SineVoltage1.p.v;
// end Modelica.Electrical.Analog.Examples.HeatingRectifier;
// "
// "Notification: Modelica language version set to 2.x due to loading of MSL 2.2.1.
// "
// endResult
