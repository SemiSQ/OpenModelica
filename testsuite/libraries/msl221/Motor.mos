//name:         Motor
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadFile("Modelica/package.mo");
instantiateModel(Modelica.Thermal.HeatTransfer.Examples.Motor);
getErrorString();
// Result:
// true
// "function Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit
// input Real timeIn;
// input Real startTime;
// input Integer ipoType;
// input Integer expoType;
// input String tableName;
// input String fileName;
// input Real table;
// input Integer colWise;
// output Integer tableID;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo
// input Integer tableID;
// input Integer icol;
// input Real timeIn;
// output Real value;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax
// input Integer tableID;
// output Real Tmax "maximum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin
// input Integer tableID;
// output Real Tmin "minimum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin;
// 
// function Modelica.SIunits.Conversions.from_degC
// input Real Celsius(quantity = "ThermodynamicTemperature", unit = "degC") "Celsius value";
// output Real Kelvin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Kelvin value";
// algorithm
//   Kelvin := Celsius - -273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function Modelica.SIunits.Conversions.to_degC
// input Real Kelvin(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Kelvin value";
// output Real Celsius(quantity = "ThermodynamicTemperature", unit = "degC") "Celsius value";
// algorithm
//   Celsius := -273.15 + Kelvin;
// end Modelica.SIunits.Conversions.to_degC;
// 
// fclass Modelica.Thermal.HeatTransfer.Examples.Motor
// parameter Real TAmb(quantity = "ThermodynamicTemperature", unit = "degC") = 20.0 "Ambient temperature";
// parameter Real winding.C(quantity = "HeatCapacity", unit = "J/K") = 2500.0 "Heat capacity of part (= cp*m)";
// parameter Boolean winding.steadyStateStart = false "true, if component shall start in steady state";
// Real winding.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = Modelica.SIunits.Conversions.from_degC(TAmb)) "Temperature of part";
// Real winding.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real winding.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// Real winding2core.Q_flow(quantity = "Power", unit = "W") "Heat flow rate from port_a -> port_b";
// Real winding2core.dT(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "port_a.T - port_b.T";
// Real winding2core.port_a.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real winding2core.port_a.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// Real winding2core.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real winding2core.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// parameter Real winding2core.G(quantity = "ThermalConductance", unit = "W/K") = 10.0 "Constant thermal conductance of material";
// parameter Real core.C(quantity = "HeatCapacity", unit = "J/K") = 25000.0 "Heat capacity of part (= cp*m)";
// parameter Boolean core.steadyStateStart = false "true, if component shall start in steady state";
// Real core.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = Modelica.SIunits.Conversions.from_degC(TAmb)) "Temperature of part";
// Real core.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real core.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// Real convection.Q_flow(quantity = "Power", unit = "W") "Heat flow rate from solid -> fluid";
// Real convection.dT(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "= solid.T - fluid.T";
// Real convection.solid.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real convection.solid.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// Real convection.fluid.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real convection.fluid.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// input Real convection.Gc(quantity = "ThermalConductance", unit = "W/K") "Signal representing the convective thermal conductance in [W/K]";
// parameter Real environment.T(quantity = "ThermodynamicTemperature", unit = "degC") = TAmb "Fixed Temperature at the port";
// Real environment.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real environment.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// output Real convectionConstant.y "Connector of Real output signal";
// parameter Real convectionConstant.k = 25.0 "Constant output value";
// parameter Real coreLosses.T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 293.15 "Reference temperature";
// parameter Real coreLosses.alpha(unit = "1/K") = 0.0 "Temperature coefficient of heat flow rate";
// Real coreLosses.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real coreLosses.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// input Real coreLosses.Q_flow(quantity = "Power", unit = "W");
// parameter Real windingLosses.T_ref(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 368.15 "Reference temperature";
// parameter Real windingLosses.alpha(unit = "1/K") = 0.00303 "Temperature coefficient of heat flow rate";
// Real windingLosses.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real windingLosses.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// input Real windingLosses.Q_flow(quantity = "Power", unit = "W");
// output Real Twinding.T(quantity = "ThermodynamicTemperature", unit = "degC");
// Real Twinding.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real Twinding.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// output Real Tcore.T(quantity = "ThermodynamicTemperature", unit = "degC");
// Real Tcore.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
// Real Tcore.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
// parameter Integer lossTable.nout(min = 1) = 2 "Number of outputs";
// output Real lossTable.y[1] "Connector of Real output signals";
// output Real lossTable.y[2] "Connector of Real output signals";
// parameter Boolean lossTable.tableOnFile = false "true, if table is defined on file or in function usertab";
// parameter Real lossTable.table[1,1] = 0.0 "table matrix (time = first column)";
// parameter Real lossTable.table[1,2] = 100.0 "table matrix (time = first column)";
// parameter Real lossTable.table[1,3] = 500.0 "table matrix (time = first column)";
// parameter Real lossTable.table[2,1] = 360.0 "table matrix (time = first column)";
// parameter Real lossTable.table[2,2] = 100.0 "table matrix (time = first column)";
// parameter Real lossTable.table[2,3] = 500.0 "table matrix (time = first column)";
// parameter Real lossTable.table[3,1] = 360.0 "table matrix (time = first column)";
// parameter Real lossTable.table[3,2] = 1000.0 "table matrix (time = first column)";
// parameter Real lossTable.table[3,3] = 500.0 "table matrix (time = first column)";
// parameter Real lossTable.table[4,1] = 600.0 "table matrix (time = first column)";
// parameter Real lossTable.table[4,2] = 1000.0 "table matrix (time = first column)";
// parameter Real lossTable.table[4,3] = 500.0 "table matrix (time = first column)";
// parameter String lossTable.tableName = "NoName" "table name on file or in function usertab (see docu)";
// parameter String lossTable.fileName = "NoName" "file where matrix is stored";
// parameter Integer lossTable.columns[1] = 2 "columns of table to be interpolated";
// parameter Integer lossTable.columns[2] = 3 "columns of table to be interpolated";
// parameter Integer lossTable.smoothness = 0 "smoothness of table interpolation";
// parameter Integer lossTable.extrapolation = 2 "extrapolation of data outside the definition range";
// parameter Real lossTable.offset[1] = 0.0 "Offsets of output signals";
// parameter Real lossTable.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
// parameter Real lossTable.t_min(fixed = false);
// parameter Real lossTable.t_max(fixed = false);
// protected parameter Real lossTable.p_offset[1] = lossTable.offset[1];
// protected parameter Real lossTable.p_offset[2] = lossTable.offset[1];
// protected Integer lossTable.tableID;
// initial equation
//   lossTable.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(lossTable.tableID);
//   lossTable.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(lossTable.tableID);
// equation
//   winding.T = winding.port.T;
//   winding.C * der(winding.T) = winding.port.Q_flow;
//   winding2core.Q_flow = winding2core.G * winding2core.dT;
//   winding2core.dT = winding2core.port_a.T - winding2core.port_b.T;
//   winding2core.port_a.Q_flow = winding2core.Q_flow;
//   winding2core.port_b.Q_flow = -winding2core.Q_flow;
//   core.T = core.port.T;
//   core.C * der(core.T) = core.port.Q_flow;
//   convection.dT = convection.solid.T - convection.fluid.T;
//   convection.solid.Q_flow = convection.Q_flow;
//   convection.fluid.Q_flow = -convection.Q_flow;
//   convection.Q_flow = convection.Gc * convection.dT;
//   environment.port.T = Modelica.SIunits.Conversions.from_degC(environment.T);
//   convectionConstant.y = convectionConstant.k;
//   coreLosses.port.Q_flow = (-coreLosses.Q_flow) * (1.0 + coreLosses.alpha * (coreLosses.port.T - coreLosses.T_ref));
//   windingLosses.port.Q_flow = (-windingLosses.Q_flow) * (1.0 + windingLosses.alpha * (windingLosses.port.T - windingLosses.T_ref));
//   Twinding.T = Modelica.SIunits.Conversions.to_degC(Twinding.port.T);
//   Twinding.port.Q_flow = 0.0;
//   Tcore.T = Modelica.SIunits.Conversions.to_degC(Tcore.port.T);
//   Tcore.port.Q_flow = 0.0;
// assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   lossTable.y[1] = lossTable.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(lossTable.tableID,lossTable.columns[1],time);
//   lossTable.y[2] = lossTable.p_offset[2] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(lossTable.tableID,lossTable.columns[2],time);
//   when initial() then
//   lossTable.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,lossTable.startTime,lossTable.smoothness,lossTable.extrapolation,if  NOT lossTable.tableOnFile then "NoName" else lossTable.tableName,if  NOT lossTable.tableOnFile then "NoName" else lossTable.fileName,{{lossTable.table[1,1],lossTable.table[1,2],lossTable.table[1,3]},{lossTable.table[2,1],lossTable.table[2,2],lossTable.table[2,3]},{lossTable.table[3,1],lossTable.table[3,2],lossTable.table[3,3]},{lossTable.table[4,1],lossTable.table[4,2],lossTable.table[4,3]}},0);
//   end when;
// lossTable.y[2] = coreLosses.Q_flow;
// lossTable.y[1] = windingLosses.Q_flow;
//   coreLosses.port.Q_flow + (winding2core.port_b.Q_flow + (convection.solid.Q_flow + (core.port.Q_flow + Tcore.port.Q_flow))) = 0.0;
// coreLosses.port.T = winding2core.port_b.T;
// winding2core.port_b.T = convection.solid.T;
// convection.solid.T = core.port.T;
// core.port.T = Tcore.port.T;
//   windingLosses.port.Q_flow + (winding.port.Q_flow + (winding2core.port_a.Q_flow + Twinding.port.Q_flow)) = 0.0;
// windingLosses.port.T = winding.port.T;
// winding.port.T = winding2core.port_a.T;
// winding2core.port_a.T = Twinding.port.T;
// convectionConstant.y = convection.Gc;
//   convection.fluid.Q_flow + environment.port.Q_flow = 0.0;
// convection.fluid.T = environment.port.T;
// end Modelica.Thermal.HeatTransfer.Examples.Motor;
// "
// ""
// endResult
