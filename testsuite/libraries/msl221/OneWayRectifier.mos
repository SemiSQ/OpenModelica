// name:     OneWayRectifier 
// keywords: instantiate, bondlib
// status:   correct
//env: OPENMODELICALIBRARY=../../../libraries/msl221
// 
//  instantiate OneWayRectifier BondLib Spice example
//

loadFile("OneWayRectifierTotal.mo");
instantiateModel(BondLib_Examples_ModelicaSpice_OneWayRectifier);
getErrorString();

// Result:
// true
// "function Modelica.Math.sin
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// class BondLib_Examples_ModelicaSpice_OneWayRectifier
//   output Real vout(quantity = "ElectricPotential", unit = "V") "Output voltage";
//   Real V0.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real V0.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real V0.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real V0.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real V0.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real V0.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real V0.V(quantity = "ElectricPotential", unit = "V") = 10.0 "Amplitude of sine wave";
//   parameter Real V0.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
//   parameter Real V0.freqHz(quantity = "Frequency", unit = "Hz") = 1000.0 "Frequency of sine wave";
//   parameter Real V0.offset(quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offset";
//   parameter Real V0.startTime(quantity = "Time", unit = "s") = 0.0 "Time offset";
//   Real V0.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real V0.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real V0.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real V0.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real V0.El2BG1.BondCon1.d "Directional variable";
//   Real V0.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real V0.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real V0.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real V0.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real V0.BG2El1.BondCon1.d "Directional variable";
//   Real V0.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real V0.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real V0.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real V0.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real V0.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real V0.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real V0.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real V0.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real V0.J1p3_1.BondCon1.d "Directional variable";
//   Real V0.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real V0.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real V0.J1p3_1.BondCon2.d "Directional variable";
//   Real V0.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real V0.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real V0.J1p3_1.BondCon3.d "Directional variable";
//   Real V0.B1.BondCon1.e "Bondgraphic effort variable";
//   Real V0.B1.BondCon1.f "Bondgraphic flow variable";
//   Real V0.B1.BondCon1.d "Directional variable";
//   Real V0.B1.BondCon2.e "Bondgraphic effort variable";
//   Real V0.B1.BondCon2.f "Bondgraphic flow variable";
//   Real V0.B1.BondCon2.d "Directional variable";
//   Real V0.B2.BondCon1.e "Bondgraphic effort variable";
//   Real V0.B2.BondCon1.f "Bondgraphic flow variable";
//   Real V0.B2.BondCon1.d "Directional variable";
//   Real V0.B2.BondCon2.e "Bondgraphic effort variable";
//   Real V0.B2.BondCon2.f "Bondgraphic flow variable";
//   Real V0.B2.BondCon2.d "Directional variable";
//   Real V0.V1.e "Bondgraphic effort";
//   Real V0.V1.f "Bondgraphic flow";
//   Real V0.V1.BondCon1.e "Bondgraphic effort variable";
//   Real V0.V1.BondCon1.f "Bondgraphic flow variable";
//   Real V0.V1.BondCon1.d "Directional variable";
//   parameter Real V0.V1.e0 = V0.V "Amplitude of sine wave";
//   parameter Real V0.V1.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = V0.phase "Phase of sine wave";
//   parameter Real V0.V1.freqHz(quantity = "Frequency", unit = "Hz") = V0.freqHz "Frequency of sine wave";
//   parameter Real V0.V1.offset = V0.offset "Offset of sine wave";
//   parameter Real V0.V1.startTime(quantity = "Time", unit = "s") = V0.startTime "Start time of sine wave";
//   output Real V0.V1.Sine1.y "Connector of Real output signal";
//   parameter Real V0.V1.Sine1.amplitude = V0.V1.e0 "Amplitude of sine wave";
//   parameter Real V0.V1.Sine1.freqHz(quantity = "Frequency", unit = "Hz") = V0.V1.freqHz "Frequency of sine wave";
//   parameter Real V0.V1.Sine1.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = V0.V1.phase "Phase of sine wave";
//   parameter Real V0.V1.Sine1.offset = V0.V1.offset "Offset of output signal";
//   parameter Real V0.V1.Sine1.startTime(quantity = "Time", unit = "s") = V0.V1.startTime "Output = offset for time < startTime";
//   protected constant Real V0.V1.Sine1.pi = 3.14159265358979;
//   input Real V0.B3.eBondCon1.e "Bondgraphic effort variable";
//   output Real V0.B3.eBondCon1.f "Bondgraphic flow variable";
//   output Real V0.B3.eBondCon1.d "Direction variable";
//   output Real V0.B3.fBondCon1.e "Bondgraphic effort variable";
//   input Real V0.B3.fBondCon1.f "Bondgraphic flow variable";
//   output Real V0.B3.fBondCon1.d "Direction variable";
//   parameter Real L1.i0(quantity = "ElectricCurrent", unit = "A") = 0.0 "Initial current across inductor";
//   parameter Boolean L1.enforceStates = true "Use electrical variables as states instead of bond graph variables";
//   Real L1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real L1.i(quantity = "ElectricCurrent", unit = "A", start = L1.i0, StateSelect = StateSelect.prefer) "Current flowing from pin p to pin n";
//   Real L1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real L1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real L1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real L1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real L1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 300.15 "Reference temperature";
//   Real L1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real L1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real L1.L(quantity = "Inductance", unit = "H") = 0.015 "Inductance at reference temperature";
//   parameter Real L1.TL1(unit = "1/K") = 0.0 "Linear temperature coefficient";
//   parameter Real L1.TL2(unit = "1/K2") = 0.0 "Quadratic temperature coefficient";
//   Real L1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real L1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real L1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real L1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real L1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real L1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real L1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.J1p3_1.BondCon1.d "Directional variable";
//   Real L1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.J1p3_1.BondCon2.d "Directional variable";
//   Real L1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real L1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real L1.J1p3_1.BondCon3.d "Directional variable";
//   Real L1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.B1.BondCon1.d "Directional variable";
//   Real L1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.B1.BondCon2.d "Directional variable";
//   Real L1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real L1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real L1.B2.BondCon1.d "Directional variable";
//   Real L1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real L1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real L1.B2.BondCon2.d "Directional variable";
//   Real L1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real L1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real L1.B3.BondCon1.d "Directional variable";
//   Real L1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real L1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real L1.B3.BondCon2.d "Directional variable";
//   Real L1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real L1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real L1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.El2BG1.BondCon1.d "Directional variable";
//   Real L1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real L1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real L1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.BG2El1.BondCon1.d "Directional variable";
//   input Real L1.B6.eBondCon1.e "Bondgraphic effort variable";
//   output Real L1.B6.eBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B6.eBondCon1.d "Direction variable";
//   output Real L1.B6.fBondCon1.e "Bondgraphic effort variable";
//   input Real L1.B6.fBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B6.fBondCon1.d "Direction variable";
//   Real L1.T_nom.e "Bondgraphic effort";
//   Real L1.T_nom.f "Bondgraphic flow";
//   Real L1.T_nom.BondCon1.e "Bondgraphic effort variable";
//   Real L1.T_nom.BondCon1.f "Bondgraphic flow variable";
//   Real L1.T_nom.BondCon1.d "Directional variable";
//   parameter Real L1.T_nom.e0 = L1.Tnom "Bondgraphic Effort Source";
//   Real L1.L1.e1 "Bondgraphic primary effort";
//   Real L1.L1.f1(start = L1.i0) "Bondgraphic primary flow";
//   Real L1.L1.e2 "Bondgraphic secondary effort";
//   Real L1.L1.f2 "Bondgraphic secondary flow";
//   Real L1.L1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.L1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.L1.BondCon1.d "Directional variable";
//   Real L1.L1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.L1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.L1.BondCon2.d "Directional variable";
//   parameter Real L1.L1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = L1.Tnom "Reference temperature";
//   Real L1.L1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   Real L1.L1.DTempSq "Square of DTemp";
//   parameter Real L1.L1.L(quantity = "Inductance", unit = "H") = L1.L "Inductance at reference temperature";
//   parameter Real L1.L1.TL1(unit = "1/K") = L1.TL1 "Linear temperature coefficient";
//   parameter Real L1.L1.TL2(unit = "1/K2") = L1.TL2 "Quadratic temperature coefficient";
//   Real L1.L1.Lval(quantity = "Inductance", unit = "H") "Inductance value at circuit temperature";
//   output Real L1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real L1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B4.fBondCon1.d "Direction variable";
//   input Real L1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real L1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B4.eBondCon1.d "Direction variable";
//   Real L1.Sw1.p.e "Bondgraphic effort variable";
//   Real L1.Sw1.p.f "Bondgraphic flow variable";
//   Real L1.Sw1.p.d "Directional variable";
//   Real L1.Sw1.n2.e "Bondgraphic effort variable";
//   Real L1.Sw1.n2.f "Bondgraphic flow variable";
//   Real L1.Sw1.n2.d "Directional variable";
//   Real L1.Sw1.n1.e "Bondgraphic effort variable";
//   Real L1.Sw1.n1.f "Bondgraphic flow variable";
//   Real L1.Sw1.n1.d "Directional variable";
//   input Boolean L1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real L1.Sw1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real L1.Sw1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real L1.Sw1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real L1.Sw1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real L1.Sw1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real L1.Sw1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real L1.Sw1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.J1p3_1.BondCon1.d "Directional variable";
//   Real L1.Sw1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.J1p3_1.BondCon2.d "Directional variable";
//   Real L1.Sw1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real L1.Sw1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real L1.Sw1.J1p3_1.BondCon3.d "Directional variable";
//   Real L1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.B1.BondCon1.d "Directional variable";
//   Real L1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.B1.BondCon2.d "Directional variable";
//   Real L1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.B2.BondCon1.d "Directional variable";
//   Real L1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.B2.BondCon2.d "Directional variable";
//   Real L1.Sw1.J0p3_1.e[1] "Bondgraphic effort vector";
//   Real L1.Sw1.J0p3_1.e[2] "Bondgraphic effort vector";
//   Real L1.Sw1.J0p3_1.e[3] "Bondgraphic effort vector";
//   Real L1.Sw1.J0p3_1.f[1] "Bondgraphic flow vector";
//   Real L1.Sw1.J0p3_1.f[2] "Bondgraphic flow vector";
//   Real L1.Sw1.J0p3_1.f[3] "Bondgraphic flow vector";
//   Real L1.Sw1.J0p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.J0p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.J0p3_1.BondCon1.d "Directional variable";
//   Real L1.Sw1.J0p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.J0p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.J0p3_1.BondCon2.d "Directional variable";
//   Real L1.Sw1.J0p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real L1.Sw1.J0p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real L1.Sw1.J0p3_1.BondCon3.d "Directional variable";
//   Real L1.Sw1.B4.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.B4.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.B4.BondCon1.d "Directional variable";
//   Real L1.Sw1.B4.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.B4.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.B4.BondCon2.d "Directional variable";
//   Real L1.Sw1.j0p2_1.e1 "Bondgraphic primary effort";
//   Real L1.Sw1.j0p2_1.f1 "Bondgraphic primary flow";
//   Real L1.Sw1.j0p2_1.e2 "Bondgraphic secondary effort";
//   Real L1.Sw1.j0p2_1.f2 "Bondgraphic secondary flow";
//   Real L1.Sw1.j0p2_1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.j0p2_1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.j0p2_1.BondCon1.d "Directional variable";
//   Real L1.Sw1.j0p2_1.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.j0p2_1.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.j0p2_1.BondCon2.d "Directional variable";
//   Real L1.Sw1.j0p2_2.e1 "Bondgraphic primary effort";
//   Real L1.Sw1.j0p2_2.f1 "Bondgraphic primary flow";
//   Real L1.Sw1.j0p2_2.e2 "Bondgraphic secondary effort";
//   Real L1.Sw1.j0p2_2.f2 "Bondgraphic secondary flow";
//   Real L1.Sw1.j0p2_2.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.j0p2_2.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.j0p2_2.BondCon1.d "Directional variable";
//   Real L1.Sw1.j0p2_2.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.j0p2_2.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.j0p2_2.BondCon2.d "Directional variable";
//   Real L1.Sw1.Sw1.e "Bondgraphic effort";
//   Real L1.Sw1.Sw1.f "Bondgraphic flow";
//   Real L1.Sw1.Sw1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.Sw1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.Sw1.BondCon1.d "Directional variable";
//   Boolean L1.Sw1.Sw1.open "Switch position";
//   input Boolean L1.Sw1.Sw1.BooleanInPort1 "Boolean input signal (true if switch is open)";
//   Real L1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real L1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real L1.Sw1.B3.BondCon1.d "Directional variable";
//   Real L1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real L1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real L1.Sw1.B3.BondCon2.d "Directional variable";
//   output Real L1.B5.fBondCon1.e "Bondgraphic effort variable";
//   input Real L1.B5.fBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B5.fBondCon1.d "Direction variable";
//   input Real L1.B5.eBondCon1.e "Bondgraphic effort variable";
//   output Real L1.B5.eBondCon1.f "Bondgraphic flow variable";
//   output Real L1.B5.eBondCon1.d "Direction variable";
//   Real L1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real L1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real L1.BG2Heat1.BondCon1.d "Directional variable";
//   Real L1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real L1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real Gnd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Gnd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real Gnd1.B1.eBondCon1.e "Bondgraphic effort variable";
//   output Real Gnd1.B1.eBondCon1.f "Bondgraphic flow variable";
//   output Real Gnd1.B1.eBondCon1.d "Direction variable";
//   output Real Gnd1.B1.fBondCon1.e "Bondgraphic effort variable";
//   input Real Gnd1.B1.fBondCon1.f "Bondgraphic flow variable";
//   output Real Gnd1.B1.fBondCon1.d "Direction variable";
//   Real Gnd1.V0.e "Bondgraphic effort";
//   Real Gnd1.V0.f "Bondgraphic flow";
//   Real Gnd1.V0.BondCon1.e "Bondgraphic effort variable";
//   Real Gnd1.V0.BondCon1.f "Bondgraphic flow variable";
//   Real Gnd1.V0.BondCon1.d "Directional variable";
//   parameter Real Gnd1.V0.e0 = 0.0 "Bondgraphic Effort Source";
//   Real Gnd1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Gnd1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real Gnd1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real Gnd1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real Gnd1.El2BG1.BondCon1.d "Directional variable";
//   Real Vout.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real Vout.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real Vout.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Vout.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real Vout.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Vout.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real Vout.V(quantity = "ElectricPotential", unit = "V") "Voltage sensor";
//   Real Vout.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real Vout.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real Vout.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real Vout.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real Vout.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real Vout.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real Vout.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.J1p3_1.BondCon1.d "Directional variable";
//   Real Vout.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real Vout.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real Vout.J1p3_1.BondCon2.d "Directional variable";
//   Real Vout.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real Vout.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real Vout.J1p3_1.BondCon3.d "Directional variable";
//   Real Vout.B1.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.B1.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.B1.BondCon1.d "Directional variable";
//   Real Vout.B1.BondCon2.e "Bondgraphic effort variable";
//   Real Vout.B1.BondCon2.f "Bondgraphic flow variable";
//   Real Vout.B1.BondCon2.d "Directional variable";
//   Real Vout.B2.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.B2.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.B2.BondCon1.d "Directional variable";
//   Real Vout.B2.BondCon2.e "Bondgraphic effort variable";
//   Real Vout.B2.BondCon2.f "Bondgraphic flow variable";
//   Real Vout.B2.BondCon2.d "Directional variable";
//   Real Vout.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Vout.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real Vout.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.El2BG1.BondCon1.d "Directional variable";
//   Real Vout.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real Vout.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real Vout.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.BG2El1.BondCon1.d "Directional variable";
//   Real Vout.De1.e "Bondgraphic effort";
//   Real Vout.De1.f "Bondgraphic flow";
//   Real Vout.De1.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.De1.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.De1.BondCon1.d "Directional variable";
//   output Real Vout.De1.OutPort1 "Connector of Real output signal";
//   Real Vout.B3.BondCon1.e "Bondgraphic effort variable";
//   Real Vout.B3.BondCon1.f "Bondgraphic flow variable";
//   Real Vout.B3.BondCon1.d "Directional variable";
//   Real Vout.B3.BondCon2.e "Bondgraphic effort variable";
//   Real Vout.B3.BondCon2.f "Bondgraphic flow variable";
//   Real Vout.B3.BondCon2.d "Directional variable";
//   Real FixedTemperature1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real FixedTemperature1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real FixedTemperature1.BG2Heat1.BondCon1.d "Directional variable";
//   Real FixedTemperature1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real FixedTemperature1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real FixedTemperature1.Tabs.e "Bondgraphic effort";
//   Real FixedTemperature1.Tabs.f "Bondgraphic flow";
//   Real FixedTemperature1.Tabs.BondCon1.e "Bondgraphic effort variable";
//   Real FixedTemperature1.Tabs.BondCon1.f "Bondgraphic flow variable";
//   Real FixedTemperature1.Tabs.BondCon1.d "Directional variable";
//   input Real FixedTemperature1.Tabs.s "Signal input";
//   Real FixedTemperature1.Tabs.e0 "Bondgraphic Effort Source";
//   input Real FixedTemperature1.B1.eBondCon1.e "Bondgraphic effort variable";
//   output Real FixedTemperature1.B1.eBondCon1.f "Bondgraphic flow variable";
//   output Real FixedTemperature1.B1.eBondCon1.d "Direction variable";
//   output Real FixedTemperature1.B1.fBondCon1.e "Bondgraphic effort variable";
//   input Real FixedTemperature1.B1.fBondCon1.f "Bondgraphic flow variable";
//   output Real FixedTemperature1.B1.fBondCon1.d "Direction variable";
//   Real FixedTemperature1.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real FixedTemperature1.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real FixedTemperature1.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 300.15 "Fixed temperature at port";
//   parameter Real C1.u0(quantity = "ElectricPotential", unit = "V") = 0.0 "Initial voltage across capacitor";
//   parameter Boolean C1.enforceStates = true "Use electrical variables as states instead of bond graph variables";
//   Real C1.v(quantity = "ElectricPotential", unit = "V", start = C1.u0, StateSelect = StateSelect.prefer) "Voltage drop between the two pins";
//   Real C1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real C1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real C1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real C1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real C1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real C1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 300.15 "Reference temperature";
//   Real C1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real C1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real C1.C(quantity = "Capacitance", unit = "F", min = 0.0) = 5e-05 "Capacitance at reference temperature";
//   parameter Real C1.TC1(unit = "1/K") = 0.0 "Linear temperature coefficient";
//   parameter Real C1.TC2(unit = "1/K2") = 0.0 "Quadratic temperature coefficient";
//   parameter Real C1.Area = 1.0 "Relative area occupied by capacitor";
//   Real C1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real C1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real C1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real C1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real C1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real C1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real C1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.J1p3_1.BondCon1.d "Directional variable";
//   Real C1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.J1p3_1.BondCon2.d "Directional variable";
//   Real C1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real C1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real C1.J1p3_1.BondCon3.d "Directional variable";
//   Real C1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.B1.BondCon1.d "Directional variable";
//   Real C1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.B1.BondCon2.d "Directional variable";
//   Real C1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real C1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real C1.B2.BondCon1.d "Directional variable";
//   Real C1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real C1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real C1.B2.BondCon2.d "Directional variable";
//   Real C1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real C1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real C1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.El2BG1.BondCon1.d "Directional variable";
//   Real C1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real C1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real C1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.BG2El1.BondCon1.d "Directional variable";
//   input Real C1.B6.eBondCon1.e "Bondgraphic effort variable";
//   output Real C1.B6.eBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B6.eBondCon1.d "Direction variable";
//   output Real C1.B6.fBondCon1.e "Bondgraphic effort variable";
//   input Real C1.B6.fBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B6.fBondCon1.d "Direction variable";
//   Real C1.T_nom.e "Bondgraphic effort";
//   Real C1.T_nom.f "Bondgraphic flow";
//   Real C1.T_nom.BondCon1.e "Bondgraphic effort variable";
//   Real C1.T_nom.BondCon1.f "Bondgraphic flow variable";
//   Real C1.T_nom.BondCon1.d "Directional variable";
//   parameter Real C1.T_nom.e0 = C1.Tnom "Bondgraphic Effort Source";
//   Real C1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real C1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real C1.B3.BondCon1.d "Directional variable";
//   Real C1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real C1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real C1.B3.BondCon2.d "Directional variable";
//   Real C1.C1.e1(start = C1.u0) "Bondgraphic primary effort";
//   Real C1.C1.f1 "Bondgraphic primary flow";
//   Real C1.C1.e2 "Bondgraphic secondary effort";
//   Real C1.C1.f2 "Bondgraphic secondary flow";
//   Real C1.C1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.C1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.C1.BondCon1.d "Directional variable";
//   Real C1.C1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.C1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.C1.BondCon2.d "Directional variable";
//   parameter Real C1.C1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = C1.Tnom "Reference temperature";
//   Real C1.C1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   Real C1.C1.DTempSq "Square of DTemp";
//   parameter Real C1.C1.C(quantity = "Capacitance", unit = "F", min = 0.0) = C1.C "Capacitance at reference temperature";
//   parameter Real C1.C1.TC1(unit = "1/K") = C1.TC1 "Linear temperature coefficient";
//   parameter Real C1.C1.TC2(unit = "1/K2") = C1.TC2 "Quadratic temperature coefficient";
//   parameter Real C1.C1.Area = C1.Area "Relative area occupied by capacitor";
//   Real C1.C1.Cval(quantity = "Capacitance", unit = "F", min = 0.0) "Capacitance value at circuit temperature";
//   output Real C1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real C1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B4.fBondCon1.d "Direction variable";
//   input Real C1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real C1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B4.eBondCon1.d "Direction variable";
//   Real C1.Sw1.p.e "Bondgraphic effort variable";
//   Real C1.Sw1.p.f "Bondgraphic flow variable";
//   Real C1.Sw1.p.d "Directional variable";
//   Real C1.Sw1.n2.e "Bondgraphic effort variable";
//   Real C1.Sw1.n2.f "Bondgraphic flow variable";
//   Real C1.Sw1.n2.d "Directional variable";
//   Real C1.Sw1.n1.e "Bondgraphic effort variable";
//   Real C1.Sw1.n1.f "Bondgraphic flow variable";
//   Real C1.Sw1.n1.d "Directional variable";
//   input Boolean C1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real C1.Sw1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real C1.Sw1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real C1.Sw1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real C1.Sw1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real C1.Sw1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real C1.Sw1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real C1.Sw1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.J1p3_1.BondCon1.d "Directional variable";
//   Real C1.Sw1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.J1p3_1.BondCon2.d "Directional variable";
//   Real C1.Sw1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real C1.Sw1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real C1.Sw1.J1p3_1.BondCon3.d "Directional variable";
//   Real C1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.B1.BondCon1.d "Directional variable";
//   Real C1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.B1.BondCon2.d "Directional variable";
//   Real C1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.B2.BondCon1.d "Directional variable";
//   Real C1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.B2.BondCon2.d "Directional variable";
//   Real C1.Sw1.J0p3_1.e[1] "Bondgraphic effort vector";
//   Real C1.Sw1.J0p3_1.e[2] "Bondgraphic effort vector";
//   Real C1.Sw1.J0p3_1.e[3] "Bondgraphic effort vector";
//   Real C1.Sw1.J0p3_1.f[1] "Bondgraphic flow vector";
//   Real C1.Sw1.J0p3_1.f[2] "Bondgraphic flow vector";
//   Real C1.Sw1.J0p3_1.f[3] "Bondgraphic flow vector";
//   Real C1.Sw1.J0p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.J0p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.J0p3_1.BondCon1.d "Directional variable";
//   Real C1.Sw1.J0p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.J0p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.J0p3_1.BondCon2.d "Directional variable";
//   Real C1.Sw1.J0p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real C1.Sw1.J0p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real C1.Sw1.J0p3_1.BondCon3.d "Directional variable";
//   Real C1.Sw1.B4.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.B4.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.B4.BondCon1.d "Directional variable";
//   Real C1.Sw1.B4.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.B4.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.B4.BondCon2.d "Directional variable";
//   Real C1.Sw1.j0p2_1.e1 "Bondgraphic primary effort";
//   Real C1.Sw1.j0p2_1.f1 "Bondgraphic primary flow";
//   Real C1.Sw1.j0p2_1.e2 "Bondgraphic secondary effort";
//   Real C1.Sw1.j0p2_1.f2 "Bondgraphic secondary flow";
//   Real C1.Sw1.j0p2_1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.j0p2_1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.j0p2_1.BondCon1.d "Directional variable";
//   Real C1.Sw1.j0p2_1.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.j0p2_1.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.j0p2_1.BondCon2.d "Directional variable";
//   Real C1.Sw1.j0p2_2.e1 "Bondgraphic primary effort";
//   Real C1.Sw1.j0p2_2.f1 "Bondgraphic primary flow";
//   Real C1.Sw1.j0p2_2.e2 "Bondgraphic secondary effort";
//   Real C1.Sw1.j0p2_2.f2 "Bondgraphic secondary flow";
//   Real C1.Sw1.j0p2_2.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.j0p2_2.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.j0p2_2.BondCon1.d "Directional variable";
//   Real C1.Sw1.j0p2_2.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.j0p2_2.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.j0p2_2.BondCon2.d "Directional variable";
//   Real C1.Sw1.Sw1.e "Bondgraphic effort";
//   Real C1.Sw1.Sw1.f "Bondgraphic flow";
//   Real C1.Sw1.Sw1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.Sw1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.Sw1.BondCon1.d "Directional variable";
//   Boolean C1.Sw1.Sw1.open "Switch position";
//   input Boolean C1.Sw1.Sw1.BooleanInPort1 "Boolean input signal (true if switch is open)";
//   Real C1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real C1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real C1.Sw1.B3.BondCon1.d "Directional variable";
//   Real C1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real C1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real C1.Sw1.B3.BondCon2.d "Directional variable";
//   output Real C1.B5.fBondCon1.e "Bondgraphic effort variable";
//   input Real C1.B5.fBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B5.fBondCon1.d "Direction variable";
//   input Real C1.B5.eBondCon1.e "Bondgraphic effort variable";
//   output Real C1.B5.eBondCon1.f "Bondgraphic flow variable";
//   output Real C1.B5.eBondCon1.d "Direction variable";
//   Real C1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real C1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real C1.BG2Heat1.BondCon1.d "Directional variable";
//   Real C1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real C1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real R1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real R1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real R1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real R1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real R1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real R1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real R1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 300.15 "Reference temperature";
//   Real R1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real R1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real R1.R(quantity = "Resistance", unit = "Ohm") = 125.0 "Resistance at reference temperature";
//   parameter Real R1.TR1(unit = "1/K") = 0.005 "Linear temperature coefficient";
//   parameter Real R1.TR2(unit = "1/K2") = 0.005 "Quadratic temperature coefficient";
//   parameter Real R1.Area = 1.0 "Relative area occupied by resistor";
//   Real R1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real R1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real R1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real R1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real R1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real R1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real R1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.J1p3_1.BondCon1.d "Directional variable";
//   Real R1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.J1p3_1.BondCon2.d "Directional variable";
//   Real R1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real R1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real R1.J1p3_1.BondCon3.d "Directional variable";
//   Real R1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.B1.BondCon1.d "Directional variable";
//   Real R1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.B1.BondCon2.d "Directional variable";
//   Real R1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real R1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real R1.B2.BondCon1.d "Directional variable";
//   Real R1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real R1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real R1.B2.BondCon2.d "Directional variable";
//   Real R1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real R1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real R1.B3.BondCon1.d "Directional variable";
//   Real R1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real R1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real R1.B3.BondCon2.d "Directional variable";
//   Real R1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real R1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real R1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.El2BG1.BondCon1.d "Directional variable";
//   Real R1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real R1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real R1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.BG2El1.BondCon1.d "Directional variable";
//   input Real R1.B6.eBondCon1.e "Bondgraphic effort variable";
//   output Real R1.B6.eBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B6.eBondCon1.d "Direction variable";
//   output Real R1.B6.fBondCon1.e "Bondgraphic effort variable";
//   input Real R1.B6.fBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B6.fBondCon1.d "Direction variable";
//   Real R1.T_nom.e "Bondgraphic effort";
//   Real R1.T_nom.f "Bondgraphic flow";
//   Real R1.T_nom.BondCon1.e "Bondgraphic effort variable";
//   Real R1.T_nom.BondCon1.f "Bondgraphic flow variable";
//   Real R1.T_nom.BondCon1.d "Directional variable";
//   parameter Real R1.T_nom.e0 = R1.Tnom "Bondgraphic Effort Source";
//   Real R1.R1.e1 "Bondgraphic primary effort";
//   Real R1.R1.f1 "Bondgraphic primary flow";
//   Real R1.R1.e2 "Bondgraphic secondary effort";
//   Real R1.R1.f2 "Bondgraphic secondary flow";
//   Real R1.R1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.R1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.R1.BondCon1.d "Directional variable";
//   Real R1.R1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.R1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.R1.BondCon2.d "Directional variable";
//   parameter Real R1.R1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = R1.Tnom "Reference temperature";
//   Real R1.R1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   Real R1.R1.DTempSq "Square of DTemp";
//   parameter Real R1.R1.R(quantity = "Resistance", unit = "Ohm") = R1.R "Resistance at reference temperature";
//   parameter Real R1.R1.TR1(unit = "1/K") = R1.TR1 "Linear temperature coefficient";
//   parameter Real R1.R1.TR2(unit = "1/K2") = R1.TR2 "Quadratic temperature coefficient";
//   parameter Real R1.R1.Area = R1.Area "Relative area occupied by resistor";
//   Real R1.R1.Rval(quantity = "Resistance", unit = "Ohm") "Resistance value at circuit temperature";
//   output Real R1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real R1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B4.fBondCon1.d "Direction variable";
//   input Real R1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real R1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B4.eBondCon1.d "Direction variable";
//   Real R1.Sw1.p.e "Bondgraphic effort variable";
//   Real R1.Sw1.p.f "Bondgraphic flow variable";
//   Real R1.Sw1.p.d "Directional variable";
//   Real R1.Sw1.n2.e "Bondgraphic effort variable";
//   Real R1.Sw1.n2.f "Bondgraphic flow variable";
//   Real R1.Sw1.n2.d "Directional variable";
//   Real R1.Sw1.n1.e "Bondgraphic effort variable";
//   Real R1.Sw1.n1.f "Bondgraphic flow variable";
//   Real R1.Sw1.n1.d "Directional variable";
//   input Boolean R1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real R1.Sw1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real R1.Sw1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real R1.Sw1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real R1.Sw1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real R1.Sw1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real R1.Sw1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real R1.Sw1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.J1p3_1.BondCon1.d "Directional variable";
//   Real R1.Sw1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.J1p3_1.BondCon2.d "Directional variable";
//   Real R1.Sw1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real R1.Sw1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real R1.Sw1.J1p3_1.BondCon3.d "Directional variable";
//   Real R1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.B1.BondCon1.d "Directional variable";
//   Real R1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.B1.BondCon2.d "Directional variable";
//   Real R1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.B2.BondCon1.d "Directional variable";
//   Real R1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.B2.BondCon2.d "Directional variable";
//   Real R1.Sw1.J0p3_1.e[1] "Bondgraphic effort vector";
//   Real R1.Sw1.J0p3_1.e[2] "Bondgraphic effort vector";
//   Real R1.Sw1.J0p3_1.e[3] "Bondgraphic effort vector";
//   Real R1.Sw1.J0p3_1.f[1] "Bondgraphic flow vector";
//   Real R1.Sw1.J0p3_1.f[2] "Bondgraphic flow vector";
//   Real R1.Sw1.J0p3_1.f[3] "Bondgraphic flow vector";
//   Real R1.Sw1.J0p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.J0p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.J0p3_1.BondCon1.d "Directional variable";
//   Real R1.Sw1.J0p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.J0p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.J0p3_1.BondCon2.d "Directional variable";
//   Real R1.Sw1.J0p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real R1.Sw1.J0p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real R1.Sw1.J0p3_1.BondCon3.d "Directional variable";
//   Real R1.Sw1.B4.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.B4.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.B4.BondCon1.d "Directional variable";
//   Real R1.Sw1.B4.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.B4.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.B4.BondCon2.d "Directional variable";
//   Real R1.Sw1.j0p2_1.e1 "Bondgraphic primary effort";
//   Real R1.Sw1.j0p2_1.f1 "Bondgraphic primary flow";
//   Real R1.Sw1.j0p2_1.e2 "Bondgraphic secondary effort";
//   Real R1.Sw1.j0p2_1.f2 "Bondgraphic secondary flow";
//   Real R1.Sw1.j0p2_1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.j0p2_1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.j0p2_1.BondCon1.d "Directional variable";
//   Real R1.Sw1.j0p2_1.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.j0p2_1.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.j0p2_1.BondCon2.d "Directional variable";
//   Real R1.Sw1.j0p2_2.e1 "Bondgraphic primary effort";
//   Real R1.Sw1.j0p2_2.f1 "Bondgraphic primary flow";
//   Real R1.Sw1.j0p2_2.e2 "Bondgraphic secondary effort";
//   Real R1.Sw1.j0p2_2.f2 "Bondgraphic secondary flow";
//   Real R1.Sw1.j0p2_2.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.j0p2_2.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.j0p2_2.BondCon1.d "Directional variable";
//   Real R1.Sw1.j0p2_2.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.j0p2_2.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.j0p2_2.BondCon2.d "Directional variable";
//   Real R1.Sw1.Sw1.e "Bondgraphic effort";
//   Real R1.Sw1.Sw1.f "Bondgraphic flow";
//   Real R1.Sw1.Sw1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.Sw1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.Sw1.BondCon1.d "Directional variable";
//   Boolean R1.Sw1.Sw1.open "Switch position";
//   input Boolean R1.Sw1.Sw1.BooleanInPort1 "Boolean input signal (true if switch is open)";
//   Real R1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real R1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real R1.Sw1.B3.BondCon1.d "Directional variable";
//   Real R1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real R1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real R1.Sw1.B3.BondCon2.d "Directional variable";
//   output Real R1.B5.fBondCon1.e "Bondgraphic effort variable";
//   input Real R1.B5.fBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B5.fBondCon1.d "Direction variable";
//   input Real R1.B5.eBondCon1.e "Bondgraphic effort variable";
//   output Real R1.B5.eBondCon1.f "Bondgraphic flow variable";
//   output Real R1.B5.eBondCon1.d "Direction variable";
//   Real R1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real R1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real R1.BG2Heat1.BondCon1.d "Directional variable";
//   Real R1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real R1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 300.15 "Reference temperature";
//   Real D1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real D1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   constant Real D1.inf = 1e+60;
//   constant Real D1.k(quantity = "Entropy", unit = "J/K") = 1.3806505e-23 "Boltzmann's constant";
//   constant Real D1.q(quantity = "ElectricCharge", unit = "C") = 1.6021892e-19 "Electron charge";
//   parameter Integer D1.Level(min = 1, max = 3) = 1 "DIODE modeling level";
//   parameter Real D1.Area(min = 1e-60) = 1.0 "Relative device area";
//   parameter Real D1.TOX(quantity = "Length", unit = "m", min = 1e-60) = 1e-07 "Thin oxide thickness";
//   parameter Real D1.PB(quantity = "ElectricPotential", unit = "V", min = 0.0) = 0.75 "Built-in junction potential at reference temperature";
//   parameter Real D1.BV(quantity = "ElectricPotential", unit = "V", min = 0.0) = 0.0 "Reverse breakdown voltage at reference temperature";
//   parameter Real D1.IBV(quantity = "ElectricCurrent", unit = "A", min = 0.0) = 0.0 "Reverse breakdown current";
//   parameter Real D1.PHP(quantity = "ElectricPotential", unit = "V", min = 0.0) = 0.75 "Built-in perimeter potential at reference temperature";
//   parameter Real D1.N = 1.0 "Current emission coefficient";
//   parameter Real D1.IS(quantity = "ElectricCurrent", unit = "A", min = 1e-60) = 1e-14 "Saturation current at reference temperature";
//   parameter Real D1.ISW(quantity = "ElectricCurrent", unit = "A", min = 0.0) = 0.0 "Saturation current of perimeter at reference temperature";
//   parameter Real D1.PJ(min = 0.0) = 1.0 "Relative perimeter width";
//   parameter Real D1.IKF(quantity = "ElectricCurrent", unit = "A", min = 1e-60) = 1e+60 "Forward knee current";
//   parameter Real D1.IKR(quantity = "ElectricCurrent", unit = "A", min = 1e-60) = 1e+60 "Reverse knee current";
//   parameter Real D1.RS(quantity = "Resistance", unit = "Ohm", min = 0.0) = 5.0 "Resistance at reference temperature";
//   parameter Real D1.CJ(quantity = "Capacitance", unit = "F", min = 0.0) = 5e-13 "Zero-bias bulk capacitance at reference temperature";
//   parameter Real D1.MJ(min = 0.1, max = 0.9) = 0.33 "Bulk junction grading coefficient";
//   parameter Real D1.CJSW(quantity = "Capacitance", unit = "F", min = 0.0) = 0.0 "Zero-bias perimeter capacitance at reference temperature";
//   parameter Real D1.MJSW(min = 0.1, max = 0.9) = 0.33 "Perimeter capacitance grading coefficient";
//   parameter Real D1.FC(min = 0.0, max = 0.95) = 0.5 "Forward-bias depletion capacitance coefficient";
//   parameter Real D1.TT(quantity = "Time", unit = "s", min = 0.0) = 1e-09 "Transit time at reference temperature";
//   parameter Real D1.TRS(unit = "1/K") = 0.005 "Linear temperature coefficient of resistance";
//   parameter Real D1.TCV(unit = "V/K") = 0.0 "Linear temperature coefficient of breakdown voltage";
//   parameter Real D1.TTT1(unit = "1/K") = 0.0 "Linear temperature coefficient of transit time";
//   parameter Real D1.TTT2(unit = "1/K2") = 0.0 "Quadratic temperature coefficient of transit time";
//   parameter Real D1.XTI(min = 0.0) = 3.0 "Saturation current temperature exponent";
//   parameter Real D1.EG(quantity = "ElectricPotential", unit = "V", min = 0.1) = 1.11 "Energy gap at 0K (EG=1.11: Si, EG=0.73: Schottky barrier diode, EG=0.71: Ge)";
//   parameter Integer D1.M(min = 1) = 1 "Diode multiplier";
//   parameter Real D1.L(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Diode length";
//   parameter Real D1.W(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Diode width";
//   parameter Real D1.JF(unit = "A/V2", min = 0.0) = 0.0 "Forward Fowler-Nordheim current coefficient";
//   parameter Real D1.JR(unit = "A/V2", min = 0.0) = 0.0 "Reverse Fowler-Nordheim current coefficient";
//   parameter Real D1.EF(quantity = "ElectricFieldStrength", unit = "V/m", min = 0.0) = 0.0 "Forward Fowler-Nordheim critical electrical field";
//   parameter Real D1.ER(quantity = "ElectricFieldStrength", unit = "V/m", min = 0.0) = 0.0 "Reverse Fowler-Nordheim critical electrical field";
//   parameter Real D1.LP(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Polysilicon length";
//   parameter Real D1.WP(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Polysilicon width";
//   parameter Real D1.XP(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Widening of polysilicon due to masking and etching";
//   parameter Real D1.XOI(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Polysilicon thickness";
//   parameter Real D1.LM(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Metal length";
//   parameter Real D1.WM(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Metal width";
//   parameter Real D1.XM(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Widening of metal due to masking and etching";
//   parameter Real D1.XOM(quantity = "Length", unit = "m", min = 0.0) = 0.0 "Metal thickness";
//   parameter Real D1.JS(quantity = "CurrentDensity", unit = "A/m2", min = 1e-60) = 0.0001 "Saturation current density at reference temperature";
//   parameter Real D1.JSW(unit = "A/m", min = 0.0) = 0.0 "Saturation current density of perimeter at reference temperature";
//   parameter Real D1.CJ2(unit = "F/m2", min = 1e-60) = 0.0001 "Zero-bias bulk capacitance per square meter at reference temperature";
//   parameter Real D1.CJSW2(unit = "F/m", min = 0.0) = 1e-09 "Zero-bias perimeter capacitance per meter at reference temperature";
//   parameter Real D1.EMin = -100.0 "if x < EMin, the exp(x) function is linearized";
//   parameter Real D1.EMax = 40.0 "if x > EMax, the exp(x) function is linearized";
//   parameter Real D1.GminDC(quantity = "Conductance", unit = "S", min = 1e-60) = 1e-16 "Leakage conductance";
//   parameter Boolean D1.enforceStates = true "State selector";
//   Real D1.RS1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.RS1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.RS1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.RS1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.RS1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.RS1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.RS1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Tnom "Reference temperature";
//   Real D1.RS1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real D1.RS1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real D1.RS1.R(quantity = "Resistance", unit = "Ohm") = D1.RS "Resistance at reference temperature";
//   parameter Real D1.RS1.TR1(unit = "1/K") = D1.TRS "Linear temperature coefficient";
//   parameter Real D1.RS1.TR2(unit = "1/K2") = 0.0 "Quadratic temperature coefficient";
//   parameter Real D1.RS1.Area = D1.Area "Relative area occupied by resistor";
//   Real D1.RS1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.RS1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.RS1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.RS1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.RS1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.RS1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.RS1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.RS1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.RS1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.RS1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.RS1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.RS1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.B1.BondCon1.d "Directional variable";
//   Real D1.RS1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.B1.BondCon2.d "Directional variable";
//   Real D1.RS1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.B2.BondCon1.d "Directional variable";
//   Real D1.RS1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.B2.BondCon2.d "Directional variable";
//   Real D1.RS1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.B3.BondCon1.d "Directional variable";
//   Real D1.RS1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.B3.BondCon2.d "Directional variable";
//   Real D1.RS1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.RS1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.RS1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.El2BG1.BondCon1.d "Directional variable";
//   Real D1.RS1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.RS1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.RS1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.BG2El1.BondCon1.d "Directional variable";
//   input Real D1.RS1.B6.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.RS1.B6.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B6.eBondCon1.d "Direction variable";
//   output Real D1.RS1.B6.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.RS1.B6.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B6.fBondCon1.d "Direction variable";
//   Real D1.RS1.T_nom.e "Bondgraphic effort";
//   Real D1.RS1.T_nom.f "Bondgraphic flow";
//   Real D1.RS1.T_nom.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.T_nom.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.T_nom.BondCon1.d "Directional variable";
//   parameter Real D1.RS1.T_nom.e0 = D1.RS1.Tnom "Bondgraphic Effort Source";
//   Real D1.RS1.R1.e1 "Bondgraphic primary effort";
//   Real D1.RS1.R1.f1 "Bondgraphic primary flow";
//   Real D1.RS1.R1.e2 "Bondgraphic secondary effort";
//   Real D1.RS1.R1.f2 "Bondgraphic secondary flow";
//   Real D1.RS1.R1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.R1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.R1.BondCon1.d "Directional variable";
//   Real D1.RS1.R1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.R1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.R1.BondCon2.d "Directional variable";
//   parameter Real D1.RS1.R1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.RS1.Tnom "Reference temperature";
//   Real D1.RS1.R1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   Real D1.RS1.R1.DTempSq "Square of DTemp";
//   parameter Real D1.RS1.R1.R(quantity = "Resistance", unit = "Ohm") = D1.RS1.R "Resistance at reference temperature";
//   parameter Real D1.RS1.R1.TR1(unit = "1/K") = D1.RS1.TR1 "Linear temperature coefficient";
//   parameter Real D1.RS1.R1.TR2(unit = "1/K2") = D1.RS1.TR2 "Quadratic temperature coefficient";
//   parameter Real D1.RS1.R1.Area = D1.RS1.Area "Relative area occupied by resistor";
//   Real D1.RS1.R1.Rval(quantity = "Resistance", unit = "Ohm") "Resistance value at circuit temperature";
//   output Real D1.RS1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.RS1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B4.fBondCon1.d "Direction variable";
//   input Real D1.RS1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.RS1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B4.eBondCon1.d "Direction variable";
//   Real D1.RS1.Sw1.p.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.p.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.p.d "Directional variable";
//   Real D1.RS1.Sw1.n2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.n2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.n2.d "Directional variable";
//   Real D1.RS1.Sw1.n1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.n1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.n1.d "Directional variable";
//   input Boolean D1.RS1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real D1.RS1.Sw1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.RS1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B1.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B1.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B2.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B2.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.J0p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J0p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J0p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.RS1.Sw1.J0p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J0p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J0p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.RS1.Sw1.J0p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.J0p3_1.BondCon3.d "Directional variable";
//   Real D1.RS1.Sw1.B4.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B4.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B4.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.B4.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B4.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B4.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.j0p2_1.e1 "Bondgraphic primary effort";
//   Real D1.RS1.Sw1.j0p2_1.f1 "Bondgraphic primary flow";
//   Real D1.RS1.Sw1.j0p2_1.e2 "Bondgraphic secondary effort";
//   Real D1.RS1.Sw1.j0p2_1.f2 "Bondgraphic secondary flow";
//   Real D1.RS1.Sw1.j0p2_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.j0p2_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.j0p2_1.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.j0p2_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.j0p2_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.j0p2_1.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.j0p2_2.e1 "Bondgraphic primary effort";
//   Real D1.RS1.Sw1.j0p2_2.f1 "Bondgraphic primary flow";
//   Real D1.RS1.Sw1.j0p2_2.e2 "Bondgraphic secondary effort";
//   Real D1.RS1.Sw1.j0p2_2.f2 "Bondgraphic secondary flow";
//   Real D1.RS1.Sw1.j0p2_2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.j0p2_2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.j0p2_2.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.j0p2_2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.j0p2_2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.j0p2_2.BondCon2.d "Directional variable";
//   Real D1.RS1.Sw1.Sw1.e "Bondgraphic effort";
//   Real D1.RS1.Sw1.Sw1.f "Bondgraphic flow";
//   Real D1.RS1.Sw1.Sw1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.Sw1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.Sw1.BondCon1.d "Directional variable";
//   Boolean D1.RS1.Sw1.Sw1.open "Switch position";
//   input Boolean D1.RS1.Sw1.Sw1.BooleanInPort1 "Boolean input signal (true if switch is open)";
//   Real D1.RS1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B3.BondCon1.d "Directional variable";
//   Real D1.RS1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.RS1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.RS1.Sw1.B3.BondCon2.d "Directional variable";
//   output Real D1.RS1.B5.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.RS1.B5.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B5.fBondCon1.d "Direction variable";
//   input Real D1.RS1.B5.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.RS1.B5.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.RS1.B5.eBondCon1.d "Direction variable";
//   Real D1.RS1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.RS1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.RS1.BG2Heat1.BondCon1.d "Directional variable";
//   Real D1.RS1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.RS1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Id.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Id.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Id.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Id.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Id.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Id.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Id.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real D1.Id.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   input Real D1.Id.InPort1(quantity = "ElectricCurrent", unit = "A") "Current source";
//   Real D1.Id.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Id.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Id.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Id.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Id.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Id.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Id.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Id.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Id.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Id.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Id.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Id.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Id.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Id.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Id.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Id.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Id.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Id.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Id.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Id.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.B1.BondCon1.d "Directional variable";
//   Real D1.Id.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Id.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Id.B1.BondCon2.d "Directional variable";
//   Real D1.Id.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.B2.BondCon1.d "Directional variable";
//   Real D1.Id.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Id.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Id.B2.BondCon2.d "Directional variable";
//   Real D1.Id.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.BG2Heat1.BondCon1.d "Directional variable";
//   Real D1.Id.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Id.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   input Real D1.Id.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Id.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Id.B4.eBondCon1.d "Direction variable";
//   output Real D1.Id.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Id.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Id.B4.fBondCon1.d "Direction variable";
//   output Real D1.Id.B3.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Id.B3.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Id.B3.fBondCon1.d "Direction variable";
//   input Real D1.Id.B3.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Id.B3.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Id.B3.eBondCon1.d "Direction variable";
//   Real D1.Id.I1.e1 "Bondgraphic primary effort";
//   Real D1.Id.I1.f1 "Bondgraphic primary flow";
//   Real D1.Id.I1.e2 "Bondgraphic secondary effort";
//   Real D1.Id.I1.f2 "Bondgraphic secondary flow";
//   Real D1.Id.I1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Id.I1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Id.I1.BondCon1.d "Directional variable";
//   Real D1.Id.I1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Id.I1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Id.I1.BondCon2.d "Directional variable";
//   input Real D1.Id.I1.s "Signal input";
//   Real D1.Id.I1.f0 "Bondgraphic Flow Source";
//   Real D1.vd.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.vd.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.vd.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.vd.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.vd.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.vd.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real D1.vd.V(quantity = "ElectricPotential", unit = "V") "Voltage sensor";
//   Real D1.vd.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.vd.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.vd.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.vd.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.vd.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.vd.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.vd.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.vd.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.vd.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.vd.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.vd.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.vd.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.vd.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.vd.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.B1.BondCon1.d "Directional variable";
//   Real D1.vd.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.vd.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.vd.B1.BondCon2.d "Directional variable";
//   Real D1.vd.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.B2.BondCon1.d "Directional variable";
//   Real D1.vd.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.vd.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.vd.B2.BondCon2.d "Directional variable";
//   Real D1.vd.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.vd.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.vd.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.El2BG1.BondCon1.d "Directional variable";
//   Real D1.vd.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.vd.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.vd.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.BG2El1.BondCon1.d "Directional variable";
//   Real D1.vd.De1.e "Bondgraphic effort";
//   Real D1.vd.De1.f "Bondgraphic flow";
//   Real D1.vd.De1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.De1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.De1.BondCon1.d "Directional variable";
//   output Real D1.vd.De1.OutPort1 "Connector of Real output signal";
//   Real D1.vd.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.vd.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.vd.B3.BondCon1.d "Directional variable";
//   Real D1.vd.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.vd.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.vd.B3.BondCon2.d "Directional variable";
//   output Real D1.Tdev1.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real D1.Tdev1.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Tdev1.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.p.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.p.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.n1.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.n1.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.n2.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.n2.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   input Boolean D1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real D1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.B1.BondCon1.d "Directional variable";
//   Real D1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.B1.BondCon2.d "Directional variable";
//   Real D1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.B2.BondCon1.d "Directional variable";
//   Real D1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.B2.BondCon2.d "Directional variable";
//   Real D1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.B3.BondCon1.d "Directional variable";
//   Real D1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.B3.BondCon2.d "Directional variable";
//   Real D1.Sw1.Heat2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Heat2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Heat2BG1.BondCon1.d "Directional variable";
//   Real D1.Sw1.Heat2BG1.port_a.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.Heat2BG1.port_a.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.BG2Heat1.BondCon1.d "Directional variable";
//   Real D1.Sw1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.BG2Heat2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.BG2Heat2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.BG2Heat2.BondCon1.d "Directional variable";
//   Real D1.Sw1.BG2Heat2.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Sw1.BG2Heat2.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Sw1.Sw1.p.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.p.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.p.d "Directional variable";
//   Real D1.Sw1.Sw1.n2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.n2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.n2.d "Directional variable";
//   Real D1.Sw1.Sw1.n1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.n1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.n1.d "Directional variable";
//   input Boolean D1.Sw1.Sw1.control "true => p--n2 connected, false => p--n1 connected";
//   Real D1.Sw1.Sw1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Sw1.Sw1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B1.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B1.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B2.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B2.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.J0p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J0p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J0p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Sw1.Sw1.J0p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J0p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J0p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.J0p3_1.BondCon3.d "Directional variable";
//   Real D1.Sw1.Sw1.B4.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B4.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B4.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.B4.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B4.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B4.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.j0p2_1.e1 "Bondgraphic primary effort";
//   Real D1.Sw1.Sw1.j0p2_1.f1 "Bondgraphic primary flow";
//   Real D1.Sw1.Sw1.j0p2_1.e2 "Bondgraphic secondary effort";
//   Real D1.Sw1.Sw1.j0p2_1.f2 "Bondgraphic secondary flow";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.j0p2_1.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.j0p2_2.e1 "Bondgraphic primary effort";
//   Real D1.Sw1.Sw1.j0p2_2.f1 "Bondgraphic primary flow";
//   Real D1.Sw1.Sw1.j0p2_2.e2 "Bondgraphic secondary effort";
//   Real D1.Sw1.Sw1.j0p2_2.f2 "Bondgraphic secondary flow";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.j0p2_2.BondCon2.d "Directional variable";
//   Real D1.Sw1.Sw1.Sw1.e "Bondgraphic effort";
//   Real D1.Sw1.Sw1.Sw1.f "Bondgraphic flow";
//   Real D1.Sw1.Sw1.Sw1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.Sw1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.Sw1.BondCon1.d "Directional variable";
//   Boolean D1.Sw1.Sw1.Sw1.open "Switch position";
//   input Boolean D1.Sw1.Sw1.Sw1.BooleanInPort1 "Boolean input signal (true if switch is open)";
//   Real D1.Sw1.Sw1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B3.BondCon1.d "Directional variable";
//   Real D1.Sw1.Sw1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Sw1.Sw1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Sw1.Sw1.B3.BondCon2.d "Directional variable";
//   Real D1.T_nom.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.T_nom.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.T_nom.BG2Heat1.BondCon1.d "Directional variable";
//   Real D1.T_nom.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.T_nom.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.T_nom.Tabs.e "Bondgraphic effort";
//   Real D1.T_nom.Tabs.f "Bondgraphic flow";
//   Real D1.T_nom.Tabs.BondCon1.e "Bondgraphic effort variable";
//   Real D1.T_nom.Tabs.BondCon1.f "Bondgraphic flow variable";
//   Real D1.T_nom.Tabs.BondCon1.d "Directional variable";
//   input Real D1.T_nom.Tabs.s "Signal input";
//   Real D1.T_nom.Tabs.e0 "Bondgraphic Effort Source";
//   input Real D1.T_nom.B1.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.T_nom.B1.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.T_nom.B1.eBondCon1.d "Direction variable";
//   output Real D1.T_nom.B1.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.T_nom.B1.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.T_nom.B1.fBondCon1.d "Direction variable";
//   Real D1.T_nom.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.T_nom.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Real D1.T_nom.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Tnom "Fixed temperature at port";
//   input Real D1.ID0.u "Connector of Real input signal";
//   output Real D1.ID0.y "Connector of Real output signal";
//   constant Real D1.ID0.inf = 1e+60;
//   constant Real D1.ID0.k(quantity = "Entropy", unit = "J/K") = 1.3806505e-23 "Boltzmann's constant";
//   constant Real D1.ID0.q(quantity = "ElectricCharge", unit = "C") = 1.6021892e-19 "Electron charge";
//   parameter Integer D1.ID0.Level = D1.Level "DIODE modeling level (check documentation window for details)";
//   parameter Real D1.ID0.N = D1.N "Current emission coefficient";
//   parameter Real D1.ID0.IKF(quantity = "ElectricCurrent", unit = "A") = D1.IKF "Forward knee current";
//   parameter Real D1.ID0.IKR(quantity = "ElectricCurrent", unit = "A") = D1.IKR "Reverse knee current";
//   output Real D1.ID0.Vt(quantity = "ElectricPotential", unit = "V") "Thermal voltage";
//   output Real D1.ID0.IDstar(quantity = "ElectricCurrent", unit = "A") "Diodic current";
//   output Real D1.ID0.ID(quantity = "ElectricCurrent", unit = "A") "Adjusted diodic current";
//   output Real D1.ID0.IK(quantity = "ElectricCurrent", unit = "A") "Knee current";
//   input Real D1.ID0.Tdev(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Device temperature";
//   input Real D1.ID0.v(quantity = "ElectricPotential", unit = "V") "Diode voltage";
//   Real D1.Dd.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Dd.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.Dd.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Tnom "Reference temperature";
//   Real D1.Dd.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real D1.Dd.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Integer D1.Dd.Level = D1.Level "DIODE modeling level (check documentation window for details)";
//   parameter Real D1.Dd.IS(quantity = "ElectricCurrent", unit = "A") = D1.IS "Saturation current at reference temperature";
//   parameter Real D1.Dd.N = D1.N "Current emission coefficient";
//   parameter Real D1.Dd.TT(quantity = "Time", unit = "s") = D1.TT "Transit time at reference temperature";
//   parameter Real D1.Dd.CJ(quantity = "Capacitance", unit = "F", min = 0.0) = D1.CJ "Zero-bias bulk capacitance at reference temperature";
//   parameter Real D1.Dd.PB(quantity = "ElectricPotential", unit = "V") = D1.PB "Built-in junction potential at reference temperature";
//   parameter Real D1.Dd.MJ = D1.MJ "Bulk junction grading coefficient";
//   parameter Real D1.Dd.EG(quantity = "ElectricPotential", unit = "V") = D1.EG "Energy gap for temperature effect on saturation current at 0 K";
//   parameter Real D1.Dd.XTI = D1.XTI "Saturation current temperature exponent";
//   parameter Real D1.Dd.FC = D1.FC "Forward-bias depletion capacitance coefficient";
//   parameter Real D1.Dd.BV(quantity = "ElectricPotential", unit = "V") = D1.BVval "Reverse breakdown voltage at reference temperature";
//   parameter Real D1.Dd.IBV(quantity = "ElectricCurrent", unit = "A") = D1.IBVval "Reverse breakdown current";
//   parameter Real D1.Dd.TCV(unit = "V/K") = D1.TCV "Temperature coefficient of breakdown voltage";
//   parameter Real D1.Dd.TTT1(unit = "1/K") = D1.TTT1 "Linear temperature coefficient of transit time";
//   parameter Real D1.Dd.TTT2(unit = "1/K2") = D1.TTT2 "Quadratic temperature coefficient of transit time";
//   parameter Real D1.Dd.ISW(quantity = "ElectricCurrent", unit = "A") = D1.ISW "Saturation current of periphery at reference temperature";
//   parameter Real D1.Dd.CJSW(quantity = "Capacitance", unit = "F", min = 0.0) = D1.CJSW "Zero-bias perimeter capacitance at reference temperature";
//   parameter Real D1.Dd.PHP(quantity = "ElectricPotential", unit = "V") = D1.PHP "Built-in perimeter potential at reference temperature";
//   parameter Real D1.Dd.MJSW = D1.MJSW "Perimeter capacitance grading coefficient";
//   parameter Real D1.Dd.TOX(quantity = "Length", unit = "m") = D1.TOX "Thin oxide thickness";
//   parameter Real D1.Dd.GminDC(quantity = "Conductance", unit = "S") = D1.GminDC "Leakage conductance";
//   parameter Real D1.Dd.Area = D1.Area "Relative device area";
//   parameter Real D1.Dd.PJ = D1.PJ "Relative perimeter width";
//   parameter Real D1.Dd.EMin = D1.EMin "if x < EMin, the exp(x) function is linearized";
//   parameter Real D1.Dd.EMax = D1.EMax "if x > EMax, the exp(x) function is linearized";
//   parameter Real D1.Dd.L(quantity = "Length", unit = "m") = D1.L "Diode length";
//   parameter Real D1.Dd.W(quantity = "Length", unit = "m") = D1.W "Diode width";
//   parameter Integer D1.Dd.M = D1.M "Diode multiplier";
//   parameter Real D1.Dd.JS(quantity = "CurrentDensity", unit = "A/m2") = D1.JS "Saturation current density at reference temperature";
//   parameter Real D1.Dd.CJ2(unit = "F/m2") = D1.CJ2 "Zero-bias bulk capacitance per square meter at reference temperature";
//   parameter Real D1.Dd.JSW(unit = "A/m") = D1.JSW "Saturation current density of periphery at reference temperature";
//   parameter Real D1.Dd.CJSW2(unit = "F/m") = D1.CJSW2 "Zero-bias perimeter capacitance per meter at reference temperature";
//   parameter Real D1.Dd.LP(quantity = "Length", unit = "m") = D1.LP "Polysilicon length";
//   parameter Real D1.Dd.WP(quantity = "Length", unit = "m") = D1.WP "Polysilicon width";
//   parameter Real D1.Dd.XP(quantity = "Length", unit = "m") = D1.XP "Widening of polysilicon due to masking and etching";
//   parameter Real D1.Dd.XOI(quantity = "Length", unit = "m") = D1.XOI "Polysilicon thickness";
//   parameter Real D1.Dd.LM(quantity = "Length", unit = "m") = D1.LM "Metal length";
//   parameter Real D1.Dd.WM(quantity = "Length", unit = "m") = D1.WM "Metal width";
//   parameter Real D1.Dd.XM(quantity = "Length", unit = "m") = D1.XM "Widening of metal due to masking and etching";
//   parameter Real D1.Dd.XOM(quantity = "Length", unit = "m") = D1.XOM "Metal thickness";
//   parameter Real D1.Dd.JF(unit = "A/V2") = D1.JF "Forward FN current coefficient";
//   parameter Real D1.Dd.JR(unit = "A/V2") = D1.JR "Reverse FN current coefficient";
//   parameter Real D1.Dd.EF(quantity = "ElectricFieldStrength", unit = "V/m") = D1.EF "Forward critical electrical field";
//   parameter Real D1.Dd.ER(quantity = "ElectricFieldStrength", unit = "V/m") = D1.ER "Reverse critical electrical field";
//   parameter Boolean D1.Dd.enforceStates = D1.enforceStates "Use electrical variables as states instead of bond graph variables";
//   Real D1.Dd.VCV1.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real D1.Dd.VCV1.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real D1.Dd.VCV1.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real D1.Dd.VCV1.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real D1.Dd.VCV1.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.Dd.VCV1.gain = 1.0 "Voltage gain";
//   parameter Real D1.Dd.VCV1.Gain1.k = D1.Dd.VCV1.gain "Gain value multiplied with input signal";
//   input Real D1.Dd.VCV1.Gain1.u "Input signal connector";
//   output Real D1.Dd.VCV1.Gain1.y "Output signal connector";
//   Real D1.Dd.VCV1.De1.e "Bondgraphic effort";
//   Real D1.Dd.VCV1.De1.f "Bondgraphic flow";
//   Real D1.Dd.VCV1.De1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.De1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.De1.BondCon1.d "Directional variable";
//   output Real D1.Dd.VCV1.De1.OutPort1 "Connector of Real output signal";
//   input Real D1.Dd.VCV1.B3.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.VCV1.B3.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B3.eBondCon1.d "Direction variable";
//   output Real D1.Dd.VCV1.B3.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.VCV1.B3.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B3.fBondCon1.d "Direction variable";
//   Real D1.Dd.VCV1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.VCV1.mSe1.e "Bondgraphic effort";
//   Real D1.Dd.VCV1.mSe1.f "Bondgraphic flow";
//   Real D1.Dd.VCV1.mSe1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.mSe1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.mSe1.BondCon1.d "Directional variable";
//   input Real D1.Dd.VCV1.mSe1.s "Signal input";
//   Real D1.Dd.VCV1.mSe1.e0 "Bondgraphic Effort Source";
//   input Real D1.Dd.VCV1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.VCV1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B4.eBondCon1.d "Direction variable";
//   output Real D1.Dd.VCV1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.VCV1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B4.fBondCon1.d "Direction variable";
//   Real D1.Dd.VCV1.J1p3_2.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_2.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_2.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.VCV1.J1p3_2.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_2.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_2.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.VCV1.J1p3_2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon2.d "Directional variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.J1p3_2.BondCon3.d "Directional variable";
//   Real D1.Dd.VCV1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.El2BG2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.El2BG2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.El2BG2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.El2BG2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.El2BG2.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.BG2El2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VCV1.BG2El2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VCV1.BG2El2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.BG2El2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.BG2El2.BondCon1.d "Directional variable";
//   output Real D1.Dd.VCV1.B2.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.VCV1.B2.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B2.fBondCon1.d "Direction variable";
//   input Real D1.Dd.VCV1.B2.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.VCV1.B2.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B2.eBondCon1.d "Direction variable";
//   input Real D1.Dd.VCV1.B1.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.VCV1.B1.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B1.eBondCon1.d "Direction variable";
//   output Real D1.Dd.VCV1.B1.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.VCV1.B1.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.VCV1.B1.fBondCon1.d "Direction variable";
//   Real D1.Dd.VCV1.B5.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.B5.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.B5.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.B5.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.B5.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.B5.BondCon2.d "Directional variable";
//   Real D1.Dd.VCV1.B6.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.B6.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.B6.BondCon1.d "Directional variable";
//   Real D1.Dd.VCV1.B6.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VCV1.B6.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VCV1.B6.BondCon2.d "Directional variable";
//   Real D1.Dd.Id.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Dd.Id.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.Id.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Id.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Id.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Id.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Id.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.Id.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.Id.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.Id.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.Id.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.Id.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.Id.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.Id.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.Id.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B1.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B1.BondCon2.d "Directional variable";
//   Real D1.Dd.Id.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B2.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B2.BondCon2.d "Directional variable";
//   Real D1.Dd.Id.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B3.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.B3.BondCon2.d "Directional variable";
//   Real D1.Dd.Id.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Id.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Id.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Id.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Id.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.Id.Df1.e "Bondgraphic effort";
//   Real D1.Dd.Id.Df1.f "Bondgraphic flow";
//   Real D1.Dd.Id.Df1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Id.Df1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Id.Df1.BondCon1.d "Directional variable";
//   output Real D1.Dd.Id.Df1.OutPort1 "Connector of Real output signal";
//   output Real D1.Dd.Id.I(quantity = "ElectricCurrent", unit = "A") "Current sensor";
//   Real D1.Dd.Gnd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gnd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real D1.Dd.Gnd1.B1.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.Gnd1.B1.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.Gnd1.B1.eBondCon1.d "Direction variable";
//   output Real D1.Dd.Gnd1.B1.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.Gnd1.B1.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.Gnd1.B1.fBondCon1.d "Direction variable";
//   Real D1.Dd.Gnd1.V0.e "Bondgraphic effort";
//   Real D1.Dd.Gnd1.V0.f "Bondgraphic flow";
//   Real D1.Dd.Gnd1.V0.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gnd1.V0.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gnd1.V0.BondCon1.d "Directional variable";
//   parameter Real D1.Dd.Gnd1.V0.e0 = 0.0 "Bondgraphic Effort Source";
//   Real D1.Dd.Gnd1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gnd1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Gnd1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gnd1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gnd1.El2BG1.BondCon1.d "Directional variable";
//   output Real D1.Dd.Tdev1.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real D1.Dd.Tdev1.port.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Dd.Tdev1.port.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   input Real D1.Dd.nlCD1.u "Connector of Real input signal";
//   output Real D1.Dd.nlCD1.y "Connector of Real output signal";
//   constant Real D1.Dd.nlCD1.e0(quantity = "Permittivity", unit = "F/m", min = 0.0) = 8.85418781762039e-12 "Permittivity of free space";
//   constant Real D1.Dd.nlCD1.k(quantity = "Entropy", unit = "J/K") = 1.3806505e-23 "Boltzmann's constant";
//   constant Real D1.Dd.nlCD1.q(quantity = "ElectricCharge", unit = "C") = 1.6021892e-19 "Electron charge";
//   constant Real D1.Dd.nlCD1.GapC1(unit = "V/K") = 0.000702 "First bandgap correction factor Silicon";
//   constant Real D1.Dd.nlCD1.GapC2(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 1108.0 "Second bandgap correction factor Silicon";
//   constant Real D1.Dd.nlCD1.kox = 3.9 "Dielectric constant of SiO2";
//   parameter Integer D1.Dd.nlCD1.Level = D1.Dd.Level "DIODE modeling level (check documentation window for details)";
//   parameter Real D1.Dd.nlCD1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Dd.Tnom "Reference temperature";
//   parameter Real D1.Dd.nlCD1.Area = D1.Dd.Area "Relative device area";
//   parameter Real D1.Dd.nlCD1.PJ = D1.Dd.PJ "Relative perimeter width";
//   parameter Integer D1.Dd.nlCD1.M = D1.Dd.M "Diode multiplier";
//   parameter Real D1.Dd.nlCD1.IS(quantity = "ElectricCurrent", unit = "A") = D1.Dd.IS "Saturation current at reference temperature";
//   parameter Real D1.Dd.nlCD1.JS(quantity = "CurrentDensity", unit = "A/m2") = D1.Dd.JS "Saturation current density at reference temperature";
//   parameter Real D1.Dd.nlCD1.N = D1.Dd.N "Current emission coefficient";
//   parameter Real D1.Dd.nlCD1.TT(quantity = "Time", unit = "s") = D1.Dd.TT "Transit time at reference temperature";
//   parameter Real D1.Dd.nlCD1.PB(quantity = "ElectricPotential", unit = "V") = D1.Dd.PB "Built-in junction potential at reference temperature";
//   parameter Real D1.Dd.nlCD1.PHP(quantity = "ElectricPotential", unit = "V") = D1.Dd.PHP "Built-in perimeter potential at reference temperature";
//   parameter Real D1.Dd.nlCD1.CJ(quantity = "Capacitance", unit = "F", min = 0.0) = D1.Dd.CJ "Zero-bias bulk capacitance at reference temperature";
//   parameter Real D1.Dd.nlCD1.CJ2(unit = "F/m2") = D1.Dd.CJ2 "Zero-bias bulk capacitance per square meter at reference temperature";
//   parameter Real D1.Dd.nlCD1.MJ = D1.Dd.MJ "Bulk junction grading coefficient";
//   parameter Real D1.Dd.nlCD1.CJSW(quantity = "Capacitance", unit = "F", min = 0.0) = D1.Dd.CJSW "Zero-bias perimeter capacitance at reference temperature";
//   parameter Real D1.Dd.nlCD1.CJSW2(unit = "F/m") = D1.Dd.CJSW2 "Zero-bias perimeter capacitance per meter at reference temperature";
//   parameter Real D1.Dd.nlCD1.MJSW = D1.Dd.MJSW "Perimeter capacitance grading coefficient";
//   parameter Real D1.Dd.nlCD1.FC = D1.Dd.FC "Forward-bias depletion capacitance coefficient";
//   parameter Real D1.Dd.nlCD1.GminDC(quantity = "Conductance", unit = "S") = D1.Dd.GminDC "Leakage conductance";
//   parameter Real D1.Dd.nlCD1.EG(quantity = "ElectricPotential", unit = "V") = D1.Dd.EG "Energy gap for temperature effect on saturation current at 0 K";
//   parameter Real D1.Dd.nlCD1.XTI = D1.Dd.XTI "Saturation current temperature exponent";
//   parameter Real D1.Dd.nlCD1.TTT1(unit = "1/K") = D1.Dd.TTT1 "Linear temperature coefficient of transit time";
//   parameter Real D1.Dd.nlCD1.TTT2(unit = "1/K2") = D1.Dd.TTT2 "Quadratic temperature coefficient of transit time";
//   parameter Real D1.Dd.nlCD1.ISW(quantity = "ElectricCurrent", unit = "A") = D1.Dd.ISW "Saturation current of periphery at reference temperature";
//   parameter Real D1.Dd.nlCD1.JSW(unit = "A/m") = D1.Dd.JSW "Saturation current density of periphery at reference temperature";
//   parameter Real D1.Dd.nlCD1.TOX(quantity = "Length", unit = "m") = D1.Dd.TOX "Thin oxide thickness";
//   parameter Real D1.Dd.nlCD1.L(quantity = "Length", unit = "m") = D1.Dd.L "Diode length";
//   parameter Real D1.Dd.nlCD1.W(quantity = "Length", unit = "m") = D1.Dd.W "Diode width";
//   parameter Real D1.Dd.nlCD1.LP(quantity = "Length", unit = "m") = D1.Dd.LP "Polysilicon length";
//   parameter Real D1.Dd.nlCD1.WP(quantity = "Length", unit = "m") = D1.Dd.WP "Polysilicon width";
//   parameter Real D1.Dd.nlCD1.XP(quantity = "Length", unit = "m") = D1.Dd.XP "Widening of polysilicon due to masking and etching";
//   parameter Real D1.Dd.nlCD1.XOI(quantity = "Length", unit = "m") = D1.Dd.XOI "Polysilicon thickness";
//   parameter Real D1.Dd.nlCD1.LM(quantity = "Length", unit = "m") = D1.Dd.LM "Metal length";
//   parameter Real D1.Dd.nlCD1.WM(quantity = "Length", unit = "m") = D1.Dd.WM "Metal width";
//   parameter Real D1.Dd.nlCD1.XM(quantity = "Length", unit = "m") = D1.Dd.XM "Widening of metal due to masking and etching";
//   parameter Real D1.Dd.nlCD1.XOM(quantity = "Length", unit = "m") = D1.Dd.XOM "Metal thickness";
//   parameter Real D1.Dd.nlCD1.EMin = D1.Dd.EMin "if x < EMin, the exp(x) function is linearized";
//   parameter Real D1.Dd.nlCD1.EMax = D1.Dd.EMax "if x > EMax, the exp(x) function is linearized";
//   input Real D1.Dd.nlCD1.Tdev(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Device temperature";
//   protected parameter Real D1.Dd.nlCD1.eox(quantity = "Permittivity", unit = "F/m", min = 0.0) = 3.45313324887195e-11 "Permittivity of SiO2";
//   protected parameter Real D1.Dd.nlCD1.AREAeff(quantity = "Area", unit = "m2") = D1.Dd.nlCD1.W * (D1.Dd.nlCD1.L * Real(D1.Dd.nlCD1.M));
//   protected parameter Real D1.Dd.nlCD1.PJeff(quantity = "Length", unit = "m") = 2.0 * ((D1.Dd.nlCD1.W + D1.Dd.nlCD1.L) * Real(D1.Dd.nlCD1.M));
//   protected parameter Real D1.Dd.nlCD1.ExMin = exp(D1.Dd.nlCD1.EMin);
//   protected parameter Real D1.Dd.nlCD1.ExMax = exp(D1.Dd.nlCD1.EMax);
//   protected Real D1.Dd.nlCD1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   protected Real D1.Dd.nlCD1.RTemp "Temperature quotient";
//   protected Real D1.Dd.nlCD1.Vt(quantity = "ElectricPotential", unit = "V") "Thermal voltage";
//   protected Real D1.Dd.nlCD1.ISval(quantity = "ElectricCurrent", unit = "A") "Saturation current at device temperature";
//   protected Real D1.Dd.nlCD1.ISeff(quantity = "ElectricCurrent", unit = "A") "Effective saturation current";
//   protected Real D1.Dd.nlCD1.JSval(quantity = "CurrentDensity", unit = "A/m2") "Saturation current density at device temperature";
//   protected Real D1.Dd.nlCD1.ISWval(quantity = "ElectricCurrent", unit = "A") "Saturation current of periphery at device temperature";
//   protected Real D1.Dd.nlCD1.JSWval(unit = "A/m") "Saturation current density of periphery at device temperature";
//   protected Real D1.Dd.nlCD1.PBval(quantity = "ElectricPotential", unit = "V") "Built-in junction potential at device temperature";
//   protected Real D1.Dd.nlCD1.PHPval(quantity = "ElectricPotential", unit = "V") "Built-in perimeter potential at device temperature";
//   protected Real D1.Dd.nlCD1.CJval(quantity = "Capacitance", unit = "F", min = 0.0) "Zero-bias bulk capacitance at device temperature";
//   protected Real D1.Dd.nlCD1.CJ2val(unit = "F/m2") "Zero-bias bulk capacitance per square meter at device temperature";
//   protected Real D1.Dd.nlCD1.CJSWval(quantity = "Capacitance", unit = "F", min = 0.0) "Zero-bias perimeter capacitance at device temperature";
//   protected Real D1.Dd.nlCD1.CJSW2val(unit = "F/m") "Zero-bias perimeter capacitance per meter at device temperature";
//   protected Real D1.Dd.nlCD1.TTval(quantity = "Time", unit = "s") "Transit time at device temperature";
//   protected Real D1.Dd.nlCD1.EGval(quantity = "ElectricPotential", unit = "V") "Energy gap at device temperature";
//   protected Real D1.Dd.nlCD1.EGnom(quantity = "ElectricPotential", unit = "V") "Energy gap at reference temperature";
//   protected Real D1.Dd.nlCD1.v(quantity = "ElectricPotential", unit = "V") "Voltage across capacitance";
//   protected Real D1.Dd.nlCD1.Cval(quantity = "Capacitance", unit = "F", min = 0.0) "Non-linear junction capacitance value";
//   protected Real D1.Dd.nlCD1.Cdiff(quantity = "Capacitance", unit = "F", min = 0.0) "Diffusion capacitance at device temperature";
//   protected Real D1.Dd.nlCD1.Cbulk(quantity = "Capacitance", unit = "F", min = 0.0) "Bulk capacitance at device temperature";
//   protected Real D1.Dd.nlCD1.Cbulk2(unit = "F/m2") "Bulk capacitance per square meter at device temperature";
//   protected Real D1.Dd.nlCD1.Cperi(quantity = "Capacitance", unit = "F", min = 0.0) "Perimeter capacitance at device temperature";
//   protected Real D1.Dd.nlCD1.Cperi2(unit = "F/m") "Perimeter capacitance per meter at device temperature";
//   protected Real D1.Dd.nlCD1.Cpoly(quantity = "Capacitance", unit = "F", min = 0.0) "Polysilicon capacitance";
//   protected Real D1.Dd.nlCD1.Cmetal(quantity = "Capacitance", unit = "F", min = 0.0) "Metal capacitance";
//   protected Real D1.Dd.nlCD1.et;
//   output Real D1.Dd.id(quantity = "ElectricCurrent", unit = "A") "Diode current";
//   parameter Real D1.Dd.VarC1.u0 = 0.0 "Initial voltage across capacitor";
//   parameter Boolean D1.Dd.VarC1.enforceStates = false "use electrical variables as states instead of bond graph variables";
//   Real D1.Dd.VarC1.v(quantity = "ElectricPotential", unit = "V", start = D1.Dd.VarC1.u0, StateSelect = StateSelect.default) "Voltage drop between the two pins";
//   Real D1.Dd.VarC1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.VarC1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VarC1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VarC1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VarC1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real D1.Dd.VarC1.u "Modulation signal";
//   Real D1.Dd.VarC1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.VarC1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.VarC1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.VarC1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.VarC1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.VarC1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.VarC1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.VarC1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B1.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B1.BondCon2.d "Directional variable";
//   Real D1.Dd.VarC1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B2.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B2.BondCon2.d "Directional variable";
//   Real D1.Dd.VarC1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VarC1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VarC1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.VarC1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.VarC1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B3.BondCon1.d "Directional variable";
//   Real D1.Dd.VarC1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.B3.BondCon2.d "Directional variable";
//   Real D1.Dd.VarC1.mC1.e(start = D1.Dd.VarC1.u0) "Bondgraphic effort";
//   Real D1.Dd.VarC1.mC1.f "Bondgraphic flow";
//   Real D1.Dd.VarC1.mC1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.VarC1.mC1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.VarC1.mC1.BondCon1.d "Directional variable";
//   input Real D1.Dd.VarC1.mC1.s "Signal input";
//   Real D1.Dd.VarC1.mC1.C "Bondgraphic Capacitance";
//   Real D1.Dd.Vd.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Dd.Vd.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.Vd.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Vd.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Vd.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Vd.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real D1.Dd.Vd.V(quantity = "ElectricPotential", unit = "V") "Voltage sensor";
//   Real D1.Dd.Vd.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.Vd.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.Vd.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.Vd.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.Vd.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.Vd.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.Vd.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.Vd.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B1.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B1.BondCon2.d "Directional variable";
//   Real D1.Dd.Vd.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B2.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B2.BondCon2.d "Directional variable";
//   Real D1.Dd.Vd.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Vd.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Vd.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Vd.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Vd.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.De1.e "Bondgraphic effort";
//   Real D1.Dd.Vd.De1.f "Bondgraphic flow";
//   Real D1.Dd.Vd.De1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.De1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.De1.BondCon1.d "Directional variable";
//   output Real D1.Dd.Vd.De1.OutPort1 "Connector of Real output signal";
//   Real D1.Dd.Vd.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B3.BondCon1.d "Directional variable";
//   Real D1.Dd.Vd.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Vd.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Vd.B3.BondCon2.d "Directional variable";
//   Real D1.Dd.Gj1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Dd.Gj1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.Gj1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gj1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Gj1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gj1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.Dd.Gj1.GminDC(quantity = "Conductance", unit = "S") = D1.Dd.GminDC "Leakage conductance";
//   parameter Real D1.Dd.Gj1.Area = D1.Dd.Area "Relative area occupied by device";
//   parameter Integer D1.Dd.Gj1.Level = D1.Dd.Level "Transistor modeling level (Ebers-Moll = 1; Gummel-Poon = 2)";
//   Real D1.Dd.Gj1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.Gj1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.Gj1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.Gj1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.Gj1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.Gj1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.Gj1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.Gj1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B1.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B1.BondCon2.d "Directional variable";
//   Real D1.Dd.Gj1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B2.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B2.BondCon2.d "Directional variable";
//   Real D1.Dd.Gj1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gj1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Gj1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.Gj1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.Gj1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B3.BondCon1.d "Directional variable";
//   Real D1.Dd.Gj1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.B3.BondCon2.d "Directional variable";
//   Real D1.Dd.Gj1.Gj1.e "Bondgraphic effort";
//   Real D1.Dd.Gj1.Gj1.f "Bondgraphic flow";
//   Real D1.Dd.Gj1.Gj1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.Gj1.Gj1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.Gj1.Gj1.BondCon1.d "Directional variable";
//   parameter Real D1.Dd.Gj1.Gj1.GminDC(quantity = "Conductance", unit = "S") = D1.Dd.Gj1.GminDC "Leakage conductance";
//   parameter Real D1.Dd.Gj1.Gj1.Area = D1.Dd.Gj1.Area "Relative area occupied by device";
//   parameter Integer D1.Dd.Gj1.Gj1.Level = D1.Dd.Gj1.Level "Transistor modeling level (Ebers-Moll = 1; Gummel-Poon = 2)";
//   Real D1.Dd.DjD1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real D1.Dd.DjD1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real D1.Dd.DjD1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.DjD1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.DjD1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.DjD1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real D1.Dd.DjD1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Dd.Tnom "Reference temperature";
//   Real D1.Dd.DjD1.heatPort.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0, start = 300.15) "Port temperature";
//   Real D1.Dd.DjD1.heatPort.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   parameter Integer D1.Dd.DjD1.Level = D1.Dd.Level "DIODE modeling level (check documentation window for details)";
//   parameter Real D1.Dd.DjD1.IS(quantity = "ElectricCurrent", unit = "A") = D1.Dd.IS "Saturation current at reference temperature";
//   parameter Real D1.Dd.DjD1.N = D1.Dd.N "Current emission coefficient";
//   parameter Real D1.Dd.DjD1.EG(quantity = "ElectricPotential", unit = "V") = D1.Dd.EG "Energy gap for temperature effect on saturation current at 0 K";
//   parameter Real D1.Dd.DjD1.XTI = D1.Dd.XTI "Saturation current temperature exponent";
//   parameter Real D1.Dd.DjD1.BV(quantity = "ElectricPotential", unit = "V") = D1.Dd.BV "Reverse breakdown voltage at reference temperature";
//   parameter Real D1.Dd.DjD1.IBV(quantity = "ElectricCurrent", unit = "A") = D1.Dd.IBV "Reverse breakdown current";
//   parameter Real D1.Dd.DjD1.TCV(unit = "V/K") = D1.Dd.TCV "Temperature coefficient of breakdown voltage";
//   parameter Real D1.Dd.DjD1.ISW(quantity = "ElectricCurrent", unit = "A") = D1.Dd.ISW "Saturation current of periphery at reference temperature";
//   parameter Real D1.Dd.DjD1.TOX(quantity = "Length", unit = "m") = D1.Dd.TOX "Thin oxide thickness";
//   parameter Real D1.Dd.DjD1.Area = D1.Dd.Area "Relative device area";
//   parameter Real D1.Dd.DjD1.PJ = D1.Dd.PJ "Relative perimeter width";
//   parameter Real D1.Dd.DjD1.EMin = D1.Dd.EMin "if x < EMin, the exp(x) function is linearized";
//   parameter Real D1.Dd.DjD1.EMax = D1.Dd.EMax "if x > EMax, the exp(x) function is linearized";
//   parameter Real D1.Dd.DjD1.L(quantity = "Length", unit = "m") = D1.Dd.L "Diode length";
//   parameter Real D1.Dd.DjD1.W(quantity = "Length", unit = "m") = D1.Dd.W "Diode width";
//   parameter Integer D1.Dd.DjD1.M = D1.Dd.M "Diode multiplier";
//   parameter Real D1.Dd.DjD1.JS(quantity = "CurrentDensity", unit = "A/m2") = D1.Dd.JS "Saturation current density at reference temperature";
//   parameter Real D1.Dd.DjD1.JSW(unit = "A/m") = D1.Dd.JSW "Saturation current density of periphery at reference temperature";
//   parameter Real D1.Dd.DjD1.JF(unit = "A/V2") = D1.Dd.JF "Forward FN current coefficient";
//   parameter Real D1.Dd.DjD1.JR(unit = "A/V2") = D1.Dd.JR "Reverse FN current coefficient";
//   parameter Real D1.Dd.DjD1.EF(quantity = "ElectricFieldStrength", unit = "V/m") = D1.Dd.EF "Forward critical electrical field";
//   parameter Real D1.Dd.DjD1.ER(quantity = "ElectricFieldStrength", unit = "V/m") = D1.Dd.ER "Reverse critical electrical field";
//   Real D1.Dd.DjD1.J1p3_1.e[1] "Bondgraphic effort vector";
//   Real D1.Dd.DjD1.J1p3_1.e[2] "Bondgraphic effort vector";
//   Real D1.Dd.DjD1.J1p3_1.e[3] "Bondgraphic effort vector";
//   Real D1.Dd.DjD1.J1p3_1.f[1] "Bondgraphic flow vector";
//   Real D1.Dd.DjD1.J1p3_1.f[2] "Bondgraphic flow vector";
//   Real D1.Dd.DjD1.J1p3_1.f[3] "Bondgraphic flow vector";
//   Real D1.Dd.DjD1.J1p3_1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon2.d "Directional variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon3.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon3.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.J1p3_1.BondCon3.d "Directional variable";
//   Real D1.Dd.DjD1.B1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.B1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B1.BondCon2.d "Directional variable";
//   Real D1.Dd.DjD1.B2.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B2.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B2.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.B2.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B2.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B2.BondCon2.d "Directional variable";
//   Real D1.Dd.DjD1.El2BG1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.DjD1.El2BG1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.DjD1.El2BG1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.El2BG1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.El2BG1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.BG2El1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real D1.Dd.DjD1.BG2El1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real D1.Dd.DjD1.BG2El1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.BG2El1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.BG2El1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.B3.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B3.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B3.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.B3.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.B3.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.B3.BondCon2.d "Directional variable";
//   output Real D1.Dd.DjD1.B4.fBondCon1.e "Bondgraphic effort variable";
//   input Real D1.Dd.DjD1.B4.fBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.DjD1.B4.fBondCon1.d "Direction variable";
//   input Real D1.Dd.DjD1.B4.eBondCon1.e "Bondgraphic effort variable";
//   output Real D1.Dd.DjD1.B4.eBondCon1.f "Bondgraphic flow variable";
//   output Real D1.Dd.DjD1.B4.eBondCon1.d "Direction variable";
//   Real D1.Dd.DjD1.BG2Heat1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.BG2Heat1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.BG2Heat1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.BG2Heat1.port_b.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Port temperature";
//   Real D1.Dd.DjD1.BG2Heat1.port_b.Q_flow(quantity = "Power", unit = "W") "Heat flow rate (positive if flowing from outside into the component)";
//   Real D1.Dd.DjD1.DjD1.e1 "Bondgraphic primary effort";
//   Real D1.Dd.DjD1.DjD1.f1 "Bondgraphic primary flow";
//   Real D1.Dd.DjD1.DjD1.e2 "Bondgraphic secondary effort";
//   Real D1.Dd.DjD1.DjD1.f2 "Bondgraphic secondary flow";
//   Real D1.Dd.DjD1.DjD1.BondCon1.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.DjD1.BondCon1.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.DjD1.BondCon1.d "Directional variable";
//   Real D1.Dd.DjD1.DjD1.BondCon2.e "Bondgraphic effort variable";
//   Real D1.Dd.DjD1.DjD1.BondCon2.f "Bondgraphic flow variable";
//   Real D1.Dd.DjD1.DjD1.BondCon2.d "Directional variable";
//   parameter Real D1.Dd.DjD1.DjD1.Tnom(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = D1.Dd.DjD1.Tnom "Reference temperature";
//   Real D1.Dd.DjD1.DjD1.DTemp(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) "Difference between circuit temperature and reference temperature";
//   Real D1.Dd.DjD1.DjD1.DTempSq "Square of DTemp";
//   constant Real D1.Dd.DjD1.DjD1.k(quantity = "Entropy", unit = "J/K") = 1.3806505e-23 "Boltzmann's constant";
//   constant Real D1.Dd.DjD1.DjD1.q(quantity = "ElectricCharge", unit = "C") = 1.6021892e-19 "Electron charge";
//   constant Real D1.Dd.DjD1.DjD1.GapC1(unit = "V/K") = 0.000702 "First bandgap correction factor Silicon";
//   constant Real D1.Dd.DjD1.DjD1.GapC2(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0) = 1108.0 "Second bandgap correction factor Silicon";
//   parameter Integer D1.Dd.DjD1.DjD1.Level = D1.Dd.DjD1.Level "DIODE modeling level (check documentation window for details)";
//   parameter Real D1.Dd.DjD1.DjD1.IS(quantity = "ElectricCurrent", unit = "A") = D1.Dd.DjD1.IS "Saturation current at reference temperature";
//   parameter Real D1.Dd.DjD1.DjD1.N = D1.Dd.DjD1.N "Current emission coefficient";
//   parameter Real D1.Dd.DjD1.DjD1.EG(quantity = "ElectricPotential", unit = "V") = D1.Dd.DjD1.EG "Energy gap for temperature effect on saturation current at 0 K";
//   parameter Real D1.Dd.DjD1.DjD1.XTI = D1.Dd.DjD1.XTI "Saturation current temperature exponent";
//   parameter Real D1.Dd.DjD1.DjD1.BV(quantity = "ElectricPotential", unit = "V") = D1.Dd.DjD1.BV "Reverse breakdown voltage at reference temperature";
//   parameter Real D1.Dd.DjD1.DjD1.IBV(quantity = "ElectricCurrent", unit = "A") = D1.Dd.DjD1.IBV "Reverse breakdown current";
//   parameter Real D1.Dd.DjD1.DjD1.TCV(unit = "V/K") = D1.Dd.DjD1.TCV "Temperature coefficient of breakdown voltage";
//   parameter Real D1.Dd.DjD1.DjD1.ISW(quantity = "ElectricCurrent", unit = "A") = D1.Dd.DjD1.ISW "Saturation current of periphery at reference temperature";
//   parameter Real D1.Dd.DjD1.DjD1.TOX(quantity = "Length", unit = "m") = D1.Dd.DjD1.TOX "Thin oxide thickness";
//   parameter Real D1.Dd.DjD1.DjD1.Area = D1.Dd.DjD1.Area "Relative device area";
//   parameter Real D1.Dd.DjD1.DjD1.PJ = D1.Dd.DjD1.PJ "Relative perimeter width";
//   parameter Real D1.Dd.DjD1.DjD1.EMin = D1.Dd.DjD1.EMin "if x < EMin, the exp(x) function is linearized";
//   parameter Real D1.Dd.DjD1.DjD1.EMax = D1.Dd.DjD1.EMax "if x > EMax, the exp(x) function is linearized";
//   parameter Real D1.Dd.DjD1.DjD1.L(quantity = "Length", unit = "m") = D1.Dd.DjD1.L "Diode length";
//   parameter Real D1.Dd.DjD1.DjD1.W(quantity = "Length", unit = "m") = D1.Dd.DjD1.W "Diode width";
//   parameter Integer D1.Dd.DjD1.DjD1.M = D1.Dd.DjD1.M "Diode multiplier";
//   parameter Real D1.Dd.DjD1.DjD1.JS(quantity = "CurrentDensity", unit = "A/m2") = D1.Dd.DjD1.JS "Saturation current density at reference temperature";
//   parameter Real D1.Dd.DjD1.DjD1.JSW(unit = "A/m") = D1.Dd.DjD1.JSW "Saturation current density of periphery at reference temperature";
//   parameter Real D1.Dd.DjD1.DjD1.JF(unit = "A/V2") = D1.Dd.DjD1.JF "Forward FN current coefficient";
//   parameter Real D1.Dd.DjD1.DjD1.JR(unit = "A/V2") = D1.Dd.DjD1.JR "Reverse FN current coefficient";
//   parameter Real D1.Dd.DjD1.DjD1.EF(quantity = "ElectricFieldStrength", unit = "V/m") = D1.Dd.DjD1.EF "Forward critical electrical field";
//   parameter Real D1.Dd.DjD1.DjD1.ER(quantity = "ElectricFieldStrength", unit = "V/m") = D1.Dd.DjD1.ER "Reverse critical electrical field";
//   protected parameter Real D1.Dd.DjD1.DjD1.Vp(quantity = "ElectricPotential", unit = "V") = D1.Dd.DjD1.DjD1.TOX * D1.Dd.DjD1.DjD1.EF / 13.8155105579643;
//   protected parameter Real D1.Dd.DjD1.DjD1.Vm(quantity = "ElectricPotential", unit = "V") = (-D1.Dd.DjD1.DjD1.TOX) * D1.Dd.DjD1.DjD1.ER / 13.8155105579643;
//   protected parameter Real D1.Dd.DjD1.DjD1.AREAeff(quantity = "Area", unit = "m2") = D1.Dd.DjD1.DjD1.W * (D1.Dd.DjD1.DjD1.L * Real(D1.Dd.DjD1.DjD1.M));
//   protected parameter Real D1.Dd.DjD1.DjD1.PJeff(quantity = "Length", unit = "m") = 2.0 * ((D1.Dd.DjD1.DjD1.W + D1.Dd.DjD1.DjD1.L) * Real(D1.Dd.DjD1.DjD1.M));
//   protected parameter Real D1.Dd.DjD1.DjD1.ExMin = exp(D1.Dd.DjD1.DjD1.EMin);
//   protected parameter Real D1.Dd.DjD1.DjD1.ExMax = exp(D1.Dd.DjD1.DjD1.EMax);
//   protected Real D1.Dd.DjD1.DjD1.RTemp "Temperature quotient";
//   protected Real D1.Dd.DjD1.DjD1.Vt(quantity = "ElectricPotential", unit = "V") "Thermal voltage";
//   protected Real D1.Dd.DjD1.DjD1.ISval(quantity = "ElectricCurrent", unit = "A") "Saturation current at device temperature";
//   protected Real D1.Dd.DjD1.DjD1.ISeff(quantity = "ElectricCurrent", unit = "A") "Effective saturation current";
//   protected Real D1.Dd.DjD1.DjD1.JSval(quantity = "CurrentDensity", unit = "A/m2") "Saturation current density at device temperature";
//   protected Real D1.Dd.DjD1.DjD1.ISWval(quantity = "ElectricCurrent", unit = "A") "Saturation current of periphery at device temperature";
//   protected Real D1.Dd.DjD1.DjD1.JSWval(unit = "A/m") "Saturation current density of periphery at device temperature";
//   protected Real D1.Dd.DjD1.DjD1.EGnom(quantity = "ElectricPotential", unit = "V") "Activation energy at reference temperature";
//   protected Real D1.Dd.DjD1.DjD1.BVval(quantity = "ElectricPotential", unit = "V") "Reverse breakdown voltage at device temperature";
//   protected Real D1.Dd.DjD1.DjD1.BVeff(quantity = "ElectricPotential", unit = "V") "Effective reverse breakdown voltage";
//   protected Real D1.Dd.DjD1.DjD1.IBVval(quantity = "ElectricCurrent", unit = "A") "Effective reverse breakdown current";
//   protected Real D1.Dd.DjD1.DjD1.Ibreak(quantity = "ElectricCurrent", unit = "A");
//   protected Real D1.Dd.DjD1.DjD1.f1a(quantity = "ElectricCurrent", unit = "A");
//   protected Real D1.Dd.DjD1.DjD1.f1b(quantity = "ElectricCurrent", unit = "A");
//   protected Real D1.Dd.DjD1.DjD1.Eq(unit = "V2/m2");
//   protected Real D1.Dd.DjD1.DjD1.et;
//   protected Real D1.Dd.DjD1.DjD1.et2;
//   protected parameter Real D1.AREAeff(quantity = "Area", unit = "m2") = D1.W * (D1.L * Real(D1.M));
//   protected parameter Real D1.PJeff(quantity = "Length", unit = "m") = 2.0 * ((D1.W + D1.L) * Real(D1.M));
//   protected parameter Real D1.Vt(quantity = "ElectricPotential", unit = "V") = 8.61727503842867e-05 * D1.Tnom;
//   protected parameter Real D1.ISeff(quantity = "ElectricCurrent", unit = "A") = if D1.Level == 1 then D1.Area * D1.IS + D1.PJ * D1.ISW else if D1.Level == 3 then D1.AREAeff * D1.JS + D1.PJeff * D1.JSW else 0.0;
//   protected parameter Real D1.Ibreak(quantity = "ElectricCurrent", unit = "A") = (-D1.ISeff) * (exp((-D1.BV) / (D1.N * D1.Vt)) - 1.0);
//   protected parameter Real D1.IBVval(quantity = "ElectricCurrent", unit = "A") = if D1.IBV < D1.Ibreak then D1.Ibreak else D1.IBV;
//   protected parameter Real D1.BVval(quantity = "ElectricPotential", unit = "V") = if noEvent(D1.BV > 0.0) then D1.BV - D1.N * (D1.Vt * log(D1.IBVval / D1.Ibreak)) else 0.0;
// equation
//   V0.El2BG1.BondCon1.e = V0.El2BG1.p.v;
//   V0.El2BG1.BondCon1.f = V0.El2BG1.p.i;
//   V0.BG2El1.BondCon1.e = V0.BG2El1.n.v;
//   V0.BG2El1.BondCon1.f = -V0.BG2El1.n.i;
//   V0.J1p3_1.f[2] = V0.J1p3_1.f[1];
//   V0.J1p3_1.f[3] = V0.J1p3_1.f[2];
//   V0.J1p3_1.e[1] + (V0.J1p3_1.e[2] + V0.J1p3_1.e[3]) = 0.0;
//   V0.J1p3_1.e[1] = V0.J1p3_1.BondCon1.d * V0.J1p3_1.BondCon1.e;
//   V0.J1p3_1.f[1] = V0.J1p3_1.BondCon1.f;
//   V0.J1p3_1.e[2] = V0.J1p3_1.BondCon2.d * V0.J1p3_1.BondCon2.e;
//   V0.J1p3_1.f[2] = V0.J1p3_1.BondCon2.f;
//   V0.J1p3_1.e[3] = V0.J1p3_1.BondCon3.d * V0.J1p3_1.BondCon3.e;
//   V0.J1p3_1.f[3] = V0.J1p3_1.BondCon3.f;
//   V0.B1.BondCon2.e = V0.B1.BondCon1.e;
//   V0.B1.BondCon2.f = V0.B1.BondCon1.f;
//   V0.B1.BondCon1.d = -1.0;
//   V0.B1.BondCon2.d = 1.0;
//   V0.B2.BondCon2.e = V0.B2.BondCon1.e;
//   V0.B2.BondCon2.f = V0.B2.BondCon1.f;
//   V0.B2.BondCon1.d = -1.0;
//   V0.B2.BondCon2.d = 1.0;
//   V0.V1.Sine1.y = V0.V1.Sine1.offset + (if time < V0.V1.Sine1.startTime then 0.0 else V0.V1.Sine1.amplitude * Modelica.Math.sin(6.28318530717959 * (V0.V1.Sine1.freqHz * (time - V0.V1.Sine1.startTime)) + V0.V1.Sine1.phase));
//   V0.V1.e = V0.V1.Sine1.y;
//   V0.V1.e = V0.V1.BondCon1.e;
//   V0.V1.f = (-V0.V1.BondCon1.d) * V0.V1.BondCon1.f;
//   V0.B3.fBondCon1.e = V0.B3.eBondCon1.e;
//   V0.B3.eBondCon1.f = V0.B3.fBondCon1.f;
//   V0.B3.eBondCon1.d = -1.0;
//   V0.B3.fBondCon1.d = 1.0;
//   V0.v = V0.p.v - V0.n.v;
//   V0.i = V0.p.i;
//   L1.J1p3_1.f[2] = L1.J1p3_1.f[1];
//   L1.J1p3_1.f[3] = L1.J1p3_1.f[2];
//   L1.J1p3_1.e[1] + (L1.J1p3_1.e[2] + L1.J1p3_1.e[3]) = 0.0;
//   L1.J1p3_1.e[1] = L1.J1p3_1.BondCon1.d * L1.J1p3_1.BondCon1.e;
//   L1.J1p3_1.f[1] = L1.J1p3_1.BondCon1.f;
//   L1.J1p3_1.e[2] = L1.J1p3_1.BondCon2.d * L1.J1p3_1.BondCon2.e;
//   L1.J1p3_1.f[2] = L1.J1p3_1.BondCon2.f;
//   L1.J1p3_1.e[3] = L1.J1p3_1.BondCon3.d * L1.J1p3_1.BondCon3.e;
//   L1.J1p3_1.f[3] = L1.J1p3_1.BondCon3.f;
//   L1.B1.BondCon2.e = L1.B1.BondCon1.e;
//   L1.B1.BondCon2.f = L1.B1.BondCon1.f;
//   L1.B1.BondCon1.d = -1.0;
//   L1.B1.BondCon2.d = 1.0;
//   L1.B2.BondCon2.e = L1.B2.BondCon1.e;
//   L1.B2.BondCon2.f = L1.B2.BondCon1.f;
//   L1.B2.BondCon1.d = -1.0;
//   L1.B2.BondCon2.d = 1.0;
//   L1.B3.BondCon2.e = L1.B3.BondCon1.e;
//   L1.B3.BondCon2.f = L1.B3.BondCon1.f;
//   L1.B3.BondCon1.d = -1.0;
//   L1.B3.BondCon2.d = 1.0;
//   L1.El2BG1.BondCon1.e = L1.El2BG1.p.v;
//   L1.El2BG1.BondCon1.f = L1.El2BG1.p.i;
//   L1.BG2El1.BondCon1.e = L1.BG2El1.n.v;
//   L1.BG2El1.BondCon1.f = -L1.BG2El1.n.i;
//   L1.B6.fBondCon1.e = L1.B6.eBondCon1.e;
//   L1.B6.eBondCon1.f = L1.B6.fBondCon1.f;
//   L1.B6.eBondCon1.d = -1.0;
//   L1.B6.fBondCon1.d = 1.0;
//   L1.T_nom.e = L1.T_nom.e0;
//   L1.T_nom.e = L1.T_nom.BondCon1.e;
//   L1.T_nom.f = (-L1.T_nom.BondCon1.d) * L1.T_nom.BondCon1.f;
//   L1.L1.Lval = L1.L1.L * (1.0 + (L1.L1.TL1 * L1.L1.DTemp + L1.L1.TL2 * L1.L1.DTempSq));
//   L1.L1.e1 = L1.L1.Lval * der(L1.L1.f1);
//   L1.L1.f2 = 0.0;
//   L1.L1.DTempSq = L1.L1.DTemp ^ 2.0;
//   L1.L1.DTemp = L1.L1.e2 - L1.L1.Tnom;
//   L1.L1.e1 = L1.L1.BondCon1.e;
//   L1.L1.f1 = L1.L1.BondCon1.d * L1.L1.BondCon1.f;
//   L1.L1.e2 = L1.L1.BondCon2.e;
//   L1.L1.f2 = (-L1.L1.BondCon2.d) * L1.L1.BondCon2.f;
//   L1.B4.fBondCon1.e = L1.B4.eBondCon1.e;
//   L1.B4.eBondCon1.f = L1.B4.fBondCon1.f;
//   L1.B4.fBondCon1.d = -1.0;
//   L1.B4.eBondCon1.d = 1.0;
//   L1.Sw1.J1p3_1.f[2] = L1.Sw1.J1p3_1.f[1];
//   L1.Sw1.J1p3_1.f[3] = L1.Sw1.J1p3_1.f[2];
//   L1.Sw1.J1p3_1.e[1] + (L1.Sw1.J1p3_1.e[2] + L1.Sw1.J1p3_1.e[3]) = 0.0;
//   L1.Sw1.J1p3_1.e[1] = L1.Sw1.J1p3_1.BondCon1.d * L1.Sw1.J1p3_1.BondCon1.e;
//   L1.Sw1.J1p3_1.f[1] = L1.Sw1.J1p3_1.BondCon1.f;
//   L1.Sw1.J1p3_1.e[2] = L1.Sw1.J1p3_1.BondCon2.d * L1.Sw1.J1p3_1.BondCon2.e;
//   L1.Sw1.J1p3_1.f[2] = L1.Sw1.J1p3_1.BondCon2.f;
//   L1.Sw1.J1p3_1.e[3] = L1.Sw1.J1p3_1.BondCon3.d * L1.Sw1.J1p3_1.BondCon3.e;
//   L1.Sw1.J1p3_1.f[3] = L1.Sw1.J1p3_1.BondCon3.f;
//   L1.Sw1.B1.BondCon2.e = L1.Sw1.B1.BondCon1.e;
//   L1.Sw1.B1.BondCon2.f = L1.Sw1.B1.BondCon1.f;
//   L1.Sw1.B1.BondCon1.d = -1.0;
//   L1.Sw1.B1.BondCon2.d = 1.0;
//   L1.Sw1.B2.BondCon2.e = L1.Sw1.B2.BondCon1.e;
//   L1.Sw1.B2.BondCon2.f = L1.Sw1.B2.BondCon1.f;
//   L1.Sw1.B2.BondCon1.d = -1.0;
//   L1.Sw1.B2.BondCon2.d = 1.0;
//   L1.Sw1.J0p3_1.e[2] = L1.Sw1.J0p3_1.e[1];
//   L1.Sw1.J0p3_1.e[3] = L1.Sw1.J0p3_1.e[2];
//   L1.Sw1.J0p3_1.f[1] + (L1.Sw1.J0p3_1.f[2] + L1.Sw1.J0p3_1.f[3]) = 0.0;
//   L1.Sw1.J0p3_1.e[1] = L1.Sw1.J0p3_1.BondCon1.e;
//   L1.Sw1.J0p3_1.f[1] = L1.Sw1.J0p3_1.BondCon1.d * L1.Sw1.J0p3_1.BondCon1.f;
//   L1.Sw1.J0p3_1.e[2] = L1.Sw1.J0p3_1.BondCon2.e;
//   L1.Sw1.J0p3_1.f[2] = L1.Sw1.J0p3_1.BondCon2.d * L1.Sw1.J0p3_1.BondCon2.f;
//   L1.Sw1.J0p3_1.e[3] = L1.Sw1.J0p3_1.BondCon3.e;
//   L1.Sw1.J0p3_1.f[3] = L1.Sw1.J0p3_1.BondCon3.d * L1.Sw1.J0p3_1.BondCon3.f;
//   L1.Sw1.B4.BondCon2.e = L1.Sw1.B4.BondCon1.e;
//   L1.Sw1.B4.BondCon2.f = L1.Sw1.B4.BondCon1.f;
//   L1.Sw1.B4.BondCon1.d = -1.0;
//   L1.Sw1.B4.BondCon2.d = 1.0;
//   L1.Sw1.j0p2_1.e2 = L1.Sw1.j0p2_1.e1;
//   L1.Sw1.j0p2_1.f1 + L1.Sw1.j0p2_1.f2 = 0.0;
//   L1.Sw1.j0p2_1.e1 = L1.Sw1.j0p2_1.BondCon1.e;
//   L1.Sw1.j0p2_1.f1 = L1.Sw1.j0p2_1.BondCon1.d * L1.Sw1.j0p2_1.BondCon1.f;
//   L1.Sw1.j0p2_1.e2 = L1.Sw1.j0p2_1.BondCon2.e;
//   L1.Sw1.j0p2_1.f2 = L1.Sw1.j0p2_1.BondCon2.d * L1.Sw1.j0p2_1.BondCon2.f;
//   L1.Sw1.j0p2_2.e2 = L1.Sw1.j0p2_2.e1;
//   L1.Sw1.j0p2_2.f1 + L1.Sw1.j0p2_2.f2 = 0.0;
//   L1.Sw1.j0p2_2.e1 = L1.Sw1.j0p2_2.BondCon1.e;
//   L1.Sw1.j0p2_2.f1 = L1.Sw1.j0p2_2.BondCon1.d * L1.Sw1.j0p2_2.BondCon1.f;
//   L1.Sw1.j0p2_2.e2 = L1.Sw1.j0p2_2.BondCon2.e;
//   L1.Sw1.j0p2_2.f2 = L1.Sw1.j0p2_2.BondCon2.d * L1.Sw1.j0p2_2.BondCon2.f;
//   L1.Sw1.Sw1.open = L1.Sw1.Sw1.BooleanInPort1;
//   0.0 = if L1.Sw1.Sw1.open then L1.Sw1.Sw1.f else L1.Sw1.Sw1.e;
//   L1.Sw1.Sw1.e = L1.Sw1.Sw1.BondCon1.e;
//   L1.Sw1.Sw1.f = L1.Sw1.Sw1.BondCon1.d * L1.Sw1.Sw1.BondCon1.f;
//   L1.Sw1.B3.BondCon2.e = L1.Sw1.B3.BondCon1.e;
//   L1.Sw1.B3.BondCon2.f = L1.Sw1.B3.BondCon1.f;
//   L1.Sw1.B3.BondCon1.d = -1.0;
//   L1.Sw1.B3.BondCon2.d = 1.0;
//   L1.B5.fBondCon1.e = L1.B5.eBondCon1.e;
//   L1.B5.eBondCon1.f = L1.B5.fBondCon1.f;
//   L1.B5.fBondCon1.d = -1.0;
//   L1.B5.eBondCon1.d = 1.0;
//   L1.BG2Heat1.BondCon1.e = L1.BG2Heat1.port_b.T;
//   L1.BG2Heat1.BondCon1.e * L1.BG2Heat1.BondCon1.f = -L1.BG2Heat1.port_b.Q_flow;
//   L1.Sw1.control = true;
//   L1.v = L1.p.v - L1.n.v;
//   L1.i = L1.p.i;
//   Gnd1.B1.fBondCon1.e = Gnd1.B1.eBondCon1.e;
//   Gnd1.B1.eBondCon1.f = Gnd1.B1.fBondCon1.f;
//   Gnd1.B1.eBondCon1.d = -1.0;
//   Gnd1.B1.fBondCon1.d = 1.0;
//   Gnd1.V0.e = Gnd1.V0.e0;
//   Gnd1.V0.e = Gnd1.V0.BondCon1.e;
//   Gnd1.V0.f = (-Gnd1.V0.BondCon1.d) * Gnd1.V0.BondCon1.f;
//   Gnd1.El2BG1.BondCon1.e = Gnd1.El2BG1.p.v;
//   Gnd1.El2BG1.BondCon1.f = Gnd1.El2BG1.p.i;
//   Vout.J1p3_1.f[2] = Vout.J1p3_1.f[1];
//   Vout.J1p3_1.f[3] = Vout.J1p3_1.f[2];
//   Vout.J1p3_1.e[1] + (Vout.J1p3_1.e[2] + Vout.J1p3_1.e[3]) = 0.0;
//   Vout.J1p3_1.e[1] = Vout.J1p3_1.BondCon1.d * Vout.J1p3_1.BondCon1.e;
//   Vout.J1p3_1.f[1] = Vout.J1p3_1.BondCon1.f;
//   Vout.J1p3_1.e[2] = Vout.J1p3_1.BondCon2.d * Vout.J1p3_1.BondCon2.e;
//   Vout.J1p3_1.f[2] = Vout.J1p3_1.BondCon2.f;
//   Vout.J1p3_1.e[3] = Vout.J1p3_1.BondCon3.d * Vout.J1p3_1.BondCon3.e;
//   Vout.J1p3_1.f[3] = Vout.J1p3_1.BondCon3.f;
//   Vout.B1.BondCon2.e = Vout.B1.BondCon1.e;
//   Vout.B1.BondCon2.f = Vout.B1.BondCon1.f;
//   Vout.B1.BondCon1.d = -1.0;
//   Vout.B1.BondCon2.d = 1.0;
//   Vout.B2.BondCon2.e = Vout.B2.BondCon1.e;
//   Vout.B2.BondCon2.f = Vout.B2.BondCon1.f;
//   Vout.B2.BondCon1.d = -1.0;
//   Vout.B2.BondCon2.d = 1.0;
//   Vout.El2BG1.BondCon1.e = Vout.El2BG1.p.v;
//   Vout.El2BG1.BondCon1.f = Vout.El2BG1.p.i;
//   Vout.BG2El1.BondCon1.e = Vout.BG2El1.n.v;
//   Vout.BG2El1.BondCon1.f = -Vout.BG2El1.n.i;
//   Vout.De1.OutPort1 = Vout.De1.e;
//   Vout.De1.f = 0.0;
//   Vout.De1.e = Vout.De1.BondCon1.e;
//   Vout.De1.f = Vout.De1.BondCon1.d * Vout.De1.BondCon1.f;
//   Vout.B3.BondCon2.e = Vout.B3.BondCon1.e;
//   Vout.B3.BondCon2.f = Vout.B3.BondCon1.f;
//   Vout.B3.BondCon1.d = -1.0;
//   Vout.B3.BondCon2.d = 1.0;
//   Vout.v = Vout.p.v - Vout.n.v;
//   Vout.i = Vout.p.i;
//   FixedTemperature1.BG2Heat1.BondCon1.e = FixedTemperature1.BG2Heat1.port_b.T;
//   FixedTemperature1.BG2Heat1.BondCon1.e * FixedTemperature1.BG2Heat1.BondCon1.f = -FixedTemperature1.BG2Heat1.port_b.Q_flow;
//   FixedTemperature1.Tabs.e0 = FixedTemperature1.Tabs.s;
//   FixedTemperature1.Tabs.e = FixedTemperature1.Tabs.e0;
//   FixedTemperature1.Tabs.e = FixedTemperature1.Tabs.BondCon1.e;
//   FixedTemperature1.Tabs.f = (-FixedTemperature1.Tabs.BondCon1.d) * FixedTemperature1.Tabs.BondCon1.f;
//   FixedTemperature1.B1.fBondCon1.e = FixedTemperature1.B1.eBondCon1.e;
//   FixedTemperature1.B1.eBondCon1.f = FixedTemperature1.B1.fBondCon1.f;
//   FixedTemperature1.B1.eBondCon1.d = -1.0;
//   FixedTemperature1.B1.fBondCon1.d = 1.0;
//   FixedTemperature1.Tabs.s = FixedTemperature1.T;
//   C1.J1p3_1.f[2] = C1.J1p3_1.f[1];
//   C1.J1p3_1.f[3] = C1.J1p3_1.f[2];
//   C1.J1p3_1.e[1] + (C1.J1p3_1.e[2] + C1.J1p3_1.e[3]) = 0.0;
//   C1.J1p3_1.e[1] = C1.J1p3_1.BondCon1.d * C1.J1p3_1.BondCon1.e;
//   C1.J1p3_1.f[1] = C1.J1p3_1.BondCon1.f;
//   C1.J1p3_1.e[2] = C1.J1p3_1.BondCon2.d * C1.J1p3_1.BondCon2.e;
//   C1.J1p3_1.f[2] = C1.J1p3_1.BondCon2.f;
//   C1.J1p3_1.e[3] = C1.J1p3_1.BondCon3.d * C1.J1p3_1.BondCon3.e;
//   C1.J1p3_1.f[3] = C1.J1p3_1.BondCon3.f;
//   C1.B1.BondCon2.e = C1.B1.BondCon1.e;
//   C1.B1.BondCon2.f = C1.B1.BondCon1.f;
//   C1.B1.BondCon1.d = -1.0;
//   C1.B1.BondCon2.d = 1.0;
//   C1.B2.BondCon2.e = C1.B2.BondCon1.e;
//   C1.B2.BondCon2.f = C1.B2.BondCon1.f;
//   C1.B2.BondCon1.d = -1.0;
//   C1.B2.BondCon2.d = 1.0;
//   C1.El2BG1.BondCon1.e = C1.El2BG1.p.v;
//   C1.El2BG1.BondCon1.f = C1.El2BG1.p.i;
//   C1.BG2El1.BondCon1.e = C1.BG2El1.n.v;
//   C1.BG2El1.BondCon1.f = -C1.BG2El1.n.i;
//   C1.B6.fBondCon1.e = C1.B6.eBondCon1.e;
//   C1.B6.eBondCon1.f = C1.B6.fBondCon1.f;
//   C1.B6.eBondCon1.d = -1.0;
//   C1.B6.fBondCon1.d = 1.0;
//   C1.T_nom.e = C1.T_nom.e0;
//   C1.T_nom.e = C1.T_nom.BondCon1.e;
//   C1.T_nom.f = (-C1.T_nom.BondCon1.d) * C1.T_nom.BondCon1.f;
//   C1.B3.BondCon2.e = C1.B3.BondCon1.e;
//   C1.B3.BondCon2.f = C1.B3.BondCon1.f;
//   C1.B3.BondCon1.d = -1.0;
//   C1.B3.BondCon2.d = 1.0;
//   C1.C1.Cval = C1.C1.C * ((1.0 + (C1.C1.TC1 * C1.C1.DTemp + C1.C1.TC2 * C1.C1.DTempSq)) * C1.C1.Area);
//   C1.C1.f1 = C1.C1.Cval * der(C1.C1.e1);
//   C1.C1.f2 = 0.0;
//   C1.C1.DTempSq = C1.C1.DTemp ^ 2.0;
//   C1.C1.DTemp = C1.C1.e2 - C1.C1.Tnom;
//   C1.C1.e1 = C1.C1.BondCon1.e;
//   C1.C1.f1 = C1.C1.BondCon1.d * C1.C1.BondCon1.f;
//   C1.C1.e2 = C1.C1.BondCon2.e;
//   C1.C1.f2 = (-C1.C1.BondCon2.d) * C1.C1.BondCon2.f;
//   C1.B4.fBondCon1.e = C1.B4.eBondCon1.e;
//   C1.B4.eBondCon1.f = C1.B4.fBondCon1.f;
//   C1.B4.fBondCon1.d = -1.0;
//   C1.B4.eBondCon1.d = 1.0;
//   C1.Sw1.J1p3_1.f[2] = C1.Sw1.J1p3_1.f[1];
//   C1.Sw1.J1p3_1.f[3] = C1.Sw1.J1p3_1.f[2];
//   C1.Sw1.J1p3_1.e[1] + (C1.Sw1.J1p3_1.e[2] + C1.Sw1.J1p3_1.e[3]) = 0.0;
//   C1.Sw1.J1p3_1.e[1] = C1.Sw1.J1p3_1.BondCon1.d * C1.Sw1.J1p3_1.BondCon1.e;
//   C1.Sw1.J1p3_1.f[1] = C1.Sw1.J1p3_1.BondCon1.f;
//   C1.Sw1.J1p3_1.e[2] = C1.Sw1.J1p3_1.BondCon2.d * C1.Sw1.J1p3_1.BondCon2.e;
//   C1.Sw1.J1p3_1.f[2] = C1.Sw1.J1p3_1.BondCon2.f;
//   C1.Sw1.J1p3_1.e[3] = C1.Sw1.J1p3_1.BondCon3.d * C1.Sw1.J1p3_1.BondCon3.e;
//   C1.Sw1.J1p3_1.f[3] = C1.Sw1.J1p3_1.BondCon3.f;
//   C1.Sw1.B1.BondCon2.e = C1.Sw1.B1.BondCon1.e;
//   C1.Sw1.B1.BondCon2.f = C1.Sw1.B1.BondCon1.f;
//   C1.Sw1.B1.BondCon1.d = -1.0;
//   C1.Sw1.B1.BondCon2.d = 1.0;
//   C1.Sw1.B2.BondCon2.e = C1.Sw1.B2.BondCon1.e;
//   C1.Sw1.B2.BondCon2.f = C1.Sw1.B2.BondCon1.f;
//   C1.Sw1.B2.BondCon1.d = -1.0;
//   C1.Sw1.B2.BondCon2.d = 1.0;
//   C1.Sw1.J0p3_1.e[2] = C1.Sw1.J0p3_1.e[1];
//   C1.Sw1.J0p3_1.e[3] = C1.Sw1.J0p3_1.e[2];
//   C1.Sw1.J0p3_1.f[1] + (C1.Sw1.J0p3_1.f[2] + C1.Sw1.J0p3_1.f[3]) = 0.0;
//   C1.Sw1.J0p3_1.e[1] = C1.Sw1.J0p3_1.BondCon1.e;
//   C1.Sw1.J0p3_1.f[1] = C1.Sw1.J0p3_1.BondCon1.d * C1.Sw1.J0p3_1.BondCon1.f;
//   C1.Sw1.J0p3_1.e[2] = C1.Sw1.J0p3_1.BondCon2.e;
//   C1.Sw1.J0p3_1.f[2] = C1.Sw1.J0p3_1.BondCon2.d * C1.Sw1.J0p3_1.BondCon2.f;
//   C1.Sw1.J0p3_1.e[3] = C1.Sw1.J0p3_1.BondCon3.e;
//   C1.Sw1.J0p3_1.f[3] = C1.Sw1.J0p3_1.BondCon3.d * C1.Sw1.J0p3_1.BondCon3.f;
//   C1.Sw1.B4.BondCon2.e = C1.Sw1.B4.BondCon1.e;
//   C1.Sw1.B4.BondCon2.f = C1.Sw1.B4.BondCon1.f;
//   C1.Sw1.B4.BondCon1.d = -1.0;
//   C1.Sw1.B4.BondCon2.d = 1.0;
//   C1.Sw1.j0p2_1.e2 = C1.Sw1.j0p2_1.e1;
//   C1.Sw1.j0p2_1.f1 + C1.Sw1.j0p2_1.f2 = 0.0;
//   C1.Sw1.j0p2_1.e1 = C1.Sw1.j0p2_1.BondCon1.e;
//   C1.Sw1.j0p2_1.f1 = C1.Sw1.j0p2_1.BondCon1.d * C1.Sw1.j0p2_1.BondCon1.f;
//   C1.Sw1.j0p2_1.e2 = C1.Sw1.j0p2_1.BondCon2.e;
//   C1.Sw1.j0p2_1.f2 = C1.Sw1.j0p2_1.BondCon2.d * C1.Sw1.j0p2_1.BondCon2.f;
//   C1.Sw1.j0p2_2.e2 = C1.Sw1.j0p2_2.e1;
//   C1.Sw1.j0p2_2.f1 + C1.Sw1.j0p2_2.f2 = 0.0;
//   C1.Sw1.j0p2_2.e1 = C1.Sw1.j0p2_2.BondCon1.e;
//   C1.Sw1.j0p2_2.f1 = C1.Sw1.j0p2_2.BondCon1.d * C1.Sw1.j0p2_2.BondCon1.f;
//   C1.Sw1.j0p2_2.e2 = C1.Sw1.j0p2_2.BondCon2.e;
//   C1.Sw1.j0p2_2.f2 = C1.Sw1.j0p2_2.BondCon2.d * C1.Sw1.j0p2_2.BondCon2.f;
//   C1.Sw1.Sw1.open = C1.Sw1.Sw1.BooleanInPort1;
//   0.0 = if C1.Sw1.Sw1.open then C1.Sw1.Sw1.f else C1.Sw1.Sw1.e;
//   C1.Sw1.Sw1.e = C1.Sw1.Sw1.BondCon1.e;
//   C1.Sw1.Sw1.f = C1.Sw1.Sw1.BondCon1.d * C1.Sw1.Sw1.BondCon1.f;
//   C1.Sw1.B3.BondCon2.e = C1.Sw1.B3.BondCon1.e;
//   C1.Sw1.B3.BondCon2.f = C1.Sw1.B3.BondCon1.f;
//   C1.Sw1.B3.BondCon1.d = -1.0;
//   C1.Sw1.B3.BondCon2.d = 1.0;
//   C1.B5.fBondCon1.e = C1.B5.eBondCon1.e;
//   C1.B5.eBondCon1.f = C1.B5.fBondCon1.f;
//   C1.B5.fBondCon1.d = -1.0;
//   C1.B5.eBondCon1.d = 1.0;
//   C1.BG2Heat1.BondCon1.e = C1.BG2Heat1.port_b.T;
//   C1.BG2Heat1.BondCon1.e * C1.BG2Heat1.BondCon1.f = -C1.BG2Heat1.port_b.Q_flow;
//   C1.Sw1.control = true;
//   C1.v = C1.p.v - C1.n.v;
//   C1.i = C1.p.i;
//   R1.J1p3_1.f[2] = R1.J1p3_1.f[1];
//   R1.J1p3_1.f[3] = R1.J1p3_1.f[2];
//   R1.J1p3_1.e[1] + (R1.J1p3_1.e[2] + R1.J1p3_1.e[3]) = 0.0;
//   R1.J1p3_1.e[1] = R1.J1p3_1.BondCon1.d * R1.J1p3_1.BondCon1.e;
//   R1.J1p3_1.f[1] = R1.J1p3_1.BondCon1.f;
//   R1.J1p3_1.e[2] = R1.J1p3_1.BondCon2.d * R1.J1p3_1.BondCon2.e;
//   R1.J1p3_1.f[2] = R1.J1p3_1.BondCon2.f;
//   R1.J1p3_1.e[3] = R1.J1p3_1.BondCon3.d * R1.J1p3_1.BondCon3.e;
//   R1.J1p3_1.f[3] = R1.J1p3_1.BondCon3.f;
//   R1.B1.BondCon2.e = R1.B1.BondCon1.e;
//   R1.B1.BondCon2.f = R1.B1.BondCon1.f;
//   R1.B1.BondCon1.d = -1.0;
//   R1.B1.BondCon2.d = 1.0;
//   R1.B2.BondCon2.e = R1.B2.BondCon1.e;
//   R1.B2.BondCon2.f = R1.B2.BondCon1.f;
//   R1.B2.BondCon1.d = -1.0;
//   R1.B2.BondCon2.d = 1.0;
//   R1.B3.BondCon2.e = R1.B3.BondCon1.e;
//   R1.B3.BondCon2.f = R1.B3.BondCon1.f;
//   R1.B3.BondCon1.d = -1.0;
//   R1.B3.BondCon2.d = 1.0;
//   R1.El2BG1.BondCon1.e = R1.El2BG1.p.v;
//   R1.El2BG1.BondCon1.f = R1.El2BG1.p.i;
//   R1.BG2El1.BondCon1.e = R1.BG2El1.n.v;
//   R1.BG2El1.BondCon1.f = -R1.BG2El1.n.i;
//   R1.B6.fBondCon1.e = R1.B6.eBondCon1.e;
//   R1.B6.eBondCon1.f = R1.B6.fBondCon1.f;
//   R1.B6.eBondCon1.d = -1.0;
//   R1.B6.fBondCon1.d = 1.0;
//   R1.T_nom.e = R1.T_nom.e0;
//   R1.T_nom.e = R1.T_nom.BondCon1.e;
//   R1.T_nom.f = (-R1.T_nom.BondCon1.d) * R1.T_nom.BondCon1.f;
//   R1.R1.Rval = R1.R1.R * (1.0 + (R1.R1.TR1 * R1.R1.DTemp + R1.R1.TR2 * R1.R1.DTempSq)) / R1.R1.Area;
//   R1.R1.e1 = R1.R1.Rval * R1.R1.f1;
//   R1.R1.e1 * R1.R1.f1 = R1.R1.e2 * R1.R1.f2;
//   R1.R1.DTempSq = R1.R1.DTemp ^ 2.0;
//   R1.R1.DTemp = R1.R1.e2 - R1.R1.Tnom;
//   R1.R1.e1 = R1.R1.BondCon1.e;
//   R1.R1.f1 = R1.R1.BondCon1.d * R1.R1.BondCon1.f;
//   R1.R1.e2 = R1.R1.BondCon2.e;
//   R1.R1.f2 = (-R1.R1.BondCon2.d) * R1.R1.BondCon2.f;
//   R1.B4.fBondCon1.e = R1.B4.eBondCon1.e;
//   R1.B4.eBondCon1.f = R1.B4.fBondCon1.f;
//   R1.B4.fBondCon1.d = -1.0;
//   R1.B4.eBondCon1.d = 1.0;
//   R1.Sw1.J1p3_1.f[2] = R1.Sw1.J1p3_1.f[1];
//   R1.Sw1.J1p3_1.f[3] = R1.Sw1.J1p3_1.f[2];
//   R1.Sw1.J1p3_1.e[1] + (R1.Sw1.J1p3_1.e[2] + R1.Sw1.J1p3_1.e[3]) = 0.0;
//   R1.Sw1.J1p3_1.e[1] = R1.Sw1.J1p3_1.BondCon1.d * R1.Sw1.J1p3_1.BondCon1.e;
//   R1.Sw1.J1p3_1.f[1] = R1.Sw1.J1p3_1.BondCon1.f;
//   R1.Sw1.J1p3_1.e[2] = R1.Sw1.J1p3_1.BondCon2.d * R1.Sw1.J1p3_1.BondCon2.e;
//   R1.Sw1.J1p3_1.f[2] = R1.Sw1.J1p3_1.BondCon2.f;
//   R1.Sw1.J1p3_1.e[3] = R1.Sw1.J1p3_1.BondCon3.d * R1.Sw1.J1p3_1.BondCon3.e;
//   R1.Sw1.J1p3_1.f[3] = R1.Sw1.J1p3_1.BondCon3.f;
//   R1.Sw1.B1.BondCon2.e = R1.Sw1.B1.BondCon1.e;
//   R1.Sw1.B1.BondCon2.f = R1.Sw1.B1.BondCon1.f;
//   R1.Sw1.B1.BondCon1.d = -1.0;
//   R1.Sw1.B1.BondCon2.d = 1.0;
//   R1.Sw1.B2.BondCon2.e = R1.Sw1.B2.BondCon1.e;
//   R1.Sw1.B2.BondCon2.f = R1.Sw1.B2.BondCon1.f;
//   R1.Sw1.B2.BondCon1.d = -1.0;
//   R1.Sw1.B2.BondCon2.d = 1.0;
//   R1.Sw1.J0p3_1.e[2] = R1.Sw1.J0p3_1.e[1];
//   R1.Sw1.J0p3_1.e[3] = R1.Sw1.J0p3_1.e[2];
//   R1.Sw1.J0p3_1.f[1] + (R1.Sw1.J0p3_1.f[2] + R1.Sw1.J0p3_1.f[3]) = 0.0;
//   R1.Sw1.J0p3_1.e[1] = R1.Sw1.J0p3_1.BondCon1.e;
//   R1.Sw1.J0p3_1.f[1] = R1.Sw1.J0p3_1.BondCon1.d * R1.Sw1.J0p3_1.BondCon1.f;
//   R1.Sw1.J0p3_1.e[2] = R1.Sw1.J0p3_1.BondCon2.e;
//   R1.Sw1.J0p3_1.f[2] = R1.Sw1.J0p3_1.BondCon2.d * R1.Sw1.J0p3_1.BondCon2.f;
//   R1.Sw1.J0p3_1.e[3] = R1.Sw1.J0p3_1.BondCon3.e;
//   R1.Sw1.J0p3_1.f[3] = R1.Sw1.J0p3_1.BondCon3.d * R1.Sw1.J0p3_1.BondCon3.f;
//   R1.Sw1.B4.BondCon2.e = R1.Sw1.B4.BondCon1.e;
//   R1.Sw1.B4.BondCon2.f = R1.Sw1.B4.BondCon1.f;
//   R1.Sw1.B4.BondCon1.d = -1.0;
//   R1.Sw1.B4.BondCon2.d = 1.0;
//   R1.Sw1.j0p2_1.e2 = R1.Sw1.j0p2_1.e1;
//   R1.Sw1.j0p2_1.f1 + R1.Sw1.j0p2_1.f2 = 0.0;
//   R1.Sw1.j0p2_1.e1 = R1.Sw1.j0p2_1.BondCon1.e;
//   R1.Sw1.j0p2_1.f1 = R1.Sw1.j0p2_1.BondCon1.d * R1.Sw1.j0p2_1.BondCon1.f;
//   R1.Sw1.j0p2_1.e2 = R1.Sw1.j0p2_1.BondCon2.e;
//   R1.Sw1.j0p2_1.f2 = R1.Sw1.j0p2_1.BondCon2.d * R1.Sw1.j0p2_1.BondCon2.f;
//   R1.Sw1.j0p2_2.e2 = R1.Sw1.j0p2_2.e1;
//   R1.Sw1.j0p2_2.f1 + R1.Sw1.j0p2_2.f2 = 0.0;
//   R1.Sw1.j0p2_2.e1 = R1.Sw1.j0p2_2.BondCon1.e;
//   R1.Sw1.j0p2_2.f1 = R1.Sw1.j0p2_2.BondCon1.d * R1.Sw1.j0p2_2.BondCon1.f;
//   R1.Sw1.j0p2_2.e2 = R1.Sw1.j0p2_2.BondCon2.e;
//   R1.Sw1.j0p2_2.f2 = R1.Sw1.j0p2_2.BondCon2.d * R1.Sw1.j0p2_2.BondCon2.f;
//   R1.Sw1.Sw1.open = R1.Sw1.Sw1.BooleanInPort1;
//   0.0 = if R1.Sw1.Sw1.open then R1.Sw1.Sw1.f else R1.Sw1.Sw1.e;
//   R1.Sw1.Sw1.e = R1.Sw1.Sw1.BondCon1.e;
//   R1.Sw1.Sw1.f = R1.Sw1.Sw1.BondCon1.d * R1.Sw1.Sw1.BondCon1.f;
//   R1.Sw1.B3.BondCon2.e = R1.Sw1.B3.BondCon1.e;
//   R1.Sw1.B3.BondCon2.f = R1.Sw1.B3.BondCon1.f;
//   R1.Sw1.B3.BondCon1.d = -1.0;
//   R1.Sw1.B3.BondCon2.d = 1.0;
//   R1.B5.fBondCon1.e = R1.B5.eBondCon1.e;
//   R1.B5.eBondCon1.f = R1.B5.fBondCon1.f;
//   R1.B5.fBondCon1.d = -1.0;
//   R1.B5.eBondCon1.d = 1.0;
//   R1.BG2Heat1.BondCon1.e = R1.BG2Heat1.port_b.T;
//   R1.BG2Heat1.BondCon1.e * R1.BG2Heat1.BondCon1.f = -R1.BG2Heat1.port_b.Q_flow;
//   R1.Sw1.control = true;
//   R1.v = R1.p.v - R1.n.v;
//   R1.i = R1.p.i;
//   D1.RS1.J1p3_1.f[2] = D1.RS1.J1p3_1.f[1];
//   D1.RS1.J1p3_1.f[3] = D1.RS1.J1p3_1.f[2];
//   D1.RS1.J1p3_1.e[1] + (D1.RS1.J1p3_1.e[2] + D1.RS1.J1p3_1.e[3]) = 0.0;
//   D1.RS1.J1p3_1.e[1] = D1.RS1.J1p3_1.BondCon1.d * D1.RS1.J1p3_1.BondCon1.e;
//   D1.RS1.J1p3_1.f[1] = D1.RS1.J1p3_1.BondCon1.f;
//   D1.RS1.J1p3_1.e[2] = D1.RS1.J1p3_1.BondCon2.d * D1.RS1.J1p3_1.BondCon2.e;
//   D1.RS1.J1p3_1.f[2] = D1.RS1.J1p3_1.BondCon2.f;
//   D1.RS1.J1p3_1.e[3] = D1.RS1.J1p3_1.BondCon3.d * D1.RS1.J1p3_1.BondCon3.e;
//   D1.RS1.J1p3_1.f[3] = D1.RS1.J1p3_1.BondCon3.f;
//   D1.RS1.B1.BondCon2.e = D1.RS1.B1.BondCon1.e;
//   D1.RS1.B1.BondCon2.f = D1.RS1.B1.BondCon1.f;
//   D1.RS1.B1.BondCon1.d = -1.0;
//   D1.RS1.B1.BondCon2.d = 1.0;
//   D1.RS1.B2.BondCon2.e = D1.RS1.B2.BondCon1.e;
//   D1.RS1.B2.BondCon2.f = D1.RS1.B2.BondCon1.f;
//   D1.RS1.B2.BondCon1.d = -1.0;
//   D1.RS1.B2.BondCon2.d = 1.0;
//   D1.RS1.B3.BondCon2.e = D1.RS1.B3.BondCon1.e;
//   D1.RS1.B3.BondCon2.f = D1.RS1.B3.BondCon1.f;
//   D1.RS1.B3.BondCon1.d = -1.0;
//   D1.RS1.B3.BondCon2.d = 1.0;
//   D1.RS1.El2BG1.BondCon1.e = D1.RS1.El2BG1.p.v;
//   D1.RS1.El2BG1.BondCon1.f = D1.RS1.El2BG1.p.i;
//   D1.RS1.BG2El1.BondCon1.e = D1.RS1.BG2El1.n.v;
//   D1.RS1.BG2El1.BondCon1.f = -D1.RS1.BG2El1.n.i;
//   D1.RS1.B6.fBondCon1.e = D1.RS1.B6.eBondCon1.e;
//   D1.RS1.B6.eBondCon1.f = D1.RS1.B6.fBondCon1.f;
//   D1.RS1.B6.eBondCon1.d = -1.0;
//   D1.RS1.B6.fBondCon1.d = 1.0;
//   D1.RS1.T_nom.e = D1.RS1.T_nom.e0;
//   D1.RS1.T_nom.e = D1.RS1.T_nom.BondCon1.e;
//   D1.RS1.T_nom.f = (-D1.RS1.T_nom.BondCon1.d) * D1.RS1.T_nom.BondCon1.f;
//   D1.RS1.R1.Rval = D1.RS1.R1.R * (1.0 + (D1.RS1.R1.TR1 * D1.RS1.R1.DTemp + D1.RS1.R1.TR2 * D1.RS1.R1.DTempSq)) / D1.RS1.R1.Area;
//   D1.RS1.R1.e1 = D1.RS1.R1.Rval * D1.RS1.R1.f1;
//   D1.RS1.R1.e1 * D1.RS1.R1.f1 = D1.RS1.R1.e2 * D1.RS1.R1.f2;
//   D1.RS1.R1.DTempSq = D1.RS1.R1.DTemp ^ 2.0;
//   D1.RS1.R1.DTemp = D1.RS1.R1.e2 - D1.RS1.R1.Tnom;
//   D1.RS1.R1.e1 = D1.RS1.R1.BondCon1.e;
//   D1.RS1.R1.f1 = D1.RS1.R1.BondCon1.d * D1.RS1.R1.BondCon1.f;
//   D1.RS1.R1.e2 = D1.RS1.R1.BondCon2.e;
//   D1.RS1.R1.f2 = (-D1.RS1.R1.BondCon2.d) * D1.RS1.R1.BondCon2.f;
//   D1.RS1.B4.fBondCon1.e = D1.RS1.B4.eBondCon1.e;
//   D1.RS1.B4.eBondCon1.f = D1.RS1.B4.fBondCon1.f;
//   D1.RS1.B4.fBondCon1.d = -1.0;
//   D1.RS1.B4.eBondCon1.d = 1.0;
//   D1.RS1.Sw1.J1p3_1.f[2] = D1.RS1.Sw1.J1p3_1.f[1];
//   D1.RS1.Sw1.J1p3_1.f[3] = D1.RS1.Sw1.J1p3_1.f[2];
//   D1.RS1.Sw1.J1p3_1.e[1] + (D1.RS1.Sw1.J1p3_1.e[2] + D1.RS1.Sw1.J1p3_1.e[3]) = 0.0;
//   D1.RS1.Sw1.J1p3_1.e[1] = D1.RS1.Sw1.J1p3_1.BondCon1.d * D1.RS1.Sw1.J1p3_1.BondCon1.e;
//   D1.RS1.Sw1.J1p3_1.f[1] = D1.RS1.Sw1.J1p3_1.BondCon1.f;
//   D1.RS1.Sw1.J1p3_1.e[2] = D1.RS1.Sw1.J1p3_1.BondCon2.d * D1.RS1.Sw1.J1p3_1.BondCon2.e;
//   D1.RS1.Sw1.J1p3_1.f[2] = D1.RS1.Sw1.J1p3_1.BondCon2.f;
//   D1.RS1.Sw1.J1p3_1.e[3] = D1.RS1.Sw1.J1p3_1.BondCon3.d * D1.RS1.Sw1.J1p3_1.BondCon3.e;
//   D1.RS1.Sw1.J1p3_1.f[3] = D1.RS1.Sw1.J1p3_1.BondCon3.f;
//   D1.RS1.Sw1.B1.BondCon2.e = D1.RS1.Sw1.B1.BondCon1.e;
//   D1.RS1.Sw1.B1.BondCon2.f = D1.RS1.Sw1.B1.BondCon1.f;
//   D1.RS1.Sw1.B1.BondCon1.d = -1.0;
//   D1.RS1.Sw1.B1.BondCon2.d = 1.0;
//   D1.RS1.Sw1.B2.BondCon2.e = D1.RS1.Sw1.B2.BondCon1.e;
//   D1.RS1.Sw1.B2.BondCon2.f = D1.RS1.Sw1.B2.BondCon1.f;
//   D1.RS1.Sw1.B2.BondCon1.d = -1.0;
//   D1.RS1.Sw1.B2.BondCon2.d = 1.0;
//   D1.RS1.Sw1.J0p3_1.e[2] = D1.RS1.Sw1.J0p3_1.e[1];
//   D1.RS1.Sw1.J0p3_1.e[3] = D1.RS1.Sw1.J0p3_1.e[2];
//   D1.RS1.Sw1.J0p3_1.f[1] + (D1.RS1.Sw1.J0p3_1.f[2] + D1.RS1.Sw1.J0p3_1.f[3]) = 0.0;
//   D1.RS1.Sw1.J0p3_1.e[1] = D1.RS1.Sw1.J0p3_1.BondCon1.e;
//   D1.RS1.Sw1.J0p3_1.f[1] = D1.RS1.Sw1.J0p3_1.BondCon1.d * D1.RS1.Sw1.J0p3_1.BondCon1.f;
//   D1.RS1.Sw1.J0p3_1.e[2] = D1.RS1.Sw1.J0p3_1.BondCon2.e;
//   D1.RS1.Sw1.J0p3_1.f[2] = D1.RS1.Sw1.J0p3_1.BondCon2.d * D1.RS1.Sw1.J0p3_1.BondCon2.f;
//   D1.RS1.Sw1.J0p3_1.e[3] = D1.RS1.Sw1.J0p3_1.BondCon3.e;
//   D1.RS1.Sw1.J0p3_1.f[3] = D1.RS1.Sw1.J0p3_1.BondCon3.d * D1.RS1.Sw1.J0p3_1.BondCon3.f;
//   D1.RS1.Sw1.B4.BondCon2.e = D1.RS1.Sw1.B4.BondCon1.e;
//   D1.RS1.Sw1.B4.BondCon2.f = D1.RS1.Sw1.B4.BondCon1.f;
//   D1.RS1.Sw1.B4.BondCon1.d = -1.0;
//   D1.RS1.Sw1.B4.BondCon2.d = 1.0;
//   D1.RS1.Sw1.j0p2_1.e2 = D1.RS1.Sw1.j0p2_1.e1;
//   D1.RS1.Sw1.j0p2_1.f1 + D1.RS1.Sw1.j0p2_1.f2 = 0.0;
//   D1.RS1.Sw1.j0p2_1.e1 = D1.RS1.Sw1.j0p2_1.BondCon1.e;
//   D1.RS1.Sw1.j0p2_1.f1 = D1.RS1.Sw1.j0p2_1.BondCon1.d * D1.RS1.Sw1.j0p2_1.BondCon1.f;
//   D1.RS1.Sw1.j0p2_1.e2 = D1.RS1.Sw1.j0p2_1.BondCon2.e;
//   D1.RS1.Sw1.j0p2_1.f2 = D1.RS1.Sw1.j0p2_1.BondCon2.d * D1.RS1.Sw1.j0p2_1.BondCon2.f;
//   D1.RS1.Sw1.j0p2_2.e2 = D1.RS1.Sw1.j0p2_2.e1;
//   D1.RS1.Sw1.j0p2_2.f1 + D1.RS1.Sw1.j0p2_2.f2 = 0.0;
//   D1.RS1.Sw1.j0p2_2.e1 = D1.RS1.Sw1.j0p2_2.BondCon1.e;
//   D1.RS1.Sw1.j0p2_2.f1 = D1.RS1.Sw1.j0p2_2.BondCon1.d * D1.RS1.Sw1.j0p2_2.BondCon1.f;
//   D1.RS1.Sw1.j0p2_2.e2 = D1.RS1.Sw1.j0p2_2.BondCon2.e;
//   D1.RS1.Sw1.j0p2_2.f2 = D1.RS1.Sw1.j0p2_2.BondCon2.d * D1.RS1.Sw1.j0p2_2.BondCon2.f;
//   D1.RS1.Sw1.Sw1.open = D1.RS1.Sw1.Sw1.BooleanInPort1;
//   0.0 = if D1.RS1.Sw1.Sw1.open then D1.RS1.Sw1.Sw1.f else D1.RS1.Sw1.Sw1.e;
//   D1.RS1.Sw1.Sw1.e = D1.RS1.Sw1.Sw1.BondCon1.e;
//   D1.RS1.Sw1.Sw1.f = D1.RS1.Sw1.Sw1.BondCon1.d * D1.RS1.Sw1.Sw1.BondCon1.f;
//   D1.RS1.Sw1.B3.BondCon2.e = D1.RS1.Sw1.B3.BondCon1.e;
//   D1.RS1.Sw1.B3.BondCon2.f = D1.RS1.Sw1.B3.BondCon1.f;
//   D1.RS1.Sw1.B3.BondCon1.d = -1.0;
//   D1.RS1.Sw1.B3.BondCon2.d = 1.0;
//   D1.RS1.B5.fBondCon1.e = D1.RS1.B5.eBondCon1.e;
//   D1.RS1.B5.eBondCon1.f = D1.RS1.B5.fBondCon1.f;
//   D1.RS1.B5.fBondCon1.d = -1.0;
//   D1.RS1.B5.eBondCon1.d = 1.0;
//   D1.RS1.BG2Heat1.BondCon1.e = D1.RS1.BG2Heat1.port_b.T;
//   D1.RS1.BG2Heat1.BondCon1.e * D1.RS1.BG2Heat1.BondCon1.f = -D1.RS1.BG2Heat1.port_b.Q_flow;
//   D1.RS1.Sw1.control = true;
//   D1.RS1.v = D1.RS1.p.v - D1.RS1.n.v;
//   D1.RS1.i = D1.RS1.p.i;
//   D1.Id.El2BG1.BondCon1.e = D1.Id.El2BG1.p.v;
//   D1.Id.El2BG1.BondCon1.f = D1.Id.El2BG1.p.i;
//   D1.Id.BG2El1.BondCon1.e = D1.Id.BG2El1.n.v;
//   D1.Id.BG2El1.BondCon1.f = -D1.Id.BG2El1.n.i;
//   D1.Id.J1p3_1.f[2] = D1.Id.J1p3_1.f[1];
//   D1.Id.J1p3_1.f[3] = D1.Id.J1p3_1.f[2];
//   D1.Id.J1p3_1.e[1] + (D1.Id.J1p3_1.e[2] + D1.Id.J1p3_1.e[3]) = 0.0;
//   D1.Id.J1p3_1.e[1] = D1.Id.J1p3_1.BondCon1.d * D1.Id.J1p3_1.BondCon1.e;
//   D1.Id.J1p3_1.f[1] = D1.Id.J1p3_1.BondCon1.f;
//   D1.Id.J1p3_1.e[2] = D1.Id.J1p3_1.BondCon2.d * D1.Id.J1p3_1.BondCon2.e;
//   D1.Id.J1p3_1.f[2] = D1.Id.J1p3_1.BondCon2.f;
//   D1.Id.J1p3_1.e[3] = D1.Id.J1p3_1.BondCon3.d * D1.Id.J1p3_1.BondCon3.e;
//   D1.Id.J1p3_1.f[3] = D1.Id.J1p3_1.BondCon3.f;
//   D1.Id.B1.BondCon2.e = D1.Id.B1.BondCon1.e;
//   D1.Id.B1.BondCon2.f = D1.Id.B1.BondCon1.f;
//   D1.Id.B1.BondCon1.d = -1.0;
//   D1.Id.B1.BondCon2.d = 1.0;
//   D1.Id.B2.BondCon2.e = D1.Id.B2.BondCon1.e;
//   D1.Id.B2.BondCon2.f = D1.Id.B2.BondCon1.f;
//   D1.Id.B2.BondCon1.d = -1.0;
//   D1.Id.B2.BondCon2.d = 1.0;
//   D1.Id.BG2Heat1.BondCon1.e = D1.Id.BG2Heat1.port_b.T;
//   D1.Id.BG2Heat1.BondCon1.e * D1.Id.BG2Heat1.BondCon1.f = -D1.Id.BG2Heat1.port_b.Q_flow;
//   D1.Id.B4.fBondCon1.e = D1.Id.B4.eBondCon1.e;
//   D1.Id.B4.eBondCon1.f = D1.Id.B4.fBondCon1.f;
//   D1.Id.B4.eBondCon1.d = -1.0;
//   D1.Id.B4.fBondCon1.d = 1.0;
//   D1.Id.B3.fBondCon1.e = D1.Id.B3.eBondCon1.e;
//   D1.Id.B3.eBondCon1.f = D1.Id.B3.fBondCon1.f;
//   D1.Id.B3.fBondCon1.d = -1.0;
//   D1.Id.B3.eBondCon1.d = 1.0;
//   D1.Id.I1.f0 = D1.Id.I1.s;
//   D1.Id.I1.f2 = D1.Id.I1.f0;
//   D1.Id.I1.e1 * D1.Id.I1.f1 = D1.Id.I1.e2 * D1.Id.I1.f2;
//   D1.Id.I1.e1 = D1.Id.I1.BondCon1.e;
//   D1.Id.I1.f1 = D1.Id.I1.BondCon1.d * D1.Id.I1.BondCon1.f;
//   D1.Id.I1.e2 = D1.Id.I1.BondCon2.e;
//   D1.Id.I1.f2 = (-D1.Id.I1.BondCon2.d) * D1.Id.I1.BondCon2.f;
//   D1.Id.v = D1.Id.p.v - D1.Id.n.v;
//   D1.Id.i = D1.Id.p.i;
//   D1.vd.J1p3_1.f[2] = D1.vd.J1p3_1.f[1];
//   D1.vd.J1p3_1.f[3] = D1.vd.J1p3_1.f[2];
//   D1.vd.J1p3_1.e[1] + (D1.vd.J1p3_1.e[2] + D1.vd.J1p3_1.e[3]) = 0.0;
//   D1.vd.J1p3_1.e[1] = D1.vd.J1p3_1.BondCon1.d * D1.vd.J1p3_1.BondCon1.e;
//   D1.vd.J1p3_1.f[1] = D1.vd.J1p3_1.BondCon1.f;
//   D1.vd.J1p3_1.e[2] = D1.vd.J1p3_1.BondCon2.d * D1.vd.J1p3_1.BondCon2.e;
//   D1.vd.J1p3_1.f[2] = D1.vd.J1p3_1.BondCon2.f;
//   D1.vd.J1p3_1.e[3] = D1.vd.J1p3_1.BondCon3.d * D1.vd.J1p3_1.BondCon3.e;
//   D1.vd.J1p3_1.f[3] = D1.vd.J1p3_1.BondCon3.f;
//   D1.vd.B1.BondCon2.e = D1.vd.B1.BondCon1.e;
//   D1.vd.B1.BondCon2.f = D1.vd.B1.BondCon1.f;
//   D1.vd.B1.BondCon1.d = -1.0;
//   D1.vd.B1.BondCon2.d = 1.0;
//   D1.vd.B2.BondCon2.e = D1.vd.B2.BondCon1.e;
//   D1.vd.B2.BondCon2.f = D1.vd.B2.BondCon1.f;
//   D1.vd.B2.BondCon1.d = -1.0;
//   D1.vd.B2.BondCon2.d = 1.0;
//   D1.vd.El2BG1.BondCon1.e = D1.vd.El2BG1.p.v;
//   D1.vd.El2BG1.BondCon1.f = D1.vd.El2BG1.p.i;
//   D1.vd.BG2El1.BondCon1.e = D1.vd.BG2El1.n.v;
//   D1.vd.BG2El1.BondCon1.f = -D1.vd.BG2El1.n.i;
//   D1.vd.De1.OutPort1 = D1.vd.De1.e;
//   D1.vd.De1.f = 0.0;
//   D1.vd.De1.e = D1.vd.De1.BondCon1.e;
//   D1.vd.De1.f = D1.vd.De1.BondCon1.d * D1.vd.De1.BondCon1.f;
//   D1.vd.B3.BondCon2.e = D1.vd.B3.BondCon1.e;
//   D1.vd.B3.BondCon2.f = D1.vd.B3.BondCon1.f;
//   D1.vd.B3.BondCon1.d = -1.0;
//   D1.vd.B3.BondCon2.d = 1.0;
//   D1.vd.v = D1.vd.p.v - D1.vd.n.v;
//   D1.vd.i = D1.vd.p.i;
//   D1.Tdev1.T = D1.Tdev1.port.T;
//   D1.Tdev1.port.Q_flow = 0.0;
//   D1.Sw1.B1.BondCon2.e = D1.Sw1.B1.BondCon1.e;
//   D1.Sw1.B1.BondCon2.f = D1.Sw1.B1.BondCon1.f;
//   D1.Sw1.B1.BondCon1.d = -1.0;
//   D1.Sw1.B1.BondCon2.d = 1.0;
//   D1.Sw1.B2.BondCon2.e = D1.Sw1.B2.BondCon1.e;
//   D1.Sw1.B2.BondCon2.f = D1.Sw1.B2.BondCon1.f;
//   D1.Sw1.B2.BondCon1.d = -1.0;
//   D1.Sw1.B2.BondCon2.d = 1.0;
//   D1.Sw1.B3.BondCon2.e = D1.Sw1.B3.BondCon1.e;
//   D1.Sw1.B3.BondCon2.f = D1.Sw1.B3.BondCon1.f;
//   D1.Sw1.B3.BondCon1.d = -1.0;
//   D1.Sw1.B3.BondCon2.d = 1.0;
//   D1.Sw1.Heat2BG1.BondCon1.e = D1.Sw1.Heat2BG1.port_a.T;
//   D1.Sw1.Heat2BG1.BondCon1.e * D1.Sw1.Heat2BG1.BondCon1.f = D1.Sw1.Heat2BG1.port_a.Q_flow;
//   D1.Sw1.BG2Heat1.BondCon1.e = D1.Sw1.BG2Heat1.port_b.T;
//   D1.Sw1.BG2Heat1.BondCon1.e * D1.Sw1.BG2Heat1.BondCon1.f = -D1.Sw1.BG2Heat1.port_b.Q_flow;
//   D1.Sw1.BG2Heat2.BondCon1.e = D1.Sw1.BG2Heat2.port_b.T;
//   D1.Sw1.BG2Heat2.BondCon1.e * D1.Sw1.BG2Heat2.BondCon1.f = -D1.Sw1.BG2Heat2.port_b.Q_flow;
//   D1.Sw1.Sw1.J1p3_1.f[2] = D1.Sw1.Sw1.J1p3_1.f[1];
//   D1.Sw1.Sw1.J1p3_1.f[3] = D1.Sw1.Sw1.J1p3_1.f[2];
//   D1.Sw1.Sw1.J1p3_1.e[1] + (D1.Sw1.Sw1.J1p3_1.e[2] + D1.Sw1.Sw1.J1p3_1.e[3]) = 0.0;
//   D1.Sw1.Sw1.J1p3_1.e[1] = D1.Sw1.Sw1.J1p3_1.BondCon1.d * D1.Sw1.Sw1.J1p3_1.BondCon1.e;
//   D1.Sw1.Sw1.J1p3_1.f[1] = D1.Sw1.Sw1.J1p3_1.BondCon1.f;
//   D1.Sw1.Sw1.J1p3_1.e[2] = D1.Sw1.Sw1.J1p3_1.BondCon2.d * D1.Sw1.Sw1.J1p3_1.BondCon2.e;
//   D1.Sw1.Sw1.J1p3_1.f[2] = D1.Sw1.Sw1.J1p3_1.BondCon2.f;
//   D1.Sw1.Sw1.J1p3_1.e[3] = D1.Sw1.Sw1.J1p3_1.BondCon3.d * D1.Sw1.Sw1.J1p3_1.BondCon3.e;
//   D1.Sw1.Sw1.J1p3_1.f[3] = D1.Sw1.Sw1.J1p3_1.BondCon3.f;
//   D1.Sw1.Sw1.B1.BondCon2.e = D1.Sw1.Sw1.B1.BondCon1.e;
//   D1.Sw1.Sw1.B1.BondCon2.f = D1.Sw1.Sw1.B1.BondCon1.f;
//   D1.Sw1.Sw1.B1.BondCon1.d = -1.0;
//   D1.Sw1.Sw1.B1.BondCon2.d = 1.0;
//   D1.Sw1.Sw1.B2.BondCon2.e = D1.Sw1.Sw1.B2.BondCon1.e;
//   D1.Sw1.Sw1.B2.BondCon2.f = D1.Sw1.Sw1.B2.BondCon1.f;
//   D1.Sw1.Sw1.B2.BondCon1.d = -1.0;
//   D1.Sw1.Sw1.B2.BondCon2.d = 1.0;
//   D1.Sw1.Sw1.J0p3_1.e[2] = D1.Sw1.Sw1.J0p3_1.e[1];
//   D1.Sw1.Sw1.J0p3_1.e[3] = D1.Sw1.Sw1.J0p3_1.e[2];
//   D1.Sw1.Sw1.J0p3_1.f[1] + (D1.Sw1.Sw1.J0p3_1.f[2] + D1.Sw1.Sw1.J0p3_1.f[3]) = 0.0;
//   D1.Sw1.Sw1.J0p3_1.e[1] = D1.Sw1.Sw1.J0p3_1.BondCon1.e;
//   D1.Sw1.Sw1.J0p3_1.f[1] = D1.Sw1.Sw1.J0p3_1.BondCon1.d * D1.Sw1.Sw1.J0p3_1.BondCon1.f;
//   D1.Sw1.Sw1.J0p3_1.e[2] = D1.Sw1.Sw1.J0p3_1.BondCon2.e;
//   D1.Sw1.Sw1.J0p3_1.f[2] = D1.Sw1.Sw1.J0p3_1.BondCon2.d * D1.Sw1.Sw1.J0p3_1.BondCon2.f;
//   D1.Sw1.Sw1.J0p3_1.e[3] = D1.Sw1.Sw1.J0p3_1.BondCon3.e;
//   D1.Sw1.Sw1.J0p3_1.f[3] = D1.Sw1.Sw1.J0p3_1.BondCon3.d * D1.Sw1.Sw1.J0p3_1.BondCon3.f;
//   D1.Sw1.Sw1.B4.BondCon2.e = D1.Sw1.Sw1.B4.BondCon1.e;
//   D1.Sw1.Sw1.B4.BondCon2.f = D1.Sw1.Sw1.B4.BondCon1.f;
//   D1.Sw1.Sw1.B4.BondCon1.d = -1.0;
//   D1.Sw1.Sw1.B4.BondCon2.d = 1.0;
//   D1.Sw1.Sw1.j0p2_1.e2 = D1.Sw1.Sw1.j0p2_1.e1;
//   D1.Sw1.Sw1.j0p2_1.f1 + D1.Sw1.Sw1.j0p2_1.f2 = 0.0;
//   D1.Sw1.Sw1.j0p2_1.e1 = D1.Sw1.Sw1.j0p2_1.BondCon1.e;
//   D1.Sw1.Sw1.j0p2_1.f1 = D1.Sw1.Sw1.j0p2_1.BondCon1.d * D1.Sw1.Sw1.j0p2_1.BondCon1.f;
//   D1.Sw1.Sw1.j0p2_1.e2 = D1.Sw1.Sw1.j0p2_1.BondCon2.e;
//   D1.Sw1.Sw1.j0p2_1.f2 = D1.Sw1.Sw1.j0p2_1.BondCon2.d * D1.Sw1.Sw1.j0p2_1.BondCon2.f;
//   D1.Sw1.Sw1.j0p2_2.e2 = D1.Sw1.Sw1.j0p2_2.e1;
//   D1.Sw1.Sw1.j0p2_2.f1 + D1.Sw1.Sw1.j0p2_2.f2 = 0.0;
//   D1.Sw1.Sw1.j0p2_2.e1 = D1.Sw1.Sw1.j0p2_2.BondCon1.e;
//   D1.Sw1.Sw1.j0p2_2.f1 = D1.Sw1.Sw1.j0p2_2.BondCon1.d * D1.Sw1.Sw1.j0p2_2.BondCon1.f;
//   D1.Sw1.Sw1.j0p2_2.e2 = D1.Sw1.Sw1.j0p2_2.BondCon2.e;
//   D1.Sw1.Sw1.j0p2_2.f2 = D1.Sw1.Sw1.j0p2_2.BondCon2.d * D1.Sw1.Sw1.j0p2_2.BondCon2.f;
//   D1.Sw1.Sw1.Sw1.open = D1.Sw1.Sw1.Sw1.BooleanInPort1;
//   0.0 = if D1.Sw1.Sw1.Sw1.open then D1.Sw1.Sw1.Sw1.f else D1.Sw1.Sw1.Sw1.e;
//   D1.Sw1.Sw1.Sw1.e = D1.Sw1.Sw1.Sw1.BondCon1.e;
//   D1.Sw1.Sw1.Sw1.f = D1.Sw1.Sw1.Sw1.BondCon1.d * D1.Sw1.Sw1.Sw1.BondCon1.f;
//   D1.Sw1.Sw1.B3.BondCon2.e = D1.Sw1.Sw1.B3.BondCon1.e;
//   D1.Sw1.Sw1.B3.BondCon2.f = D1.Sw1.Sw1.B3.BondCon1.f;
//   D1.Sw1.Sw1.B3.BondCon1.d = -1.0;
//   D1.Sw1.Sw1.B3.BondCon2.d = 1.0;
//   D1.T_nom.BG2Heat1.BondCon1.e = D1.T_nom.BG2Heat1.port_b.T;
//   D1.T_nom.BG2Heat1.BondCon1.e * D1.T_nom.BG2Heat1.BondCon1.f = -D1.T_nom.BG2Heat1.port_b.Q_flow;
//   D1.T_nom.Tabs.e0 = D1.T_nom.Tabs.s;
//   D1.T_nom.Tabs.e = D1.T_nom.Tabs.e0;
//   D1.T_nom.Tabs.e = D1.T_nom.Tabs.BondCon1.e;
//   D1.T_nom.Tabs.f = (-D1.T_nom.Tabs.BondCon1.d) * D1.T_nom.Tabs.BondCon1.f;
//   D1.T_nom.B1.fBondCon1.e = D1.T_nom.B1.eBondCon1.e;
//   D1.T_nom.B1.eBondCon1.f = D1.T_nom.B1.fBondCon1.f;
//   D1.T_nom.B1.eBondCon1.d = -1.0;
//   D1.T_nom.B1.fBondCon1.d = 1.0;
//   D1.T_nom.Tabs.s = D1.T_nom.T;
//   D1.ID0.Vt = 8.61727503842867e-05 * D1.ID0.Tdev;
//   D1.ID0.IDstar = D1.ID0.u;
//   D1.ID0.IK = if D1.ID0.v > -5.0 * (D1.ID0.N * D1.ID0.Vt) then D1.ID0.IKF else if D1.ID0.v > -10.0 * (D1.ID0.N * D1.ID0.Vt) then 0.2 * ((D1.ID0.IKF - D1.ID0.IKR) * (D1.ID0.v * 1.0 / D1.ID0.Vt / D1.ID0.N)) + 2.0 * D1.ID0.IKF - D1.ID0.IKR else D1.ID0.IKR;
//   D1.ID0.ID = D1.ID0.IDstar;
//   D1.ID0.y = D1.ID0.ID;
//   D1.Dd.VCV1.Gain1.y = D1.Dd.VCV1.Gain1.k * D1.Dd.VCV1.Gain1.u;
//   D1.Dd.VCV1.De1.OutPort1 = D1.Dd.VCV1.De1.e;
//   D1.Dd.VCV1.De1.f = 0.0;
//   D1.Dd.VCV1.De1.e = D1.Dd.VCV1.De1.BondCon1.e;
//   D1.Dd.VCV1.De1.f = D1.Dd.VCV1.De1.BondCon1.d * D1.Dd.VCV1.De1.BondCon1.f;
//   D1.Dd.VCV1.B3.fBondCon1.e = D1.Dd.VCV1.B3.eBondCon1.e;
//   D1.Dd.VCV1.B3.eBondCon1.f = D1.Dd.VCV1.B3.fBondCon1.f;
//   D1.Dd.VCV1.B3.eBondCon1.d = -1.0;
//   D1.Dd.VCV1.B3.fBondCon1.d = 1.0;
//   D1.Dd.VCV1.J1p3_1.f[2] = D1.Dd.VCV1.J1p3_1.f[1];
//   D1.Dd.VCV1.J1p3_1.f[3] = D1.Dd.VCV1.J1p3_1.f[2];
//   D1.Dd.VCV1.J1p3_1.e[1] + (D1.Dd.VCV1.J1p3_1.e[2] + D1.Dd.VCV1.J1p3_1.e[3]) = 0.0;
//   D1.Dd.VCV1.J1p3_1.e[1] = D1.Dd.VCV1.J1p3_1.BondCon1.d * D1.Dd.VCV1.J1p3_1.BondCon1.e;
//   D1.Dd.VCV1.J1p3_1.f[1] = D1.Dd.VCV1.J1p3_1.BondCon1.f;
//   D1.Dd.VCV1.J1p3_1.e[2] = D1.Dd.VCV1.J1p3_1.BondCon2.d * D1.Dd.VCV1.J1p3_1.BondCon2.e;
//   D1.Dd.VCV1.J1p3_1.f[2] = D1.Dd.VCV1.J1p3_1.BondCon2.f;
//   D1.Dd.VCV1.J1p3_1.e[3] = D1.Dd.VCV1.J1p3_1.BondCon3.d * D1.Dd.VCV1.J1p3_1.BondCon3.e;
//   D1.Dd.VCV1.J1p3_1.f[3] = D1.Dd.VCV1.J1p3_1.BondCon3.f;
//   D1.Dd.VCV1.mSe1.e0 = D1.Dd.VCV1.mSe1.s;
//   D1.Dd.VCV1.mSe1.e = D1.Dd.VCV1.mSe1.e0;
//   D1.Dd.VCV1.mSe1.e = D1.Dd.VCV1.mSe1.BondCon1.e;
//   D1.Dd.VCV1.mSe1.f = (-D1.Dd.VCV1.mSe1.BondCon1.d) * D1.Dd.VCV1.mSe1.BondCon1.f;
//   D1.Dd.VCV1.B4.fBondCon1.e = D1.Dd.VCV1.B4.eBondCon1.e;
//   D1.Dd.VCV1.B4.eBondCon1.f = D1.Dd.VCV1.B4.fBondCon1.f;
//   D1.Dd.VCV1.B4.eBondCon1.d = -1.0;
//   D1.Dd.VCV1.B4.fBondCon1.d = 1.0;
//   D1.Dd.VCV1.J1p3_2.f[2] = D1.Dd.VCV1.J1p3_2.f[1];
//   D1.Dd.VCV1.J1p3_2.f[3] = D1.Dd.VCV1.J1p3_2.f[2];
//   D1.Dd.VCV1.J1p3_2.e[1] + (D1.Dd.VCV1.J1p3_2.e[2] + D1.Dd.VCV1.J1p3_2.e[3]) = 0.0;
//   D1.Dd.VCV1.J1p3_2.e[1] = D1.Dd.VCV1.J1p3_2.BondCon1.d * D1.Dd.VCV1.J1p3_2.BondCon1.e;
//   D1.Dd.VCV1.J1p3_2.f[1] = D1.Dd.VCV1.J1p3_2.BondCon1.f;
//   D1.Dd.VCV1.J1p3_2.e[2] = D1.Dd.VCV1.J1p3_2.BondCon2.d * D1.Dd.VCV1.J1p3_2.BondCon2.e;
//   D1.Dd.VCV1.J1p3_2.f[2] = D1.Dd.VCV1.J1p3_2.BondCon2.f;
//   D1.Dd.VCV1.J1p3_2.e[3] = D1.Dd.VCV1.J1p3_2.BondCon3.d * D1.Dd.VCV1.J1p3_2.BondCon3.e;
//   D1.Dd.VCV1.J1p3_2.f[3] = D1.Dd.VCV1.J1p3_2.BondCon3.f;
//   D1.Dd.VCV1.El2BG1.BondCon1.e = D1.Dd.VCV1.El2BG1.p.v;
//   D1.Dd.VCV1.El2BG1.BondCon1.f = D1.Dd.VCV1.El2BG1.p.i;
//   D1.Dd.VCV1.El2BG2.BondCon1.e = D1.Dd.VCV1.El2BG2.p.v;
//   D1.Dd.VCV1.El2BG2.BondCon1.f = D1.Dd.VCV1.El2BG2.p.i;
//   D1.Dd.VCV1.BG2El1.BondCon1.e = D1.Dd.VCV1.BG2El1.n.v;
//   D1.Dd.VCV1.BG2El1.BondCon1.f = -D1.Dd.VCV1.BG2El1.n.i;
//   D1.Dd.VCV1.BG2El2.BondCon1.e = D1.Dd.VCV1.BG2El2.n.v;
//   D1.Dd.VCV1.BG2El2.BondCon1.f = -D1.Dd.VCV1.BG2El2.n.i;
//   D1.Dd.VCV1.B2.fBondCon1.e = D1.Dd.VCV1.B2.eBondCon1.e;
//   D1.Dd.VCV1.B2.eBondCon1.f = D1.Dd.VCV1.B2.fBondCon1.f;
//   D1.Dd.VCV1.B2.fBondCon1.d = -1.0;
//   D1.Dd.VCV1.B2.eBondCon1.d = 1.0;
//   D1.Dd.VCV1.B1.fBondCon1.e = D1.Dd.VCV1.B1.eBondCon1.e;
//   D1.Dd.VCV1.B1.eBondCon1.f = D1.Dd.VCV1.B1.fBondCon1.f;
//   D1.Dd.VCV1.B1.eBondCon1.d = -1.0;
//   D1.Dd.VCV1.B1.fBondCon1.d = 1.0;
//   D1.Dd.VCV1.B5.BondCon2.e = D1.Dd.VCV1.B5.BondCon1.e;
//   D1.Dd.VCV1.B5.BondCon2.f = D1.Dd.VCV1.B5.BondCon1.f;
//   D1.Dd.VCV1.B5.BondCon1.d = -1.0;
//   D1.Dd.VCV1.B5.BondCon2.d = 1.0;
//   D1.Dd.VCV1.B6.BondCon2.e = D1.Dd.VCV1.B6.BondCon1.e;
//   D1.Dd.VCV1.B6.BondCon2.f = D1.Dd.VCV1.B6.BondCon1.f;
//   D1.Dd.VCV1.B6.BondCon1.d = -1.0;
//   D1.Dd.VCV1.B6.BondCon2.d = 1.0;
//   D1.Dd.VCV1.v1 = D1.Dd.VCV1.p1.v - D1.Dd.VCV1.n1.v;
//   D1.Dd.VCV1.v2 = D1.Dd.VCV1.p2.v - D1.Dd.VCV1.n2.v;
//   D1.Dd.VCV1.i1 = D1.Dd.VCV1.p1.i;
//   D1.Dd.VCV1.i2 = D1.Dd.VCV1.p2.i;
//   D1.Dd.Id.J1p3_1.f[2] = D1.Dd.Id.J1p3_1.f[1];
//   D1.Dd.Id.J1p3_1.f[3] = D1.Dd.Id.J1p3_1.f[2];
//   D1.Dd.Id.J1p3_1.e[1] + (D1.Dd.Id.J1p3_1.e[2] + D1.Dd.Id.J1p3_1.e[3]) = 0.0;
//   D1.Dd.Id.J1p3_1.e[1] = D1.Dd.Id.J1p3_1.BondCon1.d * D1.Dd.Id.J1p3_1.BondCon1.e;
//   D1.Dd.Id.J1p3_1.f[1] = D1.Dd.Id.J1p3_1.BondCon1.f;
//   D1.Dd.Id.J1p3_1.e[2] = D1.Dd.Id.J1p3_1.BondCon2.d * D1.Dd.Id.J1p3_1.BondCon2.e;
//   D1.Dd.Id.J1p3_1.f[2] = D1.Dd.Id.J1p3_1.BondCon2.f;
//   D1.Dd.Id.J1p3_1.e[3] = D1.Dd.Id.J1p3_1.BondCon3.d * D1.Dd.Id.J1p3_1.BondCon3.e;
//   D1.Dd.Id.J1p3_1.f[3] = D1.Dd.Id.J1p3_1.BondCon3.f;
//   D1.Dd.Id.B1.BondCon2.e = D1.Dd.Id.B1.BondCon1.e;
//   D1.Dd.Id.B1.BondCon2.f = D1.Dd.Id.B1.BondCon1.f;
//   D1.Dd.Id.B1.BondCon1.d = -1.0;
//   D1.Dd.Id.B1.BondCon2.d = 1.0;
//   D1.Dd.Id.B2.BondCon2.e = D1.Dd.Id.B2.BondCon1.e;
//   D1.Dd.Id.B2.BondCon2.f = D1.Dd.Id.B2.BondCon1.f;
//   D1.Dd.Id.B2.BondCon1.d = -1.0;
//   D1.Dd.Id.B2.BondCon2.d = 1.0;
//   D1.Dd.Id.B3.BondCon2.e = D1.Dd.Id.B3.BondCon1.e;
//   D1.Dd.Id.B3.BondCon2.f = D1.Dd.Id.B3.BondCon1.f;
//   D1.Dd.Id.B3.BondCon1.d = -1.0;
//   D1.Dd.Id.B3.BondCon2.d = 1.0;
//   D1.Dd.Id.El2BG1.BondCon1.e = D1.Dd.Id.El2BG1.p.v;
//   D1.Dd.Id.El2BG1.BondCon1.f = D1.Dd.Id.El2BG1.p.i;
//   D1.Dd.Id.BG2El1.BondCon1.e = D1.Dd.Id.BG2El1.n.v;
//   D1.Dd.Id.BG2El1.BondCon1.f = -D1.Dd.Id.BG2El1.n.i;
//   D1.Dd.Id.Df1.OutPort1 = D1.Dd.Id.Df1.f;
//   D1.Dd.Id.Df1.e = 0.0;
//   D1.Dd.Id.Df1.e = D1.Dd.Id.Df1.BondCon1.e;
//   D1.Dd.Id.Df1.f = D1.Dd.Id.Df1.BondCon1.d * D1.Dd.Id.Df1.BondCon1.f;
//   D1.Dd.Id.v = D1.Dd.Id.p.v - D1.Dd.Id.n.v;
//   D1.Dd.Id.i = D1.Dd.Id.p.i;
//   D1.Dd.Gnd1.B1.fBondCon1.e = D1.Dd.Gnd1.B1.eBondCon1.e;
//   D1.Dd.Gnd1.B1.eBondCon1.f = D1.Dd.Gnd1.B1.fBondCon1.f;
//   D1.Dd.Gnd1.B1.eBondCon1.d = -1.0;
//   D1.Dd.Gnd1.B1.fBondCon1.d = 1.0;
//   D1.Dd.Gnd1.V0.e = D1.Dd.Gnd1.V0.e0;
//   D1.Dd.Gnd1.V0.e = D1.Dd.Gnd1.V0.BondCon1.e;
//   D1.Dd.Gnd1.V0.f = (-D1.Dd.Gnd1.V0.BondCon1.d) * D1.Dd.Gnd1.V0.BondCon1.f;
//   D1.Dd.Gnd1.El2BG1.BondCon1.e = D1.Dd.Gnd1.El2BG1.p.v;
//   D1.Dd.Gnd1.El2BG1.BondCon1.f = D1.Dd.Gnd1.El2BG1.p.i;
//   D1.Dd.Tdev1.T = D1.Dd.Tdev1.port.T;
//   D1.Dd.Tdev1.port.Q_flow = 0.0;
//   D1.Dd.nlCD1.v = D1.Dd.nlCD1.u;
//   D1.Dd.nlCD1.Vt = 8.61727503842867e-05 * D1.Dd.nlCD1.Tdev;
//   D1.Dd.nlCD1.et = D1.Dd.nlCD1.v * 1.0 / D1.Dd.nlCD1.Vt / D1.Dd.nlCD1.N;
//   D1.Dd.nlCD1.DTemp = D1.Dd.nlCD1.Tdev - D1.Dd.nlCD1.Tnom;
//   D1.Dd.nlCD1.RTemp = D1.Dd.nlCD1.Tdev / D1.Dd.nlCD1.Tnom;
//   D1.Dd.nlCD1.EGval = D1.Dd.nlCD1.EG - 0.000702 * D1.Dd.nlCD1.Tdev ^ 2.0 / (1108.0 + D1.Dd.nlCD1.Tdev);
//   D1.Dd.nlCD1.EGnom = D1.Dd.nlCD1.EG - 0.000702 * D1.Dd.nlCD1.Tnom ^ 2.0 / (1108.0 + D1.Dd.nlCD1.Tnom);
//   D1.Dd.nlCD1.ISval = D1.Dd.nlCD1.IS * exp(((D1.Dd.nlCD1.RTemp - 1.0) * D1.Dd.nlCD1.EGnom) / (D1.Dd.nlCD1.Vt * D1.Dd.nlCD1.N) + (D1.Dd.nlCD1.XTI * log(D1.Dd.nlCD1.RTemp)) / D1.Dd.nlCD1.N);
//   D1.Dd.nlCD1.JSval = D1.Dd.nlCD1.JS * exp(((D1.Dd.nlCD1.RTemp - 1.0) * D1.Dd.nlCD1.EGnom) / (D1.Dd.nlCD1.Vt * D1.Dd.nlCD1.N) + (D1.Dd.nlCD1.XTI * log(D1.Dd.nlCD1.RTemp)) / D1.Dd.nlCD1.N);
//   D1.Dd.nlCD1.ISWval = D1.Dd.nlCD1.ISW * exp(((D1.Dd.nlCD1.RTemp - 1.0) * D1.Dd.nlCD1.EGnom) / (D1.Dd.nlCD1.Vt * D1.Dd.nlCD1.N) + (D1.Dd.nlCD1.XTI * log(D1.Dd.nlCD1.RTemp)) / D1.Dd.nlCD1.N);
//   D1.Dd.nlCD1.JSWval = D1.Dd.nlCD1.JSW * exp(((D1.Dd.nlCD1.RTemp - 1.0) * D1.Dd.nlCD1.EGnom) / (D1.Dd.nlCD1.Vt * D1.Dd.nlCD1.N) + (D1.Dd.nlCD1.XTI * log(D1.Dd.nlCD1.RTemp)) / D1.Dd.nlCD1.N);
//   D1.Dd.nlCD1.ISeff = if D1.Dd.nlCD1.Level == 1 then D1.Dd.nlCD1.Area * D1.Dd.nlCD1.ISval + D1.Dd.nlCD1.PJ * D1.Dd.nlCD1.ISWval else if D1.Dd.nlCD1.Level == 3 then D1.Dd.nlCD1.AREAeff * D1.Dd.nlCD1.JSval + D1.Dd.nlCD1.PJeff * D1.Dd.nlCD1.JSWval else 0.0;
//   D1.Dd.nlCD1.PBval = D1.Dd.nlCD1.PB * D1.Dd.nlCD1.RTemp + D1.Dd.nlCD1.EGval - D1.Dd.nlCD1.EGnom * D1.Dd.nlCD1.RTemp - 3.0 * (D1.Dd.nlCD1.Vt * log(D1.Dd.nlCD1.RTemp));
//   D1.Dd.nlCD1.PHPval = D1.Dd.nlCD1.PHP * D1.Dd.nlCD1.RTemp + D1.Dd.nlCD1.EGval - D1.Dd.nlCD1.EGnom * D1.Dd.nlCD1.RTemp - 3.0 * (D1.Dd.nlCD1.Vt * log(D1.Dd.nlCD1.RTemp));
//   D1.Dd.nlCD1.CJval = D1.Dd.nlCD1.CJ * (1.0 + D1.Dd.nlCD1.MJ * (1.0 + ((-D1.Dd.nlCD1.PBval) / D1.Dd.nlCD1.PB + 0.0004 * D1.Dd.nlCD1.DTemp)));
//   D1.Dd.nlCD1.CJ2val = D1.Dd.nlCD1.CJ2 * (1.0 + D1.Dd.nlCD1.MJ * (1.0 + ((-D1.Dd.nlCD1.PBval) / D1.Dd.nlCD1.PB + 0.0004 * D1.Dd.nlCD1.DTemp)));
//   D1.Dd.nlCD1.CJSWval = D1.Dd.nlCD1.CJSW * (1.0 + D1.Dd.nlCD1.MJSW * (1.0 + ((-D1.Dd.nlCD1.PHPval) / D1.Dd.nlCD1.PHP + 0.0004 * D1.Dd.nlCD1.DTemp)));
//   D1.Dd.nlCD1.CJSW2val = D1.Dd.nlCD1.CJSW2 * (1.0 + D1.Dd.nlCD1.MJSW * (1.0 + ((-D1.Dd.nlCD1.PHPval) / D1.Dd.nlCD1.PHP + 0.0004 * D1.Dd.nlCD1.DTemp)));
//   D1.Dd.nlCD1.TTval = D1.Dd.nlCD1.TT * (1.0 + (D1.Dd.nlCD1.TTT1 * D1.Dd.nlCD1.DTemp + D1.Dd.nlCD1.TTT2 * D1.Dd.nlCD1.DTemp ^ 2.0));
//   D1.Dd.nlCD1.Cdiff = D1.Dd.nlCD1.TTval * (D1.Dd.nlCD1.GminDC + D1.Dd.nlCD1.Area * (D1.Dd.nlCD1.ISeff * ((if D1.Dd.nlCD1.et < D1.Dd.nlCD1.EMin then D1.Dd.nlCD1.ExMin * (1.0 + (D1.Dd.nlCD1.et - D1.Dd.nlCD1.EMin)) else if D1.Dd.nlCD1.et > D1.Dd.nlCD1.EMax then D1.Dd.nlCD1.ExMax * (1.0 + (D1.Dd.nlCD1.et - D1.Dd.nlCD1.EMax)) else exp(D1.Dd.nlCD1.et)) * 1.0 / D1.Dd.nlCD1.N / D1.Dd.nlCD1.Vt)));
//   D1.Dd.nlCD1.Cbulk = D1.Dd.nlCD1.CJval * (if D1.Dd.nlCD1.v > D1.Dd.nlCD1.FC * D1.Dd.nlCD1.PBval then (1.0 + ((-D1.Dd.nlCD1.FC) * (1.0 + D1.Dd.nlCD1.MJ) + (D1.Dd.nlCD1.MJ * D1.Dd.nlCD1.v) / D1.Dd.nlCD1.PBval)) * (1.0 - D1.Dd.nlCD1.FC) ^ (-1.0 - D1.Dd.nlCD1.MJ) else abs(1.0 - D1.Dd.nlCD1.v / D1.Dd.nlCD1.PBval) ^ (-D1.Dd.nlCD1.MJ));
//   D1.Dd.nlCD1.Cbulk2 = 0.0;
//   D1.Dd.nlCD1.Cperi = D1.Dd.nlCD1.CJSWval * (if D1.Dd.nlCD1.v > D1.Dd.nlCD1.FC * D1.Dd.nlCD1.PHPval then (1.0 + ((-D1.Dd.nlCD1.FC) * (1.0 + D1.Dd.nlCD1.MJSW) + (D1.Dd.nlCD1.MJSW * D1.Dd.nlCD1.v) / D1.Dd.nlCD1.PHPval)) * (1.0 - D1.Dd.nlCD1.FC) ^ (-1.0 - D1.Dd.nlCD1.MJSW) else abs(1.0 - D1.Dd.nlCD1.v / D1.Dd.nlCD1.PHPval) ^ (-D1.Dd.nlCD1.MJSW));
//   D1.Dd.nlCD1.Cperi2 = 0.0;
//   D1.Dd.nlCD1.Cpoly = 0.0;
//   D1.Dd.nlCD1.Cmetal = 0.0;
//   D1.Dd.nlCD1.Cval = D1.Dd.nlCD1.Cdiff + (D1.Dd.nlCD1.Area * D1.Dd.nlCD1.Cbulk + D1.Dd.nlCD1.PJ * D1.Dd.nlCD1.Cperi);
//   D1.Dd.nlCD1.y = D1.Dd.nlCD1.Cval;
//   D1.Dd.VarC1.J1p3_1.f[2] = D1.Dd.VarC1.J1p3_1.f[1];
//   D1.Dd.VarC1.J1p3_1.f[3] = D1.Dd.VarC1.J1p3_1.f[2];
//   D1.Dd.VarC1.J1p3_1.e[1] + (D1.Dd.VarC1.J1p3_1.e[2] + D1.Dd.VarC1.J1p3_1.e[3]) = 0.0;
//   D1.Dd.VarC1.J1p3_1.e[1] = D1.Dd.VarC1.J1p3_1.BondCon1.d * D1.Dd.VarC1.J1p3_1.BondCon1.e;
//   D1.Dd.VarC1.J1p3_1.f[1] = D1.Dd.VarC1.J1p3_1.BondCon1.f;
//   D1.Dd.VarC1.J1p3_1.e[2] = D1.Dd.VarC1.J1p3_1.BondCon2.d * D1.Dd.VarC1.J1p3_1.BondCon2.e;
//   D1.Dd.VarC1.J1p3_1.f[2] = D1.Dd.VarC1.J1p3_1.BondCon2.f;
//   D1.Dd.VarC1.J1p3_1.e[3] = D1.Dd.VarC1.J1p3_1.BondCon3.d * D1.Dd.VarC1.J1p3_1.BondCon3.e;
//   D1.Dd.VarC1.J1p3_1.f[3] = D1.Dd.VarC1.J1p3_1.BondCon3.f;
//   D1.Dd.VarC1.B1.BondCon2.e = D1.Dd.VarC1.B1.BondCon1.e;
//   D1.Dd.VarC1.B1.BondCon2.f = D1.Dd.VarC1.B1.BondCon1.f;
//   D1.Dd.VarC1.B1.BondCon1.d = -1.0;
//   D1.Dd.VarC1.B1.BondCon2.d = 1.0;
//   D1.Dd.VarC1.B2.BondCon2.e = D1.Dd.VarC1.B2.BondCon1.e;
//   D1.Dd.VarC1.B2.BondCon2.f = D1.Dd.VarC1.B2.BondCon1.f;
//   D1.Dd.VarC1.B2.BondCon1.d = -1.0;
//   D1.Dd.VarC1.B2.BondCon2.d = 1.0;
//   D1.Dd.VarC1.El2BG1.BondCon1.e = D1.Dd.VarC1.El2BG1.p.v;
//   D1.Dd.VarC1.El2BG1.BondCon1.f = D1.Dd.VarC1.El2BG1.p.i;
//   D1.Dd.VarC1.BG2El1.BondCon1.e = D1.Dd.VarC1.BG2El1.n.v;
//   D1.Dd.VarC1.BG2El1.BondCon1.f = -D1.Dd.VarC1.BG2El1.n.i;
//   D1.Dd.VarC1.B3.BondCon2.e = D1.Dd.VarC1.B3.BondCon1.e;
//   D1.Dd.VarC1.B3.BondCon2.f = D1.Dd.VarC1.B3.BondCon1.f;
//   D1.Dd.VarC1.B3.BondCon1.d = -1.0;
//   D1.Dd.VarC1.B3.BondCon2.d = 1.0;
//   D1.Dd.VarC1.mC1.C = D1.Dd.VarC1.mC1.s;
//   D1.Dd.VarC1.mC1.f = D1.Dd.VarC1.mC1.C * der(D1.Dd.VarC1.mC1.e);
//   D1.Dd.VarC1.mC1.e = D1.Dd.VarC1.mC1.BondCon1.e;
//   D1.Dd.VarC1.mC1.f = D1.Dd.VarC1.mC1.BondCon1.d * D1.Dd.VarC1.mC1.BondCon1.f;
//   D1.Dd.VarC1.v = D1.Dd.VarC1.p.v - D1.Dd.VarC1.n.v;
//   D1.Dd.VarC1.i = D1.Dd.VarC1.p.i;
//   D1.Dd.Vd.J1p3_1.f[2] = D1.Dd.Vd.J1p3_1.f[1];
//   D1.Dd.Vd.J1p3_1.f[3] = D1.Dd.Vd.J1p3_1.f[2];
//   D1.Dd.Vd.J1p3_1.e[1] + (D1.Dd.Vd.J1p3_1.e[2] + D1.Dd.Vd.J1p3_1.e[3]) = 0.0;
//   D1.Dd.Vd.J1p3_1.e[1] = D1.Dd.Vd.J1p3_1.BondCon1.d * D1.Dd.Vd.J1p3_1.BondCon1.e;
//   D1.Dd.Vd.J1p3_1.f[1] = D1.Dd.Vd.J1p3_1.BondCon1.f;
//   D1.Dd.Vd.J1p3_1.e[2] = D1.Dd.Vd.J1p3_1.BondCon2.d * D1.Dd.Vd.J1p3_1.BondCon2.e;
//   D1.Dd.Vd.J1p3_1.f[2] = D1.Dd.Vd.J1p3_1.BondCon2.f;
//   D1.Dd.Vd.J1p3_1.e[3] = D1.Dd.Vd.J1p3_1.BondCon3.d * D1.Dd.Vd.J1p3_1.BondCon3.e;
//   D1.Dd.Vd.J1p3_1.f[3] = D1.Dd.Vd.J1p3_1.BondCon3.f;
//   D1.Dd.Vd.B1.BondCon2.e = D1.Dd.Vd.B1.BondCon1.e;
//   D1.Dd.Vd.B1.BondCon2.f = D1.Dd.Vd.B1.BondCon1.f;
//   D1.Dd.Vd.B1.BondCon1.d = -1.0;
//   D1.Dd.Vd.B1.BondCon2.d = 1.0;
//   D1.Dd.Vd.B2.BondCon2.e = D1.Dd.Vd.B2.BondCon1.e;
//   D1.Dd.Vd.B2.BondCon2.f = D1.Dd.Vd.B2.BondCon1.f;
//   D1.Dd.Vd.B2.BondCon1.d = -1.0;
//   D1.Dd.Vd.B2.BondCon2.d = 1.0;
//   D1.Dd.Vd.El2BG1.BondCon1.e = D1.Dd.Vd.El2BG1.p.v;
//   D1.Dd.Vd.El2BG1.BondCon1.f = D1.Dd.Vd.El2BG1.p.i;
//   D1.Dd.Vd.BG2El1.BondCon1.e = D1.Dd.Vd.BG2El1.n.v;
//   D1.Dd.Vd.BG2El1.BondCon1.f = -D1.Dd.Vd.BG2El1.n.i;
//   D1.Dd.Vd.De1.OutPort1 = D1.Dd.Vd.De1.e;
//   D1.Dd.Vd.De1.f = 0.0;
//   D1.Dd.Vd.De1.e = D1.Dd.Vd.De1.BondCon1.e;
//   D1.Dd.Vd.De1.f = D1.Dd.Vd.De1.BondCon1.d * D1.Dd.Vd.De1.BondCon1.f;
//   D1.Dd.Vd.B3.BondCon2.e = D1.Dd.Vd.B3.BondCon1.e;
//   D1.Dd.Vd.B3.BondCon2.f = D1.Dd.Vd.B3.BondCon1.f;
//   D1.Dd.Vd.B3.BondCon1.d = -1.0;
//   D1.Dd.Vd.B3.BondCon2.d = 1.0;
//   D1.Dd.Vd.v = D1.Dd.Vd.p.v - D1.Dd.Vd.n.v;
//   D1.Dd.Vd.i = D1.Dd.Vd.p.i;
//   D1.Dd.Gj1.J1p3_1.f[2] = D1.Dd.Gj1.J1p3_1.f[1];
//   D1.Dd.Gj1.J1p3_1.f[3] = D1.Dd.Gj1.J1p3_1.f[2];
//   D1.Dd.Gj1.J1p3_1.e[1] + (D1.Dd.Gj1.J1p3_1.e[2] + D1.Dd.Gj1.J1p3_1.e[3]) = 0.0;
//   D1.Dd.Gj1.J1p3_1.e[1] = D1.Dd.Gj1.J1p3_1.BondCon1.d * D1.Dd.Gj1.J1p3_1.BondCon1.e;
//   D1.Dd.Gj1.J1p3_1.f[1] = D1.Dd.Gj1.J1p3_1.BondCon1.f;
//   D1.Dd.Gj1.J1p3_1.e[2] = D1.Dd.Gj1.J1p3_1.BondCon2.d * D1.Dd.Gj1.J1p3_1.BondCon2.e;
//   D1.Dd.Gj1.J1p3_1.f[2] = D1.Dd.Gj1.J1p3_1.BondCon2.f;
//   D1.Dd.Gj1.J1p3_1.e[3] = D1.Dd.Gj1.J1p3_1.BondCon3.d * D1.Dd.Gj1.J1p3_1.BondCon3.e;
//   D1.Dd.Gj1.J1p3_1.f[3] = D1.Dd.Gj1.J1p3_1.BondCon3.f;
//   D1.Dd.Gj1.B1.BondCon2.e = D1.Dd.Gj1.B1.BondCon1.e;
//   D1.Dd.Gj1.B1.BondCon2.f = D1.Dd.Gj1.B1.BondCon1.f;
//   D1.Dd.Gj1.B1.BondCon1.d = -1.0;
//   D1.Dd.Gj1.B1.BondCon2.d = 1.0;
//   D1.Dd.Gj1.B2.BondCon2.e = D1.Dd.Gj1.B2.BondCon1.e;
//   D1.Dd.Gj1.B2.BondCon2.f = D1.Dd.Gj1.B2.BondCon1.f;
//   D1.Dd.Gj1.B2.BondCon1.d = -1.0;
//   D1.Dd.Gj1.B2.BondCon2.d = 1.0;
//   D1.Dd.Gj1.El2BG1.BondCon1.e = D1.Dd.Gj1.El2BG1.p.v;
//   D1.Dd.Gj1.El2BG1.BondCon1.f = D1.Dd.Gj1.El2BG1.p.i;
//   D1.Dd.Gj1.BG2El1.BondCon1.e = D1.Dd.Gj1.BG2El1.n.v;
//   D1.Dd.Gj1.BG2El1.BondCon1.f = -D1.Dd.Gj1.BG2El1.n.i;
//   D1.Dd.Gj1.B3.BondCon2.e = D1.Dd.Gj1.B3.BondCon1.e;
//   D1.Dd.Gj1.B3.BondCon2.f = D1.Dd.Gj1.B3.BondCon1.f;
//   D1.Dd.Gj1.B3.BondCon1.d = -1.0;
//   D1.Dd.Gj1.B3.BondCon2.d = 1.0;
//   D1.Dd.Gj1.Gj1.f = D1.Dd.Gj1.Gj1.GminDC * D1.Dd.Gj1.Gj1.e;
//   D1.Dd.Gj1.Gj1.e = D1.Dd.Gj1.Gj1.BondCon1.e;
//   D1.Dd.Gj1.Gj1.f = D1.Dd.Gj1.Gj1.BondCon1.d * D1.Dd.Gj1.Gj1.BondCon1.f;
//   D1.Dd.Gj1.v = D1.Dd.Gj1.p.v - D1.Dd.Gj1.n.v;
//   D1.Dd.Gj1.i = D1.Dd.Gj1.p.i;
//   D1.Dd.DjD1.J1p3_1.f[2] = D1.Dd.DjD1.J1p3_1.f[1];
//   D1.Dd.DjD1.J1p3_1.f[3] = D1.Dd.DjD1.J1p3_1.f[2];
//   D1.Dd.DjD1.J1p3_1.e[1] + (D1.Dd.DjD1.J1p3_1.e[2] + D1.Dd.DjD1.J1p3_1.e[3]) = 0.0;
//   D1.Dd.DjD1.J1p3_1.e[1] = D1.Dd.DjD1.J1p3_1.BondCon1.d * D1.Dd.DjD1.J1p3_1.BondCon1.e;
//   D1.Dd.DjD1.J1p3_1.f[1] = D1.Dd.DjD1.J1p3_1.BondCon1.f;
//   D1.Dd.DjD1.J1p3_1.e[2] = D1.Dd.DjD1.J1p3_1.BondCon2.d * D1.Dd.DjD1.J1p3_1.BondCon2.e;
//   D1.Dd.DjD1.J1p3_1.f[2] = D1.Dd.DjD1.J1p3_1.BondCon2.f;
//   D1.Dd.DjD1.J1p3_1.e[3] = D1.Dd.DjD1.J1p3_1.BondCon3.d * D1.Dd.DjD1.J1p3_1.BondCon3.e;
//   D1.Dd.DjD1.J1p3_1.f[3] = D1.Dd.DjD1.J1p3_1.BondCon3.f;
//   D1.Dd.DjD1.B1.BondCon2.e = D1.Dd.DjD1.B1.BondCon1.e;
//   D1.Dd.DjD1.B1.BondCon2.f = D1.Dd.DjD1.B1.BondCon1.f;
//   D1.Dd.DjD1.B1.BondCon1.d = -1.0;
//   D1.Dd.DjD1.B1.BondCon2.d = 1.0;
//   D1.Dd.DjD1.B2.BondCon2.e = D1.Dd.DjD1.B2.BondCon1.e;
//   D1.Dd.DjD1.B2.BondCon2.f = D1.Dd.DjD1.B2.BondCon1.f;
//   D1.Dd.DjD1.B2.BondCon1.d = -1.0;
//   D1.Dd.DjD1.B2.BondCon2.d = 1.0;
//   D1.Dd.DjD1.El2BG1.BondCon1.e = D1.Dd.DjD1.El2BG1.p.v;
//   D1.Dd.DjD1.El2BG1.BondCon1.f = D1.Dd.DjD1.El2BG1.p.i;
//   D1.Dd.DjD1.BG2El1.BondCon1.e = D1.Dd.DjD1.BG2El1.n.v;
//   D1.Dd.DjD1.BG2El1.BondCon1.f = -D1.Dd.DjD1.BG2El1.n.i;
//   D1.Dd.DjD1.B3.BondCon2.e = D1.Dd.DjD1.B3.BondCon1.e;
//   D1.Dd.DjD1.B3.BondCon2.f = D1.Dd.DjD1.B3.BondCon1.f;
//   D1.Dd.DjD1.B3.BondCon1.d = -1.0;
//   D1.Dd.DjD1.B3.BondCon2.d = 1.0;
//   D1.Dd.DjD1.B4.fBondCon1.e = D1.Dd.DjD1.B4.eBondCon1.e;
//   D1.Dd.DjD1.B4.eBondCon1.f = D1.Dd.DjD1.B4.fBondCon1.f;
//   D1.Dd.DjD1.B4.fBondCon1.d = -1.0;
//   D1.Dd.DjD1.B4.eBondCon1.d = 1.0;
//   D1.Dd.DjD1.BG2Heat1.BondCon1.e = D1.Dd.DjD1.BG2Heat1.port_b.T;
//   D1.Dd.DjD1.BG2Heat1.BondCon1.e * D1.Dd.DjD1.BG2Heat1.BondCon1.f = -D1.Dd.DjD1.BG2Heat1.port_b.Q_flow;
//   D1.Dd.DjD1.DjD1.Vt = 8.61727503842867e-05 * D1.Dd.DjD1.DjD1.e2;
//   D1.Dd.DjD1.DjD1.RTemp = D1.Dd.DjD1.DjD1.e2 / D1.Dd.DjD1.DjD1.Tnom;
//   D1.Dd.DjD1.DjD1.EGnom = D1.Dd.DjD1.DjD1.EG - 0.000702 * D1.Dd.DjD1.DjD1.Tnom ^ 2.0 / (1108.0 + D1.Dd.DjD1.DjD1.Tnom);
//   D1.Dd.DjD1.DjD1.ISval = D1.Dd.DjD1.DjD1.IS * exp(((D1.Dd.DjD1.DjD1.RTemp - 1.0) * D1.Dd.DjD1.DjD1.EGnom) / (D1.Dd.DjD1.DjD1.Vt * D1.Dd.DjD1.DjD1.N) + (D1.Dd.DjD1.DjD1.XTI * log(D1.Dd.DjD1.DjD1.RTemp)) / D1.Dd.DjD1.DjD1.N);
//   D1.Dd.DjD1.DjD1.JSval = D1.Dd.DjD1.DjD1.JS * exp(((D1.Dd.DjD1.DjD1.RTemp - 1.0) * D1.Dd.DjD1.DjD1.EGnom) / (D1.Dd.DjD1.DjD1.Vt * D1.Dd.DjD1.DjD1.N) + (D1.Dd.DjD1.DjD1.XTI * log(D1.Dd.DjD1.DjD1.RTemp)) / D1.Dd.DjD1.DjD1.N);
//   D1.Dd.DjD1.DjD1.ISWval = D1.Dd.DjD1.DjD1.ISW * exp(((D1.Dd.DjD1.DjD1.RTemp - 1.0) * D1.Dd.DjD1.DjD1.EGnom) / (D1.Dd.DjD1.DjD1.Vt * D1.Dd.DjD1.DjD1.N) + (D1.Dd.DjD1.DjD1.XTI * log(D1.Dd.DjD1.DjD1.RTemp)) / D1.Dd.DjD1.DjD1.N);
//   D1.Dd.DjD1.DjD1.JSWval = D1.Dd.DjD1.DjD1.JSW * exp(((D1.Dd.DjD1.DjD1.RTemp - 1.0) * D1.Dd.DjD1.DjD1.EGnom) / (D1.Dd.DjD1.DjD1.Vt * D1.Dd.DjD1.DjD1.N) + (D1.Dd.DjD1.DjD1.XTI * log(D1.Dd.DjD1.DjD1.RTemp)) / D1.Dd.DjD1.DjD1.N);
//   D1.Dd.DjD1.DjD1.ISeff = if D1.Dd.DjD1.DjD1.Level == 1 then D1.Dd.DjD1.DjD1.Area * D1.Dd.DjD1.DjD1.ISval + D1.Dd.DjD1.DjD1.PJ * D1.Dd.DjD1.DjD1.ISWval else if D1.Dd.DjD1.DjD1.Level == 3 then D1.Dd.DjD1.DjD1.AREAeff * D1.Dd.DjD1.DjD1.JSval + D1.Dd.DjD1.DjD1.PJeff * D1.Dd.DjD1.DjD1.JSWval else 0.0;
//   D1.Dd.DjD1.DjD1.BVval = if D1.Dd.DjD1.DjD1.BV > 0.0 then D1.Dd.DjD1.DjD1.BV - D1.Dd.DjD1.DjD1.TCV * D1.Dd.DjD1.DjD1.DTemp else 0.0;
//   D1.Dd.DjD1.DjD1.Ibreak = (-D1.Dd.DjD1.DjD1.ISeff) * (exp((-D1.Dd.DjD1.DjD1.BV) / (D1.Dd.DjD1.DjD1.N * D1.Dd.DjD1.DjD1.Vt)) - 1.0);
//   D1.Dd.DjD1.DjD1.IBVval = if D1.Dd.DjD1.DjD1.IBV < D1.Dd.DjD1.DjD1.Ibreak then D1.Dd.DjD1.DjD1.Ibreak else D1.Dd.DjD1.DjD1.IBV;
//   D1.Dd.DjD1.DjD1.BVeff = if noEvent(D1.Dd.DjD1.DjD1.BV > 0.0) then D1.Dd.DjD1.DjD1.BVval + D1.Dd.DjD1.DjD1.N * (D1.Dd.DjD1.DjD1.Vt * log(D1.Dd.DjD1.DjD1.IBVval / D1.Dd.DjD1.DjD1.Ibreak)) else 0.0;
//   D1.Dd.DjD1.DjD1.et = D1.Dd.DjD1.DjD1.e1 * 1.0 / D1.Dd.DjD1.DjD1.Vt / D1.Dd.DjD1.DjD1.N;
//   D1.Dd.DjD1.DjD1.et2 = ((-D1.Dd.DjD1.DjD1.BVeff) - D1.Dd.DjD1.DjD1.e1) * 1.0 / D1.Dd.DjD1.DjD1.N / D1.Dd.DjD1.DjD1.Vt;
//   D1.Dd.DjD1.DjD1.Eq = (D1.Dd.DjD1.DjD1.e1 / D1.Dd.DjD1.DjD1.TOX) ^ 2.0;
//   D1.Dd.DjD1.DjD1.f1a = D1.Dd.DjD1.DjD1.ISeff * (if noEvent(D1.Dd.DjD1.DjD1.et < D1.Dd.DjD1.DjD1.EMin) then D1.Dd.DjD1.DjD1.ExMin * (1.0 + (D1.Dd.DjD1.DjD1.et - D1.Dd.DjD1.DjD1.EMin)) - 1.0 else if noEvent(D1.Dd.DjD1.DjD1.et > D1.Dd.DjD1.DjD1.EMax) then D1.Dd.DjD1.DjD1.ExMax * (1.0 + (D1.Dd.DjD1.DjD1.et - D1.Dd.DjD1.DjD1.EMax)) - 1.0 else exp(D1.Dd.DjD1.DjD1.et) - 1.0);
//   D1.Dd.DjD1.DjD1.f1b = D1.Dd.DjD1.DjD1.ISeff * (if noEvent(D1.Dd.DjD1.DjD1.et2 < D1.Dd.DjD1.DjD1.EMin) then D1.Dd.DjD1.DjD1.ExMin * (1.0 + (D1.Dd.DjD1.DjD1.et2 - D1.Dd.DjD1.DjD1.EMin)) - 1.0 else if noEvent(D1.Dd.DjD1.DjD1.et2 > D1.Dd.DjD1.DjD1.EMax) then D1.Dd.DjD1.DjD1.ExMax * (1.0 + (D1.Dd.DjD1.DjD1.et2 - D1.Dd.DjD1.DjD1.EMax)) - 1.0 else exp(D1.Dd.DjD1.DjD1.et2) - 1.0);
//   D1.Dd.DjD1.DjD1.f1 = if D1.Dd.DjD1.DjD1.BV > 0.0 then D1.Dd.DjD1.DjD1.f1a - D1.Dd.DjD1.DjD1.f1b - D1.Dd.DjD1.DjD1.IBVval / 2.0 else D1.Dd.DjD1.DjD1.f1a;
//   D1.Dd.DjD1.DjD1.f2 = 0.0;
//   D1.Dd.DjD1.DjD1.DTempSq = D1.Dd.DjD1.DjD1.DTemp ^ 2.0;
//   D1.Dd.DjD1.DjD1.DTemp = D1.Dd.DjD1.DjD1.e2 - D1.Dd.DjD1.DjD1.Tnom;
//   D1.Dd.DjD1.DjD1.e1 = D1.Dd.DjD1.DjD1.BondCon1.e;
//   D1.Dd.DjD1.DjD1.f1 = D1.Dd.DjD1.DjD1.BondCon1.d * D1.Dd.DjD1.DjD1.BondCon1.f;
//   D1.Dd.DjD1.DjD1.e2 = D1.Dd.DjD1.DjD1.BondCon2.e;
//   D1.Dd.DjD1.DjD1.f2 = (-D1.Dd.DjD1.DjD1.BondCon2.d) * D1.Dd.DjD1.DjD1.BondCon2.f;
//   D1.Dd.DjD1.v = D1.Dd.DjD1.p.v - D1.Dd.DjD1.n.v;
//   D1.Dd.DjD1.i = D1.Dd.DjD1.p.i;
//   D1.Dd.v = D1.Dd.p.v - D1.Dd.n.v;
//   D1.Dd.i = D1.Dd.p.i;
//   D1.Sw1.control = true;
//   D1.v = D1.p.v - D1.n.v;
//   D1.i = D1.p.i;
//   vout = Vout.v;
//   L1.p.i + V0.p.i = 0.0;
//   L1.El2BG1.p.v = L1.p.v;
//   L1.El2BG1.p.v = V0.El2BG1.p.v;
//   L1.El2BG1.p.v = V0.p.v;
//   Vout.n.i + (R1.n.i + (C1.n.i + (V0.n.i + Gnd1.p.i))) = 0.0;
//   C1.BG2El1.n.v = C1.n.v;
//   C1.BG2El1.n.v = Gnd1.El2BG1.p.v;
//   C1.BG2El1.n.v = Gnd1.p.v;
//   C1.BG2El1.n.v = R1.BG2El1.n.v;
//   C1.BG2El1.n.v = R1.n.v;
//   C1.BG2El1.n.v = V0.BG2El1.n.v;
//   C1.BG2El1.n.v = V0.n.v;
//   C1.BG2El1.n.v = Vout.BG2El1.n.v;
//   C1.BG2El1.n.v = Vout.n.v;
//   FixedTemperature1.port.Q_flow + (L1.heatPort.Q_flow + (R1.heatPort.Q_flow + (D1.heatPort.Q_flow + C1.heatPort.Q_flow))) = 0.0;
//   C1.BG2Heat1.port_b.T = C1.heatPort.T;
//   C1.BG2Heat1.port_b.T = D1.Sw1.BG2Heat2.port_b.T;
//   C1.BG2Heat1.port_b.T = D1.Sw1.n2.T;
//   C1.BG2Heat1.port_b.T = D1.heatPort.T;
//   C1.BG2Heat1.port_b.T = FixedTemperature1.BG2Heat1.port_b.T;
//   C1.BG2Heat1.port_b.T = FixedTemperature1.port.T;
//   C1.BG2Heat1.port_b.T = L1.BG2Heat1.port_b.T;
//   C1.BG2Heat1.port_b.T = L1.heatPort.T;
//   C1.BG2Heat1.port_b.T = R1.BG2Heat1.port_b.T;
//   C1.BG2Heat1.port_b.T = R1.heatPort.T;
//   R1.p.i + (Vout.p.i + (D1.n.i + C1.p.i)) = 0.0;
//   C1.El2BG1.p.v = C1.p.v;
//   C1.El2BG1.p.v = D1.Dd.VCV1.BG2El2.n.v;
//   C1.El2BG1.p.v = D1.Dd.VCV1.n1.v;
//   C1.El2BG1.p.v = D1.Dd.VarC1.BG2El1.n.v;
//   C1.El2BG1.p.v = D1.Dd.VarC1.n.v;
//   C1.El2BG1.p.v = D1.Dd.Vd.BG2El1.n.v;
//   C1.El2BG1.p.v = D1.Dd.Vd.n.v;
//   C1.El2BG1.p.v = D1.Dd.n.v;
//   C1.El2BG1.p.v = D1.Id.BG2El1.n.v;
//   C1.El2BG1.p.v = D1.Id.n.v;
//   C1.El2BG1.p.v = D1.n.v;
//   C1.El2BG1.p.v = D1.vd.BG2El1.n.v;
//   C1.El2BG1.p.v = D1.vd.n.v;
//   C1.El2BG1.p.v = R1.El2BG1.p.v;
//   C1.El2BG1.p.v = R1.p.v;
//   C1.El2BG1.p.v = Vout.El2BG1.p.v;
//   C1.El2BG1.p.v = Vout.p.v;
//   D1.p.i + L1.n.i = 0.0;
//   D1.RS1.El2BG1.p.v = D1.RS1.p.v;
//   D1.RS1.El2BG1.p.v = D1.p.v;
//   D1.RS1.El2BG1.p.v = L1.BG2El1.n.v;
//   D1.RS1.El2BG1.p.v = L1.n.v;
//   D1.T_nom.port.Q_flow + D1.Sw1.n1.Q_flow = 0.0;
//   D1.Sw1.BG2Heat1.port_b.T = D1.Sw1.n1.T;
//   D1.Sw1.BG2Heat1.port_b.T = D1.T_nom.BG2Heat1.port_b.T;
//   D1.Sw1.BG2Heat1.port_b.T = D1.T_nom.port.T;
//   D1.Sw1.n2.Q_flow + (-D1.heatPort.Q_flow) = 0.0;
//   D1.Sw1.p.Q_flow + (D1.Tdev1.port.Q_flow + (D1.Id.heatPort.Q_flow + (D1.Dd.heatPort.Q_flow + D1.RS1.heatPort.Q_flow))) = 0.0;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Dd.DjD1.heatPort.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Dd.Tdev1.port.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Dd.heatPort.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Id.BG2Heat1.port_b.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Id.heatPort.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.RS1.BG2Heat1.port_b.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.RS1.heatPort.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Sw1.Heat2BG1.port_a.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Sw1.p.T;
//   D1.Dd.DjD1.BG2Heat1.port_b.T = D1.Tdev1.port.T;
//   D1.Id.n.i + (D1.vd.n.i + (D1.Dd.n.i + (-D1.n.i))) = 0.0;
//   D1.RS1.n.i + (D1.Dd.p.i + (D1.vd.p.i + D1.Id.p.i)) = 0.0;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.VCV1.p1.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.VarC1.El2BG1.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.VarC1.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.Vd.El2BG1.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.Vd.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Dd.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Id.El2BG1.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.Id.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.RS1.BG2El1.n.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.RS1.n.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.vd.El2BG1.p.v;
//   D1.Dd.VCV1.El2BG1.p.v = D1.vd.p.v;
//   D1.RS1.p.i + (-D1.p.i) = 0.0;
//   D1.ID0.Tdev = D1.Tdev1.T;
//   D1.ID0.y = D1.Id.I1.s;
//   D1.ID0.y = D1.Id.InPort1;
//   D1.ID0.v = D1.vd.De1.OutPort1;
//   D1.ID0.v = D1.vd.V;
//   D1.Dd.Id.Df1.OutPort1 = D1.Dd.Id.I;
//   D1.Dd.Id.Df1.OutPort1 = D1.Dd.id;
//   D1.Dd.Id.Df1.OutPort1 = D1.ID0.u;
//   D1.Dd.Tdev1.T = D1.Dd.nlCD1.Tdev;
//   D1.Dd.Id.p.i + D1.Dd.VCV1.p2.i = 0.0;
//   D1.Dd.Id.El2BG1.p.v = D1.Dd.Id.p.v;
//   D1.Dd.Id.El2BG1.p.v = D1.Dd.VCV1.El2BG2.p.v;
//   D1.Dd.Id.El2BG1.p.v = D1.Dd.VCV1.p2.v;
//   D1.Dd.DjD1.heatPort.Q_flow + (D1.Dd.Tdev1.port.Q_flow + (-D1.Dd.heatPort.Q_flow)) = 0.0;
//   D1.Dd.VCV1.n2.i + (D1.Dd.Gj1.n.i + (D1.Dd.DjD1.n.i + D1.Dd.Gnd1.p.i)) = 0.0;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.DjD1.n.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.Gj1.BG2El1.n.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.Gj1.n.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.Gnd1.El2BG1.p.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.Gnd1.p.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.VCV1.BG2El1.n.v;
//   D1.Dd.DjD1.BG2El1.n.v = D1.Dd.VCV1.n2.v;
//   D1.Dd.VarC1.mC1.s = D1.Dd.VarC1.u;
//   D1.Dd.VarC1.mC1.s = D1.Dd.nlCD1.y;
//   D1.Dd.VCV1.p1.i + (D1.Dd.VarC1.p.i + (D1.Dd.Vd.p.i + (-D1.Dd.p.i))) = 0.0;
//   D1.Dd.VCV1.n1.i + (D1.Dd.VarC1.n.i + (D1.Dd.Vd.n.i + (-D1.Dd.n.i))) = 0.0;
//   D1.Dd.Vd.De1.OutPort1 = D1.Dd.Vd.V;
//   D1.Dd.Vd.De1.OutPort1 = D1.Dd.nlCD1.u;
//   D1.Dd.Id.n.i + (D1.Dd.DjD1.p.i + D1.Dd.Gj1.p.i) = 0.0;
//   D1.Dd.DjD1.El2BG1.p.v = D1.Dd.DjD1.p.v;
//   D1.Dd.DjD1.El2BG1.p.v = D1.Dd.Gj1.El2BG1.p.v;
//   D1.Dd.DjD1.El2BG1.p.v = D1.Dd.Gj1.p.v;
//   D1.Dd.DjD1.El2BG1.p.v = D1.Dd.Id.BG2El1.n.v;
//   D1.Dd.DjD1.El2BG1.p.v = D1.Dd.Id.n.v;
//   D1.Dd.DjD1.BG2El1.n.i + (-D1.Dd.DjD1.n.i) = 0.0;
//   D1.Dd.DjD1.El2BG1.p.i + (-D1.Dd.DjD1.p.i) = 0.0;
//   D1.Dd.DjD1.B2.BondCon2.d = D1.Dd.DjD1.BG2El1.BondCon1.d;
//   D1.Dd.DjD1.B2.BondCon2.f = D1.Dd.DjD1.BG2El1.BondCon1.f;
//   D1.Dd.DjD1.B2.BondCon2.e = D1.Dd.DjD1.BG2El1.BondCon1.e;
//   D1.Dd.DjD1.B1.BondCon1.d = D1.Dd.DjD1.El2BG1.BondCon1.d;
//   D1.Dd.DjD1.B1.BondCon1.f = D1.Dd.DjD1.El2BG1.BondCon1.f;
//   D1.Dd.DjD1.B1.BondCon1.e = D1.Dd.DjD1.El2BG1.BondCon1.e;
//   D1.Dd.DjD1.B2.BondCon1.d = D1.Dd.DjD1.J1p3_1.BondCon2.d;
//   D1.Dd.DjD1.B2.BondCon1.f = D1.Dd.DjD1.J1p3_1.BondCon2.f;
//   D1.Dd.DjD1.B2.BondCon1.e = D1.Dd.DjD1.J1p3_1.BondCon2.e;
//   D1.Dd.DjD1.B1.BondCon2.d = D1.Dd.DjD1.J1p3_1.BondCon1.d;
//   D1.Dd.DjD1.B1.BondCon2.f = D1.Dd.DjD1.J1p3_1.BondCon1.f;
//   D1.Dd.DjD1.B1.BondCon2.e = D1.Dd.DjD1.J1p3_1.BondCon1.e;
//   D1.Dd.DjD1.B3.BondCon1.d = D1.Dd.DjD1.J1p3_1.BondCon3.d;
//   D1.Dd.DjD1.B3.BondCon1.f = D1.Dd.DjD1.J1p3_1.BondCon3.f;
//   D1.Dd.DjD1.B3.BondCon1.e = D1.Dd.DjD1.J1p3_1.BondCon3.e;
//   D1.Dd.DjD1.B4.eBondCon1.d = D1.Dd.DjD1.BG2Heat1.BondCon1.d;
//   D1.Dd.DjD1.B4.eBondCon1.f = D1.Dd.DjD1.BG2Heat1.BondCon1.f;
//   D1.Dd.DjD1.B4.eBondCon1.e = D1.Dd.DjD1.BG2Heat1.BondCon1.e;
//   D1.Dd.DjD1.BG2Heat1.port_b.Q_flow + (-D1.Dd.DjD1.heatPort.Q_flow) = 0.0;
//   D1.Dd.DjD1.B4.fBondCon1.d = D1.Dd.DjD1.DjD1.BondCon2.d;
//   D1.Dd.DjD1.B4.fBondCon1.f = D1.Dd.DjD1.DjD1.BondCon2.f;
//   D1.Dd.DjD1.B4.fBondCon1.e = D1.Dd.DjD1.DjD1.BondCon2.e;
//   D1.Dd.DjD1.B3.BondCon2.d = D1.Dd.DjD1.DjD1.BondCon1.d;
//   D1.Dd.DjD1.B3.BondCon2.f = D1.Dd.DjD1.DjD1.BondCon1.f;
//   D1.Dd.DjD1.B3.BondCon2.e = D1.Dd.DjD1.DjD1.BondCon1.e;
//   D1.Dd.Gj1.BG2El1.n.i + (-D1.Dd.Gj1.n.i) = 0.0;
//   D1.Dd.Gj1.El2BG1.p.i + (-D1.Dd.Gj1.p.i) = 0.0;
//   D1.Dd.Gj1.B2.BondCon2.d = D1.Dd.Gj1.BG2El1.BondCon1.d;
//   D1.Dd.Gj1.B2.BondCon2.f = D1.Dd.Gj1.BG2El1.BondCon1.f;
//   D1.Dd.Gj1.B2.BondCon2.e = D1.Dd.Gj1.BG2El1.BondCon1.e;
//   D1.Dd.Gj1.B1.BondCon1.d = D1.Dd.Gj1.El2BG1.BondCon1.d;
//   D1.Dd.Gj1.B1.BondCon1.f = D1.Dd.Gj1.El2BG1.BondCon1.f;
//   D1.Dd.Gj1.B1.BondCon1.e = D1.Dd.Gj1.El2BG1.BondCon1.e;
//   D1.Dd.Gj1.B2.BondCon1.d = D1.Dd.Gj1.J1p3_1.BondCon2.d;
//   D1.Dd.Gj1.B2.BondCon1.f = D1.Dd.Gj1.J1p3_1.BondCon2.f;
//   D1.Dd.Gj1.B2.BondCon1.e = D1.Dd.Gj1.J1p3_1.BondCon2.e;
//   D1.Dd.Gj1.B1.BondCon2.d = D1.Dd.Gj1.J1p3_1.BondCon1.d;
//   D1.Dd.Gj1.B1.BondCon2.f = D1.Dd.Gj1.J1p3_1.BondCon1.f;
//   D1.Dd.Gj1.B1.BondCon2.e = D1.Dd.Gj1.J1p3_1.BondCon1.e;
//   D1.Dd.Gj1.B3.BondCon1.d = D1.Dd.Gj1.J1p3_1.BondCon3.d;
//   D1.Dd.Gj1.B3.BondCon1.f = D1.Dd.Gj1.J1p3_1.BondCon3.f;
//   D1.Dd.Gj1.B3.BondCon1.e = D1.Dd.Gj1.J1p3_1.BondCon3.e;
//   D1.Dd.Gj1.B3.BondCon2.d = D1.Dd.Gj1.Gj1.BondCon1.d;
//   D1.Dd.Gj1.B3.BondCon2.f = D1.Dd.Gj1.Gj1.BondCon1.f;
//   D1.Dd.Gj1.B3.BondCon2.e = D1.Dd.Gj1.Gj1.BondCon1.e;
//   D1.Dd.Vd.BG2El1.n.i + (-D1.Dd.Vd.n.i) = 0.0;
//   D1.Dd.Vd.El2BG1.p.i + (-D1.Dd.Vd.p.i) = 0.0;
//   D1.Dd.Vd.B2.BondCon2.d = D1.Dd.Vd.BG2El1.BondCon1.d;
//   D1.Dd.Vd.B2.BondCon2.f = D1.Dd.Vd.BG2El1.BondCon1.f;
//   D1.Dd.Vd.B2.BondCon2.e = D1.Dd.Vd.BG2El1.BondCon1.e;
//   D1.Dd.Vd.B1.BondCon1.d = D1.Dd.Vd.El2BG1.BondCon1.d;
//   D1.Dd.Vd.B1.BondCon1.f = D1.Dd.Vd.El2BG1.BondCon1.f;
//   D1.Dd.Vd.B1.BondCon1.e = D1.Dd.Vd.El2BG1.BondCon1.e;
//   D1.Dd.Vd.B2.BondCon1.d = D1.Dd.Vd.J1p3_1.BondCon2.d;
//   D1.Dd.Vd.B2.BondCon1.f = D1.Dd.Vd.J1p3_1.BondCon2.f;
//   D1.Dd.Vd.B2.BondCon1.e = D1.Dd.Vd.J1p3_1.BondCon2.e;
//   D1.Dd.Vd.B1.BondCon2.d = D1.Dd.Vd.J1p3_1.BondCon1.d;
//   D1.Dd.Vd.B1.BondCon2.f = D1.Dd.Vd.J1p3_1.BondCon1.f;
//   D1.Dd.Vd.B1.BondCon2.e = D1.Dd.Vd.J1p3_1.BondCon1.e;
//   D1.Dd.Vd.B3.BondCon1.d = D1.Dd.Vd.J1p3_1.BondCon3.d;
//   D1.Dd.Vd.B3.BondCon1.f = D1.Dd.Vd.J1p3_1.BondCon3.f;
//   D1.Dd.Vd.B3.BondCon1.e = D1.Dd.Vd.J1p3_1.BondCon3.e;
//   D1.Dd.Vd.B3.BondCon2.d = D1.Dd.Vd.De1.BondCon1.d;
//   D1.Dd.Vd.B3.BondCon2.f = D1.Dd.Vd.De1.BondCon1.f;
//   D1.Dd.Vd.B3.BondCon2.e = D1.Dd.Vd.De1.BondCon1.e;
//   D1.Dd.VarC1.BG2El1.n.i + (-D1.Dd.VarC1.n.i) = 0.0;
//   D1.Dd.VarC1.El2BG1.p.i + (-D1.Dd.VarC1.p.i) = 0.0;
//   D1.Dd.VarC1.B2.BondCon2.d = D1.Dd.VarC1.BG2El1.BondCon1.d;
//   D1.Dd.VarC1.B2.BondCon2.f = D1.Dd.VarC1.BG2El1.BondCon1.f;
//   D1.Dd.VarC1.B2.BondCon2.e = D1.Dd.VarC1.BG2El1.BondCon1.e;
//   D1.Dd.VarC1.B1.BondCon1.d = D1.Dd.VarC1.El2BG1.BondCon1.d;
//   D1.Dd.VarC1.B1.BondCon1.f = D1.Dd.VarC1.El2BG1.BondCon1.f;
//   D1.Dd.VarC1.B1.BondCon1.e = D1.Dd.VarC1.El2BG1.BondCon1.e;
//   D1.Dd.VarC1.B2.BondCon1.d = D1.Dd.VarC1.J1p3_1.BondCon2.d;
//   D1.Dd.VarC1.B2.BondCon1.f = D1.Dd.VarC1.J1p3_1.BondCon2.f;
//   D1.Dd.VarC1.B2.BondCon1.e = D1.Dd.VarC1.J1p3_1.BondCon2.e;
//   D1.Dd.VarC1.B1.BondCon2.d = D1.Dd.VarC1.J1p3_1.BondCon1.d;
//   D1.Dd.VarC1.B1.BondCon2.f = D1.Dd.VarC1.J1p3_1.BondCon1.f;
//   D1.Dd.VarC1.B1.BondCon2.e = D1.Dd.VarC1.J1p3_1.BondCon1.e;
//   D1.Dd.VarC1.B3.BondCon1.d = D1.Dd.VarC1.J1p3_1.BondCon3.d;
//   D1.Dd.VarC1.B3.BondCon1.f = D1.Dd.VarC1.J1p3_1.BondCon3.f;
//   D1.Dd.VarC1.B3.BondCon1.e = D1.Dd.VarC1.J1p3_1.BondCon3.e;
//   D1.Dd.VarC1.B3.BondCon2.d = D1.Dd.VarC1.mC1.BondCon1.d;
//   D1.Dd.VarC1.B3.BondCon2.f = D1.Dd.VarC1.mC1.BondCon1.f;
//   D1.Dd.VarC1.B3.BondCon2.e = D1.Dd.VarC1.mC1.BondCon1.e;
//   D1.Dd.Gnd1.B1.eBondCon1.d = D1.Dd.Gnd1.V0.BondCon1.d;
//   D1.Dd.Gnd1.B1.eBondCon1.f = D1.Dd.Gnd1.V0.BondCon1.f;
//   D1.Dd.Gnd1.B1.eBondCon1.e = D1.Dd.Gnd1.V0.BondCon1.e;
//   D1.Dd.Gnd1.B1.fBondCon1.d = D1.Dd.Gnd1.El2BG1.BondCon1.d;
//   D1.Dd.Gnd1.B1.fBondCon1.f = D1.Dd.Gnd1.El2BG1.BondCon1.f;
//   D1.Dd.Gnd1.B1.fBondCon1.e = D1.Dd.Gnd1.El2BG1.BondCon1.e;
//   D1.Dd.Gnd1.El2BG1.p.i + (-D1.Dd.Gnd1.p.i) = 0.0;
//   D1.Dd.Id.BG2El1.n.i + (-D1.Dd.Id.n.i) = 0.0;
//   D1.Dd.Id.El2BG1.p.i + (-D1.Dd.Id.p.i) = 0.0;
//   D1.Dd.Id.B3.BondCon1.d = D1.Dd.Id.J1p3_1.BondCon3.d;
//   D1.Dd.Id.B3.BondCon1.f = D1.Dd.Id.J1p3_1.BondCon3.f;
//   D1.Dd.Id.B3.BondCon1.e = D1.Dd.Id.J1p3_1.BondCon3.e;
//   D1.Dd.Id.B2.BondCon2.d = D1.Dd.Id.BG2El1.BondCon1.d;
//   D1.Dd.Id.B2.BondCon2.f = D1.Dd.Id.BG2El1.BondCon1.f;
//   D1.Dd.Id.B2.BondCon2.e = D1.Dd.Id.BG2El1.BondCon1.e;
//   D1.Dd.Id.B1.BondCon1.d = D1.Dd.Id.El2BG1.BondCon1.d;
//   D1.Dd.Id.B1.BondCon1.f = D1.Dd.Id.El2BG1.BondCon1.f;
//   D1.Dd.Id.B1.BondCon1.e = D1.Dd.Id.El2BG1.BondCon1.e;
//   D1.Dd.Id.B2.BondCon1.d = D1.Dd.Id.J1p3_1.BondCon2.d;
//   D1.Dd.Id.B2.BondCon1.f = D1.Dd.Id.J1p3_1.BondCon2.f;
//   D1.Dd.Id.B2.BondCon1.e = D1.Dd.Id.J1p3_1.BondCon2.e;
//   D1.Dd.Id.B1.BondCon2.d = D1.Dd.Id.J1p3_1.BondCon1.d;
//   D1.Dd.Id.B1.BondCon2.f = D1.Dd.Id.J1p3_1.BondCon1.f;
//   D1.Dd.Id.B1.BondCon2.e = D1.Dd.Id.J1p3_1.BondCon1.e;
//   D1.Dd.Id.B3.BondCon2.d = D1.Dd.Id.Df1.BondCon1.d;
//   D1.Dd.Id.B3.BondCon2.f = D1.Dd.Id.Df1.BondCon1.f;
//   D1.Dd.Id.B3.BondCon2.e = D1.Dd.Id.Df1.BondCon1.e;
//   D1.Dd.VCV1.Gain1.y = D1.Dd.VCV1.mSe1.s;
//   D1.Dd.VCV1.BG2El1.n.i + (-D1.Dd.VCV1.n2.i) = 0.0;
//   D1.Dd.VCV1.El2BG2.p.i + (-D1.Dd.VCV1.p2.i) = 0.0;
//   D1.Dd.VCV1.BG2El2.n.i + (-D1.Dd.VCV1.n1.i) = 0.0;
//   D1.Dd.VCV1.El2BG1.p.i + (-D1.Dd.VCV1.p1.i) = 0.0;
//   D1.Dd.VCV1.B4.fBondCon1.d = D1.Dd.VCV1.J1p3_2.BondCon3.d;
//   D1.Dd.VCV1.B4.fBondCon1.f = D1.Dd.VCV1.J1p3_2.BondCon3.f;
//   D1.Dd.VCV1.B4.fBondCon1.e = D1.Dd.VCV1.J1p3_2.BondCon3.e;
//   D1.Dd.VCV1.B4.eBondCon1.d = D1.Dd.VCV1.mSe1.BondCon1.d;
//   D1.Dd.VCV1.B4.eBondCon1.f = D1.Dd.VCV1.mSe1.BondCon1.f;
//   D1.Dd.VCV1.B4.eBondCon1.e = D1.Dd.VCV1.mSe1.BondCon1.e;
//   D1.Dd.VCV1.B3.eBondCon1.d = D1.Dd.VCV1.J1p3_1.BondCon3.d;
//   D1.Dd.VCV1.B3.eBondCon1.f = D1.Dd.VCV1.J1p3_1.BondCon3.f;
//   D1.Dd.VCV1.B3.eBondCon1.e = D1.Dd.VCV1.J1p3_1.BondCon3.e;
//   D1.Dd.VCV1.B3.fBondCon1.d = D1.Dd.VCV1.De1.BondCon1.d;
//   D1.Dd.VCV1.B3.fBondCon1.f = D1.Dd.VCV1.De1.BondCon1.f;
//   D1.Dd.VCV1.B3.fBondCon1.e = D1.Dd.VCV1.De1.BondCon1.e;
//   D1.Dd.VCV1.De1.OutPort1 = D1.Dd.VCV1.Gain1.u;
//   D1.Dd.VCV1.B2.fBondCon1.d = D1.Dd.VCV1.J1p3_1.BondCon1.d;
//   D1.Dd.VCV1.B2.fBondCon1.f = D1.Dd.VCV1.J1p3_1.BondCon1.f;
//   D1.Dd.VCV1.B2.fBondCon1.e = D1.Dd.VCV1.J1p3_1.BondCon1.e;
//   D1.Dd.VCV1.B2.eBondCon1.d = D1.Dd.VCV1.BG2El2.BondCon1.d;
//   D1.Dd.VCV1.B2.eBondCon1.f = D1.Dd.VCV1.BG2El2.BondCon1.f;
//   D1.Dd.VCV1.B2.eBondCon1.e = D1.Dd.VCV1.BG2El2.BondCon1.e;
//   D1.Dd.VCV1.B1.fBondCon1.d = D1.Dd.VCV1.J1p3_1.BondCon2.d;
//   D1.Dd.VCV1.B1.fBondCon1.f = D1.Dd.VCV1.J1p3_1.BondCon2.f;
//   D1.Dd.VCV1.B1.fBondCon1.e = D1.Dd.VCV1.J1p3_1.BondCon2.e;
//   D1.Dd.VCV1.B1.eBondCon1.d = D1.Dd.VCV1.El2BG1.BondCon1.d;
//   D1.Dd.VCV1.B1.eBondCon1.f = D1.Dd.VCV1.El2BG1.BondCon1.f;
//   D1.Dd.VCV1.B1.eBondCon1.e = D1.Dd.VCV1.El2BG1.BondCon1.e;
//   D1.Dd.VCV1.B5.BondCon1.d = D1.Dd.VCV1.J1p3_2.BondCon2.d;
//   D1.Dd.VCV1.B5.BondCon1.f = D1.Dd.VCV1.J1p3_2.BondCon2.f;
//   D1.Dd.VCV1.B5.BondCon1.e = D1.Dd.VCV1.J1p3_2.BondCon2.e;
//   D1.Dd.VCV1.B5.BondCon2.d = D1.Dd.VCV1.El2BG2.BondCon1.d;
//   D1.Dd.VCV1.B5.BondCon2.f = D1.Dd.VCV1.El2BG2.BondCon1.f;
//   D1.Dd.VCV1.B5.BondCon2.e = D1.Dd.VCV1.El2BG2.BondCon1.e;
//   D1.Dd.VCV1.B6.BondCon2.d = D1.Dd.VCV1.J1p3_2.BondCon1.d;
//   D1.Dd.VCV1.B6.BondCon2.f = D1.Dd.VCV1.J1p3_2.BondCon1.f;
//   D1.Dd.VCV1.B6.BondCon2.e = D1.Dd.VCV1.J1p3_2.BondCon1.e;
//   D1.Dd.VCV1.B6.BondCon1.d = D1.Dd.VCV1.BG2El1.BondCon1.d;
//   D1.Dd.VCV1.B6.BondCon1.f = D1.Dd.VCV1.BG2El1.BondCon1.f;
//   D1.Dd.VCV1.B6.BondCon1.e = D1.Dd.VCV1.BG2El1.BondCon1.e;
//   D1.T_nom.BG2Heat1.port_b.Q_flow + (-D1.T_nom.port.Q_flow) = 0.0;
//   D1.T_nom.B1.eBondCon1.d = D1.T_nom.Tabs.BondCon1.d;
//   D1.T_nom.B1.eBondCon1.f = D1.T_nom.Tabs.BondCon1.f;
//   D1.T_nom.B1.eBondCon1.e = D1.T_nom.Tabs.BondCon1.e;
//   D1.T_nom.B1.fBondCon1.d = D1.T_nom.BG2Heat1.BondCon1.d;
//   D1.T_nom.B1.fBondCon1.f = D1.T_nom.BG2Heat1.BondCon1.f;
//   D1.T_nom.B1.fBondCon1.e = D1.T_nom.BG2Heat1.BondCon1.e;
//   D1.Sw1.B2.BondCon2.d = D1.Sw1.BG2Heat2.BondCon1.d;
//   D1.Sw1.B2.BondCon2.f = D1.Sw1.BG2Heat2.BondCon1.f;
//   D1.Sw1.B2.BondCon2.e = D1.Sw1.BG2Heat2.BondCon1.e;
//   D1.Sw1.BG2Heat2.port_b.Q_flow + (-D1.Sw1.n2.Q_flow) = 0.0;
//   D1.Sw1.B3.BondCon2.d = D1.Sw1.BG2Heat1.BondCon1.d;
//   D1.Sw1.B3.BondCon2.f = D1.Sw1.BG2Heat1.BondCon1.f;
//   D1.Sw1.B3.BondCon2.e = D1.Sw1.BG2Heat1.BondCon1.e;
//   D1.Sw1.BG2Heat1.port_b.Q_flow + (-D1.Sw1.n1.Q_flow) = 0.0;
//   D1.Sw1.B1.BondCon1.d = D1.Sw1.Heat2BG1.BondCon1.d;
//   D1.Sw1.B1.BondCon1.f = D1.Sw1.Heat2BG1.BondCon1.f;
//   D1.Sw1.B1.BondCon1.e = D1.Sw1.Heat2BG1.BondCon1.e;
//   D1.Sw1.Heat2BG1.port_a.Q_flow + (-D1.Sw1.p.Q_flow) = 0.0;
//   D1.Sw1.Sw1.Sw1.BooleanInPort1 = D1.Sw1.Sw1.control;
//   D1.Sw1.Sw1.Sw1.BooleanInPort1 = D1.Sw1.control;
//   D1.Sw1.B1.BondCon2.d = D1.Sw1.Sw1.J0p3_1.BondCon2.d;
//   D1.Sw1.B1.BondCon2.d = D1.Sw1.Sw1.p.d;
//   D1.Sw1.B1.BondCon2.f = D1.Sw1.Sw1.J0p3_1.BondCon2.f;
//   D1.Sw1.B1.BondCon2.f = D1.Sw1.Sw1.p.f;
//   D1.Sw1.B1.BondCon2.e = D1.Sw1.Sw1.J0p3_1.BondCon2.e;
//   D1.Sw1.B1.BondCon2.e = D1.Sw1.Sw1.p.e;
//   D1.Sw1.B2.BondCon1.d = D1.Sw1.Sw1.j0p2_1.BondCon2.d;
//   D1.Sw1.B2.BondCon1.d = D1.Sw1.Sw1.n2.d;
//   D1.Sw1.B2.BondCon1.f = D1.Sw1.Sw1.j0p2_1.BondCon2.f;
//   D1.Sw1.B2.BondCon1.f = D1.Sw1.Sw1.n2.f;
//   D1.Sw1.B2.BondCon1.e = D1.Sw1.Sw1.j0p2_1.BondCon2.e;
//   D1.Sw1.B2.BondCon1.e = D1.Sw1.Sw1.n2.e;
//   D1.Sw1.B3.BondCon1.d = D1.Sw1.Sw1.j0p2_2.BondCon2.d;
//   D1.Sw1.B3.BondCon1.d = D1.Sw1.Sw1.n1.d;
//   D1.Sw1.B3.BondCon1.f = D1.Sw1.Sw1.j0p2_2.BondCon2.f;
//   D1.Sw1.B3.BondCon1.f = D1.Sw1.Sw1.n1.f;
//   D1.Sw1.B3.BondCon1.e = D1.Sw1.Sw1.j0p2_2.BondCon2.e;
//   D1.Sw1.B3.BondCon1.e = D1.Sw1.Sw1.n1.e;
//   D1.Sw1.Sw1.B4.BondCon2.d = D1.Sw1.Sw1.j0p2_1.BondCon1.d;
//   D1.Sw1.Sw1.B4.BondCon2.f = D1.Sw1.Sw1.j0p2_1.BondCon1.f;
//   D1.Sw1.Sw1.B4.BondCon2.e = D1.Sw1.Sw1.j0p2_1.BondCon1.e;
//   D1.Sw1.Sw1.B2.BondCon2.d = D1.Sw1.Sw1.j0p2_2.BondCon1.d;
//   D1.Sw1.Sw1.B2.BondCon2.f = D1.Sw1.Sw1.j0p2_2.BondCon1.f;
//   D1.Sw1.Sw1.B2.BondCon2.e = D1.Sw1.Sw1.j0p2_2.BondCon1.e;
//   D1.Sw1.Sw1.B1.BondCon1.d = D1.Sw1.Sw1.J0p3_1.BondCon3.d;
//   D1.Sw1.Sw1.B1.BondCon1.f = D1.Sw1.Sw1.J0p3_1.BondCon3.f;
//   D1.Sw1.Sw1.B1.BondCon1.e = D1.Sw1.Sw1.J0p3_1.BondCon3.e;
//   D1.Sw1.Sw1.B1.BondCon2.d = D1.Sw1.Sw1.J1p3_1.BondCon1.d;
//   D1.Sw1.Sw1.B1.BondCon2.f = D1.Sw1.Sw1.J1p3_1.BondCon1.f;
//   D1.Sw1.Sw1.B1.BondCon2.e = D1.Sw1.Sw1.J1p3_1.BondCon1.e;
//   D1.Sw1.Sw1.B2.BondCon1.d = D1.Sw1.Sw1.J1p3_1.BondCon2.d;
//   D1.Sw1.Sw1.B2.BondCon1.f = D1.Sw1.Sw1.J1p3_1.BondCon2.f;
//   D1.Sw1.Sw1.B2.BondCon1.e = D1.Sw1.Sw1.J1p3_1.BondCon2.e;
//   D1.Sw1.Sw1.B4.BondCon1.d = D1.Sw1.Sw1.J0p3_1.BondCon1.d;
//   D1.Sw1.Sw1.B4.BondCon1.f = D1.Sw1.Sw1.J0p3_1.BondCon1.f;
//   D1.Sw1.Sw1.B4.BondCon1.e = D1.Sw1.Sw1.J0p3_1.BondCon1.e;
//   D1.Sw1.Sw1.B3.BondCon1.d = D1.Sw1.Sw1.J1p3_1.BondCon3.d;
//   D1.Sw1.Sw1.B3.BondCon1.f = D1.Sw1.Sw1.J1p3_1.BondCon3.f;
//   D1.Sw1.Sw1.B3.BondCon1.e = D1.Sw1.Sw1.J1p3_1.BondCon3.e;
//   D1.Sw1.Sw1.B3.BondCon2.d = D1.Sw1.Sw1.Sw1.BondCon1.d;
//   D1.Sw1.Sw1.B3.BondCon2.f = D1.Sw1.Sw1.Sw1.BondCon1.f;
//   D1.Sw1.Sw1.B3.BondCon2.e = D1.Sw1.Sw1.Sw1.BondCon1.e;
//   D1.vd.BG2El1.n.i + (-D1.vd.n.i) = 0.0;
//   D1.vd.El2BG1.p.i + (-D1.vd.p.i) = 0.0;
//   D1.vd.B2.BondCon2.d = D1.vd.BG2El1.BondCon1.d;
//   D1.vd.B2.BondCon2.f = D1.vd.BG2El1.BondCon1.f;
//   D1.vd.B2.BondCon2.e = D1.vd.BG2El1.BondCon1.e;
//   D1.vd.B1.BondCon1.d = D1.vd.El2BG1.BondCon1.d;
//   D1.vd.B1.BondCon1.f = D1.vd.El2BG1.BondCon1.f;
//   D1.vd.B1.BondCon1.e = D1.vd.El2BG1.BondCon1.e;
//   D1.vd.B2.BondCon1.d = D1.vd.J1p3_1.BondCon2.d;
//   D1.vd.B2.BondCon1.f = D1.vd.J1p3_1.BondCon2.f;
//   D1.vd.B2.BondCon1.e = D1.vd.J1p3_1.BondCon2.e;
//   D1.vd.B1.BondCon2.d = D1.vd.J1p3_1.BondCon1.d;
//   D1.vd.B1.BondCon2.f = D1.vd.J1p3_1.BondCon1.f;
//   D1.vd.B1.BondCon2.e = D1.vd.J1p3_1.BondCon1.e;
//   D1.vd.B3.BondCon1.d = D1.vd.J1p3_1.BondCon3.d;
//   D1.vd.B3.BondCon1.f = D1.vd.J1p3_1.BondCon3.f;
//   D1.vd.B3.BondCon1.e = D1.vd.J1p3_1.BondCon3.e;
//   D1.vd.B3.BondCon2.d = D1.vd.De1.BondCon1.d;
//   D1.vd.B3.BondCon2.f = D1.vd.De1.BondCon1.f;
//   D1.vd.B3.BondCon2.e = D1.vd.De1.BondCon1.e;
//   D1.Id.BG2Heat1.port_b.Q_flow + (-D1.Id.heatPort.Q_flow) = 0.0;
//   D1.Id.BG2El1.n.i + (-D1.Id.n.i) = 0.0;
//   D1.Id.El2BG1.p.i + (-D1.Id.p.i) = 0.0;
//   D1.Id.B2.BondCon1.d = D1.Id.J1p3_1.BondCon1.d;
//   D1.Id.B2.BondCon1.f = D1.Id.J1p3_1.BondCon1.f;
//   D1.Id.B2.BondCon1.e = D1.Id.J1p3_1.BondCon1.e;
//   D1.Id.B2.BondCon2.d = D1.Id.El2BG1.BondCon1.d;
//   D1.Id.B2.BondCon2.f = D1.Id.El2BG1.BondCon1.f;
//   D1.Id.B2.BondCon2.e = D1.Id.El2BG1.BondCon1.e;
//   D1.Id.B1.BondCon1.d = D1.Id.BG2El1.BondCon1.d;
//   D1.Id.B1.BondCon1.f = D1.Id.BG2El1.BondCon1.f;
//   D1.Id.B1.BondCon1.e = D1.Id.BG2El1.BondCon1.e;
//   D1.Id.B1.BondCon2.d = D1.Id.J1p3_1.BondCon2.d;
//   D1.Id.B1.BondCon2.f = D1.Id.J1p3_1.BondCon2.f;
//   D1.Id.B1.BondCon2.e = D1.Id.J1p3_1.BondCon2.e;
//   D1.Id.B4.eBondCon1.d = D1.Id.BG2Heat1.BondCon1.d;
//   D1.Id.B4.eBondCon1.f = D1.Id.BG2Heat1.BondCon1.f;
//   D1.Id.B4.eBondCon1.e = D1.Id.BG2Heat1.BondCon1.e;
//   D1.Id.B3.eBondCon1.d = D1.Id.J1p3_1.BondCon3.d;
//   D1.Id.B3.eBondCon1.f = D1.Id.J1p3_1.BondCon3.f;
//   D1.Id.B3.eBondCon1.e = D1.Id.J1p3_1.BondCon3.e;
//   D1.Id.B3.fBondCon1.d = D1.Id.I1.BondCon2.d;
//   D1.Id.B3.fBondCon1.f = D1.Id.I1.BondCon2.f;
//   D1.Id.B3.fBondCon1.e = D1.Id.I1.BondCon2.e;
//   D1.Id.B4.fBondCon1.d = D1.Id.I1.BondCon1.d;
//   D1.Id.B4.fBondCon1.f = D1.Id.I1.BondCon1.f;
//   D1.Id.B4.fBondCon1.e = D1.Id.I1.BondCon1.e;
//   D1.RS1.B6.eBondCon1.d = D1.RS1.T_nom.BondCon1.d;
//   D1.RS1.B6.eBondCon1.f = D1.RS1.T_nom.BondCon1.f;
//   D1.RS1.B6.eBondCon1.e = D1.RS1.T_nom.BondCon1.e;
//   D1.RS1.BG2El1.n.i + (-D1.RS1.n.i) = 0.0;
//   D1.RS1.El2BG1.p.i + (-D1.RS1.p.i) = 0.0;
//   D1.RS1.B3.BondCon1.d = D1.RS1.J1p3_1.BondCon3.d;
//   D1.RS1.B3.BondCon1.f = D1.RS1.J1p3_1.BondCon3.f;
//   D1.RS1.B3.BondCon1.e = D1.RS1.J1p3_1.BondCon3.e;
//   D1.RS1.B2.BondCon2.d = D1.RS1.BG2El1.BondCon1.d;
//   D1.RS1.B2.BondCon2.f = D1.RS1.BG2El1.BondCon1.f;
//   D1.RS1.B2.BondCon2.e = D1.RS1.BG2El1.BondCon1.e;
//   D1.RS1.B1.BondCon1.d = D1.RS1.El2BG1.BondCon1.d;
//   D1.RS1.B1.BondCon1.f = D1.RS1.El2BG1.BondCon1.f;
//   D1.RS1.B1.BondCon1.e = D1.RS1.El2BG1.BondCon1.e;
//   D1.RS1.B2.BondCon1.d = D1.RS1.J1p3_1.BondCon2.d;
//   D1.RS1.B2.BondCon1.f = D1.RS1.J1p3_1.BondCon2.f;
//   D1.RS1.B2.BondCon1.e = D1.RS1.J1p3_1.BondCon2.e;
//   D1.RS1.B1.BondCon2.d = D1.RS1.J1p3_1.BondCon1.d;
//   D1.RS1.B1.BondCon2.f = D1.RS1.J1p3_1.BondCon1.f;
//   D1.RS1.B1.BondCon2.e = D1.RS1.J1p3_1.BondCon1.e;
//   D1.RS1.B3.BondCon2.d = D1.RS1.R1.BondCon1.d;
//   D1.RS1.B3.BondCon2.f = D1.RS1.R1.BondCon1.f;
//   D1.RS1.B3.BondCon2.e = D1.RS1.R1.BondCon1.e;
//   D1.RS1.B4.fBondCon1.d = D1.RS1.R1.BondCon2.d;
//   D1.RS1.B4.fBondCon1.f = D1.RS1.R1.BondCon2.f;
//   D1.RS1.B4.fBondCon1.e = D1.RS1.R1.BondCon2.e;
//   D1.RS1.B4.eBondCon1.d = D1.RS1.Sw1.J0p3_1.BondCon2.d;
//   D1.RS1.B4.eBondCon1.d = D1.RS1.Sw1.p.d;
//   D1.RS1.B4.eBondCon1.f = D1.RS1.Sw1.J0p3_1.BondCon2.f;
//   D1.RS1.B4.eBondCon1.f = D1.RS1.Sw1.p.f;
//   D1.RS1.B4.eBondCon1.e = D1.RS1.Sw1.J0p3_1.BondCon2.e;
//   D1.RS1.B4.eBondCon1.e = D1.RS1.Sw1.p.e;
//   D1.RS1.B6.fBondCon1.d = D1.RS1.Sw1.j0p2_2.BondCon2.d;
//   D1.RS1.B6.fBondCon1.d = D1.RS1.Sw1.n1.d;
//   D1.RS1.B6.fBondCon1.f = D1.RS1.Sw1.j0p2_2.BondCon2.f;
//   D1.RS1.B6.fBondCon1.f = D1.RS1.Sw1.n1.f;
//   D1.RS1.B6.fBondCon1.e = D1.RS1.Sw1.j0p2_2.BondCon2.e;
//   D1.RS1.B6.fBondCon1.e = D1.RS1.Sw1.n1.e;
//   D1.RS1.B5.fBondCon1.d = D1.RS1.Sw1.j0p2_1.BondCon2.d;
//   D1.RS1.B5.fBondCon1.d = D1.RS1.Sw1.n2.d;
//   D1.RS1.B5.fBondCon1.f = D1.RS1.Sw1.j0p2_1.BondCon2.f;
//   D1.RS1.B5.fBondCon1.f = D1.RS1.Sw1.n2.f;
//   D1.RS1.B5.fBondCon1.e = D1.RS1.Sw1.j0p2_1.BondCon2.e;
//   D1.RS1.B5.fBondCon1.e = D1.RS1.Sw1.n2.e;
//   D1.RS1.B5.eBondCon1.d = D1.RS1.BG2Heat1.BondCon1.d;
//   D1.RS1.B5.eBondCon1.f = D1.RS1.BG2Heat1.BondCon1.f;
//   D1.RS1.B5.eBondCon1.e = D1.RS1.BG2Heat1.BondCon1.e;
//   D1.RS1.BG2Heat1.port_b.Q_flow + (-D1.RS1.heatPort.Q_flow) = 0.0;
//   D1.RS1.Sw1.B4.BondCon2.d = D1.RS1.Sw1.j0p2_1.BondCon1.d;
//   D1.RS1.Sw1.B4.BondCon2.f = D1.RS1.Sw1.j0p2_1.BondCon1.f;
//   D1.RS1.Sw1.B4.BondCon2.e = D1.RS1.Sw1.j0p2_1.BondCon1.e;
//   D1.RS1.Sw1.B2.BondCon2.d = D1.RS1.Sw1.j0p2_2.BondCon1.d;
//   D1.RS1.Sw1.B2.BondCon2.f = D1.RS1.Sw1.j0p2_2.BondCon1.f;
//   D1.RS1.Sw1.B2.BondCon2.e = D1.RS1.Sw1.j0p2_2.BondCon1.e;
//   D1.RS1.Sw1.B1.BondCon1.d = D1.RS1.Sw1.J0p3_1.BondCon3.d;
//   D1.RS1.Sw1.B1.BondCon1.f = D1.RS1.Sw1.J0p3_1.BondCon3.f;
//   D1.RS1.Sw1.B1.BondCon1.e = D1.RS1.Sw1.J0p3_1.BondCon3.e;
//   D1.RS1.Sw1.B1.BondCon2.d = D1.RS1.Sw1.J1p3_1.BondCon1.d;
//   D1.RS1.Sw1.B1.BondCon2.f = D1.RS1.Sw1.J1p3_1.BondCon1.f;
//   D1.RS1.Sw1.B1.BondCon2.e = D1.RS1.Sw1.J1p3_1.BondCon1.e;
//   D1.RS1.Sw1.B2.BondCon1.d = D1.RS1.Sw1.J1p3_1.BondCon2.d;
//   D1.RS1.Sw1.B2.BondCon1.f = D1.RS1.Sw1.J1p3_1.BondCon2.f;
//   D1.RS1.Sw1.B2.BondCon1.e = D1.RS1.Sw1.J1p3_1.BondCon2.e;
//   D1.RS1.Sw1.B4.BondCon1.d = D1.RS1.Sw1.J0p3_1.BondCon1.d;
//   D1.RS1.Sw1.B4.BondCon1.f = D1.RS1.Sw1.J0p3_1.BondCon1.f;
//   D1.RS1.Sw1.B4.BondCon1.e = D1.RS1.Sw1.J0p3_1.BondCon1.e;
//   D1.RS1.Sw1.B3.BondCon1.d = D1.RS1.Sw1.J1p3_1.BondCon3.d;
//   D1.RS1.Sw1.B3.BondCon1.f = D1.RS1.Sw1.J1p3_1.BondCon3.f;
//   D1.RS1.Sw1.B3.BondCon1.e = D1.RS1.Sw1.J1p3_1.BondCon3.e;
//   D1.RS1.Sw1.B3.BondCon2.d = D1.RS1.Sw1.Sw1.BondCon1.d;
//   D1.RS1.Sw1.B3.BondCon2.f = D1.RS1.Sw1.Sw1.BondCon1.f;
//   D1.RS1.Sw1.B3.BondCon2.e = D1.RS1.Sw1.Sw1.BondCon1.e;
//   D1.RS1.Sw1.Sw1.BooleanInPort1 = D1.RS1.Sw1.control;
//   R1.B6.eBondCon1.d = R1.T_nom.BondCon1.d;
//   R1.B6.eBondCon1.f = R1.T_nom.BondCon1.f;
//   R1.B6.eBondCon1.e = R1.T_nom.BondCon1.e;
//   R1.BG2El1.n.i + (-R1.n.i) = 0.0;
//   R1.El2BG1.p.i + (-R1.p.i) = 0.0;
//   R1.B3.BondCon1.d = R1.J1p3_1.BondCon3.d;
//   R1.B3.BondCon1.f = R1.J1p3_1.BondCon3.f;
//   R1.B3.BondCon1.e = R1.J1p3_1.BondCon3.e;
//   R1.B2.BondCon2.d = R1.BG2El1.BondCon1.d;
//   R1.B2.BondCon2.f = R1.BG2El1.BondCon1.f;
//   R1.B2.BondCon2.e = R1.BG2El1.BondCon1.e;
//   R1.B1.BondCon1.d = R1.El2BG1.BondCon1.d;
//   R1.B1.BondCon1.f = R1.El2BG1.BondCon1.f;
//   R1.B1.BondCon1.e = R1.El2BG1.BondCon1.e;
//   R1.B2.BondCon1.d = R1.J1p3_1.BondCon2.d;
//   R1.B2.BondCon1.f = R1.J1p3_1.BondCon2.f;
//   R1.B2.BondCon1.e = R1.J1p3_1.BondCon2.e;
//   R1.B1.BondCon2.d = R1.J1p3_1.BondCon1.d;
//   R1.B1.BondCon2.f = R1.J1p3_1.BondCon1.f;
//   R1.B1.BondCon2.e = R1.J1p3_1.BondCon1.e;
//   R1.B3.BondCon2.d = R1.R1.BondCon1.d;
//   R1.B3.BondCon2.f = R1.R1.BondCon1.f;
//   R1.B3.BondCon2.e = R1.R1.BondCon1.e;
//   R1.B4.fBondCon1.d = R1.R1.BondCon2.d;
//   R1.B4.fBondCon1.f = R1.R1.BondCon2.f;
//   R1.B4.fBondCon1.e = R1.R1.BondCon2.e;
//   R1.B4.eBondCon1.d = R1.Sw1.J0p3_1.BondCon2.d;
//   R1.B4.eBondCon1.d = R1.Sw1.p.d;
//   R1.B4.eBondCon1.f = R1.Sw1.J0p3_1.BondCon2.f;
//   R1.B4.eBondCon1.f = R1.Sw1.p.f;
//   R1.B4.eBondCon1.e = R1.Sw1.J0p3_1.BondCon2.e;
//   R1.B4.eBondCon1.e = R1.Sw1.p.e;
//   R1.B6.fBondCon1.d = R1.Sw1.j0p2_2.BondCon2.d;
//   R1.B6.fBondCon1.d = R1.Sw1.n1.d;
//   R1.B6.fBondCon1.f = R1.Sw1.j0p2_2.BondCon2.f;
//   R1.B6.fBondCon1.f = R1.Sw1.n1.f;
//   R1.B6.fBondCon1.e = R1.Sw1.j0p2_2.BondCon2.e;
//   R1.B6.fBondCon1.e = R1.Sw1.n1.e;
//   R1.B5.fBondCon1.d = R1.Sw1.j0p2_1.BondCon2.d;
//   R1.B5.fBondCon1.d = R1.Sw1.n2.d;
//   R1.B5.fBondCon1.f = R1.Sw1.j0p2_1.BondCon2.f;
//   R1.B5.fBondCon1.f = R1.Sw1.n2.f;
//   R1.B5.fBondCon1.e = R1.Sw1.j0p2_1.BondCon2.e;
//   R1.B5.fBondCon1.e = R1.Sw1.n2.e;
//   R1.B5.eBondCon1.d = R1.BG2Heat1.BondCon1.d;
//   R1.B5.eBondCon1.f = R1.BG2Heat1.BondCon1.f;
//   R1.B5.eBondCon1.e = R1.BG2Heat1.BondCon1.e;
//   R1.BG2Heat1.port_b.Q_flow + (-R1.heatPort.Q_flow) = 0.0;
//   R1.Sw1.B4.BondCon2.d = R1.Sw1.j0p2_1.BondCon1.d;
//   R1.Sw1.B4.BondCon2.f = R1.Sw1.j0p2_1.BondCon1.f;
//   R1.Sw1.B4.BondCon2.e = R1.Sw1.j0p2_1.BondCon1.e;
//   R1.Sw1.B2.BondCon2.d = R1.Sw1.j0p2_2.BondCon1.d;
//   R1.Sw1.B2.BondCon2.f = R1.Sw1.j0p2_2.BondCon1.f;
//   R1.Sw1.B2.BondCon2.e = R1.Sw1.j0p2_2.BondCon1.e;
//   R1.Sw1.B1.BondCon1.d = R1.Sw1.J0p3_1.BondCon3.d;
//   R1.Sw1.B1.BondCon1.f = R1.Sw1.J0p3_1.BondCon3.f;
//   R1.Sw1.B1.BondCon1.e = R1.Sw1.J0p3_1.BondCon3.e;
//   R1.Sw1.B1.BondCon2.d = R1.Sw1.J1p3_1.BondCon1.d;
//   R1.Sw1.B1.BondCon2.f = R1.Sw1.J1p3_1.BondCon1.f;
//   R1.Sw1.B1.BondCon2.e = R1.Sw1.J1p3_1.BondCon1.e;
//   R1.Sw1.B2.BondCon1.d = R1.Sw1.J1p3_1.BondCon2.d;
//   R1.Sw1.B2.BondCon1.f = R1.Sw1.J1p3_1.BondCon2.f;
//   R1.Sw1.B2.BondCon1.e = R1.Sw1.J1p3_1.BondCon2.e;
//   R1.Sw1.B4.BondCon1.d = R1.Sw1.J0p3_1.BondCon1.d;
//   R1.Sw1.B4.BondCon1.f = R1.Sw1.J0p3_1.BondCon1.f;
//   R1.Sw1.B4.BondCon1.e = R1.Sw1.J0p3_1.BondCon1.e;
//   R1.Sw1.B3.BondCon1.d = R1.Sw1.J1p3_1.BondCon3.d;
//   R1.Sw1.B3.BondCon1.f = R1.Sw1.J1p3_1.BondCon3.f;
//   R1.Sw1.B3.BondCon1.e = R1.Sw1.J1p3_1.BondCon3.e;
//   R1.Sw1.B3.BondCon2.d = R1.Sw1.Sw1.BondCon1.d;
//   R1.Sw1.B3.BondCon2.f = R1.Sw1.Sw1.BondCon1.f;
//   R1.Sw1.B3.BondCon2.e = R1.Sw1.Sw1.BondCon1.e;
//   R1.Sw1.Sw1.BooleanInPort1 = R1.Sw1.control;
//   C1.BG2El1.n.i + (-C1.n.i) = 0.0;
//   C1.El2BG1.p.i + (-C1.p.i) = 0.0;
//   C1.B6.eBondCon1.d = C1.T_nom.BondCon1.d;
//   C1.B6.eBondCon1.f = C1.T_nom.BondCon1.f;
//   C1.B6.eBondCon1.e = C1.T_nom.BondCon1.e;
//   C1.B2.BondCon2.d = C1.BG2El1.BondCon1.d;
//   C1.B2.BondCon2.f = C1.BG2El1.BondCon1.f;
//   C1.B2.BondCon2.e = C1.BG2El1.BondCon1.e;
//   C1.B1.BondCon1.d = C1.El2BG1.BondCon1.d;
//   C1.B1.BondCon1.f = C1.El2BG1.BondCon1.f;
//   C1.B1.BondCon1.e = C1.El2BG1.BondCon1.e;
//   C1.B2.BondCon1.d = C1.J1p3_1.BondCon2.d;
//   C1.B2.BondCon1.f = C1.J1p3_1.BondCon2.f;
//   C1.B2.BondCon1.e = C1.J1p3_1.BondCon2.e;
//   C1.B1.BondCon2.d = C1.J1p3_1.BondCon1.d;
//   C1.B1.BondCon2.f = C1.J1p3_1.BondCon1.f;
//   C1.B1.BondCon2.e = C1.J1p3_1.BondCon1.e;
//   C1.B3.BondCon1.d = C1.J1p3_1.BondCon3.d;
//   C1.B3.BondCon1.f = C1.J1p3_1.BondCon3.f;
//   C1.B3.BondCon1.e = C1.J1p3_1.BondCon3.e;
//   C1.B3.BondCon2.d = C1.C1.BondCon1.d;
//   C1.B3.BondCon2.f = C1.C1.BondCon1.f;
//   C1.B3.BondCon2.e = C1.C1.BondCon1.e;
//   C1.B4.fBondCon1.d = C1.C1.BondCon2.d;
//   C1.B4.fBondCon1.f = C1.C1.BondCon2.f;
//   C1.B4.fBondCon1.e = C1.C1.BondCon2.e;
//   C1.B4.eBondCon1.d = C1.Sw1.J0p3_1.BondCon2.d;
//   C1.B4.eBondCon1.d = C1.Sw1.p.d;
//   C1.B4.eBondCon1.f = C1.Sw1.J0p3_1.BondCon2.f;
//   C1.B4.eBondCon1.f = C1.Sw1.p.f;
//   C1.B4.eBondCon1.e = C1.Sw1.J0p3_1.BondCon2.e;
//   C1.B4.eBondCon1.e = C1.Sw1.p.e;
//   C1.B6.fBondCon1.d = C1.Sw1.j0p2_2.BondCon2.d;
//   C1.B6.fBondCon1.d = C1.Sw1.n1.d;
//   C1.B6.fBondCon1.f = C1.Sw1.j0p2_2.BondCon2.f;
//   C1.B6.fBondCon1.f = C1.Sw1.n1.f;
//   C1.B6.fBondCon1.e = C1.Sw1.j0p2_2.BondCon2.e;
//   C1.B6.fBondCon1.e = C1.Sw1.n1.e;
//   C1.B5.fBondCon1.d = C1.Sw1.j0p2_1.BondCon2.d;
//   C1.B5.fBondCon1.d = C1.Sw1.n2.d;
//   C1.B5.fBondCon1.f = C1.Sw1.j0p2_1.BondCon2.f;
//   C1.B5.fBondCon1.f = C1.Sw1.n2.f;
//   C1.B5.fBondCon1.e = C1.Sw1.j0p2_1.BondCon2.e;
//   C1.B5.fBondCon1.e = C1.Sw1.n2.e;
//   C1.B5.eBondCon1.d = C1.BG2Heat1.BondCon1.d;
//   C1.B5.eBondCon1.f = C1.BG2Heat1.BondCon1.f;
//   C1.B5.eBondCon1.e = C1.BG2Heat1.BondCon1.e;
//   C1.BG2Heat1.port_b.Q_flow + (-C1.heatPort.Q_flow) = 0.0;
//   C1.Sw1.B4.BondCon2.d = C1.Sw1.j0p2_1.BondCon1.d;
//   C1.Sw1.B4.BondCon2.f = C1.Sw1.j0p2_1.BondCon1.f;
//   C1.Sw1.B4.BondCon2.e = C1.Sw1.j0p2_1.BondCon1.e;
//   C1.Sw1.B2.BondCon2.d = C1.Sw1.j0p2_2.BondCon1.d;
//   C1.Sw1.B2.BondCon2.f = C1.Sw1.j0p2_2.BondCon1.f;
//   C1.Sw1.B2.BondCon2.e = C1.Sw1.j0p2_2.BondCon1.e;
//   C1.Sw1.B1.BondCon1.d = C1.Sw1.J0p3_1.BondCon3.d;
//   C1.Sw1.B1.BondCon1.f = C1.Sw1.J0p3_1.BondCon3.f;
//   C1.Sw1.B1.BondCon1.e = C1.Sw1.J0p3_1.BondCon3.e;
//   C1.Sw1.B1.BondCon2.d = C1.Sw1.J1p3_1.BondCon1.d;
//   C1.Sw1.B1.BondCon2.f = C1.Sw1.J1p3_1.BondCon1.f;
//   C1.Sw1.B1.BondCon2.e = C1.Sw1.J1p3_1.BondCon1.e;
//   C1.Sw1.B2.BondCon1.d = C1.Sw1.J1p3_1.BondCon2.d;
//   C1.Sw1.B2.BondCon1.f = C1.Sw1.J1p3_1.BondCon2.f;
//   C1.Sw1.B2.BondCon1.e = C1.Sw1.J1p3_1.BondCon2.e;
//   C1.Sw1.B4.BondCon1.d = C1.Sw1.J0p3_1.BondCon1.d;
//   C1.Sw1.B4.BondCon1.f = C1.Sw1.J0p3_1.BondCon1.f;
//   C1.Sw1.B4.BondCon1.e = C1.Sw1.J0p3_1.BondCon1.e;
//   C1.Sw1.B3.BondCon1.d = C1.Sw1.J1p3_1.BondCon3.d;
//   C1.Sw1.B3.BondCon1.f = C1.Sw1.J1p3_1.BondCon3.f;
//   C1.Sw1.B3.BondCon1.e = C1.Sw1.J1p3_1.BondCon3.e;
//   C1.Sw1.B3.BondCon2.d = C1.Sw1.Sw1.BondCon1.d;
//   C1.Sw1.B3.BondCon2.f = C1.Sw1.Sw1.BondCon1.f;
//   C1.Sw1.B3.BondCon2.e = C1.Sw1.Sw1.BondCon1.e;
//   C1.Sw1.Sw1.BooleanInPort1 = C1.Sw1.control;
//   FixedTemperature1.BG2Heat1.port_b.Q_flow + (-FixedTemperature1.port.Q_flow) = 0.0;
//   FixedTemperature1.B1.eBondCon1.d = FixedTemperature1.Tabs.BondCon1.d;
//   FixedTemperature1.B1.eBondCon1.f = FixedTemperature1.Tabs.BondCon1.f;
//   FixedTemperature1.B1.eBondCon1.e = FixedTemperature1.Tabs.BondCon1.e;
//   FixedTemperature1.B1.fBondCon1.d = FixedTemperature1.BG2Heat1.BondCon1.d;
//   FixedTemperature1.B1.fBondCon1.f = FixedTemperature1.BG2Heat1.BondCon1.f;
//   FixedTemperature1.B1.fBondCon1.e = FixedTemperature1.BG2Heat1.BondCon1.e;
//   Vout.BG2El1.n.i + (-Vout.n.i) = 0.0;
//   Vout.El2BG1.p.i + (-Vout.p.i) = 0.0;
//   Vout.B2.BondCon2.d = Vout.BG2El1.BondCon1.d;
//   Vout.B2.BondCon2.f = Vout.BG2El1.BondCon1.f;
//   Vout.B2.BondCon2.e = Vout.BG2El1.BondCon1.e;
//   Vout.B1.BondCon1.d = Vout.El2BG1.BondCon1.d;
//   Vout.B1.BondCon1.f = Vout.El2BG1.BondCon1.f;
//   Vout.B1.BondCon1.e = Vout.El2BG1.BondCon1.e;
//   Vout.B2.BondCon1.d = Vout.J1p3_1.BondCon2.d;
//   Vout.B2.BondCon1.f = Vout.J1p3_1.BondCon2.f;
//   Vout.B2.BondCon1.e = Vout.J1p3_1.BondCon2.e;
//   Vout.B1.BondCon2.d = Vout.J1p3_1.BondCon1.d;
//   Vout.B1.BondCon2.f = Vout.J1p3_1.BondCon1.f;
//   Vout.B1.BondCon2.e = Vout.J1p3_1.BondCon1.e;
//   Vout.De1.OutPort1 = Vout.V;
//   Vout.B3.BondCon1.d = Vout.J1p3_1.BondCon3.d;
//   Vout.B3.BondCon1.f = Vout.J1p3_1.BondCon3.f;
//   Vout.B3.BondCon1.e = Vout.J1p3_1.BondCon3.e;
//   Vout.B3.BondCon2.d = Vout.De1.BondCon1.d;
//   Vout.B3.BondCon2.f = Vout.De1.BondCon1.f;
//   Vout.B3.BondCon2.e = Vout.De1.BondCon1.e;
//   Gnd1.B1.eBondCon1.d = Gnd1.V0.BondCon1.d;
//   Gnd1.B1.eBondCon1.f = Gnd1.V0.BondCon1.f;
//   Gnd1.B1.eBondCon1.e = Gnd1.V0.BondCon1.e;
//   Gnd1.B1.fBondCon1.d = Gnd1.El2BG1.BondCon1.d;
//   Gnd1.B1.fBondCon1.f = Gnd1.El2BG1.BondCon1.f;
//   Gnd1.B1.fBondCon1.e = Gnd1.El2BG1.BondCon1.e;
//   Gnd1.El2BG1.p.i + (-Gnd1.p.i) = 0.0;
//   L1.BG2El1.n.i + (-L1.n.i) = 0.0;
//   L1.El2BG1.p.i + (-L1.p.i) = 0.0;
//   L1.B6.eBondCon1.d = L1.T_nom.BondCon1.d;
//   L1.B6.eBondCon1.f = L1.T_nom.BondCon1.f;
//   L1.B6.eBondCon1.e = L1.T_nom.BondCon1.e;
//   L1.B3.BondCon1.d = L1.J1p3_1.BondCon3.d;
//   L1.B3.BondCon1.f = L1.J1p3_1.BondCon3.f;
//   L1.B3.BondCon1.e = L1.J1p3_1.BondCon3.e;
//   L1.B2.BondCon2.d = L1.BG2El1.BondCon1.d;
//   L1.B2.BondCon2.f = L1.BG2El1.BondCon1.f;
//   L1.B2.BondCon2.e = L1.BG2El1.BondCon1.e;
//   L1.B1.BondCon1.d = L1.El2BG1.BondCon1.d;
//   L1.B1.BondCon1.f = L1.El2BG1.BondCon1.f;
//   L1.B1.BondCon1.e = L1.El2BG1.BondCon1.e;
//   L1.B2.BondCon1.d = L1.J1p3_1.BondCon2.d;
//   L1.B2.BondCon1.f = L1.J1p3_1.BondCon2.f;
//   L1.B2.BondCon1.e = L1.J1p3_1.BondCon2.e;
//   L1.B1.BondCon2.d = L1.J1p3_1.BondCon1.d;
//   L1.B1.BondCon2.f = L1.J1p3_1.BondCon1.f;
//   L1.B1.BondCon2.e = L1.J1p3_1.BondCon1.e;
//   L1.B3.BondCon2.d = L1.L1.BondCon1.d;
//   L1.B3.BondCon2.f = L1.L1.BondCon1.f;
//   L1.B3.BondCon2.e = L1.L1.BondCon1.e;
//   L1.B4.fBondCon1.d = L1.L1.BondCon2.d;
//   L1.B4.fBondCon1.f = L1.L1.BondCon2.f;
//   L1.B4.fBondCon1.e = L1.L1.BondCon2.e;
//   L1.B4.eBondCon1.d = L1.Sw1.J0p3_1.BondCon2.d;
//   L1.B4.eBondCon1.d = L1.Sw1.p.d;
//   L1.B4.eBondCon1.f = L1.Sw1.J0p3_1.BondCon2.f;
//   L1.B4.eBondCon1.f = L1.Sw1.p.f;
//   L1.B4.eBondCon1.e = L1.Sw1.J0p3_1.BondCon2.e;
//   L1.B4.eBondCon1.e = L1.Sw1.p.e;
//   L1.B6.fBondCon1.d = L1.Sw1.j0p2_2.BondCon2.d;
//   L1.B6.fBondCon1.d = L1.Sw1.n1.d;
//   L1.B6.fBondCon1.f = L1.Sw1.j0p2_2.BondCon2.f;
//   L1.B6.fBondCon1.f = L1.Sw1.n1.f;
//   L1.B6.fBondCon1.e = L1.Sw1.j0p2_2.BondCon2.e;
//   L1.B6.fBondCon1.e = L1.Sw1.n1.e;
//   L1.B5.fBondCon1.d = L1.Sw1.j0p2_1.BondCon2.d;
//   L1.B5.fBondCon1.d = L1.Sw1.n2.d;
//   L1.B5.fBondCon1.f = L1.Sw1.j0p2_1.BondCon2.f;
//   L1.B5.fBondCon1.f = L1.Sw1.n2.f;
//   L1.B5.fBondCon1.e = L1.Sw1.j0p2_1.BondCon2.e;
//   L1.B5.fBondCon1.e = L1.Sw1.n2.e;
//   L1.B5.eBondCon1.d = L1.BG2Heat1.BondCon1.d;
//   L1.B5.eBondCon1.f = L1.BG2Heat1.BondCon1.f;
//   L1.B5.eBondCon1.e = L1.BG2Heat1.BondCon1.e;
//   L1.BG2Heat1.port_b.Q_flow + (-L1.heatPort.Q_flow) = 0.0;
//   L1.Sw1.B4.BondCon2.d = L1.Sw1.j0p2_1.BondCon1.d;
//   L1.Sw1.B4.BondCon2.f = L1.Sw1.j0p2_1.BondCon1.f;
//   L1.Sw1.B4.BondCon2.e = L1.Sw1.j0p2_1.BondCon1.e;
//   L1.Sw1.B2.BondCon2.d = L1.Sw1.j0p2_2.BondCon1.d;
//   L1.Sw1.B2.BondCon2.f = L1.Sw1.j0p2_2.BondCon1.f;
//   L1.Sw1.B2.BondCon2.e = L1.Sw1.j0p2_2.BondCon1.e;
//   L1.Sw1.B1.BondCon1.d = L1.Sw1.J0p3_1.BondCon3.d;
//   L1.Sw1.B1.BondCon1.f = L1.Sw1.J0p3_1.BondCon3.f;
//   L1.Sw1.B1.BondCon1.e = L1.Sw1.J0p3_1.BondCon3.e;
//   L1.Sw1.B1.BondCon2.d = L1.Sw1.J1p3_1.BondCon1.d;
//   L1.Sw1.B1.BondCon2.f = L1.Sw1.J1p3_1.BondCon1.f;
//   L1.Sw1.B1.BondCon2.e = L1.Sw1.J1p3_1.BondCon1.e;
//   L1.Sw1.B2.BondCon1.d = L1.Sw1.J1p3_1.BondCon2.d;
//   L1.Sw1.B2.BondCon1.f = L1.Sw1.J1p3_1.BondCon2.f;
//   L1.Sw1.B2.BondCon1.e = L1.Sw1.J1p3_1.BondCon2.e;
//   L1.Sw1.B4.BondCon1.d = L1.Sw1.J0p3_1.BondCon1.d;
//   L1.Sw1.B4.BondCon1.f = L1.Sw1.J0p3_1.BondCon1.f;
//   L1.Sw1.B4.BondCon1.e = L1.Sw1.J0p3_1.BondCon1.e;
//   L1.Sw1.B3.BondCon1.d = L1.Sw1.J1p3_1.BondCon3.d;
//   L1.Sw1.B3.BondCon1.f = L1.Sw1.J1p3_1.BondCon3.f;
//   L1.Sw1.B3.BondCon1.e = L1.Sw1.J1p3_1.BondCon3.e;
//   L1.Sw1.B3.BondCon2.d = L1.Sw1.Sw1.BondCon1.d;
//   L1.Sw1.B3.BondCon2.f = L1.Sw1.Sw1.BondCon1.f;
//   L1.Sw1.B3.BondCon2.e = L1.Sw1.Sw1.BondCon1.e;
//   L1.Sw1.Sw1.BooleanInPort1 = L1.Sw1.control;
//   V0.BG2El1.n.i + (-V0.n.i) = 0.0;
//   V0.El2BG1.p.i + (-V0.p.i) = 0.0;
//   V0.B2.BondCon1.d = V0.J1p3_1.BondCon1.d;
//   V0.B2.BondCon1.f = V0.J1p3_1.BondCon1.f;
//   V0.B2.BondCon1.e = V0.J1p3_1.BondCon1.e;
//   V0.B2.BondCon2.d = V0.El2BG1.BondCon1.d;
//   V0.B2.BondCon2.f = V0.El2BG1.BondCon1.f;
//   V0.B2.BondCon2.e = V0.El2BG1.BondCon1.e;
//   V0.B1.BondCon1.d = V0.BG2El1.BondCon1.d;
//   V0.B1.BondCon1.f = V0.BG2El1.BondCon1.f;
//   V0.B1.BondCon1.e = V0.BG2El1.BondCon1.e;
//   V0.B1.BondCon2.d = V0.J1p3_1.BondCon2.d;
//   V0.B1.BondCon2.f = V0.J1p3_1.BondCon2.f;
//   V0.B1.BondCon2.e = V0.J1p3_1.BondCon2.e;
//   V0.B3.fBondCon1.d = V0.J1p3_1.BondCon3.d;
//   V0.B3.fBondCon1.f = V0.J1p3_1.BondCon3.f;
//   V0.B3.fBondCon1.e = V0.J1p3_1.BondCon3.e;
//   V0.B3.eBondCon1.d = V0.V1.BondCon1.d;
//   V0.B3.eBondCon1.f = V0.V1.BondCon1.f;
//   V0.B3.eBondCon1.e = V0.V1.BondCon1.e;
// end BondLib_Examples_ModelicaSpice_OneWayRectifier;
// "
// ""
// endResult
