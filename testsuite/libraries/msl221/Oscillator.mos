//name:         Oscillator
//keyword:      instantiating msl221
//status:       correct
//env: OPENMODELICALIBRARY=../../../libraries/msl221
//
// instantiate example
//

loadModel(Modelica);
instantiateModel(Modelica.Mechanics.Translational.Examples.Oscillator);
getErrorString();
// Result:
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// class Modelica.Mechanics.Translational.Examples.Oscillator
//   Real SlidingMass1.s(quantity = "Length", unit = "m", start = -0.5) "absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
//   parameter Real SlidingMass1.L(quantity = "Length", unit = "m") = 1.0 "length of component from left flange to right flange (= flange_b.s - flange_a.s)";
//   Real SlidingMass1.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real SlidingMass1.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real SlidingMass1.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real SlidingMass1.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real SlidingMass1.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "mass of the sliding mass";
//   Real SlidingMass1.v(quantity = "Velocity", unit = "m/s", start = 0.0) "absolute velocity of component";
//   Real SlidingMass1.a(quantity = "Acceleration", unit = "m/s2") "absolute acceleration of component";
//   Real Spring1.s_rel(quantity = "Length", unit = "m", min = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real Spring1.f(quantity = "Force", unit = "N") "forcee between flanges (positive in direction of flange axis R)";
//   Real Spring1.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Spring1.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real Spring1.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Spring1.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real Spring1.s_rel0(quantity = "Length", unit = "m", min = 0.0) = 1.0 "unstretched spring length";
//   parameter Real Spring1.c(unit = "N/m", min = 0.0) = 10000.0 "spring constant ";
//   parameter Real Fixed1.s0(quantity = "Length", unit = "m") = 1.0 "fixed offset position of housing";
//   Real Fixed1.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Fixed1.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real Force1.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Force1.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real Force1.f(quantity = "Force", unit = "N") "driving force as input signal";
//   output Real Sine1.y "Connector of Real output signal";
//   parameter Real Sine1.amplitude = 1.0 "Amplitude of sine wave";
//   parameter Real Sine1.freqHz(quantity = "Frequency", unit = "Hz") = 15.9155 "Frequency of sine wave";
//   parameter Real Sine1.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
//   parameter Real Sine1.offset = 0.0 "Offset of output signal";
//   parameter Real Sine1.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   protected constant Real Sine1.pi = 3.14159265358979;
//   Real SlidingMass2.s(quantity = "Length", unit = "m", start = -0.5) "absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)";
//   parameter Real SlidingMass2.L(quantity = "Length", unit = "m") = 1.0 "length of component from left flange to right flange (= flange_b.s - flange_a.s)";
//   Real SlidingMass2.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real SlidingMass2.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real SlidingMass2.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real SlidingMass2.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real SlidingMass2.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "mass of the sliding mass";
//   Real SlidingMass2.v(quantity = "Velocity", unit = "m/s", start = 0.0) "absolute velocity of component";
//   Real SlidingMass2.a(quantity = "Acceleration", unit = "m/s2") "absolute acceleration of component";
//   Real Spring2.s_rel(quantity = "Length", unit = "m", min = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real Spring2.f(quantity = "Force", unit = "N") "forcee between flanges (positive in direction of flange axis R)";
//   Real Spring2.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Spring2.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real Spring2.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Spring2.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real Spring2.s_rel0(quantity = "Length", unit = "m", min = 0.0) = 1.0 "unstretched spring length";
//   parameter Real Spring2.c(unit = "N/m", min = 0.0) = 10000.0 "spring constant ";
//   parameter Real Fixed2.s0(quantity = "Length", unit = "m") = 1.0 "fixed offset position of housing";
//   Real Fixed2.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Fixed2.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real Force2.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Force2.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   input Real Force2.f(quantity = "Force", unit = "N") "driving force as input signal";
//   output Real Sine2.y "Connector of Real output signal";
//   parameter Real Sine2.amplitude = 1.0 "Amplitude of sine wave";
//   parameter Real Sine2.freqHz(quantity = "Frequency", unit = "Hz") = 15.9155 "Frequency of sine wave";
//   parameter Real Sine2.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phase of sine wave";
//   parameter Real Sine2.offset = 0.0 "Offset of output signal";
//   parameter Real Sine2.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   protected constant Real Sine2.pi = 3.14159265358979;
//   Real Damper1.s_rel(quantity = "Length", unit = "m", min = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real Damper1.f(quantity = "Force", unit = "N") "forcee between flanges (positive in direction of flange axis R)";
//   Real Damper1.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Damper1.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real Damper1.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real Damper1.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real Damper1.d(unit = "N/ (m/s)", min = 0.0) = 10.0 "damping constant [N/ (m/s)]";
//   Real Damper1.v_rel(quantity = "Velocity", unit = "m/s") "relative velocity between flange_a and flange_b";
// equation
//   SlidingMass1.v = der(SlidingMass1.s);
//   SlidingMass1.a = der(SlidingMass1.v);
//   SlidingMass1.m * SlidingMass1.a = SlidingMass1.flange_a.f + SlidingMass1.flange_b.f;
//   SlidingMass1.flange_a.s = SlidingMass1.s - SlidingMass1.L / 2.0;
//   SlidingMass1.flange_b.s = SlidingMass1.s + SlidingMass1.L / 2.0;
//   Spring1.f = Spring1.c * (Spring1.s_rel - Spring1.s_rel0);
//   Spring1.s_rel = Spring1.flange_b.s - Spring1.flange_a.s;
//   Spring1.flange_b.f = Spring1.f;
//   Spring1.flange_a.f = -Spring1.f;
//   Fixed1.flange_b.s = Fixed1.s0;
//   Force1.flange_b.f = -Force1.f;
//   Sine1.y = Sine1.offset + (if time < Sine1.startTime then 0.0 else Sine1.amplitude * sin(6.28318530717959 * (Sine1.freqHz * (time - Sine1.startTime)) + Sine1.phase));
//   SlidingMass2.v = der(SlidingMass2.s);
//   SlidingMass2.a = der(SlidingMass2.v);
//   SlidingMass2.m * SlidingMass2.a = SlidingMass2.flange_a.f + SlidingMass2.flange_b.f;
//   SlidingMass2.flange_a.s = SlidingMass2.s - SlidingMass2.L / 2.0;
//   SlidingMass2.flange_b.s = SlidingMass2.s + SlidingMass2.L / 2.0;
//   Spring2.f = Spring2.c * (Spring2.s_rel - Spring2.s_rel0);
//   Spring2.s_rel = Spring2.flange_b.s - Spring2.flange_a.s;
//   Spring2.flange_b.f = Spring2.f;
//   Spring2.flange_a.f = -Spring2.f;
//   Fixed2.flange_b.s = Fixed2.s0;
//   Force2.flange_b.f = -Force2.f;
//   Sine2.y = Sine2.offset + (if time < Sine2.startTime then 0.0 else Sine2.amplitude * sin(6.28318530717959 * (Sine2.freqHz * (time - Sine2.startTime)) + Sine2.phase));
//   Damper1.v_rel = der(Damper1.s_rel);
//   Damper1.f = Damper1.d * Damper1.v_rel;
//   Damper1.s_rel = Damper1.flange_b.s - Damper1.flange_a.s;
//   Damper1.flange_b.f = Damper1.f;
//   Damper1.flange_a.f = -Damper1.f;
//   Force1.flange_b.f + SlidingMass1.flange_a.f = 0.0;
//   Force1.flange_b.s = SlidingMass1.flange_a.s;
//   Spring1.flange_b.f + Fixed1.flange_b.f = 0.0;
//   Fixed1.flange_b.s = Spring1.flange_b.s;
//   SlidingMass1.flange_b.f + Spring1.flange_a.f = 0.0;
//   SlidingMass1.flange_b.s = Spring1.flange_a.s;
//   Force2.flange_b.f + SlidingMass2.flange_a.f = 0.0;
//   Force2.flange_b.s = SlidingMass2.flange_a.s;
//   SlidingMass2.flange_b.f + (Spring2.flange_a.f + Damper1.flange_a.f) = 0.0;
//   Damper1.flange_a.s = SlidingMass2.flange_b.s;
//   Damper1.flange_a.s = Spring2.flange_a.s;
//   Damper1.flange_b.f + (Spring2.flange_b.f + Fixed2.flange_b.f) = 0.0;
//   Damper1.flange_b.s = Fixed2.flange_b.s;
//   Damper1.flange_b.s = Spring2.flange_b.s;
//   Force1.f = Sine1.y;
//   Force2.f = Sine2.y;
// end Modelica.Mechanics.Translational.Examples.Oscillator;
// "
// ""
// endResult
