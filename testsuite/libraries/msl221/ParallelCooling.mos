//name:         ParallelCooling
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadModel(Modelica,{"2.2.1"});
instantiateModel(Modelica.Thermal.FluidHeatFlow.Examples.ParallelCooling);
getErrorString();
// Result:
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function Modelica.Thermal.FluidHeatFlow.Media.Medium \"Automatically generated record constructor for Modelica.Thermal.FluidHeatFlow.Media.Medium\"
//   input Real(quantity=\"Density\", unit=\"kg/m3\", displayUnit=\"g/cm3\", min=0.0) rho = 1.0;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cp = 1.0;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") cv = 1.0;
//   input Real(quantity=\"ThermalConductivity\", unit=\"W/(m.K)\") lamda = 1.0;
//   input Real(quantity=\"KinematicViscosity\", unit=\"m2/s\", min=0.0) nue = 1.0;
//   output Medium res;
// end Modelica.Thermal.FluidHeatFlow.Media.Medium;
// 
// class Modelica.Thermal.FluidHeatFlow.Examples.ParallelCooling
//   parameter Real medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   parameter Real TAmb(quantity = \"CelsiusTemperature\", unit = \"degC\") = 20.0 \"ambient temperature\";
//   output Real dTSource1(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = PrescribedHeatFlow1.port.T - Modelica.SIunits.Conversions.from_degC(TAmb) \"Source1 over Ambient\";
//   output Real dTtoPipe1(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = PrescribedHeatFlow1.port.T - Pipe1.heatPort.T \"Source1 over Coolant1\";
//   output Real dTCoolant1(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe1.dT \"Coolant1's temperature increase\";
//   output Real dTSource2(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = PrescribedHeatFlow2.port.T - Modelica.SIunits.Conversions.from_degC(TAmb) \"Source2 over Ambient\";
//   output Real dTtoPipe2(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = PrescribedHeatFlow2.port.T - Pipe2.heatPort.T \"Source2 over Coolant2\";
//   output Real dTCoolant2(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe2.dT \"Coolant2's temperature increase\";
//   output Real dTmixedCoolant(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Ambient2.T_port - Ambient1.T_port \"mixed Coolant's temperature increase\";
//   parameter Real PrescribedHeatFlow1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real PrescribedHeatFlow1.alpha(unit = \"1/K\") = 0.0 \"Temperature coefficient of heat flow rate\";
//   Real PrescribedHeatFlow1.port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real PrescribedHeatFlow1.port.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   input Real PrescribedHeatFlow1.Q_flow(quantity = \"Power\", unit = \"W\");
//   parameter Real PrescribedHeatFlow2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real PrescribedHeatFlow2.alpha(unit = \"1/K\") = 0.0 \"Temperature coefficient of heat flow rate\";
//   Real PrescribedHeatFlow2.port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real PrescribedHeatFlow2.port.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   input Real PrescribedHeatFlow2.Q_flow(quantity = \"Power\", unit = \"W\");
//   Real Convection2.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate from solid -> fluid\";
//   Real Convection2.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"= solid.T - fluid.T\";
//   Real Convection2.solid.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Convection2.solid.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   Real Convection2.fluid.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Convection2.fluid.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   input Real Convection2.Gc(quantity = \"ThermalConductance\", unit = \"W/K\") \"Signal representing the convective thermal conductance in [W/K]\";
//   output Real VolumeFlow.y \"Connector of Real output signal\";
//   parameter Real VolumeFlow.k = 1.0 \"Constant output value\";
//   output Real HeatFlow1.y \"Connector of Real output signal\";
//   parameter Real HeatFlow1.k = 5.0 \"Constant output value\";
//   output Real HeatFlow2.y \"Connector of Real output signal\";
//   parameter Real HeatFlow2.k = 10.0 \"Constant output value\";
//   output Real G1.y \"Connector of Real output signal\";
//   parameter Real G1.k = 1.0 \"Constant output value\";
//   output Real G2.y \"Connector of Real output signal\";
//   parameter Real G2.k = 1.0 \"Constant output value\";
//   Real Convection1.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate from solid -> fluid\";
//   Real Convection1.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"= solid.T - fluid.T\";
//   Real Convection1.solid.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Convection1.solid.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   Real Convection1.fluid.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Convection1.fluid.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   input Real Convection1.Gc(quantity = \"ThermalConductance\", unit = \"W/K\") \"Signal representing the convective thermal conductance in [W/K]\";
//   parameter Real Ambient1.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Ambient1.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Ambient1.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Ambient1.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Ambient1.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   output Real Ambient1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"outlet temperature of medium\";
//   output Real Ambient1.T_port(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Ambient1.flowPort.h / Ambient1.medium.cp \"temperature at flowPort_a\";
//   protected Real Ambient1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Ambient1.medium.cp * Ambient1.T;
//   parameter Real Ambient1.p_Ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 0.0;
//   parameter Real Ambient1.T_Ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb);
//   parameter Real Ambient1.flowPort.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Ambient1.flowPort.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Ambient1.flowPort.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Ambient1.flowPort.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Ambient1.flowPort.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Ambient1.flowPort.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Ambient1.flowPort.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Ambient1.flowPort.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Ambient1.flowPort.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real Pump1.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pump1.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pump1.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pump1.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pump1.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   parameter Real Pump1.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.0 \"mass of medium\";
//   parameter Real Pump1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb) \"initial temperature of medium\";
//   Real Pump1.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = Pump1.flowPort_a.p - Pump1.flowPort_b.p \"pressure drop a->b\";
//   Real Pump1.V_flow(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = Pump1.flowPort_a.m_flow / Pump1.medium.rho \"Volume flow a->b\";
//   Real Pump1.Q_flow(quantity = \"Power\", unit = \"W\") \"heat exchange with ambient\";
//   output Real Pump1.T_a(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pump1.flowPort_a.h / Pump1.medium.cp \"temperature at flowPort_a\";
//   output Real Pump1.T_b(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pump1.flowPort_b.h / Pump1.medium.cp \"temperature at flowPort_b\";
//   output Real Pump1.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = if noEvent(Pump1.V_flow >= 0.0) then Pump1.T - Pump1.T_a else Pump1.T_b - Pump1.T \"temperature increase of coolant in flow direction\";
//   protected Real Pump1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Pump1.medium.cp * Pump1.T \"medium's specific enthalpy\";
//   protected Real Pump1.T_q(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pump1.T \"temperature relevant for heat exchange with ambient\";
//   input Real Pump1.VolumeFlow(quantity = \"VolumeFlowRate\", unit = \"m3/s\");
//   parameter Real Pump1.flowPort_a.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pump1.flowPort_a.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pump1.flowPort_a.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pump1.flowPort_a.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pump1.flowPort_a.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pump1.flowPort_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pump1.flowPort_a.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pump1.flowPort_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pump1.flowPort_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real Pump1.flowPort_b.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pump1.flowPort_b.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pump1.flowPort_b.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pump1.flowPort_b.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pump1.flowPort_b.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pump1.flowPort_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pump1.flowPort_b.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pump1.flowPort_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pump1.flowPort_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   output Real Pump1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Pump1.T0) \"outlet temperature of medium\";
//   parameter Real Pipe1.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe1.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe1.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe1.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe1.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   parameter Real Pipe1.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.1 \"mass of medium\";
//   parameter Real Pipe1.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb) \"initial temperature of medium\";
//   Real Pipe1.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = Pipe1.flowPort_a.p - Pipe1.flowPort_b.p \"pressure drop a->b\";
//   Real Pipe1.V_flow(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = Pipe1.flowPort_a.m_flow / Pipe1.medium.rho \"Volume flow a->b\";
//   Real Pipe1.Q_flow(quantity = \"Power\", unit = \"W\") \"heat exchange with ambient\";
//   output Real Pipe1.T_a(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe1.flowPort_a.h / Pipe1.medium.cp \"temperature at flowPort_a\";
//   output Real Pipe1.T_b(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe1.flowPort_b.h / Pipe1.medium.cp \"temperature at flowPort_b\";
//   output Real Pipe1.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = if noEvent(Pipe1.V_flow >= 0.0) then Pipe1.T - Pipe1.T_a else Pipe1.T_b - Pipe1.T \"temperature increase of coolant in flow direction\";
//   protected Real Pipe1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Pipe1.medium.cp * Pipe1.T \"medium's specific enthalpy\";
//   protected Real Pipe1.T_q(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe1.T \"temperature relevant for heat exchange with ambient\";
//   parameter Real Pipe1.V_flowLaminar(quantity = \"VolumeFlowRate\", unit = \"m3/s\", min = 1e-060) = 0.1 \"|SimpleFriction|laminar volume flow\";
//   parameter Real Pipe1.dpLaminar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 0.1 \"|SimpleFriction|laminar pressure drop\";
//   parameter Real Pipe1.V_flowNominal(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = 1.0 \"|SimpleFriction|nominal volume flow\";
//   parameter Real Pipe1.dpNominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 1.0 \"|SimpleFriction|nominal pressure drop\";
//   parameter Real Pipe1.frictionLoss(min = 0.0, max = 1.0) = 0.0 \"|SimpleFriction|part of friction losses fed to medium\";
//   Real Pipe1.pressureDrop(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe1.VolumeFlow(quantity = \"VolumeFlowRate\", unit = \"m3/s\");
//   Real Pipe1.Q_friction(quantity = \"Power\", unit = \"W\");
//   protected parameter Real Pipe1.k(fixed = false);
//   parameter Real Pipe1.h_g(quantity = \"Length\", unit = \"m\") = 0.0 \"geodetic height (heigth difference from flowPort_a to flowPort_b)\";
//   Real Pipe1.heatPort.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Pipe1.heatPort.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   parameter Real Pipe1.flowPort_a.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe1.flowPort_a.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe1.flowPort_a.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe1.flowPort_a.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe1.flowPort_a.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe1.flowPort_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe1.flowPort_a.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe1.flowPort_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe1.flowPort_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real Pipe1.flowPort_b.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe1.flowPort_b.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe1.flowPort_b.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe1.flowPort_b.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe1.flowPort_b.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe1.flowPort_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe1.flowPort_b.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe1.flowPort_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe1.flowPort_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   output Real Pipe1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Pipe1.T0) \"outlet temperature of medium\";
//   parameter Real Pipe2.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe2.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe2.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe2.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe2.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   parameter Real Pipe2.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.1 \"mass of medium\";
//   parameter Real Pipe2.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb) \"initial temperature of medium\";
//   Real Pipe2.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = Pipe2.flowPort_a.p - Pipe2.flowPort_b.p \"pressure drop a->b\";
//   Real Pipe2.V_flow(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = Pipe2.flowPort_a.m_flow / Pipe2.medium.rho \"Volume flow a->b\";
//   Real Pipe2.Q_flow(quantity = \"Power\", unit = \"W\") \"heat exchange with ambient\";
//   output Real Pipe2.T_a(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe2.flowPort_a.h / Pipe2.medium.cp \"temperature at flowPort_a\";
//   output Real Pipe2.T_b(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe2.flowPort_b.h / Pipe2.medium.cp \"temperature at flowPort_b\";
//   output Real Pipe2.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = if noEvent(Pipe2.V_flow >= 0.0) then Pipe2.T - Pipe2.T_a else Pipe2.T_b - Pipe2.T \"temperature increase of coolant in flow direction\";
//   protected Real Pipe2.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Pipe2.medium.cp * Pipe2.T \"medium's specific enthalpy\";
//   protected Real Pipe2.T_q(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe2.T \"temperature relevant for heat exchange with ambient\";
//   parameter Real Pipe2.V_flowLaminar(quantity = \"VolumeFlowRate\", unit = \"m3/s\", min = 1e-060) = 0.1 \"|SimpleFriction|laminar volume flow\";
//   parameter Real Pipe2.dpLaminar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 0.1 \"|SimpleFriction|laminar pressure drop\";
//   parameter Real Pipe2.V_flowNominal(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = 1.0 \"|SimpleFriction|nominal volume flow\";
//   parameter Real Pipe2.dpNominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 1.0 \"|SimpleFriction|nominal pressure drop\";
//   parameter Real Pipe2.frictionLoss(min = 0.0, max = 1.0) = 0.0 \"|SimpleFriction|part of friction losses fed to medium\";
//   Real Pipe2.pressureDrop(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe2.VolumeFlow(quantity = \"VolumeFlowRate\", unit = \"m3/s\");
//   Real Pipe2.Q_friction(quantity = \"Power\", unit = \"W\");
//   protected parameter Real Pipe2.k(fixed = false);
//   parameter Real Pipe2.h_g(quantity = \"Length\", unit = \"m\") = 0.0 \"geodetic height (heigth difference from flowPort_a to flowPort_b)\";
//   Real Pipe2.heatPort.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real Pipe2.heatPort.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   parameter Real Pipe2.flowPort_a.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe2.flowPort_a.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe2.flowPort_a.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe2.flowPort_a.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe2.flowPort_a.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe2.flowPort_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe2.flowPort_a.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe2.flowPort_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe2.flowPort_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real Pipe2.flowPort_b.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe2.flowPort_b.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe2.flowPort_b.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe2.flowPort_b.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe2.flowPort_b.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe2.flowPort_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe2.flowPort_b.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe2.flowPort_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe2.flowPort_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   output Real Pipe2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Pipe2.T0) \"outlet temperature of medium\";
//   parameter Real Pipe3.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe3.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe3.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe3.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe3.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   parameter Real Pipe3.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.1 \"mass of medium\";
//   parameter Real Pipe3.T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb) \"initial temperature of medium\";
//   Real Pipe3.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = Pipe3.flowPort_a.p - Pipe3.flowPort_b.p \"pressure drop a->b\";
//   Real Pipe3.V_flow(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = Pipe3.flowPort_a.m_flow / Pipe3.medium.rho \"Volume flow a->b\";
//   Real Pipe3.Q_flow(quantity = \"Power\", unit = \"W\") \"heat exchange with ambient\";
//   output Real Pipe3.T_a(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe3.flowPort_a.h / Pipe3.medium.cp \"temperature at flowPort_a\";
//   output Real Pipe3.T_b(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe3.flowPort_b.h / Pipe3.medium.cp \"temperature at flowPort_b\";
//   output Real Pipe3.dT(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = if noEvent(Pipe3.V_flow >= 0.0) then Pipe3.T - Pipe3.T_a else Pipe3.T_b - Pipe3.T \"temperature increase of coolant in flow direction\";
//   protected Real Pipe3.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Pipe3.medium.cp * Pipe3.T \"medium's specific enthalpy\";
//   protected Real Pipe3.T_q(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Pipe3.T \"temperature relevant for heat exchange with ambient\";
//   parameter Real Pipe3.V_flowLaminar(quantity = \"VolumeFlowRate\", unit = \"m3/s\", min = 1e-060) = 0.1 \"|SimpleFriction|laminar volume flow\";
//   parameter Real Pipe3.dpLaminar(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 0.1 \"|SimpleFriction|laminar pressure drop\";
//   parameter Real Pipe3.V_flowNominal(quantity = \"VolumeFlowRate\", unit = \"m3/s\") = 1.0 \"|SimpleFriction|nominal volume flow\";
//   parameter Real Pipe3.dpNominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 1.0 \"|SimpleFriction|nominal pressure drop\";
//   parameter Real Pipe3.frictionLoss(min = 0.0, max = 1.0) = 0.0 \"|SimpleFriction|part of friction losses fed to medium\";
//   Real Pipe3.pressureDrop(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe3.VolumeFlow(quantity = \"VolumeFlowRate\", unit = \"m3/s\");
//   Real Pipe3.Q_friction(quantity = \"Power\", unit = \"W\");
//   protected parameter Real Pipe3.k(fixed = false);
//   parameter Real Pipe3.h_g(quantity = \"Length\", unit = \"m\") = 0.0 \"geodetic height (heigth difference from flowPort_a to flowPort_b)\";
//   parameter Real Pipe3.flowPort_a.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe3.flowPort_a.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe3.flowPort_a.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe3.flowPort_a.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe3.flowPort_a.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe3.flowPort_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe3.flowPort_a.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe3.flowPort_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe3.flowPort_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real Pipe3.flowPort_b.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Pipe3.flowPort_b.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Pipe3.flowPort_b.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Pipe3.flowPort_b.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Pipe3.flowPort_b.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Pipe3.flowPort_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Pipe3.flowPort_b.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Pipe3.flowPort_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Pipe3.flowPort_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   output Real Pipe3.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Pipe3.T0) \"outlet temperature of medium\";
//   parameter Real Ambient2.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Ambient2.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Ambient2.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Ambient2.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Ambient2.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   output Real Ambient2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"outlet temperature of medium\";
//   output Real Ambient2.T_port(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Ambient2.flowPort.h / Ambient2.medium.cp \"temperature at flowPort_a\";
//   protected Real Ambient2.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Ambient2.medium.cp * Ambient2.T;
//   parameter Real Ambient2.p_Ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") = 0.0;
//   parameter Real Ambient2.T_Ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(TAmb);
//   parameter Real Ambient2.flowPort.medium.rho(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 1 \"density\";
//   parameter Real Ambient2.flowPort.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant pressure\";
//   parameter Real Ambient2.flowPort.medium.cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") = 1 \"specific heat capacity at constant volume\";
//   parameter Real Ambient2.flowPort.medium.lamda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\") = 1 \"thermal conductivity\";
//   parameter Real Ambient2.flowPort.medium.nue(quantity = \"KinematicViscosity\", unit = \"m2/s\", min = 0.0) = 1 \"kinematic viscosity\";
//   Real Ambient2.flowPort.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\");
//   Real Ambient2.flowPort.m_flow(quantity = \"MassFlowRate\", unit = \"kg/s\");
//   Real Ambient2.flowPort.h(quantity = \"SpecificEnergy\", unit = \"J/kg\");
//   Real Ambient2.flowPort.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\");
//   parameter Real HeatCapacitor1.C(quantity = \"HeatCapacity\", unit = \"J/K\") = 0.1 \"Heat capacity of part (= cp*m)\";
//   parameter Boolean HeatCapacitor1.steadyStateStart = false \"true, if component shall start in steady state\";
//   Real HeatCapacitor1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Modelica.SIunits.Conversions.from_degC(TAmb)) \"Temperature of part\";
//   Real HeatCapacitor1.port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real HeatCapacitor1.port.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
//   parameter Real HeatCapacitor2.C(quantity = \"HeatCapacity\", unit = \"J/K\") = 0.1 \"Heat capacity of part (= cp*m)\";
//   parameter Boolean HeatCapacitor2.steadyStateStart = false \"true, if component shall start in steady state\";
//   Real HeatCapacitor2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0, start = Modelica.SIunits.Conversions.from_degC(TAmb)) \"Temperature of part\";
//   Real HeatCapacitor2.port.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Port temperature\";
//   Real HeatCapacitor2.port.Q_flow(quantity = \"Power\", unit = \"W\") \"Heat flow rate (positive if flowing from outside into the component)\";
// initial algorithm
//   assert(Pipe1.V_flowNominal > Pipe1.V_flowLaminar, \"SimpleFriction: V_flowNominal has to be > V_flowLaminar!\");
//   Pipe1.k := (Pipe1.V_flowNominal * Pipe1.dpLaminar) / Pipe1.V_flowLaminar;
//   assert(Pipe1.dpNominal >= Pipe1.k, \"SimpleFriction: dpNominal has to be > dpLaminar*V_flowNominal/V_flowLaminar!\");
//   Pipe1.k := (Pipe1.dpNominal - Pipe1.k) * (Pipe1.V_flowNominal - Pipe1.V_flowLaminar) ^ -2.0;
//   assert(Pipe2.V_flowNominal > Pipe2.V_flowLaminar, \"SimpleFriction: V_flowNominal has to be > V_flowLaminar!\");
//   Pipe2.k := (Pipe2.V_flowNominal * Pipe2.dpLaminar) / Pipe2.V_flowLaminar;
//   assert(Pipe2.dpNominal >= Pipe2.k, \"SimpleFriction: dpNominal has to be > dpLaminar*V_flowNominal/V_flowLaminar!\");
//   Pipe2.k := (Pipe2.dpNominal - Pipe2.k) * (Pipe2.V_flowNominal - Pipe2.V_flowLaminar) ^ -2.0;
//   assert(Pipe3.V_flowNominal > Pipe3.V_flowLaminar, \"SimpleFriction: V_flowNominal has to be > V_flowLaminar!\");
//   Pipe3.k := (Pipe3.V_flowNominal * Pipe3.dpLaminar) / Pipe3.V_flowLaminar;
//   assert(Pipe3.dpNominal >= Pipe3.k, \"SimpleFriction: dpNominal has to be > dpLaminar*V_flowNominal/V_flowLaminar!\");
//   Pipe3.k := (Pipe3.dpNominal - Pipe3.k) * (Pipe3.V_flowNominal - Pipe3.V_flowLaminar) ^ -2.0;
// equation
//   PrescribedHeatFlow1.port.Q_flow = (-PrescribedHeatFlow1.Q_flow) * (1.0 + PrescribedHeatFlow1.alpha * (PrescribedHeatFlow1.port.T - PrescribedHeatFlow1.T_ref));
//   PrescribedHeatFlow2.port.Q_flow = (-PrescribedHeatFlow2.Q_flow) * (1.0 + PrescribedHeatFlow2.alpha * (PrescribedHeatFlow2.port.T - PrescribedHeatFlow2.T_ref));
//   Convection2.dT = Convection2.solid.T - Convection2.fluid.T;
//   Convection2.solid.Q_flow = Convection2.Q_flow;
//   Convection2.fluid.Q_flow = -Convection2.Q_flow;
//   Convection2.Q_flow = Convection2.Gc * Convection2.dT;
//   VolumeFlow.y = VolumeFlow.k;
//   HeatFlow1.y = HeatFlow1.k;
//   HeatFlow2.y = HeatFlow2.k;
//   G1.y = G1.k;
//   G2.y = G2.k;
//   Convection1.dT = Convection1.solid.T - Convection1.fluid.T;
//   Convection1.solid.Q_flow = Convection1.Q_flow;
//   Convection1.fluid.Q_flow = -Convection1.Q_flow;
//   Convection1.Q_flow = Convection1.Gc * Convection1.dT;
//   Ambient1.flowPort.p = Ambient1.p_Ambient;
//   Ambient1.T = Ambient1.T_Ambient;
//   Ambient1.flowPort.H_flow = semiLinear(Ambient1.flowPort.m_flow,Ambient1.flowPort.h,Ambient1.h);
//   Pump1.Q_flow = 0.0;
//   Pump1.V_flow = Pump1.VolumeFlow;
//   Pump1.flowPort_a.m_flow + Pump1.flowPort_b.m_flow = 0.0;
//   Pump1.flowPort_a.H_flow + (Pump1.flowPort_b.H_flow + Pump1.Q_flow) = 0.0;
//   Pump1.flowPort_a.H_flow = semiLinear(Pump1.flowPort_a.m_flow,Pump1.flowPort_a.h,Pump1.h);
//   Pump1.flowPort_b.H_flow = semiLinear(Pump1.flowPort_b.m_flow,Pump1.flowPort_b.h,Pump1.h);
//   Pipe1.VolumeFlow = Pipe1.V_flow;
//   Pipe1.dp = Pipe1.pressureDrop + 9.80665 * (Pipe1.medium.rho * Pipe1.h_g);
//   Pipe1.Q_flow = Pipe1.heatPort.Q_flow + Pipe1.Q_friction;
//   Pipe1.heatPort.T = Pipe1.T_q;
//   Pipe1.flowPort_a.m_flow + Pipe1.flowPort_b.m_flow = 0.0;
//   Pipe1.flowPort_a.H_flow + (Pipe1.flowPort_b.H_flow + Pipe1.Q_flow) = Pipe1.m * (Pipe1.medium.cv * der(Pipe1.T));
//   Pipe1.flowPort_a.H_flow = semiLinear(Pipe1.flowPort_a.m_flow,Pipe1.flowPort_a.h,Pipe1.h);
//   Pipe1.flowPort_b.H_flow = semiLinear(Pipe1.flowPort_b.m_flow,Pipe1.flowPort_b.h,Pipe1.h);
//   if Pipe1.VolumeFlow > Pipe1.V_flowLaminar then
//   Pipe1.pressureDrop = (Pipe1.VolumeFlow * Pipe1.dpLaminar) / Pipe1.V_flowLaminar + Pipe1.k * (Pipe1.VolumeFlow - Pipe1.V_flowLaminar) ^ 2.0;
//   elseif Pipe1.VolumeFlow < -Pipe1.V_flowLaminar then
//   Pipe1.pressureDrop = (Pipe1.VolumeFlow * Pipe1.dpLaminar) / Pipe1.V_flowLaminar - Pipe1.k * (Pipe1.VolumeFlow + Pipe1.V_flowLaminar) ^ 2.0;
//   else
//   Pipe1.pressureDrop = (Pipe1.VolumeFlow * Pipe1.dpLaminar) / Pipe1.V_flowLaminar;
//   end if;
//   Pipe1.Q_friction = Pipe1.frictionLoss * (Pipe1.VolumeFlow * Pipe1.pressureDrop);
//   Pipe2.VolumeFlow = Pipe2.V_flow;
//   Pipe2.dp = Pipe2.pressureDrop + 9.80665 * (Pipe2.medium.rho * Pipe2.h_g);
//   Pipe2.Q_flow = Pipe2.heatPort.Q_flow + Pipe2.Q_friction;
//   Pipe2.heatPort.T = Pipe2.T_q;
//   Pipe2.flowPort_a.m_flow + Pipe2.flowPort_b.m_flow = 0.0;
//   Pipe2.flowPort_a.H_flow + (Pipe2.flowPort_b.H_flow + Pipe2.Q_flow) = Pipe2.m * (Pipe2.medium.cv * der(Pipe2.T));
//   Pipe2.flowPort_a.H_flow = semiLinear(Pipe2.flowPort_a.m_flow,Pipe2.flowPort_a.h,Pipe2.h);
//   Pipe2.flowPort_b.H_flow = semiLinear(Pipe2.flowPort_b.m_flow,Pipe2.flowPort_b.h,Pipe2.h);
//   if Pipe2.VolumeFlow > Pipe2.V_flowLaminar then
//   Pipe2.pressureDrop = (Pipe2.VolumeFlow * Pipe2.dpLaminar) / Pipe2.V_flowLaminar + Pipe2.k * (Pipe2.VolumeFlow - Pipe2.V_flowLaminar) ^ 2.0;
//   elseif Pipe2.VolumeFlow < -Pipe2.V_flowLaminar then
//   Pipe2.pressureDrop = (Pipe2.VolumeFlow * Pipe2.dpLaminar) / Pipe2.V_flowLaminar - Pipe2.k * (Pipe2.VolumeFlow + Pipe2.V_flowLaminar) ^ 2.0;
//   else
//   Pipe2.pressureDrop = (Pipe2.VolumeFlow * Pipe2.dpLaminar) / Pipe2.V_flowLaminar;
//   end if;
//   Pipe2.Q_friction = Pipe2.frictionLoss * (Pipe2.VolumeFlow * Pipe2.pressureDrop);
//   Pipe3.VolumeFlow = Pipe3.V_flow;
//   Pipe3.dp = Pipe3.pressureDrop + 9.80665 * (Pipe3.medium.rho * Pipe3.h_g);
//   Pipe3.Q_flow = Pipe3.Q_friction;
//   Pipe3.flowPort_a.m_flow + Pipe3.flowPort_b.m_flow = 0.0;
//   Pipe3.flowPort_a.H_flow + (Pipe3.flowPort_b.H_flow + Pipe3.Q_flow) = Pipe3.m * (Pipe3.medium.cv * der(Pipe3.T));
//   Pipe3.flowPort_a.H_flow = semiLinear(Pipe3.flowPort_a.m_flow,Pipe3.flowPort_a.h,Pipe3.h);
//   Pipe3.flowPort_b.H_flow = semiLinear(Pipe3.flowPort_b.m_flow,Pipe3.flowPort_b.h,Pipe3.h);
//   if Pipe3.VolumeFlow > Pipe3.V_flowLaminar then
//   Pipe3.pressureDrop = (Pipe3.VolumeFlow * Pipe3.dpLaminar) / Pipe3.V_flowLaminar + Pipe3.k * (Pipe3.VolumeFlow - Pipe3.V_flowLaminar) ^ 2.0;
//   elseif Pipe3.VolumeFlow < -Pipe3.V_flowLaminar then
//   Pipe3.pressureDrop = (Pipe3.VolumeFlow * Pipe3.dpLaminar) / Pipe3.V_flowLaminar - Pipe3.k * (Pipe3.VolumeFlow + Pipe3.V_flowLaminar) ^ 2.0;
//   else
//   Pipe3.pressureDrop = (Pipe3.VolumeFlow * Pipe3.dpLaminar) / Pipe3.V_flowLaminar;
//   end if;
//   Pipe3.Q_friction = Pipe3.frictionLoss * (Pipe3.VolumeFlow * Pipe3.pressureDrop);
//   Ambient2.flowPort.p = Ambient2.p_Ambient;
//   Ambient2.T = Ambient2.T_Ambient;
//   Ambient2.flowPort.H_flow = semiLinear(Ambient2.flowPort.m_flow,Ambient2.flowPort.h,Ambient2.h);
//   HeatCapacitor1.T = HeatCapacitor1.port.T;
//   HeatCapacitor1.C * der(HeatCapacitor1.T) = HeatCapacitor1.port.Q_flow;
//   HeatCapacitor2.T = HeatCapacitor2.port.T;
//   HeatCapacitor2.C * der(HeatCapacitor2.T) = HeatCapacitor2.port.Q_flow;
//   assert(Pipe3.flowPort_b.medium.rho == Ambient2.flowPort.medium.rho,\"automatically generated from connect\");
//   assert(Pipe3.flowPort_b.medium.cp == Ambient2.flowPort.medium.cp,\"automatically generated from connect\");
//   assert(Pipe3.flowPort_b.medium.cv == Ambient2.flowPort.medium.cv,\"automatically generated from connect\");
//   assert(Pipe3.flowPort_b.medium.lamda == Ambient2.flowPort.medium.lamda,\"automatically generated from connect\");
//   assert(Pipe3.flowPort_b.medium.nue == Ambient2.flowPort.medium.nue,\"automatically generated from connect\");
//   assert(Pipe1.flowPort_b.medium.rho == Pipe3.flowPort_a.medium.rho,\"automatically generated from connect\");
//   assert(Pipe1.flowPort_b.medium.cp == Pipe3.flowPort_a.medium.cp,\"automatically generated from connect\");
//   assert(Pipe1.flowPort_b.medium.cv == Pipe3.flowPort_a.medium.cv,\"automatically generated from connect\");
//   assert(Pipe1.flowPort_b.medium.lamda == Pipe3.flowPort_a.medium.lamda,\"automatically generated from connect\");
//   assert(Pipe1.flowPort_b.medium.nue == Pipe3.flowPort_a.medium.nue,\"automatically generated from connect\");
//   assert(Pipe2.flowPort_b.medium.rho == Pipe3.flowPort_a.medium.rho,\"automatically generated from connect\");
//   assert(Pipe2.flowPort_b.medium.cp == Pipe3.flowPort_a.medium.cp,\"automatically generated from connect\");
//   assert(Pipe2.flowPort_b.medium.cv == Pipe3.flowPort_a.medium.cv,\"automatically generated from connect\");
//   assert(Pipe2.flowPort_b.medium.lamda == Pipe3.flowPort_a.medium.lamda,\"automatically generated from connect\");
//   assert(Pipe2.flowPort_b.medium.nue == Pipe3.flowPort_a.medium.nue,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.rho == Pipe2.flowPort_a.medium.rho,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.cp == Pipe2.flowPort_a.medium.cp,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.cv == Pipe2.flowPort_a.medium.cv,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.lamda == Pipe2.flowPort_a.medium.lamda,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.nue == Pipe2.flowPort_a.medium.nue,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.rho == Pipe1.flowPort_a.medium.rho,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.cp == Pipe1.flowPort_a.medium.cp,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.cv == Pipe1.flowPort_a.medium.cv,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.lamda == Pipe1.flowPort_a.medium.lamda,\"automatically generated from connect\");
//   assert(Pump1.flowPort_b.medium.nue == Pipe1.flowPort_a.medium.nue,\"automatically generated from connect\");
//   assert(Ambient1.flowPort.medium.rho == Pump1.flowPort_a.medium.rho,\"automatically generated from connect\");
//   assert(Ambient1.flowPort.medium.cp == Pump1.flowPort_a.medium.cp,\"automatically generated from connect\");
//   assert(Ambient1.flowPort.medium.cv == Pump1.flowPort_a.medium.cv,\"automatically generated from connect\");
//   assert(Ambient1.flowPort.medium.lamda == Pump1.flowPort_a.medium.lamda,\"automatically generated from connect\");
//   assert(Ambient1.flowPort.medium.nue == Pump1.flowPort_a.medium.nue,\"automatically generated from connect\");
//   PrescribedHeatFlow1.port.Q_flow + Convection1.solid.Q_flow + HeatCapacitor1.port.Q_flow = 0.0;
//   PrescribedHeatFlow2.port.Q_flow + Convection2.solid.Q_flow + HeatCapacitor2.port.Q_flow = 0.0;
//   Convection2.fluid.Q_flow + Pipe2.heatPort.Q_flow = 0.0;
//   Convection1.fluid.Q_flow + Pipe1.heatPort.Q_flow = 0.0;
//   Ambient1.flowPort.H_flow + Pump1.flowPort_a.H_flow = 0.0;
//   Ambient1.flowPort.m_flow + Pump1.flowPort_a.m_flow = 0.0;
//   Pump1.flowPort_b.H_flow + Pipe1.flowPort_a.H_flow + Pipe2.flowPort_a.H_flow = 0.0;
//   Pump1.flowPort_b.m_flow + Pipe1.flowPort_a.m_flow + Pipe2.flowPort_a.m_flow = 0.0;
//   Pipe1.flowPort_b.H_flow + Pipe2.flowPort_b.H_flow + Pipe3.flowPort_a.H_flow = 0.0;
//   Pipe1.flowPort_b.m_flow + Pipe2.flowPort_b.m_flow + Pipe3.flowPort_a.m_flow = 0.0;
//   Pipe3.flowPort_b.H_flow + Ambient2.flowPort.H_flow = 0.0;
//   Pipe3.flowPort_b.m_flow + Ambient2.flowPort.m_flow = 0.0;
//   Ambient2.flowPort.p = Pipe3.flowPort_b.p;
//   Ambient2.flowPort.h = Pipe3.flowPort_b.h;
//   Pipe1.flowPort_b.p = Pipe2.flowPort_b.p;
//   Pipe1.flowPort_b.p = Pipe3.flowPort_a.p;
//   Pipe1.flowPort_b.h = Pipe2.flowPort_b.h;
//   Pipe1.flowPort_b.h = Pipe3.flowPort_a.h;
//   Convection2.solid.T = HeatCapacitor2.port.T;
//   Convection2.solid.T = PrescribedHeatFlow2.port.T;
//   Convection2.fluid.T = Pipe2.heatPort.T;
//   Convection2.Gc = G2.y;
//   Pump1.VolumeFlow = VolumeFlow.y;
//   HeatFlow1.y = PrescribedHeatFlow1.Q_flow;
//   HeatFlow2.y = PrescribedHeatFlow2.Q_flow;
//   Pipe1.flowPort_a.p = Pipe2.flowPort_a.p;
//   Pipe1.flowPort_a.p = Pump1.flowPort_b.p;
//   Pipe1.flowPort_a.h = Pipe2.flowPort_a.h;
//   Pipe1.flowPort_a.h = Pump1.flowPort_b.h;
//   Ambient1.flowPort.p = Pump1.flowPort_a.p;
//   Ambient1.flowPort.h = Pump1.flowPort_a.h;
//   Convection1.Gc = G1.y;
//   Convection1.fluid.T = Pipe1.heatPort.T;
//   Convection1.solid.T = HeatCapacitor1.port.T;
//   Convection1.solid.T = PrescribedHeatFlow1.port.T;
// end Modelica.Thermal.FluidHeatFlow.Examples.ParallelCooling;
// "
// "Notification: Modelica language version set to 2.x due to loading of MSL 2.2.1.
// "
// endResult
