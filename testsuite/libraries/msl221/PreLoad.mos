//name:         PreLoad
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadModel(Modelica,{"2.2.1"});
instantiateModel(Modelica.Mechanics.Translational.Examples.PreLoad);
getErrorString();
// Result:
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// class Modelica.Mechanics.Translational.Examples.PreLoad
//   Real InnerContactA.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real InnerContactA.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real InnerContactA.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real InnerContactA.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real InnerContactA.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real InnerContactA.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real InnerContactA.s_rel0(quantity = \"Length\", unit = \"m\") = 0.001 \"unstretched spring length\";
//   parameter Real InnerContactA.c(unit = \"N/m\", min = 0.0) = 1000000.0 \"spring constant\";
//   parameter Real InnerContactA.d(unit = \"N/ (m/s)\", min = 0.0) = 250.0 \"damping constant\";
//   Real InnerContactA.v_rel(quantity = \"Velocity\", unit = \"m/s\") \"relative velocity between flange_a and flange_b\";
//   Boolean InnerContactA.Contact \"false, if s_rel > l \";
//   Real InnerContactB.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real InnerContactB.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real InnerContactB.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real InnerContactB.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real InnerContactB.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real InnerContactB.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real InnerContactB.s_rel0(quantity = \"Length\", unit = \"m\") = 0.001 \"unstretched spring length\";
//   parameter Real InnerContactB.c(unit = \"N/m\", min = 0.0) = 1000000.0 \"spring constant\";
//   parameter Real InnerContactB.d(unit = \"N/ (m/s)\", min = 0.0) = 250.0 \"damping constant\";
//   Real InnerContactB.v_rel(quantity = \"Velocity\", unit = \"m/s\") \"relative velocity between flange_a and flange_b\";
//   Boolean InnerContactB.Contact \"false, if s_rel > l \";
//   Real Spool.s(quantity = \"Length\", unit = \"m\", start = 0.01475) \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Spool.L(quantity = \"Length\", unit = \"m\") = 0.19 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Spool.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Spool.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Spool.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Spool.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real Spool.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.15 \"mass of the sliding mass\";
//   Real Spool.v(quantity = \"Velocity\", unit = \"m/s\") \"absolute velocity of component\";
//   Real Spool.a(quantity = \"Acceleration\", unit = \"m/s2\") \"absolute acceleration of component\";
//   parameter Real FixedLe.s0(quantity = \"Length\", unit = \"m\") = -0.0955 \"fixed offset position of housing\";
//   Real FixedLe.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real FixedLe.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real SpringPlateA.s(quantity = \"Length\", unit = \"m\", start = -0.093) \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real SpringPlateA.L(quantity = \"Length\", unit = \"m\") = 0.002 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real SpringPlateA.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real SpringPlateA.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real SpringPlateA.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real SpringPlateA.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real SpringPlateA.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.01 \"mass of the sliding mass\";
//   Real SpringPlateA.v(quantity = \"Velocity\", unit = \"m/s\") \"absolute velocity of component\";
//   Real SpringPlateA.a(quantity = \"Acceleration\", unit = \"m/s2\") \"absolute acceleration of component\";
//   Real SpringPlateB.s(quantity = \"Length\", unit = \"m\", start = -0.06925) \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real SpringPlateB.L(quantity = \"Length\", unit = \"m\") = 0.002 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real SpringPlateB.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real SpringPlateB.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real SpringPlateB.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real SpringPlateB.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real SpringPlateB.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.01 \"mass of the sliding mass\";
//   Real SpringPlateB.v(quantity = \"Velocity\", unit = \"m/s\") \"absolute velocity of component\";
//   Real SpringPlateB.a(quantity = \"Acceleration\", unit = \"m/s2\") \"absolute acceleration of component\";
//   Real Spring.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real Spring.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real Spring.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Spring.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Spring.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Spring.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real Spring.s_rel0(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.025 \"unstretched spring length\";
//   parameter Real Spring.c(unit = \"N/m\", min = 0.0) = 20000.0 \"spring constant \";
//   Real OuterContactA.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real OuterContactA.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real OuterContactA.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real OuterContactA.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real OuterContactA.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real OuterContactA.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real OuterContactA.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0015 \"unstretched spring length\";
//   parameter Real OuterContactA.c(unit = \"N/m\", min = 0.0) = 1000000.0 \"spring constant\";
//   parameter Real OuterContactA.d(unit = \"N/ (m/s)\", min = 0.0) = 250.0 \"damping constant\";
//   Real OuterContactA.v_rel(quantity = \"Velocity\", unit = \"m/s\") \"relative velocity between flange_a and flange_b\";
//   Boolean OuterContactA.Contact \"false, if s_rel > l \";
//   Real OuterContactB.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real OuterContactB.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real OuterContactB.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real OuterContactB.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real OuterContactB.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real OuterContactB.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real OuterContactB.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0015 \"unstretched spring length\";
//   parameter Real OuterContactB.c(unit = \"N/m\", min = 0.0) = 1000000.0 \"spring constant\";
//   parameter Real OuterContactB.d(unit = \"N/ (m/s)\", min = 0.0) = 250.0 \"damping constant\";
//   Real OuterContactB.v_rel(quantity = \"Velocity\", unit = \"m/s\") \"relative velocity between flange_a and flange_b\";
//   Boolean OuterContactB.Contact \"false, if s_rel > l \";
//   Real Rod1.s(quantity = \"Length\", unit = \"m\") \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Rod1.L(quantity = \"Length\", unit = \"m\") = 0.007 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Rod1.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod1.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod1.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod1.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Friction.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0) \"relative distance (= flange_b.s - flange_a.s)\";
//   Real Friction.f(quantity = \"Force\", unit = \"N\") \"forcee between flanges (positive in direction of flange axis R)\";
//   Real Friction.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Friction.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Friction.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Friction.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real Friction.d(unit = \"N/ (m/s)\", min = 0.0) = 2500.0 \"damping constant [N/ (m/s)]\";
//   Real Friction.v_rel(quantity = \"Velocity\", unit = \"m/s\") \"relative velocity between flange_a and flange_b\";
//   Real Force1.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Force1.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   input Real Force1.f(quantity = \"Force\", unit = \"N\") \"driving force as input signal\";
//   Real Housing.s(quantity = \"Length\", unit = \"m\") \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Housing.L(quantity = \"Length\", unit = \"m\") = 0.0305 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Housing.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Housing.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Housing.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Housing.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod3.s(quantity = \"Length\", unit = \"m\") \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Rod3.L(quantity = \"Length\", unit = \"m\") = 0.00575 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Rod3.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod3.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod3.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod3.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod4.s(quantity = \"Length\", unit = \"m\") \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Rod4.L(quantity = \"Length\", unit = \"m\") = 0.00575 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Rod4.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod4.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod4.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod4.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod2.s(quantity = \"Length\", unit = \"m\") \"absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real Rod2.L(quantity = \"Length\", unit = \"m\") = 0.007 \"length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real Rod2.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod2.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real Rod2.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real Rod2.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   output Real Sine1.y \"Connector of Real output signal\";
//   parameter Real Sine1.amplitude = 150.0 \"Amplitude of sine wave\";
//   parameter Real Sine1.freqHz(quantity = \"Frequency\", unit = \"Hz\") = 0.01 \"Frequency of sine wave\";
//   parameter Real Sine1.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real Sine1.offset = 0.0 \"Offset of output signal\";
//   parameter Real Sine1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real Sine1.pi = 3.14159265358979;
// equation
//   InnerContactA.v_rel = der(InnerContactA.s_rel);
//   InnerContactA.Contact = InnerContactA.s_rel < InnerContactA.s_rel0;
//   InnerContactA.f = if InnerContactA.Contact then InnerContactA.c * (InnerContactA.s_rel - InnerContactA.s_rel0) + InnerContactA.d * InnerContactA.v_rel else 0.0;
//   InnerContactA.s_rel = InnerContactA.flange_b.s - InnerContactA.flange_a.s;
//   InnerContactA.flange_b.f = InnerContactA.f;
//   InnerContactA.flange_a.f = -InnerContactA.f;
//   InnerContactB.v_rel = der(InnerContactB.s_rel);
//   InnerContactB.Contact = InnerContactB.s_rel < InnerContactB.s_rel0;
//   InnerContactB.f = if InnerContactB.Contact then InnerContactB.c * (InnerContactB.s_rel - InnerContactB.s_rel0) + InnerContactB.d * InnerContactB.v_rel else 0.0;
//   InnerContactB.s_rel = InnerContactB.flange_b.s - InnerContactB.flange_a.s;
//   InnerContactB.flange_b.f = InnerContactB.f;
//   InnerContactB.flange_a.f = -InnerContactB.f;
//   Spool.v = der(Spool.s);
//   Spool.a = der(Spool.v);
//   Spool.m * Spool.a = Spool.flange_a.f + Spool.flange_b.f;
//   Spool.flange_a.s = Spool.s + (-Spool.L) / 2.0;
//   Spool.flange_b.s = Spool.s + Spool.L / 2.0;
//   FixedLe.flange_b.s = FixedLe.s0;
//   SpringPlateA.v = der(SpringPlateA.s);
//   SpringPlateA.a = der(SpringPlateA.v);
//   SpringPlateA.m * SpringPlateA.a = SpringPlateA.flange_a.f + SpringPlateA.flange_b.f;
//   SpringPlateA.flange_a.s = SpringPlateA.s + (-SpringPlateA.L) / 2.0;
//   SpringPlateA.flange_b.s = SpringPlateA.s + SpringPlateA.L / 2.0;
//   SpringPlateB.v = der(SpringPlateB.s);
//   SpringPlateB.a = der(SpringPlateB.v);
//   SpringPlateB.m * SpringPlateB.a = SpringPlateB.flange_a.f + SpringPlateB.flange_b.f;
//   SpringPlateB.flange_a.s = SpringPlateB.s + (-SpringPlateB.L) / 2.0;
//   SpringPlateB.flange_b.s = SpringPlateB.s + SpringPlateB.L / 2.0;
//   Spring.f = Spring.c * (Spring.s_rel - Spring.s_rel0);
//   Spring.s_rel = Spring.flange_b.s - Spring.flange_a.s;
//   Spring.flange_b.f = Spring.f;
//   Spring.flange_a.f = -Spring.f;
//   OuterContactA.v_rel = der(OuterContactA.s_rel);
//   OuterContactA.Contact = OuterContactA.s_rel < OuterContactA.s_rel0;
//   OuterContactA.f = if OuterContactA.Contact then OuterContactA.c * (OuterContactA.s_rel - OuterContactA.s_rel0) + OuterContactA.d * OuterContactA.v_rel else 0.0;
//   OuterContactA.s_rel = OuterContactA.flange_b.s - OuterContactA.flange_a.s;
//   OuterContactA.flange_b.f = OuterContactA.f;
//   OuterContactA.flange_a.f = -OuterContactA.f;
//   OuterContactB.v_rel = der(OuterContactB.s_rel);
//   OuterContactB.Contact = OuterContactB.s_rel < OuterContactB.s_rel0;
//   OuterContactB.f = if OuterContactB.Contact then OuterContactB.c * (OuterContactB.s_rel - OuterContactB.s_rel0) + OuterContactB.d * OuterContactB.v_rel else 0.0;
//   OuterContactB.s_rel = OuterContactB.flange_b.s - OuterContactB.flange_a.s;
//   OuterContactB.flange_b.f = OuterContactB.f;
//   OuterContactB.flange_a.f = -OuterContactB.f;
//   0.0 = Rod1.flange_a.f + Rod1.flange_b.f;
//   Rod1.flange_a.s = Rod1.s + (-Rod1.L) / 2.0;
//   Rod1.flange_b.s = Rod1.s + Rod1.L / 2.0;
//   Friction.v_rel = der(Friction.s_rel);
//   Friction.f = Friction.d * Friction.v_rel;
//   Friction.s_rel = Friction.flange_b.s - Friction.flange_a.s;
//   Friction.flange_b.f = Friction.f;
//   Friction.flange_a.f = -Friction.f;
//   Force1.flange_b.f = -Force1.f;
//   0.0 = Housing.flange_a.f + Housing.flange_b.f;
//   Housing.flange_a.s = Housing.s + (-Housing.L) / 2.0;
//   Housing.flange_b.s = Housing.s + Housing.L / 2.0;
//   0.0 = Rod3.flange_a.f + Rod3.flange_b.f;
//   Rod3.flange_a.s = Rod3.s + (-Rod3.L) / 2.0;
//   Rod3.flange_b.s = Rod3.s + Rod3.L / 2.0;
//   0.0 = Rod4.flange_a.f + Rod4.flange_b.f;
//   Rod4.flange_a.s = Rod4.s + (-Rod4.L) / 2.0;
//   Rod4.flange_b.s = Rod4.s + Rod4.L / 2.0;
//   0.0 = Rod2.flange_a.f + Rod2.flange_b.f;
//   Rod2.flange_a.s = Rod2.s + (-Rod2.L) / 2.0;
//   Rod2.flange_b.s = Rod2.s + Rod2.L / 2.0;
//   Sine1.y = Sine1.offset + (if time < Sine1.startTime then 0.0 else Sine1.amplitude * sin(6.28318530717959 * (Sine1.freqHz * (time - Sine1.startTime)) + Sine1.phase));
//   InnerContactA.flange_a.f + Friction.flange_b.f + Rod3.flange_a.f = 0.0;
//   InnerContactA.flange_b.f + Rod1.flange_b.f = 0.0;
//   InnerContactB.flange_a.f + Rod2.flange_a.f = 0.0;
//   InnerContactB.flange_b.f + Rod4.flange_b.f = 0.0;
//   Spool.flange_a.f + Force1.flange_b.f + Rod3.flange_b.f + Rod4.flange_a.f = 0.0;
//   Spool.flange_b.f = 0.0;
//   FixedLe.flange_b.f + OuterContactA.flange_a.f + Friction.flange_a.f + Housing.flange_a.f = 0.0;
//   SpringPlateA.flange_a.f + OuterContactA.flange_b.f = 0.0;
//   SpringPlateA.flange_b.f + Spring.flange_a.f + Rod1.flange_a.f = 0.0;
//   SpringPlateB.flange_a.f + Spring.flange_b.f + Rod2.flange_b.f = 0.0;
//   SpringPlateB.flange_b.f + OuterContactB.flange_a.f = 0.0;
//   OuterContactB.flange_b.f + Housing.flange_b.f = 0.0;
//   Force1.f = Sine1.y;
//   Force1.flange_b.s = Rod3.flange_b.s;
//   Force1.flange_b.s = Rod4.flange_a.s;
//   Force1.flange_b.s = Spool.flange_a.s;
//   Rod2.flange_b.s = Spring.flange_b.s;
//   Rod2.flange_b.s = SpringPlateB.flange_a.s;
//   Friction.flange_b.s = InnerContactA.flange_a.s;
//   Friction.flange_b.s = Rod3.flange_a.s;
//   InnerContactB.flange_b.s = Rod4.flange_b.s;
//   InnerContactB.flange_a.s = Rod2.flange_a.s;
//   InnerContactA.flange_b.s = Rod1.flange_b.s;
//   Rod1.flange_a.s = Spring.flange_a.s;
//   Rod1.flange_a.s = SpringPlateA.flange_b.s;
//   Housing.flange_b.s = OuterContactB.flange_b.s;
//   FixedLe.flange_b.s = Friction.flange_a.s;
//   FixedLe.flange_b.s = Housing.flange_a.s;
//   FixedLe.flange_b.s = OuterContactA.flange_a.s;
//   OuterContactB.flange_a.s = SpringPlateB.flange_b.s;
//   OuterContactA.flange_b.s = SpringPlateA.flange_a.s;
// end Modelica.Mechanics.Translational.Examples.PreLoad;
// "
// "Notification: Modelica language version set to 2.x due to loading of MSL 2.2.1.
// [Translational.mo:448:7-448:166:writable] Warning: Component Spring has the same name as its type .Modelica.Mechanics.Translational.Spring.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// endResult
