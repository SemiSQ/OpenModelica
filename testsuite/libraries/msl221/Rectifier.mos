//name:         Rectifier
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadModel(Modelica,{"2.2.1"});
instantiateModel(Modelica.Electrical.Analog.Examples.Rectifier);
getErrorString();
// Result:
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// class Modelica.Electrical.Analog.Examples.Rectifier
//   parameter Real VAC(quantity = \"ElectricPotential\", unit = \"V\") = 400.0 \"RMS line-to-line\";
//   parameter Real f(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"line frequency\";
//   parameter Real LAC(quantity = \"Inductance\", unit = \"H\") = 6e-005 \"line inductor\";
//   parameter Real Ron(quantity = \"Resistance\", unit = \"Ohm\") = 0.001 \"diode forward resistance\";
//   parameter Real Goff(quantity = \"Conductance\", unit = \"S\") = 0.001 \"diode backward conductance\";
//   parameter Real Vknee(quantity = \"ElectricPotential\", unit = \"V\") = 2.0 \"diode threshold voltage\";
//   parameter Real CDC(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 0.015 \"DC capacitance\";
//   parameter Real IDC(quantity = \"ElectricCurrent\", unit = \"A\") = 500.0 \"load current\";
//   output Real uDC(quantity = \"ElectricPotential\", unit = \"V\");
//   output Real iAC[1](quantity = \"ElectricCurrent\", unit = \"A\");
//   output Real iAC[2](quantity = \"ElectricCurrent\", unit = \"A\");
//   output Real iAC[3](quantity = \"ElectricCurrent\", unit = \"A\");
//   output Real uAC[1](quantity = \"ElectricPotential\", unit = \"V\");
//   output Real uAC[2](quantity = \"ElectricPotential\", unit = \"V\");
//   output Real uAC[3](quantity = \"ElectricPotential\", unit = \"V\");
//   output Real Losses(quantity = \"Power\", unit = \"W\");
//   Real Ground1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Ground1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SignalCurrent1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SignalCurrent1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SignalCurrent1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SignalCurrent1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SignalCurrent1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   input Real SignalCurrent1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n as input signal\";
//   Real SineVoltage2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage2.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real SineVoltage2.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   parameter Real SineVoltage2.V(quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VAC \"Amplitude of sine wave\";
//   parameter Real SineVoltage2.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = -2.0943951023932 \"Phase of sine wave\";
//   parameter Real SineVoltage2.freqHz(quantity = \"Frequency\", unit = \"Hz\") = f \"Frequency of sine wave\";
//   output Real SineVoltage2.signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage2.signalSource.amplitude = SineVoltage2.V \"Amplitude of sine wave\";
//   parameter Real SineVoltage2.signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage2.freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage2.signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage2.phase \"Phase of sine wave\";
//   parameter Real SineVoltage2.signalSource.offset = SineVoltage2.offset \"Offset of output signal\";
//   parameter Real SineVoltage2.signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage2.startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage2.signalSource.pi = 3.14159265358979;
//   Real SineVoltage3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage3.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage3.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage3.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage3.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage3.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real SineVoltage3.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   parameter Real SineVoltage3.V(quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VAC \"Amplitude of sine wave\";
//   parameter Real SineVoltage3.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = -4.18879020478639 \"Phase of sine wave\";
//   parameter Real SineVoltage3.freqHz(quantity = \"Frequency\", unit = \"Hz\") = f \"Frequency of sine wave\";
//   output Real SineVoltage3.signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage3.signalSource.amplitude = SineVoltage3.V \"Amplitude of sine wave\";
//   parameter Real SineVoltage3.signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage3.freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage3.signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage3.phase \"Phase of sine wave\";
//   parameter Real SineVoltage3.signalSource.offset = SineVoltage3.offset \"Offset of output signal\";
//   parameter Real SineVoltage3.signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage3.startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage3.signalSource.pi = 3.14159265358979;
//   Real SineVoltage1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real SineVoltage1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real SineVoltage1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real SineVoltage1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real SineVoltage1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real SineVoltage1.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real SineVoltage1.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   parameter Real SineVoltage1.V(quantity = \"ElectricPotential\", unit = \"V\") = 0.816496580927726 * VAC \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real SineVoltage1.freqHz(quantity = \"Frequency\", unit = \"Hz\") = f \"Frequency of sine wave\";
//   output Real SineVoltage1.signalSource.y \"Connector of Real output signal\";
//   parameter Real SineVoltage1.signalSource.amplitude = SineVoltage1.V \"Amplitude of sine wave\";
//   parameter Real SineVoltage1.signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\") = SineVoltage1.freqHz \"Frequency of sine wave\";
//   parameter Real SineVoltage1.signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = SineVoltage1.phase \"Phase of sine wave\";
//   parameter Real SineVoltage1.signalSource.offset = SineVoltage1.offset \"Offset of output signal\";
//   parameter Real SineVoltage1.signalSource.startTime(quantity = \"Time\", unit = \"s\") = SineVoltage1.startTime \"Output = offset for time < startTime\";
//   protected constant Real SineVoltage1.signalSource.pi = 3.14159265358979;
//   Real Inductor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Inductor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Inductor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Inductor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Inductor1.L(quantity = \"Inductance\", unit = \"H\") = LAC \"Inductance\";
//   Real Inductor2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Inductor2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Inductor2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Inductor2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Inductor2.L(quantity = \"Inductance\", unit = \"H\") = LAC \"Inductance\";
//   Real Inductor3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Inductor3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Inductor3.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor3.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Inductor3.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Inductor3.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Inductor3.L(quantity = \"Inductance\", unit = \"H\") = LAC \"Inductance\";
//   Real IdealDiode6.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode6.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode6.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode6.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode6.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode6.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode6.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode6.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode6.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode6.off(start = true) \"Switching state\";
//   protected Real IdealDiode6.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode6.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode6.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealDiode5.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode5.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode5.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode5.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode5.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode5.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode5.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode5.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode5.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode5.off(start = true) \"Switching state\";
//   protected Real IdealDiode5.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode5.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode5.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealDiode4.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode4.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode4.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode4.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode4.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode4.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode4.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode4.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode4.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode4.off(start = true) \"Switching state\";
//   protected Real IdealDiode4.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode4.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode4.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealDiode1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode1.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode1.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode1.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode1.off(start = true) \"Switching state\";
//   protected Real IdealDiode1.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode1.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode1.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealDiode2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode2.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode2.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode2.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode2.off(start = true) \"Switching state\";
//   protected Real IdealDiode2.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode2.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode2.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real IdealDiode3.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real IdealDiode3.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real IdealDiode3.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode3.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real IdealDiode3.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real IdealDiode3.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real IdealDiode3.Ron(quantity = \"Resistance\", unit = \"Ohm\", min = 0.0) = Ron \"Forward state-on differential resistance (closed diode resistance)\";
//   parameter Real IdealDiode3.Goff(quantity = \"Conductance\", unit = \"S\", min = 0.0) = Goff \"Backward state-off conductance (opened diode conductance)\";
//   parameter Real IdealDiode3.Vknee(quantity = \"ElectricPotential\", unit = \"V\", min = 0.0) = Vknee \"Forward threshold voltage\";
//   Boolean IdealDiode3.off(start = true) \"Switching state\";
//   protected Real IdealDiode3.s \"Auxiliary variable: if on then current, if opened then voltage\";
//   protected parameter Real IdealDiode3.unitVoltage(quantity = \"ElectricPotential\", unit = \"V\") = 1.0;
//   protected parameter Real IdealDiode3.unitCurrent(quantity = \"ElectricCurrent\", unit = \"A\") = 1.0;
//   Real Capacitor2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Capacitor2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Capacitor2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Capacitor2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Capacitor2.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 2.0 * CDC \"Capacitance\";
//   Real Capacitor1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real Capacitor1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real Capacitor1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real Capacitor1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real Capacitor1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real Capacitor1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 2.0 * CDC \"Capacitance\";
//   output Real Constant1.y \"Connector of Real output signal\";
//   parameter Real Constant1.k = IDC \"Constant output value\";
// initial equation
//   Capacitor1.v = 0.707106781186548 * VAC;
//   Capacitor2.v = 0.707106781186548 * VAC;
// equation
//   Ground1.p.v = 0.0;
//   SignalCurrent1.v = SignalCurrent1.p.v - SignalCurrent1.n.v;
//   0.0 = SignalCurrent1.p.i + SignalCurrent1.n.i;
//   SignalCurrent1.i = SignalCurrent1.p.i;
//   SineVoltage2.signalSource.y = SineVoltage2.signalSource.offset + (if time < SineVoltage2.signalSource.startTime then 0.0 else SineVoltage2.signalSource.amplitude * sin(6.28318530717959 * (SineVoltage2.signalSource.freqHz * (time - SineVoltage2.signalSource.startTime)) + SineVoltage2.signalSource.phase));
//   SineVoltage2.v = SineVoltage2.signalSource.y;
//   SineVoltage2.v = SineVoltage2.p.v - SineVoltage2.n.v;
//   0.0 = SineVoltage2.p.i + SineVoltage2.n.i;
//   SineVoltage2.i = SineVoltage2.p.i;
//   SineVoltage3.signalSource.y = SineVoltage3.signalSource.offset + (if time < SineVoltage3.signalSource.startTime then 0.0 else SineVoltage3.signalSource.amplitude * sin(6.28318530717959 * (SineVoltage3.signalSource.freqHz * (time - SineVoltage3.signalSource.startTime)) + SineVoltage3.signalSource.phase));
//   SineVoltage3.v = SineVoltage3.signalSource.y;
//   SineVoltage3.v = SineVoltage3.p.v - SineVoltage3.n.v;
//   0.0 = SineVoltage3.p.i + SineVoltage3.n.i;
//   SineVoltage3.i = SineVoltage3.p.i;
//   SineVoltage1.signalSource.y = SineVoltage1.signalSource.offset + (if time < SineVoltage1.signalSource.startTime then 0.0 else SineVoltage1.signalSource.amplitude * sin(6.28318530717959 * (SineVoltage1.signalSource.freqHz * (time - SineVoltage1.signalSource.startTime)) + SineVoltage1.signalSource.phase));
//   SineVoltage1.v = SineVoltage1.signalSource.y;
//   SineVoltage1.v = SineVoltage1.p.v - SineVoltage1.n.v;
//   0.0 = SineVoltage1.p.i + SineVoltage1.n.i;
//   SineVoltage1.i = SineVoltage1.p.i;
//   Inductor1.L * der(Inductor1.i) = Inductor1.v;
//   Inductor1.v = Inductor1.p.v - Inductor1.n.v;
//   0.0 = Inductor1.p.i + Inductor1.n.i;
//   Inductor1.i = Inductor1.p.i;
//   Inductor2.L * der(Inductor2.i) = Inductor2.v;
//   Inductor2.v = Inductor2.p.v - Inductor2.n.v;
//   0.0 = Inductor2.p.i + Inductor2.n.i;
//   Inductor2.i = Inductor2.p.i;
//   Inductor3.L * der(Inductor3.i) = Inductor3.v;
//   Inductor3.v = Inductor3.p.v - Inductor3.n.v;
//   0.0 = Inductor3.p.i + Inductor3.n.i;
//   Inductor3.i = Inductor3.p.i;
//   IdealDiode6.off = IdealDiode6.s < 0.0;
//   IdealDiode6.v = IdealDiode6.s * (IdealDiode6.unitCurrent * (if IdealDiode6.off then 1.0 else IdealDiode6.Ron)) + IdealDiode6.Vknee;
//   IdealDiode6.i = IdealDiode6.s * (IdealDiode6.unitVoltage * (if IdealDiode6.off then IdealDiode6.Goff else 1.0)) + IdealDiode6.Goff * IdealDiode6.Vknee;
//   IdealDiode6.v = IdealDiode6.p.v - IdealDiode6.n.v;
//   0.0 = IdealDiode6.p.i + IdealDiode6.n.i;
//   IdealDiode6.i = IdealDiode6.p.i;
//   IdealDiode5.off = IdealDiode5.s < 0.0;
//   IdealDiode5.v = IdealDiode5.s * (IdealDiode5.unitCurrent * (if IdealDiode5.off then 1.0 else IdealDiode5.Ron)) + IdealDiode5.Vknee;
//   IdealDiode5.i = IdealDiode5.s * (IdealDiode5.unitVoltage * (if IdealDiode5.off then IdealDiode5.Goff else 1.0)) + IdealDiode5.Goff * IdealDiode5.Vknee;
//   IdealDiode5.v = IdealDiode5.p.v - IdealDiode5.n.v;
//   0.0 = IdealDiode5.p.i + IdealDiode5.n.i;
//   IdealDiode5.i = IdealDiode5.p.i;
//   IdealDiode4.off = IdealDiode4.s < 0.0;
//   IdealDiode4.v = IdealDiode4.s * (IdealDiode4.unitCurrent * (if IdealDiode4.off then 1.0 else IdealDiode4.Ron)) + IdealDiode4.Vknee;
//   IdealDiode4.i = IdealDiode4.s * (IdealDiode4.unitVoltage * (if IdealDiode4.off then IdealDiode4.Goff else 1.0)) + IdealDiode4.Goff * IdealDiode4.Vknee;
//   IdealDiode4.v = IdealDiode4.p.v - IdealDiode4.n.v;
//   0.0 = IdealDiode4.p.i + IdealDiode4.n.i;
//   IdealDiode4.i = IdealDiode4.p.i;
//   IdealDiode1.off = IdealDiode1.s < 0.0;
//   IdealDiode1.v = IdealDiode1.s * (IdealDiode1.unitCurrent * (if IdealDiode1.off then 1.0 else IdealDiode1.Ron)) + IdealDiode1.Vknee;
//   IdealDiode1.i = IdealDiode1.s * (IdealDiode1.unitVoltage * (if IdealDiode1.off then IdealDiode1.Goff else 1.0)) + IdealDiode1.Goff * IdealDiode1.Vknee;
//   IdealDiode1.v = IdealDiode1.p.v - IdealDiode1.n.v;
//   0.0 = IdealDiode1.p.i + IdealDiode1.n.i;
//   IdealDiode1.i = IdealDiode1.p.i;
//   IdealDiode2.off = IdealDiode2.s < 0.0;
//   IdealDiode2.v = IdealDiode2.s * (IdealDiode2.unitCurrent * (if IdealDiode2.off then 1.0 else IdealDiode2.Ron)) + IdealDiode2.Vknee;
//   IdealDiode2.i = IdealDiode2.s * (IdealDiode2.unitVoltage * (if IdealDiode2.off then IdealDiode2.Goff else 1.0)) + IdealDiode2.Goff * IdealDiode2.Vknee;
//   IdealDiode2.v = IdealDiode2.p.v - IdealDiode2.n.v;
//   0.0 = IdealDiode2.p.i + IdealDiode2.n.i;
//   IdealDiode2.i = IdealDiode2.p.i;
//   IdealDiode3.off = IdealDiode3.s < 0.0;
//   IdealDiode3.v = IdealDiode3.s * (IdealDiode3.unitCurrent * (if IdealDiode3.off then 1.0 else IdealDiode3.Ron)) + IdealDiode3.Vknee;
//   IdealDiode3.i = IdealDiode3.s * (IdealDiode3.unitVoltage * (if IdealDiode3.off then IdealDiode3.Goff else 1.0)) + IdealDiode3.Goff * IdealDiode3.Vknee;
//   IdealDiode3.v = IdealDiode3.p.v - IdealDiode3.n.v;
//   0.0 = IdealDiode3.p.i + IdealDiode3.n.i;
//   IdealDiode3.i = IdealDiode3.p.i;
//   Capacitor2.i = Capacitor2.C * der(Capacitor2.v);
//   Capacitor2.v = Capacitor2.p.v - Capacitor2.n.v;
//   0.0 = Capacitor2.p.i + Capacitor2.n.i;
//   Capacitor2.i = Capacitor2.p.i;
//   Capacitor1.i = Capacitor1.C * der(Capacitor1.v);
//   Capacitor1.v = Capacitor1.p.v - Capacitor1.n.v;
//   0.0 = Capacitor1.p.i + Capacitor1.n.i;
//   Capacitor1.i = Capacitor1.p.i;
//   Constant1.y = Constant1.k;
//   uDC = Capacitor1.v + Capacitor2.v;
//   iAC[1] = Inductor1.i;
//   iAC[2] = Inductor2.i;
//   iAC[3] = Inductor3.i;
//   uAC[1] = Inductor1.n.v - Inductor2.n.v;
//   uAC[2] = Inductor2.n.v - Inductor3.n.v;
//   uAC[3] = Inductor3.n.v - Inductor1.n.v;
//   Losses = IdealDiode1.v * IdealDiode1.i + (IdealDiode2.v * IdealDiode2.i + (IdealDiode3.v * IdealDiode3.i + (IdealDiode4.v * IdealDiode4.i + (IdealDiode5.v * IdealDiode5.i + IdealDiode6.v * IdealDiode6.i))));
//   Ground1.p.i + Capacitor2.p.i + Capacitor1.n.i = 0.0;
//   SignalCurrent1.p.i + IdealDiode1.n.i + IdealDiode2.n.i + IdealDiode3.n.i + Capacitor1.p.i = 0.0;
//   SignalCurrent1.n.i + IdealDiode6.p.i + IdealDiode5.p.i + IdealDiode4.p.i + Capacitor2.n.i = 0.0;
//   SineVoltage2.p.i + Inductor2.p.i = 0.0;
//   SineVoltage2.n.i + SineVoltage3.n.i + SineVoltage1.n.i = 0.0;
//   SineVoltage3.p.i + Inductor3.p.i = 0.0;
//   SineVoltage1.p.i + Inductor1.p.i = 0.0;
//   Inductor1.n.i + IdealDiode4.n.i + IdealDiode1.p.i = 0.0;
//   Inductor2.n.i + IdealDiode5.n.i + IdealDiode2.p.i = 0.0;
//   Inductor3.n.i + IdealDiode6.n.i + IdealDiode3.p.i = 0.0;
//   Inductor3.p.v = SineVoltage3.p.v;
//   Inductor2.p.v = SineVoltage2.p.v;
//   SineVoltage1.n.v = SineVoltage2.n.v;
//   SineVoltage1.n.v = SineVoltage3.n.v;
//   Inductor1.p.v = SineVoltage1.p.v;
//   Capacitor2.n.v = IdealDiode4.p.v;
//   Capacitor2.n.v = IdealDiode5.p.v;
//   Capacitor2.n.v = IdealDiode6.p.v;
//   Capacitor2.n.v = SignalCurrent1.n.v;
//   IdealDiode1.p.v = IdealDiode4.n.v;
//   IdealDiode1.p.v = Inductor1.n.v;
//   IdealDiode2.p.v = IdealDiode5.n.v;
//   IdealDiode2.p.v = Inductor2.n.v;
//   Capacitor1.p.v = IdealDiode1.n.v;
//   Capacitor1.p.v = IdealDiode2.n.v;
//   Capacitor1.p.v = IdealDiode3.n.v;
//   Capacitor1.p.v = SignalCurrent1.p.v;
//   IdealDiode3.p.v = IdealDiode6.n.v;
//   IdealDiode3.p.v = Inductor3.n.v;
//   Capacitor1.n.v = Capacitor2.p.v;
//   Capacitor1.n.v = Ground1.p.v;
//   Constant1.y = SignalCurrent1.i;
// end Modelica.Electrical.Analog.Examples.Rectifier;
// "
// "Notification: Modelica language version set to 2.x due to loading of MSL 2.2.1.
// "
// endResult
