//name:         TransformerYY
//keyword:      instantiating msl221
//status:       correct
//
// instantiate example
//

loadFile("Modelica/package.mo");
instantiateModel(Modelica.Electrical.MultiPhase.Examples.TransformerYY);
getErrorString();
// Result:
// true
// "function Modelica.Math.sin
// input Real u(quantity = "Angle", unit = "rad", displayUnit = "deg");
// output Real y;
// 
// external "C";
// end Modelica.Math.sin;
// 
// class Modelica.Electrical.MultiPhase.Examples.TransformerYY
// parameter Integer m = 3 "Number of phases";
// parameter Real V(quantity = "ElectricPotential", unit = "V") = 1.0 "Amplitude of Star-Voltage";
// parameter Real f(quantity = "Frequency", unit = "Hz") = 5.0 "Frequency";
// parameter Real LT(quantity = "Inductance", unit = "H") = 0.003 "Transformer stray inductance";
// parameter Real RT(quantity = "Resistance", unit = "Ohm") = 0.05 "Transformer resistance";
// parameter Real RL(quantity = "Resistance", unit = "Ohm") = 1.0 "Load Resistance";
// parameter Integer SineVoltage1.m(min = 1) = m "number of phases";
// Real SineVoltage1.v[1](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real SineVoltage1.v[2](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real SineVoltage1.v[3](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real SineVoltage1.i[1](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real SineVoltage1.i[2](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real SineVoltage1.i[3](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// parameter Integer SineVoltage1.plug_p.m(min = 1) = SineVoltage1.m "number of phases";
// Real SineVoltage1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer SineVoltage1.plug_n.m(min = 1) = SineVoltage1.m "number of phases";
// Real SineVoltage1.plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage1.V[1](quantity = "ElectricPotential", unit = "V") = V "Amplitudes of sine waves";
// parameter Real SineVoltage1.V[2](quantity = "ElectricPotential", unit = "V") = V "Amplitudes of sine waves";
// parameter Real SineVoltage1.V[3](quantity = "ElectricPotential", unit = "V") = V "Amplitudes of sine waves";
// parameter Real SineVoltage1.phase[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Phases of sine waves";
// parameter Real SineVoltage1.phase[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = -6.28318530717959 / Real(SineVoltage1.m) "Phases of sine waves";
// parameter Real SineVoltage1.phase[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = -12.5663706143592 / Real(SineVoltage1.m) "Phases of sine waves";
// parameter Real SineVoltage1.freqHz[1](quantity = "Frequency", unit = "Hz") = f "Frequencies of sine waves";
// parameter Real SineVoltage1.freqHz[2](quantity = "Frequency", unit = "Hz") = f "Frequencies of sine waves";
// parameter Real SineVoltage1.freqHz[3](quantity = "Frequency", unit = "Hz") = f "Frequencies of sine waves";
// parameter Real SineVoltage1.offset[1](quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offsets";
// parameter Real SineVoltage1.offset[2](quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offsets";
// parameter Real SineVoltage1.offset[3](quantity = "ElectricPotential", unit = "V") = 0.0 "Voltage offsets";
// parameter Real SineVoltage1.startTime[1](quantity = "Time", unit = "s") = 0.0 "Time offsets";
// parameter Real SineVoltage1.startTime[2](quantity = "Time", unit = "s") = 0.0 "Time offsets";
// parameter Real SineVoltage1.startTime[3](quantity = "Time", unit = "s") = 0.0 "Time offsets";
// Real SineVoltage1.sineVoltage[1].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage1.sineVoltage[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage1.sineVoltage[1].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[1].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.sineVoltage[1].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[1].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage1.sineVoltage[1].offset(quantity = "ElectricPotential", unit = "V") = SineVoltage1.offset[1] "Voltage offset";
// parameter Real SineVoltage1.sineVoltage[1].startTime(quantity = "Time", unit = "s") = SineVoltage1.startTime[1] "Time offset";
// output Real SineVoltage1.sineVoltage[1].signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage1.sineVoltage[1].signalSource.amplitude = SineVoltage1.sineVoltage[1].V "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[1].signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.sineVoltage[1].freqHz "Frequency of sine wave";
// parameter Real SineVoltage1.sineVoltage[1].signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.sineVoltage[1].phase "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[1].signalSource.offset = SineVoltage1.sineVoltage[1].offset "Offset of output signal";
// parameter Real SineVoltage1.sineVoltage[1].signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage1.sineVoltage[1].startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage1.sineVoltage[1].signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage1.sineVoltage[1].V(quantity = "ElectricPotential", unit = "V") = SineVoltage1.V[1] "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[1].phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.phase[1] "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[1].freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.freqHz[1] "Frequency of sine wave";
// Real SineVoltage1.sineVoltage[2].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage1.sineVoltage[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage1.sineVoltage[2].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[2].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.sineVoltage[2].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[2].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage1.sineVoltage[2].offset(quantity = "ElectricPotential", unit = "V") = SineVoltage1.offset[2] "Voltage offset";
// parameter Real SineVoltage1.sineVoltage[2].startTime(quantity = "Time", unit = "s") = SineVoltage1.startTime[2] "Time offset";
// output Real SineVoltage1.sineVoltage[2].signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage1.sineVoltage[2].signalSource.amplitude = SineVoltage1.sineVoltage[2].V "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[2].signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.sineVoltage[2].freqHz "Frequency of sine wave";
// parameter Real SineVoltage1.sineVoltage[2].signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.sineVoltage[2].phase "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[2].signalSource.offset = SineVoltage1.sineVoltage[2].offset "Offset of output signal";
// parameter Real SineVoltage1.sineVoltage[2].signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage1.sineVoltage[2].startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage1.sineVoltage[2].signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage1.sineVoltage[2].V(quantity = "ElectricPotential", unit = "V") = SineVoltage1.V[2] "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[2].phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.phase[2] "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[2].freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.freqHz[2] "Frequency of sine wave";
// Real SineVoltage1.sineVoltage[3].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real SineVoltage1.sineVoltage[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real SineVoltage1.sineVoltage[3].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[3].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real SineVoltage1.sineVoltage[3].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real SineVoltage1.sineVoltage[3].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real SineVoltage1.sineVoltage[3].offset(quantity = "ElectricPotential", unit = "V") = SineVoltage1.offset[3] "Voltage offset";
// parameter Real SineVoltage1.sineVoltage[3].startTime(quantity = "Time", unit = "s") = SineVoltage1.startTime[3] "Time offset";
// output Real SineVoltage1.sineVoltage[3].signalSource.y "Connector of Real output signal";
// parameter Real SineVoltage1.sineVoltage[3].signalSource.amplitude = SineVoltage1.sineVoltage[3].V "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[3].signalSource.freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.sineVoltage[3].freqHz "Frequency of sine wave";
// parameter Real SineVoltage1.sineVoltage[3].signalSource.phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.sineVoltage[3].phase "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[3].signalSource.offset = SineVoltage1.sineVoltage[3].offset "Offset of output signal";
// parameter Real SineVoltage1.sineVoltage[3].signalSource.startTime(quantity = "Time", unit = "s") = SineVoltage1.sineVoltage[3].startTime "Output = offset for time < startTime";
// protected constant Real SineVoltage1.sineVoltage[3].signalSource.pi = 3.14159265358979;
// parameter Real SineVoltage1.sineVoltage[3].V(quantity = "ElectricPotential", unit = "V") = SineVoltage1.V[3] "Amplitude of sine wave";
// parameter Real SineVoltage1.sineVoltage[3].phase(quantity = "Angle", unit = "rad", displayUnit = "deg") = SineVoltage1.phase[3] "Phase of sine wave";
// parameter Real SineVoltage1.sineVoltage[3].freqHz(quantity = "Frequency", unit = "Hz") = SineVoltage1.freqHz[3] "Frequency of sine wave";
// Real GroundS1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real GroundS1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer IdealTransformer1.m(min = 1) = m "number of phases";
// Real IdealTransformer1.v1[1](quantity = "ElectricPotential", unit = "V") "Voltage drops over the left port";
// Real IdealTransformer1.v1[2](quantity = "ElectricPotential", unit = "V") "Voltage drops over the left port";
// Real IdealTransformer1.v1[3](quantity = "ElectricPotential", unit = "V") "Voltage drops over the left port";
// Real IdealTransformer1.v2[1](quantity = "ElectricPotential", unit = "V") "Voltage drops over the right port";
// Real IdealTransformer1.v2[2](quantity = "ElectricPotential", unit = "V") "Voltage drops over the right port";
// Real IdealTransformer1.v2[3](quantity = "ElectricPotential", unit = "V") "Voltage drops over the right port";
// Real IdealTransformer1.i1[1](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the left port";
// Real IdealTransformer1.i1[2](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the left port";
// Real IdealTransformer1.i1[3](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the left port";
// Real IdealTransformer1.i2[1](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the right port";
// Real IdealTransformer1.i2[2](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the right port";
// Real IdealTransformer1.i2[3](quantity = "ElectricCurrent", unit = "A") "Current flowing into positive plug of the right port";
// parameter Integer IdealTransformer1.plug_p1.m(min = 1) = IdealTransformer1.m "number of phases";
// Real IdealTransformer1.plug_p1.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p1.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_p1.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p1.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_p1.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p1.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer IdealTransformer1.plug_p2.m(min = 1) = IdealTransformer1.m "number of phases";
// Real IdealTransformer1.plug_p2.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p2.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_p2.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p2.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_p2.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_p2.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer IdealTransformer1.plug_n1.m(min = 1) = IdealTransformer1.m "number of phases";
// Real IdealTransformer1.plug_n1.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n1.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_n1.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n1.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_n1.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n1.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer IdealTransformer1.plug_n2.m(min = 1) = IdealTransformer1.m "number of phases";
// Real IdealTransformer1.plug_n2.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n2.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_n2.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n2.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.plug_n2.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.plug_n2.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real IdealTransformer1.n[1] = 1.0 "Turns ratio";
// parameter Real IdealTransformer1.n[2] = 1.0 "Turns ratio";
// parameter Real IdealTransformer1.n[3] = 1.0 "Turns ratio";
// Real IdealTransformer1.idealTransformer[1].v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
// Real IdealTransformer1.idealTransformer[1].v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
// Real IdealTransformer1.idealTransformer[1].i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
// Real IdealTransformer1.idealTransformer[1].i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
// Real IdealTransformer1.idealTransformer[1].p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[1].p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[1].n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[1].n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[1].p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[1].p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[1].n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[1].n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real IdealTransformer1.idealTransformer[1].n = IdealTransformer1.n[1] "Turns ratio";
// Real IdealTransformer1.idealTransformer[2].v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
// Real IdealTransformer1.idealTransformer[2].v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
// Real IdealTransformer1.idealTransformer[2].i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
// Real IdealTransformer1.idealTransformer[2].i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
// Real IdealTransformer1.idealTransformer[2].p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[2].p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[2].n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[2].n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[2].p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[2].p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[2].n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[2].n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real IdealTransformer1.idealTransformer[2].n = IdealTransformer1.n[2] "Turns ratio";
// Real IdealTransformer1.idealTransformer[3].v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
// Real IdealTransformer1.idealTransformer[3].v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
// Real IdealTransformer1.idealTransformer[3].i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
// Real IdealTransformer1.idealTransformer[3].i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
// Real IdealTransformer1.idealTransformer[3].p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[3].p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[3].n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[3].n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[3].p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[3].p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real IdealTransformer1.idealTransformer[3].n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real IdealTransformer1.idealTransformer[3].n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real IdealTransformer1.idealTransformer[3].n = IdealTransformer1.n[3] "Turns ratio";
// Real GroundT2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real GroundT2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer RT1.m(min = 1) = m "number of phases";
// Real RT1.v[1](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RT1.v[2](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RT1.v[3](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RT1.i[1](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real RT1.i[2](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real RT1.i[3](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// parameter Integer RT1.plug_p.m(min = 1) = RT1.m "number of phases";
// Real RT1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer RT1.plug_n.m(min = 1) = RT1.m "number of phases";
// Real RT1.plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RT1.R[1](quantity = "Resistance", unit = "Ohm") = RT "Resistance";
// parameter Real RT1.R[2](quantity = "Resistance", unit = "Ohm") = RT "Resistance";
// parameter Real RT1.R[3](quantity = "Resistance", unit = "Ohm") = RT "Resistance";
// Real RT1.resistor[1].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RT1.resistor[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RT1.resistor[1].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[1].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.resistor[1].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[1].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RT1.resistor[1].R(quantity = "Resistance", unit = "Ohm") = RT1.R[1] "Resistance";
// Real RT1.resistor[2].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RT1.resistor[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RT1.resistor[2].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[2].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.resistor[2].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[2].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RT1.resistor[2].R(quantity = "Resistance", unit = "Ohm") = RT1.R[2] "Resistance";
// Real RT1.resistor[3].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RT1.resistor[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RT1.resistor[3].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[3].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RT1.resistor[3].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RT1.resistor[3].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RT1.resistor[3].R(quantity = "Resistance", unit = "Ohm") = RT1.R[3] "Resistance";
// parameter Integer LT1.m(min = 1) = m "number of phases";
// Real LT1.v[1](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real LT1.v[2](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real LT1.v[3](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real LT1.i[1](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real LT1.i[2](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real LT1.i[3](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// parameter Integer LT1.plug_p.m(min = 1) = LT1.m "number of phases";
// Real LT1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer LT1.plug_n.m(min = 1) = LT1.m "number of phases";
// Real LT1.plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real LT1.L[1](quantity = "Inductance", unit = "H") = LT "Inductance";
// parameter Real LT1.L[2](quantity = "Inductance", unit = "H") = LT "Inductance";
// parameter Real LT1.L[3](quantity = "Inductance", unit = "H") = LT "Inductance";
// Real LT1.inductor[1].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real LT1.inductor[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real LT1.inductor[1].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[1].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.inductor[1].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[1].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real LT1.inductor[1].L(quantity = "Inductance", unit = "H") = LT1.L[1] "Inductance";
// Real LT1.inductor[2].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real LT1.inductor[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real LT1.inductor[2].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[2].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.inductor[2].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[2].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real LT1.inductor[2].L(quantity = "Inductance", unit = "H") = LT1.L[2] "Inductance";
// Real LT1.inductor[3].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real LT1.inductor[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real LT1.inductor[3].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[3].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real LT1.inductor[3].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real LT1.inductor[3].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real LT1.inductor[3].L(quantity = "Inductance", unit = "H") = LT1.L[3] "Inductance";
// parameter Integer RL1.m(min = 1) = m "number of phases";
// Real RL1.v[1](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RL1.v[2](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RL1.v[3](quantity = "ElectricPotential", unit = "V") "Voltage drops between the two plugs";
// Real RL1.i[1](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real RL1.i[2](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// Real RL1.i[3](quantity = "ElectricCurrent", unit = "A") "Currents flowing into positive plugs";
// parameter Integer RL1.plug_p.m(min = 1) = RL1.m "number of phases";
// Real RL1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer RL1.plug_n.m(min = 1) = RL1.m "number of phases";
// Real RL1.plug_n.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_n.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.plug_n.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_n.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.plug_n.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.plug_n.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RL1.R[1](quantity = "Resistance", unit = "Ohm") = RL "Resistance";
// parameter Real RL1.R[2](quantity = "Resistance", unit = "Ohm") = RL "Resistance";
// parameter Real RL1.R[3](quantity = "Resistance", unit = "Ohm") = RL "Resistance";
// Real RL1.resistor[1].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RL1.resistor[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RL1.resistor[1].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[1].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.resistor[1].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[1].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RL1.resistor[1].R(quantity = "Resistance", unit = "Ohm") = RL1.R[1] "Resistance";
// Real RL1.resistor[2].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RL1.resistor[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RL1.resistor[2].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[2].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.resistor[2].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[2].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RL1.resistor[2].R(quantity = "Resistance", unit = "Ohm") = RL1.R[2] "Resistance";
// Real RL1.resistor[3].v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
// Real RL1.resistor[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
// Real RL1.resistor[3].p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[3].p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real RL1.resistor[3].n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real RL1.resistor[3].n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Real RL1.resistor[3].R(quantity = "Resistance", unit = "Ohm") = RL1.R[3] "Resistance";
// Real GroundT1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real GroundT1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer StarT2.m(min = 1) = m "number of phases";
// parameter Integer StarT2.plug_p.m(min = 1) = StarT2.m "number of phases";
// Real StarT2.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT2.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT2.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT2.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT2.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT2.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT2.pin_n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT2.pin_n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer StarT1.m(min = 1) = m "number of phases";
// parameter Integer StarT1.plug_p.m(min = 1) = StarT1.m "number of phases";
// Real StarT1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarT1.pin_n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarT1.pin_n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer StarS1.m(min = 1) = m "number of phases";
// parameter Integer StarS1.plug_p.m(min = 1) = StarS1.m "number of phases";
// Real StarS1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarS1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarS1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarS1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarS1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarS1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarS1.pin_n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarS1.pin_n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// parameter Integer StarL1.m(min = 1) = m "number of phases";
// parameter Integer StarL1.plug_p.m(min = 1) = StarL1.m "number of phases";
// Real StarL1.plug_p.pin[1].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarL1.plug_p.pin[1].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarL1.plug_p.pin[2].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarL1.plug_p.pin[2].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarL1.plug_p.pin[3].v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarL1.plug_p.pin[3].i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// Real StarL1.pin_n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
// Real StarL1.pin_n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
// equation
//   SineVoltage1.sineVoltage[1].signalSource.y = SineVoltage1.sineVoltage[1].signalSource.offset + (if time < SineVoltage1.sineVoltage[1].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[1].signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage1.sineVoltage[1].signalSource.freqHz * (time - SineVoltage1.sineVoltage[1].signalSource.startTime)) + SineVoltage1.sineVoltage[1].signalSource.phase));
//   SineVoltage1.sineVoltage[1].v = SineVoltage1.sineVoltage[1].signalSource.y;
//   SineVoltage1.sineVoltage[1].v = SineVoltage1.sineVoltage[1].p.v - SineVoltage1.sineVoltage[1].n.v;
//   0.0 = SineVoltage1.sineVoltage[1].p.i + SineVoltage1.sineVoltage[1].n.i;
//   SineVoltage1.sineVoltage[1].i = SineVoltage1.sineVoltage[1].p.i;
//   SineVoltage1.sineVoltage[2].signalSource.y = SineVoltage1.sineVoltage[2].signalSource.offset + (if time < SineVoltage1.sineVoltage[2].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[2].signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage1.sineVoltage[2].signalSource.freqHz * (time - SineVoltage1.sineVoltage[2].signalSource.startTime)) + SineVoltage1.sineVoltage[2].signalSource.phase));
//   SineVoltage1.sineVoltage[2].v = SineVoltage1.sineVoltage[2].signalSource.y;
//   SineVoltage1.sineVoltage[2].v = SineVoltage1.sineVoltage[2].p.v - SineVoltage1.sineVoltage[2].n.v;
//   0.0 = SineVoltage1.sineVoltage[2].p.i + SineVoltage1.sineVoltage[2].n.i;
//   SineVoltage1.sineVoltage[2].i = SineVoltage1.sineVoltage[2].p.i;
//   SineVoltage1.sineVoltage[3].signalSource.y = SineVoltage1.sineVoltage[3].signalSource.offset + (if time < SineVoltage1.sineVoltage[3].signalSource.startTime then 0.0 else SineVoltage1.sineVoltage[3].signalSource.amplitude * Modelica.Math.sin(6.28318530717959 * (SineVoltage1.sineVoltage[3].signalSource.freqHz * (time - SineVoltage1.sineVoltage[3].signalSource.startTime)) + SineVoltage1.sineVoltage[3].signalSource.phase));
//   SineVoltage1.sineVoltage[3].v = SineVoltage1.sineVoltage[3].signalSource.y;
//   SineVoltage1.sineVoltage[3].v = SineVoltage1.sineVoltage[3].p.v - SineVoltage1.sineVoltage[3].n.v;
//   0.0 = SineVoltage1.sineVoltage[3].p.i + SineVoltage1.sineVoltage[3].n.i;
//   SineVoltage1.sineVoltage[3].i = SineVoltage1.sineVoltage[3].p.i;
//   SineVoltage1.v[1] = SineVoltage1.plug_p.pin[1].v - SineVoltage1.plug_n.pin[1].v;
//   SineVoltage1.v[2] = SineVoltage1.plug_p.pin[2].v - SineVoltage1.plug_n.pin[2].v;
//   SineVoltage1.v[3] = SineVoltage1.plug_p.pin[3].v - SineVoltage1.plug_n.pin[3].v;
//   SineVoltage1.i[1] = SineVoltage1.plug_p.pin[1].i;
//   SineVoltage1.i[2] = SineVoltage1.plug_p.pin[2].i;
//   SineVoltage1.i[3] = SineVoltage1.plug_p.pin[3].i;
//   SineVoltage1.sineVoltage[3].p.i + (-SineVoltage1.plug_p.pin[3].i) = 0.0;
// SineVoltage1.sineVoltage[3].p.v = SineVoltage1.plug_p.pin[3].v;
//   SineVoltage1.sineVoltage[2].p.i + (-SineVoltage1.plug_p.pin[2].i) = 0.0;
// SineVoltage1.sineVoltage[2].p.v = SineVoltage1.plug_p.pin[2].v;
//   SineVoltage1.sineVoltage[1].p.i + (-SineVoltage1.plug_p.pin[1].i) = 0.0;
// SineVoltage1.sineVoltage[1].p.v = SineVoltage1.plug_p.pin[1].v;
//   SineVoltage1.sineVoltage[3].n.i + (-SineVoltage1.plug_n.pin[3].i) = 0.0;
// SineVoltage1.sineVoltage[3].n.v = SineVoltage1.plug_n.pin[3].v;
//   SineVoltage1.sineVoltage[2].n.i + (-SineVoltage1.plug_n.pin[2].i) = 0.0;
// SineVoltage1.sineVoltage[2].n.v = SineVoltage1.plug_n.pin[2].v;
//   SineVoltage1.sineVoltage[1].n.i + (-SineVoltage1.plug_n.pin[1].i) = 0.0;
// SineVoltage1.sineVoltage[1].n.v = SineVoltage1.plug_n.pin[1].v;
//   GroundS1.p.v = 0.0;
//   IdealTransformer1.idealTransformer[1].v1 = IdealTransformer1.idealTransformer[1].n * IdealTransformer1.idealTransformer[1].v2;
//   IdealTransformer1.idealTransformer[1].i2 = (-IdealTransformer1.idealTransformer[1].n) * IdealTransformer1.idealTransformer[1].i1;
//   IdealTransformer1.idealTransformer[1].v1 = IdealTransformer1.idealTransformer[1].p1.v - IdealTransformer1.idealTransformer[1].n1.v;
//   IdealTransformer1.idealTransformer[1].v2 = IdealTransformer1.idealTransformer[1].p2.v - IdealTransformer1.idealTransformer[1].n2.v;
//   0.0 = IdealTransformer1.idealTransformer[1].p1.i + IdealTransformer1.idealTransformer[1].n1.i;
//   0.0 = IdealTransformer1.idealTransformer[1].p2.i + IdealTransformer1.idealTransformer[1].n2.i;
//   IdealTransformer1.idealTransformer[1].i1 = IdealTransformer1.idealTransformer[1].p1.i;
//   IdealTransformer1.idealTransformer[1].i2 = IdealTransformer1.idealTransformer[1].p2.i;
//   IdealTransformer1.idealTransformer[2].v1 = IdealTransformer1.idealTransformer[2].n * IdealTransformer1.idealTransformer[2].v2;
//   IdealTransformer1.idealTransformer[2].i2 = (-IdealTransformer1.idealTransformer[2].n) * IdealTransformer1.idealTransformer[2].i1;
//   IdealTransformer1.idealTransformer[2].v1 = IdealTransformer1.idealTransformer[2].p1.v - IdealTransformer1.idealTransformer[2].n1.v;
//   IdealTransformer1.idealTransformer[2].v2 = IdealTransformer1.idealTransformer[2].p2.v - IdealTransformer1.idealTransformer[2].n2.v;
//   0.0 = IdealTransformer1.idealTransformer[2].p1.i + IdealTransformer1.idealTransformer[2].n1.i;
//   0.0 = IdealTransformer1.idealTransformer[2].p2.i + IdealTransformer1.idealTransformer[2].n2.i;
//   IdealTransformer1.idealTransformer[2].i1 = IdealTransformer1.idealTransformer[2].p1.i;
//   IdealTransformer1.idealTransformer[2].i2 = IdealTransformer1.idealTransformer[2].p2.i;
//   IdealTransformer1.idealTransformer[3].v1 = IdealTransformer1.idealTransformer[3].n * IdealTransformer1.idealTransformer[3].v2;
//   IdealTransformer1.idealTransformer[3].i2 = (-IdealTransformer1.idealTransformer[3].n) * IdealTransformer1.idealTransformer[3].i1;
//   IdealTransformer1.idealTransformer[3].v1 = IdealTransformer1.idealTransformer[3].p1.v - IdealTransformer1.idealTransformer[3].n1.v;
//   IdealTransformer1.idealTransformer[3].v2 = IdealTransformer1.idealTransformer[3].p2.v - IdealTransformer1.idealTransformer[3].n2.v;
//   0.0 = IdealTransformer1.idealTransformer[3].p1.i + IdealTransformer1.idealTransformer[3].n1.i;
//   0.0 = IdealTransformer1.idealTransformer[3].p2.i + IdealTransformer1.idealTransformer[3].n2.i;
//   IdealTransformer1.idealTransformer[3].i1 = IdealTransformer1.idealTransformer[3].p1.i;
//   IdealTransformer1.idealTransformer[3].i2 = IdealTransformer1.idealTransformer[3].p2.i;
//   IdealTransformer1.v1[1] = IdealTransformer1.plug_p1.pin[1].v - IdealTransformer1.plug_n1.pin[1].v;
//   IdealTransformer1.v1[2] = IdealTransformer1.plug_p1.pin[2].v - IdealTransformer1.plug_n1.pin[2].v;
//   IdealTransformer1.v1[3] = IdealTransformer1.plug_p1.pin[3].v - IdealTransformer1.plug_n1.pin[3].v;
//   IdealTransformer1.v2[1] = IdealTransformer1.plug_p2.pin[1].v - IdealTransformer1.plug_n2.pin[1].v;
//   IdealTransformer1.v2[2] = IdealTransformer1.plug_p2.pin[2].v - IdealTransformer1.plug_n2.pin[2].v;
//   IdealTransformer1.v2[3] = IdealTransformer1.plug_p2.pin[3].v - IdealTransformer1.plug_n2.pin[3].v;
//   IdealTransformer1.i1[1] = IdealTransformer1.plug_p1.pin[1].i;
//   IdealTransformer1.i1[2] = IdealTransformer1.plug_p1.pin[2].i;
//   IdealTransformer1.i1[3] = IdealTransformer1.plug_p1.pin[3].i;
//   IdealTransformer1.i2[1] = IdealTransformer1.plug_p2.pin[1].i;
//   IdealTransformer1.i2[2] = IdealTransformer1.plug_p2.pin[2].i;
//   IdealTransformer1.i2[3] = IdealTransformer1.plug_p2.pin[3].i;
//   (-IdealTransformer1.plug_p1.pin[3].i) + IdealTransformer1.idealTransformer[3].p1.i = 0.0;
// IdealTransformer1.plug_p1.pin[3].v = IdealTransformer1.idealTransformer[3].p1.v;
//   (-IdealTransformer1.plug_p1.pin[2].i) + IdealTransformer1.idealTransformer[2].p1.i = 0.0;
// IdealTransformer1.plug_p1.pin[2].v = IdealTransformer1.idealTransformer[2].p1.v;
//   (-IdealTransformer1.plug_p1.pin[1].i) + IdealTransformer1.idealTransformer[1].p1.i = 0.0;
// IdealTransformer1.plug_p1.pin[1].v = IdealTransformer1.idealTransformer[1].p1.v;
//   (-IdealTransformer1.plug_p2.pin[3].i) + IdealTransformer1.idealTransformer[3].p2.i = 0.0;
// IdealTransformer1.plug_p2.pin[3].v = IdealTransformer1.idealTransformer[3].p2.v;
//   (-IdealTransformer1.plug_p2.pin[2].i) + IdealTransformer1.idealTransformer[2].p2.i = 0.0;
// IdealTransformer1.plug_p2.pin[2].v = IdealTransformer1.idealTransformer[2].p2.v;
//   (-IdealTransformer1.plug_p2.pin[1].i) + IdealTransformer1.idealTransformer[1].p2.i = 0.0;
// IdealTransformer1.plug_p2.pin[1].v = IdealTransformer1.idealTransformer[1].p2.v;
//   (-IdealTransformer1.plug_n1.pin[3].i) + IdealTransformer1.idealTransformer[3].n1.i = 0.0;
// IdealTransformer1.plug_n1.pin[3].v = IdealTransformer1.idealTransformer[3].n1.v;
//   (-IdealTransformer1.plug_n1.pin[2].i) + IdealTransformer1.idealTransformer[2].n1.i = 0.0;
// IdealTransformer1.plug_n1.pin[2].v = IdealTransformer1.idealTransformer[2].n1.v;
//   (-IdealTransformer1.plug_n1.pin[1].i) + IdealTransformer1.idealTransformer[1].n1.i = 0.0;
// IdealTransformer1.plug_n1.pin[1].v = IdealTransformer1.idealTransformer[1].n1.v;
//   (-IdealTransformer1.plug_n2.pin[3].i) + IdealTransformer1.idealTransformer[3].n2.i = 0.0;
// IdealTransformer1.plug_n2.pin[3].v = IdealTransformer1.idealTransformer[3].n2.v;
//   (-IdealTransformer1.plug_n2.pin[2].i) + IdealTransformer1.idealTransformer[2].n2.i = 0.0;
// IdealTransformer1.plug_n2.pin[2].v = IdealTransformer1.idealTransformer[2].n2.v;
//   (-IdealTransformer1.plug_n2.pin[1].i) + IdealTransformer1.idealTransformer[1].n2.i = 0.0;
// IdealTransformer1.plug_n2.pin[1].v = IdealTransformer1.idealTransformer[1].n2.v;
//   GroundT2.p.v = 0.0;
//   RT1.resistor[1].R * RT1.resistor[1].i = RT1.resistor[1].v;
//   RT1.resistor[1].v = RT1.resistor[1].p.v - RT1.resistor[1].n.v;
//   0.0 = RT1.resistor[1].p.i + RT1.resistor[1].n.i;
//   RT1.resistor[1].i = RT1.resistor[1].p.i;
//   RT1.resistor[2].R * RT1.resistor[2].i = RT1.resistor[2].v;
//   RT1.resistor[2].v = RT1.resistor[2].p.v - RT1.resistor[2].n.v;
//   0.0 = RT1.resistor[2].p.i + RT1.resistor[2].n.i;
//   RT1.resistor[2].i = RT1.resistor[2].p.i;
//   RT1.resistor[3].R * RT1.resistor[3].i = RT1.resistor[3].v;
//   RT1.resistor[3].v = RT1.resistor[3].p.v - RT1.resistor[3].n.v;
//   0.0 = RT1.resistor[3].p.i + RT1.resistor[3].n.i;
//   RT1.resistor[3].i = RT1.resistor[3].p.i;
//   RT1.v[1] = RT1.plug_p.pin[1].v - RT1.plug_n.pin[1].v;
//   RT1.v[2] = RT1.plug_p.pin[2].v - RT1.plug_n.pin[2].v;
//   RT1.v[3] = RT1.plug_p.pin[3].v - RT1.plug_n.pin[3].v;
//   RT1.i[1] = RT1.plug_p.pin[1].i;
//   RT1.i[2] = RT1.plug_p.pin[2].i;
//   RT1.i[3] = RT1.plug_p.pin[3].i;
//   RT1.resistor[3].p.i + (-RT1.plug_p.pin[3].i) = 0.0;
// RT1.resistor[3].p.v = RT1.plug_p.pin[3].v;
//   RT1.resistor[2].p.i + (-RT1.plug_p.pin[2].i) = 0.0;
// RT1.resistor[2].p.v = RT1.plug_p.pin[2].v;
//   RT1.resistor[1].p.i + (-RT1.plug_p.pin[1].i) = 0.0;
// RT1.resistor[1].p.v = RT1.plug_p.pin[1].v;
//   RT1.resistor[3].n.i + (-RT1.plug_n.pin[3].i) = 0.0;
// RT1.resistor[3].n.v = RT1.plug_n.pin[3].v;
//   RT1.resistor[2].n.i + (-RT1.plug_n.pin[2].i) = 0.0;
// RT1.resistor[2].n.v = RT1.plug_n.pin[2].v;
//   RT1.resistor[1].n.i + (-RT1.plug_n.pin[1].i) = 0.0;
// RT1.resistor[1].n.v = RT1.plug_n.pin[1].v;
//   LT1.inductor[1].L * der(LT1.inductor[1].i) = LT1.inductor[1].v;
//   LT1.inductor[1].v = LT1.inductor[1].p.v - LT1.inductor[1].n.v;
//   0.0 = LT1.inductor[1].p.i + LT1.inductor[1].n.i;
//   LT1.inductor[1].i = LT1.inductor[1].p.i;
//   LT1.inductor[2].L * der(LT1.inductor[2].i) = LT1.inductor[2].v;
//   LT1.inductor[2].v = LT1.inductor[2].p.v - LT1.inductor[2].n.v;
//   0.0 = LT1.inductor[2].p.i + LT1.inductor[2].n.i;
//   LT1.inductor[2].i = LT1.inductor[2].p.i;
//   LT1.inductor[3].L * der(LT1.inductor[3].i) = LT1.inductor[3].v;
//   LT1.inductor[3].v = LT1.inductor[3].p.v - LT1.inductor[3].n.v;
//   0.0 = LT1.inductor[3].p.i + LT1.inductor[3].n.i;
//   LT1.inductor[3].i = LT1.inductor[3].p.i;
//   LT1.v[1] = LT1.plug_p.pin[1].v - LT1.plug_n.pin[1].v;
//   LT1.v[2] = LT1.plug_p.pin[2].v - LT1.plug_n.pin[2].v;
//   LT1.v[3] = LT1.plug_p.pin[3].v - LT1.plug_n.pin[3].v;
//   LT1.i[1] = LT1.plug_p.pin[1].i;
//   LT1.i[2] = LT1.plug_p.pin[2].i;
//   LT1.i[3] = LT1.plug_p.pin[3].i;
//   LT1.inductor[3].p.i + (-LT1.plug_p.pin[3].i) = 0.0;
// LT1.inductor[3].p.v = LT1.plug_p.pin[3].v;
//   LT1.inductor[2].p.i + (-LT1.plug_p.pin[2].i) = 0.0;
// LT1.inductor[2].p.v = LT1.plug_p.pin[2].v;
//   LT1.inductor[1].p.i + (-LT1.plug_p.pin[1].i) = 0.0;
// LT1.inductor[1].p.v = LT1.plug_p.pin[1].v;
//   LT1.inductor[3].n.i + (-LT1.plug_n.pin[3].i) = 0.0;
// LT1.inductor[3].n.v = LT1.plug_n.pin[3].v;
//   LT1.inductor[2].n.i + (-LT1.plug_n.pin[2].i) = 0.0;
// LT1.inductor[2].n.v = LT1.plug_n.pin[2].v;
//   LT1.inductor[1].n.i + (-LT1.plug_n.pin[1].i) = 0.0;
// LT1.inductor[1].n.v = LT1.plug_n.pin[1].v;
//   RL1.resistor[1].R * RL1.resistor[1].i = RL1.resistor[1].v;
//   RL1.resistor[1].v = RL1.resistor[1].p.v - RL1.resistor[1].n.v;
//   0.0 = RL1.resistor[1].p.i + RL1.resistor[1].n.i;
//   RL1.resistor[1].i = RL1.resistor[1].p.i;
//   RL1.resistor[2].R * RL1.resistor[2].i = RL1.resistor[2].v;
//   RL1.resistor[2].v = RL1.resistor[2].p.v - RL1.resistor[2].n.v;
//   0.0 = RL1.resistor[2].p.i + RL1.resistor[2].n.i;
//   RL1.resistor[2].i = RL1.resistor[2].p.i;
//   RL1.resistor[3].R * RL1.resistor[3].i = RL1.resistor[3].v;
//   RL1.resistor[3].v = RL1.resistor[3].p.v - RL1.resistor[3].n.v;
//   0.0 = RL1.resistor[3].p.i + RL1.resistor[3].n.i;
//   RL1.resistor[3].i = RL1.resistor[3].p.i;
//   RL1.v[1] = RL1.plug_p.pin[1].v - RL1.plug_n.pin[1].v;
//   RL1.v[2] = RL1.plug_p.pin[2].v - RL1.plug_n.pin[2].v;
//   RL1.v[3] = RL1.plug_p.pin[3].v - RL1.plug_n.pin[3].v;
//   RL1.i[1] = RL1.plug_p.pin[1].i;
//   RL1.i[2] = RL1.plug_p.pin[2].i;
//   RL1.i[3] = RL1.plug_p.pin[3].i;
//   RL1.resistor[3].p.i + (-RL1.plug_p.pin[3].i) = 0.0;
// RL1.resistor[3].p.v = RL1.plug_p.pin[3].v;
//   RL1.resistor[2].p.i + (-RL1.plug_p.pin[2].i) = 0.0;
// RL1.resistor[2].p.v = RL1.plug_p.pin[2].v;
//   RL1.resistor[1].p.i + (-RL1.plug_p.pin[1].i) = 0.0;
// RL1.resistor[1].p.v = RL1.plug_p.pin[1].v;
//   RL1.resistor[3].n.i + (-RL1.plug_n.pin[3].i) = 0.0;
// RL1.resistor[3].n.v = RL1.plug_n.pin[3].v;
//   RL1.resistor[2].n.i + (-RL1.plug_n.pin[2].i) = 0.0;
// RL1.resistor[2].n.v = RL1.plug_n.pin[2].v;
//   RL1.resistor[1].n.i + (-RL1.plug_n.pin[1].i) = 0.0;
// RL1.resistor[1].n.v = RL1.plug_n.pin[1].v;
//   GroundT1.p.v = 0.0;
//   (-StarT2.plug_p.pin[3].i) + ((-StarT2.plug_p.pin[2].i) + ((-StarT2.plug_p.pin[1].i) + (-StarT2.pin_n.i))) = 0.0;
// StarT2.plug_p.pin[3].v = StarT2.plug_p.pin[2].v;
// StarT2.plug_p.pin[2].v = StarT2.plug_p.pin[1].v;
// StarT2.plug_p.pin[1].v = StarT2.pin_n.v;
//   (-StarT1.plug_p.pin[3].i) + ((-StarT1.plug_p.pin[2].i) + ((-StarT1.plug_p.pin[1].i) + (-StarT1.pin_n.i))) = 0.0;
// StarT1.plug_p.pin[3].v = StarT1.plug_p.pin[2].v;
// StarT1.plug_p.pin[2].v = StarT1.plug_p.pin[1].v;
// StarT1.plug_p.pin[1].v = StarT1.pin_n.v;
//   (-StarS1.plug_p.pin[3].i) + ((-StarS1.plug_p.pin[2].i) + ((-StarS1.plug_p.pin[1].i) + (-StarS1.pin_n.i))) = 0.0;
// StarS1.plug_p.pin[3].v = StarS1.plug_p.pin[2].v;
// StarS1.plug_p.pin[2].v = StarS1.plug_p.pin[1].v;
// StarS1.plug_p.pin[1].v = StarS1.pin_n.v;
//   (-StarL1.plug_p.pin[3].i) + ((-StarL1.plug_p.pin[2].i) + ((-StarL1.plug_p.pin[1].i) + (-StarL1.pin_n.i))) = 0.0;
// StarL1.plug_p.pin[3].v = StarL1.plug_p.pin[2].v;
// StarL1.plug_p.pin[2].v = StarL1.plug_p.pin[1].v;
// StarL1.plug_p.pin[1].v = StarL1.pin_n.v;
// assert(LT1.plug_n.m == RL1.plug_p.m,"automatically generated from connect");
// assert(RT1.plug_n.m == LT1.plug_p.m,"automatically generated from connect");
// assert(IdealTransformer1.plug_p2.m == RT1.plug_p.m,"automatically generated from connect");
// assert(SineVoltage1.plug_p.m == IdealTransformer1.plug_p1.m,"automatically generated from connect");
// assert(StarT2.plug_p.m == IdealTransformer1.plug_n2.m,"automatically generated from connect");
// assert(IdealTransformer1.plug_n1.m == StarT1.plug_p.m,"automatically generated from connect");
// assert(StarS1.plug_p.m == SineVoltage1.plug_n.m,"automatically generated from connect");
// assert(RL1.plug_n.m == StarL1.plug_p.m,"automatically generated from connect");
//   RL1.plug_n.pin[3].i + StarL1.plug_p.pin[3].i = 0.0;
// RL1.plug_n.pin[3].v = StarL1.plug_p.pin[3].v;
//   RL1.plug_n.pin[2].i + StarL1.plug_p.pin[2].i = 0.0;
// RL1.plug_n.pin[2].v = StarL1.plug_p.pin[2].v;
//   RL1.plug_n.pin[1].i + StarL1.plug_p.pin[1].i = 0.0;
// RL1.plug_n.pin[1].v = StarL1.plug_p.pin[1].v;
//   StarS1.plug_p.pin[3].i + SineVoltage1.plug_n.pin[3].i = 0.0;
// StarS1.plug_p.pin[3].v = SineVoltage1.plug_n.pin[3].v;
//   StarS1.plug_p.pin[2].i + SineVoltage1.plug_n.pin[2].i = 0.0;
// StarS1.plug_p.pin[2].v = SineVoltage1.plug_n.pin[2].v;
//   StarS1.plug_p.pin[1].i + SineVoltage1.plug_n.pin[1].i = 0.0;
// StarS1.plug_p.pin[1].v = SineVoltage1.plug_n.pin[1].v;
//   StarS1.pin_n.i + GroundS1.p.i = 0.0;
// StarS1.pin_n.v = GroundS1.p.v;
//   IdealTransformer1.plug_n1.pin[3].i + StarT1.plug_p.pin[3].i = 0.0;
// IdealTransformer1.plug_n1.pin[3].v = StarT1.plug_p.pin[3].v;
//   IdealTransformer1.plug_n1.pin[2].i + StarT1.plug_p.pin[2].i = 0.0;
// IdealTransformer1.plug_n1.pin[2].v = StarT1.plug_p.pin[2].v;
//   IdealTransformer1.plug_n1.pin[1].i + StarT1.plug_p.pin[1].i = 0.0;
// IdealTransformer1.plug_n1.pin[1].v = StarT1.plug_p.pin[1].v;
//   StarT1.pin_n.i + GroundT1.p.i = 0.0;
// StarT1.pin_n.v = GroundT1.p.v;
//   StarT2.plug_p.pin[3].i + IdealTransformer1.plug_n2.pin[3].i = 0.0;
// StarT2.plug_p.pin[3].v = IdealTransformer1.plug_n2.pin[3].v;
//   StarT2.plug_p.pin[2].i + IdealTransformer1.plug_n2.pin[2].i = 0.0;
// StarT2.plug_p.pin[2].v = IdealTransformer1.plug_n2.pin[2].v;
//   StarT2.plug_p.pin[1].i + IdealTransformer1.plug_n2.pin[1].i = 0.0;
// StarT2.plug_p.pin[1].v = IdealTransformer1.plug_n2.pin[1].v;
//   StarT2.pin_n.i + GroundT2.p.i = 0.0;
// StarT2.pin_n.v = GroundT2.p.v;
//   SineVoltage1.plug_p.pin[3].i + IdealTransformer1.plug_p1.pin[3].i = 0.0;
// SineVoltage1.plug_p.pin[3].v = IdealTransformer1.plug_p1.pin[3].v;
//   SineVoltage1.plug_p.pin[2].i + IdealTransformer1.plug_p1.pin[2].i = 0.0;
// SineVoltage1.plug_p.pin[2].v = IdealTransformer1.plug_p1.pin[2].v;
//   SineVoltage1.plug_p.pin[1].i + IdealTransformer1.plug_p1.pin[1].i = 0.0;
// SineVoltage1.plug_p.pin[1].v = IdealTransformer1.plug_p1.pin[1].v;
//   IdealTransformer1.plug_p2.pin[3].i + RT1.plug_p.pin[3].i = 0.0;
// IdealTransformer1.plug_p2.pin[3].v = RT1.plug_p.pin[3].v;
//   IdealTransformer1.plug_p2.pin[2].i + RT1.plug_p.pin[2].i = 0.0;
// IdealTransformer1.plug_p2.pin[2].v = RT1.plug_p.pin[2].v;
//   IdealTransformer1.plug_p2.pin[1].i + RT1.plug_p.pin[1].i = 0.0;
// IdealTransformer1.plug_p2.pin[1].v = RT1.plug_p.pin[1].v;
//   RT1.plug_n.pin[3].i + LT1.plug_p.pin[3].i = 0.0;
// RT1.plug_n.pin[3].v = LT1.plug_p.pin[3].v;
//   RT1.plug_n.pin[2].i + LT1.plug_p.pin[2].i = 0.0;
// RT1.plug_n.pin[2].v = LT1.plug_p.pin[2].v;
//   RT1.plug_n.pin[1].i + LT1.plug_p.pin[1].i = 0.0;
// RT1.plug_n.pin[1].v = LT1.plug_p.pin[1].v;
//   LT1.plug_n.pin[3].i + RL1.plug_p.pin[3].i = 0.0;
// LT1.plug_n.pin[3].v = RL1.plug_p.pin[3].v;
//   LT1.plug_n.pin[2].i + RL1.plug_p.pin[2].i = 0.0;
// LT1.plug_n.pin[2].v = RL1.plug_p.pin[2].v;
//   LT1.plug_n.pin[1].i + RL1.plug_p.pin[1].i = 0.0;
// LT1.plug_n.pin[1].v = RL1.plug_p.pin[1].v;
//   StarL1.pin_n.i = 0.0;
// end Modelica.Electrical.MultiPhase.Examples.TransformerYY;
// "
// ""
// endResult
