// name: ModelicaAdditions.MultiBody.Examples.Engine1.mos
// keywords: MultiBody, Examples
// status: correct

loadFile("Engine1Total.mo");
instantiateModel(MultiBody.Examples.Loops.Engine1);
getErrorString();

// Result:
// true
// "function MCVisualShape.local_normalize
//   input Real[3] iv;
//   output Real[3] ov;
//   Real length;
// algorithm
//   length := sqrt(iv[1] ^ 2.0 + iv[2] ^ 2.0 + iv[3] ^ 2.0);
//   ov := {iv[1] / length,iv[2] / length,iv[3] / length};
// end MCVisualShape.local_normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = "Angle", unit = "rad", displayUnit = "deg");
// 
// external "C";
// end Modelica.Math.asin;
// 
// function Modelica.Math.tempInterpol1
//   input Real u "input value (first column of table)";
//   input Real[:, :] table "table to be interpolated";
//   input Integer icol "column of table to be interpolated";
//   output Real y "interpolated input value (icol column of table)";
//   protected Integer i;
//   protected Integer n "number of rows of table";
//   protected Real u1;
//   protected Real u2;
//   protected Real y1;
//   protected Real y2;
// algorithm
//   n := size(table,1);
//   if n <= 1 then
//     y := table[1, icol];
//   else
//     if u <= table[1,1] then
//       i := 1;
//     else
//       i := 2;
//       while i < n AND u >= table[i, 1] loop
//         i := 1 + i;
//       end while;
//       i := i - 1;
//     end if;
//     u1 := table[i, 1];
//     u2 := table[1 + i, 1];
//     y1 := table[i, icol];
//     y2 := table[1 + i, icol];
//     assert( u2 > u1, "Table index must be increasing");
//     y := y1 + (y2 - y1) * (u - u1) / (u2 - u1);
//   end if;
// end Modelica.Math.tempInterpol1;
// 
// function PackMaterial
//   input Real r;
//   input Real g;
//   input Real b;
//   input Real spec;
//   output Real packedMaterial;
//   Integer i1;
//   Integer i2;
//   Integer i3;
//   Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
//   input String shape;
//   output Real packedShape;
// algorithm
//   if shape == "box" then
//     packedShape := 101.0;
//   elseif shape == "sphere" then
//     packedShape := 102.0;
//   elseif shape == "cylinder" then
//     packedShape := 103.0;
//   elseif shape == "cone" then
//     packedShape := 104.0;
//   elseif shape == "pipe" then
//     packedShape := 105.0;
//   elseif shape == "beam" then
//     packedShape := 106.0;
//   elseif shape == "wirebox" then
//     packedShape := 107.0;
//   elseif shape == "gearwheel" then
//     packedShape := 108.0;
//   elseif shape == "spring" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class MultiBody.Examples.Loops.Engine1
//   parameter Real D = 0.1;
//   parameter Real e = 0.05;
//   parameter Real L = 0.2;
//   parameter Real Load = 20.0;
//   constant Real pi = 3.14159265358979;
//   constant Real PI = 3.14159265358979 "Only for compatibility reasons";
//   output Real AngVelDegS;
//   output Real x;
//   output Real press;
//   output Real T;
//   output Real V;
//   output Real dens;
//   parameter Real inertial.g(quantity = "Acceleration", unit = "m/s2") = 0.0 "Gravity constant";
//   parameter Real inertial.ng[1] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real inertial.ng[2] = -1.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real inertial.ng[3] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter String inertial.label1 = "x" "Label of horizontal axis in icon";
//   parameter String inertial.label2 = "y" "Label of vertical axis in icon";
//   Real inertial.gravity[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real inertial.gravity[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real inertial.gravity[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   output Real inertial.frame_b.r0[1](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real inertial.frame_b.r0[2](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real inertial.frame_b.r0[3](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real inertial.frame_b.S[1,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[1,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[1,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.v[1](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.v[2](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.v[3](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.f[1](quantity = "Force", unit = "N");
//   Real inertial.frame_b.f[2](quantity = "Force", unit = "N");
//   Real inertial.frame_b.f[3](quantity = "Force", unit = "N");
//   Real inertial.frame_b.t[1](quantity = "Torque", unit = "N.m");
//   Real inertial.frame_b.t[2](quantity = "Torque", unit = "N.m");
//   Real inertial.frame_b.t[3](quantity = "Torque", unit = "N.m");
//   constant Real r1.pi = 3.14159265358979;
//   constant Real r1.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real r1.frame_a.r0[1](quantity = "Length", unit = "m") = r1.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real r1.frame_a.r0[2](quantity = "Length", unit = "m") = r1.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real r1.frame_a.r0[3](quantity = "Length", unit = "m") = r1.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real r1.frame_a.S[1,1] = r1.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[1,2] = r1.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[1,3] = r1.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[2,1] = r1.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[2,2] = r1.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[2,3] = r1.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[3,1] = r1.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[3,2] = r1.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.S[3,3] = r1.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_a.v[1](quantity = "Velocity", unit = "m/s") = r1.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_a.v[2](quantity = "Velocity", unit = "m/s") = r1.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_a.v[3](quantity = "Velocity", unit = "m/s") = r1.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = r1.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = r1.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = r1.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = r1.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = r1.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = r1.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_a.f[1](quantity = "Force", unit = "N") = r1.fa[1];
//   Real r1.frame_a.f[2](quantity = "Force", unit = "N") = r1.fa[2];
//   Real r1.frame_a.f[3](quantity = "Force", unit = "N") = r1.fa[3];
//   Real r1.frame_a.t[1](quantity = "Torque", unit = "N.m") = r1.ta[1];
//   Real r1.frame_a.t[2](quantity = "Torque", unit = "N.m") = r1.ta[2];
//   Real r1.frame_a.t[3](quantity = "Torque", unit = "N.m") = r1.ta[3];
//   output Real r1.frame_b.r0[1](quantity = "Length", unit = "m") = r1.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real r1.frame_b.r0[2](quantity = "Length", unit = "m") = r1.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real r1.frame_b.r0[3](quantity = "Length", unit = "m") = r1.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real r1.frame_b.S[1,1] = r1.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[1,2] = r1.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[1,3] = r1.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[2,1] = r1.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[2,2] = r1.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[2,3] = r1.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[3,1] = r1.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[3,2] = r1.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.S[3,3] = r1.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real r1.frame_b.v[1](quantity = "Velocity", unit = "m/s") = r1.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_b.v[2](quantity = "Velocity", unit = "m/s") = r1.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_b.v[3](quantity = "Velocity", unit = "m/s") = r1.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real r1.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = r1.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real r1.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = r1.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = r1.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = r1.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real r1.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = r1.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = r1.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = r1.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real r1.frame_b.f[1](quantity = "Force", unit = "N") = -r1.fb[1];
//   Real r1.frame_b.f[2](quantity = "Force", unit = "N") = -r1.fb[2];
//   Real r1.frame_b.f[3](quantity = "Force", unit = "N") = -r1.fb[3];
//   Real r1.frame_b.t[1](quantity = "Torque", unit = "N.m") = -r1.tb[1];
//   Real r1.frame_b.t[2](quantity = "Torque", unit = "N.m") = -r1.tb[2];
//   Real r1.frame_b.t[3](quantity = "Torque", unit = "N.m") = -r1.tb[3];
//   protected Real r1.Sa[1,1](start = 1.0);
//   protected Real r1.Sa[1,2](start = 0.0);
//   protected Real r1.Sa[1,3](start = 0.0);
//   protected Real r1.Sa[2,1](start = 0.0);
//   protected Real r1.Sa[2,2](start = 1.0);
//   protected Real r1.Sa[2,3](start = 0.0);
//   protected Real r1.Sa[3,1](start = 0.0);
//   protected Real r1.Sa[3,2](start = 0.0);
//   protected Real r1.Sa[3,3](start = 1.0);
//   protected Real r1.r0a[1](quantity = "Length", unit = "m");
//   protected Real r1.r0a[2](quantity = "Length", unit = "m");
//   protected Real r1.r0a[3](quantity = "Length", unit = "m");
//   protected Real r1.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real r1.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real r1.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real r1.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.fa[1](quantity = "Force", unit = "N");
//   protected Real r1.fa[2](quantity = "Force", unit = "N");
//   protected Real r1.fa[3](quantity = "Force", unit = "N");
//   protected Real r1.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real r1.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real r1.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real r1.Sb[1,1](start = 1.0);
//   protected Real r1.Sb[1,2](start = 0.0);
//   protected Real r1.Sb[1,3](start = 0.0);
//   protected Real r1.Sb[2,1](start = 0.0);
//   protected Real r1.Sb[2,2](start = 1.0);
//   protected Real r1.Sb[2,3](start = 0.0);
//   protected Real r1.Sb[3,1](start = 0.0);
//   protected Real r1.Sb[3,2](start = 0.0);
//   protected Real r1.Sb[3,3](start = 1.0);
//   protected Real r1.r0b[1](quantity = "Length", unit = "m");
//   protected Real r1.r0b[2](quantity = "Length", unit = "m");
//   protected Real r1.r0b[3](quantity = "Length", unit = "m");
//   protected Real r1.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real r1.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real r1.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real r1.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real r1.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real r1.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real r1.fb[1](quantity = "Force", unit = "N");
//   protected Real r1.fb[2](quantity = "Force", unit = "N");
//   protected Real r1.fb[3](quantity = "Force", unit = "N");
//   protected Real r1.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real r1.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real r1.tb[3](quantity = "Torque", unit = "N.m");
//   Real r1.S_rel[1,1];
//   Real r1.S_rel[1,2];
//   Real r1.S_rel[1,3];
//   Real r1.S_rel[2,1];
//   Real r1.S_rel[2,2];
//   Real r1.S_rel[2,3];
//   Real r1.S_rel[3,1];
//   Real r1.S_rel[3,2];
//   Real r1.S_rel[3,3];
//   Real r1.r_rela[1](quantity = "Length", unit = "m");
//   Real r1.r_rela[2](quantity = "Length", unit = "m");
//   Real r1.r_rela[3](quantity = "Length", unit = "m");
//   Real r1.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real r1.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real r1.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real r1.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real r1.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real r1.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real r1.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real r1.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real r1.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real r1.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real r1.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real r1.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real r1.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real r1.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real r1.n[3] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real r1.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean r1.startValueFixed = true "true, if start values of q, qd are fixed";
//   Real r1.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = r1.startValueFixed);
//   Real r1.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = -157.0, fixed = r1.startValueFixed);
//   Real r1.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real r1.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real r1.nn[1];
//   Real r1.nn[2];
//   Real r1.nn[3];
//   Real r1.sinq;
//   Real r1.cosq;
//   Real r1.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real r1.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real r1.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real r1.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real cyl.pi = 3.14159265358979;
//   constant Real cyl.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real cyl.frame_a.r0[1](quantity = "Length", unit = "m") = cyl.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real cyl.frame_a.r0[2](quantity = "Length", unit = "m") = cyl.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real cyl.frame_a.r0[3](quantity = "Length", unit = "m") = cyl.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real cyl.frame_a.S[1,1] = cyl.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[1,2] = cyl.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[1,3] = cyl.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[2,1] = cyl.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[2,2] = cyl.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[2,3] = cyl.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[3,1] = cyl.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[3,2] = cyl.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.S[3,3] = cyl.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_a.v[1](quantity = "Velocity", unit = "m/s") = cyl.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_a.v[2](quantity = "Velocity", unit = "m/s") = cyl.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_a.v[3](quantity = "Velocity", unit = "m/s") = cyl.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = cyl.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = cyl.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = cyl.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_a.f[1](quantity = "Force", unit = "N") = cyl.fa[1];
//   Real cyl.frame_a.f[2](quantity = "Force", unit = "N") = cyl.fa[2];
//   Real cyl.frame_a.f[3](quantity = "Force", unit = "N") = cyl.fa[3];
//   Real cyl.frame_a.t[1](quantity = "Torque", unit = "N.m") = cyl.ta[1];
//   Real cyl.frame_a.t[2](quantity = "Torque", unit = "N.m") = cyl.ta[2];
//   Real cyl.frame_a.t[3](quantity = "Torque", unit = "N.m") = cyl.ta[3];
//   output Real cyl.frame_b.r0[1](quantity = "Length", unit = "m") = cyl.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real cyl.frame_b.r0[2](quantity = "Length", unit = "m") = cyl.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real cyl.frame_b.r0[3](quantity = "Length", unit = "m") = cyl.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real cyl.frame_b.S[1,1] = cyl.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[1,2] = cyl.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[1,3] = cyl.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[2,1] = cyl.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[2,2] = cyl.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[2,3] = cyl.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[3,1] = cyl.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[3,2] = cyl.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.S[3,3] = cyl.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real cyl.frame_b.v[1](quantity = "Velocity", unit = "m/s") = cyl.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_b.v[2](quantity = "Velocity", unit = "m/s") = cyl.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_b.v[3](quantity = "Velocity", unit = "m/s") = cyl.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real cyl.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = cyl.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real cyl.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = cyl.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = cyl.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = cyl.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real cyl.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = cyl.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real cyl.frame_b.f[1](quantity = "Force", unit = "N") = -cyl.fb[1];
//   Real cyl.frame_b.f[2](quantity = "Force", unit = "N") = -cyl.fb[2];
//   Real cyl.frame_b.f[3](quantity = "Force", unit = "N") = -cyl.fb[3];
//   Real cyl.frame_b.t[1](quantity = "Torque", unit = "N.m") = -cyl.tb[1];
//   Real cyl.frame_b.t[2](quantity = "Torque", unit = "N.m") = -cyl.tb[2];
//   Real cyl.frame_b.t[3](quantity = "Torque", unit = "N.m") = -cyl.tb[3];
//   protected Real cyl.Sa[1,1](start = 1.0);
//   protected Real cyl.Sa[1,2](start = 0.0);
//   protected Real cyl.Sa[1,3](start = 0.0);
//   protected Real cyl.Sa[2,1](start = 0.0);
//   protected Real cyl.Sa[2,2](start = 1.0);
//   protected Real cyl.Sa[2,3](start = 0.0);
//   protected Real cyl.Sa[3,1](start = 0.0);
//   protected Real cyl.Sa[3,2](start = 0.0);
//   protected Real cyl.Sa[3,3](start = 1.0);
//   protected Real cyl.r0a[1](quantity = "Length", unit = "m");
//   protected Real cyl.r0a[2](quantity = "Length", unit = "m");
//   protected Real cyl.r0a[3](quantity = "Length", unit = "m");
//   protected Real cyl.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.fa[1](quantity = "Force", unit = "N");
//   protected Real cyl.fa[2](quantity = "Force", unit = "N");
//   protected Real cyl.fa[3](quantity = "Force", unit = "N");
//   protected Real cyl.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real cyl.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real cyl.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real cyl.Sb[1,1](start = 1.0);
//   protected Real cyl.Sb[1,2](start = 0.0);
//   protected Real cyl.Sb[1,3](start = 0.0);
//   protected Real cyl.Sb[2,1](start = 0.0);
//   protected Real cyl.Sb[2,2](start = 1.0);
//   protected Real cyl.Sb[2,3](start = 0.0);
//   protected Real cyl.Sb[3,1](start = 0.0);
//   protected Real cyl.Sb[3,2](start = 0.0);
//   protected Real cyl.Sb[3,3](start = 1.0);
//   protected Real cyl.r0b[1](quantity = "Length", unit = "m");
//   protected Real cyl.r0b[2](quantity = "Length", unit = "m");
//   protected Real cyl.r0b[3](quantity = "Length", unit = "m");
//   protected Real cyl.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real cyl.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real cyl.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real cyl.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real cyl.fb[1](quantity = "Force", unit = "N");
//   protected Real cyl.fb[2](quantity = "Force", unit = "N");
//   protected Real cyl.fb[3](quantity = "Force", unit = "N");
//   protected Real cyl.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real cyl.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real cyl.tb[3](quantity = "Torque", unit = "N.m");
//   Real cyl.S_rel[1,1];
//   Real cyl.S_rel[1,2];
//   Real cyl.S_rel[1,3];
//   Real cyl.S_rel[2,1];
//   Real cyl.S_rel[2,2];
//   Real cyl.S_rel[2,3];
//   Real cyl.S_rel[3,1];
//   Real cyl.S_rel[3,2];
//   Real cyl.S_rel[3,3];
//   Real cyl.r_rela[1](quantity = "Length", unit = "m");
//   Real cyl.r_rela[2](quantity = "Length", unit = "m");
//   Real cyl.r_rela[3](quantity = "Length", unit = "m");
//   Real cyl.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real cyl.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real cyl.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real cyl.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real cyl.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real cyl.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real cyl.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real cyl.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real cyl.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real cyl.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real cyl.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real cyl.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real cyl.n[1] = -1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real cyl.n[2] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real cyl.n[3] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real cyl.q0(quantity = "Length", unit = "m") = 0.0 "Relative distance offset(see info)";
//   parameter Boolean cyl.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real cyl.q(quantity = "Length", unit = "m", fixed = cyl.startValueFixed);
//   Real cyl.qd(quantity = "Velocity", unit = "m/s", fixed = cyl.startValueFixed);
//   Real cyl.qdd(quantity = "Acceleration", unit = "m/s2");
//   Real cyl.qq(quantity = "Length", unit = "m");
//   Real cyl.nn[1];
//   Real cyl.nn[2];
//   Real cyl.nn[3];
//   Real cyl.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real cyl.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real cyl.vaux[3](quantity = "Velocity", unit = "m/s");
//   Real cyl.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real cyl.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real cyl.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real cyl.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   constant Real trans.pi = 3.14159265358979;
//   constant Real trans.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real trans.frame_a.r0[1](quantity = "Length", unit = "m") = trans.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real trans.frame_a.r0[2](quantity = "Length", unit = "m") = trans.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real trans.frame_a.r0[3](quantity = "Length", unit = "m") = trans.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real trans.frame_a.S[1,1] = trans.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[1,2] = trans.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[1,3] = trans.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[2,1] = trans.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[2,2] = trans.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[2,3] = trans.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[3,1] = trans.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[3,2] = trans.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.S[3,3] = trans.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_a.v[1](quantity = "Velocity", unit = "m/s") = trans.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_a.v[2](quantity = "Velocity", unit = "m/s") = trans.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_a.v[3](quantity = "Velocity", unit = "m/s") = trans.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = trans.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = trans.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = trans.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = trans.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = trans.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = trans.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_a.f[1](quantity = "Force", unit = "N") = trans.fa[1];
//   Real trans.frame_a.f[2](quantity = "Force", unit = "N") = trans.fa[2];
//   Real trans.frame_a.f[3](quantity = "Force", unit = "N") = trans.fa[3];
//   Real trans.frame_a.t[1](quantity = "Torque", unit = "N.m") = trans.ta[1];
//   Real trans.frame_a.t[2](quantity = "Torque", unit = "N.m") = trans.ta[2];
//   Real trans.frame_a.t[3](quantity = "Torque", unit = "N.m") = trans.ta[3];
//   output Real trans.frame_b.r0[1](quantity = "Length", unit = "m") = trans.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real trans.frame_b.r0[2](quantity = "Length", unit = "m") = trans.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real trans.frame_b.r0[3](quantity = "Length", unit = "m") = trans.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real trans.frame_b.S[1,1] = trans.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[1,2] = trans.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[1,3] = trans.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[2,1] = trans.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[2,2] = trans.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[2,3] = trans.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[3,1] = trans.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[3,2] = trans.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.S[3,3] = trans.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real trans.frame_b.v[1](quantity = "Velocity", unit = "m/s") = trans.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_b.v[2](quantity = "Velocity", unit = "m/s") = trans.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_b.v[3](quantity = "Velocity", unit = "m/s") = trans.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real trans.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = trans.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real trans.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = trans.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = trans.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = trans.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real trans.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = trans.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = trans.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = trans.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real trans.frame_b.f[1](quantity = "Force", unit = "N") = -trans.fb[1];
//   Real trans.frame_b.f[2](quantity = "Force", unit = "N") = -trans.fb[2];
//   Real trans.frame_b.f[3](quantity = "Force", unit = "N") = -trans.fb[3];
//   Real trans.frame_b.t[1](quantity = "Torque", unit = "N.m") = -trans.tb[1];
//   Real trans.frame_b.t[2](quantity = "Torque", unit = "N.m") = -trans.tb[2];
//   Real trans.frame_b.t[3](quantity = "Torque", unit = "N.m") = -trans.tb[3];
//   protected Real trans.Sa[1,1](start = 1.0);
//   protected Real trans.Sa[1,2](start = 0.0);
//   protected Real trans.Sa[1,3](start = 0.0);
//   protected Real trans.Sa[2,1](start = 0.0);
//   protected Real trans.Sa[2,2](start = 1.0);
//   protected Real trans.Sa[2,3](start = 0.0);
//   protected Real trans.Sa[3,1](start = 0.0);
//   protected Real trans.Sa[3,2](start = 0.0);
//   protected Real trans.Sa[3,3](start = 1.0);
//   protected Real trans.r0a[1](quantity = "Length", unit = "m");
//   protected Real trans.r0a[2](quantity = "Length", unit = "m");
//   protected Real trans.r0a[3](quantity = "Length", unit = "m");
//   protected Real trans.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real trans.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real trans.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real trans.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.fa[1](quantity = "Force", unit = "N");
//   protected Real trans.fa[2](quantity = "Force", unit = "N");
//   protected Real trans.fa[3](quantity = "Force", unit = "N");
//   protected Real trans.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real trans.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real trans.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real trans.Sb[1,1](start = 1.0);
//   protected Real trans.Sb[1,2](start = 0.0);
//   protected Real trans.Sb[1,3](start = 0.0);
//   protected Real trans.Sb[2,1](start = 0.0);
//   protected Real trans.Sb[2,2](start = 1.0);
//   protected Real trans.Sb[2,3](start = 0.0);
//   protected Real trans.Sb[3,1](start = 0.0);
//   protected Real trans.Sb[3,2](start = 0.0);
//   protected Real trans.Sb[3,3](start = 1.0);
//   protected Real trans.r0b[1](quantity = "Length", unit = "m");
//   protected Real trans.r0b[2](quantity = "Length", unit = "m");
//   protected Real trans.r0b[3](quantity = "Length", unit = "m");
//   protected Real trans.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real trans.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real trans.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real trans.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real trans.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real trans.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real trans.fb[1](quantity = "Force", unit = "N");
//   protected Real trans.fb[2](quantity = "Force", unit = "N");
//   protected Real trans.fb[3](quantity = "Force", unit = "N");
//   protected Real trans.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real trans.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real trans.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real trans.r[1](quantity = "Length", unit = "m") = sqrt((D / 2.0 + L) ^ 2.0 - e ^ 2.0) "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real trans.r[2](quantity = "Length", unit = "m") = -e "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real trans.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real trans.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real trans.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real trans.vaux[3](quantity = "Velocity", unit = "m/s");
//   constant Real piston.pi = 3.14159265358979;
//   constant Real piston.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real piston.frame_a.r0[1](quantity = "Length", unit = "m") = piston.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.frame_a.r0[2](quantity = "Length", unit = "m") = piston.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.frame_a.r0[3](quantity = "Length", unit = "m") = piston.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.frame_a.S[1,1] = piston.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[1,2] = piston.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[1,3] = piston.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[2,1] = piston.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[2,2] = piston.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[2,3] = piston.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[3,1] = piston.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[3,2] = piston.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.S[3,3] = piston.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_a.v[1](quantity = "Velocity", unit = "m/s") = piston.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_a.v[2](quantity = "Velocity", unit = "m/s") = piston.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_a.v[3](quantity = "Velocity", unit = "m/s") = piston.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = piston.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = piston.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = piston.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_a.f[1](quantity = "Force", unit = "N") = piston.fa[1];
//   Real piston.frame_a.f[2](quantity = "Force", unit = "N") = piston.fa[2];
//   Real piston.frame_a.f[3](quantity = "Force", unit = "N") = piston.fa[3];
//   Real piston.frame_a.t[1](quantity = "Torque", unit = "N.m") = piston.ta[1];
//   Real piston.frame_a.t[2](quantity = "Torque", unit = "N.m") = piston.ta[2];
//   Real piston.frame_a.t[3](quantity = "Torque", unit = "N.m") = piston.ta[3];
//   output Real piston.frame_b.r0[1](quantity = "Length", unit = "m") = piston.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.frame_b.r0[2](quantity = "Length", unit = "m") = piston.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.frame_b.r0[3](quantity = "Length", unit = "m") = piston.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.frame_b.S[1,1] = piston.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[1,2] = piston.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[1,3] = piston.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[2,1] = piston.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[2,2] = piston.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[2,3] = piston.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[3,1] = piston.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[3,2] = piston.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.S[3,3] = piston.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.frame_b.v[1](quantity = "Velocity", unit = "m/s") = piston.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_b.v[2](quantity = "Velocity", unit = "m/s") = piston.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_b.v[3](quantity = "Velocity", unit = "m/s") = piston.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = piston.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = piston.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = piston.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.frame_b.f[1](quantity = "Force", unit = "N") = -piston.fb[1];
//   Real piston.frame_b.f[2](quantity = "Force", unit = "N") = -piston.fb[2];
//   Real piston.frame_b.f[3](quantity = "Force", unit = "N") = -piston.fb[3];
//   Real piston.frame_b.t[1](quantity = "Torque", unit = "N.m") = -piston.tb[1];
//   Real piston.frame_b.t[2](quantity = "Torque", unit = "N.m") = -piston.tb[2];
//   Real piston.frame_b.t[3](quantity = "Torque", unit = "N.m") = -piston.tb[3];
//   protected Real piston.Sa[1,1](start = 1.0);
//   protected Real piston.Sa[1,2](start = 0.0);
//   protected Real piston.Sa[1,3](start = 0.0);
//   protected Real piston.Sa[2,1](start = 0.0);
//   protected Real piston.Sa[2,2](start = 1.0);
//   protected Real piston.Sa[2,3](start = 0.0);
//   protected Real piston.Sa[3,1](start = 0.0);
//   protected Real piston.Sa[3,2](start = 0.0);
//   protected Real piston.Sa[3,3](start = 1.0);
//   protected Real piston.r0a[1](quantity = "Length", unit = "m");
//   protected Real piston.r0a[2](quantity = "Length", unit = "m");
//   protected Real piston.r0a[3](quantity = "Length", unit = "m");
//   protected Real piston.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.fa[1](quantity = "Force", unit = "N");
//   protected Real piston.fa[2](quantity = "Force", unit = "N");
//   protected Real piston.fa[3](quantity = "Force", unit = "N");
//   protected Real piston.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real piston.Sb[1,1](start = 1.0);
//   protected Real piston.Sb[1,2](start = 0.0);
//   protected Real piston.Sb[1,3](start = 0.0);
//   protected Real piston.Sb[2,1](start = 0.0);
//   protected Real piston.Sb[2,2](start = 1.0);
//   protected Real piston.Sb[2,3](start = 0.0);
//   protected Real piston.Sb[3,1](start = 0.0);
//   protected Real piston.Sb[3,2](start = 0.0);
//   protected Real piston.Sb[3,3](start = 1.0);
//   protected Real piston.r0b[1](quantity = "Length", unit = "m");
//   protected Real piston.r0b[2](quantity = "Length", unit = "m");
//   protected Real piston.r0b[3](quantity = "Length", unit = "m");
//   protected Real piston.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.fb[1](quantity = "Force", unit = "N");
//   protected Real piston.fb[2](quantity = "Force", unit = "N");
//   protected Real piston.fb[3](quantity = "Force", unit = "N");
//   protected Real piston.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real piston.r[1](quantity = "Length", unit = "m") = 0.1 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.3 "Mass of body";
//   parameter Real piston.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real piston.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real piston.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0001 "(3,3) element of inertia tensor";
//   parameter Real piston.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real piston.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real piston.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String piston.Shape = "cylinder" "Name of shape (see info text)";
//   parameter Real piston.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real piston.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real piston.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real piston.LengthDirection[1](quantity = "Length", unit = "m") = piston.r[1] - piston.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real piston.LengthDirection[2](quantity = "Length", unit = "m") = piston.r[2] - piston.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real piston.LengthDirection[3](quantity = "Length", unit = "m") = piston.r[3] - piston.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real piston.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real piston.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real piston.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real piston.Length(quantity = "Length", unit = "m") = sqrt((piston.r[1] - piston.r0[1]) ^ 2.0 + ((piston.r[2] - piston.r0[2]) ^ 2.0 + (piston.r[3] - piston.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real piston.Width(quantity = "Length", unit = "m") = 0.05 "Width of shape";
//   parameter Real piston.Height(quantity = "Length", unit = "m") = 0.05 "Height of shape";
//   parameter Real piston.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real piston.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real piston.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real piston.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real piston.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real piston.body.pi = 3.14159265358979;
//   constant Real piston.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real piston.body.frame_a.r0[1](quantity = "Length", unit = "m") = piston.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.frame_a.r0[2](quantity = "Length", unit = "m") = piston.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.frame_a.r0[3](quantity = "Length", unit = "m") = piston.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.body.frame_a.S[1,1] = piston.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[1,2] = piston.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[1,3] = piston.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[2,1] = piston.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[2,2] = piston.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[2,3] = piston.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[3,1] = piston.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[3,2] = piston.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.S[3,3] = piston.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = piston.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = piston.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = piston.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = piston.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = piston.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = piston.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_a.f[1](quantity = "Force", unit = "N") = piston.body.fa[1];
//   Real piston.body.frame_a.f[2](quantity = "Force", unit = "N") = piston.body.fa[2];
//   Real piston.body.frame_a.f[3](quantity = "Force", unit = "N") = piston.body.fa[3];
//   Real piston.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = piston.body.ta[1];
//   Real piston.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = piston.body.ta[2];
//   Real piston.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = piston.body.ta[3];
//   output Real piston.body.frame_b.r0[1](quantity = "Length", unit = "m") = piston.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.body.frame_b.r0[2](quantity = "Length", unit = "m") = piston.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.body.frame_b.r0[3](quantity = "Length", unit = "m") = piston.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.body.frame_b.S[1,1] = piston.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[1,2] = piston.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[1,3] = piston.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[2,1] = piston.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[2,2] = piston.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[2,3] = piston.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[3,1] = piston.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[3,2] = piston.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.S[3,3] = piston.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = piston.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = piston.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = piston.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = piston.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = piston.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = piston.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frame_b.f[1](quantity = "Force", unit = "N") = -piston.body.fb[1];
//   Real piston.body.frame_b.f[2](quantity = "Force", unit = "N") = -piston.body.fb[2];
//   Real piston.body.frame_b.f[3](quantity = "Force", unit = "N") = -piston.body.fb[3];
//   Real piston.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -piston.body.tb[1];
//   Real piston.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -piston.body.tb[2];
//   Real piston.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -piston.body.tb[3];
//   protected Real piston.body.Sa[1,1](start = 1.0);
//   protected Real piston.body.Sa[1,2](start = 0.0);
//   protected Real piston.body.Sa[1,3](start = 0.0);
//   protected Real piston.body.Sa[2,1](start = 0.0);
//   protected Real piston.body.Sa[2,2](start = 1.0);
//   protected Real piston.body.Sa[2,3](start = 0.0);
//   protected Real piston.body.Sa[3,1](start = 0.0);
//   protected Real piston.body.Sa[3,2](start = 0.0);
//   protected Real piston.body.Sa[3,3](start = 1.0);
//   protected Real piston.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real piston.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real piston.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real piston.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.fa[1](quantity = "Force", unit = "N");
//   protected Real piston.body.fa[2](quantity = "Force", unit = "N");
//   protected Real piston.body.fa[3](quantity = "Force", unit = "N");
//   protected Real piston.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.Sb[1,1](start = 1.0);
//   protected Real piston.body.Sb[1,2](start = 0.0);
//   protected Real piston.body.Sb[1,3](start = 0.0);
//   protected Real piston.body.Sb[2,1](start = 0.0);
//   protected Real piston.body.Sb[2,2](start = 1.0);
//   protected Real piston.body.Sb[2,3](start = 0.0);
//   protected Real piston.body.Sb[3,1](start = 0.0);
//   protected Real piston.body.Sb[3,2](start = 0.0);
//   protected Real piston.body.Sb[3,3](start = 1.0);
//   protected Real piston.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real piston.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real piston.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real piston.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.fb[1](quantity = "Force", unit = "N");
//   protected Real piston.body.fb[2](quantity = "Force", unit = "N");
//   protected Real piston.body.fb[3](quantity = "Force", unit = "N");
//   protected Real piston.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real piston.body.r[1](quantity = "Length", unit = "m") = piston.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.body.r[2](quantity = "Length", unit = "m") = piston.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.body.r[3](quantity = "Length", unit = "m") = piston.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real piston.body.rCM[1](quantity = "Length", unit = "m") = piston.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.body.rCM[2](quantity = "Length", unit = "m") = piston.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.body.rCM[3](quantity = "Length", unit = "m") = piston.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real piston.body.m(quantity = "Mass", unit = "kg", min = 0.0) = piston.m "Mass of body";
//   parameter Real piston.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I11 "(1,1) element of inertia tensor";
//   parameter Real piston.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I22 "(2,2) element of inertia tensor";
//   parameter Real piston.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I33 "(3,3) element of inertia tensor";
//   parameter Real piston.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I21 "(2,1) element of inertia tensor";
//   parameter Real piston.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I31 "(3,1) element of inertia tensor";
//   parameter Real piston.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = piston.I32 "(3,2) element of inertia tensor";
//   constant Real piston.body.frameTranslation.pi = 3.14159265358979;
//   constant Real piston.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real piston.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.body.frameTranslation.frame_a.S[1,1] = piston.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[1,2] = piston.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[1,3] = piston.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[2,1] = piston.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[2,2] = piston.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[2,3] = piston.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[3,1] = piston.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[3,2] = piston.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.S[3,3] = piston.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = piston.body.frameTranslation.fa[1];
//   Real piston.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = piston.body.frameTranslation.fa[2];
//   Real piston.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = piston.body.frameTranslation.fa[3];
//   Real piston.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = piston.body.frameTranslation.ta[1];
//   Real piston.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = piston.body.frameTranslation.ta[2];
//   Real piston.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = piston.body.frameTranslation.ta[3];
//   output Real piston.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real piston.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = piston.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.body.frameTranslation.frame_b.S[1,1] = piston.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[1,2] = piston.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[1,3] = piston.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[2,1] = piston.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[2,2] = piston.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[2,3] = piston.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[3,1] = piston.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[3,2] = piston.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.S[3,3] = piston.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = piston.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = piston.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -piston.body.frameTranslation.fb[1];
//   Real piston.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -piston.body.frameTranslation.fb[2];
//   Real piston.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -piston.body.frameTranslation.fb[3];
//   Real piston.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -piston.body.frameTranslation.tb[1];
//   Real piston.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -piston.body.frameTranslation.tb[2];
//   Real piston.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -piston.body.frameTranslation.tb[3];
//   protected Real piston.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real piston.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real piston.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real piston.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real piston.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real piston.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real piston.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real piston.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real piston.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real piston.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real piston.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real piston.body.frameTranslation.r[1](quantity = "Length", unit = "m") = piston.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real piston.body.frameTranslation.r[2](quantity = "Length", unit = "m") = piston.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real piston.body.frameTranslation.r[3](quantity = "Length", unit = "m") = piston.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real piston.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real piston.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = piston.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = piston.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = piston.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.body.body.frame_a.S[1,1] = piston.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[1,2] = piston.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[1,3] = piston.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[2,1] = piston.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[2,2] = piston.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[2,3] = piston.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[3,1] = piston.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[3,2] = piston.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.S[3,3] = piston.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = piston.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = piston.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = piston.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = piston.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = piston.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = piston.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.body.body.frame_a.f[1](quantity = "Force", unit = "N") = piston.body.body.fa[1];
//   Real piston.body.body.frame_a.f[2](quantity = "Force", unit = "N") = piston.body.body.fa[2];
//   Real piston.body.body.frame_a.f[3](quantity = "Force", unit = "N") = piston.body.body.fa[3];
//   Real piston.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = piston.body.body.ta[1];
//   Real piston.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = piston.body.body.ta[2];
//   Real piston.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = piston.body.body.ta[3];
//   protected Real piston.body.body.Sa[1,1](start = 1.0);
//   protected Real piston.body.body.Sa[1,2](start = 0.0);
//   protected Real piston.body.body.Sa[1,3](start = 0.0);
//   protected Real piston.body.body.Sa[2,1](start = 0.0);
//   protected Real piston.body.body.Sa[2,2](start = 1.0);
//   protected Real piston.body.body.Sa[2,3](start = 0.0);
//   protected Real piston.body.body.Sa[3,1](start = 0.0);
//   protected Real piston.body.body.Sa[3,2](start = 0.0);
//   protected Real piston.body.body.Sa[3,3](start = 1.0);
//   protected Real piston.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real piston.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real piston.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real piston.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real piston.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real piston.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real piston.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real piston.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real piston.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real piston.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real piston.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real piston.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real piston.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real piston.vis.frame_a.r0[1](quantity = "Length", unit = "m") = piston.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.vis.frame_a.r0[2](quantity = "Length", unit = "m") = piston.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real piston.vis.frame_a.r0[3](quantity = "Length", unit = "m") = piston.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real piston.vis.frame_a.S[1,1] = piston.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[1,2] = piston.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[1,3] = piston.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[2,1] = piston.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[2,2] = piston.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[2,3] = piston.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[3,1] = piston.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[3,2] = piston.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.S[3,3] = piston.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real piston.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = piston.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = piston.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = piston.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = piston.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = piston.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = piston.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = piston.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real piston.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = piston.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = piston.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = piston.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real piston.vis.frame_a.f[1](quantity = "Force", unit = "N") = piston.vis.fa[1];
//   Real piston.vis.frame_a.f[2](quantity = "Force", unit = "N") = piston.vis.fa[2];
//   Real piston.vis.frame_a.f[3](quantity = "Force", unit = "N") = piston.vis.fa[3];
//   Real piston.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = piston.vis.ta[1];
//   Real piston.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = piston.vis.ta[2];
//   Real piston.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = piston.vis.ta[3];
//   protected Real piston.vis.Sa[1,1](start = 1.0);
//   protected Real piston.vis.Sa[1,2](start = 0.0);
//   protected Real piston.vis.Sa[1,3](start = 0.0);
//   protected Real piston.vis.Sa[2,1](start = 0.0);
//   protected Real piston.vis.Sa[2,2](start = 1.0);
//   protected Real piston.vis.Sa[2,3](start = 0.0);
//   protected Real piston.vis.Sa[3,1](start = 0.0);
//   protected Real piston.vis.Sa[3,2](start = 0.0);
//   protected Real piston.vis.Sa[3,3](start = 1.0);
//   protected Real piston.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real piston.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real piston.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real piston.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real piston.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real piston.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real piston.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real piston.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real piston.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real piston.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real piston.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real piston.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real piston.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real piston.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real piston.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String piston.vis.Shape = piston.Shape "Name of shape (see info text)";
//   parameter Real piston.vis.r0[1] = piston.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real piston.vis.r0[2] = piston.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real piston.vis.r0[3] = piston.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real piston.vis.LengthDirection[1] = piston.LengthDirection[1] "Vector in length direction";
//   parameter Real piston.vis.LengthDirection[2] = piston.LengthDirection[2] "Vector in length direction";
//   parameter Real piston.vis.LengthDirection[3] = piston.LengthDirection[3] "Vector in length direction";
//   parameter Real piston.vis.WidthDirection[1] = piston.WidthDirection[1] "Vector in width direction";
//   parameter Real piston.vis.WidthDirection[2] = piston.WidthDirection[2] "Vector in width direction";
//   parameter Real piston.vis.WidthDirection[3] = piston.WidthDirection[3] "Vector in width direction";
//   parameter Real piston.vis.Length = piston.Length "Length of shape [m]";
//   parameter Real piston.vis.Width = piston.Width "Width of shape [m]";
//   parameter Real piston.vis.Height = piston.Height "Height of shape [m]";
//   parameter Real piston.vis.Material[1] = piston.Material[1] "Color and specular coefficient";
//   parameter Real piston.vis.Material[2] = piston.Material[2] "Color and specular coefficient";
//   parameter Real piston.vis.Material[3] = piston.Material[3] "Color and specular coefficient";
//   parameter Real piston.vis.Material[4] = piston.Material[4] "Color and specular coefficient";
//   parameter Real piston.vis.Extra = piston.Extra "Additional parameter for cone and pipe";
//   Real piston.vis.nLength[1];
//   Real piston.vis.nLength[2];
//   Real piston.vis.nLength[3];
//   Real piston.vis.nWidth[1];
//   Real piston.vis.nWidth[2];
//   Real piston.vis.nWidth[3];
//   Real piston.vis.nHeight[1];
//   Real piston.vis.nHeight[2];
//   Real piston.vis.nHeight[3];
//   parameter Real piston.vis.vis.r0[1] = piston.vis.r0[1] "Origin of visual object.";
//   parameter Real piston.vis.vis.r0[2] = piston.vis.r0[2] "Origin of visual object.";
//   parameter Real piston.vis.vis.r0[3] = piston.vis.r0[3] "Origin of visual object.";
//   parameter Real piston.vis.vis.Length = piston.vis.Length "Length of visual object.";
//   parameter Real piston.vis.vis.Width = piston.vis.Width "Width of visual object.";
//   parameter Real piston.vis.vis.Height = piston.vis.Height "Height of visual object.";
//   parameter Real piston.vis.vis.LengthDirection[1] = piston.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real piston.vis.vis.LengthDirection[2] = piston.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real piston.vis.vis.LengthDirection[3] = piston.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real piston.vis.vis.WidthDirection[1] = piston.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real piston.vis.vis.WidthDirection[2] = piston.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real piston.vis.vis.WidthDirection[3] = piston.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String piston.vis.vis.Shape = piston.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real piston.vis.vis.Material[1] = piston.vis.Material[1] "Color and specular coefficient.";
//   parameter Real piston.vis.vis.Material[2] = piston.vis.Material[2] "Color and specular coefficient.";
//   parameter Real piston.vis.vis.Material[3] = piston.vis.Material[3] "Color and specular coefficient.";
//   parameter Real piston.vis.vis.Material[4] = piston.vis.Material[4] "Color and specular coefficient.";
//   parameter Real piston.vis.vis.Extra = piston.vis.Extra "Additional size data for some of the shape types";
//   input Real piston.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real piston.vis.vis.r[1] "Position of visual object.";
//   input Real piston.vis.vis.r[2] "Position of visual object.";
//   input Real piston.vis.vis.r[3] "Position of visual object.";
//   Real piston.vis.vis.nLength[1];
//   Real piston.vis.vis.nLength[2];
//   Real piston.vis.vis.nLength[3];
//   Real piston.vis.vis.nWidth[1];
//   Real piston.vis.vis.nWidth[2];
//   Real piston.vis.vis.nWidth[3];
//   Real piston.vis.vis.nHeight[1];
//   Real piston.vis.vis.nHeight[2];
//   Real piston.vis.vis.nHeight[3];
//   parameter String piston.vis.vis.mcShape.shapeType = piston.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real piston.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = piston.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real piston.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = piston.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real piston.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = piston.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real piston.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = piston.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real piston.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = piston.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real piston.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = piston.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real piston.vis.vis.mcShape.lengthDirection[1] = piston.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.lengthDirection[2] = piston.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.lengthDirection[3] = piston.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.widthDirection[1] = piston.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.widthDirection[2] = piston.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.widthDirection[3] = piston.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real piston.vis.vis.mcShape.length(quantity = "Length", unit = "m") = piston.vis.vis.Length "Length of visual object";
//   input Real piston.vis.vis.mcShape.width(quantity = "Length", unit = "m") = piston.vis.vis.Width "Width of visual object";
//   input Real piston.vis.vis.mcShape.height(quantity = "Length", unit = "m") = piston.vis.vis.Height "Height of visual object";
//   input Real piston.vis.vis.mcShape.extra = piston.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real piston.vis.vis.mcShape.color[1] = 255.0 * piston.vis.vis.Material[1] "Color of shape";
//   input Real piston.vis.vis.mcShape.color[2] = 255.0 * piston.vis.vis.Material[2] "Color of shape";
//   input Real piston.vis.vis.mcShape.color[3] = 255.0 * piston.vis.vis.Material[3] "Color of shape";
//   input Real piston.vis.vis.mcShape.specularCoefficient = piston.vis.vis.Material[4];
//   input Real piston.vis.vis.mcShape.S[1,1] = piston.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[1,2] = piston.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[1,3] = piston.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[2,1] = piston.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[2,2] = piston.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[2,3] = piston.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[3,1] = piston.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[3,2] = piston.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real piston.vis.vis.mcShape.S[3,3] = piston.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[1,1] = piston.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[1,2] = piston.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[1,3] = piston.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[2,1] = piston.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[2,2] = piston.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[2,3] = piston.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[3,1] = piston.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[3,2] = piston.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real piston.vis.vis.mcShape.Sshape[3,3] = piston.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real piston.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real piston.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real piston.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real piston.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real piston.vis.vis.mcShape.abs_n_x = sqrt(piston.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (piston.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + piston.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real piston.vis.vis.mcShape.e_x[1] = if noEvent(piston.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else piston.vis.vis.mcShape.lengthDirection[1] / piston.vis.vis.mcShape.abs_n_x;
//   Real piston.vis.vis.mcShape.e_x[2] = if noEvent(piston.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else piston.vis.vis.mcShape.lengthDirection[2] / piston.vis.vis.mcShape.abs_n_x;
//   Real piston.vis.vis.mcShape.e_x[3] = if noEvent(piston.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else piston.vis.vis.mcShape.lengthDirection[3] / piston.vis.vis.mcShape.abs_n_x;
//   Real piston.vis.vis.mcShape.n_z_aux[1] = piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.widthDirection[3] - piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.widthDirection[2];
//   Real piston.vis.vis.mcShape.n_z_aux[2] = piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.widthDirection[1] - piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.widthDirection[3];
//   Real piston.vis.vis.mcShape.n_z_aux[3] = piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.widthDirection[2] - piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.widthDirection[1];
//   Real piston.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]},if noEvent(piston.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (piston.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + piston.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {piston.vis.vis.mcShape.widthDirection[1],piston.vis.vis.mcShape.widthDirection[2],piston.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(piston.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]})[1];
//   Real piston.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]},if noEvent(piston.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (piston.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + piston.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {piston.vis.vis.mcShape.widthDirection[1],piston.vis.vis.mcShape.widthDirection[2],piston.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(piston.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]})[2];
//   Real piston.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]},if noEvent(piston.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (piston.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + piston.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {piston.vis.vis.mcShape.widthDirection[1],piston.vis.vis.mcShape.widthDirection[2],piston.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(piston.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{piston.vis.vis.mcShape.e_x[1],piston.vis.vis.mcShape.e_x[2],piston.vis.vis.mcShape.e_x[3]})[3];
//   Real piston.vis.vis.mcShape.e_z[1] = piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.e_y[3] - piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.e_y[2];
//   Real piston.vis.vis.mcShape.e_z[2] = piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.e_y[1] - piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.e_y[3];
//   Real piston.vis.vis.mcShape.e_z[3] = piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.e_y[2] - piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.e_y[1];
//   protected output Real piston.vis.vis.mcShape.Form;
//   protected output Real piston.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real piston.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real piston.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real piston.vis.vis.mcShape.Material;
//   protected output Real piston.vis.vis.mcShape.Extra;
//   constant Real crank.pi = 3.14159265358979;
//   constant Real crank.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real crank.frame_a.r0[1](quantity = "Length", unit = "m") = crank.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.frame_a.r0[2](quantity = "Length", unit = "m") = crank.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.frame_a.r0[3](quantity = "Length", unit = "m") = crank.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.frame_a.S[1,1] = crank.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[1,2] = crank.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[1,3] = crank.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[2,1] = crank.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[2,2] = crank.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[2,3] = crank.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[3,1] = crank.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[3,2] = crank.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.S[3,3] = crank.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_a.v[1](quantity = "Velocity", unit = "m/s") = crank.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_a.v[2](quantity = "Velocity", unit = "m/s") = crank.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_a.v[3](quantity = "Velocity", unit = "m/s") = crank.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = crank.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = crank.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = crank.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_a.f[1](quantity = "Force", unit = "N") = crank.fa[1];
//   Real crank.frame_a.f[2](quantity = "Force", unit = "N") = crank.fa[2];
//   Real crank.frame_a.f[3](quantity = "Force", unit = "N") = crank.fa[3];
//   Real crank.frame_a.t[1](quantity = "Torque", unit = "N.m") = crank.ta[1];
//   Real crank.frame_a.t[2](quantity = "Torque", unit = "N.m") = crank.ta[2];
//   Real crank.frame_a.t[3](quantity = "Torque", unit = "N.m") = crank.ta[3];
//   output Real crank.frame_b.r0[1](quantity = "Length", unit = "m") = crank.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.frame_b.r0[2](quantity = "Length", unit = "m") = crank.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.frame_b.r0[3](quantity = "Length", unit = "m") = crank.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.frame_b.S[1,1] = crank.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[1,2] = crank.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[1,3] = crank.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[2,1] = crank.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[2,2] = crank.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[2,3] = crank.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[3,1] = crank.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[3,2] = crank.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.S[3,3] = crank.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.frame_b.v[1](quantity = "Velocity", unit = "m/s") = crank.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_b.v[2](quantity = "Velocity", unit = "m/s") = crank.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_b.v[3](quantity = "Velocity", unit = "m/s") = crank.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = crank.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = crank.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = crank.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.frame_b.f[1](quantity = "Force", unit = "N") = -crank.fb[1];
//   Real crank.frame_b.f[2](quantity = "Force", unit = "N") = -crank.fb[2];
//   Real crank.frame_b.f[3](quantity = "Force", unit = "N") = -crank.fb[3];
//   Real crank.frame_b.t[1](quantity = "Torque", unit = "N.m") = -crank.tb[1];
//   Real crank.frame_b.t[2](quantity = "Torque", unit = "N.m") = -crank.tb[2];
//   Real crank.frame_b.t[3](quantity = "Torque", unit = "N.m") = -crank.tb[3];
//   protected Real crank.Sa[1,1](start = 1.0);
//   protected Real crank.Sa[1,2](start = 0.0);
//   protected Real crank.Sa[1,3](start = 0.0);
//   protected Real crank.Sa[2,1](start = 0.0);
//   protected Real crank.Sa[2,2](start = 1.0);
//   protected Real crank.Sa[2,3](start = 0.0);
//   protected Real crank.Sa[3,1](start = 0.0);
//   protected Real crank.Sa[3,2](start = 0.0);
//   protected Real crank.Sa[3,3](start = 1.0);
//   protected Real crank.r0a[1](quantity = "Length", unit = "m");
//   protected Real crank.r0a[2](quantity = "Length", unit = "m");
//   protected Real crank.r0a[3](quantity = "Length", unit = "m");
//   protected Real crank.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.fa[1](quantity = "Force", unit = "N");
//   protected Real crank.fa[2](quantity = "Force", unit = "N");
//   protected Real crank.fa[3](quantity = "Force", unit = "N");
//   protected Real crank.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real crank.Sb[1,1](start = 1.0);
//   protected Real crank.Sb[1,2](start = 0.0);
//   protected Real crank.Sb[1,3](start = 0.0);
//   protected Real crank.Sb[2,1](start = 0.0);
//   protected Real crank.Sb[2,2](start = 1.0);
//   protected Real crank.Sb[2,3](start = 0.0);
//   protected Real crank.Sb[3,1](start = 0.0);
//   protected Real crank.Sb[3,2](start = 0.0);
//   protected Real crank.Sb[3,3](start = 1.0);
//   protected Real crank.r0b[1](quantity = "Length", unit = "m");
//   protected Real crank.r0b[2](quantity = "Length", unit = "m");
//   protected Real crank.r0b[3](quantity = "Length", unit = "m");
//   protected Real crank.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.fb[1](quantity = "Force", unit = "N");
//   protected Real crank.fb[2](quantity = "Force", unit = "N");
//   protected Real crank.fb[3](quantity = "Force", unit = "N");
//   protected Real crank.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real crank.r[1](quantity = "Length", unit = "m") = D / 2.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real crank.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real crank.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real crank.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real crank.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real crank.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real crank.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String crank.Shape = "box" "Name of shape (see info text)";
//   parameter Real crank.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real crank.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real crank.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real crank.LengthDirection[1](quantity = "Length", unit = "m") = crank.r[1] - crank.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real crank.LengthDirection[2](quantity = "Length", unit = "m") = crank.r[2] - crank.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real crank.LengthDirection[3](quantity = "Length", unit = "m") = crank.r[3] - crank.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real crank.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real crank.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real crank.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real crank.Length(quantity = "Length", unit = "m") = sqrt((crank.r[1] - crank.r0[1]) ^ 2.0 + ((crank.r[2] - crank.r0[2]) ^ 2.0 + (crank.r[3] - crank.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real crank.Width(quantity = "Length", unit = "m") = 0.01 "Width of shape";
//   parameter Real crank.Height(quantity = "Length", unit = "m") = 0.01 "Height of shape";
//   parameter Real crank.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real crank.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real crank.Material[3] = 1.0 "Color and specular coefficient";
//   parameter Real crank.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real crank.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real crank.body.pi = 3.14159265358979;
//   constant Real crank.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real crank.body.frame_a.r0[1](quantity = "Length", unit = "m") = crank.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.frame_a.r0[2](quantity = "Length", unit = "m") = crank.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.frame_a.r0[3](quantity = "Length", unit = "m") = crank.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.body.frame_a.S[1,1] = crank.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[1,2] = crank.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[1,3] = crank.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[2,1] = crank.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[2,2] = crank.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[2,3] = crank.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[3,1] = crank.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[3,2] = crank.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.S[3,3] = crank.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = crank.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = crank.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = crank.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = crank.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = crank.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = crank.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_a.f[1](quantity = "Force", unit = "N") = crank.body.fa[1];
//   Real crank.body.frame_a.f[2](quantity = "Force", unit = "N") = crank.body.fa[2];
//   Real crank.body.frame_a.f[3](quantity = "Force", unit = "N") = crank.body.fa[3];
//   Real crank.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = crank.body.ta[1];
//   Real crank.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = crank.body.ta[2];
//   Real crank.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = crank.body.ta[3];
//   output Real crank.body.frame_b.r0[1](quantity = "Length", unit = "m") = crank.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.body.frame_b.r0[2](quantity = "Length", unit = "m") = crank.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.body.frame_b.r0[3](quantity = "Length", unit = "m") = crank.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.body.frame_b.S[1,1] = crank.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[1,2] = crank.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[1,3] = crank.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[2,1] = crank.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[2,2] = crank.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[2,3] = crank.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[3,1] = crank.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[3,2] = crank.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.S[3,3] = crank.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = crank.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = crank.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = crank.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = crank.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = crank.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = crank.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frame_b.f[1](quantity = "Force", unit = "N") = -crank.body.fb[1];
//   Real crank.body.frame_b.f[2](quantity = "Force", unit = "N") = -crank.body.fb[2];
//   Real crank.body.frame_b.f[3](quantity = "Force", unit = "N") = -crank.body.fb[3];
//   Real crank.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -crank.body.tb[1];
//   Real crank.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -crank.body.tb[2];
//   Real crank.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -crank.body.tb[3];
//   protected Real crank.body.Sa[1,1](start = 1.0);
//   protected Real crank.body.Sa[1,2](start = 0.0);
//   protected Real crank.body.Sa[1,3](start = 0.0);
//   protected Real crank.body.Sa[2,1](start = 0.0);
//   protected Real crank.body.Sa[2,2](start = 1.0);
//   protected Real crank.body.Sa[2,3](start = 0.0);
//   protected Real crank.body.Sa[3,1](start = 0.0);
//   protected Real crank.body.Sa[3,2](start = 0.0);
//   protected Real crank.body.Sa[3,3](start = 1.0);
//   protected Real crank.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real crank.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real crank.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real crank.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.fa[1](quantity = "Force", unit = "N");
//   protected Real crank.body.fa[2](quantity = "Force", unit = "N");
//   protected Real crank.body.fa[3](quantity = "Force", unit = "N");
//   protected Real crank.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.Sb[1,1](start = 1.0);
//   protected Real crank.body.Sb[1,2](start = 0.0);
//   protected Real crank.body.Sb[1,3](start = 0.0);
//   protected Real crank.body.Sb[2,1](start = 0.0);
//   protected Real crank.body.Sb[2,2](start = 1.0);
//   protected Real crank.body.Sb[2,3](start = 0.0);
//   protected Real crank.body.Sb[3,1](start = 0.0);
//   protected Real crank.body.Sb[3,2](start = 0.0);
//   protected Real crank.body.Sb[3,3](start = 1.0);
//   protected Real crank.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real crank.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real crank.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real crank.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.fb[1](quantity = "Force", unit = "N");
//   protected Real crank.body.fb[2](quantity = "Force", unit = "N");
//   protected Real crank.body.fb[3](quantity = "Force", unit = "N");
//   protected Real crank.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real crank.body.r[1](quantity = "Length", unit = "m") = crank.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.body.r[2](quantity = "Length", unit = "m") = crank.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.body.r[3](quantity = "Length", unit = "m") = crank.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real crank.body.rCM[1](quantity = "Length", unit = "m") = crank.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.body.rCM[2](quantity = "Length", unit = "m") = crank.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.body.rCM[3](quantity = "Length", unit = "m") = crank.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real crank.body.m(quantity = "Mass", unit = "kg", min = 0.0) = crank.m "Mass of body";
//   parameter Real crank.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I11 "(1,1) element of inertia tensor";
//   parameter Real crank.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I22 "(2,2) element of inertia tensor";
//   parameter Real crank.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I33 "(3,3) element of inertia tensor";
//   parameter Real crank.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I21 "(2,1) element of inertia tensor";
//   parameter Real crank.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I31 "(3,1) element of inertia tensor";
//   parameter Real crank.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = crank.I32 "(3,2) element of inertia tensor";
//   constant Real crank.body.frameTranslation.pi = 3.14159265358979;
//   constant Real crank.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real crank.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.body.frameTranslation.frame_a.S[1,1] = crank.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[1,2] = crank.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[1,3] = crank.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[2,1] = crank.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[2,2] = crank.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[2,3] = crank.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[3,1] = crank.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[3,2] = crank.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.S[3,3] = crank.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = crank.body.frameTranslation.fa[1];
//   Real crank.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = crank.body.frameTranslation.fa[2];
//   Real crank.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = crank.body.frameTranslation.fa[3];
//   Real crank.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = crank.body.frameTranslation.ta[1];
//   Real crank.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = crank.body.frameTranslation.ta[2];
//   Real crank.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = crank.body.frameTranslation.ta[3];
//   output Real crank.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real crank.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = crank.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.body.frameTranslation.frame_b.S[1,1] = crank.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[1,2] = crank.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[1,3] = crank.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[2,1] = crank.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[2,2] = crank.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[2,3] = crank.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[3,1] = crank.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[3,2] = crank.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.S[3,3] = crank.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = crank.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = crank.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -crank.body.frameTranslation.fb[1];
//   Real crank.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -crank.body.frameTranslation.fb[2];
//   Real crank.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -crank.body.frameTranslation.fb[3];
//   Real crank.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -crank.body.frameTranslation.tb[1];
//   Real crank.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -crank.body.frameTranslation.tb[2];
//   Real crank.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -crank.body.frameTranslation.tb[3];
//   protected Real crank.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real crank.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real crank.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real crank.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real crank.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real crank.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real crank.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real crank.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real crank.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real crank.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real crank.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real crank.body.frameTranslation.r[1](quantity = "Length", unit = "m") = crank.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real crank.body.frameTranslation.r[2](quantity = "Length", unit = "m") = crank.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real crank.body.frameTranslation.r[3](quantity = "Length", unit = "m") = crank.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real crank.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real crank.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = crank.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = crank.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = crank.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.body.body.frame_a.S[1,1] = crank.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[1,2] = crank.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[1,3] = crank.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[2,1] = crank.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[2,2] = crank.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[2,3] = crank.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[3,1] = crank.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[3,2] = crank.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.S[3,3] = crank.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = crank.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = crank.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = crank.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = crank.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = crank.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = crank.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.body.body.frame_a.f[1](quantity = "Force", unit = "N") = crank.body.body.fa[1];
//   Real crank.body.body.frame_a.f[2](quantity = "Force", unit = "N") = crank.body.body.fa[2];
//   Real crank.body.body.frame_a.f[3](quantity = "Force", unit = "N") = crank.body.body.fa[3];
//   Real crank.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = crank.body.body.ta[1];
//   Real crank.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = crank.body.body.ta[2];
//   Real crank.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = crank.body.body.ta[3];
//   protected Real crank.body.body.Sa[1,1](start = 1.0);
//   protected Real crank.body.body.Sa[1,2](start = 0.0);
//   protected Real crank.body.body.Sa[1,3](start = 0.0);
//   protected Real crank.body.body.Sa[2,1](start = 0.0);
//   protected Real crank.body.body.Sa[2,2](start = 1.0);
//   protected Real crank.body.body.Sa[2,3](start = 0.0);
//   protected Real crank.body.body.Sa[3,1](start = 0.0);
//   protected Real crank.body.body.Sa[3,2](start = 0.0);
//   protected Real crank.body.body.Sa[3,3](start = 1.0);
//   protected Real crank.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real crank.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real crank.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real crank.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real crank.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real crank.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real crank.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real crank.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real crank.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real crank.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real crank.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real crank.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real crank.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real crank.vis.frame_a.r0[1](quantity = "Length", unit = "m") = crank.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.vis.frame_a.r0[2](quantity = "Length", unit = "m") = crank.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real crank.vis.frame_a.r0[3](quantity = "Length", unit = "m") = crank.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real crank.vis.frame_a.S[1,1] = crank.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[1,2] = crank.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[1,3] = crank.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[2,1] = crank.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[2,2] = crank.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[2,3] = crank.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[3,1] = crank.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[3,2] = crank.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.S[3,3] = crank.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real crank.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = crank.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = crank.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = crank.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = crank.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = crank.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = crank.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = crank.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real crank.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = crank.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = crank.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = crank.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real crank.vis.frame_a.f[1](quantity = "Force", unit = "N") = crank.vis.fa[1];
//   Real crank.vis.frame_a.f[2](quantity = "Force", unit = "N") = crank.vis.fa[2];
//   Real crank.vis.frame_a.f[3](quantity = "Force", unit = "N") = crank.vis.fa[3];
//   Real crank.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = crank.vis.ta[1];
//   Real crank.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = crank.vis.ta[2];
//   Real crank.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = crank.vis.ta[3];
//   protected Real crank.vis.Sa[1,1](start = 1.0);
//   protected Real crank.vis.Sa[1,2](start = 0.0);
//   protected Real crank.vis.Sa[1,3](start = 0.0);
//   protected Real crank.vis.Sa[2,1](start = 0.0);
//   protected Real crank.vis.Sa[2,2](start = 1.0);
//   protected Real crank.vis.Sa[2,3](start = 0.0);
//   protected Real crank.vis.Sa[3,1](start = 0.0);
//   protected Real crank.vis.Sa[3,2](start = 0.0);
//   protected Real crank.vis.Sa[3,3](start = 1.0);
//   protected Real crank.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real crank.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real crank.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real crank.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real crank.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real crank.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real crank.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real crank.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real crank.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real crank.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real crank.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real crank.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real crank.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real crank.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real crank.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String crank.vis.Shape = crank.Shape "Name of shape (see info text)";
//   parameter Real crank.vis.r0[1] = crank.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real crank.vis.r0[2] = crank.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real crank.vis.r0[3] = crank.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real crank.vis.LengthDirection[1] = crank.LengthDirection[1] "Vector in length direction";
//   parameter Real crank.vis.LengthDirection[2] = crank.LengthDirection[2] "Vector in length direction";
//   parameter Real crank.vis.LengthDirection[3] = crank.LengthDirection[3] "Vector in length direction";
//   parameter Real crank.vis.WidthDirection[1] = crank.WidthDirection[1] "Vector in width direction";
//   parameter Real crank.vis.WidthDirection[2] = crank.WidthDirection[2] "Vector in width direction";
//   parameter Real crank.vis.WidthDirection[3] = crank.WidthDirection[3] "Vector in width direction";
//   parameter Real crank.vis.Length = crank.Length "Length of shape [m]";
//   parameter Real crank.vis.Width = crank.Width "Width of shape [m]";
//   parameter Real crank.vis.Height = crank.Height "Height of shape [m]";
//   parameter Real crank.vis.Material[1] = crank.Material[1] "Color and specular coefficient";
//   parameter Real crank.vis.Material[2] = crank.Material[2] "Color and specular coefficient";
//   parameter Real crank.vis.Material[3] = crank.Material[3] "Color and specular coefficient";
//   parameter Real crank.vis.Material[4] = crank.Material[4] "Color and specular coefficient";
//   parameter Real crank.vis.Extra = crank.Extra "Additional parameter for cone and pipe";
//   Real crank.vis.nLength[1];
//   Real crank.vis.nLength[2];
//   Real crank.vis.nLength[3];
//   Real crank.vis.nWidth[1];
//   Real crank.vis.nWidth[2];
//   Real crank.vis.nWidth[3];
//   Real crank.vis.nHeight[1];
//   Real crank.vis.nHeight[2];
//   Real crank.vis.nHeight[3];
//   parameter Real crank.vis.vis.r0[1] = crank.vis.r0[1] "Origin of visual object.";
//   parameter Real crank.vis.vis.r0[2] = crank.vis.r0[2] "Origin of visual object.";
//   parameter Real crank.vis.vis.r0[3] = crank.vis.r0[3] "Origin of visual object.";
//   parameter Real crank.vis.vis.Length = crank.vis.Length "Length of visual object.";
//   parameter Real crank.vis.vis.Width = crank.vis.Width "Width of visual object.";
//   parameter Real crank.vis.vis.Height = crank.vis.Height "Height of visual object.";
//   parameter Real crank.vis.vis.LengthDirection[1] = crank.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real crank.vis.vis.LengthDirection[2] = crank.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real crank.vis.vis.LengthDirection[3] = crank.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real crank.vis.vis.WidthDirection[1] = crank.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real crank.vis.vis.WidthDirection[2] = crank.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real crank.vis.vis.WidthDirection[3] = crank.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String crank.vis.vis.Shape = crank.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real crank.vis.vis.Material[1] = crank.vis.Material[1] "Color and specular coefficient.";
//   parameter Real crank.vis.vis.Material[2] = crank.vis.Material[2] "Color and specular coefficient.";
//   parameter Real crank.vis.vis.Material[3] = crank.vis.Material[3] "Color and specular coefficient.";
//   parameter Real crank.vis.vis.Material[4] = crank.vis.Material[4] "Color and specular coefficient.";
//   parameter Real crank.vis.vis.Extra = crank.vis.Extra "Additional size data for some of the shape types";
//   input Real crank.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real crank.vis.vis.r[1] "Position of visual object.";
//   input Real crank.vis.vis.r[2] "Position of visual object.";
//   input Real crank.vis.vis.r[3] "Position of visual object.";
//   Real crank.vis.vis.nLength[1];
//   Real crank.vis.vis.nLength[2];
//   Real crank.vis.vis.nLength[3];
//   Real crank.vis.vis.nWidth[1];
//   Real crank.vis.vis.nWidth[2];
//   Real crank.vis.vis.nWidth[3];
//   Real crank.vis.vis.nHeight[1];
//   Real crank.vis.vis.nHeight[2];
//   Real crank.vis.vis.nHeight[3];
//   parameter String crank.vis.vis.mcShape.shapeType = crank.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real crank.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = crank.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real crank.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = crank.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real crank.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = crank.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real crank.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = crank.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real crank.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = crank.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real crank.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = crank.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real crank.vis.vis.mcShape.lengthDirection[1] = crank.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.lengthDirection[2] = crank.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.lengthDirection[3] = crank.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.widthDirection[1] = crank.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.widthDirection[2] = crank.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.widthDirection[3] = crank.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real crank.vis.vis.mcShape.length(quantity = "Length", unit = "m") = crank.vis.vis.Length "Length of visual object";
//   input Real crank.vis.vis.mcShape.width(quantity = "Length", unit = "m") = crank.vis.vis.Width "Width of visual object";
//   input Real crank.vis.vis.mcShape.height(quantity = "Length", unit = "m") = crank.vis.vis.Height "Height of visual object";
//   input Real crank.vis.vis.mcShape.extra = crank.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real crank.vis.vis.mcShape.color[1] = 255.0 * crank.vis.vis.Material[1] "Color of shape";
//   input Real crank.vis.vis.mcShape.color[2] = 255.0 * crank.vis.vis.Material[2] "Color of shape";
//   input Real crank.vis.vis.mcShape.color[3] = 255.0 * crank.vis.vis.Material[3] "Color of shape";
//   input Real crank.vis.vis.mcShape.specularCoefficient = crank.vis.vis.Material[4];
//   input Real crank.vis.vis.mcShape.S[1,1] = crank.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[1,2] = crank.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[1,3] = crank.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[2,1] = crank.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[2,2] = crank.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[2,3] = crank.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[3,1] = crank.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[3,2] = crank.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real crank.vis.vis.mcShape.S[3,3] = crank.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[1,1] = crank.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[1,2] = crank.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[1,3] = crank.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[2,1] = crank.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[2,2] = crank.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[2,3] = crank.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[3,1] = crank.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[3,2] = crank.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real crank.vis.vis.mcShape.Sshape[3,3] = crank.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real crank.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real crank.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real crank.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real crank.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real crank.vis.vis.mcShape.abs_n_x = sqrt(crank.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (crank.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + crank.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real crank.vis.vis.mcShape.e_x[1] = if noEvent(crank.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else crank.vis.vis.mcShape.lengthDirection[1] / crank.vis.vis.mcShape.abs_n_x;
//   Real crank.vis.vis.mcShape.e_x[2] = if noEvent(crank.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else crank.vis.vis.mcShape.lengthDirection[2] / crank.vis.vis.mcShape.abs_n_x;
//   Real crank.vis.vis.mcShape.e_x[3] = if noEvent(crank.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else crank.vis.vis.mcShape.lengthDirection[3] / crank.vis.vis.mcShape.abs_n_x;
//   Real crank.vis.vis.mcShape.n_z_aux[1] = crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.widthDirection[3] - crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.widthDirection[2];
//   Real crank.vis.vis.mcShape.n_z_aux[2] = crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.widthDirection[1] - crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.widthDirection[3];
//   Real crank.vis.vis.mcShape.n_z_aux[3] = crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.widthDirection[2] - crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.widthDirection[1];
//   Real crank.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]},if noEvent(crank.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (crank.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + crank.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {crank.vis.vis.mcShape.widthDirection[1],crank.vis.vis.mcShape.widthDirection[2],crank.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(crank.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]})[1];
//   Real crank.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]},if noEvent(crank.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (crank.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + crank.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {crank.vis.vis.mcShape.widthDirection[1],crank.vis.vis.mcShape.widthDirection[2],crank.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(crank.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]})[2];
//   Real crank.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]},if noEvent(crank.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (crank.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + crank.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {crank.vis.vis.mcShape.widthDirection[1],crank.vis.vis.mcShape.widthDirection[2],crank.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(crank.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{crank.vis.vis.mcShape.e_x[1],crank.vis.vis.mcShape.e_x[2],crank.vis.vis.mcShape.e_x[3]})[3];
//   Real crank.vis.vis.mcShape.e_z[1] = crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.e_y[3] - crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.e_y[2];
//   Real crank.vis.vis.mcShape.e_z[2] = crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.e_y[1] - crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.e_y[3];
//   Real crank.vis.vis.mcShape.e_z[3] = crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.e_y[2] - crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.e_y[1];
//   protected output Real crank.vis.vis.mcShape.Form;
//   protected output Real crank.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real crank.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real crank.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real crank.vis.vis.mcShape.Material;
//   protected output Real crank.vis.vis.mcShape.Extra;
//   Real gasForce.s_rel(quantity = "Length", unit = "m", min = 0.0) "relative distance (= flange_b.s - flange_a.s)";
//   Real gasForce.f(quantity = "Force", unit = "N") "forcee between flanges (positive in direction of flange axis R)";
//   Real gasForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real gasForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real gasForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real gasForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   parameter Real gasForce.L(quantity = "Length", unit = "m") = sqrt((L + D / 2.0) ^ 2.0 - e ^ 2.0) - sqrt((L - D / 2.0) ^ 2.0 - e ^ 2.0) "Length of cylinder";
//   parameter Real gasForce.d(quantity = "Length", unit = "m") = 0.05 "diameter of cylinder";
//   parameter Real gasForce.k0 = 0.01;
//   parameter Real gasForce.k1 = 1.0;
//   parameter Real gasForce.k = 1.0;
//   constant Real gasForce.pi = 3.14159265358979;
//   constant Real gasForce.PI = 3.14159265358979 "Only for compatibility reasons";
//   Real gasForce.x(quantity = "Length", unit = "m");
//   Real gasForce.dens(quantity = "Density", unit = "kg/m3", displayUnit = "g/cm3", min = 0.0);
//   Real gasForce.press(quantity = "Pressure", unit = "Pa", displayUnit = "bar") "cylinder pressure";
//   Real gasForce.V(quantity = "Volume", unit = "m3");
//   Real gasForce.T(quantity = "ThermodynamicTemperature", unit = "K", displayUnit = "degC", min = 0.0);
//   Real gasForce.v_rel(quantity = "Velocity", unit = "m/s");
//   Real flyWheel.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = flyWheel.phi_start, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real flyWheel.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real flyWheel.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real flyWheel.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real flyWheel.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real flyWheel.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0025 "Moment of inertia";
//   parameter Integer flyWheel.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real flyWheel.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real flyWheel.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real flyWheel.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer flyWheel.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real flyWheel.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = flyWheel.w_start, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real flyWheel.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real torque.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque.tau_support(quantity = "Torque", unit = "N.m");
//   Real torque.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real torque.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real torque.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real torque.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real torque.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real torque.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real torque.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real torque.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean torque.free "true, if frictional element is not active";
//   Real torque.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean torque.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean torque.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean torque.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer torque.Unknown = 3 "Value of mode is not known";
//   constant Integer torque.Free = 2 "Element is not active";
//   constant Integer torque.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer torque.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer torque.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer torque.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real torque.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real torque.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real torque.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real torque.tau_pos[1,2] = Load "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real torque.peak(min = 1.0) = 1.0 "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real torque.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real torque.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real torque.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   constant Real rodBody.pi = 3.14159265358979;
//   constant Real rodBody.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real rodBody.frame_a.r0[1](quantity = "Length", unit = "m") = rodBody.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.frame_a.r0[2](quantity = "Length", unit = "m") = rodBody.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.frame_a.r0[3](quantity = "Length", unit = "m") = rodBody.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.frame_a.S[1,1] = rodBody.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[1,2] = rodBody.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[1,3] = rodBody.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[2,1] = rodBody.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[2,2] = rodBody.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[2,3] = rodBody.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[3,1] = rodBody.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[3,2] = rodBody.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.S[3,3] = rodBody.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rodBody.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rodBody.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rodBody.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_a.f[1](quantity = "Force", unit = "N") = rodBody.fa[1];
//   Real rodBody.frame_a.f[2](quantity = "Force", unit = "N") = rodBody.fa[2];
//   Real rodBody.frame_a.f[3](quantity = "Force", unit = "N") = rodBody.fa[3];
//   Real rodBody.frame_a.t[1](quantity = "Torque", unit = "N.m") = rodBody.ta[1];
//   Real rodBody.frame_a.t[2](quantity = "Torque", unit = "N.m") = rodBody.ta[2];
//   Real rodBody.frame_a.t[3](quantity = "Torque", unit = "N.m") = rodBody.ta[3];
//   output Real rodBody.frame_b.r0[1](quantity = "Length", unit = "m") = rodBody.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.frame_b.r0[2](quantity = "Length", unit = "m") = rodBody.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.frame_b.r0[3](quantity = "Length", unit = "m") = rodBody.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.frame_b.S[1,1] = rodBody.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[1,2] = rodBody.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[1,3] = rodBody.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[2,1] = rodBody.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[2,2] = rodBody.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[2,3] = rodBody.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[3,1] = rodBody.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[3,2] = rodBody.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.S[3,3] = rodBody.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.frame_b.v[1](quantity = "Velocity", unit = "m/s") = rodBody.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.v[2](quantity = "Velocity", unit = "m/s") = rodBody.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.v[3](quantity = "Velocity", unit = "m/s") = rodBody.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.frame_b.f[1](quantity = "Force", unit = "N") = -rodBody.fb[1];
//   Real rodBody.frame_b.f[2](quantity = "Force", unit = "N") = -rodBody.fb[2];
//   Real rodBody.frame_b.f[3](quantity = "Force", unit = "N") = -rodBody.fb[3];
//   Real rodBody.frame_b.t[1](quantity = "Torque", unit = "N.m") = -rodBody.tb[1];
//   Real rodBody.frame_b.t[2](quantity = "Torque", unit = "N.m") = -rodBody.tb[2];
//   Real rodBody.frame_b.t[3](quantity = "Torque", unit = "N.m") = -rodBody.tb[3];
//   protected Real rodBody.Sa[1,1](start = 1.0);
//   protected Real rodBody.Sa[1,2](start = 0.0);
//   protected Real rodBody.Sa[1,3](start = 0.0);
//   protected Real rodBody.Sa[2,1](start = 0.0);
//   protected Real rodBody.Sa[2,2](start = 1.0);
//   protected Real rodBody.Sa[2,3](start = 0.0);
//   protected Real rodBody.Sa[3,1](start = 0.0);
//   protected Real rodBody.Sa[3,2](start = 0.0);
//   protected Real rodBody.Sa[3,3](start = 1.0);
//   protected Real rodBody.r0a[1](quantity = "Length", unit = "m");
//   protected Real rodBody.r0a[2](quantity = "Length", unit = "m");
//   protected Real rodBody.r0a[3](quantity = "Length", unit = "m");
//   protected Real rodBody.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.fa[1](quantity = "Force", unit = "N");
//   protected Real rodBody.fa[2](quantity = "Force", unit = "N");
//   protected Real rodBody.fa[3](quantity = "Force", unit = "N");
//   protected Real rodBody.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.Sb[1,1](start = 1.0);
//   protected Real rodBody.Sb[1,2](start = 0.0);
//   protected Real rodBody.Sb[1,3](start = 0.0);
//   protected Real rodBody.Sb[2,1](start = 0.0);
//   protected Real rodBody.Sb[2,2](start = 1.0);
//   protected Real rodBody.Sb[2,3](start = 0.0);
//   protected Real rodBody.Sb[3,1](start = 0.0);
//   protected Real rodBody.Sb[3,2](start = 0.0);
//   protected Real rodBody.Sb[3,3](start = 1.0);
//   protected Real rodBody.r0b[1](quantity = "Length", unit = "m");
//   protected Real rodBody.r0b[2](quantity = "Length", unit = "m");
//   protected Real rodBody.r0b[3](quantity = "Length", unit = "m");
//   protected Real rodBody.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.fb[1](quantity = "Force", unit = "N");
//   protected Real rodBody.fb[2](quantity = "Force", unit = "N");
//   protected Real rodBody.fb[3](quantity = "Force", unit = "N");
//   protected Real rodBody.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real rodBody.r[1](quantity = "Length", unit = "m") = L "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.rCM[1](quantity = "Length", unit = "m") = L / 2.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.5 "Mass of body";
//   parameter Real rodBody.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real rodBody.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real rodBody.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0018 "(3,3) element of inertia tensor";
//   parameter Real rodBody.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real rodBody.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real rodBody.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String rodBody.Shape = "box" "Name of shape (see info text)";
//   parameter Real rodBody.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real rodBody.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real rodBody.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real rodBody.LengthDirection[1](quantity = "Length", unit = "m") = rodBody.r[1] - rodBody.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real rodBody.LengthDirection[2](quantity = "Length", unit = "m") = rodBody.r[2] - rodBody.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real rodBody.LengthDirection[3](quantity = "Length", unit = "m") = rodBody.r[3] - rodBody.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real rodBody.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real rodBody.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real rodBody.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real rodBody.Length(quantity = "Length", unit = "m") = sqrt((rodBody.r[1] - rodBody.r0[1]) ^ 2.0 + ((rodBody.r[2] - rodBody.r0[2]) ^ 2.0 + (rodBody.r[3] - rodBody.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real rodBody.Width(quantity = "Length", unit = "m") = 0.02 "Width of shape";
//   parameter Real rodBody.Height(quantity = "Length", unit = "m") = 0.01 "Height of shape";
//   parameter Real rodBody.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real rodBody.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real rodBody.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real rodBody.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real rodBody.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real rodBody.body.pi = 3.14159265358979;
//   constant Real rodBody.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real rodBody.body.frame_a.r0[1](quantity = "Length", unit = "m") = rodBody.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.frame_a.r0[2](quantity = "Length", unit = "m") = rodBody.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.frame_a.r0[3](quantity = "Length", unit = "m") = rodBody.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.body.frame_a.S[1,1] = rodBody.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[1,2] = rodBody.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[1,3] = rodBody.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[2,1] = rodBody.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[2,2] = rodBody.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[2,3] = rodBody.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[3,1] = rodBody.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[3,2] = rodBody.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.S[3,3] = rodBody.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rodBody.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rodBody.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rodBody.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_a.f[1](quantity = "Force", unit = "N") = rodBody.body.fa[1];
//   Real rodBody.body.frame_a.f[2](quantity = "Force", unit = "N") = rodBody.body.fa[2];
//   Real rodBody.body.frame_a.f[3](quantity = "Force", unit = "N") = rodBody.body.fa[3];
//   Real rodBody.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = rodBody.body.ta[1];
//   Real rodBody.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = rodBody.body.ta[2];
//   Real rodBody.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = rodBody.body.ta[3];
//   output Real rodBody.body.frame_b.r0[1](quantity = "Length", unit = "m") = rodBody.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.body.frame_b.r0[2](quantity = "Length", unit = "m") = rodBody.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.body.frame_b.r0[3](quantity = "Length", unit = "m") = rodBody.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.body.frame_b.S[1,1] = rodBody.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[1,2] = rodBody.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[1,3] = rodBody.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[2,1] = rodBody.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[2,2] = rodBody.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[2,3] = rodBody.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[3,1] = rodBody.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[3,2] = rodBody.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.S[3,3] = rodBody.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = rodBody.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = rodBody.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = rodBody.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frame_b.f[1](quantity = "Force", unit = "N") = -rodBody.body.fb[1];
//   Real rodBody.body.frame_b.f[2](quantity = "Force", unit = "N") = -rodBody.body.fb[2];
//   Real rodBody.body.frame_b.f[3](quantity = "Force", unit = "N") = -rodBody.body.fb[3];
//   Real rodBody.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -rodBody.body.tb[1];
//   Real rodBody.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -rodBody.body.tb[2];
//   Real rodBody.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -rodBody.body.tb[3];
//   protected Real rodBody.body.Sa[1,1](start = 1.0);
//   protected Real rodBody.body.Sa[1,2](start = 0.0);
//   protected Real rodBody.body.Sa[1,3](start = 0.0);
//   protected Real rodBody.body.Sa[2,1](start = 0.0);
//   protected Real rodBody.body.Sa[2,2](start = 1.0);
//   protected Real rodBody.body.Sa[2,3](start = 0.0);
//   protected Real rodBody.body.Sa[3,1](start = 0.0);
//   protected Real rodBody.body.Sa[3,2](start = 0.0);
//   protected Real rodBody.body.Sa[3,3](start = 1.0);
//   protected Real rodBody.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real rodBody.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real rodBody.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real rodBody.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.fa[1](quantity = "Force", unit = "N");
//   protected Real rodBody.body.fa[2](quantity = "Force", unit = "N");
//   protected Real rodBody.body.fa[3](quantity = "Force", unit = "N");
//   protected Real rodBody.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.Sb[1,1](start = 1.0);
//   protected Real rodBody.body.Sb[1,2](start = 0.0);
//   protected Real rodBody.body.Sb[1,3](start = 0.0);
//   protected Real rodBody.body.Sb[2,1](start = 0.0);
//   protected Real rodBody.body.Sb[2,2](start = 1.0);
//   protected Real rodBody.body.Sb[2,3](start = 0.0);
//   protected Real rodBody.body.Sb[3,1](start = 0.0);
//   protected Real rodBody.body.Sb[3,2](start = 0.0);
//   protected Real rodBody.body.Sb[3,3](start = 1.0);
//   protected Real rodBody.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real rodBody.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real rodBody.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real rodBody.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.fb[1](quantity = "Force", unit = "N");
//   protected Real rodBody.body.fb[2](quantity = "Force", unit = "N");
//   protected Real rodBody.body.fb[3](quantity = "Force", unit = "N");
//   protected Real rodBody.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real rodBody.body.r[1](quantity = "Length", unit = "m") = rodBody.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.body.r[2](quantity = "Length", unit = "m") = rodBody.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.body.r[3](quantity = "Length", unit = "m") = rodBody.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real rodBody.body.rCM[1](quantity = "Length", unit = "m") = rodBody.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.body.rCM[2](quantity = "Length", unit = "m") = rodBody.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.body.rCM[3](quantity = "Length", unit = "m") = rodBody.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real rodBody.body.m(quantity = "Mass", unit = "kg", min = 0.0) = rodBody.m "Mass of body";
//   parameter Real rodBody.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I11 "(1,1) element of inertia tensor";
//   parameter Real rodBody.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I22 "(2,2) element of inertia tensor";
//   parameter Real rodBody.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I33 "(3,3) element of inertia tensor";
//   parameter Real rodBody.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I21 "(2,1) element of inertia tensor";
//   parameter Real rodBody.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I31 "(3,1) element of inertia tensor";
//   parameter Real rodBody.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = rodBody.I32 "(3,2) element of inertia tensor";
//   constant Real rodBody.body.frameTranslation.pi = 3.14159265358979;
//   constant Real rodBody.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real rodBody.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[1,1] = rodBody.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[1,2] = rodBody.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[1,3] = rodBody.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[2,1] = rodBody.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[2,2] = rodBody.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[2,3] = rodBody.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[3,1] = rodBody.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[3,2] = rodBody.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.S[3,3] = rodBody.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = rodBody.body.frameTranslation.fa[1];
//   Real rodBody.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = rodBody.body.frameTranslation.fa[2];
//   Real rodBody.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = rodBody.body.frameTranslation.fa[3];
//   Real rodBody.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = rodBody.body.frameTranslation.ta[1];
//   Real rodBody.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = rodBody.body.frameTranslation.ta[2];
//   Real rodBody.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = rodBody.body.frameTranslation.ta[3];
//   output Real rodBody.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rodBody.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = rodBody.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[1,1] = rodBody.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[1,2] = rodBody.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[1,3] = rodBody.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[2,1] = rodBody.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[2,2] = rodBody.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[2,3] = rodBody.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[3,1] = rodBody.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[3,2] = rodBody.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.S[3,3] = rodBody.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = rodBody.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -rodBody.body.frameTranslation.fb[1];
//   Real rodBody.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -rodBody.body.frameTranslation.fb[2];
//   Real rodBody.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -rodBody.body.frameTranslation.fb[3];
//   Real rodBody.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -rodBody.body.frameTranslation.tb[1];
//   Real rodBody.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -rodBody.body.frameTranslation.tb[2];
//   Real rodBody.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -rodBody.body.frameTranslation.tb[3];
//   protected Real rodBody.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real rodBody.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real rodBody.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real rodBody.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real rodBody.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real rodBody.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real rodBody.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real rodBody.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real rodBody.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real rodBody.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real rodBody.body.frameTranslation.r[1](quantity = "Length", unit = "m") = rodBody.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real rodBody.body.frameTranslation.r[2](quantity = "Length", unit = "m") = rodBody.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real rodBody.body.frameTranslation.r[3](quantity = "Length", unit = "m") = rodBody.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real rodBody.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real rodBody.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = rodBody.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = rodBody.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = rodBody.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.body.body.frame_a.S[1,1] = rodBody.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[1,2] = rodBody.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[1,3] = rodBody.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[2,1] = rodBody.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[2,2] = rodBody.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[2,3] = rodBody.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[3,1] = rodBody.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[3,2] = rodBody.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.S[3,3] = rodBody.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rodBody.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rodBody.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rodBody.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.body.body.frame_a.f[1](quantity = "Force", unit = "N") = rodBody.body.body.fa[1];
//   Real rodBody.body.body.frame_a.f[2](quantity = "Force", unit = "N") = rodBody.body.body.fa[2];
//   Real rodBody.body.body.frame_a.f[3](quantity = "Force", unit = "N") = rodBody.body.body.fa[3];
//   Real rodBody.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = rodBody.body.body.ta[1];
//   Real rodBody.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = rodBody.body.body.ta[2];
//   Real rodBody.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = rodBody.body.body.ta[3];
//   protected Real rodBody.body.body.Sa[1,1](start = 1.0);
//   protected Real rodBody.body.body.Sa[1,2](start = 0.0);
//   protected Real rodBody.body.body.Sa[1,3](start = 0.0);
//   protected Real rodBody.body.body.Sa[2,1](start = 0.0);
//   protected Real rodBody.body.body.Sa[2,2](start = 1.0);
//   protected Real rodBody.body.body.Sa[2,3](start = 0.0);
//   protected Real rodBody.body.body.Sa[3,1](start = 0.0);
//   protected Real rodBody.body.body.Sa[3,2](start = 0.0);
//   protected Real rodBody.body.body.Sa[3,3](start = 1.0);
//   protected Real rodBody.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real rodBody.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real rodBody.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real rodBody.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real rodBody.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real rodBody.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real rodBody.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real rodBody.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real rodBody.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real rodBody.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real rodBody.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real rodBody.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real rodBody.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real rodBody.vis.frame_a.r0[1](quantity = "Length", unit = "m") = rodBody.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.vis.frame_a.r0[2](quantity = "Length", unit = "m") = rodBody.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rodBody.vis.frame_a.r0[3](quantity = "Length", unit = "m") = rodBody.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rodBody.vis.frame_a.S[1,1] = rodBody.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[1,2] = rodBody.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[1,3] = rodBody.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[2,1] = rodBody.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[2,2] = rodBody.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[2,3] = rodBody.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[3,1] = rodBody.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[3,2] = rodBody.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.S[3,3] = rodBody.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rodBody.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rodBody.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rodBody.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rodBody.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rodBody.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rodBody.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rodBody.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rodBody.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rodBody.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rodBody.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rodBody.vis.frame_a.f[1](quantity = "Force", unit = "N") = rodBody.vis.fa[1];
//   Real rodBody.vis.frame_a.f[2](quantity = "Force", unit = "N") = rodBody.vis.fa[2];
//   Real rodBody.vis.frame_a.f[3](quantity = "Force", unit = "N") = rodBody.vis.fa[3];
//   Real rodBody.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = rodBody.vis.ta[1];
//   Real rodBody.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = rodBody.vis.ta[2];
//   Real rodBody.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = rodBody.vis.ta[3];
//   protected Real rodBody.vis.Sa[1,1](start = 1.0);
//   protected Real rodBody.vis.Sa[1,2](start = 0.0);
//   protected Real rodBody.vis.Sa[1,3](start = 0.0);
//   protected Real rodBody.vis.Sa[2,1](start = 0.0);
//   protected Real rodBody.vis.Sa[2,2](start = 1.0);
//   protected Real rodBody.vis.Sa[2,3](start = 0.0);
//   protected Real rodBody.vis.Sa[3,1](start = 0.0);
//   protected Real rodBody.vis.Sa[3,2](start = 0.0);
//   protected Real rodBody.vis.Sa[3,3](start = 1.0);
//   protected Real rodBody.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real rodBody.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real rodBody.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real rodBody.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rodBody.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rodBody.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rodBody.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rodBody.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real rodBody.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real rodBody.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real rodBody.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rodBody.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String rodBody.vis.Shape = rodBody.Shape "Name of shape (see info text)";
//   parameter Real rodBody.vis.r0[1] = rodBody.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real rodBody.vis.r0[2] = rodBody.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real rodBody.vis.r0[3] = rodBody.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real rodBody.vis.LengthDirection[1] = rodBody.LengthDirection[1] "Vector in length direction";
//   parameter Real rodBody.vis.LengthDirection[2] = rodBody.LengthDirection[2] "Vector in length direction";
//   parameter Real rodBody.vis.LengthDirection[3] = rodBody.LengthDirection[3] "Vector in length direction";
//   parameter Real rodBody.vis.WidthDirection[1] = rodBody.WidthDirection[1] "Vector in width direction";
//   parameter Real rodBody.vis.WidthDirection[2] = rodBody.WidthDirection[2] "Vector in width direction";
//   parameter Real rodBody.vis.WidthDirection[3] = rodBody.WidthDirection[3] "Vector in width direction";
//   parameter Real rodBody.vis.Length = rodBody.Length "Length of shape [m]";
//   parameter Real rodBody.vis.Width = rodBody.Width "Width of shape [m]";
//   parameter Real rodBody.vis.Height = rodBody.Height "Height of shape [m]";
//   parameter Real rodBody.vis.Material[1] = rodBody.Material[1] "Color and specular coefficient";
//   parameter Real rodBody.vis.Material[2] = rodBody.Material[2] "Color and specular coefficient";
//   parameter Real rodBody.vis.Material[3] = rodBody.Material[3] "Color and specular coefficient";
//   parameter Real rodBody.vis.Material[4] = rodBody.Material[4] "Color and specular coefficient";
//   parameter Real rodBody.vis.Extra = rodBody.Extra "Additional parameter for cone and pipe";
//   Real rodBody.vis.nLength[1];
//   Real rodBody.vis.nLength[2];
//   Real rodBody.vis.nLength[3];
//   Real rodBody.vis.nWidth[1];
//   Real rodBody.vis.nWidth[2];
//   Real rodBody.vis.nWidth[3];
//   Real rodBody.vis.nHeight[1];
//   Real rodBody.vis.nHeight[2];
//   Real rodBody.vis.nHeight[3];
//   parameter Real rodBody.vis.vis.r0[1] = rodBody.vis.r0[1] "Origin of visual object.";
//   parameter Real rodBody.vis.vis.r0[2] = rodBody.vis.r0[2] "Origin of visual object.";
//   parameter Real rodBody.vis.vis.r0[3] = rodBody.vis.r0[3] "Origin of visual object.";
//   parameter Real rodBody.vis.vis.Length = rodBody.vis.Length "Length of visual object.";
//   parameter Real rodBody.vis.vis.Width = rodBody.vis.Width "Width of visual object.";
//   parameter Real rodBody.vis.vis.Height = rodBody.vis.Height "Height of visual object.";
//   parameter Real rodBody.vis.vis.LengthDirection[1] = rodBody.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real rodBody.vis.vis.LengthDirection[2] = rodBody.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real rodBody.vis.vis.LengthDirection[3] = rodBody.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real rodBody.vis.vis.WidthDirection[1] = rodBody.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real rodBody.vis.vis.WidthDirection[2] = rodBody.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real rodBody.vis.vis.WidthDirection[3] = rodBody.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String rodBody.vis.vis.Shape = rodBody.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real rodBody.vis.vis.Material[1] = rodBody.vis.Material[1] "Color and specular coefficient.";
//   parameter Real rodBody.vis.vis.Material[2] = rodBody.vis.Material[2] "Color and specular coefficient.";
//   parameter Real rodBody.vis.vis.Material[3] = rodBody.vis.Material[3] "Color and specular coefficient.";
//   parameter Real rodBody.vis.vis.Material[4] = rodBody.vis.Material[4] "Color and specular coefficient.";
//   parameter Real rodBody.vis.vis.Extra = rodBody.vis.Extra "Additional size data for some of the shape types";
//   input Real rodBody.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.r[1] "Position of visual object.";
//   input Real rodBody.vis.vis.r[2] "Position of visual object.";
//   input Real rodBody.vis.vis.r[3] "Position of visual object.";
//   Real rodBody.vis.vis.nLength[1];
//   Real rodBody.vis.vis.nLength[2];
//   Real rodBody.vis.vis.nLength[3];
//   Real rodBody.vis.vis.nWidth[1];
//   Real rodBody.vis.vis.nWidth[2];
//   Real rodBody.vis.vis.nWidth[3];
//   Real rodBody.vis.vis.nHeight[1];
//   Real rodBody.vis.vis.nHeight[2];
//   Real rodBody.vis.vis.nHeight[3];
//   parameter String rodBody.vis.vis.mcShape.shapeType = rodBody.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real rodBody.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = rodBody.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real rodBody.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = rodBody.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real rodBody.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = rodBody.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real rodBody.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = rodBody.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = rodBody.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = rodBody.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.lengthDirection[1] = rodBody.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.lengthDirection[2] = rodBody.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.lengthDirection[3] = rodBody.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.widthDirection[1] = rodBody.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.widthDirection[2] = rodBody.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.widthDirection[3] = rodBody.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real rodBody.vis.vis.mcShape.length(quantity = "Length", unit = "m") = rodBody.vis.vis.Length "Length of visual object";
//   input Real rodBody.vis.vis.mcShape.width(quantity = "Length", unit = "m") = rodBody.vis.vis.Width "Width of visual object";
//   input Real rodBody.vis.vis.mcShape.height(quantity = "Length", unit = "m") = rodBody.vis.vis.Height "Height of visual object";
//   input Real rodBody.vis.vis.mcShape.extra = rodBody.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real rodBody.vis.vis.mcShape.color[1] = 255.0 * rodBody.vis.vis.Material[1] "Color of shape";
//   input Real rodBody.vis.vis.mcShape.color[2] = 255.0 * rodBody.vis.vis.Material[2] "Color of shape";
//   input Real rodBody.vis.vis.mcShape.color[3] = 255.0 * rodBody.vis.vis.Material[3] "Color of shape";
//   input Real rodBody.vis.vis.mcShape.specularCoefficient = rodBody.vis.vis.Material[4];
//   input Real rodBody.vis.vis.mcShape.S[1,1] = rodBody.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[1,2] = rodBody.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[1,3] = rodBody.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[2,1] = rodBody.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[2,2] = rodBody.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[2,3] = rodBody.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[3,1] = rodBody.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[3,2] = rodBody.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real rodBody.vis.vis.mcShape.S[3,3] = rodBody.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[1,1] = rodBody.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[1,2] = rodBody.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[1,3] = rodBody.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[2,1] = rodBody.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[2,2] = rodBody.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[2,3] = rodBody.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[3,1] = rodBody.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[3,2] = rodBody.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real rodBody.vis.vis.mcShape.Sshape[3,3] = rodBody.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real rodBody.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real rodBody.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real rodBody.vis.vis.mcShape.abs_n_x = sqrt(rodBody.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (rodBody.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + rodBody.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real rodBody.vis.vis.mcShape.e_x[1] = if noEvent(rodBody.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else rodBody.vis.vis.mcShape.lengthDirection[1] / rodBody.vis.vis.mcShape.abs_n_x;
//   Real rodBody.vis.vis.mcShape.e_x[2] = if noEvent(rodBody.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else rodBody.vis.vis.mcShape.lengthDirection[2] / rodBody.vis.vis.mcShape.abs_n_x;
//   Real rodBody.vis.vis.mcShape.e_x[3] = if noEvent(rodBody.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else rodBody.vis.vis.mcShape.lengthDirection[3] / rodBody.vis.vis.mcShape.abs_n_x;
//   Real rodBody.vis.vis.mcShape.n_z_aux[1] = rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.widthDirection[3] - rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.widthDirection[2];
//   Real rodBody.vis.vis.mcShape.n_z_aux[2] = rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.widthDirection[1] - rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.widthDirection[3];
//   Real rodBody.vis.vis.mcShape.n_z_aux[3] = rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.widthDirection[2] - rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.widthDirection[1];
//   Real rodBody.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]},if noEvent(rodBody.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (rodBody.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + rodBody.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {rodBody.vis.vis.mcShape.widthDirection[1],rodBody.vis.vis.mcShape.widthDirection[2],rodBody.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(rodBody.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]})[1];
//   Real rodBody.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]},if noEvent(rodBody.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (rodBody.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + rodBody.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {rodBody.vis.vis.mcShape.widthDirection[1],rodBody.vis.vis.mcShape.widthDirection[2],rodBody.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(rodBody.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]})[2];
//   Real rodBody.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]},if noEvent(rodBody.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (rodBody.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + rodBody.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {rodBody.vis.vis.mcShape.widthDirection[1],rodBody.vis.vis.mcShape.widthDirection[2],rodBody.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(rodBody.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{rodBody.vis.vis.mcShape.e_x[1],rodBody.vis.vis.mcShape.e_x[2],rodBody.vis.vis.mcShape.e_x[3]})[3];
//   Real rodBody.vis.vis.mcShape.e_z[1] = rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.e_y[3] - rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.e_y[2];
//   Real rodBody.vis.vis.mcShape.e_z[2] = rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.e_y[1] - rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.e_y[3];
//   Real rodBody.vis.vis.mcShape.e_z[3] = rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.e_y[2] - rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.e_y[1];
//   protected output Real rodBody.vis.vis.mcShape.Form;
//   protected output Real rodBody.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real rodBody.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real rodBody.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real rodBody.vis.vis.mcShape.Material;
//   protected output Real rodBody.vis.vis.mcShape.Extra;
//   constant Real rod.pi = 3.14159265358979;
//   constant Real rod.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real rod.frame_a.r0[1](quantity = "Length", unit = "m") = rod.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rod.frame_a.r0[2](quantity = "Length", unit = "m") = rod.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rod.frame_a.r0[3](quantity = "Length", unit = "m") = rod.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rod.frame_a.S[1,1] = rod.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[1,2] = rod.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[1,3] = rod.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[2,1] = rod.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[2,2] = rod.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[2,3] = rod.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[3,1] = rod.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[3,2] = rod.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.S[3,3] = rod.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_a.v[1](quantity = "Velocity", unit = "m/s") = rod.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_a.v[2](quantity = "Velocity", unit = "m/s") = rod.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_a.v[3](quantity = "Velocity", unit = "m/s") = rod.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = rod.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = rod.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = rod.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rod.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rod.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rod.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_a.f[1](quantity = "Force", unit = "N") = rod.fa[1];
//   Real rod.frame_a.f[2](quantity = "Force", unit = "N") = rod.fa[2];
//   Real rod.frame_a.f[3](quantity = "Force", unit = "N") = rod.fa[3];
//   Real rod.frame_a.t[1](quantity = "Torque", unit = "N.m") = rod.ta[1];
//   Real rod.frame_a.t[2](quantity = "Torque", unit = "N.m") = rod.ta[2];
//   Real rod.frame_a.t[3](quantity = "Torque", unit = "N.m") = rod.ta[3];
//   input Real rod.frame_b.r0[1](quantity = "Length", unit = "m") = rod.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rod.frame_b.r0[2](quantity = "Length", unit = "m") = rod.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real rod.frame_b.r0[3](quantity = "Length", unit = "m") = rod.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rod.frame_b.S[1,1] = rod.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[1,2] = rod.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[1,3] = rod.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[2,1] = rod.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[2,2] = rod.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[2,3] = rod.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[3,1] = rod.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[3,2] = rod.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.S[3,3] = rod.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_b.v[1](quantity = "Velocity", unit = "m/s") = rod.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_b.v[2](quantity = "Velocity", unit = "m/s") = rod.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_b.v[3](quantity = "Velocity", unit = "m/s") = rod.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = rod.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = rod.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = rod.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_b.f[1](quantity = "Force", unit = "N") = -rod.fb[1];
//   Real rod.frame_b.f[2](quantity = "Force", unit = "N") = -rod.fb[2];
//   Real rod.frame_b.f[3](quantity = "Force", unit = "N") = -rod.fb[3];
//   Real rod.frame_b.t[1](quantity = "Torque", unit = "N.m") = -rod.tb[1];
//   Real rod.frame_b.t[2](quantity = "Torque", unit = "N.m") = -rod.tb[2];
//   Real rod.frame_b.t[3](quantity = "Torque", unit = "N.m") = -rod.tb[3];
//   protected Real rod.Sa[1,1](start = 1.0);
//   protected Real rod.Sa[1,2](start = 0.0);
//   protected Real rod.Sa[1,3](start = 0.0);
//   protected Real rod.Sa[2,1](start = 0.0);
//   protected Real rod.Sa[2,2](start = 1.0);
//   protected Real rod.Sa[2,3](start = 0.0);
//   protected Real rod.Sa[3,1](start = 0.0);
//   protected Real rod.Sa[3,2](start = 0.0);
//   protected Real rod.Sa[3,3](start = 1.0);
//   protected Real rod.r0a[1](quantity = "Length", unit = "m", start = 1.0);
//   protected Real rod.r0a[2](quantity = "Length", unit = "m", start = 1.0);
//   protected Real rod.r0a[3](quantity = "Length", unit = "m", start = 1.0);
//   protected Real rod.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real rod.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real rod.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real rod.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.fa[1](quantity = "Force", unit = "N");
//   protected Real rod.fa[2](quantity = "Force", unit = "N");
//   protected Real rod.fa[3](quantity = "Force", unit = "N");
//   protected Real rod.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real rod.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real rod.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real rod.Sb[1,1](start = 1.0);
//   protected Real rod.Sb[1,2](start = 0.0);
//   protected Real rod.Sb[1,3](start = 0.0);
//   protected Real rod.Sb[2,1](start = 0.0);
//   protected Real rod.Sb[2,2](start = 1.0);
//   protected Real rod.Sb[2,3](start = 0.0);
//   protected Real rod.Sb[3,1](start = 0.0);
//   protected Real rod.Sb[3,2](start = 0.0);
//   protected Real rod.Sb[3,3](start = 1.0);
//   protected Real rod.r0b[1](quantity = "Length", unit = "m");
//   protected Real rod.r0b[2](quantity = "Length", unit = "m");
//   protected Real rod.r0b[3](quantity = "Length", unit = "m");
//   protected Real rod.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real rod.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real rod.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real rod.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real rod.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real rod.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real rod.fb[1](quantity = "Force", unit = "N");
//   protected Real rod.fb[2](quantity = "Force", unit = "N");
//   protected Real rod.fb[3](quantity = "Force", unit = "N");
//   protected Real rod.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real rod.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real rod.tb[3](quantity = "Torque", unit = "N.m");
//   Real rod.S_rel[1,1];
//   Real rod.S_rel[1,2];
//   Real rod.S_rel[1,3];
//   Real rod.S_rel[2,1];
//   Real rod.S_rel[2,2];
//   Real rod.S_rel[2,3];
//   Real rod.S_rel[3,1];
//   Real rod.S_rel[3,2];
//   Real rod.S_rel[3,3];
//   Real rod.r_rela[1](quantity = "Length", unit = "m", start = -0.2, fixed = false);
//   Real rod.r_rela[2](quantity = "Length", unit = "m", start = 0.0, fixed = false);
//   Real rod.r_rela[3](quantity = "Length", unit = "m", start = 0.0, fixed = false);
//   Real rod.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real rod.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real rod.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real rod.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real rod.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real rod.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real rod.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real rod.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real rod.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real rod.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real rod.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real rod.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real rod.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real rod.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real rod.vaux[3](quantity = "Velocity", unit = "m/s");
//   parameter Real rod.L(quantity = "Length", unit = "m") = L "Length of the rod";
//   parameter Real rod.na[1] = 0.0 "orthogonal to y-axis of cut-frame C";
//   parameter Real rod.na[2] = 0.0 "orthogonal to y-axis of cut-frame C";
//   parameter Real rod.na[3] = 1.0 "orthogonal to y-axis of cut-frame C";
//   Real rod.fRod(quantity = "Force", unit = "N") "Constraint force in direction of the rod";
//   output Real rod.frame_c.r0[1](quantity = "Length", unit = "m") = rod.r0c[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rod.frame_c.r0[2](quantity = "Length", unit = "m") = rod.r0c[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real rod.frame_c.r0[3](quantity = "Length", unit = "m") = rod.r0c[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real rod.frame_c.S[1,1] = rod.Sc[1,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[1,2] = rod.Sc[1,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[1,3] = rod.Sc[1,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[2,1] = rod.Sc[2,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[2,2] = rod.Sc[2,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[2,3] = rod.Sc[2,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[3,1] = rod.Sc[3,1] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[3,2] = rod.Sc[3,2] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.S[3,3] = rod.Sc[3,3] "Transformation matrix from frame_a to inertial system";
//   Real rod.frame_c.v[1](quantity = "Velocity", unit = "m/s") = rod.vc[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_c.v[2](quantity = "Velocity", unit = "m/s") = rod.vc[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_c.v[3](quantity = "Velocity", unit = "m/s") = rod.vc[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real rod.frame_c.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wc[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_c.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wc[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_c.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = rod.wc[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real rod.frame_c.a[1](quantity = "Acceleration", unit = "m/s2") = rod.ac[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_c.a[2](quantity = "Acceleration", unit = "m/s2") = rod.ac[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_c.a[3](quantity = "Acceleration", unit = "m/s2") = rod.ac[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real rod.frame_c.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zc[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_c.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zc[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_c.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = rod.zc[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real rod.frame_c.f[1](quantity = "Force", unit = "N") = -rod.fc[1];
//   Real rod.frame_c.f[2](quantity = "Force", unit = "N") = -rod.fc[2];
//   Real rod.frame_c.f[3](quantity = "Force", unit = "N") = -rod.fc[3];
//   Real rod.frame_c.t[1](quantity = "Torque", unit = "N.m") = -rod.tc[1];
//   Real rod.frame_c.t[2](quantity = "Torque", unit = "N.m") = -rod.tc[2];
//   Real rod.frame_c.t[3](quantity = "Torque", unit = "N.m") = -rod.tc[3];
//   protected Real rod.Sc[1,1];
//   protected Real rod.Sc[1,2];
//   protected Real rod.Sc[1,3];
//   protected Real rod.Sc[2,1];
//   protected Real rod.Sc[2,2];
//   protected Real rod.Sc[2,3];
//   protected Real rod.Sc[3,1];
//   protected Real rod.Sc[3,2];
//   protected Real rod.Sc[3,3];
//   protected Real rod.r0c[1];
//   protected Real rod.r0c[2];
//   protected Real rod.r0c[3];
//   protected Real rod.vc[1];
//   protected Real rod.vc[2];
//   protected Real rod.vc[3];
//   protected Real rod.wc[1];
//   protected Real rod.wc[2];
//   protected Real rod.wc[3];
//   protected Real rod.ac[1];
//   protected Real rod.ac[2];
//   protected Real rod.ac[3];
//   protected Real rod.zc[1];
//   protected Real rod.zc[2];
//   protected Real rod.zc[3];
//   protected Real rod.fc[1];
//   protected Real rod.fc[2];
//   protected Real rod.fc[3];
//   protected Real rod.tc[1];
//   protected Real rod.tc[2];
//   protected Real rod.tc[3];
//   protected Real rod.fb_a[1] "cut-force fb resolved in cut a";
//   protected Real rod.fb_a[2] "cut-force fb resolved in cut a";
//   protected Real rod.fb_a[3] "cut-force fb resolved in cut a";
//   protected Real rod.b1[1];
//   protected Real rod.b1[2];
//   protected Real rod.b1[3];
//   protected Real rod.bd[1];
//   protected Real rod.bd[2];
//   protected Real rod.bd[3];
//   protected Real rod.bdd[1];
//   protected Real rod.bdd[2];
//   protected Real rod.bdd[3];
//   protected Real rod.normb;
//   protected Real rod.bb;
//   protected Real rod.nx[1];
//   protected Real rod.nx[2];
//   protected Real rod.nx[3];
//   protected Real rod.ny[1];
//   protected Real rod.ny[2];
//   protected Real rod.ny[3];
//   protected Real rod.nz[1];
//   protected Real rod.nz[2];
//   protected Real rod.nz[3];
//   protected Real rod.S_relc[1,1];
//   protected Real rod.S_relc[1,2];
//   protected Real rod.S_relc[1,3];
//   protected Real rod.S_relc[2,1];
//   protected Real rod.S_relc[2,2];
//   protected Real rod.S_relc[2,3];
//   protected Real rod.S_relc[3,1];
//   protected Real rod.S_relc[3,2];
//   protected Real rod.S_relc[3,3];
//   protected Real rod.nxd[1];
//   protected Real rod.nxd[2];
//   protected Real rod.nxd[3];
//   protected Real rod.nyd[1];
//   protected Real rod.nyd[2];
//   protected Real rod.nyd[3];
//   protected Real rod.nzd[1];
//   protected Real rod.nzd[2];
//   protected Real rod.nzd[3];
//   protected Real rod.w_relc[1];
//   protected Real rod.w_relc[2];
//   protected Real rod.w_relc[3];
//   protected Real rod.nxdd[1];
//   protected Real rod.nxdd[2];
//   protected Real rod.nxdd[3];
//   protected Real rod.nydd[1];
//   protected Real rod.nydd[2];
//   protected Real rod.nydd[3];
//   protected Real rod.nzdd[1];
//   protected Real rod.nzdd[2];
//   protected Real rod.nzdd[3];
//   protected Real rod.z_relc[1];
//   protected Real rod.z_relc[2];
//   protected Real rod.z_relc[3];
//   protected Real rod.constraintResidue;
//   protected Real rod.constraintResidue_d;
//   protected Real rod.constraintResidue_dd;
// equation
//   inertial.gravity[1] = inertial.g * inertial.ng[1];
//   inertial.gravity[2] = inertial.g * inertial.ng[2];
//   inertial.gravity[3] = inertial.g * inertial.ng[3];
//   inertial.frame_b.S[1,1] = 1.0;
//   inertial.frame_b.S[1,2] = 0.0;
//   inertial.frame_b.S[1,3] = 0.0;
//   inertial.frame_b.S[2,1] = 0.0;
//   inertial.frame_b.S[2,2] = 1.0;
//   inertial.frame_b.S[2,3] = 0.0;
//   inertial.frame_b.S[3,1] = 0.0;
//   inertial.frame_b.S[3,2] = 0.0;
//   inertial.frame_b.S[3,3] = 1.0;
//   inertial.frame_b.r0[1] = 0.0;
//   inertial.frame_b.r0[2] = 0.0;
//   inertial.frame_b.r0[3] = 0.0;
//   inertial.frame_b.v[1] = 0.0;
//   inertial.frame_b.v[2] = 0.0;
//   inertial.frame_b.v[3] = 0.0;
//   inertial.frame_b.w[1] = 0.0;
//   inertial.frame_b.w[2] = 0.0;
//   inertial.frame_b.w[3] = 0.0;
//   inertial.frame_b.a[1] = -inertial.gravity[1];
//   inertial.frame_b.a[2] = -inertial.gravity[2];
//   inertial.frame_b.a[3] = -inertial.gravity[3];
//   inertial.frame_b.z[1] = 0.0;
//   inertial.frame_b.z[2] = 0.0;
//   inertial.frame_b.z[3] = 0.0;
//   r1.axis.phi = r1.q;
//   r1.bearing.phi = 0.0;
//   r1.qd = der(r1.q);
//   r1.qdd = der(r1.qd);
//   r1.nn[1] = r1.n[1] / sqrt(r1.n[1] ^ 2.0 + (r1.n[2] ^ 2.0 + r1.n[3] ^ 2.0));
//   r1.nn[2] = r1.n[2] / sqrt(r1.n[1] ^ 2.0 + (r1.n[2] ^ 2.0 + r1.n[3] ^ 2.0));
//   r1.nn[3] = r1.n[3] / sqrt(r1.n[1] ^ 2.0 + (r1.n[2] ^ 2.0 + r1.n[3] ^ 2.0));
//   r1.qq = r1.q - 0.0174532925199433 * r1.q0;
//   r1.sinq = sin(r1.qq);
//   r1.cosq = cos(r1.qq);
//   r1.S_rel[1,1] = r1.nn[1] ^ 2.0 + r1.cosq * (1.0 - r1.nn[1] ^ 2.0);
//   r1.S_rel[1,2] = r1.nn[1] * r1.nn[2] + r1.cosq * ((-r1.nn[1]) * r1.nn[2]) - (-r1.sinq) * r1.nn[3];
//   r1.S_rel[1,3] = r1.nn[1] * r1.nn[3] + r1.cosq * ((-r1.nn[1]) * r1.nn[3]) - r1.sinq * r1.nn[2];
//   r1.S_rel[2,1] = r1.nn[2] * r1.nn[1] + r1.cosq * ((-r1.nn[2]) * r1.nn[1]) - r1.sinq * r1.nn[3];
//   r1.S_rel[2,2] = r1.nn[2] ^ 2.0 + r1.cosq * (1.0 - r1.nn[2] ^ 2.0);
//   r1.S_rel[2,3] = r1.nn[2] * r1.nn[3] + r1.cosq * ((-r1.nn[2]) * r1.nn[3]) - (-r1.sinq) * r1.nn[1];
//   r1.S_rel[3,1] = r1.nn[3] * r1.nn[1] + r1.cosq * ((-r1.nn[3]) * r1.nn[1]) - (-r1.sinq) * r1.nn[2];
//   r1.S_rel[3,2] = r1.nn[3] * r1.nn[2] + r1.cosq * ((-r1.nn[3]) * r1.nn[2]) - r1.sinq * r1.nn[1];
//   r1.S_rel[3,3] = r1.nn[3] ^ 2.0 + r1.cosq * (1.0 - r1.nn[3] ^ 2.0);
//   r1.r_rela[1] = 0.0;
//   r1.r_rela[2] = 0.0;
//   r1.r_rela[3] = 0.0;
//   r1.v_rela[1] = 0.0;
//   r1.v_rela[2] = 0.0;
//   r1.v_rela[3] = 0.0;
//   r1.a_rela[1] = 0.0;
//   r1.a_rela[2] = 0.0;
//   r1.a_rela[3] = 0.0;
//   r1.w_rela[1] = r1.qd * r1.nn[1];
//   r1.w_rela[2] = r1.qd * r1.nn[2];
//   r1.w_rela[3] = r1.qd * r1.nn[3];
//   r1.z_rela[1] = r1.qdd * r1.nn[1];
//   r1.z_rela[2] = r1.qdd * r1.nn[2];
//   r1.z_rela[3] = r1.qdd * r1.nn[3];
//   r1.Sb[1,1] = r1.Sa[1,1] * r1.S_rel[1,1] + (r1.Sa[1,2] * r1.S_rel[1,2] + r1.Sa[1,3] * r1.S_rel[1,3]);
//   r1.Sb[1,2] = r1.Sa[1,1] * r1.S_rel[2,1] + (r1.Sa[1,2] * r1.S_rel[2,2] + r1.Sa[1,3] * r1.S_rel[2,3]);
//   r1.Sb[1,3] = r1.Sa[1,1] * r1.S_rel[3,1] + (r1.Sa[1,2] * r1.S_rel[3,2] + r1.Sa[1,3] * r1.S_rel[3,3]);
//   r1.Sb[2,1] = r1.Sa[2,1] * r1.S_rel[1,1] + (r1.Sa[2,2] * r1.S_rel[1,2] + r1.Sa[2,3] * r1.S_rel[1,3]);
//   r1.Sb[2,2] = r1.Sa[2,1] * r1.S_rel[2,1] + (r1.Sa[2,2] * r1.S_rel[2,2] + r1.Sa[2,3] * r1.S_rel[2,3]);
//   r1.Sb[2,3] = r1.Sa[2,1] * r1.S_rel[3,1] + (r1.Sa[2,2] * r1.S_rel[3,2] + r1.Sa[2,3] * r1.S_rel[3,3]);
//   r1.Sb[3,1] = r1.Sa[3,1] * r1.S_rel[1,1] + (r1.Sa[3,2] * r1.S_rel[1,2] + r1.Sa[3,3] * r1.S_rel[1,3]);
//   r1.Sb[3,2] = r1.Sa[3,1] * r1.S_rel[2,1] + (r1.Sa[3,2] * r1.S_rel[2,2] + r1.Sa[3,3] * r1.S_rel[2,3]);
//   r1.Sb[3,3] = r1.Sa[3,1] * r1.S_rel[3,1] + (r1.Sa[3,2] * r1.S_rel[3,2] + r1.Sa[3,3] * r1.S_rel[3,3]);
//   r1.r0b[1] = r1.r0a[1];
//   r1.r0b[2] = r1.r0a[2];
//   r1.r0b[3] = r1.r0a[3];
//   r1.vb[1] = r1.S_rel[1,1] * r1.va[1] + (r1.S_rel[1,2] * r1.va[2] + r1.S_rel[1,3] * r1.va[3]);
//   r1.vb[2] = r1.S_rel[2,1] * r1.va[1] + (r1.S_rel[2,2] * r1.va[2] + r1.S_rel[2,3] * r1.va[3]);
//   r1.vb[3] = r1.S_rel[3,1] * r1.va[1] + (r1.S_rel[3,2] * r1.va[2] + r1.S_rel[3,3] * r1.va[3]);
//   r1.wb[1] = r1.S_rel[1,1] * (r1.wa[1] + r1.w_rela[1]) + (r1.S_rel[1,2] * (r1.wa[2] + r1.w_rela[2]) + r1.S_rel[1,3] * (r1.wa[3] + r1.w_rela[3]));
//   r1.wb[2] = r1.S_rel[2,1] * (r1.wa[1] + r1.w_rela[1]) + (r1.S_rel[2,2] * (r1.wa[2] + r1.w_rela[2]) + r1.S_rel[2,3] * (r1.wa[3] + r1.w_rela[3]));
//   r1.wb[3] = r1.S_rel[3,1] * (r1.wa[1] + r1.w_rela[1]) + (r1.S_rel[3,2] * (r1.wa[2] + r1.w_rela[2]) + r1.S_rel[3,3] * (r1.wa[3] + r1.w_rela[3]));
//   r1.ab[1] = r1.S_rel[1,1] * r1.aa[1] + (r1.S_rel[1,2] * r1.aa[2] + r1.S_rel[1,3] * r1.aa[3]);
//   r1.ab[2] = r1.S_rel[2,1] * r1.aa[1] + (r1.S_rel[2,2] * r1.aa[2] + r1.S_rel[2,3] * r1.aa[3]);
//   r1.ab[3] = r1.S_rel[3,1] * r1.aa[1] + (r1.S_rel[3,2] * r1.aa[2] + r1.S_rel[3,3] * r1.aa[3]);
//   r1.zb[1] = r1.S_rel[1,1] * (r1.za[1] + (r1.z_rela[1] + (r1.wa[2] * r1.w_rela[3] + (-r1.wa[3] * r1.w_rela[2])))) + (r1.S_rel[1,2] * (r1.za[2] + (r1.z_rela[2] + (r1.wa[3] * r1.w_rela[1] + (-r1.wa[1] * r1.w_rela[3])))) + r1.S_rel[1,3] * (r1.za[3] + (r1.z_rela[3] + (r1.wa[1] * r1.w_rela[2] + (-r1.wa[2] * r1.w_rela[1])))));
//   r1.zb[2] = r1.S_rel[2,1] * (r1.za[1] + (r1.z_rela[1] + (r1.wa[2] * r1.w_rela[3] + (-r1.wa[3] * r1.w_rela[2])))) + (r1.S_rel[2,2] * (r1.za[2] + (r1.z_rela[2] + (r1.wa[3] * r1.w_rela[1] + (-r1.wa[1] * r1.w_rela[3])))) + r1.S_rel[2,3] * (r1.za[3] + (r1.z_rela[3] + (r1.wa[1] * r1.w_rela[2] + (-r1.wa[2] * r1.w_rela[1])))));
//   r1.zb[3] = r1.S_rel[3,1] * (r1.za[1] + (r1.z_rela[1] + (r1.wa[2] * r1.w_rela[3] + (-r1.wa[3] * r1.w_rela[2])))) + (r1.S_rel[3,2] * (r1.za[2] + (r1.z_rela[2] + (r1.wa[3] * r1.w_rela[1] + (-r1.wa[1] * r1.w_rela[3])))) + r1.S_rel[3,3] * (r1.za[3] + (r1.z_rela[3] + (r1.wa[1] * r1.w_rela[2] + (-r1.wa[2] * r1.w_rela[1])))));
//   r1.fa[1] = r1.S_rel[1,1] * r1.fb[1] + (r1.S_rel[2,1] * r1.fb[2] + r1.S_rel[3,1] * r1.fb[3]);
//   r1.fa[2] = r1.S_rel[1,2] * r1.fb[1] + (r1.S_rel[2,2] * r1.fb[2] + r1.S_rel[3,2] * r1.fb[3]);
//   r1.fa[3] = r1.S_rel[1,3] * r1.fb[1] + (r1.S_rel[2,3] * r1.fb[2] + r1.S_rel[3,3] * r1.fb[3]);
//   r1.ta[1] = r1.S_rel[1,1] * r1.tb[1] + (r1.S_rel[2,1] * r1.tb[2] + r1.S_rel[3,1] * r1.tb[3]);
//   r1.ta[2] = r1.S_rel[1,2] * r1.tb[1] + (r1.S_rel[2,2] * r1.tb[2] + r1.S_rel[3,2] * r1.tb[3]);
//   r1.ta[3] = r1.S_rel[1,3] * r1.tb[1] + (r1.S_rel[2,3] * r1.tb[2] + r1.S_rel[3,3] * r1.tb[3]);
//   r1.axis.tau = r1.nn[1] * r1.tb[1] + (r1.nn[2] * r1.tb[2] + r1.nn[3] * r1.tb[3]);
//   cyl.axis.s = cyl.q;
//   cyl.bearing.s = 0.0;
//   cyl.qd = der(cyl.q);
//   cyl.qdd = der(cyl.qd);
//   cyl.nn[1] = cyl.n[1] / sqrt(cyl.n[1] ^ 2.0 + (cyl.n[2] ^ 2.0 + cyl.n[3] ^ 2.0));
//   cyl.nn[2] = cyl.n[2] / sqrt(cyl.n[1] ^ 2.0 + (cyl.n[2] ^ 2.0 + cyl.n[3] ^ 2.0));
//   cyl.nn[3] = cyl.n[3] / sqrt(cyl.n[1] ^ 2.0 + (cyl.n[2] ^ 2.0 + cyl.n[3] ^ 2.0));
//   cyl.S_rel[1,1] = 1.0;
//   cyl.S_rel[1,2] = 0.0;
//   cyl.S_rel[1,3] = 0.0;
//   cyl.S_rel[2,1] = 0.0;
//   cyl.S_rel[2,2] = 1.0;
//   cyl.S_rel[2,3] = 0.0;
//   cyl.S_rel[3,1] = 0.0;
//   cyl.S_rel[3,2] = 0.0;
//   cyl.S_rel[3,3] = 1.0;
//   cyl.qq = cyl.q - cyl.q0;
//   cyl.r_rela[1] = cyl.qq * cyl.nn[1];
//   cyl.r_rela[2] = cyl.qq * cyl.nn[2];
//   cyl.r_rela[3] = cyl.qq * cyl.nn[3];
//   cyl.v_rela[1] = cyl.qd * cyl.nn[1];
//   cyl.v_rela[2] = cyl.qd * cyl.nn[2];
//   cyl.v_rela[3] = cyl.qd * cyl.nn[3];
//   cyl.a_rela[1] = cyl.qdd * cyl.nn[1];
//   cyl.a_rela[2] = cyl.qdd * cyl.nn[2];
//   cyl.a_rela[3] = cyl.qdd * cyl.nn[3];
//   cyl.w_rela[1] = 0.0;
//   cyl.w_rela[2] = 0.0;
//   cyl.w_rela[3] = 0.0;
//   cyl.z_rela[1] = 0.0;
//   cyl.z_rela[2] = 0.0;
//   cyl.z_rela[3] = 0.0;
//   cyl.Sb[1,1] = cyl.Sa[1,1];
//   cyl.Sb[1,2] = cyl.Sa[1,2];
//   cyl.Sb[1,3] = cyl.Sa[1,3];
//   cyl.Sb[2,1] = cyl.Sa[2,1];
//   cyl.Sb[2,2] = cyl.Sa[2,2];
//   cyl.Sb[2,3] = cyl.Sa[2,3];
//   cyl.Sb[3,1] = cyl.Sa[3,1];
//   cyl.Sb[3,2] = cyl.Sa[3,2];
//   cyl.Sb[3,3] = cyl.Sa[3,3];
//   cyl.r0b[1] = cyl.r0a[1] + (cyl.Sa[1,1] * cyl.r_rela[1] + (cyl.Sa[1,2] * cyl.r_rela[2] + cyl.Sa[1,3] * cyl.r_rela[3]));
//   cyl.r0b[2] = cyl.r0a[2] + (cyl.Sa[2,1] * cyl.r_rela[1] + (cyl.Sa[2,2] * cyl.r_rela[2] + cyl.Sa[2,3] * cyl.r_rela[3]));
//   cyl.r0b[3] = cyl.r0a[3] + (cyl.Sa[3,1] * cyl.r_rela[1] + (cyl.Sa[3,2] * cyl.r_rela[2] + cyl.Sa[3,3] * cyl.r_rela[3]));
//   cyl.vaux[1] = cyl.wa[2] * cyl.r_rela[3] - cyl.wa[3] * cyl.r_rela[2];
//   cyl.vaux[2] = cyl.wa[3] * cyl.r_rela[1] - cyl.wa[1] * cyl.r_rela[3];
//   cyl.vaux[3] = cyl.wa[1] * cyl.r_rela[2] - cyl.wa[2] * cyl.r_rela[1];
//   cyl.vb[1] = cyl.va[1] + (cyl.v_rela[1] + cyl.vaux[1]);
//   cyl.vb[2] = cyl.va[2] + (cyl.v_rela[2] + cyl.vaux[2]);
//   cyl.vb[3] = cyl.va[3] + (cyl.v_rela[3] + cyl.vaux[3]);
//   cyl.wb[1] = cyl.wa[1];
//   cyl.wb[2] = cyl.wa[2];
//   cyl.wb[3] = cyl.wa[3];
//   cyl.ab[1] = cyl.aa[1] + (cyl.a_rela[1] + (cyl.za[2] * cyl.r_rela[3] + ((-cyl.za[3] * cyl.r_rela[2]) + (cyl.wa[2] * (cyl.vaux[3] + 2.0 * cyl.v_rela[3]) + (-cyl.wa[3] * (cyl.vaux[2] + 2.0 * cyl.v_rela[2]))))));
//   cyl.ab[2] = cyl.aa[2] + (cyl.a_rela[2] + (cyl.za[3] * cyl.r_rela[1] + ((-cyl.za[1] * cyl.r_rela[3]) + (cyl.wa[3] * (cyl.vaux[1] + 2.0 * cyl.v_rela[1]) + (-cyl.wa[1] * (cyl.vaux[3] + 2.0 * cyl.v_rela[3]))))));
//   cyl.ab[3] = cyl.aa[3] + (cyl.a_rela[3] + (cyl.za[1] * cyl.r_rela[2] + ((-cyl.za[2] * cyl.r_rela[1]) + (cyl.wa[1] * (cyl.vaux[2] + 2.0 * cyl.v_rela[2]) + (-cyl.wa[2] * (cyl.vaux[1] + 2.0 * cyl.v_rela[1]))))));
//   cyl.zb[1] = cyl.za[1];
//   cyl.zb[2] = cyl.za[2];
//   cyl.zb[3] = cyl.za[3];
//   cyl.fa[1] = cyl.fb[1];
//   cyl.fa[2] = cyl.fb[2];
//   cyl.fa[3] = cyl.fb[3];
//   cyl.ta[1] = cyl.tb[1] + (cyl.r_rela[2] * cyl.fa[3] + (-cyl.r_rela[3] * cyl.fa[2]));
//   cyl.ta[2] = cyl.tb[2] + (cyl.r_rela[3] * cyl.fa[1] + (-cyl.r_rela[1] * cyl.fa[3]));
//   cyl.ta[3] = cyl.tb[3] + (cyl.r_rela[1] * cyl.fa[2] + (-cyl.r_rela[2] * cyl.fa[1]));
//   cyl.axis.f = cyl.nn[1] * cyl.fb[1] + (cyl.nn[2] * cyl.fb[2] + cyl.nn[3] * cyl.fb[3]);
//   trans.Sb[1,1] = trans.Sa[1,1];
//   trans.Sb[1,2] = trans.Sa[1,2];
//   trans.Sb[1,3] = trans.Sa[1,3];
//   trans.Sb[2,1] = trans.Sa[2,1];
//   trans.Sb[2,2] = trans.Sa[2,2];
//   trans.Sb[2,3] = trans.Sa[2,3];
//   trans.Sb[3,1] = trans.Sa[3,1];
//   trans.Sb[3,2] = trans.Sa[3,2];
//   trans.Sb[3,3] = trans.Sa[3,3];
//   trans.wb[1] = trans.wa[1];
//   trans.wb[2] = trans.wa[2];
//   trans.wb[3] = trans.wa[3];
//   trans.zb[1] = trans.za[1];
//   trans.zb[2] = trans.za[2];
//   trans.zb[3] = trans.za[3];
//   trans.r0b[1] = trans.r0a[1] + (trans.Sa[1,1] * trans.r[1] + (trans.Sa[1,2] * trans.r[2] + trans.Sa[1,3] * trans.r[3]));
//   trans.r0b[2] = trans.r0a[2] + (trans.Sa[2,1] * trans.r[1] + (trans.Sa[2,2] * trans.r[2] + trans.Sa[2,3] * trans.r[3]));
//   trans.r0b[3] = trans.r0a[3] + (trans.Sa[3,1] * trans.r[1] + (trans.Sa[3,2] * trans.r[2] + trans.Sa[3,3] * trans.r[3]));
//   trans.vaux[1] = trans.wa[2] * trans.r[3] - trans.wa[3] * trans.r[2];
//   trans.vaux[2] = trans.wa[3] * trans.r[1] - trans.wa[1] * trans.r[3];
//   trans.vaux[3] = trans.wa[1] * trans.r[2] - trans.wa[2] * trans.r[1];
//   trans.vb[1] = trans.va[1] + trans.vaux[1];
//   trans.vb[2] = trans.va[2] + trans.vaux[2];
//   trans.vb[3] = trans.va[3] + trans.vaux[3];
//   trans.ab[1] = trans.aa[1] + (trans.za[2] * trans.r[3] + ((-trans.za[3] * trans.r[2]) + (trans.wa[2] * trans.vaux[3] + (-trans.wa[3] * trans.vaux[2]))));
//   trans.ab[2] = trans.aa[2] + (trans.za[3] * trans.r[1] + ((-trans.za[1] * trans.r[3]) + (trans.wa[3] * trans.vaux[1] + (-trans.wa[1] * trans.vaux[3]))));
//   trans.ab[3] = trans.aa[3] + (trans.za[1] * trans.r[2] + ((-trans.za[2] * trans.r[1]) + (trans.wa[1] * trans.vaux[2] + (-trans.wa[2] * trans.vaux[1]))));
//   trans.fa[1] = trans.fb[1];
//   trans.fa[2] = trans.fb[2];
//   trans.fa[3] = trans.fb[3];
//   trans.ta[1] = trans.tb[1] + (trans.r[2] * trans.fa[3] + (-trans.r[3] * trans.fa[2]));
//   trans.ta[2] = trans.tb[2] + (trans.r[3] * trans.fa[1] + (-trans.r[1] * trans.fa[3]));
//   trans.ta[3] = trans.tb[3] + (trans.r[1] * trans.fa[2] + (-trans.r[2] * trans.fa[1]));
//   piston.body.frameTranslation.Sb[1,1] = piston.body.frameTranslation.Sa[1,1];
//   piston.body.frameTranslation.Sb[1,2] = piston.body.frameTranslation.Sa[1,2];
//   piston.body.frameTranslation.Sb[1,3] = piston.body.frameTranslation.Sa[1,3];
//   piston.body.frameTranslation.Sb[2,1] = piston.body.frameTranslation.Sa[2,1];
//   piston.body.frameTranslation.Sb[2,2] = piston.body.frameTranslation.Sa[2,2];
//   piston.body.frameTranslation.Sb[2,3] = piston.body.frameTranslation.Sa[2,3];
//   piston.body.frameTranslation.Sb[3,1] = piston.body.frameTranslation.Sa[3,1];
//   piston.body.frameTranslation.Sb[3,2] = piston.body.frameTranslation.Sa[3,2];
//   piston.body.frameTranslation.Sb[3,3] = piston.body.frameTranslation.Sa[3,3];
//   piston.body.frameTranslation.wb[1] = piston.body.frameTranslation.wa[1];
//   piston.body.frameTranslation.wb[2] = piston.body.frameTranslation.wa[2];
//   piston.body.frameTranslation.wb[3] = piston.body.frameTranslation.wa[3];
//   piston.body.frameTranslation.zb[1] = piston.body.frameTranslation.za[1];
//   piston.body.frameTranslation.zb[2] = piston.body.frameTranslation.za[2];
//   piston.body.frameTranslation.zb[3] = piston.body.frameTranslation.za[3];
//   piston.body.frameTranslation.r0b[1] = piston.body.frameTranslation.r0a[1] + (piston.body.frameTranslation.Sa[1,1] * piston.body.frameTranslation.r[1] + (piston.body.frameTranslation.Sa[1,2] * piston.body.frameTranslation.r[2] + piston.body.frameTranslation.Sa[1,3] * piston.body.frameTranslation.r[3]));
//   piston.body.frameTranslation.r0b[2] = piston.body.frameTranslation.r0a[2] + (piston.body.frameTranslation.Sa[2,1] * piston.body.frameTranslation.r[1] + (piston.body.frameTranslation.Sa[2,2] * piston.body.frameTranslation.r[2] + piston.body.frameTranslation.Sa[2,3] * piston.body.frameTranslation.r[3]));
//   piston.body.frameTranslation.r0b[3] = piston.body.frameTranslation.r0a[3] + (piston.body.frameTranslation.Sa[3,1] * piston.body.frameTranslation.r[1] + (piston.body.frameTranslation.Sa[3,2] * piston.body.frameTranslation.r[2] + piston.body.frameTranslation.Sa[3,3] * piston.body.frameTranslation.r[3]));
//   piston.body.frameTranslation.vaux[1] = piston.body.frameTranslation.wa[2] * piston.body.frameTranslation.r[3] - piston.body.frameTranslation.wa[3] * piston.body.frameTranslation.r[2];
//   piston.body.frameTranslation.vaux[2] = piston.body.frameTranslation.wa[3] * piston.body.frameTranslation.r[1] - piston.body.frameTranslation.wa[1] * piston.body.frameTranslation.r[3];
//   piston.body.frameTranslation.vaux[3] = piston.body.frameTranslation.wa[1] * piston.body.frameTranslation.r[2] - piston.body.frameTranslation.wa[2] * piston.body.frameTranslation.r[1];
//   piston.body.frameTranslation.vb[1] = piston.body.frameTranslation.va[1] + piston.body.frameTranslation.vaux[1];
//   piston.body.frameTranslation.vb[2] = piston.body.frameTranslation.va[2] + piston.body.frameTranslation.vaux[2];
//   piston.body.frameTranslation.vb[3] = piston.body.frameTranslation.va[3] + piston.body.frameTranslation.vaux[3];
//   piston.body.frameTranslation.ab[1] = piston.body.frameTranslation.aa[1] + (piston.body.frameTranslation.za[2] * piston.body.frameTranslation.r[3] + ((-piston.body.frameTranslation.za[3] * piston.body.frameTranslation.r[2]) + (piston.body.frameTranslation.wa[2] * piston.body.frameTranslation.vaux[3] + (-piston.body.frameTranslation.wa[3] * piston.body.frameTranslation.vaux[2]))));
//   piston.body.frameTranslation.ab[2] = piston.body.frameTranslation.aa[2] + (piston.body.frameTranslation.za[3] * piston.body.frameTranslation.r[1] + ((-piston.body.frameTranslation.za[1] * piston.body.frameTranslation.r[3]) + (piston.body.frameTranslation.wa[3] * piston.body.frameTranslation.vaux[1] + (-piston.body.frameTranslation.wa[1] * piston.body.frameTranslation.vaux[3]))));
//   piston.body.frameTranslation.ab[3] = piston.body.frameTranslation.aa[3] + (piston.body.frameTranslation.za[1] * piston.body.frameTranslation.r[2] + ((-piston.body.frameTranslation.za[2] * piston.body.frameTranslation.r[1]) + (piston.body.frameTranslation.wa[1] * piston.body.frameTranslation.vaux[2] + (-piston.body.frameTranslation.wa[2] * piston.body.frameTranslation.vaux[1]))));
//   piston.body.frameTranslation.fa[1] = piston.body.frameTranslation.fb[1];
//   piston.body.frameTranslation.fa[2] = piston.body.frameTranslation.fb[2];
//   piston.body.frameTranslation.fa[3] = piston.body.frameTranslation.fb[3];
//   piston.body.frameTranslation.ta[1] = piston.body.frameTranslation.tb[1] + (piston.body.frameTranslation.r[2] * piston.body.frameTranslation.fa[3] + (-piston.body.frameTranslation.r[3] * piston.body.frameTranslation.fa[2]));
//   piston.body.frameTranslation.ta[2] = piston.body.frameTranslation.tb[2] + (piston.body.frameTranslation.r[3] * piston.body.frameTranslation.fa[1] + (-piston.body.frameTranslation.r[1] * piston.body.frameTranslation.fa[3]));
//   piston.body.frameTranslation.ta[3] = piston.body.frameTranslation.tb[3] + (piston.body.frameTranslation.r[1] * piston.body.frameTranslation.fa[2] + (-piston.body.frameTranslation.r[2] * piston.body.frameTranslation.fa[1]));
//   piston.body.body.fa[1] = piston.body.body.m * (piston.body.body.aa[1] + (piston.body.body.za[2] * piston.body.body.rCM[3] + ((-piston.body.body.za[3] * piston.body.body.rCM[2]) + (piston.body.body.wa[2] * (piston.body.body.wa[1] * piston.body.body.rCM[2] - piston.body.body.wa[2] * piston.body.body.rCM[1]) + (-piston.body.body.wa[3] * (piston.body.body.wa[3] * piston.body.body.rCM[1] - piston.body.body.wa[1] * piston.body.body.rCM[3]))))));
//   piston.body.body.fa[2] = piston.body.body.m * (piston.body.body.aa[2] + (piston.body.body.za[3] * piston.body.body.rCM[1] + ((-piston.body.body.za[1] * piston.body.body.rCM[3]) + (piston.body.body.wa[3] * (piston.body.body.wa[2] * piston.body.body.rCM[3] - piston.body.body.wa[3] * piston.body.body.rCM[2]) + (-piston.body.body.wa[1] * (piston.body.body.wa[1] * piston.body.body.rCM[2] - piston.body.body.wa[2] * piston.body.body.rCM[1]))))));
//   piston.body.body.fa[3] = piston.body.body.m * (piston.body.body.aa[3] + (piston.body.body.za[1] * piston.body.body.rCM[2] + ((-piston.body.body.za[2] * piston.body.body.rCM[1]) + (piston.body.body.wa[1] * (piston.body.body.wa[3] * piston.body.body.rCM[1] - piston.body.body.wa[1] * piston.body.body.rCM[3]) + (-piston.body.body.wa[2] * (piston.body.body.wa[2] * piston.body.body.rCM[3] - piston.body.body.wa[3] * piston.body.body.rCM[2]))))));
//   piston.body.body.ta[1] = piston.body.body.I[1,1] * piston.body.body.za[1] + (piston.body.body.I[1,2] * piston.body.body.za[2] + (piston.body.body.I[1,3] * piston.body.body.za[3] + (piston.body.body.wa[2] * (piston.body.body.I[3,1] * piston.body.body.wa[1] + (piston.body.body.I[3,2] * piston.body.body.wa[2] + piston.body.body.I[3,3] * piston.body.body.wa[3])) + ((-piston.body.body.wa[3] * (piston.body.body.I[2,1] * piston.body.body.wa[1] + (piston.body.body.I[2,2] * piston.body.body.wa[2] + piston.body.body.I[2,3] * piston.body.body.wa[3]))) + (piston.body.body.rCM[2] * piston.body.body.fa[3] + (-piston.body.body.rCM[3] * piston.body.body.fa[2]))))));
//   piston.body.body.ta[2] = piston.body.body.I[2,1] * piston.body.body.za[1] + (piston.body.body.I[2,2] * piston.body.body.za[2] + (piston.body.body.I[2,3] * piston.body.body.za[3] + (piston.body.body.wa[3] * (piston.body.body.I[1,1] * piston.body.body.wa[1] + (piston.body.body.I[1,2] * piston.body.body.wa[2] + piston.body.body.I[1,3] * piston.body.body.wa[3])) + ((-piston.body.body.wa[1] * (piston.body.body.I[3,1] * piston.body.body.wa[1] + (piston.body.body.I[3,2] * piston.body.body.wa[2] + piston.body.body.I[3,3] * piston.body.body.wa[3]))) + (piston.body.body.rCM[3] * piston.body.body.fa[1] + (-piston.body.body.rCM[1] * piston.body.body.fa[3]))))));
//   piston.body.body.ta[3] = piston.body.body.I[3,1] * piston.body.body.za[1] + (piston.body.body.I[3,2] * piston.body.body.za[2] + (piston.body.body.I[3,3] * piston.body.body.za[3] + (piston.body.body.wa[1] * (piston.body.body.I[2,1] * piston.body.body.wa[1] + (piston.body.body.I[2,2] * piston.body.body.wa[2] + piston.body.body.I[2,3] * piston.body.body.wa[3])) + ((-piston.body.body.wa[2] * (piston.body.body.I[1,1] * piston.body.body.wa[1] + (piston.body.body.I[1,2] * piston.body.body.wa[2] + piston.body.body.I[1,3] * piston.body.body.wa[3]))) + (piston.body.body.rCM[1] * piston.body.body.fa[2] + (-piston.body.body.rCM[2] * piston.body.body.fa[1]))))));
//   piston.body.body.m = piston.body.m;
//   piston.body.body.rCM[1] = piston.body.rCM[1];
//   piston.body.body.rCM[2] = piston.body.rCM[2];
//   piston.body.body.rCM[3] = piston.body.rCM[3];
//   piston.body.body.I[1,1] = piston.body.I11;
//   piston.body.body.I[1,2] = piston.body.I21;
//   piston.body.body.I[1,3] = piston.body.I31;
//   piston.body.body.I[2,1] = piston.body.I21;
//   piston.body.body.I[2,2] = piston.body.I22;
//   piston.body.body.I[2,3] = piston.body.I32;
//   piston.body.body.I[3,1] = piston.body.I31;
//   piston.body.body.I[3,2] = piston.body.I32;
//   piston.body.body.I[3,3] = piston.body.I33;
//   piston.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(piston.vis.vis.mcShape.shapeType);
//   piston.vis.vis.mcShape.Material = PackMaterial(piston.vis.vis.mcShape.color[1] / 255.0,piston.vis.vis.mcShape.color[2] / 255.0,piston.vis.vis.mcShape.color[3] / 255.0,piston.vis.vis.mcShape.specularCoefficient);
//   piston.vis.vis.mcShape.Extra = piston.vis.vis.mcShape.extra;
//   piston.vis.vis.mcShape.size[1] = piston.vis.vis.mcShape.length;
//   piston.vis.vis.mcShape.size[2] = piston.vis.vis.mcShape.width;
//   piston.vis.vis.mcShape.size[3] = piston.vis.vis.mcShape.height;
//   piston.vis.vis.mcShape.Sshape[1,1] = piston.vis.vis.mcShape.e_x[1];
//   piston.vis.vis.mcShape.Sshape[1,2] = piston.vis.vis.mcShape.e_y[1];
//   piston.vis.vis.mcShape.Sshape[1,3] = piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.e_y[3] - piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.e_y[2];
//   piston.vis.vis.mcShape.Sshape[2,1] = piston.vis.vis.mcShape.e_x[2];
//   piston.vis.vis.mcShape.Sshape[2,2] = piston.vis.vis.mcShape.e_y[2];
//   piston.vis.vis.mcShape.Sshape[2,3] = piston.vis.vis.mcShape.e_x[3] * piston.vis.vis.mcShape.e_y[1] - piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.e_y[3];
//   piston.vis.vis.mcShape.Sshape[3,1] = piston.vis.vis.mcShape.e_x[3];
//   piston.vis.vis.mcShape.Sshape[3,2] = piston.vis.vis.mcShape.e_y[3];
//   piston.vis.vis.mcShape.Sshape[3,3] = piston.vis.vis.mcShape.e_x[1] * piston.vis.vis.mcShape.e_y[2] - piston.vis.vis.mcShape.e_x[2] * piston.vis.vis.mcShape.e_y[1];
//   piston.vis.vis.mcShape.rxvisobj[1] = piston.vis.vis.mcShape.S[1,1] * piston.vis.vis.mcShape.e_x[1] + (piston.vis.vis.mcShape.S[1,2] * piston.vis.vis.mcShape.e_x[2] + piston.vis.vis.mcShape.S[1,3] * piston.vis.vis.mcShape.e_x[3]);
//   piston.vis.vis.mcShape.rxvisobj[2] = piston.vis.vis.mcShape.S[2,1] * piston.vis.vis.mcShape.e_x[1] + (piston.vis.vis.mcShape.S[2,2] * piston.vis.vis.mcShape.e_x[2] + piston.vis.vis.mcShape.S[2,3] * piston.vis.vis.mcShape.e_x[3]);
//   piston.vis.vis.mcShape.rxvisobj[3] = piston.vis.vis.mcShape.S[3,1] * piston.vis.vis.mcShape.e_x[1] + (piston.vis.vis.mcShape.S[3,2] * piston.vis.vis.mcShape.e_x[2] + piston.vis.vis.mcShape.S[3,3] * piston.vis.vis.mcShape.e_x[3]);
//   piston.vis.vis.mcShape.ryvisobj[1] = piston.vis.vis.mcShape.S[1,1] * piston.vis.vis.mcShape.e_y[1] + (piston.vis.vis.mcShape.S[1,2] * piston.vis.vis.mcShape.e_y[2] + piston.vis.vis.mcShape.S[1,3] * piston.vis.vis.mcShape.e_y[3]);
//   piston.vis.vis.mcShape.ryvisobj[2] = piston.vis.vis.mcShape.S[2,1] * piston.vis.vis.mcShape.e_y[1] + (piston.vis.vis.mcShape.S[2,2] * piston.vis.vis.mcShape.e_y[2] + piston.vis.vis.mcShape.S[2,3] * piston.vis.vis.mcShape.e_y[3]);
//   piston.vis.vis.mcShape.ryvisobj[3] = piston.vis.vis.mcShape.S[3,1] * piston.vis.vis.mcShape.e_y[1] + (piston.vis.vis.mcShape.S[3,2] * piston.vis.vis.mcShape.e_y[2] + piston.vis.vis.mcShape.S[3,3] * piston.vis.vis.mcShape.e_y[3]);
//   piston.vis.vis.mcShape.rvisobj[1] = piston.vis.vis.mcShape.r[1] + (piston.vis.vis.mcShape.S[1,1] * piston.vis.vis.mcShape.r_shape[1] + (piston.vis.vis.mcShape.S[1,2] * piston.vis.vis.mcShape.r_shape[2] + piston.vis.vis.mcShape.S[1,3] * piston.vis.vis.mcShape.r_shape[3]));
//   piston.vis.vis.mcShape.rvisobj[2] = piston.vis.vis.mcShape.r[2] + (piston.vis.vis.mcShape.S[2,1] * piston.vis.vis.mcShape.r_shape[1] + (piston.vis.vis.mcShape.S[2,2] * piston.vis.vis.mcShape.r_shape[2] + piston.vis.vis.mcShape.S[2,3] * piston.vis.vis.mcShape.r_shape[3]));
//   piston.vis.vis.mcShape.rvisobj[3] = piston.vis.vis.mcShape.r[3] + (piston.vis.vis.mcShape.S[3,1] * piston.vis.vis.mcShape.r_shape[1] + (piston.vis.vis.mcShape.S[3,2] * piston.vis.vis.mcShape.r_shape[2] + piston.vis.vis.mcShape.S[3,3] * piston.vis.vis.mcShape.r_shape[3]));
//   piston.vis.vis.mcShape.e_x[1] = piston.vis.vis.nLength[1];
//   piston.vis.vis.mcShape.e_x[2] = piston.vis.vis.nLength[2];
//   piston.vis.vis.mcShape.e_x[3] = piston.vis.vis.nLength[3];
//   piston.vis.vis.mcShape.e_y[1] = piston.vis.vis.nWidth[1];
//   piston.vis.vis.mcShape.e_y[2] = piston.vis.vis.nWidth[2];
//   piston.vis.vis.mcShape.e_y[3] = piston.vis.vis.nWidth[3];
//   piston.vis.vis.mcShape.e_z[1] = piston.vis.vis.nHeight[1];
//   piston.vis.vis.mcShape.e_z[2] = piston.vis.vis.nHeight[2];
//   piston.vis.vis.mcShape.e_z[3] = piston.vis.vis.nHeight[3];
//   piston.vis.vis.S[1,1] = piston.vis.Sa[1,1];
//   piston.vis.vis.S[1,2] = piston.vis.Sa[1,2];
//   piston.vis.vis.S[1,3] = piston.vis.Sa[1,3];
//   piston.vis.vis.S[2,1] = piston.vis.Sa[2,1];
//   piston.vis.vis.S[2,2] = piston.vis.Sa[2,2];
//   piston.vis.vis.S[2,3] = piston.vis.Sa[2,3];
//   piston.vis.vis.S[3,1] = piston.vis.Sa[3,1];
//   piston.vis.vis.S[3,2] = piston.vis.Sa[3,2];
//   piston.vis.vis.S[3,3] = piston.vis.Sa[3,3];
//   piston.vis.vis.r[1] = piston.vis.r0a[1];
//   piston.vis.vis.r[2] = piston.vis.r0a[2];
//   piston.vis.vis.r[3] = piston.vis.r0a[3];
//   piston.vis.vis.nLength[1] = piston.vis.nLength[1];
//   piston.vis.vis.nLength[2] = piston.vis.nLength[2];
//   piston.vis.vis.nLength[3] = piston.vis.nLength[3];
//   piston.vis.vis.nWidth[1] = piston.vis.nWidth[1];
//   piston.vis.vis.nWidth[2] = piston.vis.nWidth[2];
//   piston.vis.vis.nWidth[3] = piston.vis.nWidth[3];
//   piston.vis.vis.nHeight[1] = piston.vis.nHeight[1];
//   piston.vis.vis.nHeight[2] = piston.vis.nHeight[2];
//   piston.vis.vis.nHeight[3] = piston.vis.nHeight[3];
//   piston.vis.fa[1] = 0.0;
//   piston.vis.fa[2] = 0.0;
//   piston.vis.fa[3] = 0.0;
//   piston.vis.ta[1] = 0.0;
//   piston.vis.ta[2] = 0.0;
//   piston.vis.ta[3] = 0.0;
//   crank.body.frameTranslation.Sb[1,1] = crank.body.frameTranslation.Sa[1,1];
//   crank.body.frameTranslation.Sb[1,2] = crank.body.frameTranslation.Sa[1,2];
//   crank.body.frameTranslation.Sb[1,3] = crank.body.frameTranslation.Sa[1,3];
//   crank.body.frameTranslation.Sb[2,1] = crank.body.frameTranslation.Sa[2,1];
//   crank.body.frameTranslation.Sb[2,2] = crank.body.frameTranslation.Sa[2,2];
//   crank.body.frameTranslation.Sb[2,3] = crank.body.frameTranslation.Sa[2,3];
//   crank.body.frameTranslation.Sb[3,1] = crank.body.frameTranslation.Sa[3,1];
//   crank.body.frameTranslation.Sb[3,2] = crank.body.frameTranslation.Sa[3,2];
//   crank.body.frameTranslation.Sb[3,3] = crank.body.frameTranslation.Sa[3,3];
//   crank.body.frameTranslation.wb[1] = crank.body.frameTranslation.wa[1];
//   crank.body.frameTranslation.wb[2] = crank.body.frameTranslation.wa[2];
//   crank.body.frameTranslation.wb[3] = crank.body.frameTranslation.wa[3];
//   crank.body.frameTranslation.zb[1] = crank.body.frameTranslation.za[1];
//   crank.body.frameTranslation.zb[2] = crank.body.frameTranslation.za[2];
//   crank.body.frameTranslation.zb[3] = crank.body.frameTranslation.za[3];
//   crank.body.frameTranslation.r0b[1] = crank.body.frameTranslation.r0a[1] + (crank.body.frameTranslation.Sa[1,1] * crank.body.frameTranslation.r[1] + (crank.body.frameTranslation.Sa[1,2] * crank.body.frameTranslation.r[2] + crank.body.frameTranslation.Sa[1,3] * crank.body.frameTranslation.r[3]));
//   crank.body.frameTranslation.r0b[2] = crank.body.frameTranslation.r0a[2] + (crank.body.frameTranslation.Sa[2,1] * crank.body.frameTranslation.r[1] + (crank.body.frameTranslation.Sa[2,2] * crank.body.frameTranslation.r[2] + crank.body.frameTranslation.Sa[2,3] * crank.body.frameTranslation.r[3]));
//   crank.body.frameTranslation.r0b[3] = crank.body.frameTranslation.r0a[3] + (crank.body.frameTranslation.Sa[3,1] * crank.body.frameTranslation.r[1] + (crank.body.frameTranslation.Sa[3,2] * crank.body.frameTranslation.r[2] + crank.body.frameTranslation.Sa[3,3] * crank.body.frameTranslation.r[3]));
//   crank.body.frameTranslation.vaux[1] = crank.body.frameTranslation.wa[2] * crank.body.frameTranslation.r[3] - crank.body.frameTranslation.wa[3] * crank.body.frameTranslation.r[2];
//   crank.body.frameTranslation.vaux[2] = crank.body.frameTranslation.wa[3] * crank.body.frameTranslation.r[1] - crank.body.frameTranslation.wa[1] * crank.body.frameTranslation.r[3];
//   crank.body.frameTranslation.vaux[3] = crank.body.frameTranslation.wa[1] * crank.body.frameTranslation.r[2] - crank.body.frameTranslation.wa[2] * crank.body.frameTranslation.r[1];
//   crank.body.frameTranslation.vb[1] = crank.body.frameTranslation.va[1] + crank.body.frameTranslation.vaux[1];
//   crank.body.frameTranslation.vb[2] = crank.body.frameTranslation.va[2] + crank.body.frameTranslation.vaux[2];
//   crank.body.frameTranslation.vb[3] = crank.body.frameTranslation.va[3] + crank.body.frameTranslation.vaux[3];
//   crank.body.frameTranslation.ab[1] = crank.body.frameTranslation.aa[1] + (crank.body.frameTranslation.za[2] * crank.body.frameTranslation.r[3] + ((-crank.body.frameTranslation.za[3] * crank.body.frameTranslation.r[2]) + (crank.body.frameTranslation.wa[2] * crank.body.frameTranslation.vaux[3] + (-crank.body.frameTranslation.wa[3] * crank.body.frameTranslation.vaux[2]))));
//   crank.body.frameTranslation.ab[2] = crank.body.frameTranslation.aa[2] + (crank.body.frameTranslation.za[3] * crank.body.frameTranslation.r[1] + ((-crank.body.frameTranslation.za[1] * crank.body.frameTranslation.r[3]) + (crank.body.frameTranslation.wa[3] * crank.body.frameTranslation.vaux[1] + (-crank.body.frameTranslation.wa[1] * crank.body.frameTranslation.vaux[3]))));
//   crank.body.frameTranslation.ab[3] = crank.body.frameTranslation.aa[3] + (crank.body.frameTranslation.za[1] * crank.body.frameTranslation.r[2] + ((-crank.body.frameTranslation.za[2] * crank.body.frameTranslation.r[1]) + (crank.body.frameTranslation.wa[1] * crank.body.frameTranslation.vaux[2] + (-crank.body.frameTranslation.wa[2] * crank.body.frameTranslation.vaux[1]))));
//   crank.body.frameTranslation.fa[1] = crank.body.frameTranslation.fb[1];
//   crank.body.frameTranslation.fa[2] = crank.body.frameTranslation.fb[2];
//   crank.body.frameTranslation.fa[3] = crank.body.frameTranslation.fb[3];
//   crank.body.frameTranslation.ta[1] = crank.body.frameTranslation.tb[1] + (crank.body.frameTranslation.r[2] * crank.body.frameTranslation.fa[3] + (-crank.body.frameTranslation.r[3] * crank.body.frameTranslation.fa[2]));
//   crank.body.frameTranslation.ta[2] = crank.body.frameTranslation.tb[2] + (crank.body.frameTranslation.r[3] * crank.body.frameTranslation.fa[1] + (-crank.body.frameTranslation.r[1] * crank.body.frameTranslation.fa[3]));
//   crank.body.frameTranslation.ta[3] = crank.body.frameTranslation.tb[3] + (crank.body.frameTranslation.r[1] * crank.body.frameTranslation.fa[2] + (-crank.body.frameTranslation.r[2] * crank.body.frameTranslation.fa[1]));
//   crank.body.body.fa[1] = crank.body.body.m * (crank.body.body.aa[1] + (crank.body.body.za[2] * crank.body.body.rCM[3] + ((-crank.body.body.za[3] * crank.body.body.rCM[2]) + (crank.body.body.wa[2] * (crank.body.body.wa[1] * crank.body.body.rCM[2] - crank.body.body.wa[2] * crank.body.body.rCM[1]) + (-crank.body.body.wa[3] * (crank.body.body.wa[3] * crank.body.body.rCM[1] - crank.body.body.wa[1] * crank.body.body.rCM[3]))))));
//   crank.body.body.fa[2] = crank.body.body.m * (crank.body.body.aa[2] + (crank.body.body.za[3] * crank.body.body.rCM[1] + ((-crank.body.body.za[1] * crank.body.body.rCM[3]) + (crank.body.body.wa[3] * (crank.body.body.wa[2] * crank.body.body.rCM[3] - crank.body.body.wa[3] * crank.body.body.rCM[2]) + (-crank.body.body.wa[1] * (crank.body.body.wa[1] * crank.body.body.rCM[2] - crank.body.body.wa[2] * crank.body.body.rCM[1]))))));
//   crank.body.body.fa[3] = crank.body.body.m * (crank.body.body.aa[3] + (crank.body.body.za[1] * crank.body.body.rCM[2] + ((-crank.body.body.za[2] * crank.body.body.rCM[1]) + (crank.body.body.wa[1] * (crank.body.body.wa[3] * crank.body.body.rCM[1] - crank.body.body.wa[1] * crank.body.body.rCM[3]) + (-crank.body.body.wa[2] * (crank.body.body.wa[2] * crank.body.body.rCM[3] - crank.body.body.wa[3] * crank.body.body.rCM[2]))))));
//   crank.body.body.ta[1] = crank.body.body.I[1,1] * crank.body.body.za[1] + (crank.body.body.I[1,2] * crank.body.body.za[2] + (crank.body.body.I[1,3] * crank.body.body.za[3] + (crank.body.body.wa[2] * (crank.body.body.I[3,1] * crank.body.body.wa[1] + (crank.body.body.I[3,2] * crank.body.body.wa[2] + crank.body.body.I[3,3] * crank.body.body.wa[3])) + ((-crank.body.body.wa[3] * (crank.body.body.I[2,1] * crank.body.body.wa[1] + (crank.body.body.I[2,2] * crank.body.body.wa[2] + crank.body.body.I[2,3] * crank.body.body.wa[3]))) + (crank.body.body.rCM[2] * crank.body.body.fa[3] + (-crank.body.body.rCM[3] * crank.body.body.fa[2]))))));
//   crank.body.body.ta[2] = crank.body.body.I[2,1] * crank.body.body.za[1] + (crank.body.body.I[2,2] * crank.body.body.za[2] + (crank.body.body.I[2,3] * crank.body.body.za[3] + (crank.body.body.wa[3] * (crank.body.body.I[1,1] * crank.body.body.wa[1] + (crank.body.body.I[1,2] * crank.body.body.wa[2] + crank.body.body.I[1,3] * crank.body.body.wa[3])) + ((-crank.body.body.wa[1] * (crank.body.body.I[3,1] * crank.body.body.wa[1] + (crank.body.body.I[3,2] * crank.body.body.wa[2] + crank.body.body.I[3,3] * crank.body.body.wa[3]))) + (crank.body.body.rCM[3] * crank.body.body.fa[1] + (-crank.body.body.rCM[1] * crank.body.body.fa[3]))))));
//   crank.body.body.ta[3] = crank.body.body.I[3,1] * crank.body.body.za[1] + (crank.body.body.I[3,2] * crank.body.body.za[2] + (crank.body.body.I[3,3] * crank.body.body.za[3] + (crank.body.body.wa[1] * (crank.body.body.I[2,1] * crank.body.body.wa[1] + (crank.body.body.I[2,2] * crank.body.body.wa[2] + crank.body.body.I[2,3] * crank.body.body.wa[3])) + ((-crank.body.body.wa[2] * (crank.body.body.I[1,1] * crank.body.body.wa[1] + (crank.body.body.I[1,2] * crank.body.body.wa[2] + crank.body.body.I[1,3] * crank.body.body.wa[3]))) + (crank.body.body.rCM[1] * crank.body.body.fa[2] + (-crank.body.body.rCM[2] * crank.body.body.fa[1]))))));
//   crank.body.body.m = crank.body.m;
//   crank.body.body.rCM[1] = crank.body.rCM[1];
//   crank.body.body.rCM[2] = crank.body.rCM[2];
//   crank.body.body.rCM[3] = crank.body.rCM[3];
//   crank.body.body.I[1,1] = crank.body.I11;
//   crank.body.body.I[1,2] = crank.body.I21;
//   crank.body.body.I[1,3] = crank.body.I31;
//   crank.body.body.I[2,1] = crank.body.I21;
//   crank.body.body.I[2,2] = crank.body.I22;
//   crank.body.body.I[2,3] = crank.body.I32;
//   crank.body.body.I[3,1] = crank.body.I31;
//   crank.body.body.I[3,2] = crank.body.I32;
//   crank.body.body.I[3,3] = crank.body.I33;
//   crank.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(crank.vis.vis.mcShape.shapeType);
//   crank.vis.vis.mcShape.Material = PackMaterial(crank.vis.vis.mcShape.color[1] / 255.0,crank.vis.vis.mcShape.color[2] / 255.0,crank.vis.vis.mcShape.color[3] / 255.0,crank.vis.vis.mcShape.specularCoefficient);
//   crank.vis.vis.mcShape.Extra = crank.vis.vis.mcShape.extra;
//   crank.vis.vis.mcShape.size[1] = crank.vis.vis.mcShape.length;
//   crank.vis.vis.mcShape.size[2] = crank.vis.vis.mcShape.width;
//   crank.vis.vis.mcShape.size[3] = crank.vis.vis.mcShape.height;
//   crank.vis.vis.mcShape.Sshape[1,1] = crank.vis.vis.mcShape.e_x[1];
//   crank.vis.vis.mcShape.Sshape[1,2] = crank.vis.vis.mcShape.e_y[1];
//   crank.vis.vis.mcShape.Sshape[1,3] = crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.e_y[3] - crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.e_y[2];
//   crank.vis.vis.mcShape.Sshape[2,1] = crank.vis.vis.mcShape.e_x[2];
//   crank.vis.vis.mcShape.Sshape[2,2] = crank.vis.vis.mcShape.e_y[2];
//   crank.vis.vis.mcShape.Sshape[2,3] = crank.vis.vis.mcShape.e_x[3] * crank.vis.vis.mcShape.e_y[1] - crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.e_y[3];
//   crank.vis.vis.mcShape.Sshape[3,1] = crank.vis.vis.mcShape.e_x[3];
//   crank.vis.vis.mcShape.Sshape[3,2] = crank.vis.vis.mcShape.e_y[3];
//   crank.vis.vis.mcShape.Sshape[3,3] = crank.vis.vis.mcShape.e_x[1] * crank.vis.vis.mcShape.e_y[2] - crank.vis.vis.mcShape.e_x[2] * crank.vis.vis.mcShape.e_y[1];
//   crank.vis.vis.mcShape.rxvisobj[1] = crank.vis.vis.mcShape.S[1,1] * crank.vis.vis.mcShape.e_x[1] + (crank.vis.vis.mcShape.S[1,2] * crank.vis.vis.mcShape.e_x[2] + crank.vis.vis.mcShape.S[1,3] * crank.vis.vis.mcShape.e_x[3]);
//   crank.vis.vis.mcShape.rxvisobj[2] = crank.vis.vis.mcShape.S[2,1] * crank.vis.vis.mcShape.e_x[1] + (crank.vis.vis.mcShape.S[2,2] * crank.vis.vis.mcShape.e_x[2] + crank.vis.vis.mcShape.S[2,3] * crank.vis.vis.mcShape.e_x[3]);
//   crank.vis.vis.mcShape.rxvisobj[3] = crank.vis.vis.mcShape.S[3,1] * crank.vis.vis.mcShape.e_x[1] + (crank.vis.vis.mcShape.S[3,2] * crank.vis.vis.mcShape.e_x[2] + crank.vis.vis.mcShape.S[3,3] * crank.vis.vis.mcShape.e_x[3]);
//   crank.vis.vis.mcShape.ryvisobj[1] = crank.vis.vis.mcShape.S[1,1] * crank.vis.vis.mcShape.e_y[1] + (crank.vis.vis.mcShape.S[1,2] * crank.vis.vis.mcShape.e_y[2] + crank.vis.vis.mcShape.S[1,3] * crank.vis.vis.mcShape.e_y[3]);
//   crank.vis.vis.mcShape.ryvisobj[2] = crank.vis.vis.mcShape.S[2,1] * crank.vis.vis.mcShape.e_y[1] + (crank.vis.vis.mcShape.S[2,2] * crank.vis.vis.mcShape.e_y[2] + crank.vis.vis.mcShape.S[2,3] * crank.vis.vis.mcShape.e_y[3]);
//   crank.vis.vis.mcShape.ryvisobj[3] = crank.vis.vis.mcShape.S[3,1] * crank.vis.vis.mcShape.e_y[1] + (crank.vis.vis.mcShape.S[3,2] * crank.vis.vis.mcShape.e_y[2] + crank.vis.vis.mcShape.S[3,3] * crank.vis.vis.mcShape.e_y[3]);
//   crank.vis.vis.mcShape.rvisobj[1] = crank.vis.vis.mcShape.r[1] + (crank.vis.vis.mcShape.S[1,1] * crank.vis.vis.mcShape.r_shape[1] + (crank.vis.vis.mcShape.S[1,2] * crank.vis.vis.mcShape.r_shape[2] + crank.vis.vis.mcShape.S[1,3] * crank.vis.vis.mcShape.r_shape[3]));
//   crank.vis.vis.mcShape.rvisobj[2] = crank.vis.vis.mcShape.r[2] + (crank.vis.vis.mcShape.S[2,1] * crank.vis.vis.mcShape.r_shape[1] + (crank.vis.vis.mcShape.S[2,2] * crank.vis.vis.mcShape.r_shape[2] + crank.vis.vis.mcShape.S[2,3] * crank.vis.vis.mcShape.r_shape[3]));
//   crank.vis.vis.mcShape.rvisobj[3] = crank.vis.vis.mcShape.r[3] + (crank.vis.vis.mcShape.S[3,1] * crank.vis.vis.mcShape.r_shape[1] + (crank.vis.vis.mcShape.S[3,2] * crank.vis.vis.mcShape.r_shape[2] + crank.vis.vis.mcShape.S[3,3] * crank.vis.vis.mcShape.r_shape[3]));
//   crank.vis.vis.mcShape.e_x[1] = crank.vis.vis.nLength[1];
//   crank.vis.vis.mcShape.e_x[2] = crank.vis.vis.nLength[2];
//   crank.vis.vis.mcShape.e_x[3] = crank.vis.vis.nLength[3];
//   crank.vis.vis.mcShape.e_y[1] = crank.vis.vis.nWidth[1];
//   crank.vis.vis.mcShape.e_y[2] = crank.vis.vis.nWidth[2];
//   crank.vis.vis.mcShape.e_y[3] = crank.vis.vis.nWidth[3];
//   crank.vis.vis.mcShape.e_z[1] = crank.vis.vis.nHeight[1];
//   crank.vis.vis.mcShape.e_z[2] = crank.vis.vis.nHeight[2];
//   crank.vis.vis.mcShape.e_z[3] = crank.vis.vis.nHeight[3];
//   crank.vis.vis.S[1,1] = crank.vis.Sa[1,1];
//   crank.vis.vis.S[1,2] = crank.vis.Sa[1,2];
//   crank.vis.vis.S[1,3] = crank.vis.Sa[1,3];
//   crank.vis.vis.S[2,1] = crank.vis.Sa[2,1];
//   crank.vis.vis.S[2,2] = crank.vis.Sa[2,2];
//   crank.vis.vis.S[2,3] = crank.vis.Sa[2,3];
//   crank.vis.vis.S[3,1] = crank.vis.Sa[3,1];
//   crank.vis.vis.S[3,2] = crank.vis.Sa[3,2];
//   crank.vis.vis.S[3,3] = crank.vis.Sa[3,3];
//   crank.vis.vis.r[1] = crank.vis.r0a[1];
//   crank.vis.vis.r[2] = crank.vis.r0a[2];
//   crank.vis.vis.r[3] = crank.vis.r0a[3];
//   crank.vis.vis.nLength[1] = crank.vis.nLength[1];
//   crank.vis.vis.nLength[2] = crank.vis.nLength[2];
//   crank.vis.vis.nLength[3] = crank.vis.nLength[3];
//   crank.vis.vis.nWidth[1] = crank.vis.nWidth[1];
//   crank.vis.vis.nWidth[2] = crank.vis.nWidth[2];
//   crank.vis.vis.nWidth[3] = crank.vis.nWidth[3];
//   crank.vis.vis.nHeight[1] = crank.vis.nHeight[1];
//   crank.vis.vis.nHeight[2] = crank.vis.nHeight[2];
//   crank.vis.vis.nHeight[3] = crank.vis.nHeight[3];
//   crank.vis.fa[1] = 0.0;
//   crank.vis.fa[2] = 0.0;
//   crank.vis.fa[3] = 0.0;
//   crank.vis.ta[1] = 0.0;
//   crank.vis.ta[2] = 0.0;
//   crank.vis.ta[3] = 0.0;
//   gasForce.x = 1.0 - gasForce.s_rel / gasForce.L;
//   gasForce.v_rel = der(gasForce.s_rel);
//   gasForce.press = if gasForce.v_rel < 0.0 then if gasForce.x < 0.987 then 2.4 + (177.4132 * gasForce.x ^ 4.0 + (-287.2189 * gasForce.x ^ 3.0 + (151.8252 * gasForce.x ^ 2.0 + (-24.9973 * gasForce.x)))) else 2129670.0 + (2836360.0 * gasForce.x ^ 4.0 + (-10569296.0 * gasForce.x ^ 3.0 + (14761814.0 * gasForce.x ^ 2.0 + (-9158505.0 * gasForce.x)))) else if gasForce.x > 0.93 then -3929704.0 * gasForce.x ^ 4.0 + (14748765.0 * gasForce.x ^ 3.0 + (-20747000.0 * gasForce.x ^ 2.0 + 12964477.0 * gasForce.x)) - 3036495.0 else 2.4 + (145.93 * gasForce.x ^ 4.0 + (-131.707 * gasForce.x ^ 3.0 + (17.3438 * gasForce.x ^ 2.0 + 17.9272 * gasForce.x)));
//   gasForce.f = -78539.8163397448 * (gasForce.press * gasForce.d ^ 2.0);
//   gasForce.V = gasForce.k0 + gasForce.k1 * (1.0 - gasForce.x);
//   gasForce.dens = 1.0 / gasForce.V;
//   gasForce.press * gasForce.V = gasForce.k * gasForce.T;
//   gasForce.s_rel = gasForce.flange_b.s - gasForce.flange_a.s;
//   gasForce.flange_b.f = gasForce.f;
//   gasForce.flange_a.f = -gasForce.f;
//   flyWheel.w = der(flyWheel.phi);
//   flyWheel.a = der(flyWheel.w);
//   flyWheel.J * flyWheel.a = flyWheel.flange_a.tau + flyWheel.flange_b.tau;
//   flyWheel.flange_a.phi = flyWheel.phi;
//   flyWheel.flange_b.phi = flyWheel.phi;
//   torque.tau0 = Modelica.Math.tempInterpol1(0.0,{{torque.tau_pos[1,1],torque.tau_pos[1,2]}},2);
//   torque.tau0_max = torque.peak * torque.tau0;
//   torque.free = false;
//   torque.phi = torque.phi_a;
//   torque.phi = torque.phi_b;
//   torque.w = der(torque.phi);
//   torque.a = der(torque.w);
//   torque.w_relfric = torque.w;
//   torque.a_relfric = torque.a;
//   0.0 = torque.flange_a.tau + torque.flange_b.tau - torque.tau;
//   torque.tau = if torque.locked then torque.sa * torque.unitTorque else if torque.startForward then Modelica.Math.tempInterpol1(torque.w,{{torque.tau_pos[1,1],torque.tau_pos[1,2]}},2) else if torque.startBackward then -Modelica.Math.tempInterpol1(-torque.w,{{torque.tau_pos[1,1],torque.tau_pos[1,2]}},2) else if pre(torque.mode) == 1 then Modelica.Math.tempInterpol1(torque.w,{{torque.tau_pos[1,1],torque.tau_pos[1,2]}},2) else -Modelica.Math.tempInterpol1(-torque.w,{{torque.tau_pos[1,1],torque.tau_pos[1,2]}},2);
//   torque.phi_b = torque.flange_b.phi - torque.bearing.phi;
//   torque.phi_a = torque.flange_a.phi - torque.bearing.phi;
//   0.0 = torque.flange_a.tau + (torque.flange_b.tau + torque.tau_support);
//   torque.bearing.phi = 0.0;
//   torque.startForward = pre(torque.mode) == 0 AND (torque.sa > torque.tau0_max OR pre(torque.startForward) AND torque.sa > torque.tau0) OR pre(torque.mode) == -1 AND torque.w_relfric > torque.w_small OR initial() AND torque.w_relfric > 0.0;
//   torque.startBackward = pre(torque.mode) == 0 AND (torque.sa < -torque.tau0_max OR pre(torque.startBackward) AND torque.sa < -torque.tau0) OR pre(torque.mode) == 1 AND torque.w_relfric < -torque.w_small OR initial() AND torque.w_relfric < 0.0;
//   torque.locked =  NOT torque.free AND  NOT (pre(torque.mode) == 1 OR torque.startForward OR pre(torque.mode) == -1 OR torque.startBackward);
//   torque.a_relfric = torque.unitAngularAcceleration * (if torque.locked then 0.0 else if torque.free then torque.sa else if torque.startForward then torque.sa - torque.tau0_max / torque.unitTorque else if torque.startBackward then torque.sa + torque.tau0_max / torque.unitTorque else if pre(torque.mode) == 1 then torque.sa - torque.tau0 / torque.unitTorque else torque.sa + torque.tau0 / torque.unitTorque);
//   torque.mode = if torque.free then 2 else if (pre(torque.mode) == 1 OR pre(torque.mode) == 2 OR torque.startForward) AND torque.w_relfric > 0.0 then 1 else if (pre(torque.mode) == -1 OR pre(torque.mode) == 2 OR torque.startBackward) AND torque.w_relfric < 0.0 then -1 else 0;
//   rodBody.body.frameTranslation.Sb[1,1] = rodBody.body.frameTranslation.Sa[1,1];
//   rodBody.body.frameTranslation.Sb[1,2] = rodBody.body.frameTranslation.Sa[1,2];
//   rodBody.body.frameTranslation.Sb[1,3] = rodBody.body.frameTranslation.Sa[1,3];
//   rodBody.body.frameTranslation.Sb[2,1] = rodBody.body.frameTranslation.Sa[2,1];
//   rodBody.body.frameTranslation.Sb[2,2] = rodBody.body.frameTranslation.Sa[2,2];
//   rodBody.body.frameTranslation.Sb[2,3] = rodBody.body.frameTranslation.Sa[2,3];
//   rodBody.body.frameTranslation.Sb[3,1] = rodBody.body.frameTranslation.Sa[3,1];
//   rodBody.body.frameTranslation.Sb[3,2] = rodBody.body.frameTranslation.Sa[3,2];
//   rodBody.body.frameTranslation.Sb[3,3] = rodBody.body.frameTranslation.Sa[3,3];
//   rodBody.body.frameTranslation.wb[1] = rodBody.body.frameTranslation.wa[1];
//   rodBody.body.frameTranslation.wb[2] = rodBody.body.frameTranslation.wa[2];
//   rodBody.body.frameTranslation.wb[3] = rodBody.body.frameTranslation.wa[3];
//   rodBody.body.frameTranslation.zb[1] = rodBody.body.frameTranslation.za[1];
//   rodBody.body.frameTranslation.zb[2] = rodBody.body.frameTranslation.za[2];
//   rodBody.body.frameTranslation.zb[3] = rodBody.body.frameTranslation.za[3];
//   rodBody.body.frameTranslation.r0b[1] = rodBody.body.frameTranslation.r0a[1] + (rodBody.body.frameTranslation.Sa[1,1] * rodBody.body.frameTranslation.r[1] + (rodBody.body.frameTranslation.Sa[1,2] * rodBody.body.frameTranslation.r[2] + rodBody.body.frameTranslation.Sa[1,3] * rodBody.body.frameTranslation.r[3]));
//   rodBody.body.frameTranslation.r0b[2] = rodBody.body.frameTranslation.r0a[2] + (rodBody.body.frameTranslation.Sa[2,1] * rodBody.body.frameTranslation.r[1] + (rodBody.body.frameTranslation.Sa[2,2] * rodBody.body.frameTranslation.r[2] + rodBody.body.frameTranslation.Sa[2,3] * rodBody.body.frameTranslation.r[3]));
//   rodBody.body.frameTranslation.r0b[3] = rodBody.body.frameTranslation.r0a[3] + (rodBody.body.frameTranslation.Sa[3,1] * rodBody.body.frameTranslation.r[1] + (rodBody.body.frameTranslation.Sa[3,2] * rodBody.body.frameTranslation.r[2] + rodBody.body.frameTranslation.Sa[3,3] * rodBody.body.frameTranslation.r[3]));
//   rodBody.body.frameTranslation.vaux[1] = rodBody.body.frameTranslation.wa[2] * rodBody.body.frameTranslation.r[3] - rodBody.body.frameTranslation.wa[3] * rodBody.body.frameTranslation.r[2];
//   rodBody.body.frameTranslation.vaux[2] = rodBody.body.frameTranslation.wa[3] * rodBody.body.frameTranslation.r[1] - rodBody.body.frameTranslation.wa[1] * rodBody.body.frameTranslation.r[3];
//   rodBody.body.frameTranslation.vaux[3] = rodBody.body.frameTranslation.wa[1] * rodBody.body.frameTranslation.r[2] - rodBody.body.frameTranslation.wa[2] * rodBody.body.frameTranslation.r[1];
//   rodBody.body.frameTranslation.vb[1] = rodBody.body.frameTranslation.va[1] + rodBody.body.frameTranslation.vaux[1];
//   rodBody.body.frameTranslation.vb[2] = rodBody.body.frameTranslation.va[2] + rodBody.body.frameTranslation.vaux[2];
//   rodBody.body.frameTranslation.vb[3] = rodBody.body.frameTranslation.va[3] + rodBody.body.frameTranslation.vaux[3];
//   rodBody.body.frameTranslation.ab[1] = rodBody.body.frameTranslation.aa[1] + (rodBody.body.frameTranslation.za[2] * rodBody.body.frameTranslation.r[3] + ((-rodBody.body.frameTranslation.za[3] * rodBody.body.frameTranslation.r[2]) + (rodBody.body.frameTranslation.wa[2] * rodBody.body.frameTranslation.vaux[3] + (-rodBody.body.frameTranslation.wa[3] * rodBody.body.frameTranslation.vaux[2]))));
//   rodBody.body.frameTranslation.ab[2] = rodBody.body.frameTranslation.aa[2] + (rodBody.body.frameTranslation.za[3] * rodBody.body.frameTranslation.r[1] + ((-rodBody.body.frameTranslation.za[1] * rodBody.body.frameTranslation.r[3]) + (rodBody.body.frameTranslation.wa[3] * rodBody.body.frameTranslation.vaux[1] + (-rodBody.body.frameTranslation.wa[1] * rodBody.body.frameTranslation.vaux[3]))));
//   rodBody.body.frameTranslation.ab[3] = rodBody.body.frameTranslation.aa[3] + (rodBody.body.frameTranslation.za[1] * rodBody.body.frameTranslation.r[2] + ((-rodBody.body.frameTranslation.za[2] * rodBody.body.frameTranslation.r[1]) + (rodBody.body.frameTranslation.wa[1] * rodBody.body.frameTranslation.vaux[2] + (-rodBody.body.frameTranslation.wa[2] * rodBody.body.frameTranslation.vaux[1]))));
//   rodBody.body.frameTranslation.fa[1] = rodBody.body.frameTranslation.fb[1];
//   rodBody.body.frameTranslation.fa[2] = rodBody.body.frameTranslation.fb[2];
//   rodBody.body.frameTranslation.fa[3] = rodBody.body.frameTranslation.fb[3];
//   rodBody.body.frameTranslation.ta[1] = rodBody.body.frameTranslation.tb[1] + (rodBody.body.frameTranslation.r[2] * rodBody.body.frameTranslation.fa[3] + (-rodBody.body.frameTranslation.r[3] * rodBody.body.frameTranslation.fa[2]));
//   rodBody.body.frameTranslation.ta[2] = rodBody.body.frameTranslation.tb[2] + (rodBody.body.frameTranslation.r[3] * rodBody.body.frameTranslation.fa[1] + (-rodBody.body.frameTranslation.r[1] * rodBody.body.frameTranslation.fa[3]));
//   rodBody.body.frameTranslation.ta[3] = rodBody.body.frameTranslation.tb[3] + (rodBody.body.frameTranslation.r[1] * rodBody.body.frameTranslation.fa[2] + (-rodBody.body.frameTranslation.r[2] * rodBody.body.frameTranslation.fa[1]));
//   rodBody.body.body.fa[1] = rodBody.body.body.m * (rodBody.body.body.aa[1] + (rodBody.body.body.za[2] * rodBody.body.body.rCM[3] + ((-rodBody.body.body.za[3] * rodBody.body.body.rCM[2]) + (rodBody.body.body.wa[2] * (rodBody.body.body.wa[1] * rodBody.body.body.rCM[2] - rodBody.body.body.wa[2] * rodBody.body.body.rCM[1]) + (-rodBody.body.body.wa[3] * (rodBody.body.body.wa[3] * rodBody.body.body.rCM[1] - rodBody.body.body.wa[1] * rodBody.body.body.rCM[3]))))));
//   rodBody.body.body.fa[2] = rodBody.body.body.m * (rodBody.body.body.aa[2] + (rodBody.body.body.za[3] * rodBody.body.body.rCM[1] + ((-rodBody.body.body.za[1] * rodBody.body.body.rCM[3]) + (rodBody.body.body.wa[3] * (rodBody.body.body.wa[2] * rodBody.body.body.rCM[3] - rodBody.body.body.wa[3] * rodBody.body.body.rCM[2]) + (-rodBody.body.body.wa[1] * (rodBody.body.body.wa[1] * rodBody.body.body.rCM[2] - rodBody.body.body.wa[2] * rodBody.body.body.rCM[1]))))));
//   rodBody.body.body.fa[3] = rodBody.body.body.m * (rodBody.body.body.aa[3] + (rodBody.body.body.za[1] * rodBody.body.body.rCM[2] + ((-rodBody.body.body.za[2] * rodBody.body.body.rCM[1]) + (rodBody.body.body.wa[1] * (rodBody.body.body.wa[3] * rodBody.body.body.rCM[1] - rodBody.body.body.wa[1] * rodBody.body.body.rCM[3]) + (-rodBody.body.body.wa[2] * (rodBody.body.body.wa[2] * rodBody.body.body.rCM[3] - rodBody.body.body.wa[3] * rodBody.body.body.rCM[2]))))));
//   rodBody.body.body.ta[1] = rodBody.body.body.I[1,1] * rodBody.body.body.za[1] + (rodBody.body.body.I[1,2] * rodBody.body.body.za[2] + (rodBody.body.body.I[1,3] * rodBody.body.body.za[3] + (rodBody.body.body.wa[2] * (rodBody.body.body.I[3,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[3,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[3,3] * rodBody.body.body.wa[3])) + ((-rodBody.body.body.wa[3] * (rodBody.body.body.I[2,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[2,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[2,3] * rodBody.body.body.wa[3]))) + (rodBody.body.body.rCM[2] * rodBody.body.body.fa[3] + (-rodBody.body.body.rCM[3] * rodBody.body.body.fa[2]))))));
//   rodBody.body.body.ta[2] = rodBody.body.body.I[2,1] * rodBody.body.body.za[1] + (rodBody.body.body.I[2,2] * rodBody.body.body.za[2] + (rodBody.body.body.I[2,3] * rodBody.body.body.za[3] + (rodBody.body.body.wa[3] * (rodBody.body.body.I[1,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[1,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[1,3] * rodBody.body.body.wa[3])) + ((-rodBody.body.body.wa[1] * (rodBody.body.body.I[3,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[3,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[3,3] * rodBody.body.body.wa[3]))) + (rodBody.body.body.rCM[3] * rodBody.body.body.fa[1] + (-rodBody.body.body.rCM[1] * rodBody.body.body.fa[3]))))));
//   rodBody.body.body.ta[3] = rodBody.body.body.I[3,1] * rodBody.body.body.za[1] + (rodBody.body.body.I[3,2] * rodBody.body.body.za[2] + (rodBody.body.body.I[3,3] * rodBody.body.body.za[3] + (rodBody.body.body.wa[1] * (rodBody.body.body.I[2,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[2,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[2,3] * rodBody.body.body.wa[3])) + ((-rodBody.body.body.wa[2] * (rodBody.body.body.I[1,1] * rodBody.body.body.wa[1] + (rodBody.body.body.I[1,2] * rodBody.body.body.wa[2] + rodBody.body.body.I[1,3] * rodBody.body.body.wa[3]))) + (rodBody.body.body.rCM[1] * rodBody.body.body.fa[2] + (-rodBody.body.body.rCM[2] * rodBody.body.body.fa[1]))))));
//   rodBody.body.body.m = rodBody.body.m;
//   rodBody.body.body.rCM[1] = rodBody.body.rCM[1];
//   rodBody.body.body.rCM[2] = rodBody.body.rCM[2];
//   rodBody.body.body.rCM[3] = rodBody.body.rCM[3];
//   rodBody.body.body.I[1,1] = rodBody.body.I11;
//   rodBody.body.body.I[1,2] = rodBody.body.I21;
//   rodBody.body.body.I[1,3] = rodBody.body.I31;
//   rodBody.body.body.I[2,1] = rodBody.body.I21;
//   rodBody.body.body.I[2,2] = rodBody.body.I22;
//   rodBody.body.body.I[2,3] = rodBody.body.I32;
//   rodBody.body.body.I[3,1] = rodBody.body.I31;
//   rodBody.body.body.I[3,2] = rodBody.body.I32;
//   rodBody.body.body.I[3,3] = rodBody.body.I33;
//   rodBody.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(rodBody.vis.vis.mcShape.shapeType);
//   rodBody.vis.vis.mcShape.Material = PackMaterial(rodBody.vis.vis.mcShape.color[1] / 255.0,rodBody.vis.vis.mcShape.color[2] / 255.0,rodBody.vis.vis.mcShape.color[3] / 255.0,rodBody.vis.vis.mcShape.specularCoefficient);
//   rodBody.vis.vis.mcShape.Extra = rodBody.vis.vis.mcShape.extra;
//   rodBody.vis.vis.mcShape.size[1] = rodBody.vis.vis.mcShape.length;
//   rodBody.vis.vis.mcShape.size[2] = rodBody.vis.vis.mcShape.width;
//   rodBody.vis.vis.mcShape.size[3] = rodBody.vis.vis.mcShape.height;
//   rodBody.vis.vis.mcShape.Sshape[1,1] = rodBody.vis.vis.mcShape.e_x[1];
//   rodBody.vis.vis.mcShape.Sshape[1,2] = rodBody.vis.vis.mcShape.e_y[1];
//   rodBody.vis.vis.mcShape.Sshape[1,3] = rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.e_y[3] - rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.e_y[2];
//   rodBody.vis.vis.mcShape.Sshape[2,1] = rodBody.vis.vis.mcShape.e_x[2];
//   rodBody.vis.vis.mcShape.Sshape[2,2] = rodBody.vis.vis.mcShape.e_y[2];
//   rodBody.vis.vis.mcShape.Sshape[2,3] = rodBody.vis.vis.mcShape.e_x[3] * rodBody.vis.vis.mcShape.e_y[1] - rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.e_y[3];
//   rodBody.vis.vis.mcShape.Sshape[3,1] = rodBody.vis.vis.mcShape.e_x[3];
//   rodBody.vis.vis.mcShape.Sshape[3,2] = rodBody.vis.vis.mcShape.e_y[3];
//   rodBody.vis.vis.mcShape.Sshape[3,3] = rodBody.vis.vis.mcShape.e_x[1] * rodBody.vis.vis.mcShape.e_y[2] - rodBody.vis.vis.mcShape.e_x[2] * rodBody.vis.vis.mcShape.e_y[1];
//   rodBody.vis.vis.mcShape.rxvisobj[1] = rodBody.vis.vis.mcShape.S[1,1] * rodBody.vis.vis.mcShape.e_x[1] + (rodBody.vis.vis.mcShape.S[1,2] * rodBody.vis.vis.mcShape.e_x[2] + rodBody.vis.vis.mcShape.S[1,3] * rodBody.vis.vis.mcShape.e_x[3]);
//   rodBody.vis.vis.mcShape.rxvisobj[2] = rodBody.vis.vis.mcShape.S[2,1] * rodBody.vis.vis.mcShape.e_x[1] + (rodBody.vis.vis.mcShape.S[2,2] * rodBody.vis.vis.mcShape.e_x[2] + rodBody.vis.vis.mcShape.S[2,3] * rodBody.vis.vis.mcShape.e_x[3]);
//   rodBody.vis.vis.mcShape.rxvisobj[3] = rodBody.vis.vis.mcShape.S[3,1] * rodBody.vis.vis.mcShape.e_x[1] + (rodBody.vis.vis.mcShape.S[3,2] * rodBody.vis.vis.mcShape.e_x[2] + rodBody.vis.vis.mcShape.S[3,3] * rodBody.vis.vis.mcShape.e_x[3]);
//   rodBody.vis.vis.mcShape.ryvisobj[1] = rodBody.vis.vis.mcShape.S[1,1] * rodBody.vis.vis.mcShape.e_y[1] + (rodBody.vis.vis.mcShape.S[1,2] * rodBody.vis.vis.mcShape.e_y[2] + rodBody.vis.vis.mcShape.S[1,3] * rodBody.vis.vis.mcShape.e_y[3]);
//   rodBody.vis.vis.mcShape.ryvisobj[2] = rodBody.vis.vis.mcShape.S[2,1] * rodBody.vis.vis.mcShape.e_y[1] + (rodBody.vis.vis.mcShape.S[2,2] * rodBody.vis.vis.mcShape.e_y[2] + rodBody.vis.vis.mcShape.S[2,3] * rodBody.vis.vis.mcShape.e_y[3]);
//   rodBody.vis.vis.mcShape.ryvisobj[3] = rodBody.vis.vis.mcShape.S[3,1] * rodBody.vis.vis.mcShape.e_y[1] + (rodBody.vis.vis.mcShape.S[3,2] * rodBody.vis.vis.mcShape.e_y[2] + rodBody.vis.vis.mcShape.S[3,3] * rodBody.vis.vis.mcShape.e_y[3]);
//   rodBody.vis.vis.mcShape.rvisobj[1] = rodBody.vis.vis.mcShape.r[1] + (rodBody.vis.vis.mcShape.S[1,1] * rodBody.vis.vis.mcShape.r_shape[1] + (rodBody.vis.vis.mcShape.S[1,2] * rodBody.vis.vis.mcShape.r_shape[2] + rodBody.vis.vis.mcShape.S[1,3] * rodBody.vis.vis.mcShape.r_shape[3]));
//   rodBody.vis.vis.mcShape.rvisobj[2] = rodBody.vis.vis.mcShape.r[2] + (rodBody.vis.vis.mcShape.S[2,1] * rodBody.vis.vis.mcShape.r_shape[1] + (rodBody.vis.vis.mcShape.S[2,2] * rodBody.vis.vis.mcShape.r_shape[2] + rodBody.vis.vis.mcShape.S[2,3] * rodBody.vis.vis.mcShape.r_shape[3]));
//   rodBody.vis.vis.mcShape.rvisobj[3] = rodBody.vis.vis.mcShape.r[3] + (rodBody.vis.vis.mcShape.S[3,1] * rodBody.vis.vis.mcShape.r_shape[1] + (rodBody.vis.vis.mcShape.S[3,2] * rodBody.vis.vis.mcShape.r_shape[2] + rodBody.vis.vis.mcShape.S[3,3] * rodBody.vis.vis.mcShape.r_shape[3]));
//   rodBody.vis.vis.mcShape.e_x[1] = rodBody.vis.vis.nLength[1];
//   rodBody.vis.vis.mcShape.e_x[2] = rodBody.vis.vis.nLength[2];
//   rodBody.vis.vis.mcShape.e_x[3] = rodBody.vis.vis.nLength[3];
//   rodBody.vis.vis.mcShape.e_y[1] = rodBody.vis.vis.nWidth[1];
//   rodBody.vis.vis.mcShape.e_y[2] = rodBody.vis.vis.nWidth[2];
//   rodBody.vis.vis.mcShape.e_y[3] = rodBody.vis.vis.nWidth[3];
//   rodBody.vis.vis.mcShape.e_z[1] = rodBody.vis.vis.nHeight[1];
//   rodBody.vis.vis.mcShape.e_z[2] = rodBody.vis.vis.nHeight[2];
//   rodBody.vis.vis.mcShape.e_z[3] = rodBody.vis.vis.nHeight[3];
//   rodBody.vis.vis.S[1,1] = rodBody.vis.Sa[1,1];
//   rodBody.vis.vis.S[1,2] = rodBody.vis.Sa[1,2];
//   rodBody.vis.vis.S[1,3] = rodBody.vis.Sa[1,3];
//   rodBody.vis.vis.S[2,1] = rodBody.vis.Sa[2,1];
//   rodBody.vis.vis.S[2,2] = rodBody.vis.Sa[2,2];
//   rodBody.vis.vis.S[2,3] = rodBody.vis.Sa[2,3];
//   rodBody.vis.vis.S[3,1] = rodBody.vis.Sa[3,1];
//   rodBody.vis.vis.S[3,2] = rodBody.vis.Sa[3,2];
//   rodBody.vis.vis.S[3,3] = rodBody.vis.Sa[3,3];
//   rodBody.vis.vis.r[1] = rodBody.vis.r0a[1];
//   rodBody.vis.vis.r[2] = rodBody.vis.r0a[2];
//   rodBody.vis.vis.r[3] = rodBody.vis.r0a[3];
//   rodBody.vis.vis.nLength[1] = rodBody.vis.nLength[1];
//   rodBody.vis.vis.nLength[2] = rodBody.vis.nLength[2];
//   rodBody.vis.vis.nLength[3] = rodBody.vis.nLength[3];
//   rodBody.vis.vis.nWidth[1] = rodBody.vis.nWidth[1];
//   rodBody.vis.vis.nWidth[2] = rodBody.vis.nWidth[2];
//   rodBody.vis.vis.nWidth[3] = rodBody.vis.nWidth[3];
//   rodBody.vis.vis.nHeight[1] = rodBody.vis.nHeight[1];
//   rodBody.vis.vis.nHeight[2] = rodBody.vis.nHeight[2];
//   rodBody.vis.vis.nHeight[3] = rodBody.vis.nHeight[3];
//   rodBody.vis.fa[1] = 0.0;
//   rodBody.vis.fa[2] = 0.0;
//   rodBody.vis.fa[3] = 0.0;
//   rodBody.vis.ta[1] = 0.0;
//   rodBody.vis.ta[2] = 0.0;
//   rodBody.vis.ta[3] = 0.0;
//   rod.constraintResidue = rod.r_rela[1] ^ 2.0 / 2.0 + (rod.r_rela[2] ^ 2.0 / 2.0 + rod.r_rela[3] ^ 2.0 / 2.0) - rod.L ^ 2.0 / 2.0;
//   rod.constraintResidue_d = rod.r_rela[1] * rod.v_rela[1] + (rod.r_rela[2] * rod.v_rela[2] + rod.r_rela[3] * rod.v_rela[3]);
//   rod.constraintResidue_dd = rod.r_rela[1] * rod.a_rela[1] + (rod.r_rela[2] * rod.a_rela[2] + (rod.r_rela[3] * rod.a_rela[3] + (rod.v_rela[1] ^ 2.0 + (rod.v_rela[2] ^ 2.0 + rod.v_rela[3] ^ 2.0))));
//   constrain(rod.constraintResidue,rod.constraintResidue_d,rod.constraintResidue_dd);
//   rod.nx[1] = rod.r_rela[1] / rod.L;
//   rod.nx[2] = rod.r_rela[2] / rod.L;
//   rod.nx[3] = rod.r_rela[3] / rod.L;
//   rod.b1[1] = rod.na[2] * rod.nx[3] - rod.na[3] * rod.nx[2];
//   rod.b1[2] = rod.na[3] * rod.nx[1] - rod.na[1] * rod.nx[3];
//   rod.b1[3] = rod.na[1] * rod.nx[2] - rod.na[2] * rod.nx[1];
//   rod.normb = sqrt(rod.b1[1] ^ 2.0 + (rod.b1[2] ^ 2.0 + rod.b1[3] ^ 2.0));
//   rod.ny[1] = rod.b1[1] / rod.normb;
//   rod.ny[2] = rod.b1[2] / rod.normb;
//   rod.ny[3] = rod.b1[3] / rod.normb;
//   rod.nz[1] = rod.nx[2] * rod.ny[3] - rod.nx[3] * rod.ny[2];
//   rod.nz[2] = rod.nx[3] * rod.ny[1] - rod.nx[1] * rod.ny[3];
//   rod.nz[3] = rod.nx[1] * rod.ny[2] - rod.nx[2] * rod.ny[1];
//   rod.S_relc[1,1] = rod.nx[1];
//   rod.S_relc[1,2] = rod.nx[2];
//   rod.S_relc[1,3] = rod.nx[3];
//   rod.S_relc[2,1] = rod.ny[1];
//   rod.S_relc[2,2] = rod.ny[2];
//   rod.S_relc[2,3] = rod.ny[3];
//   rod.S_relc[3,1] = rod.nz[1];
//   rod.S_relc[3,2] = rod.nz[2];
//   rod.S_relc[3,3] = rod.nz[3];
//   rod.Sc[1,1] = rod.Sa[1,1] * rod.S_relc[1,1] + (rod.Sa[1,2] * rod.S_relc[1,2] + rod.Sa[1,3] * rod.S_relc[1,3]);
//   rod.Sc[1,2] = rod.Sa[1,1] * rod.S_relc[2,1] + (rod.Sa[1,2] * rod.S_relc[2,2] + rod.Sa[1,3] * rod.S_relc[2,3]);
//   rod.Sc[1,3] = rod.Sa[1,1] * rod.S_relc[3,1] + (rod.Sa[1,2] * rod.S_relc[3,2] + rod.Sa[1,3] * rod.S_relc[3,3]);
//   rod.Sc[2,1] = rod.Sa[2,1] * rod.S_relc[1,1] + (rod.Sa[2,2] * rod.S_relc[1,2] + rod.Sa[2,3] * rod.S_relc[1,3]);
//   rod.Sc[2,2] = rod.Sa[2,1] * rod.S_relc[2,1] + (rod.Sa[2,2] * rod.S_relc[2,2] + rod.Sa[2,3] * rod.S_relc[2,3]);
//   rod.Sc[2,3] = rod.Sa[2,1] * rod.S_relc[3,1] + (rod.Sa[2,2] * rod.S_relc[3,2] + rod.Sa[2,3] * rod.S_relc[3,3]);
//   rod.Sc[3,1] = rod.Sa[3,1] * rod.S_relc[1,1] + (rod.Sa[3,2] * rod.S_relc[1,2] + rod.Sa[3,3] * rod.S_relc[1,3]);
//   rod.Sc[3,2] = rod.Sa[3,1] * rod.S_relc[2,1] + (rod.Sa[3,2] * rod.S_relc[2,2] + rod.Sa[3,3] * rod.S_relc[2,3]);
//   rod.Sc[3,3] = rod.Sa[3,1] * rod.S_relc[3,1] + (rod.Sa[3,2] * rod.S_relc[3,2] + rod.Sa[3,3] * rod.S_relc[3,3]);
//   rod.nxd[1] = rod.v_rela[1] / rod.L;
//   rod.nxd[2] = rod.v_rela[2] / rod.L;
//   rod.nxd[3] = rod.v_rela[3] / rod.L;
//   rod.bd[1] = (rod.na[2] * rod.nxd[3] - rod.na[3] * rod.nxd[2]) / rod.normb;
//   rod.bd[2] = (rod.na[3] * rod.nxd[1] - rod.na[1] * rod.nxd[3]) / rod.normb;
//   rod.bd[3] = (rod.na[1] * rod.nxd[2] - rod.na[2] * rod.nxd[1]) / rod.normb;
//   rod.bb = rod.ny[1] * rod.bd[1] + (rod.ny[2] * rod.bd[2] + rod.ny[3] * rod.bd[3]);
//   rod.nyd[1] = rod.bd[1] - rod.bb * rod.ny[1];
//   rod.nyd[2] = rod.bd[2] - rod.bb * rod.ny[2];
//   rod.nyd[3] = rod.bd[3] - rod.bb * rod.ny[3];
//   rod.nzd[1] = rod.nxd[2] * rod.ny[3] + ((-rod.nxd[3] * rod.ny[2]) + (rod.nx[2] * rod.nyd[3] + (-rod.nx[3] * rod.nyd[2])));
//   rod.nzd[2] = rod.nxd[3] * rod.ny[1] + ((-rod.nxd[1] * rod.ny[3]) + (rod.nx[3] * rod.nyd[1] + (-rod.nx[1] * rod.nyd[3])));
//   rod.nzd[3] = rod.nxd[1] * rod.ny[2] + ((-rod.nxd[2] * rod.ny[1]) + (rod.nx[1] * rod.nyd[2] + (-rod.nx[2] * rod.nyd[1])));
//   rod.w_relc[1] = rod.nz[1] * rod.nyd[1] + (rod.nz[2] * rod.nyd[2] + rod.nz[3] * rod.nyd[3]);
//   rod.w_relc[2] = rod.nx[1] * rod.nzd[1] + (rod.nx[2] * rod.nzd[2] + rod.nx[3] * rod.nzd[3]);
//   rod.w_relc[3] = rod.ny[1] * rod.nxd[1] + (rod.ny[2] * rod.nxd[2] + rod.ny[3] * rod.nxd[3]);
//   rod.wc[1] = rod.S_relc[1,1] * rod.wa[1] + (rod.S_relc[1,2] * rod.wa[2] + (rod.S_relc[1,3] * rod.wa[3] + rod.w_relc[1]));
//   rod.wc[2] = rod.S_relc[2,1] * rod.wa[1] + (rod.S_relc[2,2] * rod.wa[2] + (rod.S_relc[2,3] * rod.wa[3] + rod.w_relc[2]));
//   rod.wc[3] = rod.S_relc[3,1] * rod.wa[1] + (rod.S_relc[3,2] * rod.wa[2] + (rod.S_relc[3,3] * rod.wa[3] + rod.w_relc[3]));
//   rod.nxdd[1] = rod.a_rela[1] / rod.L;
//   rod.nxdd[2] = rod.a_rela[2] / rod.L;
//   rod.nxdd[3] = rod.a_rela[3] / rod.L;
//   rod.bdd[1] = (rod.na[2] * rod.nxdd[3] - rod.na[3] * rod.nxdd[2]) / rod.normb - rod.bb * rod.bd[1];
//   rod.bdd[2] = (rod.na[3] * rod.nxdd[1] - rod.na[1] * rod.nxdd[3]) / rod.normb - rod.bb * rod.bd[2];
//   rod.bdd[3] = (rod.na[1] * rod.nxdd[2] - rod.na[2] * rod.nxdd[1]) / rod.normb - rod.bb * rod.bd[3];
//   rod.nydd[1] = rod.bdd[1] - (rod.nyd[1] * rod.bd[1] + (rod.nyd[2] * rod.bd[2] + (rod.nyd[3] * rod.bd[3] + (rod.ny[1] * rod.bdd[1] + (rod.ny[2] * rod.bdd[2] + rod.ny[3] * rod.bdd[3]))))) * rod.ny[1] - rod.bb * rod.nyd[1];
//   rod.nydd[2] = rod.bdd[2] - (rod.nyd[1] * rod.bd[1] + (rod.nyd[2] * rod.bd[2] + (rod.nyd[3] * rod.bd[3] + (rod.ny[1] * rod.bdd[1] + (rod.ny[2] * rod.bdd[2] + rod.ny[3] * rod.bdd[3]))))) * rod.ny[2] - rod.bb * rod.nyd[2];
//   rod.nydd[3] = rod.bdd[3] - (rod.nyd[1] * rod.bd[1] + (rod.nyd[2] * rod.bd[2] + (rod.nyd[3] * rod.bd[3] + (rod.ny[1] * rod.bdd[1] + (rod.ny[2] * rod.bdd[2] + rod.ny[3] * rod.bdd[3]))))) * rod.ny[3] - rod.bb * rod.nyd[3];
//   rod.nzdd[1] = rod.nxdd[2] * rod.ny[3] + ((-rod.nxdd[3] * rod.ny[2]) + (rod.nx[2] * rod.nydd[3] + ((-rod.nx[3] * rod.nydd[2]) + 2.0 * (rod.nxd[2] * rod.nyd[3] - rod.nxd[3] * rod.nyd[2]))));
//   rod.nzdd[2] = rod.nxdd[3] * rod.ny[1] + ((-rod.nxdd[1] * rod.ny[3]) + (rod.nx[3] * rod.nydd[1] + ((-rod.nx[1] * rod.nydd[3]) + 2.0 * (rod.nxd[3] * rod.nyd[1] - rod.nxd[1] * rod.nyd[3]))));
//   rod.nzdd[3] = rod.nxdd[1] * rod.ny[2] + ((-rod.nxdd[2] * rod.ny[1]) + (rod.nx[1] * rod.nydd[2] + ((-rod.nx[2] * rod.nydd[1]) + 2.0 * (rod.nxd[1] * rod.nyd[2] - rod.nxd[2] * rod.nyd[1]))));
//   rod.z_relc[1] = rod.nz[1] * rod.nydd[1] + (rod.nz[2] * rod.nydd[2] + (rod.nz[3] * rod.nydd[3] + (rod.nzd[1] * rod.nyd[1] + (rod.nzd[2] * rod.nyd[2] + rod.nzd[3] * rod.nyd[3]))));
//   rod.z_relc[2] = rod.nx[1] * rod.nzdd[1] + (rod.nx[2] * rod.nzdd[2] + (rod.nx[3] * rod.nzdd[3] + (rod.nxd[1] * rod.nzd[1] + (rod.nxd[2] * rod.nzd[2] + rod.nxd[3] * rod.nzd[3]))));
//   rod.z_relc[3] = rod.ny[1] * rod.nxdd[1] + (rod.ny[2] * rod.nxdd[2] + (rod.ny[3] * rod.nxdd[3] + (rod.nyd[1] * rod.nxd[1] + (rod.nyd[2] * rod.nxd[2] + rod.nyd[3] * rod.nxd[3]))));
//   rod.zc[1] = rod.S_relc[1,1] * rod.za[1] + (rod.S_relc[1,2] * rod.za[2] + (rod.S_relc[1,3] * rod.za[3] + (rod.wc[2] * rod.w_relc[3] + ((-rod.wc[3] * rod.w_relc[2]) + rod.z_relc[1]))));
//   rod.zc[2] = rod.S_relc[2,1] * rod.za[1] + (rod.S_relc[2,2] * rod.za[2] + (rod.S_relc[2,3] * rod.za[3] + (rod.wc[3] * rod.w_relc[1] + ((-rod.wc[1] * rod.w_relc[3]) + rod.z_relc[2]))));
//   rod.zc[3] = rod.S_relc[3,1] * rod.za[1] + (rod.S_relc[3,2] * rod.za[2] + (rod.S_relc[3,3] * rod.za[3] + (rod.wc[1] * rod.w_relc[2] + ((-rod.wc[2] * rod.w_relc[1]) + rod.z_relc[3]))));
//   rod.r0c[1] = rod.r0a[1];
//   rod.r0c[2] = rod.r0a[2];
//   rod.r0c[3] = rod.r0a[3];
//   rod.vc[1] = rod.S_relc[1,1] * rod.va[1] + (rod.S_relc[1,2] * rod.va[2] + rod.S_relc[1,3] * rod.va[3]);
//   rod.vc[2] = rod.S_relc[2,1] * rod.va[1] + (rod.S_relc[2,2] * rod.va[2] + rod.S_relc[2,3] * rod.va[3]);
//   rod.vc[3] = rod.S_relc[3,1] * rod.va[1] + (rod.S_relc[3,2] * rod.va[2] + rod.S_relc[3,3] * rod.va[3]);
//   rod.ac[1] = rod.S_relc[1,1] * rod.aa[1] + (rod.S_relc[1,2] * rod.aa[2] + rod.S_relc[1,3] * rod.aa[3]);
//   rod.ac[2] = rod.S_relc[2,1] * rod.aa[1] + (rod.S_relc[2,2] * rod.aa[2] + rod.S_relc[2,3] * rod.aa[3]);
//   rod.ac[3] = rod.S_relc[3,1] * rod.aa[1] + (rod.S_relc[3,2] * rod.aa[2] + rod.S_relc[3,3] * rod.aa[3]);
//   rod.fb_a[1] = rod.S_relc[1,1] * rod.fRod + ((-rod.S_relc[2,1]) * rod.tc[3] / rod.L + rod.S_relc[3,1] * rod.tc[2] / rod.L);
//   rod.fb_a[2] = rod.S_relc[1,2] * rod.fRod + ((-rod.S_relc[2,2]) * rod.tc[3] / rod.L + rod.S_relc[3,2] * rod.tc[2] / rod.L);
//   rod.fb_a[3] = rod.S_relc[1,3] * rod.fRod + ((-rod.S_relc[2,3]) * rod.tc[3] / rod.L + rod.S_relc[3,3] * rod.tc[2] / rod.L);
//   rod.fb[1] = rod.S_rel[1,1] * rod.fb_a[1] + (rod.S_rel[1,2] * rod.fb_a[2] + rod.S_rel[1,3] * rod.fb_a[3]);
//   rod.fb[2] = rod.S_rel[2,1] * rod.fb_a[1] + (rod.S_rel[2,2] * rod.fb_a[2] + rod.S_rel[2,3] * rod.fb_a[3]);
//   rod.fb[3] = rod.S_rel[3,1] * rod.fb_a[1] + (rod.S_rel[3,2] * rod.fb_a[2] + rod.S_rel[3,3] * rod.fb_a[3]);
//   rod.fa[1] = rod.fb_a[1] + (rod.S_relc[1,1] * rod.fc[1] + (rod.S_relc[2,1] * rod.fc[2] + rod.S_relc[3,1] * rod.fc[3]));
//   rod.fa[2] = rod.fb_a[2] + (rod.S_relc[1,2] * rod.fc[1] + (rod.S_relc[2,2] * rod.fc[2] + rod.S_relc[3,2] * rod.fc[3]));
//   rod.fa[3] = rod.fb_a[3] + (rod.S_relc[1,3] * rod.fc[1] + (rod.S_relc[2,3] * rod.fc[2] + rod.S_relc[3,3] * rod.fc[3]));
//   rod.tb[1] = 0.0;
//   rod.tb[2] = 0.0;
//   rod.tb[3] = 0.0;
//   rod.ta[1] = rod.tc[1] * rod.nx[1];
//   rod.ta[2] = rod.tc[1] * rod.nx[2];
//   rod.ta[3] = rod.tc[1] * rod.nx[3];
//   rod.S_rel[1,1] = rod.Sb[1,1] * rod.Sa[1,1] + (rod.Sb[2,1] * rod.Sa[2,1] + rod.Sb[3,1] * rod.Sa[3,1]);
//   rod.S_rel[1,2] = rod.Sb[1,1] * rod.Sa[1,2] + (rod.Sb[2,1] * rod.Sa[2,2] + rod.Sb[3,1] * rod.Sa[3,2]);
//   rod.S_rel[1,3] = rod.Sb[1,1] * rod.Sa[1,3] + (rod.Sb[2,1] * rod.Sa[2,3] + rod.Sb[3,1] * rod.Sa[3,3]);
//   rod.S_rel[2,1] = rod.Sb[1,2] * rod.Sa[1,1] + (rod.Sb[2,2] * rod.Sa[2,1] + rod.Sb[3,2] * rod.Sa[3,1]);
//   rod.S_rel[2,2] = rod.Sb[1,2] * rod.Sa[1,2] + (rod.Sb[2,2] * rod.Sa[2,2] + rod.Sb[3,2] * rod.Sa[3,2]);
//   rod.S_rel[2,3] = rod.Sb[1,2] * rod.Sa[1,3] + (rod.Sb[2,2] * rod.Sa[2,3] + rod.Sb[3,2] * rod.Sa[3,3]);
//   rod.S_rel[3,1] = rod.Sb[1,3] * rod.Sa[1,1] + (rod.Sb[2,3] * rod.Sa[2,1] + rod.Sb[3,3] * rod.Sa[3,1]);
//   rod.S_rel[3,2] = rod.Sb[1,3] * rod.Sa[1,2] + (rod.Sb[2,3] * rod.Sa[2,2] + rod.Sb[3,3] * rod.Sa[3,2]);
//   rod.S_rel[3,3] = rod.Sb[1,3] * rod.Sa[1,3] + (rod.Sb[2,3] * rod.Sa[2,3] + rod.Sb[3,3] * rod.Sa[3,3]);
//   rod.r_rela[1] = rod.Sa[1,1] * (rod.r0b[1] - rod.r0a[1]) + (rod.Sa[2,1] * (rod.r0b[2] - rod.r0a[2]) + rod.Sa[3,1] * (rod.r0b[3] - rod.r0a[3]));
//   rod.r_rela[2] = rod.Sa[1,2] * (rod.r0b[1] - rod.r0a[1]) + (rod.Sa[2,2] * (rod.r0b[2] - rod.r0a[2]) + rod.Sa[3,2] * (rod.r0b[3] - rod.r0a[3]));
//   rod.r_rela[3] = rod.Sa[1,3] * (rod.r0b[1] - rod.r0a[1]) + (rod.Sa[2,3] * (rod.r0b[2] - rod.r0a[2]) + rod.Sa[3,3] * (rod.r0b[3] - rod.r0a[3]));
//   rod.vaux[1] = rod.wa[2] * rod.r_rela[3] - rod.wa[3] * rod.r_rela[2];
//   rod.vaux[2] = rod.wa[3] * rod.r_rela[1] - rod.wa[1] * rod.r_rela[3];
//   rod.vaux[3] = rod.wa[1] * rod.r_rela[2] - rod.wa[2] * rod.r_rela[1];
//   rod.v_rela[1] = rod.S_rel[1,1] * rod.vb[1] + (rod.S_rel[2,1] * rod.vb[2] + rod.S_rel[3,1] * rod.vb[3]) - rod.va[1] - rod.vaux[1];
//   rod.v_rela[2] = rod.S_rel[1,2] * rod.vb[1] + (rod.S_rel[2,2] * rod.vb[2] + rod.S_rel[3,2] * rod.vb[3]) - rod.va[2] - rod.vaux[2];
//   rod.v_rela[3] = rod.S_rel[1,3] * rod.vb[1] + (rod.S_rel[2,3] * rod.vb[2] + rod.S_rel[3,3] * rod.vb[3]) - rod.va[3] - rod.vaux[3];
//   rod.w_rela[1] = rod.S_rel[1,1] * rod.wb[1] + (rod.S_rel[2,1] * rod.wb[2] + rod.S_rel[3,1] * rod.wb[3]) - rod.wa[1];
//   rod.w_rela[2] = rod.S_rel[1,2] * rod.wb[1] + (rod.S_rel[2,2] * rod.wb[2] + rod.S_rel[3,2] * rod.wb[3]) - rod.wa[2];
//   rod.w_rela[3] = rod.S_rel[1,3] * rod.wb[1] + (rod.S_rel[2,3] * rod.wb[2] + rod.S_rel[3,3] * rod.wb[3]) - rod.wa[3];
//   rod.a_rela[1] = rod.S_rel[1,1] * rod.ab[1] + (rod.S_rel[2,1] * rod.ab[2] + rod.S_rel[3,1] * rod.ab[3]) - rod.aa[1] - (rod.za[2] * rod.r_rela[3] - rod.za[3] * rod.r_rela[2]) - (rod.wa[2] * (rod.vaux[3] + 2.0 * rod.v_rela[3]) - rod.wa[3] * (rod.vaux[2] + 2.0 * rod.v_rela[2]));
//   rod.a_rela[2] = rod.S_rel[1,2] * rod.ab[1] + (rod.S_rel[2,2] * rod.ab[2] + rod.S_rel[3,2] * rod.ab[3]) - rod.aa[2] - (rod.za[3] * rod.r_rela[1] - rod.za[1] * rod.r_rela[3]) - (rod.wa[3] * (rod.vaux[1] + 2.0 * rod.v_rela[1]) - rod.wa[1] * (rod.vaux[3] + 2.0 * rod.v_rela[3]));
//   rod.a_rela[3] = rod.S_rel[1,3] * rod.ab[1] + (rod.S_rel[2,3] * rod.ab[2] + rod.S_rel[3,3] * rod.ab[3]) - rod.aa[3] - (rod.za[1] * rod.r_rela[2] - rod.za[2] * rod.r_rela[1]) - (rod.wa[1] * (rod.vaux[2] + 2.0 * rod.v_rela[2]) - rod.wa[2] * (rod.vaux[1] + 2.0 * rod.v_rela[1]));
//   rod.z_rela[1] = rod.S_rel[1,1] * rod.zb[1] + (rod.S_rel[2,1] * rod.zb[2] + rod.S_rel[3,1] * rod.zb[3]) - rod.za[1] - (rod.wa[2] * rod.w_rela[3] - rod.wa[3] * rod.w_rela[2]);
//   rod.z_rela[2] = rod.S_rel[1,2] * rod.zb[1] + (rod.S_rel[2,2] * rod.zb[2] + rod.S_rel[3,2] * rod.zb[3]) - rod.za[2] - (rod.wa[3] * rod.w_rela[1] - rod.wa[1] * rod.w_rela[3]);
//   rod.z_rela[3] = rod.S_rel[1,3] * rod.zb[1] + (rod.S_rel[2,3] * rod.zb[2] + rod.S_rel[3,3] * rod.zb[3]) - rod.za[3] - (rod.wa[1] * rod.w_rela[2] - rod.wa[2] * rod.w_rela[1]);
//   AngVelDegS = -9.54929658551372 * r1.qd;
//   x = gasForce.s_rel;
//   press = gasForce.press;
//   T = gasForce.T;
//   V = gasForce.V;
//   dens = gasForce.dens;
//   torque.flange_b.tau + flyWheel.flange_a.tau = 0.0;
//   flyWheel.flange_a.phi = torque.flange_b.phi;
//   cyl.axis.f + gasForce.flange_b.f = 0.0;
//   cyl.axis.s = gasForce.flange_b.s;
//   cyl.bearing.f + gasForce.flange_a.f = 0.0;
//   cyl.bearing.s = gasForce.flange_a.s;
//   rod.frame_a.t[1] + (cyl.frame_b.t[1] + piston.frame_a.t[1]) = 0.0;
//   rod.frame_a.t[2] + (cyl.frame_b.t[2] + piston.frame_a.t[2]) = 0.0;
//   rod.frame_a.t[3] + (cyl.frame_b.t[3] + piston.frame_a.t[3]) = 0.0;
//   rod.frame_a.f[1] + (cyl.frame_b.f[1] + piston.frame_a.f[1]) = 0.0;
//   rod.frame_a.f[2] + (cyl.frame_b.f[2] + piston.frame_a.f[2]) = 0.0;
//   rod.frame_a.f[3] + (cyl.frame_b.f[3] + piston.frame_a.f[3]) = 0.0;
//   cyl.frame_b.z[1] = piston.body.body.frame_a.z[1];
//   cyl.frame_b.z[1] = piston.body.frameTranslation.frame_a.z[1];
//   cyl.frame_b.z[1] = piston.body.frame_a.z[1];
//   cyl.frame_b.z[1] = piston.frame_a.z[1];
//   cyl.frame_b.z[1] = piston.vis.frame_a.z[1];
//   cyl.frame_b.z[1] = rod.frame_a.z[1];
//   cyl.frame_b.z[2] = piston.body.body.frame_a.z[2];
//   cyl.frame_b.z[2] = piston.body.frameTranslation.frame_a.z[2];
//   cyl.frame_b.z[2] = piston.body.frame_a.z[2];
//   cyl.frame_b.z[2] = piston.frame_a.z[2];
//   cyl.frame_b.z[2] = piston.vis.frame_a.z[2];
//   cyl.frame_b.z[2] = rod.frame_a.z[2];
//   cyl.frame_b.z[3] = piston.body.body.frame_a.z[3];
//   cyl.frame_b.z[3] = piston.body.frameTranslation.frame_a.z[3];
//   cyl.frame_b.z[3] = piston.body.frame_a.z[3];
//   cyl.frame_b.z[3] = piston.frame_a.z[3];
//   cyl.frame_b.z[3] = piston.vis.frame_a.z[3];
//   cyl.frame_b.z[3] = rod.frame_a.z[3];
//   cyl.frame_b.a[1] = piston.body.body.frame_a.a[1];
//   cyl.frame_b.a[1] = piston.body.frameTranslation.frame_a.a[1];
//   cyl.frame_b.a[1] = piston.body.frame_a.a[1];
//   cyl.frame_b.a[1] = piston.frame_a.a[1];
//   cyl.frame_b.a[1] = piston.vis.frame_a.a[1];
//   cyl.frame_b.a[1] = rod.frame_a.a[1];
//   cyl.frame_b.a[2] = piston.body.body.frame_a.a[2];
//   cyl.frame_b.a[2] = piston.body.frameTranslation.frame_a.a[2];
//   cyl.frame_b.a[2] = piston.body.frame_a.a[2];
//   cyl.frame_b.a[2] = piston.frame_a.a[2];
//   cyl.frame_b.a[2] = piston.vis.frame_a.a[2];
//   cyl.frame_b.a[2] = rod.frame_a.a[2];
//   cyl.frame_b.a[3] = piston.body.body.frame_a.a[3];
//   cyl.frame_b.a[3] = piston.body.frameTranslation.frame_a.a[3];
//   cyl.frame_b.a[3] = piston.body.frame_a.a[3];
//   cyl.frame_b.a[3] = piston.frame_a.a[3];
//   cyl.frame_b.a[3] = piston.vis.frame_a.a[3];
//   cyl.frame_b.a[3] = rod.frame_a.a[3];
//   cyl.frame_b.w[1] = piston.body.body.frame_a.w[1];
//   cyl.frame_b.w[1] = piston.body.frameTranslation.frame_a.w[1];
//   cyl.frame_b.w[1] = piston.body.frame_a.w[1];
//   cyl.frame_b.w[1] = piston.frame_a.w[1];
//   cyl.frame_b.w[1] = piston.vis.frame_a.w[1];
//   cyl.frame_b.w[1] = rod.frame_a.w[1];
//   cyl.frame_b.w[2] = piston.body.body.frame_a.w[2];
//   cyl.frame_b.w[2] = piston.body.frameTranslation.frame_a.w[2];
//   cyl.frame_b.w[2] = piston.body.frame_a.w[2];
//   cyl.frame_b.w[2] = piston.frame_a.w[2];
//   cyl.frame_b.w[2] = piston.vis.frame_a.w[2];
//   cyl.frame_b.w[2] = rod.frame_a.w[2];
//   cyl.frame_b.w[3] = piston.body.body.frame_a.w[3];
//   cyl.frame_b.w[3] = piston.body.frameTranslation.frame_a.w[3];
//   cyl.frame_b.w[3] = piston.body.frame_a.w[3];
//   cyl.frame_b.w[3] = piston.frame_a.w[3];
//   cyl.frame_b.w[3] = piston.vis.frame_a.w[3];
//   cyl.frame_b.w[3] = rod.frame_a.w[3];
//   cyl.frame_b.v[1] = piston.body.body.frame_a.v[1];
//   cyl.frame_b.v[1] = piston.body.frameTranslation.frame_a.v[1];
//   cyl.frame_b.v[1] = piston.body.frame_a.v[1];
//   cyl.frame_b.v[1] = piston.frame_a.v[1];
//   cyl.frame_b.v[1] = piston.vis.frame_a.v[1];
//   cyl.frame_b.v[1] = rod.frame_a.v[1];
//   cyl.frame_b.v[2] = piston.body.body.frame_a.v[2];
//   cyl.frame_b.v[2] = piston.body.frameTranslation.frame_a.v[2];
//   cyl.frame_b.v[2] = piston.body.frame_a.v[2];
//   cyl.frame_b.v[2] = piston.frame_a.v[2];
//   cyl.frame_b.v[2] = piston.vis.frame_a.v[2];
//   cyl.frame_b.v[2] = rod.frame_a.v[2];
//   cyl.frame_b.v[3] = piston.body.body.frame_a.v[3];
//   cyl.frame_b.v[3] = piston.body.frameTranslation.frame_a.v[3];
//   cyl.frame_b.v[3] = piston.body.frame_a.v[3];
//   cyl.frame_b.v[3] = piston.frame_a.v[3];
//   cyl.frame_b.v[3] = piston.vis.frame_a.v[3];
//   cyl.frame_b.v[3] = rod.frame_a.v[3];
//   cyl.frame_b.S[1,1] = piston.body.body.frame_a.S[1,1];
//   cyl.frame_b.S[1,1] = piston.body.frameTranslation.frame_a.S[1,1];
//   cyl.frame_b.S[1,1] = piston.body.frame_a.S[1,1];
//   cyl.frame_b.S[1,1] = piston.frame_a.S[1,1];
//   cyl.frame_b.S[1,1] = piston.vis.frame_a.S[1,1];
//   cyl.frame_b.S[1,1] = rod.frame_a.S[1,1];
//   cyl.frame_b.S[1,2] = piston.body.body.frame_a.S[1,2];
//   cyl.frame_b.S[1,2] = piston.body.frameTranslation.frame_a.S[1,2];
//   cyl.frame_b.S[1,2] = piston.body.frame_a.S[1,2];
//   cyl.frame_b.S[1,2] = piston.frame_a.S[1,2];
//   cyl.frame_b.S[1,2] = piston.vis.frame_a.S[1,2];
//   cyl.frame_b.S[1,2] = rod.frame_a.S[1,2];
//   cyl.frame_b.S[1,3] = piston.body.body.frame_a.S[1,3];
//   cyl.frame_b.S[1,3] = piston.body.frameTranslation.frame_a.S[1,3];
//   cyl.frame_b.S[1,3] = piston.body.frame_a.S[1,3];
//   cyl.frame_b.S[1,3] = piston.frame_a.S[1,3];
//   cyl.frame_b.S[1,3] = piston.vis.frame_a.S[1,3];
//   cyl.frame_b.S[1,3] = rod.frame_a.S[1,3];
//   cyl.frame_b.S[2,1] = piston.body.body.frame_a.S[2,1];
//   cyl.frame_b.S[2,1] = piston.body.frameTranslation.frame_a.S[2,1];
//   cyl.frame_b.S[2,1] = piston.body.frame_a.S[2,1];
//   cyl.frame_b.S[2,1] = piston.frame_a.S[2,1];
//   cyl.frame_b.S[2,1] = piston.vis.frame_a.S[2,1];
//   cyl.frame_b.S[2,1] = rod.frame_a.S[2,1];
//   cyl.frame_b.S[2,2] = piston.body.body.frame_a.S[2,2];
//   cyl.frame_b.S[2,2] = piston.body.frameTranslation.frame_a.S[2,2];
//   cyl.frame_b.S[2,2] = piston.body.frame_a.S[2,2];
//   cyl.frame_b.S[2,2] = piston.frame_a.S[2,2];
//   cyl.frame_b.S[2,2] = piston.vis.frame_a.S[2,2];
//   cyl.frame_b.S[2,2] = rod.frame_a.S[2,2];
//   cyl.frame_b.S[2,3] = piston.body.body.frame_a.S[2,3];
//   cyl.frame_b.S[2,3] = piston.body.frameTranslation.frame_a.S[2,3];
//   cyl.frame_b.S[2,3] = piston.body.frame_a.S[2,3];
//   cyl.frame_b.S[2,3] = piston.frame_a.S[2,3];
//   cyl.frame_b.S[2,3] = piston.vis.frame_a.S[2,3];
//   cyl.frame_b.S[2,3] = rod.frame_a.S[2,3];
//   cyl.frame_b.S[3,1] = piston.body.body.frame_a.S[3,1];
//   cyl.frame_b.S[3,1] = piston.body.frameTranslation.frame_a.S[3,1];
//   cyl.frame_b.S[3,1] = piston.body.frame_a.S[3,1];
//   cyl.frame_b.S[3,1] = piston.frame_a.S[3,1];
//   cyl.frame_b.S[3,1] = piston.vis.frame_a.S[3,1];
//   cyl.frame_b.S[3,1] = rod.frame_a.S[3,1];
//   cyl.frame_b.S[3,2] = piston.body.body.frame_a.S[3,2];
//   cyl.frame_b.S[3,2] = piston.body.frameTranslation.frame_a.S[3,2];
//   cyl.frame_b.S[3,2] = piston.body.frame_a.S[3,2];
//   cyl.frame_b.S[3,2] = piston.frame_a.S[3,2];
//   cyl.frame_b.S[3,2] = piston.vis.frame_a.S[3,2];
//   cyl.frame_b.S[3,2] = rod.frame_a.S[3,2];
//   cyl.frame_b.S[3,3] = piston.body.body.frame_a.S[3,3];
//   cyl.frame_b.S[3,3] = piston.body.frameTranslation.frame_a.S[3,3];
//   cyl.frame_b.S[3,3] = piston.body.frame_a.S[3,3];
//   cyl.frame_b.S[3,3] = piston.frame_a.S[3,3];
//   cyl.frame_b.S[3,3] = piston.vis.frame_a.S[3,3];
//   cyl.frame_b.S[3,3] = rod.frame_a.S[3,3];
//   cyl.frame_b.r0[1] = piston.body.body.frame_a.r0[1];
//   cyl.frame_b.r0[1] = piston.body.frameTranslation.frame_a.r0[1];
//   cyl.frame_b.r0[1] = piston.body.frame_a.r0[1];
//   cyl.frame_b.r0[1] = piston.frame_a.r0[1];
//   cyl.frame_b.r0[1] = piston.vis.frame_a.r0[1];
//   cyl.frame_b.r0[1] = rod.frame_a.r0[1];
//   cyl.frame_b.r0[2] = piston.body.body.frame_a.r0[2];
//   cyl.frame_b.r0[2] = piston.body.frameTranslation.frame_a.r0[2];
//   cyl.frame_b.r0[2] = piston.body.frame_a.r0[2];
//   cyl.frame_b.r0[2] = piston.frame_a.r0[2];
//   cyl.frame_b.r0[2] = piston.vis.frame_a.r0[2];
//   cyl.frame_b.r0[2] = rod.frame_a.r0[2];
//   cyl.frame_b.r0[3] = piston.body.body.frame_a.r0[3];
//   cyl.frame_b.r0[3] = piston.body.frameTranslation.frame_a.r0[3];
//   cyl.frame_b.r0[3] = piston.body.frame_a.r0[3];
//   cyl.frame_b.r0[3] = piston.frame_a.r0[3];
//   cyl.frame_b.r0[3] = piston.vis.frame_a.r0[3];
//   cyl.frame_b.r0[3] = rod.frame_a.r0[3];
//   trans.frame_b.t[1] + cyl.frame_a.t[1] = 0.0;
//   trans.frame_b.t[2] + cyl.frame_a.t[2] = 0.0;
//   trans.frame_b.t[3] + cyl.frame_a.t[3] = 0.0;
//   trans.frame_b.f[1] + cyl.frame_a.f[1] = 0.0;
//   trans.frame_b.f[2] + cyl.frame_a.f[2] = 0.0;
//   trans.frame_b.f[3] + cyl.frame_a.f[3] = 0.0;
//   cyl.frame_a.z[1] = trans.frame_b.z[1];
//   cyl.frame_a.z[2] = trans.frame_b.z[2];
//   cyl.frame_a.z[3] = trans.frame_b.z[3];
//   cyl.frame_a.a[1] = trans.frame_b.a[1];
//   cyl.frame_a.a[2] = trans.frame_b.a[2];
//   cyl.frame_a.a[3] = trans.frame_b.a[3];
//   cyl.frame_a.w[1] = trans.frame_b.w[1];
//   cyl.frame_a.w[2] = trans.frame_b.w[2];
//   cyl.frame_a.w[3] = trans.frame_b.w[3];
//   cyl.frame_a.v[1] = trans.frame_b.v[1];
//   cyl.frame_a.v[2] = trans.frame_b.v[2];
//   cyl.frame_a.v[3] = trans.frame_b.v[3];
//   cyl.frame_a.S[1,1] = trans.frame_b.S[1,1];
//   cyl.frame_a.S[1,2] = trans.frame_b.S[1,2];
//   cyl.frame_a.S[1,3] = trans.frame_b.S[1,3];
//   cyl.frame_a.S[2,1] = trans.frame_b.S[2,1];
//   cyl.frame_a.S[2,2] = trans.frame_b.S[2,2];
//   cyl.frame_a.S[2,3] = trans.frame_b.S[2,3];
//   cyl.frame_a.S[3,1] = trans.frame_b.S[3,1];
//   cyl.frame_a.S[3,2] = trans.frame_b.S[3,2];
//   cyl.frame_a.S[3,3] = trans.frame_b.S[3,3];
//   cyl.frame_a.r0[1] = trans.frame_b.r0[1];
//   cyl.frame_a.r0[2] = trans.frame_b.r0[2];
//   cyl.frame_a.r0[3] = trans.frame_b.r0[3];
//   flyWheel.flange_b.tau + r1.axis.tau = 0.0;
//   flyWheel.flange_b.phi = r1.axis.phi;
//   r1.frame_b.t[1] + crank.frame_a.t[1] = 0.0;
//   r1.frame_b.t[2] + crank.frame_a.t[2] = 0.0;
//   r1.frame_b.t[3] + crank.frame_a.t[3] = 0.0;
//   r1.frame_b.f[1] + crank.frame_a.f[1] = 0.0;
//   r1.frame_b.f[2] + crank.frame_a.f[2] = 0.0;
//   r1.frame_b.f[3] + crank.frame_a.f[3] = 0.0;
//   crank.body.body.frame_a.z[1] = crank.body.frameTranslation.frame_a.z[1];
//   crank.body.body.frame_a.z[1] = crank.body.frame_a.z[1];
//   crank.body.body.frame_a.z[1] = crank.frame_a.z[1];
//   crank.body.body.frame_a.z[1] = crank.vis.frame_a.z[1];
//   crank.body.body.frame_a.z[1] = r1.frame_b.z[1];
//   crank.body.body.frame_a.z[2] = crank.body.frameTranslation.frame_a.z[2];
//   crank.body.body.frame_a.z[2] = crank.body.frame_a.z[2];
//   crank.body.body.frame_a.z[2] = crank.frame_a.z[2];
//   crank.body.body.frame_a.z[2] = crank.vis.frame_a.z[2];
//   crank.body.body.frame_a.z[2] = r1.frame_b.z[2];
//   crank.body.body.frame_a.z[3] = crank.body.frameTranslation.frame_a.z[3];
//   crank.body.body.frame_a.z[3] = crank.body.frame_a.z[3];
//   crank.body.body.frame_a.z[3] = crank.frame_a.z[3];
//   crank.body.body.frame_a.z[3] = crank.vis.frame_a.z[3];
//   crank.body.body.frame_a.z[3] = r1.frame_b.z[3];
//   crank.body.body.frame_a.a[1] = crank.body.frameTranslation.frame_a.a[1];
//   crank.body.body.frame_a.a[1] = crank.body.frame_a.a[1];
//   crank.body.body.frame_a.a[1] = crank.frame_a.a[1];
//   crank.body.body.frame_a.a[1] = crank.vis.frame_a.a[1];
//   crank.body.body.frame_a.a[1] = r1.frame_b.a[1];
//   crank.body.body.frame_a.a[2] = crank.body.frameTranslation.frame_a.a[2];
//   crank.body.body.frame_a.a[2] = crank.body.frame_a.a[2];
//   crank.body.body.frame_a.a[2] = crank.frame_a.a[2];
//   crank.body.body.frame_a.a[2] = crank.vis.frame_a.a[2];
//   crank.body.body.frame_a.a[2] = r1.frame_b.a[2];
//   crank.body.body.frame_a.a[3] = crank.body.frameTranslation.frame_a.a[3];
//   crank.body.body.frame_a.a[3] = crank.body.frame_a.a[3];
//   crank.body.body.frame_a.a[3] = crank.frame_a.a[3];
//   crank.body.body.frame_a.a[3] = crank.vis.frame_a.a[3];
//   crank.body.body.frame_a.a[3] = r1.frame_b.a[3];
//   crank.body.body.frame_a.w[1] = crank.body.frameTranslation.frame_a.w[1];
//   crank.body.body.frame_a.w[1] = crank.body.frame_a.w[1];
//   crank.body.body.frame_a.w[1] = crank.frame_a.w[1];
//   crank.body.body.frame_a.w[1] = crank.vis.frame_a.w[1];
//   crank.body.body.frame_a.w[1] = r1.frame_b.w[1];
//   crank.body.body.frame_a.w[2] = crank.body.frameTranslation.frame_a.w[2];
//   crank.body.body.frame_a.w[2] = crank.body.frame_a.w[2];
//   crank.body.body.frame_a.w[2] = crank.frame_a.w[2];
//   crank.body.body.frame_a.w[2] = crank.vis.frame_a.w[2];
//   crank.body.body.frame_a.w[2] = r1.frame_b.w[2];
//   crank.body.body.frame_a.w[3] = crank.body.frameTranslation.frame_a.w[3];
//   crank.body.body.frame_a.w[3] = crank.body.frame_a.w[3];
//   crank.body.body.frame_a.w[3] = crank.frame_a.w[3];
//   crank.body.body.frame_a.w[3] = crank.vis.frame_a.w[3];
//   crank.body.body.frame_a.w[3] = r1.frame_b.w[3];
//   crank.body.body.frame_a.v[1] = crank.body.frameTranslation.frame_a.v[1];
//   crank.body.body.frame_a.v[1] = crank.body.frame_a.v[1];
//   crank.body.body.frame_a.v[1] = crank.frame_a.v[1];
//   crank.body.body.frame_a.v[1] = crank.vis.frame_a.v[1];
//   crank.body.body.frame_a.v[1] = r1.frame_b.v[1];
//   crank.body.body.frame_a.v[2] = crank.body.frameTranslation.frame_a.v[2];
//   crank.body.body.frame_a.v[2] = crank.body.frame_a.v[2];
//   crank.body.body.frame_a.v[2] = crank.frame_a.v[2];
//   crank.body.body.frame_a.v[2] = crank.vis.frame_a.v[2];
//   crank.body.body.frame_a.v[2] = r1.frame_b.v[2];
//   crank.body.body.frame_a.v[3] = crank.body.frameTranslation.frame_a.v[3];
//   crank.body.body.frame_a.v[3] = crank.body.frame_a.v[3];
//   crank.body.body.frame_a.v[3] = crank.frame_a.v[3];
//   crank.body.body.frame_a.v[3] = crank.vis.frame_a.v[3];
//   crank.body.body.frame_a.v[3] = r1.frame_b.v[3];
//   crank.body.body.frame_a.S[1,1] = crank.body.frameTranslation.frame_a.S[1,1];
//   crank.body.body.frame_a.S[1,1] = crank.body.frame_a.S[1,1];
//   crank.body.body.frame_a.S[1,1] = crank.frame_a.S[1,1];
//   crank.body.body.frame_a.S[1,1] = crank.vis.frame_a.S[1,1];
//   crank.body.body.frame_a.S[1,1] = r1.frame_b.S[1,1];
//   crank.body.body.frame_a.S[1,2] = crank.body.frameTranslation.frame_a.S[1,2];
//   crank.body.body.frame_a.S[1,2] = crank.body.frame_a.S[1,2];
//   crank.body.body.frame_a.S[1,2] = crank.frame_a.S[1,2];
//   crank.body.body.frame_a.S[1,2] = crank.vis.frame_a.S[1,2];
//   crank.body.body.frame_a.S[1,2] = r1.frame_b.S[1,2];
//   crank.body.body.frame_a.S[1,3] = crank.body.frameTranslation.frame_a.S[1,3];
//   crank.body.body.frame_a.S[1,3] = crank.body.frame_a.S[1,3];
//   crank.body.body.frame_a.S[1,3] = crank.frame_a.S[1,3];
//   crank.body.body.frame_a.S[1,3] = crank.vis.frame_a.S[1,3];
//   crank.body.body.frame_a.S[1,3] = r1.frame_b.S[1,3];
//   crank.body.body.frame_a.S[2,1] = crank.body.frameTranslation.frame_a.S[2,1];
//   crank.body.body.frame_a.S[2,1] = crank.body.frame_a.S[2,1];
//   crank.body.body.frame_a.S[2,1] = crank.frame_a.S[2,1];
//   crank.body.body.frame_a.S[2,1] = crank.vis.frame_a.S[2,1];
//   crank.body.body.frame_a.S[2,1] = r1.frame_b.S[2,1];
//   crank.body.body.frame_a.S[2,2] = crank.body.frameTranslation.frame_a.S[2,2];
//   crank.body.body.frame_a.S[2,2] = crank.body.frame_a.S[2,2];
//   crank.body.body.frame_a.S[2,2] = crank.frame_a.S[2,2];
//   crank.body.body.frame_a.S[2,2] = crank.vis.frame_a.S[2,2];
//   crank.body.body.frame_a.S[2,2] = r1.frame_b.S[2,2];
//   crank.body.body.frame_a.S[2,3] = crank.body.frameTranslation.frame_a.S[2,3];
//   crank.body.body.frame_a.S[2,3] = crank.body.frame_a.S[2,3];
//   crank.body.body.frame_a.S[2,3] = crank.frame_a.S[2,3];
//   crank.body.body.frame_a.S[2,3] = crank.vis.frame_a.S[2,3];
//   crank.body.body.frame_a.S[2,3] = r1.frame_b.S[2,3];
//   crank.body.body.frame_a.S[3,1] = crank.body.frameTranslation.frame_a.S[3,1];
//   crank.body.body.frame_a.S[3,1] = crank.body.frame_a.S[3,1];
//   crank.body.body.frame_a.S[3,1] = crank.frame_a.S[3,1];
//   crank.body.body.frame_a.S[3,1] = crank.vis.frame_a.S[3,1];
//   crank.body.body.frame_a.S[3,1] = r1.frame_b.S[3,1];
//   crank.body.body.frame_a.S[3,2] = crank.body.frameTranslation.frame_a.S[3,2];
//   crank.body.body.frame_a.S[3,2] = crank.body.frame_a.S[3,2];
//   crank.body.body.frame_a.S[3,2] = crank.frame_a.S[3,2];
//   crank.body.body.frame_a.S[3,2] = crank.vis.frame_a.S[3,2];
//   crank.body.body.frame_a.S[3,2] = r1.frame_b.S[3,2];
//   crank.body.body.frame_a.S[3,3] = crank.body.frameTranslation.frame_a.S[3,3];
//   crank.body.body.frame_a.S[3,3] = crank.body.frame_a.S[3,3];
//   crank.body.body.frame_a.S[3,3] = crank.frame_a.S[3,3];
//   crank.body.body.frame_a.S[3,3] = crank.vis.frame_a.S[3,3];
//   crank.body.body.frame_a.S[3,3] = r1.frame_b.S[3,3];
//   crank.body.body.frame_a.r0[1] = crank.body.frameTranslation.frame_a.r0[1];
//   crank.body.body.frame_a.r0[1] = crank.body.frame_a.r0[1];
//   crank.body.body.frame_a.r0[1] = crank.frame_a.r0[1];
//   crank.body.body.frame_a.r0[1] = crank.vis.frame_a.r0[1];
//   crank.body.body.frame_a.r0[1] = r1.frame_b.r0[1];
//   crank.body.body.frame_a.r0[2] = crank.body.frameTranslation.frame_a.r0[2];
//   crank.body.body.frame_a.r0[2] = crank.body.frame_a.r0[2];
//   crank.body.body.frame_a.r0[2] = crank.frame_a.r0[2];
//   crank.body.body.frame_a.r0[2] = crank.vis.frame_a.r0[2];
//   crank.body.body.frame_a.r0[2] = r1.frame_b.r0[2];
//   crank.body.body.frame_a.r0[3] = crank.body.frameTranslation.frame_a.r0[3];
//   crank.body.body.frame_a.r0[3] = crank.body.frame_a.r0[3];
//   crank.body.body.frame_a.r0[3] = crank.frame_a.r0[3];
//   crank.body.body.frame_a.r0[3] = crank.vis.frame_a.r0[3];
//   crank.body.body.frame_a.r0[3] = r1.frame_b.r0[3];
//   inertial.frame_b.t[1] + (trans.frame_a.t[1] + r1.frame_a.t[1]) = 0.0;
//   inertial.frame_b.t[2] + (trans.frame_a.t[2] + r1.frame_a.t[2]) = 0.0;
//   inertial.frame_b.t[3] + (trans.frame_a.t[3] + r1.frame_a.t[3]) = 0.0;
//   inertial.frame_b.f[1] + (trans.frame_a.f[1] + r1.frame_a.f[1]) = 0.0;
//   inertial.frame_b.f[2] + (trans.frame_a.f[2] + r1.frame_a.f[2]) = 0.0;
//   inertial.frame_b.f[3] + (trans.frame_a.f[3] + r1.frame_a.f[3]) = 0.0;
//   inertial.frame_b.z[1] = r1.frame_a.z[1];
//   inertial.frame_b.z[1] = trans.frame_a.z[1];
//   inertial.frame_b.z[2] = r1.frame_a.z[2];
//   inertial.frame_b.z[2] = trans.frame_a.z[2];
//   inertial.frame_b.z[3] = r1.frame_a.z[3];
//   inertial.frame_b.z[3] = trans.frame_a.z[3];
//   inertial.frame_b.a[1] = r1.frame_a.a[1];
//   inertial.frame_b.a[1] = trans.frame_a.a[1];
//   inertial.frame_b.a[2] = r1.frame_a.a[2];
//   inertial.frame_b.a[2] = trans.frame_a.a[2];
//   inertial.frame_b.a[3] = r1.frame_a.a[3];
//   inertial.frame_b.a[3] = trans.frame_a.a[3];
//   inertial.frame_b.w[1] = r1.frame_a.w[1];
//   inertial.frame_b.w[1] = trans.frame_a.w[1];
//   inertial.frame_b.w[2] = r1.frame_a.w[2];
//   inertial.frame_b.w[2] = trans.frame_a.w[2];
//   inertial.frame_b.w[3] = r1.frame_a.w[3];
//   inertial.frame_b.w[3] = trans.frame_a.w[3];
//   inertial.frame_b.v[1] = r1.frame_a.v[1];
//   inertial.frame_b.v[1] = trans.frame_a.v[1];
//   inertial.frame_b.v[2] = r1.frame_a.v[2];
//   inertial.frame_b.v[2] = trans.frame_a.v[2];
//   inertial.frame_b.v[3] = r1.frame_a.v[3];
//   inertial.frame_b.v[3] = trans.frame_a.v[3];
//   inertial.frame_b.S[1,1] = r1.frame_a.S[1,1];
//   inertial.frame_b.S[1,1] = trans.frame_a.S[1,1];
//   inertial.frame_b.S[1,2] = r1.frame_a.S[1,2];
//   inertial.frame_b.S[1,2] = trans.frame_a.S[1,2];
//   inertial.frame_b.S[1,3] = r1.frame_a.S[1,3];
//   inertial.frame_b.S[1,3] = trans.frame_a.S[1,3];
//   inertial.frame_b.S[2,1] = r1.frame_a.S[2,1];
//   inertial.frame_b.S[2,1] = trans.frame_a.S[2,1];
//   inertial.frame_b.S[2,2] = r1.frame_a.S[2,2];
//   inertial.frame_b.S[2,2] = trans.frame_a.S[2,2];
//   inertial.frame_b.S[2,3] = r1.frame_a.S[2,3];
//   inertial.frame_b.S[2,3] = trans.frame_a.S[2,3];
//   inertial.frame_b.S[3,1] = r1.frame_a.S[3,1];
//   inertial.frame_b.S[3,1] = trans.frame_a.S[3,1];
//   inertial.frame_b.S[3,2] = r1.frame_a.S[3,2];
//   inertial.frame_b.S[3,2] = trans.frame_a.S[3,2];
//   inertial.frame_b.S[3,3] = r1.frame_a.S[3,3];
//   inertial.frame_b.S[3,3] = trans.frame_a.S[3,3];
//   inertial.frame_b.r0[1] = r1.frame_a.r0[1];
//   inertial.frame_b.r0[1] = trans.frame_a.r0[1];
//   inertial.frame_b.r0[2] = r1.frame_a.r0[2];
//   inertial.frame_b.r0[2] = trans.frame_a.r0[2];
//   inertial.frame_b.r0[3] = r1.frame_a.r0[3];
//   inertial.frame_b.r0[3] = trans.frame_a.r0[3];
//   rod.frame_c.t[1] + rodBody.frame_a.t[1] = 0.0;
//   rod.frame_c.t[2] + rodBody.frame_a.t[2] = 0.0;
//   rod.frame_c.t[3] + rodBody.frame_a.t[3] = 0.0;
//   rod.frame_c.f[1] + rodBody.frame_a.f[1] = 0.0;
//   rod.frame_c.f[2] + rodBody.frame_a.f[2] = 0.0;
//   rod.frame_c.f[3] + rodBody.frame_a.f[3] = 0.0;
//   rod.frame_c.z[1] = rodBody.body.body.frame_a.z[1];
//   rod.frame_c.z[1] = rodBody.body.frameTranslation.frame_a.z[1];
//   rod.frame_c.z[1] = rodBody.body.frame_a.z[1];
//   rod.frame_c.z[1] = rodBody.frame_a.z[1];
//   rod.frame_c.z[1] = rodBody.vis.frame_a.z[1];
//   rod.frame_c.z[2] = rodBody.body.body.frame_a.z[2];
//   rod.frame_c.z[2] = rodBody.body.frameTranslation.frame_a.z[2];
//   rod.frame_c.z[2] = rodBody.body.frame_a.z[2];
//   rod.frame_c.z[2] = rodBody.frame_a.z[2];
//   rod.frame_c.z[2] = rodBody.vis.frame_a.z[2];
//   rod.frame_c.z[3] = rodBody.body.body.frame_a.z[3];
//   rod.frame_c.z[3] = rodBody.body.frameTranslation.frame_a.z[3];
//   rod.frame_c.z[3] = rodBody.body.frame_a.z[3];
//   rod.frame_c.z[3] = rodBody.frame_a.z[3];
//   rod.frame_c.z[3] = rodBody.vis.frame_a.z[3];
//   rod.frame_c.a[1] = rodBody.body.body.frame_a.a[1];
//   rod.frame_c.a[1] = rodBody.body.frameTranslation.frame_a.a[1];
//   rod.frame_c.a[1] = rodBody.body.frame_a.a[1];
//   rod.frame_c.a[1] = rodBody.frame_a.a[1];
//   rod.frame_c.a[1] = rodBody.vis.frame_a.a[1];
//   rod.frame_c.a[2] = rodBody.body.body.frame_a.a[2];
//   rod.frame_c.a[2] = rodBody.body.frameTranslation.frame_a.a[2];
//   rod.frame_c.a[2] = rodBody.body.frame_a.a[2];
//   rod.frame_c.a[2] = rodBody.frame_a.a[2];
//   rod.frame_c.a[2] = rodBody.vis.frame_a.a[2];
//   rod.frame_c.a[3] = rodBody.body.body.frame_a.a[3];
//   rod.frame_c.a[3] = rodBody.body.frameTranslation.frame_a.a[3];
//   rod.frame_c.a[3] = rodBody.body.frame_a.a[3];
//   rod.frame_c.a[3] = rodBody.frame_a.a[3];
//   rod.frame_c.a[3] = rodBody.vis.frame_a.a[3];
//   rod.frame_c.w[1] = rodBody.body.body.frame_a.w[1];
//   rod.frame_c.w[1] = rodBody.body.frameTranslation.frame_a.w[1];
//   rod.frame_c.w[1] = rodBody.body.frame_a.w[1];
//   rod.frame_c.w[1] = rodBody.frame_a.w[1];
//   rod.frame_c.w[1] = rodBody.vis.frame_a.w[1];
//   rod.frame_c.w[2] = rodBody.body.body.frame_a.w[2];
//   rod.frame_c.w[2] = rodBody.body.frameTranslation.frame_a.w[2];
//   rod.frame_c.w[2] = rodBody.body.frame_a.w[2];
//   rod.frame_c.w[2] = rodBody.frame_a.w[2];
//   rod.frame_c.w[2] = rodBody.vis.frame_a.w[2];
//   rod.frame_c.w[3] = rodBody.body.body.frame_a.w[3];
//   rod.frame_c.w[3] = rodBody.body.frameTranslation.frame_a.w[3];
//   rod.frame_c.w[3] = rodBody.body.frame_a.w[3];
//   rod.frame_c.w[3] = rodBody.frame_a.w[3];
//   rod.frame_c.w[3] = rodBody.vis.frame_a.w[3];
//   rod.frame_c.v[1] = rodBody.body.body.frame_a.v[1];
//   rod.frame_c.v[1] = rodBody.body.frameTranslation.frame_a.v[1];
//   rod.frame_c.v[1] = rodBody.body.frame_a.v[1];
//   rod.frame_c.v[1] = rodBody.frame_a.v[1];
//   rod.frame_c.v[1] = rodBody.vis.frame_a.v[1];
//   rod.frame_c.v[2] = rodBody.body.body.frame_a.v[2];
//   rod.frame_c.v[2] = rodBody.body.frameTranslation.frame_a.v[2];
//   rod.frame_c.v[2] = rodBody.body.frame_a.v[2];
//   rod.frame_c.v[2] = rodBody.frame_a.v[2];
//   rod.frame_c.v[2] = rodBody.vis.frame_a.v[2];
//   rod.frame_c.v[3] = rodBody.body.body.frame_a.v[3];
//   rod.frame_c.v[3] = rodBody.body.frameTranslation.frame_a.v[3];
//   rod.frame_c.v[3] = rodBody.body.frame_a.v[3];
//   rod.frame_c.v[3] = rodBody.frame_a.v[3];
//   rod.frame_c.v[3] = rodBody.vis.frame_a.v[3];
//   rod.frame_c.S[1,1] = rodBody.body.body.frame_a.S[1,1];
//   rod.frame_c.S[1,1] = rodBody.body.frameTranslation.frame_a.S[1,1];
//   rod.frame_c.S[1,1] = rodBody.body.frame_a.S[1,1];
//   rod.frame_c.S[1,1] = rodBody.frame_a.S[1,1];
//   rod.frame_c.S[1,1] = rodBody.vis.frame_a.S[1,1];
//   rod.frame_c.S[1,2] = rodBody.body.body.frame_a.S[1,2];
//   rod.frame_c.S[1,2] = rodBody.body.frameTranslation.frame_a.S[1,2];
//   rod.frame_c.S[1,2] = rodBody.body.frame_a.S[1,2];
//   rod.frame_c.S[1,2] = rodBody.frame_a.S[1,2];
//   rod.frame_c.S[1,2] = rodBody.vis.frame_a.S[1,2];
//   rod.frame_c.S[1,3] = rodBody.body.body.frame_a.S[1,3];
//   rod.frame_c.S[1,3] = rodBody.body.frameTranslation.frame_a.S[1,3];
//   rod.frame_c.S[1,3] = rodBody.body.frame_a.S[1,3];
//   rod.frame_c.S[1,3] = rodBody.frame_a.S[1,3];
//   rod.frame_c.S[1,3] = rodBody.vis.frame_a.S[1,3];
//   rod.frame_c.S[2,1] = rodBody.body.body.frame_a.S[2,1];
//   rod.frame_c.S[2,1] = rodBody.body.frameTranslation.frame_a.S[2,1];
//   rod.frame_c.S[2,1] = rodBody.body.frame_a.S[2,1];
//   rod.frame_c.S[2,1] = rodBody.frame_a.S[2,1];
//   rod.frame_c.S[2,1] = rodBody.vis.frame_a.S[2,1];
//   rod.frame_c.S[2,2] = rodBody.body.body.frame_a.S[2,2];
//   rod.frame_c.S[2,2] = rodBody.body.frameTranslation.frame_a.S[2,2];
//   rod.frame_c.S[2,2] = rodBody.body.frame_a.S[2,2];
//   rod.frame_c.S[2,2] = rodBody.frame_a.S[2,2];
//   rod.frame_c.S[2,2] = rodBody.vis.frame_a.S[2,2];
//   rod.frame_c.S[2,3] = rodBody.body.body.frame_a.S[2,3];
//   rod.frame_c.S[2,3] = rodBody.body.frameTranslation.frame_a.S[2,3];
//   rod.frame_c.S[2,3] = rodBody.body.frame_a.S[2,3];
//   rod.frame_c.S[2,3] = rodBody.frame_a.S[2,3];
//   rod.frame_c.S[2,3] = rodBody.vis.frame_a.S[2,3];
//   rod.frame_c.S[3,1] = rodBody.body.body.frame_a.S[3,1];
//   rod.frame_c.S[3,1] = rodBody.body.frameTranslation.frame_a.S[3,1];
//   rod.frame_c.S[3,1] = rodBody.body.frame_a.S[3,1];
//   rod.frame_c.S[3,1] = rodBody.frame_a.S[3,1];
//   rod.frame_c.S[3,1] = rodBody.vis.frame_a.S[3,1];
//   rod.frame_c.S[3,2] = rodBody.body.body.frame_a.S[3,2];
//   rod.frame_c.S[3,2] = rodBody.body.frameTranslation.frame_a.S[3,2];
//   rod.frame_c.S[3,2] = rodBody.body.frame_a.S[3,2];
//   rod.frame_c.S[3,2] = rodBody.frame_a.S[3,2];
//   rod.frame_c.S[3,2] = rodBody.vis.frame_a.S[3,2];
//   rod.frame_c.S[3,3] = rodBody.body.body.frame_a.S[3,3];
//   rod.frame_c.S[3,3] = rodBody.body.frameTranslation.frame_a.S[3,3];
//   rod.frame_c.S[3,3] = rodBody.body.frame_a.S[3,3];
//   rod.frame_c.S[3,3] = rodBody.frame_a.S[3,3];
//   rod.frame_c.S[3,3] = rodBody.vis.frame_a.S[3,3];
//   rod.frame_c.r0[1] = rodBody.body.body.frame_a.r0[1];
//   rod.frame_c.r0[1] = rodBody.body.frameTranslation.frame_a.r0[1];
//   rod.frame_c.r0[1] = rodBody.body.frame_a.r0[1];
//   rod.frame_c.r0[1] = rodBody.frame_a.r0[1];
//   rod.frame_c.r0[1] = rodBody.vis.frame_a.r0[1];
//   rod.frame_c.r0[2] = rodBody.body.body.frame_a.r0[2];
//   rod.frame_c.r0[2] = rodBody.body.frameTranslation.frame_a.r0[2];
//   rod.frame_c.r0[2] = rodBody.body.frame_a.r0[2];
//   rod.frame_c.r0[2] = rodBody.frame_a.r0[2];
//   rod.frame_c.r0[2] = rodBody.vis.frame_a.r0[2];
//   rod.frame_c.r0[3] = rodBody.body.body.frame_a.r0[3];
//   rod.frame_c.r0[3] = rodBody.body.frameTranslation.frame_a.r0[3];
//   rod.frame_c.r0[3] = rodBody.body.frame_a.r0[3];
//   rod.frame_c.r0[3] = rodBody.frame_a.r0[3];
//   rod.frame_c.r0[3] = rodBody.vis.frame_a.r0[3];
//   crank.frame_b.t[1] + rod.frame_b.t[1] = 0.0;
//   crank.frame_b.t[2] + rod.frame_b.t[2] = 0.0;
//   crank.frame_b.t[3] + rod.frame_b.t[3] = 0.0;
//   crank.frame_b.f[1] + rod.frame_b.f[1] = 0.0;
//   crank.frame_b.f[2] + rod.frame_b.f[2] = 0.0;
//   crank.frame_b.f[3] + rod.frame_b.f[3] = 0.0;
//   crank.body.frameTranslation.frame_b.z[1] = crank.body.frame_b.z[1];
//   crank.body.frameTranslation.frame_b.z[1] = crank.frame_b.z[1];
//   crank.body.frameTranslation.frame_b.z[1] = rod.frame_b.z[1];
//   crank.body.frameTranslation.frame_b.z[2] = crank.body.frame_b.z[2];
//   crank.body.frameTranslation.frame_b.z[2] = crank.frame_b.z[2];
//   crank.body.frameTranslation.frame_b.z[2] = rod.frame_b.z[2];
//   crank.body.frameTranslation.frame_b.z[3] = crank.body.frame_b.z[3];
//   crank.body.frameTranslation.frame_b.z[3] = crank.frame_b.z[3];
//   crank.body.frameTranslation.frame_b.z[3] = rod.frame_b.z[3];
//   crank.body.frameTranslation.frame_b.a[1] = crank.body.frame_b.a[1];
//   crank.body.frameTranslation.frame_b.a[1] = crank.frame_b.a[1];
//   crank.body.frameTranslation.frame_b.a[1] = rod.frame_b.a[1];
//   crank.body.frameTranslation.frame_b.a[2] = crank.body.frame_b.a[2];
//   crank.body.frameTranslation.frame_b.a[2] = crank.frame_b.a[2];
//   crank.body.frameTranslation.frame_b.a[2] = rod.frame_b.a[2];
//   crank.body.frameTranslation.frame_b.a[3] = crank.body.frame_b.a[3];
//   crank.body.frameTranslation.frame_b.a[3] = crank.frame_b.a[3];
//   crank.body.frameTranslation.frame_b.a[3] = rod.frame_b.a[3];
//   crank.body.frameTranslation.frame_b.w[1] = crank.body.frame_b.w[1];
//   crank.body.frameTranslation.frame_b.w[1] = crank.frame_b.w[1];
//   crank.body.frameTranslation.frame_b.w[1] = rod.frame_b.w[1];
//   crank.body.frameTranslation.frame_b.w[2] = crank.body.frame_b.w[2];
//   crank.body.frameTranslation.frame_b.w[2] = crank.frame_b.w[2];
//   crank.body.frameTranslation.frame_b.w[2] = rod.frame_b.w[2];
//   crank.body.frameTranslation.frame_b.w[3] = crank.body.frame_b.w[3];
//   crank.body.frameTranslation.frame_b.w[3] = crank.frame_b.w[3];
//   crank.body.frameTranslation.frame_b.w[3] = rod.frame_b.w[3];
//   crank.body.frameTranslation.frame_b.v[1] = crank.body.frame_b.v[1];
//   crank.body.frameTranslation.frame_b.v[1] = crank.frame_b.v[1];
//   crank.body.frameTranslation.frame_b.v[1] = rod.frame_b.v[1];
//   crank.body.frameTranslation.frame_b.v[2] = crank.body.frame_b.v[2];
//   crank.body.frameTranslation.frame_b.v[2] = crank.frame_b.v[2];
//   crank.body.frameTranslation.frame_b.v[2] = rod.frame_b.v[2];
//   crank.body.frameTranslation.frame_b.v[3] = crank.body.frame_b.v[3];
//   crank.body.frameTranslation.frame_b.v[3] = crank.frame_b.v[3];
//   crank.body.frameTranslation.frame_b.v[3] = rod.frame_b.v[3];
//   crank.body.frameTranslation.frame_b.S[1,1] = crank.body.frame_b.S[1,1];
//   crank.body.frameTranslation.frame_b.S[1,1] = crank.frame_b.S[1,1];
//   crank.body.frameTranslation.frame_b.S[1,1] = rod.frame_b.S[1,1];
//   crank.body.frameTranslation.frame_b.S[1,2] = crank.body.frame_b.S[1,2];
//   crank.body.frameTranslation.frame_b.S[1,2] = crank.frame_b.S[1,2];
//   crank.body.frameTranslation.frame_b.S[1,2] = rod.frame_b.S[1,2];
//   crank.body.frameTranslation.frame_b.S[1,3] = crank.body.frame_b.S[1,3];
//   crank.body.frameTranslation.frame_b.S[1,3] = crank.frame_b.S[1,3];
//   crank.body.frameTranslation.frame_b.S[1,3] = rod.frame_b.S[1,3];
//   crank.body.frameTranslation.frame_b.S[2,1] = crank.body.frame_b.S[2,1];
//   crank.body.frameTranslation.frame_b.S[2,1] = crank.frame_b.S[2,1];
//   crank.body.frameTranslation.frame_b.S[2,1] = rod.frame_b.S[2,1];
//   crank.body.frameTranslation.frame_b.S[2,2] = crank.body.frame_b.S[2,2];
//   crank.body.frameTranslation.frame_b.S[2,2] = crank.frame_b.S[2,2];
//   crank.body.frameTranslation.frame_b.S[2,2] = rod.frame_b.S[2,2];
//   crank.body.frameTranslation.frame_b.S[2,3] = crank.body.frame_b.S[2,3];
//   crank.body.frameTranslation.frame_b.S[2,3] = crank.frame_b.S[2,3];
//   crank.body.frameTranslation.frame_b.S[2,3] = rod.frame_b.S[2,3];
//   crank.body.frameTranslation.frame_b.S[3,1] = crank.body.frame_b.S[3,1];
//   crank.body.frameTranslation.frame_b.S[3,1] = crank.frame_b.S[3,1];
//   crank.body.frameTranslation.frame_b.S[3,1] = rod.frame_b.S[3,1];
//   crank.body.frameTranslation.frame_b.S[3,2] = crank.body.frame_b.S[3,2];
//   crank.body.frameTranslation.frame_b.S[3,2] = crank.frame_b.S[3,2];
//   crank.body.frameTranslation.frame_b.S[3,2] = rod.frame_b.S[3,2];
//   crank.body.frameTranslation.frame_b.S[3,3] = crank.body.frame_b.S[3,3];
//   crank.body.frameTranslation.frame_b.S[3,3] = crank.frame_b.S[3,3];
//   crank.body.frameTranslation.frame_b.S[3,3] = rod.frame_b.S[3,3];
//   crank.body.frameTranslation.frame_b.r0[1] = crank.body.frame_b.r0[1];
//   crank.body.frameTranslation.frame_b.r0[1] = crank.frame_b.r0[1];
//   crank.body.frameTranslation.frame_b.r0[1] = rod.frame_b.r0[1];
//   crank.body.frameTranslation.frame_b.r0[2] = crank.body.frame_b.r0[2];
//   crank.body.frameTranslation.frame_b.r0[2] = crank.frame_b.r0[2];
//   crank.body.frameTranslation.frame_b.r0[2] = rod.frame_b.r0[2];
//   crank.body.frameTranslation.frame_b.r0[3] = crank.body.frame_b.r0[3];
//   crank.body.frameTranslation.frame_b.r0[3] = crank.frame_b.r0[3];
//   crank.body.frameTranslation.frame_b.r0[3] = rod.frame_b.r0[3];
//   rodBody.vis.frame_a.t[1] + ((-rodBody.frame_a.t[1]) + rodBody.body.frame_a.t[1]) = 0.0;
//   rodBody.vis.frame_a.t[2] + ((-rodBody.frame_a.t[2]) + rodBody.body.frame_a.t[2]) = 0.0;
//   rodBody.vis.frame_a.t[3] + ((-rodBody.frame_a.t[3]) + rodBody.body.frame_a.t[3]) = 0.0;
//   rodBody.vis.frame_a.f[1] + ((-rodBody.frame_a.f[1]) + rodBody.body.frame_a.f[1]) = 0.0;
//   rodBody.vis.frame_a.f[2] + ((-rodBody.frame_a.f[2]) + rodBody.body.frame_a.f[2]) = 0.0;
//   rodBody.vis.frame_a.f[3] + ((-rodBody.frame_a.f[3]) + rodBody.body.frame_a.f[3]) = 0.0;
//   (-rodBody.frame_b.t[1]) + rodBody.body.frame_b.t[1] = 0.0;
//   (-rodBody.frame_b.t[2]) + rodBody.body.frame_b.t[2] = 0.0;
//   (-rodBody.frame_b.t[3]) + rodBody.body.frame_b.t[3] = 0.0;
//   (-rodBody.frame_b.f[1]) + rodBody.body.frame_b.f[1] = 0.0;
//   (-rodBody.frame_b.f[2]) + rodBody.body.frame_b.f[2] = 0.0;
//   (-rodBody.frame_b.f[3]) + rodBody.body.frame_b.f[3] = 0.0;
//   rodBody.body.frameTranslation.frame_b.z[1] = rodBody.body.frame_b.z[1];
//   rodBody.body.frameTranslation.frame_b.z[1] = rodBody.frame_b.z[1];
//   rodBody.body.frameTranslation.frame_b.z[2] = rodBody.body.frame_b.z[2];
//   rodBody.body.frameTranslation.frame_b.z[2] = rodBody.frame_b.z[2];
//   rodBody.body.frameTranslation.frame_b.z[3] = rodBody.body.frame_b.z[3];
//   rodBody.body.frameTranslation.frame_b.z[3] = rodBody.frame_b.z[3];
//   rodBody.body.frameTranslation.frame_b.a[1] = rodBody.body.frame_b.a[1];
//   rodBody.body.frameTranslation.frame_b.a[1] = rodBody.frame_b.a[1];
//   rodBody.body.frameTranslation.frame_b.a[2] = rodBody.body.frame_b.a[2];
//   rodBody.body.frameTranslation.frame_b.a[2] = rodBody.frame_b.a[2];
//   rodBody.body.frameTranslation.frame_b.a[3] = rodBody.body.frame_b.a[3];
//   rodBody.body.frameTranslation.frame_b.a[3] = rodBody.frame_b.a[3];
//   rodBody.body.frameTranslation.frame_b.w[1] = rodBody.body.frame_b.w[1];
//   rodBody.body.frameTranslation.frame_b.w[1] = rodBody.frame_b.w[1];
//   rodBody.body.frameTranslation.frame_b.w[2] = rodBody.body.frame_b.w[2];
//   rodBody.body.frameTranslation.frame_b.w[2] = rodBody.frame_b.w[2];
//   rodBody.body.frameTranslation.frame_b.w[3] = rodBody.body.frame_b.w[3];
//   rodBody.body.frameTranslation.frame_b.w[3] = rodBody.frame_b.w[3];
//   rodBody.body.frameTranslation.frame_b.v[1] = rodBody.body.frame_b.v[1];
//   rodBody.body.frameTranslation.frame_b.v[1] = rodBody.frame_b.v[1];
//   rodBody.body.frameTranslation.frame_b.v[2] = rodBody.body.frame_b.v[2];
//   rodBody.body.frameTranslation.frame_b.v[2] = rodBody.frame_b.v[2];
//   rodBody.body.frameTranslation.frame_b.v[3] = rodBody.body.frame_b.v[3];
//   rodBody.body.frameTranslation.frame_b.v[3] = rodBody.frame_b.v[3];
//   rodBody.body.frameTranslation.frame_b.S[1,1] = rodBody.body.frame_b.S[1,1];
//   rodBody.body.frameTranslation.frame_b.S[1,1] = rodBody.frame_b.S[1,1];
//   rodBody.body.frameTranslation.frame_b.S[1,2] = rodBody.body.frame_b.S[1,2];
//   rodBody.body.frameTranslation.frame_b.S[1,2] = rodBody.frame_b.S[1,2];
//   rodBody.body.frameTranslation.frame_b.S[1,3] = rodBody.body.frame_b.S[1,3];
//   rodBody.body.frameTranslation.frame_b.S[1,3] = rodBody.frame_b.S[1,3];
//   rodBody.body.frameTranslation.frame_b.S[2,1] = rodBody.body.frame_b.S[2,1];
//   rodBody.body.frameTranslation.frame_b.S[2,1] = rodBody.frame_b.S[2,1];
//   rodBody.body.frameTranslation.frame_b.S[2,2] = rodBody.body.frame_b.S[2,2];
//   rodBody.body.frameTranslation.frame_b.S[2,2] = rodBody.frame_b.S[2,2];
//   rodBody.body.frameTranslation.frame_b.S[2,3] = rodBody.body.frame_b.S[2,3];
//   rodBody.body.frameTranslation.frame_b.S[2,3] = rodBody.frame_b.S[2,3];
//   rodBody.body.frameTranslation.frame_b.S[3,1] = rodBody.body.frame_b.S[3,1];
//   rodBody.body.frameTranslation.frame_b.S[3,1] = rodBody.frame_b.S[3,1];
//   rodBody.body.frameTranslation.frame_b.S[3,2] = rodBody.body.frame_b.S[3,2];
//   rodBody.body.frameTranslation.frame_b.S[3,2] = rodBody.frame_b.S[3,2];
//   rodBody.body.frameTranslation.frame_b.S[3,3] = rodBody.body.frame_b.S[3,3];
//   rodBody.body.frameTranslation.frame_b.S[3,3] = rodBody.frame_b.S[3,3];
//   rodBody.body.frameTranslation.frame_b.r0[1] = rodBody.body.frame_b.r0[1];
//   rodBody.body.frameTranslation.frame_b.r0[1] = rodBody.frame_b.r0[1];
//   rodBody.body.frameTranslation.frame_b.r0[2] = rodBody.body.frame_b.r0[2];
//   rodBody.body.frameTranslation.frame_b.r0[2] = rodBody.frame_b.r0[2];
//   rodBody.body.frameTranslation.frame_b.r0[3] = rodBody.body.frame_b.r0[3];
//   rodBody.body.frameTranslation.frame_b.r0[3] = rodBody.frame_b.r0[3];
//   (-rodBody.body.frame_a.t[1]) + (rodBody.body.body.frame_a.t[1] + rodBody.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-rodBody.body.frame_a.t[2]) + (rodBody.body.body.frame_a.t[2] + rodBody.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-rodBody.body.frame_a.t[3]) + (rodBody.body.body.frame_a.t[3] + rodBody.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-rodBody.body.frame_a.f[1]) + (rodBody.body.body.frame_a.f[1] + rodBody.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-rodBody.body.frame_a.f[2]) + (rodBody.body.body.frame_a.f[2] + rodBody.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-rodBody.body.frame_a.f[3]) + (rodBody.body.body.frame_a.f[3] + rodBody.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-rodBody.body.frame_b.t[1]) + rodBody.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-rodBody.body.frame_b.t[2]) + rodBody.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-rodBody.body.frame_b.t[3]) + rodBody.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-rodBody.body.frame_b.f[1]) + rodBody.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-rodBody.body.frame_b.f[2]) + rodBody.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-rodBody.body.frame_b.f[3]) + rodBody.body.frameTranslation.frame_b.f[3] = 0.0;
//   rodBody.frame_b.t[3] = 0.0;
//   rodBody.frame_b.t[2] = 0.0;
//   rodBody.frame_b.t[1] = 0.0;
//   rodBody.frame_b.f[3] = 0.0;
//   rodBody.frame_b.f[2] = 0.0;
//   rodBody.frame_b.f[1] = 0.0;
//   torque.bearing.tau = 0.0;
//   torque.flange_a.tau = 0.0;
//   crank.vis.frame_a.t[1] + ((-crank.frame_a.t[1]) + crank.body.frame_a.t[1]) = 0.0;
//   crank.vis.frame_a.t[2] + ((-crank.frame_a.t[2]) + crank.body.frame_a.t[2]) = 0.0;
//   crank.vis.frame_a.t[3] + ((-crank.frame_a.t[3]) + crank.body.frame_a.t[3]) = 0.0;
//   crank.vis.frame_a.f[1] + ((-crank.frame_a.f[1]) + crank.body.frame_a.f[1]) = 0.0;
//   crank.vis.frame_a.f[2] + ((-crank.frame_a.f[2]) + crank.body.frame_a.f[2]) = 0.0;
//   crank.vis.frame_a.f[3] + ((-crank.frame_a.f[3]) + crank.body.frame_a.f[3]) = 0.0;
//   (-crank.frame_b.t[1]) + crank.body.frame_b.t[1] = 0.0;
//   (-crank.frame_b.t[2]) + crank.body.frame_b.t[2] = 0.0;
//   (-crank.frame_b.t[3]) + crank.body.frame_b.t[3] = 0.0;
//   (-crank.frame_b.f[1]) + crank.body.frame_b.f[1] = 0.0;
//   (-crank.frame_b.f[2]) + crank.body.frame_b.f[2] = 0.0;
//   (-crank.frame_b.f[3]) + crank.body.frame_b.f[3] = 0.0;
//   (-crank.body.frame_a.t[1]) + (crank.body.body.frame_a.t[1] + crank.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-crank.body.frame_a.t[2]) + (crank.body.body.frame_a.t[2] + crank.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-crank.body.frame_a.t[3]) + (crank.body.body.frame_a.t[3] + crank.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-crank.body.frame_a.f[1]) + (crank.body.body.frame_a.f[1] + crank.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-crank.body.frame_a.f[2]) + (crank.body.body.frame_a.f[2] + crank.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-crank.body.frame_a.f[3]) + (crank.body.body.frame_a.f[3] + crank.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-crank.body.frame_b.t[1]) + crank.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-crank.body.frame_b.t[2]) + crank.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-crank.body.frame_b.t[3]) + crank.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-crank.body.frame_b.f[1]) + crank.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-crank.body.frame_b.f[2]) + crank.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-crank.body.frame_b.f[3]) + crank.body.frameTranslation.frame_b.f[3] = 0.0;
//   piston.vis.frame_a.t[1] + ((-piston.frame_a.t[1]) + piston.body.frame_a.t[1]) = 0.0;
//   piston.vis.frame_a.t[2] + ((-piston.frame_a.t[2]) + piston.body.frame_a.t[2]) = 0.0;
//   piston.vis.frame_a.t[3] + ((-piston.frame_a.t[3]) + piston.body.frame_a.t[3]) = 0.0;
//   piston.vis.frame_a.f[1] + ((-piston.frame_a.f[1]) + piston.body.frame_a.f[1]) = 0.0;
//   piston.vis.frame_a.f[2] + ((-piston.frame_a.f[2]) + piston.body.frame_a.f[2]) = 0.0;
//   piston.vis.frame_a.f[3] + ((-piston.frame_a.f[3]) + piston.body.frame_a.f[3]) = 0.0;
//   (-piston.frame_b.t[1]) + piston.body.frame_b.t[1] = 0.0;
//   (-piston.frame_b.t[2]) + piston.body.frame_b.t[2] = 0.0;
//   (-piston.frame_b.t[3]) + piston.body.frame_b.t[3] = 0.0;
//   (-piston.frame_b.f[1]) + piston.body.frame_b.f[1] = 0.0;
//   (-piston.frame_b.f[2]) + piston.body.frame_b.f[2] = 0.0;
//   (-piston.frame_b.f[3]) + piston.body.frame_b.f[3] = 0.0;
//   piston.body.frameTranslation.frame_b.z[1] = piston.body.frame_b.z[1];
//   piston.body.frameTranslation.frame_b.z[1] = piston.frame_b.z[1];
//   piston.body.frameTranslation.frame_b.z[2] = piston.body.frame_b.z[2];
//   piston.body.frameTranslation.frame_b.z[2] = piston.frame_b.z[2];
//   piston.body.frameTranslation.frame_b.z[3] = piston.body.frame_b.z[3];
//   piston.body.frameTranslation.frame_b.z[3] = piston.frame_b.z[3];
//   piston.body.frameTranslation.frame_b.a[1] = piston.body.frame_b.a[1];
//   piston.body.frameTranslation.frame_b.a[1] = piston.frame_b.a[1];
//   piston.body.frameTranslation.frame_b.a[2] = piston.body.frame_b.a[2];
//   piston.body.frameTranslation.frame_b.a[2] = piston.frame_b.a[2];
//   piston.body.frameTranslation.frame_b.a[3] = piston.body.frame_b.a[3];
//   piston.body.frameTranslation.frame_b.a[3] = piston.frame_b.a[3];
//   piston.body.frameTranslation.frame_b.w[1] = piston.body.frame_b.w[1];
//   piston.body.frameTranslation.frame_b.w[1] = piston.frame_b.w[1];
//   piston.body.frameTranslation.frame_b.w[2] = piston.body.frame_b.w[2];
//   piston.body.frameTranslation.frame_b.w[2] = piston.frame_b.w[2];
//   piston.body.frameTranslation.frame_b.w[3] = piston.body.frame_b.w[3];
//   piston.body.frameTranslation.frame_b.w[3] = piston.frame_b.w[3];
//   piston.body.frameTranslation.frame_b.v[1] = piston.body.frame_b.v[1];
//   piston.body.frameTranslation.frame_b.v[1] = piston.frame_b.v[1];
//   piston.body.frameTranslation.frame_b.v[2] = piston.body.frame_b.v[2];
//   piston.body.frameTranslation.frame_b.v[2] = piston.frame_b.v[2];
//   piston.body.frameTranslation.frame_b.v[3] = piston.body.frame_b.v[3];
//   piston.body.frameTranslation.frame_b.v[3] = piston.frame_b.v[3];
//   piston.body.frameTranslation.frame_b.S[1,1] = piston.body.frame_b.S[1,1];
//   piston.body.frameTranslation.frame_b.S[1,1] = piston.frame_b.S[1,1];
//   piston.body.frameTranslation.frame_b.S[1,2] = piston.body.frame_b.S[1,2];
//   piston.body.frameTranslation.frame_b.S[1,2] = piston.frame_b.S[1,2];
//   piston.body.frameTranslation.frame_b.S[1,3] = piston.body.frame_b.S[1,3];
//   piston.body.frameTranslation.frame_b.S[1,3] = piston.frame_b.S[1,3];
//   piston.body.frameTranslation.frame_b.S[2,1] = piston.body.frame_b.S[2,1];
//   piston.body.frameTranslation.frame_b.S[2,1] = piston.frame_b.S[2,1];
//   piston.body.frameTranslation.frame_b.S[2,2] = piston.body.frame_b.S[2,2];
//   piston.body.frameTranslation.frame_b.S[2,2] = piston.frame_b.S[2,2];
//   piston.body.frameTranslation.frame_b.S[2,3] = piston.body.frame_b.S[2,3];
//   piston.body.frameTranslation.frame_b.S[2,3] = piston.frame_b.S[2,3];
//   piston.body.frameTranslation.frame_b.S[3,1] = piston.body.frame_b.S[3,1];
//   piston.body.frameTranslation.frame_b.S[3,1] = piston.frame_b.S[3,1];
//   piston.body.frameTranslation.frame_b.S[3,2] = piston.body.frame_b.S[3,2];
//   piston.body.frameTranslation.frame_b.S[3,2] = piston.frame_b.S[3,2];
//   piston.body.frameTranslation.frame_b.S[3,3] = piston.body.frame_b.S[3,3];
//   piston.body.frameTranslation.frame_b.S[3,3] = piston.frame_b.S[3,3];
//   piston.body.frameTranslation.frame_b.r0[1] = piston.body.frame_b.r0[1];
//   piston.body.frameTranslation.frame_b.r0[1] = piston.frame_b.r0[1];
//   piston.body.frameTranslation.frame_b.r0[2] = piston.body.frame_b.r0[2];
//   piston.body.frameTranslation.frame_b.r0[2] = piston.frame_b.r0[2];
//   piston.body.frameTranslation.frame_b.r0[3] = piston.body.frame_b.r0[3];
//   piston.body.frameTranslation.frame_b.r0[3] = piston.frame_b.r0[3];
//   (-piston.body.frame_a.t[1]) + (piston.body.body.frame_a.t[1] + piston.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-piston.body.frame_a.t[2]) + (piston.body.body.frame_a.t[2] + piston.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-piston.body.frame_a.t[3]) + (piston.body.body.frame_a.t[3] + piston.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-piston.body.frame_a.f[1]) + (piston.body.body.frame_a.f[1] + piston.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-piston.body.frame_a.f[2]) + (piston.body.body.frame_a.f[2] + piston.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-piston.body.frame_a.f[3]) + (piston.body.body.frame_a.f[3] + piston.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-piston.body.frame_b.t[1]) + piston.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-piston.body.frame_b.t[2]) + piston.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-piston.body.frame_b.t[3]) + piston.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-piston.body.frame_b.f[1]) + piston.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-piston.body.frame_b.f[2]) + piston.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-piston.body.frame_b.f[3]) + piston.body.frameTranslation.frame_b.f[3] = 0.0;
//   piston.frame_b.t[3] = 0.0;
//   piston.frame_b.t[2] = 0.0;
//   piston.frame_b.t[1] = 0.0;
//   piston.frame_b.f[3] = 0.0;
//   piston.frame_b.f[2] = 0.0;
//   piston.frame_b.f[1] = 0.0;
//   r1.bearing.tau = 0.0;
// end MultiBody.Examples.Loops.Engine1;
// "
// "[Engine1Total.mo:2665:7-2665:75:writable] Warning: Component Length has the same name as its type MultiBody.Parts.ShapeBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// "
// endResult
