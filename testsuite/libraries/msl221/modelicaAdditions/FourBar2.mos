// name: ModelicaAdditions.MultiBody.Examples.Loops.FourBar2
// keywords: MultiBody, Examples
// status: correct

loadFile("FourBar2Total.mo");
instantiateModel(MultiBody.Examples.Loops.Fourbar2);
checkModel(MultiBody.Examples.Loops.Fourbar2);
getErrorString();

// Result:
// true
// "function MCVisualShape.local_normalize
//   input Real[3] iv;
//   output Real[3] ov;
//   Real length;
// algorithm
//   length := sqrt(iv[1] ^ 2.0 + iv[2] ^ 2.0 + iv[3] ^ 2.0);
//   ov := {iv[1] / length,iv[2] / length,iv[3] / length};
// end MCVisualShape.local_normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
// external \"C\";
// end Modelica.Math.asin;
// 
// function PackMaterial
//   input Real r;
//   input Real g;
//   input Real b;
//   input Real spec;
//   output Real packedMaterial;
//   Integer i1;
//   Integer i2;
//   Integer i3;
//   Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
//   input String shape;
//   output Real packedShape;
// algorithm
//   if shape == \"box\" then
//     packedShape := 101.0;
//   elseif shape == \"sphere\" then
//     packedShape := 102.0;
//   elseif shape == \"cylinder\" then
//     packedShape := 103.0;
//   elseif shape == \"cone\" then
//     packedShape := 104.0;
//   elseif shape == \"pipe\" then
//     packedShape := 105.0;
//   elseif shape == \"beam\" then
//     packedShape := 106.0;
//   elseif shape == \"wirebox\" then
//     packedShape := 107.0;
//   elseif shape == \"gearwheel\" then
//     packedShape := 108.0;
//   elseif shape == \"spring\" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class MultiBody.Examples.Loops.Fourbar2
//   output Real j1q(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"angle of revolute joint j1\";
//   output Real j2q(quantity = \"Length\", unit = \"m\") \"distance of prismatic joint j2\";
//   output Real j1qd(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"axis speed of revolute joint j1\";
//   output Real j2qd(quantity = \"Velocity\", unit = \"m/s\") \"axis velocity of prismatic joint j2\";
//   parameter Real inertial.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.81 \"Gravity constant\";
//   parameter Real inertial.ng[1] = 0.0 \"Direction of gravity (gravity = g*ng)\";
//   parameter Real inertial.ng[2] = -1.0 \"Direction of gravity (gravity = g*ng)\";
//   parameter Real inertial.ng[3] = 0.0 \"Direction of gravity (gravity = g*ng)\";
//   parameter String inertial.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String inertial.label2 = \"y\" \"Label of vertical axis in icon\";
//   Real inertial.gravity[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration vector\";
//   Real inertial.gravity[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration vector\";
//   Real inertial.gravity[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration vector\";
//   output Real inertial.frame_b.r0[1](quantity = \"Length\", unit = \"m\") \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real inertial.frame_b.r0[2](quantity = \"Length\", unit = \"m\") \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real inertial.frame_b.r0[3](quantity = \"Length\", unit = \"m\") \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real inertial.frame_b.S[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.S[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real inertial.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real inertial.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real inertial.frame_b.f[1](quantity = \"Force\", unit = \"N\");
//   Real inertial.frame_b.f[2](quantity = \"Force\", unit = \"N\");
//   Real inertial.frame_b.f[3](quantity = \"Force\", unit = \"N\");
//   Real inertial.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\");
//   Real inertial.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\");
//   Real inertial.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\");
//   constant Real j1.pi = 3.14159265358979;
//   constant Real j1.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real j1.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = j1.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real j1.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = j1.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real j1.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = j1.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real j1.frame_a.S[1,1] = j1.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[1,2] = j1.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[1,3] = j1.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[2,1] = j1.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[2,2] = j1.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[2,3] = j1.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[3,1] = j1.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[3,2] = j1.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.S[3,3] = j1.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = j1.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = j1.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = j1.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = j1.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = j1.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = j1.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_a.f[1](quantity = \"Force\", unit = \"N\") = j1.fa[1];
//   Real j1.frame_a.f[2](quantity = \"Force\", unit = \"N\") = j1.fa[2];
//   Real j1.frame_a.f[3](quantity = \"Force\", unit = \"N\") = j1.fa[3];
//   Real j1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = j1.ta[1];
//   Real j1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = j1.ta[2];
//   Real j1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = j1.ta[3];
//   output Real j1.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = j1.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real j1.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = j1.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real j1.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = j1.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real j1.frame_b.S[1,1] = j1.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[1,2] = j1.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[1,3] = j1.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[2,1] = j1.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[2,2] = j1.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[2,3] = j1.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[3,1] = j1.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[3,2] = j1.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.S[3,3] = j1.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j1.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = j1.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = j1.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = j1.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j1.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j1.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j1.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = j1.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = j1.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = j1.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j1.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j1.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j1.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -j1.fb[1];
//   Real j1.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -j1.fb[2];
//   Real j1.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -j1.fb[3];
//   Real j1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -j1.tb[1];
//   Real j1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -j1.tb[2];
//   Real j1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -j1.tb[3];
//   protected Real j1.Sa[1,1](start = 1.0);
//   protected Real j1.Sa[1,2](start = 0.0);
//   protected Real j1.Sa[1,3](start = 0.0);
//   protected Real j1.Sa[2,1](start = 0.0);
//   protected Real j1.Sa[2,2](start = 1.0);
//   protected Real j1.Sa[2,3](start = 0.0);
//   protected Real j1.Sa[3,1](start = 0.0);
//   protected Real j1.Sa[3,2](start = 0.0);
//   protected Real j1.Sa[3,3](start = 1.0);
//   protected Real j1.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real j1.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real j1.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real j1.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real j1.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real j1.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real j1.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j1.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j1.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j1.Sb[1,1](start = 1.0);
//   protected Real j1.Sb[1,2](start = 0.0);
//   protected Real j1.Sb[1,3](start = 0.0);
//   protected Real j1.Sb[2,1](start = 0.0);
//   protected Real j1.Sb[2,2](start = 1.0);
//   protected Real j1.Sb[2,3](start = 0.0);
//   protected Real j1.Sb[3,1](start = 0.0);
//   protected Real j1.Sb[3,2](start = 0.0);
//   protected Real j1.Sb[3,3](start = 1.0);
//   protected Real j1.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real j1.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real j1.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real j1.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j1.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j1.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j1.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j1.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real j1.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real j1.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real j1.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j1.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j1.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   Real j1.S_rel[1,1];
//   Real j1.S_rel[1,2];
//   Real j1.S_rel[1,3];
//   Real j1.S_rel[2,1];
//   Real j1.S_rel[2,2];
//   Real j1.S_rel[2,3];
//   Real j1.S_rel[3,1];
//   Real j1.S_rel[3,2];
//   Real j1.S_rel[3,3];
//   Real j1.r_rela[1](quantity = \"Length\", unit = \"m\");
//   Real j1.r_rela[2](quantity = \"Length\", unit = \"m\");
//   Real j1.r_rela[3](quantity = \"Length\", unit = \"m\");
//   Real j1.v_rela[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real j1.v_rela[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real j1.v_rela[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real j1.w_rela[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j1.w_rela[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j1.w_rela[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j1.a_rela[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j1.a_rela[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j1.a_rela[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j1.z_rela[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real j1.z_rela[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real j1.z_rela[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   parameter Real j1.n[1] = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j1.n[2] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j1.n[3] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j1.q0 = 0.0 \"Rotation angle offset (see info) [deg]\";
//   parameter Boolean j1.startValueFixed = true \"true, if start values of q, qd are fixed\";
//   Real j1.q(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", fixed = j1.startValueFixed);
//   Real j1.qd(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", start = 20.0, fixed = j1.startValueFixed);
//   Real j1.qdd(quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real j1.qq(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real j1.nn[1];
//   Real j1.nn[2];
//   Real j1.nn[3];
//   Real j1.sinq;
//   Real j1.cosq;
//   Real j1.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real j1.bearing.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real j1.bearing.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   constant Real j2.pi = 3.14159265358979;
//   constant Real j2.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real j2.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = j2.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real j2.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = j2.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real j2.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = j2.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real j2.frame_a.S[1,1] = j2.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[1,2] = j2.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[1,3] = j2.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[2,1] = j2.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[2,2] = j2.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[2,3] = j2.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[3,1] = j2.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[3,2] = j2.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.S[3,3] = j2.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = j2.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = j2.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = j2.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = j2.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = j2.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = j2.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_a.f[1](quantity = \"Force\", unit = \"N\") = j2.fa[1];
//   Real j2.frame_a.f[2](quantity = \"Force\", unit = \"N\") = j2.fa[2];
//   Real j2.frame_a.f[3](quantity = \"Force\", unit = \"N\") = j2.fa[3];
//   Real j2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = j2.ta[1];
//   Real j2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = j2.ta[2];
//   Real j2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = j2.ta[3];
//   output Real j2.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = j2.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real j2.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = j2.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real j2.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = j2.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real j2.frame_b.S[1,1] = j2.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[1,2] = j2.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[1,3] = j2.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[2,1] = j2.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[2,2] = j2.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[2,3] = j2.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[3,1] = j2.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[3,2] = j2.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.S[3,3] = j2.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real j2.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = j2.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = j2.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = j2.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real j2.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = j2.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real j2.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = j2.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = j2.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = j2.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real j2.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = j2.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real j2.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -j2.fb[1];
//   Real j2.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -j2.fb[2];
//   Real j2.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -j2.fb[3];
//   Real j2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -j2.tb[1];
//   Real j2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -j2.tb[2];
//   Real j2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -j2.tb[3];
//   protected Real j2.Sa[1,1](start = 1.0);
//   protected Real j2.Sa[1,2](start = 0.0);
//   protected Real j2.Sa[1,3](start = 0.0);
//   protected Real j2.Sa[2,1](start = 0.0);
//   protected Real j2.Sa[2,2](start = 1.0);
//   protected Real j2.Sa[2,3](start = 0.0);
//   protected Real j2.Sa[3,1](start = 0.0);
//   protected Real j2.Sa[3,2](start = 0.0);
//   protected Real j2.Sa[3,3](start = 1.0);
//   protected Real j2.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real j2.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real j2.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real j2.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real j2.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real j2.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real j2.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j2.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j2.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j2.Sb[1,1](start = 1.0);
//   protected Real j2.Sb[1,2](start = 0.0);
//   protected Real j2.Sb[1,3](start = 0.0);
//   protected Real j2.Sb[2,1](start = 0.0);
//   protected Real j2.Sb[2,2](start = 1.0);
//   protected Real j2.Sb[2,3](start = 0.0);
//   protected Real j2.Sb[3,1](start = 0.0);
//   protected Real j2.Sb[3,2](start = 0.0);
//   protected Real j2.Sb[3,3](start = 1.0);
//   protected Real j2.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real j2.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real j2.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real j2.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real j2.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real j2.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real j2.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real j2.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real j2.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real j2.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real j2.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j2.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real j2.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   Real j2.S_rel[1,1];
//   Real j2.S_rel[1,2];
//   Real j2.S_rel[1,3];
//   Real j2.S_rel[2,1];
//   Real j2.S_rel[2,2];
//   Real j2.S_rel[2,3];
//   Real j2.S_rel[3,1];
//   Real j2.S_rel[3,2];
//   Real j2.S_rel[3,3];
//   Real j2.r_rela[1](quantity = \"Length\", unit = \"m\");
//   Real j2.r_rela[2](quantity = \"Length\", unit = \"m\");
//   Real j2.r_rela[3](quantity = \"Length\", unit = \"m\");
//   Real j2.v_rela[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.v_rela[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.v_rela[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.w_rela[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j2.w_rela[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j2.w_rela[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real j2.a_rela[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j2.a_rela[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j2.a_rela[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j2.z_rela[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real j2.z_rela[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real j2.z_rela[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   parameter Real j2.n[1] = 1.0 \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j2.n[2] = 0.0 \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j2.n[3] = 0.0 \"Axis of translation resolved in frame_a (= same as in frame_b)\";
//   parameter Real j2.q0(quantity = \"Length\", unit = \"m\") = 0.0 \"Relative distance offset(see info)\";
//   parameter Boolean j2.startValueFixed = false \"true, if start values of q, qd are fixed\";
//   Real j2.q(quantity = \"Length\", unit = \"m\", fixed = j2.startValueFixed);
//   Real j2.qd(quantity = \"Velocity\", unit = \"m/s\", fixed = j2.startValueFixed);
//   Real j2.qdd(quantity = \"Acceleration\", unit = \"m/s2\");
//   Real j2.qq(quantity = \"Length\", unit = \"m\");
//   Real j2.nn[1];
//   Real j2.nn[2];
//   Real j2.nn[3];
//   Real j2.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real j2.axis.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real j2.axis.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real j2.bearing.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real j2.bearing.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   constant Real b1.pi = 3.14159265358979;
//   constant Real b1.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b1.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b1.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b1.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b1.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b1.frame_a.S[1,1] = b1.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[1,2] = b1.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[1,3] = b1.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[2,1] = b1.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[2,2] = b1.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[2,3] = b1.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[3,1] = b1.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[3,2] = b1.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.S[3,3] = b1.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b1.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b1.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b1.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b1.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b1.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b1.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b1.fa[1];
//   Real b1.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b1.fa[2];
//   Real b1.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b1.fa[3];
//   Real b1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b1.ta[1];
//   Real b1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b1.ta[2];
//   Real b1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b1.ta[3];
//   output Real b1.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b1.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b1.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b1.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b1.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b1.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b1.frame_b.S[1,1] = b1.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[1,2] = b1.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[1,3] = b1.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[2,1] = b1.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[2,2] = b1.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[2,3] = b1.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[3,1] = b1.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[3,2] = b1.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.S[3,3] = b1.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b1.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b1.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b1.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b1.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b1.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b1.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b1.fb[1];
//   Real b1.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b1.fb[2];
//   Real b1.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b1.fb[3];
//   Real b1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b1.tb[1];
//   Real b1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b1.tb[2];
//   Real b1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b1.tb[3];
//   protected Real b1.Sa[1,1](start = 1.0);
//   protected Real b1.Sa[1,2](start = 0.0);
//   protected Real b1.Sa[1,3](start = 0.0);
//   protected Real b1.Sa[2,1](start = 0.0);
//   protected Real b1.Sa[2,2](start = 1.0);
//   protected Real b1.Sa[2,3](start = 0.0);
//   protected Real b1.Sa[3,1](start = 0.0);
//   protected Real b1.Sa[3,2](start = 0.0);
//   protected Real b1.Sa[3,3](start = 1.0);
//   protected Real b1.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b1.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b1.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b1.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b1.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b1.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b1.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.Sb[1,1](start = 1.0);
//   protected Real b1.Sb[1,2](start = 0.0);
//   protected Real b1.Sb[1,3](start = 0.0);
//   protected Real b1.Sb[2,1](start = 0.0);
//   protected Real b1.Sb[2,2](start = 1.0);
//   protected Real b1.Sb[2,3](start = 0.0);
//   protected Real b1.Sb[3,1](start = 0.0);
//   protected Real b1.Sb[3,2](start = 0.0);
//   protected Real b1.Sb[3,3](start = 1.0);
//   protected Real b1.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b1.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b1.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b1.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b1.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b1.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b1.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b1.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r[2](quantity = \"Length\", unit = \"m\") = 0.5 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r[3](quantity = \"Length\", unit = \"m\") = 0.1 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b1.r0[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b1.r0[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b1.r0[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b1.Radius(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.05 \"Radius of cylinder\";
//   parameter Real b1.InnerRadius(quantity = \"Length\", unit = \"m\", min = 0.0, max = b1.Radius) = 0.0 \"Inner radius of cylinder\";
//   parameter Real b1.rho(min = 0.0) = 7.7 \"Density of material [g/cm^3]\";
//   parameter Real b1.Material[1] = 1.0 \"Color and specular coefficient\";
//   parameter Real b1.Material[2] = 0.0 \"Color and specular coefficient\";
//   parameter Real b1.Material[3] = 0.0 \"Color and specular coefficient\";
//   parameter Real b1.Material[4] = 0.5 \"Color and specular coefficient\";
//   Real b1.Scyl[1,1];
//   Real b1.Scyl[1,2];
//   Real b1.Scyl[1,3];
//   Real b1.Scyl[2,1];
//   Real b1.Scyl[2,2];
//   Real b1.Scyl[2,3];
//   Real b1.Scyl[3,1];
//   Real b1.Scyl[3,2];
//   Real b1.Scyl[3,3];
//   Real b1.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b1.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b1.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b1.box.r0[1] = b1.r0[1] \"Origin of visual object.\";
//   parameter Real b1.box.r0[2] = b1.r0[2] \"Origin of visual object.\";
//   parameter Real b1.box.r0[3] = b1.r0[3] \"Origin of visual object.\";
//   parameter Real b1.box.Length = b1.Length \"Length of visual object.\";
//   parameter Real b1.box.Width = 2.0 * b1.Radius \"Width of visual object.\";
//   parameter Real b1.box.Height = 2.0 * b1.Radius \"Height of visual object.\";
//   parameter Real b1.box.LengthDirection[1] = b1.Axis[1] \"Vector in length direction.\";
//   parameter Real b1.box.LengthDirection[2] = b1.Axis[2] \"Vector in length direction.\";
//   parameter Real b1.box.LengthDirection[3] = b1.Axis[3] \"Vector in length direction.\";
//   parameter Real b1.box.WidthDirection[1] = 0.0 \"Vector in width direction.\";
//   parameter Real b1.box.WidthDirection[2] = 1.0 \"Vector in width direction.\";
//   parameter Real b1.box.WidthDirection[3] = 0.0 \"Vector in width direction.\";
//   parameter String b1.box.Shape = \"pipe\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   parameter Real b1.box.Material[1] = b1.Material[1] \"Color and specular coefficient.\";
//   parameter Real b1.box.Material[2] = b1.Material[2] \"Color and specular coefficient.\";
//   parameter Real b1.box.Material[3] = b1.Material[3] \"Color and specular coefficient.\";
//   parameter Real b1.box.Material[4] = b1.Material[4] \"Color and specular coefficient.\";
//   parameter Real b1.box.Extra = b1.InnerRadius / b1.Radius \"Additional size data for some of the shape types\";
//   input Real b1.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   input Real b1.box.r[1] \"Position of visual object.\";
//   input Real b1.box.r[2] \"Position of visual object.\";
//   input Real b1.box.r[3] \"Position of visual object.\";
//   Real b1.box.nLength[1];
//   Real b1.box.nLength[2];
//   Real b1.box.nLength[3];
//   Real b1.box.nWidth[1];
//   Real b1.box.nWidth[2];
//   Real b1.box.nWidth[3];
//   Real b1.box.nHeight[1];
//   Real b1.box.nHeight[2];
//   Real b1.box.nHeight[3];
//   parameter String b1.box.mcShape.shapeType = b1.box.Shape \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real b1.box.mcShape.r[1](quantity = \"Length\", unit = \"m\") = b1.box.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.box.mcShape.r[2](quantity = \"Length\", unit = \"m\") = b1.box.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.box.mcShape.r[3](quantity = \"Length\", unit = \"m\") = b1.box.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b1.box.mcShape.r_shape[1](quantity = \"Length\", unit = \"m\") = b1.box.r0[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.box.mcShape.r_shape[2](quantity = \"Length\", unit = \"m\") = b1.box.r0[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.box.mcShape.r_shape[3](quantity = \"Length\", unit = \"m\") = b1.box.r0[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b1.box.mcShape.lengthDirection[1] = b1.box.LengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real b1.box.mcShape.lengthDirection[2] = b1.box.LengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real b1.box.mcShape.lengthDirection[3] = b1.box.LengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real b1.box.mcShape.widthDirection[1] = b1.box.WidthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real b1.box.mcShape.widthDirection[2] = b1.box.WidthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real b1.box.mcShape.widthDirection[3] = b1.box.WidthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real b1.box.mcShape.length(quantity = \"Length\", unit = \"m\") = b1.box.Length \"Length of visual object\";
//   input Real b1.box.mcShape.width(quantity = \"Length\", unit = \"m\") = b1.box.Width \"Width of visual object\";
//   input Real b1.box.mcShape.height(quantity = \"Length\", unit = \"m\") = b1.box.Height \"Height of visual object\";
//   input Real b1.box.mcShape.extra = b1.box.Extra \"Additional size data for some of the shape types\";
//   input Real b1.box.mcShape.color[1] = 255.0 * b1.box.Material[1] \"Color of shape\";
//   input Real b1.box.mcShape.color[2] = 255.0 * b1.box.Material[2] \"Color of shape\";
//   input Real b1.box.mcShape.color[3] = 255.0 * b1.box.Material[3] \"Color of shape\";
//   input Real b1.box.mcShape.specularCoefficient = b1.box.Material[4];
//   input Real b1.box.mcShape.S[1,1] = b1.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[1,2] = b1.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[1,3] = b1.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[2,1] = b1.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[2,2] = b1.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[2,3] = b1.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[3,1] = b1.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[3,2] = b1.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b1.box.mcShape.S[3,3] = b1.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[1,1] = b1.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[1,2] = b1.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[1,3] = b1.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[2,1] = b1.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[2,2] = b1.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[2,3] = b1.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[3,1] = b1.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[3,2] = b1.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b1.box.mcShape.Sshape[3,3] = b1.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   output Real b1.box.mcShape.rxvisobj[1] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.rxvisobj[2] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.rxvisobj[3] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.ryvisobj[1] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.ryvisobj[2] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.ryvisobj[3] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b1.box.mcShape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b1.box.mcShape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b1.box.mcShape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   Real b1.box.mcShape.abs_n_x = sqrt(b1.box.mcShape.lengthDirection[1] ^ 2.0 + (b1.box.mcShape.lengthDirection[2] ^ 2.0 + b1.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b1.box.mcShape.e_x[1] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 1.0 else b1.box.mcShape.lengthDirection[1] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.e_x[2] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 0.0 else b1.box.mcShape.lengthDirection[2] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.e_x[3] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 0.0 else b1.box.mcShape.lengthDirection[3] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.n_z_aux[1] = b1.box.mcShape.e_x[2] * b1.box.mcShape.widthDirection[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.widthDirection[2];
//   Real b1.box.mcShape.n_z_aux[2] = b1.box.mcShape.e_x[3] * b1.box.mcShape.widthDirection[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.widthDirection[3];
//   Real b1.box.mcShape.n_z_aux[3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.widthDirection[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.widthDirection[1];
//   Real b1.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[1];
//   Real b1.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[2];
//   Real b1.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[3];
//   Real b1.box.mcShape.e_z[1] = b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[2];
//   Real b1.box.mcShape.e_z[2] = b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[3];
//   Real b1.box.mcShape.e_z[3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[1];
//   protected output Real b1.box.mcShape.Form;
//   protected output Real b1.box.mcShape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.box.mcShape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.box.mcShape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b1.box.mcShape.Material;
//   protected output Real b1.box.mcShape.Extra;
//   constant Real b1.frameTranslation.pi = 3.14159265358979;
//   constant Real b1.frameTranslation.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b1.frameTranslation.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.frameTranslation.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.frameTranslation.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b1.frameTranslation.frame_a.S[1,1] = b1.frameTranslation.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[1,2] = b1.frameTranslation.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[1,3] = b1.frameTranslation.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[2,1] = b1.frameTranslation.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[2,2] = b1.frameTranslation.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[2,3] = b1.frameTranslation.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[3,1] = b1.frameTranslation.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[3,2] = b1.frameTranslation.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.S[3,3] = b1.frameTranslation.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b1.frameTranslation.fa[1];
//   Real b1.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b1.frameTranslation.fa[2];
//   Real b1.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b1.frameTranslation.fa[3];
//   Real b1.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b1.frameTranslation.ta[1];
//   Real b1.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b1.frameTranslation.ta[2];
//   Real b1.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b1.frameTranslation.ta[3];
//   output Real b1.frameTranslation.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b1.frameTranslation.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b1.frameTranslation.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b1.frameTranslation.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b1.frameTranslation.frame_b.S[1,1] = b1.frameTranslation.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[1,2] = b1.frameTranslation.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[1,3] = b1.frameTranslation.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[2,1] = b1.frameTranslation.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[2,2] = b1.frameTranslation.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[2,3] = b1.frameTranslation.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[3,1] = b1.frameTranslation.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[3,2] = b1.frameTranslation.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.S[3,3] = b1.frameTranslation.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.frameTranslation.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b1.frameTranslation.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.frameTranslation.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b1.frameTranslation.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.frameTranslation.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b1.frameTranslation.fb[1];
//   Real b1.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b1.frameTranslation.fb[2];
//   Real b1.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b1.frameTranslation.fb[3];
//   Real b1.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b1.frameTranslation.tb[1];
//   Real b1.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b1.frameTranslation.tb[2];
//   Real b1.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b1.frameTranslation.tb[3];
//   protected Real b1.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b1.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b1.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b1.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b1.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b1.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b1.frameTranslation.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.frameTranslation.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.frameTranslation.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b1.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b1.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b1.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b1.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b1.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b1.frameTranslation.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b1.frameTranslation.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.frameTranslation.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.frameTranslation.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.frameTranslation.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b1.frameTranslation.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.frameTranslation.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.frameTranslation.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b1.frameTranslation.r[1](quantity = \"Length\", unit = \"m\") = b1.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b1.frameTranslation.r[2](quantity = \"Length\", unit = \"m\") = b1.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b1.frameTranslation.r[3](quantity = \"Length\", unit = \"m\") = b1.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   protected Real b1.frameTranslation.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.frameTranslation.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   input Real b1.body.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b1.body.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.body.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b1.body.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b1.body.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b1.body.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b1.body.frame_a.S[1,1] = b1.body.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[1,2] = b1.body.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[1,3] = b1.body.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[2,1] = b1.body.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[2,2] = b1.body.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[2,3] = b1.body.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[3,1] = b1.body.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[3,2] = b1.body.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.S[3,3] = b1.body.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b1.body.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b1.body.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b1.body.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b1.body.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.body.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.body.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b1.body.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b1.body.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b1.body.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b1.body.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b1.body.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.body.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.body.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b1.body.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b1.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b1.body.fa[1];
//   Real b1.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b1.body.fa[2];
//   Real b1.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b1.body.fa[3];
//   Real b1.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b1.body.ta[1];
//   Real b1.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b1.body.ta[2];
//   Real b1.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b1.body.ta[3];
//   protected Real b1.body.Sa[1,1](start = 1.0);
//   protected Real b1.body.Sa[1,2](start = 0.0);
//   protected Real b1.body.Sa[1,3](start = 0.0);
//   protected Real b1.body.Sa[2,1](start = 0.0);
//   protected Real b1.body.Sa[2,2](start = 1.0);
//   protected Real b1.body.Sa[2,3](start = 0.0);
//   protected Real b1.body.Sa[3,1](start = 0.0);
//   protected Real b1.body.Sa[3,2](start = 0.0);
//   protected Real b1.body.Sa[3,3](start = 1.0);
//   protected Real b1.body.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b1.body.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b1.body.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b1.body.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.body.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.body.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b1.body.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.body.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.body.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b1.body.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.body.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.body.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b1.body.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.body.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.body.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b1.body.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b1.body.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b1.body.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b1.body.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.body.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b1.body.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   Real b1.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b1.body.rCM[1](quantity = \"Length\", unit = \"m\");
//   Real b1.body.rCM[2](quantity = \"Length\", unit = \"m\");
//   Real b1.body.rCM[3](quantity = \"Length\", unit = \"m\");
//   Real b1.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b1.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b1.Axis[1](quantity = \"Length\", unit = \"m\") = b1.r[1] - b1.r0[1] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b1.Axis[2](quantity = \"Length\", unit = \"m\") = b1.r[2] - b1.r0[2] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b1.Axis[3](quantity = \"Length\", unit = \"m\") = b1.r[3] - b1.r0[3] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b1.Length(quantity = \"Length\", unit = \"m\") = sqrt(b1.Axis[1] ^ 2.0 + (b1.Axis[2] ^ 2.0 + b1.Axis[3] ^ 2.0)) \"Length of cylinder\";
//   constant Real b2.pi = 3.14159265358979;
//   constant Real b2.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b2.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b2.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b2.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b2.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b2.frame_a.S[1,1] = b2.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[1,2] = b2.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[1,3] = b2.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[2,1] = b2.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[2,2] = b2.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[2,3] = b2.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[3,1] = b2.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[3,2] = b2.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.S[3,3] = b2.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b2.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b2.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b2.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b2.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b2.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b2.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b2.fa[1];
//   Real b2.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b2.fa[2];
//   Real b2.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b2.fa[3];
//   Real b2.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b2.ta[1];
//   Real b2.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b2.ta[2];
//   Real b2.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b2.ta[3];
//   output Real b2.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b2.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b2.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b2.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b2.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b2.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b2.frame_b.S[1,1] = b2.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[1,2] = b2.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[1,3] = b2.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[2,1] = b2.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[2,2] = b2.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[2,3] = b2.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[3,1] = b2.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[3,2] = b2.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.S[3,3] = b2.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b2.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b2.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b2.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b2.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b2.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b2.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b2.fb[1];
//   Real b2.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b2.fb[2];
//   Real b2.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b2.fb[3];
//   Real b2.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b2.tb[1];
//   Real b2.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b2.tb[2];
//   Real b2.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b2.tb[3];
//   protected Real b2.Sa[1,1](start = 1.0);
//   protected Real b2.Sa[1,2](start = 0.0);
//   protected Real b2.Sa[1,3](start = 0.0);
//   protected Real b2.Sa[2,1](start = 0.0);
//   protected Real b2.Sa[2,2](start = 1.0);
//   protected Real b2.Sa[2,3](start = 0.0);
//   protected Real b2.Sa[3,1](start = 0.0);
//   protected Real b2.Sa[3,2](start = 0.0);
//   protected Real b2.Sa[3,3](start = 1.0);
//   protected Real b2.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b2.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b2.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b2.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b2.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b2.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b2.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.Sb[1,1](start = 1.0);
//   protected Real b2.Sb[1,2](start = 0.0);
//   protected Real b2.Sb[1,3](start = 0.0);
//   protected Real b2.Sb[2,1](start = 0.0);
//   protected Real b2.Sb[2,2](start = 1.0);
//   protected Real b2.Sb[2,3](start = 0.0);
//   protected Real b2.Sb[3,1](start = 0.0);
//   protected Real b2.Sb[3,2](start = 0.0);
//   protected Real b2.Sb[3,3](start = 1.0);
//   protected Real b2.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b2.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b2.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b2.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b2.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b2.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b2.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b2.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r[2](quantity = \"Length\", unit = \"m\") = 0.2 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b2.r0[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b2.r0[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b2.r0[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b2.Radius(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.05 \"Radius of cylinder\";
//   parameter Real b2.InnerRadius(quantity = \"Length\", unit = \"m\", min = 0.0, max = b2.Radius) = 0.0 \"Inner radius of cylinder\";
//   parameter Real b2.rho(min = 0.0) = 7.7 \"Density of material [g/cm^3]\";
//   parameter Real b2.Material[1] = 1.0 \"Color and specular coefficient\";
//   parameter Real b2.Material[2] = 0.0 \"Color and specular coefficient\";
//   parameter Real b2.Material[3] = 0.0 \"Color and specular coefficient\";
//   parameter Real b2.Material[4] = 0.5 \"Color and specular coefficient\";
//   Real b2.Scyl[1,1];
//   Real b2.Scyl[1,2];
//   Real b2.Scyl[1,3];
//   Real b2.Scyl[2,1];
//   Real b2.Scyl[2,2];
//   Real b2.Scyl[2,3];
//   Real b2.Scyl[3,1];
//   Real b2.Scyl[3,2];
//   Real b2.Scyl[3,3];
//   Real b2.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b2.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b2.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b2.box.r0[1] = b2.r0[1] \"Origin of visual object.\";
//   parameter Real b2.box.r0[2] = b2.r0[2] \"Origin of visual object.\";
//   parameter Real b2.box.r0[3] = b2.r0[3] \"Origin of visual object.\";
//   parameter Real b2.box.Length = b2.Length \"Length of visual object.\";
//   parameter Real b2.box.Width = 2.0 * b2.Radius \"Width of visual object.\";
//   parameter Real b2.box.Height = 2.0 * b2.Radius \"Height of visual object.\";
//   parameter Real b2.box.LengthDirection[1] = b2.Axis[1] \"Vector in length direction.\";
//   parameter Real b2.box.LengthDirection[2] = b2.Axis[2] \"Vector in length direction.\";
//   parameter Real b2.box.LengthDirection[3] = b2.Axis[3] \"Vector in length direction.\";
//   parameter Real b2.box.WidthDirection[1] = 0.0 \"Vector in width direction.\";
//   parameter Real b2.box.WidthDirection[2] = 1.0 \"Vector in width direction.\";
//   parameter Real b2.box.WidthDirection[3] = 0.0 \"Vector in width direction.\";
//   parameter String b2.box.Shape = \"pipe\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   parameter Real b2.box.Material[1] = b2.Material[1] \"Color and specular coefficient.\";
//   parameter Real b2.box.Material[2] = b2.Material[2] \"Color and specular coefficient.\";
//   parameter Real b2.box.Material[3] = b2.Material[3] \"Color and specular coefficient.\";
//   parameter Real b2.box.Material[4] = b2.Material[4] \"Color and specular coefficient.\";
//   parameter Real b2.box.Extra = b2.InnerRadius / b2.Radius \"Additional size data for some of the shape types\";
//   input Real b2.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   input Real b2.box.r[1] \"Position of visual object.\";
//   input Real b2.box.r[2] \"Position of visual object.\";
//   input Real b2.box.r[3] \"Position of visual object.\";
//   Real b2.box.nLength[1];
//   Real b2.box.nLength[2];
//   Real b2.box.nLength[3];
//   Real b2.box.nWidth[1];
//   Real b2.box.nWidth[2];
//   Real b2.box.nWidth[3];
//   Real b2.box.nHeight[1];
//   Real b2.box.nHeight[2];
//   Real b2.box.nHeight[3];
//   parameter String b2.box.mcShape.shapeType = b2.box.Shape \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real b2.box.mcShape.r[1](quantity = \"Length\", unit = \"m\") = b2.box.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b2.box.mcShape.r[2](quantity = \"Length\", unit = \"m\") = b2.box.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b2.box.mcShape.r[3](quantity = \"Length\", unit = \"m\") = b2.box.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b2.box.mcShape.r_shape[1](quantity = \"Length\", unit = \"m\") = b2.box.r0[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b2.box.mcShape.r_shape[2](quantity = \"Length\", unit = \"m\") = b2.box.r0[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b2.box.mcShape.r_shape[3](quantity = \"Length\", unit = \"m\") = b2.box.r0[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b2.box.mcShape.lengthDirection[1] = b2.box.LengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real b2.box.mcShape.lengthDirection[2] = b2.box.LengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real b2.box.mcShape.lengthDirection[3] = b2.box.LengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real b2.box.mcShape.widthDirection[1] = b2.box.WidthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real b2.box.mcShape.widthDirection[2] = b2.box.WidthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real b2.box.mcShape.widthDirection[3] = b2.box.WidthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real b2.box.mcShape.length(quantity = \"Length\", unit = \"m\") = b2.box.Length \"Length of visual object\";
//   input Real b2.box.mcShape.width(quantity = \"Length\", unit = \"m\") = b2.box.Width \"Width of visual object\";
//   input Real b2.box.mcShape.height(quantity = \"Length\", unit = \"m\") = b2.box.Height \"Height of visual object\";
//   input Real b2.box.mcShape.extra = b2.box.Extra \"Additional size data for some of the shape types\";
//   input Real b2.box.mcShape.color[1] = 255.0 * b2.box.Material[1] \"Color of shape\";
//   input Real b2.box.mcShape.color[2] = 255.0 * b2.box.Material[2] \"Color of shape\";
//   input Real b2.box.mcShape.color[3] = 255.0 * b2.box.Material[3] \"Color of shape\";
//   input Real b2.box.mcShape.specularCoefficient = b2.box.Material[4];
//   input Real b2.box.mcShape.S[1,1] = b2.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[1,2] = b2.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[1,3] = b2.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[2,1] = b2.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[2,2] = b2.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[2,3] = b2.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[3,1] = b2.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[3,2] = b2.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b2.box.mcShape.S[3,3] = b2.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[1,1] = b2.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[1,2] = b2.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[1,3] = b2.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[2,1] = b2.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[2,2] = b2.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[2,3] = b2.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[3,1] = b2.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[3,2] = b2.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b2.box.mcShape.Sshape[3,3] = b2.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   output Real b2.box.mcShape.rxvisobj[1] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.rxvisobj[2] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.rxvisobj[3] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.ryvisobj[1] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.ryvisobj[2] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.ryvisobj[3] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b2.box.mcShape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b2.box.mcShape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b2.box.mcShape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   Real b2.box.mcShape.abs_n_x = sqrt(b2.box.mcShape.lengthDirection[1] ^ 2.0 + (b2.box.mcShape.lengthDirection[2] ^ 2.0 + b2.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b2.box.mcShape.e_x[1] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 1.0 else b2.box.mcShape.lengthDirection[1] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.e_x[2] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 0.0 else b2.box.mcShape.lengthDirection[2] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.e_x[3] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 0.0 else b2.box.mcShape.lengthDirection[3] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.n_z_aux[1] = b2.box.mcShape.e_x[2] * b2.box.mcShape.widthDirection[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.widthDirection[2];
//   Real b2.box.mcShape.n_z_aux[2] = b2.box.mcShape.e_x[3] * b2.box.mcShape.widthDirection[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.widthDirection[3];
//   Real b2.box.mcShape.n_z_aux[3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.widthDirection[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.widthDirection[1];
//   Real b2.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[1];
//   Real b2.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[2];
//   Real b2.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[3];
//   Real b2.box.mcShape.e_z[1] = b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[2];
//   Real b2.box.mcShape.e_z[2] = b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[3];
//   Real b2.box.mcShape.e_z[3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[1];
//   protected output Real b2.box.mcShape.Form;
//   protected output Real b2.box.mcShape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b2.box.mcShape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b2.box.mcShape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b2.box.mcShape.Material;
//   protected output Real b2.box.mcShape.Extra;
//   constant Real b2.frameTranslation.pi = 3.14159265358979;
//   constant Real b2.frameTranslation.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b2.frameTranslation.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.frameTranslation.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.frameTranslation.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b2.frameTranslation.frame_a.S[1,1] = b2.frameTranslation.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[1,2] = b2.frameTranslation.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[1,3] = b2.frameTranslation.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[2,1] = b2.frameTranslation.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[2,2] = b2.frameTranslation.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[2,3] = b2.frameTranslation.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[3,1] = b2.frameTranslation.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[3,2] = b2.frameTranslation.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.S[3,3] = b2.frameTranslation.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b2.frameTranslation.fa[1];
//   Real b2.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b2.frameTranslation.fa[2];
//   Real b2.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b2.frameTranslation.fa[3];
//   Real b2.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b2.frameTranslation.ta[1];
//   Real b2.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b2.frameTranslation.ta[2];
//   Real b2.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b2.frameTranslation.ta[3];
//   output Real b2.frameTranslation.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b2.frameTranslation.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b2.frameTranslation.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b2.frameTranslation.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b2.frameTranslation.frame_b.S[1,1] = b2.frameTranslation.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[1,2] = b2.frameTranslation.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[1,3] = b2.frameTranslation.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[2,1] = b2.frameTranslation.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[2,2] = b2.frameTranslation.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[2,3] = b2.frameTranslation.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[3,1] = b2.frameTranslation.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[3,2] = b2.frameTranslation.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.S[3,3] = b2.frameTranslation.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.frameTranslation.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b2.frameTranslation.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.frameTranslation.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b2.frameTranslation.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.frameTranslation.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b2.frameTranslation.fb[1];
//   Real b2.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b2.frameTranslation.fb[2];
//   Real b2.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b2.frameTranslation.fb[3];
//   Real b2.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b2.frameTranslation.tb[1];
//   Real b2.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b2.frameTranslation.tb[2];
//   Real b2.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b2.frameTranslation.tb[3];
//   protected Real b2.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b2.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b2.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b2.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b2.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b2.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b2.frameTranslation.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.frameTranslation.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.frameTranslation.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b2.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b2.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b2.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b2.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b2.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b2.frameTranslation.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b2.frameTranslation.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.frameTranslation.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.frameTranslation.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.frameTranslation.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b2.frameTranslation.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.frameTranslation.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.frameTranslation.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b2.frameTranslation.r[1](quantity = \"Length\", unit = \"m\") = b2.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b2.frameTranslation.r[2](quantity = \"Length\", unit = \"m\") = b2.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b2.frameTranslation.r[3](quantity = \"Length\", unit = \"m\") = b2.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   protected Real b2.frameTranslation.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.frameTranslation.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   input Real b2.body.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b2.body.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.body.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b2.body.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b2.body.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b2.body.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b2.body.frame_a.S[1,1] = b2.body.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[1,2] = b2.body.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[1,3] = b2.body.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[2,1] = b2.body.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[2,2] = b2.body.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[2,3] = b2.body.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[3,1] = b2.body.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[3,2] = b2.body.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.S[3,3] = b2.body.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b2.body.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b2.body.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b2.body.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b2.body.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.body.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.body.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b2.body.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b2.body.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b2.body.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b2.body.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b2.body.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.body.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.body.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b2.body.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b2.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b2.body.fa[1];
//   Real b2.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b2.body.fa[2];
//   Real b2.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b2.body.fa[3];
//   Real b2.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b2.body.ta[1];
//   Real b2.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b2.body.ta[2];
//   Real b2.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b2.body.ta[3];
//   protected Real b2.body.Sa[1,1](start = 1.0);
//   protected Real b2.body.Sa[1,2](start = 0.0);
//   protected Real b2.body.Sa[1,3](start = 0.0);
//   protected Real b2.body.Sa[2,1](start = 0.0);
//   protected Real b2.body.Sa[2,2](start = 1.0);
//   protected Real b2.body.Sa[2,3](start = 0.0);
//   protected Real b2.body.Sa[3,1](start = 0.0);
//   protected Real b2.body.Sa[3,2](start = 0.0);
//   protected Real b2.body.Sa[3,3](start = 1.0);
//   protected Real b2.body.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b2.body.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b2.body.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b2.body.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.body.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.body.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b2.body.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.body.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.body.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b2.body.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.body.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.body.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b2.body.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.body.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.body.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b2.body.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b2.body.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b2.body.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b2.body.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.body.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b2.body.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   Real b2.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b2.body.rCM[1](quantity = \"Length\", unit = \"m\");
//   Real b2.body.rCM[2](quantity = \"Length\", unit = \"m\");
//   Real b2.body.rCM[3](quantity = \"Length\", unit = \"m\");
//   Real b2.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b2.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b2.Axis[1](quantity = \"Length\", unit = \"m\") = b2.r[1] - b2.r0[1] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b2.Axis[2](quantity = \"Length\", unit = \"m\") = b2.r[2] - b2.r0[2] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b2.Axis[3](quantity = \"Length\", unit = \"m\") = b2.r[3] - b2.r0[3] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b2.Length(quantity = \"Length\", unit = \"m\") = sqrt(b2.Axis[1] ^ 2.0 + (b2.Axis[2] ^ 2.0 + b2.Axis[3] ^ 2.0)) \"Length of cylinder\";
//   constant Real b0.pi = 3.14159265358979;
//   constant Real b0.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b0.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b0.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b0.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b0.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b0.frame_a.S[1,1] = b0.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[1,2] = b0.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[1,3] = b0.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[2,1] = b0.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[2,2] = b0.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[2,3] = b0.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[3,1] = b0.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[3,2] = b0.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.S[3,3] = b0.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b0.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b0.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b0.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b0.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b0.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b0.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b0.fa[1];
//   Real b0.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b0.fa[2];
//   Real b0.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b0.fa[3];
//   Real b0.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b0.ta[1];
//   Real b0.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b0.ta[2];
//   Real b0.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b0.ta[3];
//   output Real b0.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b0.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b0.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b0.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b0.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b0.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b0.frame_b.S[1,1] = b0.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[1,2] = b0.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[1,3] = b0.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[2,1] = b0.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[2,2] = b0.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[2,3] = b0.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[3,1] = b0.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[3,2] = b0.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.S[3,3] = b0.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b0.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b0.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b0.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b0.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b0.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b0.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b0.fb[1];
//   Real b0.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b0.fb[2];
//   Real b0.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b0.fb[3];
//   Real b0.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b0.tb[1];
//   Real b0.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b0.tb[2];
//   Real b0.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b0.tb[3];
//   protected Real b0.Sa[1,1](start = 1.0);
//   protected Real b0.Sa[1,2](start = 0.0);
//   protected Real b0.Sa[1,3](start = 0.0);
//   protected Real b0.Sa[2,1](start = 0.0);
//   protected Real b0.Sa[2,2](start = 1.0);
//   protected Real b0.Sa[2,3](start = 0.0);
//   protected Real b0.Sa[3,1](start = 0.0);
//   protected Real b0.Sa[3,2](start = 0.0);
//   protected Real b0.Sa[3,3](start = 1.0);
//   protected Real b0.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b0.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b0.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b0.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b0.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b0.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b0.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.Sb[1,1](start = 1.0);
//   protected Real b0.Sb[1,2](start = 0.0);
//   protected Real b0.Sb[1,3](start = 0.0);
//   protected Real b0.Sb[2,1](start = 0.0);
//   protected Real b0.Sb[2,2](start = 1.0);
//   protected Real b0.Sb[2,3](start = 0.0);
//   protected Real b0.Sb[3,1](start = 0.0);
//   protected Real b0.Sb[3,2](start = 0.0);
//   protected Real b0.Sb[3,3](start = 1.0);
//   protected Real b0.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b0.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b0.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b0.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b0.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b0.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b0.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b0.r[1](quantity = \"Length\", unit = \"m\") = 1.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b0.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b0.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b0.r0[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left box plane, resolved in frame_a\";
//   parameter Real b0.r0[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left box plane, resolved in frame_a\";
//   parameter Real b0.r0[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left box plane, resolved in frame_a\";
//   parameter Real b0.WidthDirection[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector in width direction, resolved in frame_a\";
//   parameter Real b0.WidthDirection[2](quantity = \"Length\", unit = \"m\") = 1.0 \"Vector in width direction, resolved in frame_a\";
//   parameter Real b0.WidthDirection[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector in width direction, resolved in frame_a\";
//   parameter Real b0.Width(quantity = \"Length\", unit = \"m\") = 0.01 \"Width of box\";
//   parameter Real b0.Height(quantity = \"Length\", unit = \"m\") = 0.01 \"Height of box\";
//   parameter Real b0.InnerWidth(quantity = \"Length\", unit = \"m\") = 0.0 \"Width of inner box surface\";
//   parameter Real b0.InnerHeight(quantity = \"Length\", unit = \"m\") = 0.0 \"Height of inner box surface\";
//   parameter Real b0.rho = 7.7 \"Density of box material [g/cm^3]\";
//   parameter Real b0.Material[1] = 0.0 \"Color and specular coefficient\";
//   parameter Real b0.Material[2] = 0.0 \"Color and specular coefficient\";
//   parameter Real b0.Material[3] = 1.0 \"Color and specular coefficient\";
//   parameter Real b0.Material[4] = 0.5 \"Color and specular coefficient\";
//   Real b0.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b0.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b0.Sbox[1,1];
//   Real b0.Sbox[1,2];
//   Real b0.Sbox[1,3];
//   Real b0.Sbox[2,1];
//   Real b0.Sbox[2,2];
//   Real b0.Sbox[2,3];
//   Real b0.Sbox[3,1];
//   Real b0.Sbox[3,2];
//   Real b0.Sbox[3,3];
//   Real b0.l(quantity = \"Length\", unit = \"m\");
//   Real b0.w(quantity = \"Length\", unit = \"m\");
//   Real b0.h(quantity = \"Length\", unit = \"m\");
//   Real b0.wi(quantity = \"Length\", unit = \"m\");
//   Real b0.hi(quantity = \"Length\", unit = \"m\");
//   parameter Real b0.box.r0[1] = b0.r0[1] \"Origin of visual object.\";
//   parameter Real b0.box.r0[2] = b0.r0[2] \"Origin of visual object.\";
//   parameter Real b0.box.r0[3] = b0.r0[3] \"Origin of visual object.\";
//   parameter Real b0.box.Length = b0.Length \"Length of visual object.\";
//   parameter Real b0.box.Width = b0.Width \"Width of visual object.\";
//   parameter Real b0.box.Height = b0.Height \"Height of visual object.\";
//   parameter Real b0.box.LengthDirection[1] = b0.LengthDirection[1] \"Vector in length direction.\";
//   parameter Real b0.box.LengthDirection[2] = b0.LengthDirection[2] \"Vector in length direction.\";
//   parameter Real b0.box.LengthDirection[3] = b0.LengthDirection[3] \"Vector in length direction.\";
//   parameter Real b0.box.WidthDirection[1] = b0.WidthDirection[1] \"Vector in width direction.\";
//   parameter Real b0.box.WidthDirection[2] = b0.WidthDirection[2] \"Vector in width direction.\";
//   parameter Real b0.box.WidthDirection[3] = b0.WidthDirection[3] \"Vector in width direction.\";
//   parameter String b0.box.Shape = \"box\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   parameter Real b0.box.Material[1] = b0.Material[1] \"Color and specular coefficient.\";
//   parameter Real b0.box.Material[2] = b0.Material[2] \"Color and specular coefficient.\";
//   parameter Real b0.box.Material[3] = b0.Material[3] \"Color and specular coefficient.\";
//   parameter Real b0.box.Material[4] = b0.Material[4] \"Color and specular coefficient.\";
//   parameter Real b0.box.Extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real b0.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   input Real b0.box.r[1] \"Position of visual object.\";
//   input Real b0.box.r[2] \"Position of visual object.\";
//   input Real b0.box.r[3] \"Position of visual object.\";
//   Real b0.box.nLength[1];
//   Real b0.box.nLength[2];
//   Real b0.box.nLength[3];
//   Real b0.box.nWidth[1];
//   Real b0.box.nWidth[2];
//   Real b0.box.nWidth[3];
//   Real b0.box.nHeight[1];
//   Real b0.box.nHeight[2];
//   Real b0.box.nHeight[3];
//   parameter String b0.box.mcShape.shapeType = b0.box.Shape \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real b0.box.mcShape.r[1](quantity = \"Length\", unit = \"m\") = b0.box.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b0.box.mcShape.r[2](quantity = \"Length\", unit = \"m\") = b0.box.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b0.box.mcShape.r[3](quantity = \"Length\", unit = \"m\") = b0.box.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b0.box.mcShape.r_shape[1](quantity = \"Length\", unit = \"m\") = b0.box.r0[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b0.box.mcShape.r_shape[2](quantity = \"Length\", unit = \"m\") = b0.box.r0[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b0.box.mcShape.r_shape[3](quantity = \"Length\", unit = \"m\") = b0.box.r0[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b0.box.mcShape.lengthDirection[1] = b0.box.LengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real b0.box.mcShape.lengthDirection[2] = b0.box.LengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real b0.box.mcShape.lengthDirection[3] = b0.box.LengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real b0.box.mcShape.widthDirection[1] = b0.box.WidthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real b0.box.mcShape.widthDirection[2] = b0.box.WidthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real b0.box.mcShape.widthDirection[3] = b0.box.WidthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real b0.box.mcShape.length(quantity = \"Length\", unit = \"m\") = b0.box.Length \"Length of visual object\";
//   input Real b0.box.mcShape.width(quantity = \"Length\", unit = \"m\") = b0.box.Width \"Width of visual object\";
//   input Real b0.box.mcShape.height(quantity = \"Length\", unit = \"m\") = b0.box.Height \"Height of visual object\";
//   input Real b0.box.mcShape.extra = b0.box.Extra \"Additional size data for some of the shape types\";
//   input Real b0.box.mcShape.color[1] = 255.0 * b0.box.Material[1] \"Color of shape\";
//   input Real b0.box.mcShape.color[2] = 255.0 * b0.box.Material[2] \"Color of shape\";
//   input Real b0.box.mcShape.color[3] = 255.0 * b0.box.Material[3] \"Color of shape\";
//   input Real b0.box.mcShape.specularCoefficient = b0.box.Material[4];
//   input Real b0.box.mcShape.S[1,1] = b0.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[1,2] = b0.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[1,3] = b0.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[2,1] = b0.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[2,2] = b0.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[2,3] = b0.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[3,1] = b0.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[3,2] = b0.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b0.box.mcShape.S[3,3] = b0.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[1,1] = b0.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[1,2] = b0.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[1,3] = b0.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[2,1] = b0.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[2,2] = b0.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[2,3] = b0.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[3,1] = b0.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[3,2] = b0.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b0.box.mcShape.Sshape[3,3] = b0.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   output Real b0.box.mcShape.rxvisobj[1] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.rxvisobj[2] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.rxvisobj[3] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.ryvisobj[1] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.ryvisobj[2] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.ryvisobj[3] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b0.box.mcShape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b0.box.mcShape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b0.box.mcShape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   Real b0.box.mcShape.abs_n_x = sqrt(b0.box.mcShape.lengthDirection[1] ^ 2.0 + (b0.box.mcShape.lengthDirection[2] ^ 2.0 + b0.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b0.box.mcShape.e_x[1] = if noEvent(b0.box.mcShape.abs_n_x < 1e-10) then 1.0 else b0.box.mcShape.lengthDirection[1] / b0.box.mcShape.abs_n_x;
//   Real b0.box.mcShape.e_x[2] = if noEvent(b0.box.mcShape.abs_n_x < 1e-10) then 0.0 else b0.box.mcShape.lengthDirection[2] / b0.box.mcShape.abs_n_x;
//   Real b0.box.mcShape.e_x[3] = if noEvent(b0.box.mcShape.abs_n_x < 1e-10) then 0.0 else b0.box.mcShape.lengthDirection[3] / b0.box.mcShape.abs_n_x;
//   Real b0.box.mcShape.n_z_aux[1] = b0.box.mcShape.e_x[2] * b0.box.mcShape.widthDirection[3] - b0.box.mcShape.e_x[3] * b0.box.mcShape.widthDirection[2];
//   Real b0.box.mcShape.n_z_aux[2] = b0.box.mcShape.e_x[3] * b0.box.mcShape.widthDirection[1] - b0.box.mcShape.e_x[1] * b0.box.mcShape.widthDirection[3];
//   Real b0.box.mcShape.n_z_aux[3] = b0.box.mcShape.e_x[1] * b0.box.mcShape.widthDirection[2] - b0.box.mcShape.e_x[2] * b0.box.mcShape.widthDirection[1];
//   Real b0.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]},if noEvent(b0.box.mcShape.n_z_aux[1] ^ 2.0 + (b0.box.mcShape.n_z_aux[2] ^ 2.0 + b0.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b0.box.mcShape.widthDirection[1],b0.box.mcShape.widthDirection[2],b0.box.mcShape.widthDirection[3]} else if noEvent(abs(b0.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]})[1];
//   Real b0.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]},if noEvent(b0.box.mcShape.n_z_aux[1] ^ 2.0 + (b0.box.mcShape.n_z_aux[2] ^ 2.0 + b0.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b0.box.mcShape.widthDirection[1],b0.box.mcShape.widthDirection[2],b0.box.mcShape.widthDirection[3]} else if noEvent(abs(b0.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]})[2];
//   Real b0.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]},if noEvent(b0.box.mcShape.n_z_aux[1] ^ 2.0 + (b0.box.mcShape.n_z_aux[2] ^ 2.0 + b0.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b0.box.mcShape.widthDirection[1],b0.box.mcShape.widthDirection[2],b0.box.mcShape.widthDirection[3]} else if noEvent(abs(b0.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b0.box.mcShape.e_x[1],b0.box.mcShape.e_x[2],b0.box.mcShape.e_x[3]})[3];
//   Real b0.box.mcShape.e_z[1] = b0.box.mcShape.e_x[2] * b0.box.mcShape.e_y[3] - b0.box.mcShape.e_x[3] * b0.box.mcShape.e_y[2];
//   Real b0.box.mcShape.e_z[2] = b0.box.mcShape.e_x[3] * b0.box.mcShape.e_y[1] - b0.box.mcShape.e_x[1] * b0.box.mcShape.e_y[3];
//   Real b0.box.mcShape.e_z[3] = b0.box.mcShape.e_x[1] * b0.box.mcShape.e_y[2] - b0.box.mcShape.e_x[2] * b0.box.mcShape.e_y[1];
//   protected output Real b0.box.mcShape.Form;
//   protected output Real b0.box.mcShape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b0.box.mcShape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b0.box.mcShape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b0.box.mcShape.Material;
//   protected output Real b0.box.mcShape.Extra;
//   constant Real b0.frameTranslation.pi = 3.14159265358979;
//   constant Real b0.frameTranslation.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b0.frameTranslation.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.frameTranslation.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.frameTranslation.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b0.frameTranslation.frame_a.S[1,1] = b0.frameTranslation.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[1,2] = b0.frameTranslation.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[1,3] = b0.frameTranslation.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[2,1] = b0.frameTranslation.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[2,2] = b0.frameTranslation.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[2,3] = b0.frameTranslation.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[3,1] = b0.frameTranslation.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[3,2] = b0.frameTranslation.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.S[3,3] = b0.frameTranslation.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b0.frameTranslation.fa[1];
//   Real b0.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b0.frameTranslation.fa[2];
//   Real b0.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b0.frameTranslation.fa[3];
//   Real b0.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b0.frameTranslation.ta[1];
//   Real b0.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b0.frameTranslation.ta[2];
//   Real b0.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b0.frameTranslation.ta[3];
//   output Real b0.frameTranslation.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b0.frameTranslation.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b0.frameTranslation.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b0.frameTranslation.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b0.frameTranslation.frame_b.S[1,1] = b0.frameTranslation.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[1,2] = b0.frameTranslation.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[1,3] = b0.frameTranslation.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[2,1] = b0.frameTranslation.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[2,2] = b0.frameTranslation.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[2,3] = b0.frameTranslation.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[3,1] = b0.frameTranslation.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[3,2] = b0.frameTranslation.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.S[3,3] = b0.frameTranslation.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.frameTranslation.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b0.frameTranslation.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.frameTranslation.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b0.frameTranslation.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.frameTranslation.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b0.frameTranslation.fb[1];
//   Real b0.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b0.frameTranslation.fb[2];
//   Real b0.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b0.frameTranslation.fb[3];
//   Real b0.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b0.frameTranslation.tb[1];
//   Real b0.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b0.frameTranslation.tb[2];
//   Real b0.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b0.frameTranslation.tb[3];
//   protected Real b0.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b0.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b0.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b0.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b0.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b0.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b0.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b0.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b0.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b0.frameTranslation.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.frameTranslation.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.frameTranslation.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b0.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b0.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b0.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b0.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b0.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b0.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b0.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b0.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b0.frameTranslation.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b0.frameTranslation.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.frameTranslation.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.frameTranslation.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.frameTranslation.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b0.frameTranslation.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.frameTranslation.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.frameTranslation.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b0.frameTranslation.r[1](quantity = \"Length\", unit = \"m\") = b0.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b0.frameTranslation.r[2](quantity = \"Length\", unit = \"m\") = b0.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b0.frameTranslation.r[3](quantity = \"Length\", unit = \"m\") = b0.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   protected Real b0.frameTranslation.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.frameTranslation.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   input Real b0.body.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b0.body.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.body.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b0.body.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b0.body.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b0.body.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b0.body.frame_a.S[1,1] = b0.body.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[1,2] = b0.body.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[1,3] = b0.body.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[2,1] = b0.body.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[2,2] = b0.body.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[2,3] = b0.body.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[3,1] = b0.body.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[3,2] = b0.body.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.S[3,3] = b0.body.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b0.body.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b0.body.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b0.body.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b0.body.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.body.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.body.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b0.body.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b0.body.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b0.body.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b0.body.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b0.body.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.body.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.body.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b0.body.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b0.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b0.body.fa[1];
//   Real b0.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b0.body.fa[2];
//   Real b0.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b0.body.fa[3];
//   Real b0.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b0.body.ta[1];
//   Real b0.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b0.body.ta[2];
//   Real b0.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b0.body.ta[3];
//   protected Real b0.body.Sa[1,1](start = 1.0);
//   protected Real b0.body.Sa[1,2](start = 0.0);
//   protected Real b0.body.Sa[1,3](start = 0.0);
//   protected Real b0.body.Sa[2,1](start = 0.0);
//   protected Real b0.body.Sa[2,2](start = 1.0);
//   protected Real b0.body.Sa[2,3](start = 0.0);
//   protected Real b0.body.Sa[3,1](start = 0.0);
//   protected Real b0.body.Sa[3,2](start = 0.0);
//   protected Real b0.body.Sa[3,3](start = 1.0);
//   protected Real b0.body.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b0.body.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b0.body.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b0.body.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.body.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.body.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b0.body.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.body.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.body.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b0.body.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.body.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.body.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b0.body.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.body.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.body.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b0.body.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b0.body.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b0.body.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b0.body.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.body.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b0.body.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   Real b0.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b0.body.rCM[1](quantity = \"Length\", unit = \"m\");
//   Real b0.body.rCM[2](quantity = \"Length\", unit = \"m\");
//   Real b0.body.rCM[3](quantity = \"Length\", unit = \"m\");
//   Real b0.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b0.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b0.LengthDirection[1](quantity = \"Length\", unit = \"m\") = b0.r[1] - b0.r0[1] \"Vector in length direction, resolved in frame_a\";
//   parameter Real b0.LengthDirection[2](quantity = \"Length\", unit = \"m\") = b0.r[2] - b0.r0[2] \"Vector in length direction, resolved in frame_a\";
//   parameter Real b0.LengthDirection[3](quantity = \"Length\", unit = \"m\") = b0.r[3] - b0.r0[3] \"Vector in length direction, resolved in frame_a\";
//   parameter Real b0.Length(quantity = \"Length\", unit = \"m\") = sqrt((b0.r[1] - b0.r0[1]) ^ 2.0 + ((b0.r[2] - b0.r0[2]) ^ 2.0 + (b0.r[3] - b0.r0[3]) ^ 2.0)) \"Length of box\";
//   constant Real sphereC.pi = 3.14159265358979;
//   constant Real sphereC.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real sphereC.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = sphereC.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real sphereC.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = sphereC.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real sphereC.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = sphereC.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real sphereC.frame_a.S[1,1] = sphereC.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[1,2] = sphereC.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[1,3] = sphereC.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[2,1] = sphereC.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[2,2] = sphereC.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[2,3] = sphereC.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[3,1] = sphereC.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[3,2] = sphereC.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.S[3,3] = sphereC.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = sphereC.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = sphereC.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = sphereC.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_a.f[1](quantity = \"Force\", unit = \"N\") = sphereC.fa[1];
//   Real sphereC.frame_a.f[2](quantity = \"Force\", unit = \"N\") = sphereC.fa[2];
//   Real sphereC.frame_a.f[3](quantity = \"Force\", unit = \"N\") = sphereC.fa[3];
//   Real sphereC.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = sphereC.ta[1];
//   Real sphereC.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = sphereC.ta[2];
//   Real sphereC.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = sphereC.ta[3];
//   input Real sphereC.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = sphereC.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real sphereC.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = sphereC.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real sphereC.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = sphereC.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real sphereC.frame_b.S[1,1] = sphereC.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[1,2] = sphereC.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[1,3] = sphereC.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[2,1] = sphereC.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[2,2] = sphereC.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[2,3] = sphereC.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[3,1] = sphereC.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[3,2] = sphereC.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.S[3,3] = sphereC.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real sphereC.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = sphereC.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = sphereC.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = sphereC.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = sphereC.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = sphereC.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real sphereC.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = sphereC.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real sphereC.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -sphereC.fb[1];
//   Real sphereC.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -sphereC.fb[2];
//   Real sphereC.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -sphereC.fb[3];
//   Real sphereC.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -sphereC.tb[1];
//   Real sphereC.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -sphereC.tb[2];
//   Real sphereC.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -sphereC.tb[3];
//   protected Real sphereC.Sa[1,1](start = 1.0);
//   protected Real sphereC.Sa[1,2](start = 0.0);
//   protected Real sphereC.Sa[1,3](start = 0.0);
//   protected Real sphereC.Sa[2,1](start = 0.0);
//   protected Real sphereC.Sa[2,2](start = 1.0);
//   protected Real sphereC.Sa[2,3](start = 0.0);
//   protected Real sphereC.Sa[3,1](start = 0.0);
//   protected Real sphereC.Sa[3,2](start = 0.0);
//   protected Real sphereC.Sa[3,3](start = 1.0);
//   protected Real sphereC.r0a[1](quantity = \"Length\", unit = \"m\", start = 1.0);
//   protected Real sphereC.r0a[2](quantity = \"Length\", unit = \"m\", start = 1.0);
//   protected Real sphereC.r0a[3](quantity = \"Length\", unit = \"m\", start = 1.0);
//   protected Real sphereC.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real sphereC.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real sphereC.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real sphereC.Sb[1,1](start = 1.0);
//   protected Real sphereC.Sb[1,2](start = 0.0);
//   protected Real sphereC.Sb[1,3](start = 0.0);
//   protected Real sphereC.Sb[2,1](start = 0.0);
//   protected Real sphereC.Sb[2,2](start = 1.0);
//   protected Real sphereC.Sb[2,3](start = 0.0);
//   protected Real sphereC.Sb[3,1](start = 0.0);
//   protected Real sphereC.Sb[3,2](start = 0.0);
//   protected Real sphereC.Sb[3,3](start = 1.0);
//   protected Real sphereC.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real sphereC.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real sphereC.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real sphereC.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real sphereC.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real sphereC.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real sphereC.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real sphereC.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real sphereC.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real sphereC.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real sphereC.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   Real sphereC.S_rel[1,1];
//   Real sphereC.S_rel[1,2];
//   Real sphereC.S_rel[1,3];
//   Real sphereC.S_rel[2,1];
//   Real sphereC.S_rel[2,2];
//   Real sphereC.S_rel[2,3];
//   Real sphereC.S_rel[3,1];
//   Real sphereC.S_rel[3,2];
//   Real sphereC.S_rel[3,3];
//   Real sphereC.r_rela[1](quantity = \"Length\", unit = \"m\");
//   Real sphereC.r_rela[2](quantity = \"Length\", unit = \"m\");
//   Real sphereC.r_rela[3](quantity = \"Length\", unit = \"m\");
//   Real sphereC.v_rela[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.v_rela[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.v_rela[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.w_rela[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real sphereC.w_rela[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real sphereC.w_rela[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real sphereC.a_rela[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real sphereC.a_rela[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real sphereC.a_rela[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real sphereC.z_rela[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real sphereC.z_rela[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real sphereC.z_rela[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real sphereC.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real sphereC.fc[1](quantity = \"Force\", unit = \"N\") \"Constraint forces in direction of fa\";
//   Real sphereC.fc[2](quantity = \"Force\", unit = \"N\") \"Constraint forces in direction of fa\";
//   Real sphereC.fc[3](quantity = \"Force\", unit = \"N\") \"Constraint forces in direction of fa\";
//   protected Real sphereC.constraintResidue[1];
//   protected Real sphereC.constraintResidue[2];
//   protected Real sphereC.constraintResidue[3];
//   protected Real sphereC.constraintResidue_d[1];
//   protected Real sphereC.constraintResidue_d[2];
//   protected Real sphereC.constraintResidue_d[3];
//   protected Real sphereC.constraintResidue_dd[1];
//   protected Real sphereC.constraintResidue_dd[2];
//   protected Real sphereC.constraintResidue_dd[3];
//   constant Real b3.pi = 3.14159265358979;
//   constant Real b3.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b3.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b3.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b3.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b3.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b3.frame_a.S[1,1] = b3.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[1,2] = b3.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[1,3] = b3.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[2,1] = b3.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[2,2] = b3.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[2,3] = b3.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[3,1] = b3.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[3,2] = b3.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.S[3,3] = b3.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b3.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b3.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b3.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b3.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b3.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b3.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b3.fa[1];
//   Real b3.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b3.fa[2];
//   Real b3.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b3.fa[3];
//   Real b3.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b3.ta[1];
//   Real b3.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b3.ta[2];
//   Real b3.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b3.ta[3];
//   output Real b3.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b3.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b3.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b3.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b3.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b3.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b3.frame_b.S[1,1] = b3.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[1,2] = b3.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[1,3] = b3.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[2,1] = b3.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[2,2] = b3.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[2,3] = b3.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[3,1] = b3.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[3,2] = b3.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.S[3,3] = b3.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b3.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b3.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b3.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b3.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b3.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b3.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b3.fb[1];
//   Real b3.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b3.fb[2];
//   Real b3.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b3.fb[3];
//   Real b3.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b3.tb[1];
//   Real b3.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b3.tb[2];
//   Real b3.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b3.tb[3];
//   protected Real b3.Sa[1,1](start = 1.0);
//   protected Real b3.Sa[1,2](start = 0.0);
//   protected Real b3.Sa[1,3](start = 0.0);
//   protected Real b3.Sa[2,1](start = 0.0);
//   protected Real b3.Sa[2,2](start = 1.0);
//   protected Real b3.Sa[2,3](start = 0.0);
//   protected Real b3.Sa[3,1](start = 0.0);
//   protected Real b3.Sa[3,2](start = 0.0);
//   protected Real b3.Sa[3,3](start = 1.0);
//   protected Real b3.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b3.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b3.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b3.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b3.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b3.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b3.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.Sb[1,1](start = 1.0);
//   protected Real b3.Sb[1,2](start = 0.0);
//   protected Real b3.Sb[1,3](start = 0.0);
//   protected Real b3.Sb[2,1](start = 0.0);
//   protected Real b3.Sb[2,2](start = 1.0);
//   protected Real b3.Sb[2,3](start = 0.0);
//   protected Real b3.Sb[3,1](start = 0.0);
//   protected Real b3.Sb[3,2](start = 0.0);
//   protected Real b3.Sb[3,3](start = 1.0);
//   protected Real b3.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b3.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b3.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b3.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b3.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b3.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b3.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b3.r[1](quantity = \"Length\", unit = \"m\") = -1.0 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b3.r[2](quantity = \"Length\", unit = \"m\") = 0.3 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b3.r[3](quantity = \"Length\", unit = \"m\") = 0.1 \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real b3.r0[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b3.r0[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b3.r0[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to left circle center, resolved in frame_a\";
//   parameter Real b3.Radius(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.05 \"Radius of cylinder\";
//   parameter Real b3.InnerRadius(quantity = \"Length\", unit = \"m\", min = 0.0, max = b3.Radius) = 0.0 \"Inner radius of cylinder\";
//   parameter Real b3.rho(min = 0.0) = 7.7 \"Density of material [g/cm^3]\";
//   parameter Real b3.Material[1] = 0.0 \"Color and specular coefficient\";
//   parameter Real b3.Material[2] = 1.0 \"Color and specular coefficient\";
//   parameter Real b3.Material[3] = 0.0 \"Color and specular coefficient\";
//   parameter Real b3.Material[4] = 0.5 \"Color and specular coefficient\";
//   Real b3.Scyl[1,1];
//   Real b3.Scyl[1,2];
//   Real b3.Scyl[1,3];
//   Real b3.Scyl[2,1];
//   Real b3.Scyl[2,2];
//   Real b3.Scyl[2,3];
//   Real b3.Scyl[3,1];
//   Real b3.Scyl[3,2];
//   Real b3.Scyl[3,3];
//   Real b3.mo(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b3.mi(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b3.I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b3.box.r0[1] = b3.r0[1] \"Origin of visual object.\";
//   parameter Real b3.box.r0[2] = b3.r0[2] \"Origin of visual object.\";
//   parameter Real b3.box.r0[3] = b3.r0[3] \"Origin of visual object.\";
//   parameter Real b3.box.Length = b3.Length \"Length of visual object.\";
//   parameter Real b3.box.Width = 2.0 * b3.Radius \"Width of visual object.\";
//   parameter Real b3.box.Height = 2.0 * b3.Radius \"Height of visual object.\";
//   parameter Real b3.box.LengthDirection[1] = b3.Axis[1] \"Vector in length direction.\";
//   parameter Real b3.box.LengthDirection[2] = b3.Axis[2] \"Vector in length direction.\";
//   parameter Real b3.box.LengthDirection[3] = b3.Axis[3] \"Vector in length direction.\";
//   parameter Real b3.box.WidthDirection[1] = 0.0 \"Vector in width direction.\";
//   parameter Real b3.box.WidthDirection[2] = 1.0 \"Vector in width direction.\";
//   parameter Real b3.box.WidthDirection[3] = 0.0 \"Vector in width direction.\";
//   parameter String b3.box.Shape = \"pipe\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   parameter Real b3.box.Material[1] = b3.Material[1] \"Color and specular coefficient.\";
//   parameter Real b3.box.Material[2] = b3.Material[2] \"Color and specular coefficient.\";
//   parameter Real b3.box.Material[3] = b3.Material[3] \"Color and specular coefficient.\";
//   parameter Real b3.box.Material[4] = b3.Material[4] \"Color and specular coefficient.\";
//   parameter Real b3.box.Extra = b3.InnerRadius / b3.Radius \"Additional size data for some of the shape types\";
//   input Real b3.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   input Real b3.box.r[1] \"Position of visual object.\";
//   input Real b3.box.r[2] \"Position of visual object.\";
//   input Real b3.box.r[3] \"Position of visual object.\";
//   Real b3.box.nLength[1];
//   Real b3.box.nLength[2];
//   Real b3.box.nLength[3];
//   Real b3.box.nWidth[1];
//   Real b3.box.nWidth[2];
//   Real b3.box.nWidth[3];
//   Real b3.box.nHeight[1];
//   Real b3.box.nHeight[2];
//   Real b3.box.nHeight[3];
//   parameter String b3.box.mcShape.shapeType = b3.box.Shape \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real b3.box.mcShape.r[1](quantity = \"Length\", unit = \"m\") = b3.box.r[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b3.box.mcShape.r[2](quantity = \"Length\", unit = \"m\") = b3.box.r[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b3.box.mcShape.r[3](quantity = \"Length\", unit = \"m\") = b3.box.r[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real b3.box.mcShape.r_shape[1](quantity = \"Length\", unit = \"m\") = b3.box.r0[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b3.box.mcShape.r_shape[2](quantity = \"Length\", unit = \"m\") = b3.box.r0[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b3.box.mcShape.r_shape[3](quantity = \"Length\", unit = \"m\") = b3.box.r0[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real b3.box.mcShape.lengthDirection[1] = b3.box.LengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real b3.box.mcShape.lengthDirection[2] = b3.box.LengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real b3.box.mcShape.lengthDirection[3] = b3.box.LengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real b3.box.mcShape.widthDirection[1] = b3.box.WidthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real b3.box.mcShape.widthDirection[2] = b3.box.WidthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real b3.box.mcShape.widthDirection[3] = b3.box.WidthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real b3.box.mcShape.length(quantity = \"Length\", unit = \"m\") = b3.box.Length \"Length of visual object\";
//   input Real b3.box.mcShape.width(quantity = \"Length\", unit = \"m\") = b3.box.Width \"Width of visual object\";
//   input Real b3.box.mcShape.height(quantity = \"Length\", unit = \"m\") = b3.box.Height \"Height of visual object\";
//   input Real b3.box.mcShape.extra = b3.box.Extra \"Additional size data for some of the shape types\";
//   input Real b3.box.mcShape.color[1] = 255.0 * b3.box.Material[1] \"Color of shape\";
//   input Real b3.box.mcShape.color[2] = 255.0 * b3.box.Material[2] \"Color of shape\";
//   input Real b3.box.mcShape.color[3] = 255.0 * b3.box.Material[3] \"Color of shape\";
//   input Real b3.box.mcShape.specularCoefficient = b3.box.Material[4];
//   input Real b3.box.mcShape.S[1,1] = b3.box.S[1,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[1,2] = b3.box.S[1,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[1,3] = b3.box.S[1,3] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[2,1] = b3.box.S[2,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[2,2] = b3.box.S[2,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[2,3] = b3.box.S[2,3] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[3,1] = b3.box.S[3,1] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[3,2] = b3.box.S[3,2] \"3 x 3 transformation matrix.\";
//   input Real b3.box.mcShape.S[3,3] = b3.box.S[3,3] \"3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[1,1] = b3.box.Sshape[1,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[1,2] = b3.box.Sshape[1,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[1,3] = b3.box.Sshape[1,3] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[2,1] = b3.box.Sshape[2,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[2,2] = b3.box.Sshape[2,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[2,3] = b3.box.Sshape[2,3] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[3,1] = b3.box.Sshape[3,1] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[3,2] = b3.box.Sshape[3,2] \"local 3 x 3 transformation matrix.\";
//   Real b3.box.mcShape.Sshape[3,3] = b3.box.Sshape[3,3] \"local 3 x 3 transformation matrix.\";
//   output Real b3.box.mcShape.rxvisobj[1] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.rxvisobj[2] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.rxvisobj[3] \"x-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.ryvisobj[1] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.ryvisobj[2] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.ryvisobj[3] \"y-axis unit vector of shape, resolved in world frame\";
//   output Real b3.box.mcShape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b3.box.mcShape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real b3.box.mcShape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   Real b3.box.mcShape.abs_n_x = sqrt(b3.box.mcShape.lengthDirection[1] ^ 2.0 + (b3.box.mcShape.lengthDirection[2] ^ 2.0 + b3.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b3.box.mcShape.e_x[1] = if noEvent(b3.box.mcShape.abs_n_x < 1e-10) then 1.0 else b3.box.mcShape.lengthDirection[1] / b3.box.mcShape.abs_n_x;
//   Real b3.box.mcShape.e_x[2] = if noEvent(b3.box.mcShape.abs_n_x < 1e-10) then 0.0 else b3.box.mcShape.lengthDirection[2] / b3.box.mcShape.abs_n_x;
//   Real b3.box.mcShape.e_x[3] = if noEvent(b3.box.mcShape.abs_n_x < 1e-10) then 0.0 else b3.box.mcShape.lengthDirection[3] / b3.box.mcShape.abs_n_x;
//   Real b3.box.mcShape.n_z_aux[1] = b3.box.mcShape.e_x[2] * b3.box.mcShape.widthDirection[3] - b3.box.mcShape.e_x[3] * b3.box.mcShape.widthDirection[2];
//   Real b3.box.mcShape.n_z_aux[2] = b3.box.mcShape.e_x[3] * b3.box.mcShape.widthDirection[1] - b3.box.mcShape.e_x[1] * b3.box.mcShape.widthDirection[3];
//   Real b3.box.mcShape.n_z_aux[3] = b3.box.mcShape.e_x[1] * b3.box.mcShape.widthDirection[2] - b3.box.mcShape.e_x[2] * b3.box.mcShape.widthDirection[1];
//   Real b3.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]},if noEvent(b3.box.mcShape.n_z_aux[1] ^ 2.0 + (b3.box.mcShape.n_z_aux[2] ^ 2.0 + b3.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.box.mcShape.widthDirection[1],b3.box.mcShape.widthDirection[2],b3.box.mcShape.widthDirection[3]} else if noEvent(abs(b3.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]})[1];
//   Real b3.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]},if noEvent(b3.box.mcShape.n_z_aux[1] ^ 2.0 + (b3.box.mcShape.n_z_aux[2] ^ 2.0 + b3.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.box.mcShape.widthDirection[1],b3.box.mcShape.widthDirection[2],b3.box.mcShape.widthDirection[3]} else if noEvent(abs(b3.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]})[2];
//   Real b3.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]},if noEvent(b3.box.mcShape.n_z_aux[1] ^ 2.0 + (b3.box.mcShape.n_z_aux[2] ^ 2.0 + b3.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.box.mcShape.widthDirection[1],b3.box.mcShape.widthDirection[2],b3.box.mcShape.widthDirection[3]} else if noEvent(abs(b3.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.box.mcShape.e_x[1],b3.box.mcShape.e_x[2],b3.box.mcShape.e_x[3]})[3];
//   Real b3.box.mcShape.e_z[1] = b3.box.mcShape.e_x[2] * b3.box.mcShape.e_y[3] - b3.box.mcShape.e_x[3] * b3.box.mcShape.e_y[2];
//   Real b3.box.mcShape.e_z[2] = b3.box.mcShape.e_x[3] * b3.box.mcShape.e_y[1] - b3.box.mcShape.e_x[1] * b3.box.mcShape.e_y[3];
//   Real b3.box.mcShape.e_z[3] = b3.box.mcShape.e_x[1] * b3.box.mcShape.e_y[2] - b3.box.mcShape.e_x[2] * b3.box.mcShape.e_y[1];
//   protected output Real b3.box.mcShape.Form;
//   protected output Real b3.box.mcShape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b3.box.mcShape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b3.box.mcShape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real b3.box.mcShape.Material;
//   protected output Real b3.box.mcShape.Extra;
//   constant Real b3.frameTranslation.pi = 3.14159265358979;
//   constant Real b3.frameTranslation.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real b3.frameTranslation.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.frameTranslation.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.frameTranslation.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b3.frameTranslation.frame_a.S[1,1] = b3.frameTranslation.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[1,2] = b3.frameTranslation.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[1,3] = b3.frameTranslation.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[2,1] = b3.frameTranslation.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[2,2] = b3.frameTranslation.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[2,3] = b3.frameTranslation.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[3,1] = b3.frameTranslation.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[3,2] = b3.frameTranslation.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.S[3,3] = b3.frameTranslation.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b3.frameTranslation.fa[1];
//   Real b3.frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b3.frameTranslation.fa[2];
//   Real b3.frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b3.frameTranslation.fa[3];
//   Real b3.frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b3.frameTranslation.ta[1];
//   Real b3.frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b3.frameTranslation.ta[2];
//   Real b3.frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b3.frameTranslation.ta[3];
//   output Real b3.frameTranslation.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b3.frameTranslation.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real b3.frameTranslation.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = b3.frameTranslation.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b3.frameTranslation.frame_b.S[1,1] = b3.frameTranslation.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[1,2] = b3.frameTranslation.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[1,3] = b3.frameTranslation.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[2,1] = b3.frameTranslation.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[2,2] = b3.frameTranslation.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[2,3] = b3.frameTranslation.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[3,1] = b3.frameTranslation.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[3,2] = b3.frameTranslation.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.S[3,3] = b3.frameTranslation.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.frameTranslation.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = b3.frameTranslation.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.frameTranslation.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b3.frameTranslation.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.frameTranslation.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -b3.frameTranslation.fb[1];
//   Real b3.frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -b3.frameTranslation.fb[2];
//   Real b3.frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -b3.frameTranslation.fb[3];
//   Real b3.frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -b3.frameTranslation.tb[1];
//   Real b3.frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -b3.frameTranslation.tb[2];
//   Real b3.frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -b3.frameTranslation.tb[3];
//   protected Real b3.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b3.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b3.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b3.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b3.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b3.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b3.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b3.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b3.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b3.frameTranslation.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.frameTranslation.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.frameTranslation.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b3.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b3.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b3.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b3.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b3.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b3.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b3.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b3.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b3.frameTranslation.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real b3.frameTranslation.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.frameTranslation.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.frameTranslation.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.frameTranslation.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real b3.frameTranslation.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.frameTranslation.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.frameTranslation.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   parameter Real b3.frameTranslation.r[1](quantity = \"Length\", unit = \"m\") = b3.r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b3.frameTranslation.r[2](quantity = \"Length\", unit = \"m\") = b3.r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real b3.frameTranslation.r[3](quantity = \"Length\", unit = \"m\") = b3.r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   protected Real b3.frameTranslation.vaux[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.vaux[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.frameTranslation.vaux[3](quantity = \"Velocity\", unit = \"m/s\");
//   input Real b3.body.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = b3.body.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.body.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = b3.body.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real b3.body.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = b3.body.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real b3.body.frame_a.S[1,1] = b3.body.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[1,2] = b3.body.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[1,3] = b3.body.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[2,1] = b3.body.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[2,2] = b3.body.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[2,3] = b3.body.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[3,1] = b3.body.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[3,2] = b3.body.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.S[3,3] = b3.body.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real b3.body.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = b3.body.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = b3.body.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = b3.body.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.body.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.body.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = b3.body.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = b3.body.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = b3.body.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = b3.body.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real b3.body.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.body.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.body.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = b3.body.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real b3.body.frame_a.f[1](quantity = \"Force\", unit = \"N\") = b3.body.fa[1];
//   Real b3.body.frame_a.f[2](quantity = \"Force\", unit = \"N\") = b3.body.fa[2];
//   Real b3.body.frame_a.f[3](quantity = \"Force\", unit = \"N\") = b3.body.fa[3];
//   Real b3.body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = b3.body.ta[1];
//   Real b3.body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = b3.body.ta[2];
//   Real b3.body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = b3.body.ta[3];
//   protected Real b3.body.Sa[1,1](start = 1.0);
//   protected Real b3.body.Sa[1,2](start = 0.0);
//   protected Real b3.body.Sa[1,3](start = 0.0);
//   protected Real b3.body.Sa[2,1](start = 0.0);
//   protected Real b3.body.Sa[2,2](start = 1.0);
//   protected Real b3.body.Sa[2,3](start = 0.0);
//   protected Real b3.body.Sa[3,1](start = 0.0);
//   protected Real b3.body.Sa[3,2](start = 0.0);
//   protected Real b3.body.Sa[3,3](start = 1.0);
//   protected Real b3.body.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real b3.body.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real b3.body.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real b3.body.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.body.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.body.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real b3.body.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.body.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.body.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real b3.body.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.body.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.body.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real b3.body.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.body.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.body.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real b3.body.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real b3.body.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real b3.body.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real b3.body.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.body.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real b3.body.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   Real b3.body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0);
//   Real b3.body.rCM[1](quantity = \"Length\", unit = \"m\");
//   Real b3.body.rCM[2](quantity = \"Length\", unit = \"m\");
//   Real b3.body.rCM[3](quantity = \"Length\", unit = \"m\");
//   Real b3.body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   Real b3.body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\");
//   parameter Real b3.Axis[1](quantity = \"Length\", unit = \"m\") = b3.r[1] - b3.r0[1] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b3.Axis[2](quantity = \"Length\", unit = \"m\") = b3.r[2] - b3.r0[2] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b3.Axis[3](quantity = \"Length\", unit = \"m\") = b3.r[3] - b3.r0[3] \"Vector in direction of cylinder axis, resolved in frame_a\";
//   parameter Real b3.Length(quantity = \"Length\", unit = \"m\") = sqrt(b3.Axis[1] ^ 2.0 + (b3.Axis[2] ^ 2.0 + b3.Axis[3] ^ 2.0)) \"Length of cylinder\";
//   constant Real rev.pi = 3.14159265358979;
//   constant Real rev.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real rev.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = rev.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real rev.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = rev.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real rev.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = rev.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real rev.frame_a.S[1,1] = rev.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[1,2] = rev.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[1,3] = rev.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[2,1] = rev.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[2,2] = rev.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[2,3] = rev.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[3,1] = rev.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[3,2] = rev.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.S[3,3] = rev.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = rev.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = rev.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = rev.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = rev.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = rev.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = rev.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_a.f[1](quantity = \"Force\", unit = \"N\") = rev.fa[1];
//   Real rev.frame_a.f[2](quantity = \"Force\", unit = \"N\") = rev.fa[2];
//   Real rev.frame_a.f[3](quantity = \"Force\", unit = \"N\") = rev.fa[3];
//   Real rev.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = rev.ta[1];
//   Real rev.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = rev.ta[2];
//   Real rev.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = rev.ta[3];
//   output Real rev.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = rev.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real rev.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = rev.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real rev.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = rev.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real rev.frame_b.S[1,1] = rev.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[1,2] = rev.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[1,3] = rev.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[2,1] = rev.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[2,2] = rev.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[2,3] = rev.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[3,1] = rev.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[3,2] = rev.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.S[3,3] = rev.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = rev.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = rev.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = rev.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = rev.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = rev.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = rev.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -rev.fb[1];
//   Real rev.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -rev.fb[2];
//   Real rev.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -rev.fb[3];
//   Real rev.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -rev.tb[1];
//   Real rev.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -rev.tb[2];
//   Real rev.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -rev.tb[3];
//   protected Real rev.Sa[1,1](start = 1.0);
//   protected Real rev.Sa[1,2](start = 0.0);
//   protected Real rev.Sa[1,3](start = 0.0);
//   protected Real rev.Sa[2,1](start = 0.0);
//   protected Real rev.Sa[2,2](start = 1.0);
//   protected Real rev.Sa[2,3](start = 0.0);
//   protected Real rev.Sa[3,1](start = 0.0);
//   protected Real rev.Sa[3,2](start = 0.0);
//   protected Real rev.Sa[3,3](start = 1.0);
//   protected Real rev.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real rev.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real rev.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real rev.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real rev.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real rev.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real rev.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev.Sb[1,1](start = 1.0);
//   protected Real rev.Sb[1,2](start = 0.0);
//   protected Real rev.Sb[1,3](start = 0.0);
//   protected Real rev.Sb[2,1](start = 0.0);
//   protected Real rev.Sb[2,2](start = 1.0);
//   protected Real rev.Sb[2,3](start = 0.0);
//   protected Real rev.Sb[3,1](start = 0.0);
//   protected Real rev.Sb[3,2](start = 0.0);
//   protected Real rev.Sb[3,3](start = 1.0);
//   protected Real rev.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real rev.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real rev.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real rev.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real rev.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real rev.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real rev.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   Real rev.S_rel[1,1];
//   Real rev.S_rel[1,2];
//   Real rev.S_rel[1,3];
//   Real rev.S_rel[2,1];
//   Real rev.S_rel[2,2];
//   Real rev.S_rel[2,3];
//   Real rev.S_rel[3,1];
//   Real rev.S_rel[3,2];
//   Real rev.S_rel[3,3];
//   Real rev.r_rela[1](quantity = \"Length\", unit = \"m\");
//   Real rev.r_rela[2](quantity = \"Length\", unit = \"m\");
//   Real rev.r_rela[3](quantity = \"Length\", unit = \"m\");
//   Real rev.v_rela[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev.v_rela[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev.v_rela[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev.w_rela[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev.w_rela[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev.w_rela[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev.a_rela[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev.a_rela[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev.a_rela[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev.z_rela[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev.z_rela[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev.z_rela[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   parameter Real rev.n[1] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev.n[2] = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev.n[3] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev.q0 = 0.0 \"Rotation angle offset (see info) [deg]\";
//   parameter Boolean rev.startValueFixed = false \"true, if start values of q, qd are fixed\";
//   Real rev.q(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", fixed = rev.startValueFixed);
//   Real rev.qd(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", fixed = rev.startValueFixed);
//   Real rev.qdd(quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev.qq(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real rev.nn[1];
//   Real rev.nn[2];
//   Real rev.nn[3];
//   Real rev.sinq;
//   Real rev.cosq;
//   Real rev.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rev.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rev.bearing.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rev.bearing.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   constant Real rev1.pi = 3.14159265358979;
//   constant Real rev1.PI = 3.14159265358979 \"Only for compatibility reasons\";
//   input Real rev1.frame_a.r0[1](quantity = \"Length\", unit = \"m\") = rev1.r0a[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real rev1.frame_a.r0[2](quantity = \"Length\", unit = \"m\") = rev1.r0a[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   input Real rev1.frame_a.r0[3](quantity = \"Length\", unit = \"m\") = rev1.r0a[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real rev1.frame_a.S[1,1] = rev1.Sa[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[1,2] = rev1.Sa[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[1,3] = rev1.Sa[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[2,1] = rev1.Sa[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[2,2] = rev1.Sa[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[2,3] = rev1.Sa[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[3,1] = rev1.Sa[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[3,2] = rev1.Sa[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.S[3,3] = rev1.Sa[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_a.v[1](quantity = \"Velocity\", unit = \"m/s\") = rev1.va[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.v[2](quantity = \"Velocity\", unit = \"m/s\") = rev1.va[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.v[3](quantity = \"Velocity\", unit = \"m/s\") = rev1.va[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wa[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wa[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wa[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.aa[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.aa[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.aa[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_a.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.za[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.za[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.za[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_a.f[1](quantity = \"Force\", unit = \"N\") = rev1.fa[1];
//   Real rev1.frame_a.f[2](quantity = \"Force\", unit = \"N\") = rev1.fa[2];
//   Real rev1.frame_a.f[3](quantity = \"Force\", unit = \"N\") = rev1.fa[3];
//   Real rev1.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") = rev1.ta[1];
//   Real rev1.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") = rev1.ta[2];
//   Real rev1.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") = rev1.ta[3];
//   output Real rev1.frame_b.r0[1](quantity = \"Length\", unit = \"m\") = rev1.r0b[1] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real rev1.frame_b.r0[2](quantity = \"Length\", unit = \"m\") = rev1.r0b[2] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   output Real rev1.frame_b.r0[3](quantity = \"Length\", unit = \"m\") = rev1.r0b[3] \"Position vector from inertial system to frame origin, resolved in inertial system\";
//   Real rev1.frame_b.S[1,1] = rev1.Sb[1,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[1,2] = rev1.Sb[1,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[1,3] = rev1.Sb[1,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[2,1] = rev1.Sb[2,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[2,2] = rev1.Sb[2,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[2,3] = rev1.Sb[2,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[3,1] = rev1.Sb[3,1] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[3,2] = rev1.Sb[3,2] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.S[3,3] = rev1.Sb[3,3] \"Transformation matrix from frame_a to inertial system\";
//   Real rev1.frame_b.v[1](quantity = \"Velocity\", unit = \"m/s\") = rev1.vb[1] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.v[2](quantity = \"Velocity\", unit = \"m/s\") = rev1.vb[2] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.v[3](quantity = \"Velocity\", unit = \"m/s\") = rev1.vb[3] \"Absolute velocity of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wb[1] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wb[2] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\") = rev1.wb[3] \"Absolute angular velocity of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.a[1](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.ab[1] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.a[2](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.ab[2] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.a[3](quantity = \"Acceleration\", unit = \"m/s2\") = rev1.ab[3] \"Absolute acceleration of frame origin, resolved in frame_a\";
//   Real rev1.frame_b.z[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.zb[1] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.z[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.zb[2] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.z[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = rev1.zb[3] \"Absolute angular acceleration of frame_a, resolved in frame_a\";
//   Real rev1.frame_b.f[1](quantity = \"Force\", unit = \"N\") = -rev1.fb[1];
//   Real rev1.frame_b.f[2](quantity = \"Force\", unit = \"N\") = -rev1.fb[2];
//   Real rev1.frame_b.f[3](quantity = \"Force\", unit = \"N\") = -rev1.fb[3];
//   Real rev1.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") = -rev1.tb[1];
//   Real rev1.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") = -rev1.tb[2];
//   Real rev1.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") = -rev1.tb[3];
//   protected Real rev1.Sa[1,1](start = 1.0);
//   protected Real rev1.Sa[1,2](start = 0.0);
//   protected Real rev1.Sa[1,3](start = 0.0);
//   protected Real rev1.Sa[2,1](start = 0.0);
//   protected Real rev1.Sa[2,2](start = 1.0);
//   protected Real rev1.Sa[2,3](start = 0.0);
//   protected Real rev1.Sa[3,1](start = 0.0);
//   protected Real rev1.Sa[3,2](start = 0.0);
//   protected Real rev1.Sa[3,3](start = 1.0);
//   protected Real rev1.r0a[1](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.r0a[2](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.r0a[3](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.va[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.va[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.va[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.wa[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.wa[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.wa[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.aa[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.aa[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.aa[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.za[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.za[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.za[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.fa[1](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.fa[2](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.fa[3](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.ta[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev1.ta[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev1.ta[3](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev1.Sb[1,1](start = 1.0);
//   protected Real rev1.Sb[1,2](start = 0.0);
//   protected Real rev1.Sb[1,3](start = 0.0);
//   protected Real rev1.Sb[2,1](start = 0.0);
//   protected Real rev1.Sb[2,2](start = 1.0);
//   protected Real rev1.Sb[2,3](start = 0.0);
//   protected Real rev1.Sb[3,1](start = 0.0);
//   protected Real rev1.Sb[3,2](start = 0.0);
//   protected Real rev1.Sb[3,3](start = 1.0);
//   protected Real rev1.r0b[1](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.r0b[2](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.r0b[3](quantity = \"Length\", unit = \"m\");
//   protected Real rev1.vb[1](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.vb[2](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.vb[3](quantity = \"Velocity\", unit = \"m/s\");
//   protected Real rev1.wb[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.wb[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.wb[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   protected Real rev1.ab[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.ab[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.ab[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   protected Real rev1.zb[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.zb[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.zb[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   protected Real rev1.fb[1](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.fb[2](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.fb[3](quantity = \"Force\", unit = \"N\");
//   protected Real rev1.tb[1](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev1.tb[2](quantity = \"Torque\", unit = \"N.m\");
//   protected Real rev1.tb[3](quantity = \"Torque\", unit = \"N.m\");
//   Real rev1.S_rel[1,1];
//   Real rev1.S_rel[1,2];
//   Real rev1.S_rel[1,3];
//   Real rev1.S_rel[2,1];
//   Real rev1.S_rel[2,2];
//   Real rev1.S_rel[2,3];
//   Real rev1.S_rel[3,1];
//   Real rev1.S_rel[3,2];
//   Real rev1.S_rel[3,3];
//   Real rev1.r_rela[1](quantity = \"Length\", unit = \"m\");
//   Real rev1.r_rela[2](quantity = \"Length\", unit = \"m\");
//   Real rev1.r_rela[3](quantity = \"Length\", unit = \"m\");
//   Real rev1.v_rela[1](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev1.v_rela[2](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev1.v_rela[3](quantity = \"Velocity\", unit = \"m/s\");
//   Real rev1.w_rela[1](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev1.w_rela[2](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev1.w_rela[3](quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\");
//   Real rev1.a_rela[1](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev1.a_rela[2](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev1.a_rela[3](quantity = \"Acceleration\", unit = \"m/s2\");
//   Real rev1.z_rela[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev1.z_rela[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev1.z_rela[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   parameter Real rev1.n[1] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev1.n[2] = 0.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev1.n[3] = 1.0 \"Axis of rotation resolved in frame_a (= same as in frame_b)\";
//   parameter Real rev1.q0 = 0.0 \"Rotation angle offset (see info) [deg]\";
//   parameter Boolean rev1.startValueFixed = false \"true, if start values of q, qd are fixed\";
//   Real rev1.q(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", fixed = rev1.startValueFixed);
//   Real rev1.qd(quantity = \"AngularVelocity\", unit = \"rad/s\", displayUnit = \"rev/min\", fixed = rev1.startValueFixed);
//   Real rev1.qdd(quantity = \"AngularAcceleration\", unit = \"rad/s2\");
//   Real rev1.qq(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   Real rev1.nn[1];
//   Real rev1.nn[2];
//   Real rev1.nn[3];
//   Real rev1.sinq;
//   Real rev1.cosq;
//   Real rev1.axis.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rev1.axis.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
//   Real rev1.bearing.phi(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Absolute rotation angle of flange\";
//   Real rev1.bearing.tau(quantity = \"Torque\", unit = \"N.m\") \"Cut torque in the flange\";
// equation
//   inertial.gravity[1] = inertial.g * inertial.ng[1];
//   inertial.gravity[2] = inertial.g * inertial.ng[2];
//   inertial.gravity[3] = inertial.g * inertial.ng[3];
//   inertial.frame_b.S[1,1] = 1.0;
//   inertial.frame_b.S[1,2] = 0.0;
//   inertial.frame_b.S[1,3] = 0.0;
//   inertial.frame_b.S[2,1] = 0.0;
//   inertial.frame_b.S[2,2] = 1.0;
//   inertial.frame_b.S[2,3] = 0.0;
//   inertial.frame_b.S[3,1] = 0.0;
//   inertial.frame_b.S[3,2] = 0.0;
//   inertial.frame_b.S[3,3] = 1.0;
//   inertial.frame_b.r0[1] = 0.0;
//   inertial.frame_b.r0[2] = 0.0;
//   inertial.frame_b.r0[3] = 0.0;
//   inertial.frame_b.v[1] = 0.0;
//   inertial.frame_b.v[2] = 0.0;
//   inertial.frame_b.v[3] = 0.0;
//   inertial.frame_b.w[1] = 0.0;
//   inertial.frame_b.w[2] = 0.0;
//   inertial.frame_b.w[3] = 0.0;
//   inertial.frame_b.a[1] = -inertial.gravity[1];
//   inertial.frame_b.a[2] = -inertial.gravity[2];
//   inertial.frame_b.a[3] = -inertial.gravity[3];
//   inertial.frame_b.z[1] = 0.0;
//   inertial.frame_b.z[2] = 0.0;
//   inertial.frame_b.z[3] = 0.0;
//   j1.axis.phi = j1.q;
//   j1.bearing.phi = 0.0;
//   j1.qd = der(j1.q);
//   j1.qdd = der(j1.qd);
//   j1.nn[1] = j1.n[1] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.nn[2] = j1.n[2] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.nn[3] = j1.n[3] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.qq = j1.q - 0.0174532925199433 * j1.q0;
//   j1.sinq = sin(j1.qq);
//   j1.cosq = cos(j1.qq);
//   j1.S_rel[1,1] = j1.nn[1] ^ 2.0 + j1.cosq * (1.0 - j1.nn[1] ^ 2.0);
//   j1.S_rel[1,2] = j1.nn[1] * j1.nn[2] + j1.cosq * ((-j1.nn[1]) * j1.nn[2]) - (-j1.sinq) * j1.nn[3];
//   j1.S_rel[1,3] = j1.nn[1] * j1.nn[3] + j1.cosq * ((-j1.nn[1]) * j1.nn[3]) - j1.sinq * j1.nn[2];
//   j1.S_rel[2,1] = j1.nn[2] * j1.nn[1] + j1.cosq * ((-j1.nn[2]) * j1.nn[1]) - j1.sinq * j1.nn[3];
//   j1.S_rel[2,2] = j1.nn[2] ^ 2.0 + j1.cosq * (1.0 - j1.nn[2] ^ 2.0);
//   j1.S_rel[2,3] = j1.nn[2] * j1.nn[3] + j1.cosq * ((-j1.nn[2]) * j1.nn[3]) - (-j1.sinq) * j1.nn[1];
//   j1.S_rel[3,1] = j1.nn[3] * j1.nn[1] + j1.cosq * ((-j1.nn[3]) * j1.nn[1]) - (-j1.sinq) * j1.nn[2];
//   j1.S_rel[3,2] = j1.nn[3] * j1.nn[2] + j1.cosq * ((-j1.nn[3]) * j1.nn[2]) - j1.sinq * j1.nn[1];
//   j1.S_rel[3,3] = j1.nn[3] ^ 2.0 + j1.cosq * (1.0 - j1.nn[3] ^ 2.0);
//   j1.r_rela[1] = 0.0;
//   j1.r_rela[2] = 0.0;
//   j1.r_rela[3] = 0.0;
//   j1.v_rela[1] = 0.0;
//   j1.v_rela[2] = 0.0;
//   j1.v_rela[3] = 0.0;
//   j1.a_rela[1] = 0.0;
//   j1.a_rela[2] = 0.0;
//   j1.a_rela[3] = 0.0;
//   j1.w_rela[1] = j1.qd * j1.nn[1];
//   j1.w_rela[2] = j1.qd * j1.nn[2];
//   j1.w_rela[3] = j1.qd * j1.nn[3];
//   j1.z_rela[1] = j1.qdd * j1.nn[1];
//   j1.z_rela[2] = j1.qdd * j1.nn[2];
//   j1.z_rela[3] = j1.qdd * j1.nn[3];
//   j1.Sb[1,1] = j1.Sa[1,1] * j1.S_rel[1,1] + (j1.Sa[1,2] * j1.S_rel[1,2] + j1.Sa[1,3] * j1.S_rel[1,3]);
//   j1.Sb[1,2] = j1.Sa[1,1] * j1.S_rel[2,1] + (j1.Sa[1,2] * j1.S_rel[2,2] + j1.Sa[1,3] * j1.S_rel[2,3]);
//   j1.Sb[1,3] = j1.Sa[1,1] * j1.S_rel[3,1] + (j1.Sa[1,2] * j1.S_rel[3,2] + j1.Sa[1,3] * j1.S_rel[3,3]);
//   j1.Sb[2,1] = j1.Sa[2,1] * j1.S_rel[1,1] + (j1.Sa[2,2] * j1.S_rel[1,2] + j1.Sa[2,3] * j1.S_rel[1,3]);
//   j1.Sb[2,2] = j1.Sa[2,1] * j1.S_rel[2,1] + (j1.Sa[2,2] * j1.S_rel[2,2] + j1.Sa[2,3] * j1.S_rel[2,3]);
//   j1.Sb[2,3] = j1.Sa[2,1] * j1.S_rel[3,1] + (j1.Sa[2,2] * j1.S_rel[3,2] + j1.Sa[2,3] * j1.S_rel[3,3]);
//   j1.Sb[3,1] = j1.Sa[3,1] * j1.S_rel[1,1] + (j1.Sa[3,2] * j1.S_rel[1,2] + j1.Sa[3,3] * j1.S_rel[1,3]);
//   j1.Sb[3,2] = j1.Sa[3,1] * j1.S_rel[2,1] + (j1.Sa[3,2] * j1.S_rel[2,2] + j1.Sa[3,3] * j1.S_rel[2,3]);
//   j1.Sb[3,3] = j1.Sa[3,1] * j1.S_rel[3,1] + (j1.Sa[3,2] * j1.S_rel[3,2] + j1.Sa[3,3] * j1.S_rel[3,3]);
//   j1.r0b[1] = j1.r0a[1];
//   j1.r0b[2] = j1.r0a[2];
//   j1.r0b[3] = j1.r0a[3];
//   j1.vb[1] = j1.S_rel[1,1] * j1.va[1] + (j1.S_rel[1,2] * j1.va[2] + j1.S_rel[1,3] * j1.va[3]);
//   j1.vb[2] = j1.S_rel[2,1] * j1.va[1] + (j1.S_rel[2,2] * j1.va[2] + j1.S_rel[2,3] * j1.va[3]);
//   j1.vb[3] = j1.S_rel[3,1] * j1.va[1] + (j1.S_rel[3,2] * j1.va[2] + j1.S_rel[3,3] * j1.va[3]);
//   j1.wb[1] = j1.S_rel[1,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[1,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[1,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.wb[2] = j1.S_rel[2,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[2,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[2,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.wb[3] = j1.S_rel[3,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[3,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[3,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.ab[1] = j1.S_rel[1,1] * j1.aa[1] + (j1.S_rel[1,2] * j1.aa[2] + j1.S_rel[1,3] * j1.aa[3]);
//   j1.ab[2] = j1.S_rel[2,1] * j1.aa[1] + (j1.S_rel[2,2] * j1.aa[2] + j1.S_rel[2,3] * j1.aa[3]);
//   j1.ab[3] = j1.S_rel[3,1] * j1.aa[1] + (j1.S_rel[3,2] * j1.aa[2] + j1.S_rel[3,3] * j1.aa[3]);
//   j1.zb[1] = j1.S_rel[1,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[1,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[1,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.zb[2] = j1.S_rel[2,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[2,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[2,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.zb[3] = j1.S_rel[3,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[3,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[3,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.fa[1] = j1.S_rel[1,1] * j1.fb[1] + (j1.S_rel[2,1] * j1.fb[2] + j1.S_rel[3,1] * j1.fb[3]);
//   j1.fa[2] = j1.S_rel[1,2] * j1.fb[1] + (j1.S_rel[2,2] * j1.fb[2] + j1.S_rel[3,2] * j1.fb[3]);
//   j1.fa[3] = j1.S_rel[1,3] * j1.fb[1] + (j1.S_rel[2,3] * j1.fb[2] + j1.S_rel[3,3] * j1.fb[3]);
//   j1.ta[1] = j1.S_rel[1,1] * j1.tb[1] + (j1.S_rel[2,1] * j1.tb[2] + j1.S_rel[3,1] * j1.tb[3]);
//   j1.ta[2] = j1.S_rel[1,2] * j1.tb[1] + (j1.S_rel[2,2] * j1.tb[2] + j1.S_rel[3,2] * j1.tb[3]);
//   j1.ta[3] = j1.S_rel[1,3] * j1.tb[1] + (j1.S_rel[2,3] * j1.tb[2] + j1.S_rel[3,3] * j1.tb[3]);
//   j1.axis.tau = j1.nn[1] * j1.tb[1] + (j1.nn[2] * j1.tb[2] + j1.nn[3] * j1.tb[3]);
//   j2.axis.s = j2.q;
//   j2.bearing.s = 0.0;
//   j2.qd = der(j2.q);
//   j2.qdd = der(j2.qd);
//   j2.nn[1] = j2.n[1] / sqrt(j2.n[1] ^ 2.0 + (j2.n[2] ^ 2.0 + j2.n[3] ^ 2.0));
//   j2.nn[2] = j2.n[2] / sqrt(j2.n[1] ^ 2.0 + (j2.n[2] ^ 2.0 + j2.n[3] ^ 2.0));
//   j2.nn[3] = j2.n[3] / sqrt(j2.n[1] ^ 2.0 + (j2.n[2] ^ 2.0 + j2.n[3] ^ 2.0));
//   j2.S_rel[1,1] = 1.0;
//   j2.S_rel[1,2] = 0.0;
//   j2.S_rel[1,3] = 0.0;
//   j2.S_rel[2,1] = 0.0;
//   j2.S_rel[2,2] = 1.0;
//   j2.S_rel[2,3] = 0.0;
//   j2.S_rel[3,1] = 0.0;
//   j2.S_rel[3,2] = 0.0;
//   j2.S_rel[3,3] = 1.0;
//   j2.qq = j2.q - j2.q0;
//   j2.r_rela[1] = j2.qq * j2.nn[1];
//   j2.r_rela[2] = j2.qq * j2.nn[2];
//   j2.r_rela[3] = j2.qq * j2.nn[3];
//   j2.v_rela[1] = j2.qd * j2.nn[1];
//   j2.v_rela[2] = j2.qd * j2.nn[2];
//   j2.v_rela[3] = j2.qd * j2.nn[3];
//   j2.a_rela[1] = j2.qdd * j2.nn[1];
//   j2.a_rela[2] = j2.qdd * j2.nn[2];
//   j2.a_rela[3] = j2.qdd * j2.nn[3];
//   j2.w_rela[1] = 0.0;
//   j2.w_rela[2] = 0.0;
//   j2.w_rela[3] = 0.0;
//   j2.z_rela[1] = 0.0;
//   j2.z_rela[2] = 0.0;
//   j2.z_rela[3] = 0.0;
//   j2.Sb[1,1] = j2.Sa[1,1];
//   j2.Sb[1,2] = j2.Sa[1,2];
//   j2.Sb[1,3] = j2.Sa[1,3];
//   j2.Sb[2,1] = j2.Sa[2,1];
//   j2.Sb[2,2] = j2.Sa[2,2];
//   j2.Sb[2,3] = j2.Sa[2,3];
//   j2.Sb[3,1] = j2.Sa[3,1];
//   j2.Sb[3,2] = j2.Sa[3,2];
//   j2.Sb[3,3] = j2.Sa[3,3];
//   j2.r0b[1] = j2.r0a[1] + (j2.Sa[1,1] * j2.r_rela[1] + (j2.Sa[1,2] * j2.r_rela[2] + j2.Sa[1,3] * j2.r_rela[3]));
//   j2.r0b[2] = j2.r0a[2] + (j2.Sa[2,1] * j2.r_rela[1] + (j2.Sa[2,2] * j2.r_rela[2] + j2.Sa[2,3] * j2.r_rela[3]));
//   j2.r0b[3] = j2.r0a[3] + (j2.Sa[3,1] * j2.r_rela[1] + (j2.Sa[3,2] * j2.r_rela[2] + j2.Sa[3,3] * j2.r_rela[3]));
//   j2.vaux[1] = j2.wa[2] * j2.r_rela[3] - j2.wa[3] * j2.r_rela[2];
//   j2.vaux[2] = j2.wa[3] * j2.r_rela[1] - j2.wa[1] * j2.r_rela[3];
//   j2.vaux[3] = j2.wa[1] * j2.r_rela[2] - j2.wa[2] * j2.r_rela[1];
//   j2.vb[1] = j2.va[1] + (j2.v_rela[1] + j2.vaux[1]);
//   j2.vb[2] = j2.va[2] + (j2.v_rela[2] + j2.vaux[2]);
//   j2.vb[3] = j2.va[3] + (j2.v_rela[3] + j2.vaux[3]);
//   j2.wb[1] = j2.wa[1];
//   j2.wb[2] = j2.wa[2];
//   j2.wb[3] = j2.wa[3];
//   j2.ab[1] = j2.aa[1] + (j2.a_rela[1] + (j2.za[2] * j2.r_rela[3] + ((-j2.za[3] * j2.r_rela[2]) + (j2.wa[2] * (j2.vaux[3] + 2.0 * j2.v_rela[3]) + (-j2.wa[3] * (j2.vaux[2] + 2.0 * j2.v_rela[2]))))));
//   j2.ab[2] = j2.aa[2] + (j2.a_rela[2] + (j2.za[3] * j2.r_rela[1] + ((-j2.za[1] * j2.r_rela[3]) + (j2.wa[3] * (j2.vaux[1] + 2.0 * j2.v_rela[1]) + (-j2.wa[1] * (j2.vaux[3] + 2.0 * j2.v_rela[3]))))));
//   j2.ab[3] = j2.aa[3] + (j2.a_rela[3] + (j2.za[1] * j2.r_rela[2] + ((-j2.za[2] * j2.r_rela[1]) + (j2.wa[1] * (j2.vaux[2] + 2.0 * j2.v_rela[2]) + (-j2.wa[2] * (j2.vaux[1] + 2.0 * j2.v_rela[1]))))));
//   j2.zb[1] = j2.za[1];
//   j2.zb[2] = j2.za[2];
//   j2.zb[3] = j2.za[3];
//   j2.fa[1] = j2.fb[1];
//   j2.fa[2] = j2.fb[2];
//   j2.fa[3] = j2.fb[3];
//   j2.ta[1] = j2.tb[1] + (j2.r_rela[2] * j2.fa[3] + (-j2.r_rela[3] * j2.fa[2]));
//   j2.ta[2] = j2.tb[2] + (j2.r_rela[3] * j2.fa[1] + (-j2.r_rela[1] * j2.fa[3]));
//   j2.ta[3] = j2.tb[3] + (j2.r_rela[1] * j2.fa[2] + (-j2.r_rela[2] * j2.fa[1]));
//   j2.axis.f = j2.nn[1] * j2.fb[1] + (j2.nn[2] * j2.fb[2] + j2.nn[3] * j2.fb[3]);
//   b1.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b1.box.mcShape.shapeType);
//   b1.box.mcShape.Material = PackMaterial(b1.box.mcShape.color[1] / 255.0,b1.box.mcShape.color[2] / 255.0,b1.box.mcShape.color[3] / 255.0,b1.box.mcShape.specularCoefficient);
//   b1.box.mcShape.Extra = b1.box.mcShape.extra;
//   b1.box.mcShape.size[1] = b1.box.mcShape.length;
//   b1.box.mcShape.size[2] = b1.box.mcShape.width;
//   b1.box.mcShape.size[3] = b1.box.mcShape.height;
//   b1.box.mcShape.Sshape[1,1] = b1.box.mcShape.e_x[1];
//   b1.box.mcShape.Sshape[1,2] = b1.box.mcShape.e_y[1];
//   b1.box.mcShape.Sshape[1,3] = b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[2];
//   b1.box.mcShape.Sshape[2,1] = b1.box.mcShape.e_x[2];
//   b1.box.mcShape.Sshape[2,2] = b1.box.mcShape.e_y[2];
//   b1.box.mcShape.Sshape[2,3] = b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[3];
//   b1.box.mcShape.Sshape[3,1] = b1.box.mcShape.e_x[3];
//   b1.box.mcShape.Sshape[3,2] = b1.box.mcShape.e_y[3];
//   b1.box.mcShape.Sshape[3,3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[1];
//   b1.box.mcShape.rxvisobj[1] = b1.box.mcShape.S[1,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.rxvisobj[2] = b1.box.mcShape.S[2,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.rxvisobj[3] = b1.box.mcShape.S[3,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.ryvisobj[1] = b1.box.mcShape.S[1,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.ryvisobj[2] = b1.box.mcShape.S[2,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.ryvisobj[3] = b1.box.mcShape.S[3,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.rvisobj[1] = b1.box.mcShape.r[1] + (b1.box.mcShape.S[1,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.rvisobj[2] = b1.box.mcShape.r[2] + (b1.box.mcShape.S[2,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.rvisobj[3] = b1.box.mcShape.r[3] + (b1.box.mcShape.S[3,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.e_x[1] = b1.box.nLength[1];
//   b1.box.mcShape.e_x[2] = b1.box.nLength[2];
//   b1.box.mcShape.e_x[3] = b1.box.nLength[3];
//   b1.box.mcShape.e_y[1] = b1.box.nWidth[1];
//   b1.box.mcShape.e_y[2] = b1.box.nWidth[2];
//   b1.box.mcShape.e_y[3] = b1.box.nWidth[3];
//   b1.box.mcShape.e_z[1] = b1.box.nHeight[1];
//   b1.box.mcShape.e_z[2] = b1.box.nHeight[2];
//   b1.box.mcShape.e_z[3] = b1.box.nHeight[3];
//   b1.frameTranslation.Sb[1,1] = b1.frameTranslation.Sa[1,1];
//   b1.frameTranslation.Sb[1,2] = b1.frameTranslation.Sa[1,2];
//   b1.frameTranslation.Sb[1,3] = b1.frameTranslation.Sa[1,3];
//   b1.frameTranslation.Sb[2,1] = b1.frameTranslation.Sa[2,1];
//   b1.frameTranslation.Sb[2,2] = b1.frameTranslation.Sa[2,2];
//   b1.frameTranslation.Sb[2,3] = b1.frameTranslation.Sa[2,3];
//   b1.frameTranslation.Sb[3,1] = b1.frameTranslation.Sa[3,1];
//   b1.frameTranslation.Sb[3,2] = b1.frameTranslation.Sa[3,2];
//   b1.frameTranslation.Sb[3,3] = b1.frameTranslation.Sa[3,3];
//   b1.frameTranslation.wb[1] = b1.frameTranslation.wa[1];
//   b1.frameTranslation.wb[2] = b1.frameTranslation.wa[2];
//   b1.frameTranslation.wb[3] = b1.frameTranslation.wa[3];
//   b1.frameTranslation.zb[1] = b1.frameTranslation.za[1];
//   b1.frameTranslation.zb[2] = b1.frameTranslation.za[2];
//   b1.frameTranslation.zb[3] = b1.frameTranslation.za[3];
//   b1.frameTranslation.r0b[1] = b1.frameTranslation.r0a[1] + (b1.frameTranslation.Sa[1,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[1,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[1,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.r0b[2] = b1.frameTranslation.r0a[2] + (b1.frameTranslation.Sa[2,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[2,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[2,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.r0b[3] = b1.frameTranslation.r0a[3] + (b1.frameTranslation.Sa[3,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[3,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[3,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.vaux[1] = b1.frameTranslation.wa[2] * b1.frameTranslation.r[3] - b1.frameTranslation.wa[3] * b1.frameTranslation.r[2];
//   b1.frameTranslation.vaux[2] = b1.frameTranslation.wa[3] * b1.frameTranslation.r[1] - b1.frameTranslation.wa[1] * b1.frameTranslation.r[3];
//   b1.frameTranslation.vaux[3] = b1.frameTranslation.wa[1] * b1.frameTranslation.r[2] - b1.frameTranslation.wa[2] * b1.frameTranslation.r[1];
//   b1.frameTranslation.vb[1] = b1.frameTranslation.va[1] + b1.frameTranslation.vaux[1];
//   b1.frameTranslation.vb[2] = b1.frameTranslation.va[2] + b1.frameTranslation.vaux[2];
//   b1.frameTranslation.vb[3] = b1.frameTranslation.va[3] + b1.frameTranslation.vaux[3];
//   b1.frameTranslation.ab[1] = b1.frameTranslation.aa[1] + (b1.frameTranslation.za[2] * b1.frameTranslation.r[3] + ((-b1.frameTranslation.za[3] * b1.frameTranslation.r[2]) + (b1.frameTranslation.wa[2] * b1.frameTranslation.vaux[3] + (-b1.frameTranslation.wa[3] * b1.frameTranslation.vaux[2]))));
//   b1.frameTranslation.ab[2] = b1.frameTranslation.aa[2] + (b1.frameTranslation.za[3] * b1.frameTranslation.r[1] + ((-b1.frameTranslation.za[1] * b1.frameTranslation.r[3]) + (b1.frameTranslation.wa[3] * b1.frameTranslation.vaux[1] + (-b1.frameTranslation.wa[1] * b1.frameTranslation.vaux[3]))));
//   b1.frameTranslation.ab[3] = b1.frameTranslation.aa[3] + (b1.frameTranslation.za[1] * b1.frameTranslation.r[2] + ((-b1.frameTranslation.za[2] * b1.frameTranslation.r[1]) + (b1.frameTranslation.wa[1] * b1.frameTranslation.vaux[2] + (-b1.frameTranslation.wa[2] * b1.frameTranslation.vaux[1]))));
//   b1.frameTranslation.fa[1] = b1.frameTranslation.fb[1];
//   b1.frameTranslation.fa[2] = b1.frameTranslation.fb[2];
//   b1.frameTranslation.fa[3] = b1.frameTranslation.fb[3];
//   b1.frameTranslation.ta[1] = b1.frameTranslation.tb[1] + (b1.frameTranslation.r[2] * b1.frameTranslation.fa[3] + (-b1.frameTranslation.r[3] * b1.frameTranslation.fa[2]));
//   b1.frameTranslation.ta[2] = b1.frameTranslation.tb[2] + (b1.frameTranslation.r[3] * b1.frameTranslation.fa[1] + (-b1.frameTranslation.r[1] * b1.frameTranslation.fa[3]));
//   b1.frameTranslation.ta[3] = b1.frameTranslation.tb[3] + (b1.frameTranslation.r[1] * b1.frameTranslation.fa[2] + (-b1.frameTranslation.r[2] * b1.frameTranslation.fa[1]));
//   b1.body.fa[1] = b1.body.m * (b1.body.aa[1] + (b1.body.za[2] * b1.body.rCM[3] + ((-b1.body.za[3] * b1.body.rCM[2]) + (b1.body.wa[2] * (b1.body.wa[1] * b1.body.rCM[2] - b1.body.wa[2] * b1.body.rCM[1]) + (-b1.body.wa[3] * (b1.body.wa[3] * b1.body.rCM[1] - b1.body.wa[1] * b1.body.rCM[3]))))));
//   b1.body.fa[2] = b1.body.m * (b1.body.aa[2] + (b1.body.za[3] * b1.body.rCM[1] + ((-b1.body.za[1] * b1.body.rCM[3]) + (b1.body.wa[3] * (b1.body.wa[2] * b1.body.rCM[3] - b1.body.wa[3] * b1.body.rCM[2]) + (-b1.body.wa[1] * (b1.body.wa[1] * b1.body.rCM[2] - b1.body.wa[2] * b1.body.rCM[1]))))));
//   b1.body.fa[3] = b1.body.m * (b1.body.aa[3] + (b1.body.za[1] * b1.body.rCM[2] + ((-b1.body.za[2] * b1.body.rCM[1]) + (b1.body.wa[1] * (b1.body.wa[3] * b1.body.rCM[1] - b1.body.wa[1] * b1.body.rCM[3]) + (-b1.body.wa[2] * (b1.body.wa[2] * b1.body.rCM[3] - b1.body.wa[3] * b1.body.rCM[2]))))));
//   b1.body.ta[1] = b1.body.I[1,1] * b1.body.za[1] + (b1.body.I[1,2] * b1.body.za[2] + (b1.body.I[1,3] * b1.body.za[3] + (b1.body.wa[2] * (b1.body.I[3,1] * b1.body.wa[1] + (b1.body.I[3,2] * b1.body.wa[2] + b1.body.I[3,3] * b1.body.wa[3])) + ((-b1.body.wa[3] * (b1.body.I[2,1] * b1.body.wa[1] + (b1.body.I[2,2] * b1.body.wa[2] + b1.body.I[2,3] * b1.body.wa[3]))) + (b1.body.rCM[2] * b1.body.fa[3] + (-b1.body.rCM[3] * b1.body.fa[2]))))));
//   b1.body.ta[2] = b1.body.I[2,1] * b1.body.za[1] + (b1.body.I[2,2] * b1.body.za[2] + (b1.body.I[2,3] * b1.body.za[3] + (b1.body.wa[3] * (b1.body.I[1,1] * b1.body.wa[1] + (b1.body.I[1,2] * b1.body.wa[2] + b1.body.I[1,3] * b1.body.wa[3])) + ((-b1.body.wa[1] * (b1.body.I[3,1] * b1.body.wa[1] + (b1.body.I[3,2] * b1.body.wa[2] + b1.body.I[3,3] * b1.body.wa[3]))) + (b1.body.rCM[3] * b1.body.fa[1] + (-b1.body.rCM[1] * b1.body.fa[3]))))));
//   b1.body.ta[3] = b1.body.I[3,1] * b1.body.za[1] + (b1.body.I[3,2] * b1.body.za[2] + (b1.body.I[3,3] * b1.body.za[3] + (b1.body.wa[1] * (b1.body.I[2,1] * b1.body.wa[1] + (b1.body.I[2,2] * b1.body.wa[2] + b1.body.I[2,3] * b1.body.wa[3])) + ((-b1.body.wa[2] * (b1.body.I[1,1] * b1.body.wa[1] + (b1.body.I[1,2] * b1.body.wa[2] + b1.body.I[1,3] * b1.body.wa[3]))) + (b1.body.rCM[1] * b1.body.fa[2] + (-b1.body.rCM[2] * b1.body.fa[1]))))));
//   b1.box.S[1,1] = b1.Sa[1,1];
//   b1.box.S[1,2] = b1.Sa[1,2];
//   b1.box.S[1,3] = b1.Sa[1,3];
//   b1.box.S[2,1] = b1.Sa[2,1];
//   b1.box.S[2,2] = b1.Sa[2,2];
//   b1.box.S[2,3] = b1.Sa[2,3];
//   b1.box.S[3,1] = b1.Sa[3,1];
//   b1.box.S[3,2] = b1.Sa[3,2];
//   b1.box.S[3,3] = b1.Sa[3,3];
//   b1.box.r[1] = b1.r0a[1];
//   b1.box.r[2] = b1.r0a[2];
//   b1.box.r[3] = b1.r0a[3];
//   b1.box.Sshape[1,1] = b1.Scyl[1,1];
//   b1.box.Sshape[1,2] = b1.Scyl[1,2];
//   b1.box.Sshape[1,3] = b1.Scyl[1,3];
//   b1.box.Sshape[2,1] = b1.Scyl[2,1];
//   b1.box.Sshape[2,2] = b1.Scyl[2,2];
//   b1.box.Sshape[2,3] = b1.Scyl[2,3];
//   b1.box.Sshape[3,1] = b1.Scyl[3,1];
//   b1.box.Sshape[3,2] = b1.Scyl[3,2];
//   b1.box.Sshape[3,3] = b1.Scyl[3,3];
//   b1.mo = 3141.59265358979 * (b1.rho * (b1.Length * b1.Radius ^ 2.0));
//   b1.mi = 3141.59265358979 * (b1.rho * (b1.Length * b1.InnerRadius ^ 2.0));
//   b1.I22 = b1.mo * (b1.Length ^ 2.0 + 3.0 * b1.Radius ^ 2.0) / 12.0 - b1.mi * (b1.Length ^ 2.0 + 3.0 * b1.InnerRadius ^ 2.0) / 12.0;
//   b1.body.m = b1.mo - b1.mi;
//   b1.body.rCM[1] = b1.r0[1] + b1.Length * b1.box.nLength[1] / 2.0;
//   b1.body.rCM[2] = b1.r0[2] + b1.Length * b1.box.nLength[2] / 2.0;
//   b1.body.rCM[3] = b1.r0[3] + b1.Length * b1.box.nLength[3] / 2.0;
//   b1.body.I[1,1] = b1.Scyl[1,1] ^ 2.0 * (b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) + (b1.Scyl[1,2] ^ 2.0 * b1.I22 + b1.Scyl[1,3] ^ 2.0 * b1.I22);
//   b1.body.I[1,2] = b1.Scyl[1,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[2,1]) + (b1.Scyl[1,2] * (b1.I22 * b1.Scyl[2,2]) + b1.Scyl[1,3] * (b1.I22 * b1.Scyl[2,3]));
//   b1.body.I[1,3] = b1.Scyl[1,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[3,1]) + (b1.Scyl[1,2] * (b1.I22 * b1.Scyl[3,2]) + b1.Scyl[1,3] * (b1.I22 * b1.Scyl[3,3]));
//   b1.body.I[2,1] = b1.Scyl[2,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[1,1]) + (b1.Scyl[2,2] * (b1.I22 * b1.Scyl[1,2]) + b1.Scyl[2,3] * (b1.I22 * b1.Scyl[1,3]));
//   b1.body.I[2,2] = b1.Scyl[2,1] ^ 2.0 * (b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) + (b1.Scyl[2,2] ^ 2.0 * b1.I22 + b1.Scyl[2,3] ^ 2.0 * b1.I22);
//   b1.body.I[2,3] = b1.Scyl[2,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[3,1]) + (b1.Scyl[2,2] * (b1.I22 * b1.Scyl[3,2]) + b1.Scyl[2,3] * (b1.I22 * b1.Scyl[3,3]));
//   b1.body.I[3,1] = b1.Scyl[3,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[1,1]) + (b1.Scyl[3,2] * (b1.I22 * b1.Scyl[1,2]) + b1.Scyl[3,3] * (b1.I22 * b1.Scyl[1,3]));
//   b1.body.I[3,2] = b1.Scyl[3,1] * ((b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) * b1.Scyl[2,1]) + (b1.Scyl[3,2] * (b1.I22 * b1.Scyl[2,2]) + b1.Scyl[3,3] * (b1.I22 * b1.Scyl[2,3]));
//   b1.body.I[3,3] = b1.Scyl[3,1] ^ 2.0 * (b1.mo * b1.Radius ^ 2.0 / 2.0 - b1.mi * b1.InnerRadius ^ 2.0 / 2.0) + (b1.Scyl[3,2] ^ 2.0 * b1.I22 + b1.Scyl[3,3] ^ 2.0 * b1.I22);
//   b2.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b2.box.mcShape.shapeType);
//   b2.box.mcShape.Material = PackMaterial(b2.box.mcShape.color[1] / 255.0,b2.box.mcShape.color[2] / 255.0,b2.box.mcShape.color[3] / 255.0,b2.box.mcShape.specularCoefficient);
//   b2.box.mcShape.Extra = b2.box.mcShape.extra;
//   b2.box.mcShape.size[1] = b2.box.mcShape.length;
//   b2.box.mcShape.size[2] = b2.box.mcShape.width;
//   b2.box.mcShape.size[3] = b2.box.mcShape.height;
//   b2.box.mcShape.Sshape[1,1] = b2.box.mcShape.e_x[1];
//   b2.box.mcShape.Sshape[1,2] = b2.box.mcShape.e_y[1];
//   b2.box.mcShape.Sshape[1,3] = b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[2];
//   b2.box.mcShape.Sshape[2,1] = b2.box.mcShape.e_x[2];
//   b2.box.mcShape.Sshape[2,2] = b2.box.mcShape.e_y[2];
//   b2.box.mcShape.Sshape[2,3] = b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[3];
//   b2.box.mcShape.Sshape[3,1] = b2.box.mcShape.e_x[3];
//   b2.box.mcShape.Sshape[3,2] = b2.box.mcShape.e_y[3];
//   b2.box.mcShape.Sshape[3,3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[1];
//   b2.box.mcShape.rxvisobj[1] = b2.box.mcShape.S[1,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.rxvisobj[2] = b2.box.mcShape.S[2,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.rxvisobj[3] = b2.box.mcShape.S[3,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.ryvisobj[1] = b2.box.mcShape.S[1,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.ryvisobj[2] = b2.box.mcShape.S[2,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.ryvisobj[3] = b2.box.mcShape.S[3,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.rvisobj[1] = b2.box.mcShape.r[1] + (b2.box.mcShape.S[1,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.rvisobj[2] = b2.box.mcShape.r[2] + (b2.box.mcShape.S[2,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.rvisobj[3] = b2.box.mcShape.r[3] + (b2.box.mcShape.S[3,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.e_x[1] = b2.box.nLength[1];
//   b2.box.mcShape.e_x[2] = b2.box.nLength[2];
//   b2.box.mcShape.e_x[3] = b2.box.nLength[3];
//   b2.box.mcShape.e_y[1] = b2.box.nWidth[1];
//   b2.box.mcShape.e_y[2] = b2.box.nWidth[2];
//   b2.box.mcShape.e_y[3] = b2.box.nWidth[3];
//   b2.box.mcShape.e_z[1] = b2.box.nHeight[1];
//   b2.box.mcShape.e_z[2] = b2.box.nHeight[2];
//   b2.box.mcShape.e_z[3] = b2.box.nHeight[3];
//   b2.frameTranslation.Sb[1,1] = b2.frameTranslation.Sa[1,1];
//   b2.frameTranslation.Sb[1,2] = b2.frameTranslation.Sa[1,2];
//   b2.frameTranslation.Sb[1,3] = b2.frameTranslation.Sa[1,3];
//   b2.frameTranslation.Sb[2,1] = b2.frameTranslation.Sa[2,1];
//   b2.frameTranslation.Sb[2,2] = b2.frameTranslation.Sa[2,2];
//   b2.frameTranslation.Sb[2,3] = b2.frameTranslation.Sa[2,3];
//   b2.frameTranslation.Sb[3,1] = b2.frameTranslation.Sa[3,1];
//   b2.frameTranslation.Sb[3,2] = b2.frameTranslation.Sa[3,2];
//   b2.frameTranslation.Sb[3,3] = b2.frameTranslation.Sa[3,3];
//   b2.frameTranslation.wb[1] = b2.frameTranslation.wa[1];
//   b2.frameTranslation.wb[2] = b2.frameTranslation.wa[2];
//   b2.frameTranslation.wb[3] = b2.frameTranslation.wa[3];
//   b2.frameTranslation.zb[1] = b2.frameTranslation.za[1];
//   b2.frameTranslation.zb[2] = b2.frameTranslation.za[2];
//   b2.frameTranslation.zb[3] = b2.frameTranslation.za[3];
//   b2.frameTranslation.r0b[1] = b2.frameTranslation.r0a[1] + (b2.frameTranslation.Sa[1,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[1,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[1,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.r0b[2] = b2.frameTranslation.r0a[2] + (b2.frameTranslation.Sa[2,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[2,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[2,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.r0b[3] = b2.frameTranslation.r0a[3] + (b2.frameTranslation.Sa[3,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[3,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[3,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.vaux[1] = b2.frameTranslation.wa[2] * b2.frameTranslation.r[3] - b2.frameTranslation.wa[3] * b2.frameTranslation.r[2];
//   b2.frameTranslation.vaux[2] = b2.frameTranslation.wa[3] * b2.frameTranslation.r[1] - b2.frameTranslation.wa[1] * b2.frameTranslation.r[3];
//   b2.frameTranslation.vaux[3] = b2.frameTranslation.wa[1] * b2.frameTranslation.r[2] - b2.frameTranslation.wa[2] * b2.frameTranslation.r[1];
//   b2.frameTranslation.vb[1] = b2.frameTranslation.va[1] + b2.frameTranslation.vaux[1];
//   b2.frameTranslation.vb[2] = b2.frameTranslation.va[2] + b2.frameTranslation.vaux[2];
//   b2.frameTranslation.vb[3] = b2.frameTranslation.va[3] + b2.frameTranslation.vaux[3];
//   b2.frameTranslation.ab[1] = b2.frameTranslation.aa[1] + (b2.frameTranslation.za[2] * b2.frameTranslation.r[3] + ((-b2.frameTranslation.za[3] * b2.frameTranslation.r[2]) + (b2.frameTranslation.wa[2] * b2.frameTranslation.vaux[3] + (-b2.frameTranslation.wa[3] * b2.frameTranslation.vaux[2]))));
//   b2.frameTranslation.ab[2] = b2.frameTranslation.aa[2] + (b2.frameTranslation.za[3] * b2.frameTranslation.r[1] + ((-b2.frameTranslation.za[1] * b2.frameTranslation.r[3]) + (b2.frameTranslation.wa[3] * b2.frameTranslation.vaux[1] + (-b2.frameTranslation.wa[1] * b2.frameTranslation.vaux[3]))));
//   b2.frameTranslation.ab[3] = b2.frameTranslation.aa[3] + (b2.frameTranslation.za[1] * b2.frameTranslation.r[2] + ((-b2.frameTranslation.za[2] * b2.frameTranslation.r[1]) + (b2.frameTranslation.wa[1] * b2.frameTranslation.vaux[2] + (-b2.frameTranslation.wa[2] * b2.frameTranslation.vaux[1]))));
//   b2.frameTranslation.fa[1] = b2.frameTranslation.fb[1];
//   b2.frameTranslation.fa[2] = b2.frameTranslation.fb[2];
//   b2.frameTranslation.fa[3] = b2.frameTranslation.fb[3];
//   b2.frameTranslation.ta[1] = b2.frameTranslation.tb[1] + (b2.frameTranslation.r[2] * b2.frameTranslation.fa[3] + (-b2.frameTranslation.r[3] * b2.frameTranslation.fa[2]));
//   b2.frameTranslation.ta[2] = b2.frameTranslation.tb[2] + (b2.frameTranslation.r[3] * b2.frameTranslation.fa[1] + (-b2.frameTranslation.r[1] * b2.frameTranslation.fa[3]));
//   b2.frameTranslation.ta[3] = b2.frameTranslation.tb[3] + (b2.frameTranslation.r[1] * b2.frameTranslation.fa[2] + (-b2.frameTranslation.r[2] * b2.frameTranslation.fa[1]));
//   b2.body.fa[1] = b2.body.m * (b2.body.aa[1] + (b2.body.za[2] * b2.body.rCM[3] + ((-b2.body.za[3] * b2.body.rCM[2]) + (b2.body.wa[2] * (b2.body.wa[1] * b2.body.rCM[2] - b2.body.wa[2] * b2.body.rCM[1]) + (-b2.body.wa[3] * (b2.body.wa[3] * b2.body.rCM[1] - b2.body.wa[1] * b2.body.rCM[3]))))));
//   b2.body.fa[2] = b2.body.m * (b2.body.aa[2] + (b2.body.za[3] * b2.body.rCM[1] + ((-b2.body.za[1] * b2.body.rCM[3]) + (b2.body.wa[3] * (b2.body.wa[2] * b2.body.rCM[3] - b2.body.wa[3] * b2.body.rCM[2]) + (-b2.body.wa[1] * (b2.body.wa[1] * b2.body.rCM[2] - b2.body.wa[2] * b2.body.rCM[1]))))));
//   b2.body.fa[3] = b2.body.m * (b2.body.aa[3] + (b2.body.za[1] * b2.body.rCM[2] + ((-b2.body.za[2] * b2.body.rCM[1]) + (b2.body.wa[1] * (b2.body.wa[3] * b2.body.rCM[1] - b2.body.wa[1] * b2.body.rCM[3]) + (-b2.body.wa[2] * (b2.body.wa[2] * b2.body.rCM[3] - b2.body.wa[3] * b2.body.rCM[2]))))));
//   b2.body.ta[1] = b2.body.I[1,1] * b2.body.za[1] + (b2.body.I[1,2] * b2.body.za[2] + (b2.body.I[1,3] * b2.body.za[3] + (b2.body.wa[2] * (b2.body.I[3,1] * b2.body.wa[1] + (b2.body.I[3,2] * b2.body.wa[2] + b2.body.I[3,3] * b2.body.wa[3])) + ((-b2.body.wa[3] * (b2.body.I[2,1] * b2.body.wa[1] + (b2.body.I[2,2] * b2.body.wa[2] + b2.body.I[2,3] * b2.body.wa[3]))) + (b2.body.rCM[2] * b2.body.fa[3] + (-b2.body.rCM[3] * b2.body.fa[2]))))));
//   b2.body.ta[2] = b2.body.I[2,1] * b2.body.za[1] + (b2.body.I[2,2] * b2.body.za[2] + (b2.body.I[2,3] * b2.body.za[3] + (b2.body.wa[3] * (b2.body.I[1,1] * b2.body.wa[1] + (b2.body.I[1,2] * b2.body.wa[2] + b2.body.I[1,3] * b2.body.wa[3])) + ((-b2.body.wa[1] * (b2.body.I[3,1] * b2.body.wa[1] + (b2.body.I[3,2] * b2.body.wa[2] + b2.body.I[3,3] * b2.body.wa[3]))) + (b2.body.rCM[3] * b2.body.fa[1] + (-b2.body.rCM[1] * b2.body.fa[3]))))));
//   b2.body.ta[3] = b2.body.I[3,1] * b2.body.za[1] + (b2.body.I[3,2] * b2.body.za[2] + (b2.body.I[3,3] * b2.body.za[3] + (b2.body.wa[1] * (b2.body.I[2,1] * b2.body.wa[1] + (b2.body.I[2,2] * b2.body.wa[2] + b2.body.I[2,3] * b2.body.wa[3])) + ((-b2.body.wa[2] * (b2.body.I[1,1] * b2.body.wa[1] + (b2.body.I[1,2] * b2.body.wa[2] + b2.body.I[1,3] * b2.body.wa[3]))) + (b2.body.rCM[1] * b2.body.fa[2] + (-b2.body.rCM[2] * b2.body.fa[1]))))));
//   b2.box.S[1,1] = b2.Sa[1,1];
//   b2.box.S[1,2] = b2.Sa[1,2];
//   b2.box.S[1,3] = b2.Sa[1,3];
//   b2.box.S[2,1] = b2.Sa[2,1];
//   b2.box.S[2,2] = b2.Sa[2,2];
//   b2.box.S[2,3] = b2.Sa[2,3];
//   b2.box.S[3,1] = b2.Sa[3,1];
//   b2.box.S[3,2] = b2.Sa[3,2];
//   b2.box.S[3,3] = b2.Sa[3,3];
//   b2.box.r[1] = b2.r0a[1];
//   b2.box.r[2] = b2.r0a[2];
//   b2.box.r[3] = b2.r0a[3];
//   b2.box.Sshape[1,1] = b2.Scyl[1,1];
//   b2.box.Sshape[1,2] = b2.Scyl[1,2];
//   b2.box.Sshape[1,3] = b2.Scyl[1,3];
//   b2.box.Sshape[2,1] = b2.Scyl[2,1];
//   b2.box.Sshape[2,2] = b2.Scyl[2,2];
//   b2.box.Sshape[2,3] = b2.Scyl[2,3];
//   b2.box.Sshape[3,1] = b2.Scyl[3,1];
//   b2.box.Sshape[3,2] = b2.Scyl[3,2];
//   b2.box.Sshape[3,3] = b2.Scyl[3,3];
//   b2.mo = 3141.59265358979 * (b2.rho * (b2.Length * b2.Radius ^ 2.0));
//   b2.mi = 3141.59265358979 * (b2.rho * (b2.Length * b2.InnerRadius ^ 2.0));
//   b2.I22 = b2.mo * (b2.Length ^ 2.0 + 3.0 * b2.Radius ^ 2.0) / 12.0 - b2.mi * (b2.Length ^ 2.0 + 3.0 * b2.InnerRadius ^ 2.0) / 12.0;
//   b2.body.m = b2.mo - b2.mi;
//   b2.body.rCM[1] = b2.r0[1] + b2.Length * b2.box.nLength[1] / 2.0;
//   b2.body.rCM[2] = b2.r0[2] + b2.Length * b2.box.nLength[2] / 2.0;
//   b2.body.rCM[3] = b2.r0[3] + b2.Length * b2.box.nLength[3] / 2.0;
//   b2.body.I[1,1] = b2.Scyl[1,1] ^ 2.0 * (b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) + (b2.Scyl[1,2] ^ 2.0 * b2.I22 + b2.Scyl[1,3] ^ 2.0 * b2.I22);
//   b2.body.I[1,2] = b2.Scyl[1,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[2,1]) + (b2.Scyl[1,2] * (b2.I22 * b2.Scyl[2,2]) + b2.Scyl[1,3] * (b2.I22 * b2.Scyl[2,3]));
//   b2.body.I[1,3] = b2.Scyl[1,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[3,1]) + (b2.Scyl[1,2] * (b2.I22 * b2.Scyl[3,2]) + b2.Scyl[1,3] * (b2.I22 * b2.Scyl[3,3]));
//   b2.body.I[2,1] = b2.Scyl[2,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[1,1]) + (b2.Scyl[2,2] * (b2.I22 * b2.Scyl[1,2]) + b2.Scyl[2,3] * (b2.I22 * b2.Scyl[1,3]));
//   b2.body.I[2,2] = b2.Scyl[2,1] ^ 2.0 * (b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) + (b2.Scyl[2,2] ^ 2.0 * b2.I22 + b2.Scyl[2,3] ^ 2.0 * b2.I22);
//   b2.body.I[2,3] = b2.Scyl[2,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[3,1]) + (b2.Scyl[2,2] * (b2.I22 * b2.Scyl[3,2]) + b2.Scyl[2,3] * (b2.I22 * b2.Scyl[3,3]));
//   b2.body.I[3,1] = b2.Scyl[3,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[1,1]) + (b2.Scyl[3,2] * (b2.I22 * b2.Scyl[1,2]) + b2.Scyl[3,3] * (b2.I22 * b2.Scyl[1,3]));
//   b2.body.I[3,2] = b2.Scyl[3,1] * ((b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) * b2.Scyl[2,1]) + (b2.Scyl[3,2] * (b2.I22 * b2.Scyl[2,2]) + b2.Scyl[3,3] * (b2.I22 * b2.Scyl[2,3]));
//   b2.body.I[3,3] = b2.Scyl[3,1] ^ 2.0 * (b2.mo * b2.Radius ^ 2.0 / 2.0 - b2.mi * b2.InnerRadius ^ 2.0 / 2.0) + (b2.Scyl[3,2] ^ 2.0 * b2.I22 + b2.Scyl[3,3] ^ 2.0 * b2.I22);
//   b0.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b0.box.mcShape.shapeType);
//   b0.box.mcShape.Material = PackMaterial(b0.box.mcShape.color[1] / 255.0,b0.box.mcShape.color[2] / 255.0,b0.box.mcShape.color[3] / 255.0,b0.box.mcShape.specularCoefficient);
//   b0.box.mcShape.Extra = b0.box.mcShape.extra;
//   b0.box.mcShape.size[1] = b0.box.mcShape.length;
//   b0.box.mcShape.size[2] = b0.box.mcShape.width;
//   b0.box.mcShape.size[3] = b0.box.mcShape.height;
//   b0.box.mcShape.Sshape[1,1] = b0.box.mcShape.e_x[1];
//   b0.box.mcShape.Sshape[1,2] = b0.box.mcShape.e_y[1];
//   b0.box.mcShape.Sshape[1,3] = b0.box.mcShape.e_x[2] * b0.box.mcShape.e_y[3] - b0.box.mcShape.e_x[3] * b0.box.mcShape.e_y[2];
//   b0.box.mcShape.Sshape[2,1] = b0.box.mcShape.e_x[2];
//   b0.box.mcShape.Sshape[2,2] = b0.box.mcShape.e_y[2];
//   b0.box.mcShape.Sshape[2,3] = b0.box.mcShape.e_x[3] * b0.box.mcShape.e_y[1] - b0.box.mcShape.e_x[1] * b0.box.mcShape.e_y[3];
//   b0.box.mcShape.Sshape[3,1] = b0.box.mcShape.e_x[3];
//   b0.box.mcShape.Sshape[3,2] = b0.box.mcShape.e_y[3];
//   b0.box.mcShape.Sshape[3,3] = b0.box.mcShape.e_x[1] * b0.box.mcShape.e_y[2] - b0.box.mcShape.e_x[2] * b0.box.mcShape.e_y[1];
//   b0.box.mcShape.rxvisobj[1] = b0.box.mcShape.S[1,1] * b0.box.mcShape.e_x[1] + (b0.box.mcShape.S[1,2] * b0.box.mcShape.e_x[2] + b0.box.mcShape.S[1,3] * b0.box.mcShape.e_x[3]);
//   b0.box.mcShape.rxvisobj[2] = b0.box.mcShape.S[2,1] * b0.box.mcShape.e_x[1] + (b0.box.mcShape.S[2,2] * b0.box.mcShape.e_x[2] + b0.box.mcShape.S[2,3] * b0.box.mcShape.e_x[3]);
//   b0.box.mcShape.rxvisobj[3] = b0.box.mcShape.S[3,1] * b0.box.mcShape.e_x[1] + (b0.box.mcShape.S[3,2] * b0.box.mcShape.e_x[2] + b0.box.mcShape.S[3,3] * b0.box.mcShape.e_x[3]);
//   b0.box.mcShape.ryvisobj[1] = b0.box.mcShape.S[1,1] * b0.box.mcShape.e_y[1] + (b0.box.mcShape.S[1,2] * b0.box.mcShape.e_y[2] + b0.box.mcShape.S[1,3] * b0.box.mcShape.e_y[3]);
//   b0.box.mcShape.ryvisobj[2] = b0.box.mcShape.S[2,1] * b0.box.mcShape.e_y[1] + (b0.box.mcShape.S[2,2] * b0.box.mcShape.e_y[2] + b0.box.mcShape.S[2,3] * b0.box.mcShape.e_y[3]);
//   b0.box.mcShape.ryvisobj[3] = b0.box.mcShape.S[3,1] * b0.box.mcShape.e_y[1] + (b0.box.mcShape.S[3,2] * b0.box.mcShape.e_y[2] + b0.box.mcShape.S[3,3] * b0.box.mcShape.e_y[3]);
//   b0.box.mcShape.rvisobj[1] = b0.box.mcShape.r[1] + (b0.box.mcShape.S[1,1] * b0.box.mcShape.r_shape[1] + (b0.box.mcShape.S[1,2] * b0.box.mcShape.r_shape[2] + b0.box.mcShape.S[1,3] * b0.box.mcShape.r_shape[3]));
//   b0.box.mcShape.rvisobj[2] = b0.box.mcShape.r[2] + (b0.box.mcShape.S[2,1] * b0.box.mcShape.r_shape[1] + (b0.box.mcShape.S[2,2] * b0.box.mcShape.r_shape[2] + b0.box.mcShape.S[2,3] * b0.box.mcShape.r_shape[3]));
//   b0.box.mcShape.rvisobj[3] = b0.box.mcShape.r[3] + (b0.box.mcShape.S[3,1] * b0.box.mcShape.r_shape[1] + (b0.box.mcShape.S[3,2] * b0.box.mcShape.r_shape[2] + b0.box.mcShape.S[3,3] * b0.box.mcShape.r_shape[3]));
//   b0.box.mcShape.e_x[1] = b0.box.nLength[1];
//   b0.box.mcShape.e_x[2] = b0.box.nLength[2];
//   b0.box.mcShape.e_x[3] = b0.box.nLength[3];
//   b0.box.mcShape.e_y[1] = b0.box.nWidth[1];
//   b0.box.mcShape.e_y[2] = b0.box.nWidth[2];
//   b0.box.mcShape.e_y[3] = b0.box.nWidth[3];
//   b0.box.mcShape.e_z[1] = b0.box.nHeight[1];
//   b0.box.mcShape.e_z[2] = b0.box.nHeight[2];
//   b0.box.mcShape.e_z[3] = b0.box.nHeight[3];
//   b0.frameTranslation.Sb[1,1] = b0.frameTranslation.Sa[1,1];
//   b0.frameTranslation.Sb[1,2] = b0.frameTranslation.Sa[1,2];
//   b0.frameTranslation.Sb[1,3] = b0.frameTranslation.Sa[1,3];
//   b0.frameTranslation.Sb[2,1] = b0.frameTranslation.Sa[2,1];
//   b0.frameTranslation.Sb[2,2] = b0.frameTranslation.Sa[2,2];
//   b0.frameTranslation.Sb[2,3] = b0.frameTranslation.Sa[2,3];
//   b0.frameTranslation.Sb[3,1] = b0.frameTranslation.Sa[3,1];
//   b0.frameTranslation.Sb[3,2] = b0.frameTranslation.Sa[3,2];
//   b0.frameTranslation.Sb[3,3] = b0.frameTranslation.Sa[3,3];
//   b0.frameTranslation.wb[1] = b0.frameTranslation.wa[1];
//   b0.frameTranslation.wb[2] = b0.frameTranslation.wa[2];
//   b0.frameTranslation.wb[3] = b0.frameTranslation.wa[3];
//   b0.frameTranslation.zb[1] = b0.frameTranslation.za[1];
//   b0.frameTranslation.zb[2] = b0.frameTranslation.za[2];
//   b0.frameTranslation.zb[3] = b0.frameTranslation.za[3];
//   b0.frameTranslation.r0b[1] = b0.frameTranslation.r0a[1] + (b0.frameTranslation.Sa[1,1] * b0.frameTranslation.r[1] + (b0.frameTranslation.Sa[1,2] * b0.frameTranslation.r[2] + b0.frameTranslation.Sa[1,3] * b0.frameTranslation.r[3]));
//   b0.frameTranslation.r0b[2] = b0.frameTranslation.r0a[2] + (b0.frameTranslation.Sa[2,1] * b0.frameTranslation.r[1] + (b0.frameTranslation.Sa[2,2] * b0.frameTranslation.r[2] + b0.frameTranslation.Sa[2,3] * b0.frameTranslation.r[3]));
//   b0.frameTranslation.r0b[3] = b0.frameTranslation.r0a[3] + (b0.frameTranslation.Sa[3,1] * b0.frameTranslation.r[1] + (b0.frameTranslation.Sa[3,2] * b0.frameTranslation.r[2] + b0.frameTranslation.Sa[3,3] * b0.frameTranslation.r[3]));
//   b0.frameTranslation.vaux[1] = b0.frameTranslation.wa[2] * b0.frameTranslation.r[3] - b0.frameTranslation.wa[3] * b0.frameTranslation.r[2];
//   b0.frameTranslation.vaux[2] = b0.frameTranslation.wa[3] * b0.frameTranslation.r[1] - b0.frameTranslation.wa[1] * b0.frameTranslation.r[3];
//   b0.frameTranslation.vaux[3] = b0.frameTranslation.wa[1] * b0.frameTranslation.r[2] - b0.frameTranslation.wa[2] * b0.frameTranslation.r[1];
//   b0.frameTranslation.vb[1] = b0.frameTranslation.va[1] + b0.frameTranslation.vaux[1];
//   b0.frameTranslation.vb[2] = b0.frameTranslation.va[2] + b0.frameTranslation.vaux[2];
//   b0.frameTranslation.vb[3] = b0.frameTranslation.va[3] + b0.frameTranslation.vaux[3];
//   b0.frameTranslation.ab[1] = b0.frameTranslation.aa[1] + (b0.frameTranslation.za[2] * b0.frameTranslation.r[3] + ((-b0.frameTranslation.za[3] * b0.frameTranslation.r[2]) + (b0.frameTranslation.wa[2] * b0.frameTranslation.vaux[3] + (-b0.frameTranslation.wa[3] * b0.frameTranslation.vaux[2]))));
//   b0.frameTranslation.ab[2] = b0.frameTranslation.aa[2] + (b0.frameTranslation.za[3] * b0.frameTranslation.r[1] + ((-b0.frameTranslation.za[1] * b0.frameTranslation.r[3]) + (b0.frameTranslation.wa[3] * b0.frameTranslation.vaux[1] + (-b0.frameTranslation.wa[1] * b0.frameTranslation.vaux[3]))));
//   b0.frameTranslation.ab[3] = b0.frameTranslation.aa[3] + (b0.frameTranslation.za[1] * b0.frameTranslation.r[2] + ((-b0.frameTranslation.za[2] * b0.frameTranslation.r[1]) + (b0.frameTranslation.wa[1] * b0.frameTranslation.vaux[2] + (-b0.frameTranslation.wa[2] * b0.frameTranslation.vaux[1]))));
//   b0.frameTranslation.fa[1] = b0.frameTranslation.fb[1];
//   b0.frameTranslation.fa[2] = b0.frameTranslation.fb[2];
//   b0.frameTranslation.fa[3] = b0.frameTranslation.fb[3];
//   b0.frameTranslation.ta[1] = b0.frameTranslation.tb[1] + (b0.frameTranslation.r[2] * b0.frameTranslation.fa[3] + (-b0.frameTranslation.r[3] * b0.frameTranslation.fa[2]));
//   b0.frameTranslation.ta[2] = b0.frameTranslation.tb[2] + (b0.frameTranslation.r[3] * b0.frameTranslation.fa[1] + (-b0.frameTranslation.r[1] * b0.frameTranslation.fa[3]));
//   b0.frameTranslation.ta[3] = b0.frameTranslation.tb[3] + (b0.frameTranslation.r[1] * b0.frameTranslation.fa[2] + (-b0.frameTranslation.r[2] * b0.frameTranslation.fa[1]));
//   b0.body.fa[1] = b0.body.m * (b0.body.aa[1] + (b0.body.za[2] * b0.body.rCM[3] + ((-b0.body.za[3] * b0.body.rCM[2]) + (b0.body.wa[2] * (b0.body.wa[1] * b0.body.rCM[2] - b0.body.wa[2] * b0.body.rCM[1]) + (-b0.body.wa[3] * (b0.body.wa[3] * b0.body.rCM[1] - b0.body.wa[1] * b0.body.rCM[3]))))));
//   b0.body.fa[2] = b0.body.m * (b0.body.aa[2] + (b0.body.za[3] * b0.body.rCM[1] + ((-b0.body.za[1] * b0.body.rCM[3]) + (b0.body.wa[3] * (b0.body.wa[2] * b0.body.rCM[3] - b0.body.wa[3] * b0.body.rCM[2]) + (-b0.body.wa[1] * (b0.body.wa[1] * b0.body.rCM[2] - b0.body.wa[2] * b0.body.rCM[1]))))));
//   b0.body.fa[3] = b0.body.m * (b0.body.aa[3] + (b0.body.za[1] * b0.body.rCM[2] + ((-b0.body.za[2] * b0.body.rCM[1]) + (b0.body.wa[1] * (b0.body.wa[3] * b0.body.rCM[1] - b0.body.wa[1] * b0.body.rCM[3]) + (-b0.body.wa[2] * (b0.body.wa[2] * b0.body.rCM[3] - b0.body.wa[3] * b0.body.rCM[2]))))));
//   b0.body.ta[1] = b0.body.I[1,1] * b0.body.za[1] + (b0.body.I[1,2] * b0.body.za[2] + (b0.body.I[1,3] * b0.body.za[3] + (b0.body.wa[2] * (b0.body.I[3,1] * b0.body.wa[1] + (b0.body.I[3,2] * b0.body.wa[2] + b0.body.I[3,3] * b0.body.wa[3])) + ((-b0.body.wa[3] * (b0.body.I[2,1] * b0.body.wa[1] + (b0.body.I[2,2] * b0.body.wa[2] + b0.body.I[2,3] * b0.body.wa[3]))) + (b0.body.rCM[2] * b0.body.fa[3] + (-b0.body.rCM[3] * b0.body.fa[2]))))));
//   b0.body.ta[2] = b0.body.I[2,1] * b0.body.za[1] + (b0.body.I[2,2] * b0.body.za[2] + (b0.body.I[2,3] * b0.body.za[3] + (b0.body.wa[3] * (b0.body.I[1,1] * b0.body.wa[1] + (b0.body.I[1,2] * b0.body.wa[2] + b0.body.I[1,3] * b0.body.wa[3])) + ((-b0.body.wa[1] * (b0.body.I[3,1] * b0.body.wa[1] + (b0.body.I[3,2] * b0.body.wa[2] + b0.body.I[3,3] * b0.body.wa[3]))) + (b0.body.rCM[3] * b0.body.fa[1] + (-b0.body.rCM[1] * b0.body.fa[3]))))));
//   b0.body.ta[3] = b0.body.I[3,1] * b0.body.za[1] + (b0.body.I[3,2] * b0.body.za[2] + (b0.body.I[3,3] * b0.body.za[3] + (b0.body.wa[1] * (b0.body.I[2,1] * b0.body.wa[1] + (b0.body.I[2,2] * b0.body.wa[2] + b0.body.I[2,3] * b0.body.wa[3])) + ((-b0.body.wa[2] * (b0.body.I[1,1] * b0.body.wa[1] + (b0.body.I[1,2] * b0.body.wa[2] + b0.body.I[1,3] * b0.body.wa[3]))) + (b0.body.rCM[1] * b0.body.fa[2] + (-b0.body.rCM[2] * b0.body.fa[1]))))));
//   b0.box.S[1,1] = b0.Sa[1,1];
//   b0.box.S[1,2] = b0.Sa[1,2];
//   b0.box.S[1,3] = b0.Sa[1,3];
//   b0.box.S[2,1] = b0.Sa[2,1];
//   b0.box.S[2,2] = b0.Sa[2,2];
//   b0.box.S[2,3] = b0.Sa[2,3];
//   b0.box.S[3,1] = b0.Sa[3,1];
//   b0.box.S[3,2] = b0.Sa[3,2];
//   b0.box.S[3,3] = b0.Sa[3,3];
//   b0.box.r[1] = b0.r0a[1];
//   b0.box.r[2] = b0.r0a[2];
//   b0.box.r[3] = b0.r0a[3];
//   b0.box.Sshape[1,1] = b0.Sbox[1,1];
//   b0.box.Sshape[1,2] = b0.Sbox[1,2];
//   b0.box.Sshape[1,3] = b0.Sbox[1,3];
//   b0.box.Sshape[2,1] = b0.Sbox[2,1];
//   b0.box.Sshape[2,2] = b0.Sbox[2,2];
//   b0.box.Sshape[2,3] = b0.Sbox[2,3];
//   b0.box.Sshape[3,1] = b0.Sbox[3,1];
//   b0.box.Sshape[3,2] = b0.Sbox[3,2];
//   b0.box.Sshape[3,3] = b0.Sbox[3,3];
//   b0.l = b0.Length;
//   b0.w = b0.Width;
//   b0.h = b0.Height;
//   b0.wi = b0.InnerWidth;
//   b0.hi = b0.InnerHeight;
//   b0.mo = 1000.0 * (b0.rho * (b0.l * (b0.w * b0.h)));
//   b0.mi = 1000.0 * (b0.rho * (b0.l * (b0.wi * b0.hi)));
//   b0.body.m = b0.mo - b0.mi;
//   b0.body.rCM[1] = b0.r0[1] + b0.l * b0.box.nLength[1] / 2.0;
//   b0.body.rCM[2] = b0.r0[2] + b0.l * b0.box.nLength[2] / 2.0;
//   b0.body.rCM[3] = b0.r0[3] + b0.l * b0.box.nLength[3] / 2.0;
//   b0.body.I[1,1] = b0.Sbox[1,1] ^ 2.0 * (b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + (b0.Sbox[1,2] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + b0.Sbox[1,3] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)));
//   b0.body.I[1,2] = b0.Sbox[1,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[2,1]) + (b0.Sbox[1,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[2,2]) + b0.Sbox[1,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[2,3]));
//   b0.body.I[1,3] = b0.Sbox[1,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[3,1]) + (b0.Sbox[1,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[3,2]) + b0.Sbox[1,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[3,3]));
//   b0.body.I[2,1] = b0.Sbox[2,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[1,1]) + (b0.Sbox[2,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[1,2]) + b0.Sbox[2,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[1,3]));
//   b0.body.I[2,2] = b0.Sbox[2,1] ^ 2.0 * (b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + (b0.Sbox[2,2] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + b0.Sbox[2,3] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)));
//   b0.body.I[2,3] = b0.Sbox[2,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[3,1]) + (b0.Sbox[2,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[3,2]) + b0.Sbox[2,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[3,3]));
//   b0.body.I[3,1] = b0.Sbox[3,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[1,1]) + (b0.Sbox[3,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[1,2]) + b0.Sbox[3,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[1,3]));
//   b0.body.I[3,2] = b0.Sbox[3,1] * ((b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[2,1]) + (b0.Sbox[3,2] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) * b0.Sbox[2,2]) + b0.Sbox[3,3] * ((b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)) * b0.Sbox[2,3]));
//   b0.body.I[3,3] = b0.Sbox[3,1] ^ 2.0 * (b0.mo * (b0.w ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.wi ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + (b0.Sbox[3,2] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.h ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.hi ^ 2.0 / 12.0)) + b0.Sbox[3,3] ^ 2.0 * (b0.mo * (b0.l ^ 2.0 / 12.0 + b0.w ^ 2.0 / 12.0) - b0.mi * (b0.l ^ 2.0 / 12.0 + b0.wi ^ 2.0 / 12.0)));
//   sphereC.constraintResidue[1] = sphereC.r_rela[1];
//   sphereC.constraintResidue[2] = sphereC.r_rela[2];
//   sphereC.constraintResidue[3] = sphereC.r_rela[3];
//   sphereC.constraintResidue_d[1] = sphereC.v_rela[1];
//   sphereC.constraintResidue_d[2] = sphereC.v_rela[2];
//   sphereC.constraintResidue_d[3] = sphereC.v_rela[3];
//   sphereC.constraintResidue_dd[1] = sphereC.a_rela[1];
//   sphereC.constraintResidue_dd[2] = sphereC.a_rela[2];
//   sphereC.constraintResidue_dd[3] = sphereC.a_rela[3];
//   constrain(sphereC.constraintResidue[3],sphereC.constraintResidue_d[3],sphereC.constraintResidue_dd[3]);
//   constrain(sphereC.constraintResidue[2],sphereC.constraintResidue_d[2],sphereC.constraintResidue_dd[2]);
//   constrain(sphereC.constraintResidue[1],sphereC.constraintResidue_d[1],sphereC.constraintResidue_dd[1]);
//   sphereC.ta[1] = 0.0;
//   sphereC.ta[2] = 0.0;
//   sphereC.ta[3] = 0.0;
//   sphereC.tb[1] = 0.0;
//   sphereC.tb[2] = 0.0;
//   sphereC.tb[3] = 0.0;
//   sphereC.fa[1] = sphereC.fc[1];
//   sphereC.fa[2] = sphereC.fc[2];
//   sphereC.fa[3] = sphereC.fc[3];
//   sphereC.fb[1] = sphereC.S_rel[1,1] * sphereC.fc[1] + (sphereC.S_rel[1,2] * sphereC.fc[2] + sphereC.S_rel[1,3] * sphereC.fc[3]);
//   sphereC.fb[2] = sphereC.S_rel[2,1] * sphereC.fc[1] + (sphereC.S_rel[2,2] * sphereC.fc[2] + sphereC.S_rel[2,3] * sphereC.fc[3]);
//   sphereC.fb[3] = sphereC.S_rel[3,1] * sphereC.fc[1] + (sphereC.S_rel[3,2] * sphereC.fc[2] + sphereC.S_rel[3,3] * sphereC.fc[3]);
//   sphereC.S_rel[1,1] = sphereC.Sb[1,1] * sphereC.Sa[1,1] + (sphereC.Sb[2,1] * sphereC.Sa[2,1] + sphereC.Sb[3,1] * sphereC.Sa[3,1]);
//   sphereC.S_rel[1,2] = sphereC.Sb[1,1] * sphereC.Sa[1,2] + (sphereC.Sb[2,1] * sphereC.Sa[2,2] + sphereC.Sb[3,1] * sphereC.Sa[3,2]);
//   sphereC.S_rel[1,3] = sphereC.Sb[1,1] * sphereC.Sa[1,3] + (sphereC.Sb[2,1] * sphereC.Sa[2,3] + sphereC.Sb[3,1] * sphereC.Sa[3,3]);
//   sphereC.S_rel[2,1] = sphereC.Sb[1,2] * sphereC.Sa[1,1] + (sphereC.Sb[2,2] * sphereC.Sa[2,1] + sphereC.Sb[3,2] * sphereC.Sa[3,1]);
//   sphereC.S_rel[2,2] = sphereC.Sb[1,2] * sphereC.Sa[1,2] + (sphereC.Sb[2,2] * sphereC.Sa[2,2] + sphereC.Sb[3,2] * sphereC.Sa[3,2]);
//   sphereC.S_rel[2,3] = sphereC.Sb[1,2] * sphereC.Sa[1,3] + (sphereC.Sb[2,2] * sphereC.Sa[2,3] + sphereC.Sb[3,2] * sphereC.Sa[3,3]);
//   sphereC.S_rel[3,1] = sphereC.Sb[1,3] * sphereC.Sa[1,1] + (sphereC.Sb[2,3] * sphereC.Sa[2,1] + sphereC.Sb[3,3] * sphereC.Sa[3,1]);
//   sphereC.S_rel[3,2] = sphereC.Sb[1,3] * sphereC.Sa[1,2] + (sphereC.Sb[2,3] * sphereC.Sa[2,2] + sphereC.Sb[3,3] * sphereC.Sa[3,2]);
//   sphereC.S_rel[3,3] = sphereC.Sb[1,3] * sphereC.Sa[1,3] + (sphereC.Sb[2,3] * sphereC.Sa[2,3] + sphereC.Sb[3,3] * sphereC.Sa[3,3]);
//   sphereC.r_rela[1] = sphereC.Sa[1,1] * (sphereC.r0b[1] - sphereC.r0a[1]) + (sphereC.Sa[2,1] * (sphereC.r0b[2] - sphereC.r0a[2]) + sphereC.Sa[3,1] * (sphereC.r0b[3] - sphereC.r0a[3]));
//   sphereC.r_rela[2] = sphereC.Sa[1,2] * (sphereC.r0b[1] - sphereC.r0a[1]) + (sphereC.Sa[2,2] * (sphereC.r0b[2] - sphereC.r0a[2]) + sphereC.Sa[3,2] * (sphereC.r0b[3] - sphereC.r0a[3]));
//   sphereC.r_rela[3] = sphereC.Sa[1,3] * (sphereC.r0b[1] - sphereC.r0a[1]) + (sphereC.Sa[2,3] * (sphereC.r0b[2] - sphereC.r0a[2]) + sphereC.Sa[3,3] * (sphereC.r0b[3] - sphereC.r0a[3]));
//   sphereC.vaux[1] = sphereC.wa[2] * sphereC.r_rela[3] - sphereC.wa[3] * sphereC.r_rela[2];
//   sphereC.vaux[2] = sphereC.wa[3] * sphereC.r_rela[1] - sphereC.wa[1] * sphereC.r_rela[3];
//   sphereC.vaux[3] = sphereC.wa[1] * sphereC.r_rela[2] - sphereC.wa[2] * sphereC.r_rela[1];
//   sphereC.v_rela[1] = sphereC.S_rel[1,1] * sphereC.vb[1] + (sphereC.S_rel[2,1] * sphereC.vb[2] + sphereC.S_rel[3,1] * sphereC.vb[3]) - sphereC.va[1] - sphereC.vaux[1];
//   sphereC.v_rela[2] = sphereC.S_rel[1,2] * sphereC.vb[1] + (sphereC.S_rel[2,2] * sphereC.vb[2] + sphereC.S_rel[3,2] * sphereC.vb[3]) - sphereC.va[2] - sphereC.vaux[2];
//   sphereC.v_rela[3] = sphereC.S_rel[1,3] * sphereC.vb[1] + (sphereC.S_rel[2,3] * sphereC.vb[2] + sphereC.S_rel[3,3] * sphereC.vb[3]) - sphereC.va[3] - sphereC.vaux[3];
//   sphereC.w_rela[1] = sphereC.S_rel[1,1] * sphereC.wb[1] + (sphereC.S_rel[2,1] * sphereC.wb[2] + sphereC.S_rel[3,1] * sphereC.wb[3]) - sphereC.wa[1];
//   sphereC.w_rela[2] = sphereC.S_rel[1,2] * sphereC.wb[1] + (sphereC.S_rel[2,2] * sphereC.wb[2] + sphereC.S_rel[3,2] * sphereC.wb[3]) - sphereC.wa[2];
//   sphereC.w_rela[3] = sphereC.S_rel[1,3] * sphereC.wb[1] + (sphereC.S_rel[2,3] * sphereC.wb[2] + sphereC.S_rel[3,3] * sphereC.wb[3]) - sphereC.wa[3];
//   sphereC.a_rela[1] = sphereC.S_rel[1,1] * sphereC.ab[1] + (sphereC.S_rel[2,1] * sphereC.ab[2] + sphereC.S_rel[3,1] * sphereC.ab[3]) - sphereC.aa[1] - (sphereC.za[2] * sphereC.r_rela[3] - sphereC.za[3] * sphereC.r_rela[2]) - (sphereC.wa[2] * (sphereC.vaux[3] + 2.0 * sphereC.v_rela[3]) - sphereC.wa[3] * (sphereC.vaux[2] + 2.0 * sphereC.v_rela[2]));
//   sphereC.a_rela[2] = sphereC.S_rel[1,2] * sphereC.ab[1] + (sphereC.S_rel[2,2] * sphereC.ab[2] + sphereC.S_rel[3,2] * sphereC.ab[3]) - sphereC.aa[2] - (sphereC.za[3] * sphereC.r_rela[1] - sphereC.za[1] * sphereC.r_rela[3]) - (sphereC.wa[3] * (sphereC.vaux[1] + 2.0 * sphereC.v_rela[1]) - sphereC.wa[1] * (sphereC.vaux[3] + 2.0 * sphereC.v_rela[3]));
//   sphereC.a_rela[3] = sphereC.S_rel[1,3] * sphereC.ab[1] + (sphereC.S_rel[2,3] * sphereC.ab[2] + sphereC.S_rel[3,3] * sphereC.ab[3]) - sphereC.aa[3] - (sphereC.za[1] * sphereC.r_rela[2] - sphereC.za[2] * sphereC.r_rela[1]) - (sphereC.wa[1] * (sphereC.vaux[2] + 2.0 * sphereC.v_rela[2]) - sphereC.wa[2] * (sphereC.vaux[1] + 2.0 * sphereC.v_rela[1]));
//   sphereC.z_rela[1] = sphereC.S_rel[1,1] * sphereC.zb[1] + (sphereC.S_rel[2,1] * sphereC.zb[2] + sphereC.S_rel[3,1] * sphereC.zb[3]) - sphereC.za[1] - (sphereC.wa[2] * sphereC.w_rela[3] - sphereC.wa[3] * sphereC.w_rela[2]);
//   sphereC.z_rela[2] = sphereC.S_rel[1,2] * sphereC.zb[1] + (sphereC.S_rel[2,2] * sphereC.zb[2] + sphereC.S_rel[3,2] * sphereC.zb[3]) - sphereC.za[2] - (sphereC.wa[3] * sphereC.w_rela[1] - sphereC.wa[1] * sphereC.w_rela[3]);
//   sphereC.z_rela[3] = sphereC.S_rel[1,3] * sphereC.zb[1] + (sphereC.S_rel[2,3] * sphereC.zb[2] + sphereC.S_rel[3,3] * sphereC.zb[3]) - sphereC.za[3] - (sphereC.wa[1] * sphereC.w_rela[2] - sphereC.wa[2] * sphereC.w_rela[1]);
//   b3.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b3.box.mcShape.shapeType);
//   b3.box.mcShape.Material = PackMaterial(b3.box.mcShape.color[1] / 255.0,b3.box.mcShape.color[2] / 255.0,b3.box.mcShape.color[3] / 255.0,b3.box.mcShape.specularCoefficient);
//   b3.box.mcShape.Extra = b3.box.mcShape.extra;
//   b3.box.mcShape.size[1] = b3.box.mcShape.length;
//   b3.box.mcShape.size[2] = b3.box.mcShape.width;
//   b3.box.mcShape.size[3] = b3.box.mcShape.height;
//   b3.box.mcShape.Sshape[1,1] = b3.box.mcShape.e_x[1];
//   b3.box.mcShape.Sshape[1,2] = b3.box.mcShape.e_y[1];
//   b3.box.mcShape.Sshape[1,3] = b3.box.mcShape.e_x[2] * b3.box.mcShape.e_y[3] - b3.box.mcShape.e_x[3] * b3.box.mcShape.e_y[2];
//   b3.box.mcShape.Sshape[2,1] = b3.box.mcShape.e_x[2];
//   b3.box.mcShape.Sshape[2,2] = b3.box.mcShape.e_y[2];
//   b3.box.mcShape.Sshape[2,3] = b3.box.mcShape.e_x[3] * b3.box.mcShape.e_y[1] - b3.box.mcShape.e_x[1] * b3.box.mcShape.e_y[3];
//   b3.box.mcShape.Sshape[3,1] = b3.box.mcShape.e_x[3];
//   b3.box.mcShape.Sshape[3,2] = b3.box.mcShape.e_y[3];
//   b3.box.mcShape.Sshape[3,3] = b3.box.mcShape.e_x[1] * b3.box.mcShape.e_y[2] - b3.box.mcShape.e_x[2] * b3.box.mcShape.e_y[1];
//   b3.box.mcShape.rxvisobj[1] = b3.box.mcShape.S[1,1] * b3.box.mcShape.e_x[1] + (b3.box.mcShape.S[1,2] * b3.box.mcShape.e_x[2] + b3.box.mcShape.S[1,3] * b3.box.mcShape.e_x[3]);
//   b3.box.mcShape.rxvisobj[2] = b3.box.mcShape.S[2,1] * b3.box.mcShape.e_x[1] + (b3.box.mcShape.S[2,2] * b3.box.mcShape.e_x[2] + b3.box.mcShape.S[2,3] * b3.box.mcShape.e_x[3]);
//   b3.box.mcShape.rxvisobj[3] = b3.box.mcShape.S[3,1] * b3.box.mcShape.e_x[1] + (b3.box.mcShape.S[3,2] * b3.box.mcShape.e_x[2] + b3.box.mcShape.S[3,3] * b3.box.mcShape.e_x[3]);
//   b3.box.mcShape.ryvisobj[1] = b3.box.mcShape.S[1,1] * b3.box.mcShape.e_y[1] + (b3.box.mcShape.S[1,2] * b3.box.mcShape.e_y[2] + b3.box.mcShape.S[1,3] * b3.box.mcShape.e_y[3]);
//   b3.box.mcShape.ryvisobj[2] = b3.box.mcShape.S[2,1] * b3.box.mcShape.e_y[1] + (b3.box.mcShape.S[2,2] * b3.box.mcShape.e_y[2] + b3.box.mcShape.S[2,3] * b3.box.mcShape.e_y[3]);
//   b3.box.mcShape.ryvisobj[3] = b3.box.mcShape.S[3,1] * b3.box.mcShape.e_y[1] + (b3.box.mcShape.S[3,2] * b3.box.mcShape.e_y[2] + b3.box.mcShape.S[3,3] * b3.box.mcShape.e_y[3]);
//   b3.box.mcShape.rvisobj[1] = b3.box.mcShape.r[1] + (b3.box.mcShape.S[1,1] * b3.box.mcShape.r_shape[1] + (b3.box.mcShape.S[1,2] * b3.box.mcShape.r_shape[2] + b3.box.mcShape.S[1,3] * b3.box.mcShape.r_shape[3]));
//   b3.box.mcShape.rvisobj[2] = b3.box.mcShape.r[2] + (b3.box.mcShape.S[2,1] * b3.box.mcShape.r_shape[1] + (b3.box.mcShape.S[2,2] * b3.box.mcShape.r_shape[2] + b3.box.mcShape.S[2,3] * b3.box.mcShape.r_shape[3]));
//   b3.box.mcShape.rvisobj[3] = b3.box.mcShape.r[3] + (b3.box.mcShape.S[3,1] * b3.box.mcShape.r_shape[1] + (b3.box.mcShape.S[3,2] * b3.box.mcShape.r_shape[2] + b3.box.mcShape.S[3,3] * b3.box.mcShape.r_shape[3]));
//   b3.box.mcShape.e_x[1] = b3.box.nLength[1];
//   b3.box.mcShape.e_x[2] = b3.box.nLength[2];
//   b3.box.mcShape.e_x[3] = b3.box.nLength[3];
//   b3.box.mcShape.e_y[1] = b3.box.nWidth[1];
//   b3.box.mcShape.e_y[2] = b3.box.nWidth[2];
//   b3.box.mcShape.e_y[3] = b3.box.nWidth[3];
//   b3.box.mcShape.e_z[1] = b3.box.nHeight[1];
//   b3.box.mcShape.e_z[2] = b3.box.nHeight[2];
//   b3.box.mcShape.e_z[3] = b3.box.nHeight[3];
//   b3.frameTranslation.Sb[1,1] = b3.frameTranslation.Sa[1,1];
//   b3.frameTranslation.Sb[1,2] = b3.frameTranslation.Sa[1,2];
//   b3.frameTranslation.Sb[1,3] = b3.frameTranslation.Sa[1,3];
//   b3.frameTranslation.Sb[2,1] = b3.frameTranslation.Sa[2,1];
//   b3.frameTranslation.Sb[2,2] = b3.frameTranslation.Sa[2,2];
//   b3.frameTranslation.Sb[2,3] = b3.frameTranslation.Sa[2,3];
//   b3.frameTranslation.Sb[3,1] = b3.frameTranslation.Sa[3,1];
//   b3.frameTranslation.Sb[3,2] = b3.frameTranslation.Sa[3,2];
//   b3.frameTranslation.Sb[3,3] = b3.frameTranslation.Sa[3,3];
//   b3.frameTranslation.wb[1] = b3.frameTranslation.wa[1];
//   b3.frameTranslation.wb[2] = b3.frameTranslation.wa[2];
//   b3.frameTranslation.wb[3] = b3.frameTranslation.wa[3];
//   b3.frameTranslation.zb[1] = b3.frameTranslation.za[1];
//   b3.frameTranslation.zb[2] = b3.frameTranslation.za[2];
//   b3.frameTranslation.zb[3] = b3.frameTranslation.za[3];
//   b3.frameTranslation.r0b[1] = b3.frameTranslation.r0a[1] + (b3.frameTranslation.Sa[1,1] * b3.frameTranslation.r[1] + (b3.frameTranslation.Sa[1,2] * b3.frameTranslation.r[2] + b3.frameTranslation.Sa[1,3] * b3.frameTranslation.r[3]));
//   b3.frameTranslation.r0b[2] = b3.frameTranslation.r0a[2] + (b3.frameTranslation.Sa[2,1] * b3.frameTranslation.r[1] + (b3.frameTranslation.Sa[2,2] * b3.frameTranslation.r[2] + b3.frameTranslation.Sa[2,3] * b3.frameTranslation.r[3]));
//   b3.frameTranslation.r0b[3] = b3.frameTranslation.r0a[3] + (b3.frameTranslation.Sa[3,1] * b3.frameTranslation.r[1] + (b3.frameTranslation.Sa[3,2] * b3.frameTranslation.r[2] + b3.frameTranslation.Sa[3,3] * b3.frameTranslation.r[3]));
//   b3.frameTranslation.vaux[1] = b3.frameTranslation.wa[2] * b3.frameTranslation.r[3] - b3.frameTranslation.wa[3] * b3.frameTranslation.r[2];
//   b3.frameTranslation.vaux[2] = b3.frameTranslation.wa[3] * b3.frameTranslation.r[1] - b3.frameTranslation.wa[1] * b3.frameTranslation.r[3];
//   b3.frameTranslation.vaux[3] = b3.frameTranslation.wa[1] * b3.frameTranslation.r[2] - b3.frameTranslation.wa[2] * b3.frameTranslation.r[1];
//   b3.frameTranslation.vb[1] = b3.frameTranslation.va[1] + b3.frameTranslation.vaux[1];
//   b3.frameTranslation.vb[2] = b3.frameTranslation.va[2] + b3.frameTranslation.vaux[2];
//   b3.frameTranslation.vb[3] = b3.frameTranslation.va[3] + b3.frameTranslation.vaux[3];
//   b3.frameTranslation.ab[1] = b3.frameTranslation.aa[1] + (b3.frameTranslation.za[2] * b3.frameTranslation.r[3] + ((-b3.frameTranslation.za[3] * b3.frameTranslation.r[2]) + (b3.frameTranslation.wa[2] * b3.frameTranslation.vaux[3] + (-b3.frameTranslation.wa[3] * b3.frameTranslation.vaux[2]))));
//   b3.frameTranslation.ab[2] = b3.frameTranslation.aa[2] + (b3.frameTranslation.za[3] * b3.frameTranslation.r[1] + ((-b3.frameTranslation.za[1] * b3.frameTranslation.r[3]) + (b3.frameTranslation.wa[3] * b3.frameTranslation.vaux[1] + (-b3.frameTranslation.wa[1] * b3.frameTranslation.vaux[3]))));
//   b3.frameTranslation.ab[3] = b3.frameTranslation.aa[3] + (b3.frameTranslation.za[1] * b3.frameTranslation.r[2] + ((-b3.frameTranslation.za[2] * b3.frameTranslation.r[1]) + (b3.frameTranslation.wa[1] * b3.frameTranslation.vaux[2] + (-b3.frameTranslation.wa[2] * b3.frameTranslation.vaux[1]))));
//   b3.frameTranslation.fa[1] = b3.frameTranslation.fb[1];
//   b3.frameTranslation.fa[2] = b3.frameTranslation.fb[2];
//   b3.frameTranslation.fa[3] = b3.frameTranslation.fb[3];
//   b3.frameTranslation.ta[1] = b3.frameTranslation.tb[1] + (b3.frameTranslation.r[2] * b3.frameTranslation.fa[3] + (-b3.frameTranslation.r[3] * b3.frameTranslation.fa[2]));
//   b3.frameTranslation.ta[2] = b3.frameTranslation.tb[2] + (b3.frameTranslation.r[3] * b3.frameTranslation.fa[1] + (-b3.frameTranslation.r[1] * b3.frameTranslation.fa[3]));
//   b3.frameTranslation.ta[3] = b3.frameTranslation.tb[3] + (b3.frameTranslation.r[1] * b3.frameTranslation.fa[2] + (-b3.frameTranslation.r[2] * b3.frameTranslation.fa[1]));
//   b3.body.fa[1] = b3.body.m * (b3.body.aa[1] + (b3.body.za[2] * b3.body.rCM[3] + ((-b3.body.za[3] * b3.body.rCM[2]) + (b3.body.wa[2] * (b3.body.wa[1] * b3.body.rCM[2] - b3.body.wa[2] * b3.body.rCM[1]) + (-b3.body.wa[3] * (b3.body.wa[3] * b3.body.rCM[1] - b3.body.wa[1] * b3.body.rCM[3]))))));
//   b3.body.fa[2] = b3.body.m * (b3.body.aa[2] + (b3.body.za[3] * b3.body.rCM[1] + ((-b3.body.za[1] * b3.body.rCM[3]) + (b3.body.wa[3] * (b3.body.wa[2] * b3.body.rCM[3] - b3.body.wa[3] * b3.body.rCM[2]) + (-b3.body.wa[1] * (b3.body.wa[1] * b3.body.rCM[2] - b3.body.wa[2] * b3.body.rCM[1]))))));
//   b3.body.fa[3] = b3.body.m * (b3.body.aa[3] + (b3.body.za[1] * b3.body.rCM[2] + ((-b3.body.za[2] * b3.body.rCM[1]) + (b3.body.wa[1] * (b3.body.wa[3] * b3.body.rCM[1] - b3.body.wa[1] * b3.body.rCM[3]) + (-b3.body.wa[2] * (b3.body.wa[2] * b3.body.rCM[3] - b3.body.wa[3] * b3.body.rCM[2]))))));
//   b3.body.ta[1] = b3.body.I[1,1] * b3.body.za[1] + (b3.body.I[1,2] * b3.body.za[2] + (b3.body.I[1,3] * b3.body.za[3] + (b3.body.wa[2] * (b3.body.I[3,1] * b3.body.wa[1] + (b3.body.I[3,2] * b3.body.wa[2] + b3.body.I[3,3] * b3.body.wa[3])) + ((-b3.body.wa[3] * (b3.body.I[2,1] * b3.body.wa[1] + (b3.body.I[2,2] * b3.body.wa[2] + b3.body.I[2,3] * b3.body.wa[3]))) + (b3.body.rCM[2] * b3.body.fa[3] + (-b3.body.rCM[3] * b3.body.fa[2]))))));
//   b3.body.ta[2] = b3.body.I[2,1] * b3.body.za[1] + (b3.body.I[2,2] * b3.body.za[2] + (b3.body.I[2,3] * b3.body.za[3] + (b3.body.wa[3] * (b3.body.I[1,1] * b3.body.wa[1] + (b3.body.I[1,2] * b3.body.wa[2] + b3.body.I[1,3] * b3.body.wa[3])) + ((-b3.body.wa[1] * (b3.body.I[3,1] * b3.body.wa[1] + (b3.body.I[3,2] * b3.body.wa[2] + b3.body.I[3,3] * b3.body.wa[3]))) + (b3.body.rCM[3] * b3.body.fa[1] + (-b3.body.rCM[1] * b3.body.fa[3]))))));
//   b3.body.ta[3] = b3.body.I[3,1] * b3.body.za[1] + (b3.body.I[3,2] * b3.body.za[2] + (b3.body.I[3,3] * b3.body.za[3] + (b3.body.wa[1] * (b3.body.I[2,1] * b3.body.wa[1] + (b3.body.I[2,2] * b3.body.wa[2] + b3.body.I[2,3] * b3.body.wa[3])) + ((-b3.body.wa[2] * (b3.body.I[1,1] * b3.body.wa[1] + (b3.body.I[1,2] * b3.body.wa[2] + b3.body.I[1,3] * b3.body.wa[3]))) + (b3.body.rCM[1] * b3.body.fa[2] + (-b3.body.rCM[2] * b3.body.fa[1]))))));
//   b3.box.S[1,1] = b3.Sa[1,1];
//   b3.box.S[1,2] = b3.Sa[1,2];
//   b3.box.S[1,3] = b3.Sa[1,3];
//   b3.box.S[2,1] = b3.Sa[2,1];
//   b3.box.S[2,2] = b3.Sa[2,2];
//   b3.box.S[2,3] = b3.Sa[2,3];
//   b3.box.S[3,1] = b3.Sa[3,1];
//   b3.box.S[3,2] = b3.Sa[3,2];
//   b3.box.S[3,3] = b3.Sa[3,3];
//   b3.box.r[1] = b3.r0a[1];
//   b3.box.r[2] = b3.r0a[2];
//   b3.box.r[3] = b3.r0a[3];
//   b3.box.Sshape[1,1] = b3.Scyl[1,1];
//   b3.box.Sshape[1,2] = b3.Scyl[1,2];
//   b3.box.Sshape[1,3] = b3.Scyl[1,3];
//   b3.box.Sshape[2,1] = b3.Scyl[2,1];
//   b3.box.Sshape[2,2] = b3.Scyl[2,2];
//   b3.box.Sshape[2,3] = b3.Scyl[2,3];
//   b3.box.Sshape[3,1] = b3.Scyl[3,1];
//   b3.box.Sshape[3,2] = b3.Scyl[3,2];
//   b3.box.Sshape[3,3] = b3.Scyl[3,3];
//   b3.mo = 3141.59265358979 * (b3.rho * (b3.Length * b3.Radius ^ 2.0));
//   b3.mi = 3141.59265358979 * (b3.rho * (b3.Length * b3.InnerRadius ^ 2.0));
//   b3.I22 = b3.mo * (b3.Length ^ 2.0 + 3.0 * b3.Radius ^ 2.0) / 12.0 - b3.mi * (b3.Length ^ 2.0 + 3.0 * b3.InnerRadius ^ 2.0) / 12.0;
//   b3.body.m = b3.mo - b3.mi;
//   b3.body.rCM[1] = b3.r0[1] + b3.Length * b3.box.nLength[1] / 2.0;
//   b3.body.rCM[2] = b3.r0[2] + b3.Length * b3.box.nLength[2] / 2.0;
//   b3.body.rCM[3] = b3.r0[3] + b3.Length * b3.box.nLength[3] / 2.0;
//   b3.body.I[1,1] = b3.Scyl[1,1] ^ 2.0 * (b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) + (b3.Scyl[1,2] ^ 2.0 * b3.I22 + b3.Scyl[1,3] ^ 2.0 * b3.I22);
//   b3.body.I[1,2] = b3.Scyl[1,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[2,1]) + (b3.Scyl[1,2] * (b3.I22 * b3.Scyl[2,2]) + b3.Scyl[1,3] * (b3.I22 * b3.Scyl[2,3]));
//   b3.body.I[1,3] = b3.Scyl[1,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[3,1]) + (b3.Scyl[1,2] * (b3.I22 * b3.Scyl[3,2]) + b3.Scyl[1,3] * (b3.I22 * b3.Scyl[3,3]));
//   b3.body.I[2,1] = b3.Scyl[2,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[1,1]) + (b3.Scyl[2,2] * (b3.I22 * b3.Scyl[1,2]) + b3.Scyl[2,3] * (b3.I22 * b3.Scyl[1,3]));
//   b3.body.I[2,2] = b3.Scyl[2,1] ^ 2.0 * (b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) + (b3.Scyl[2,2] ^ 2.0 * b3.I22 + b3.Scyl[2,3] ^ 2.0 * b3.I22);
//   b3.body.I[2,3] = b3.Scyl[2,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[3,1]) + (b3.Scyl[2,2] * (b3.I22 * b3.Scyl[3,2]) + b3.Scyl[2,3] * (b3.I22 * b3.Scyl[3,3]));
//   b3.body.I[3,1] = b3.Scyl[3,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[1,1]) + (b3.Scyl[3,2] * (b3.I22 * b3.Scyl[1,2]) + b3.Scyl[3,3] * (b3.I22 * b3.Scyl[1,3]));
//   b3.body.I[3,2] = b3.Scyl[3,1] * ((b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) * b3.Scyl[2,1]) + (b3.Scyl[3,2] * (b3.I22 * b3.Scyl[2,2]) + b3.Scyl[3,3] * (b3.I22 * b3.Scyl[2,3]));
//   b3.body.I[3,3] = b3.Scyl[3,1] ^ 2.0 * (b3.mo * b3.Radius ^ 2.0 / 2.0 - b3.mi * b3.InnerRadius ^ 2.0 / 2.0) + (b3.Scyl[3,2] ^ 2.0 * b3.I22 + b3.Scyl[3,3] ^ 2.0 * b3.I22);
//   rev.axis.phi = rev.q;
//   rev.bearing.phi = 0.0;
//   rev.qd = der(rev.q);
//   rev.qdd = der(rev.qd);
//   rev.nn[1] = rev.n[1] / sqrt(rev.n[1] ^ 2.0 + (rev.n[2] ^ 2.0 + rev.n[3] ^ 2.0));
//   rev.nn[2] = rev.n[2] / sqrt(rev.n[1] ^ 2.0 + (rev.n[2] ^ 2.0 + rev.n[3] ^ 2.0));
//   rev.nn[3] = rev.n[3] / sqrt(rev.n[1] ^ 2.0 + (rev.n[2] ^ 2.0 + rev.n[3] ^ 2.0));
//   rev.qq = rev.q - 0.0174532925199433 * rev.q0;
//   rev.sinq = sin(rev.qq);
//   rev.cosq = cos(rev.qq);
//   rev.S_rel[1,1] = rev.nn[1] ^ 2.0 + rev.cosq * (1.0 - rev.nn[1] ^ 2.0);
//   rev.S_rel[1,2] = rev.nn[1] * rev.nn[2] + rev.cosq * ((-rev.nn[1]) * rev.nn[2]) - (-rev.sinq) * rev.nn[3];
//   rev.S_rel[1,3] = rev.nn[1] * rev.nn[3] + rev.cosq * ((-rev.nn[1]) * rev.nn[3]) - rev.sinq * rev.nn[2];
//   rev.S_rel[2,1] = rev.nn[2] * rev.nn[1] + rev.cosq * ((-rev.nn[2]) * rev.nn[1]) - rev.sinq * rev.nn[3];
//   rev.S_rel[2,2] = rev.nn[2] ^ 2.0 + rev.cosq * (1.0 - rev.nn[2] ^ 2.0);
//   rev.S_rel[2,3] = rev.nn[2] * rev.nn[3] + rev.cosq * ((-rev.nn[2]) * rev.nn[3]) - (-rev.sinq) * rev.nn[1];
//   rev.S_rel[3,1] = rev.nn[3] * rev.nn[1] + rev.cosq * ((-rev.nn[3]) * rev.nn[1]) - (-rev.sinq) * rev.nn[2];
//   rev.S_rel[3,2] = rev.nn[3] * rev.nn[2] + rev.cosq * ((-rev.nn[3]) * rev.nn[2]) - rev.sinq * rev.nn[1];
//   rev.S_rel[3,3] = rev.nn[3] ^ 2.0 + rev.cosq * (1.0 - rev.nn[3] ^ 2.0);
//   rev.r_rela[1] = 0.0;
//   rev.r_rela[2] = 0.0;
//   rev.r_rela[3] = 0.0;
//   rev.v_rela[1] = 0.0;
//   rev.v_rela[2] = 0.0;
//   rev.v_rela[3] = 0.0;
//   rev.a_rela[1] = 0.0;
//   rev.a_rela[2] = 0.0;
//   rev.a_rela[3] = 0.0;
//   rev.w_rela[1] = rev.qd * rev.nn[1];
//   rev.w_rela[2] = rev.qd * rev.nn[2];
//   rev.w_rela[3] = rev.qd * rev.nn[3];
//   rev.z_rela[1] = rev.qdd * rev.nn[1];
//   rev.z_rela[2] = rev.qdd * rev.nn[2];
//   rev.z_rela[3] = rev.qdd * rev.nn[3];
//   rev.Sb[1,1] = rev.Sa[1,1] * rev.S_rel[1,1] + (rev.Sa[1,2] * rev.S_rel[1,2] + rev.Sa[1,3] * rev.S_rel[1,3]);
//   rev.Sb[1,2] = rev.Sa[1,1] * rev.S_rel[2,1] + (rev.Sa[1,2] * rev.S_rel[2,2] + rev.Sa[1,3] * rev.S_rel[2,3]);
//   rev.Sb[1,3] = rev.Sa[1,1] * rev.S_rel[3,1] + (rev.Sa[1,2] * rev.S_rel[3,2] + rev.Sa[1,3] * rev.S_rel[3,3]);
//   rev.Sb[2,1] = rev.Sa[2,1] * rev.S_rel[1,1] + (rev.Sa[2,2] * rev.S_rel[1,2] + rev.Sa[2,3] * rev.S_rel[1,3]);
//   rev.Sb[2,2] = rev.Sa[2,1] * rev.S_rel[2,1] + (rev.Sa[2,2] * rev.S_rel[2,2] + rev.Sa[2,3] * rev.S_rel[2,3]);
//   rev.Sb[2,3] = rev.Sa[2,1] * rev.S_rel[3,1] + (rev.Sa[2,2] * rev.S_rel[3,2] + rev.Sa[2,3] * rev.S_rel[3,3]);
//   rev.Sb[3,1] = rev.Sa[3,1] * rev.S_rel[1,1] + (rev.Sa[3,2] * rev.S_rel[1,2] + rev.Sa[3,3] * rev.S_rel[1,3]);
//   rev.Sb[3,2] = rev.Sa[3,1] * rev.S_rel[2,1] + (rev.Sa[3,2] * rev.S_rel[2,2] + rev.Sa[3,3] * rev.S_rel[2,3]);
//   rev.Sb[3,3] = rev.Sa[3,1] * rev.S_rel[3,1] + (rev.Sa[3,2] * rev.S_rel[3,2] + rev.Sa[3,3] * rev.S_rel[3,3]);
//   rev.r0b[1] = rev.r0a[1];
//   rev.r0b[2] = rev.r0a[2];
//   rev.r0b[3] = rev.r0a[3];
//   rev.vb[1] = rev.S_rel[1,1] * rev.va[1] + (rev.S_rel[1,2] * rev.va[2] + rev.S_rel[1,3] * rev.va[3]);
//   rev.vb[2] = rev.S_rel[2,1] * rev.va[1] + (rev.S_rel[2,2] * rev.va[2] + rev.S_rel[2,3] * rev.va[3]);
//   rev.vb[3] = rev.S_rel[3,1] * rev.va[1] + (rev.S_rel[3,2] * rev.va[2] + rev.S_rel[3,3] * rev.va[3]);
//   rev.wb[1] = rev.S_rel[1,1] * (rev.wa[1] + rev.w_rela[1]) + (rev.S_rel[1,2] * (rev.wa[2] + rev.w_rela[2]) + rev.S_rel[1,3] * (rev.wa[3] + rev.w_rela[3]));
//   rev.wb[2] = rev.S_rel[2,1] * (rev.wa[1] + rev.w_rela[1]) + (rev.S_rel[2,2] * (rev.wa[2] + rev.w_rela[2]) + rev.S_rel[2,3] * (rev.wa[3] + rev.w_rela[3]));
//   rev.wb[3] = rev.S_rel[3,1] * (rev.wa[1] + rev.w_rela[1]) + (rev.S_rel[3,2] * (rev.wa[2] + rev.w_rela[2]) + rev.S_rel[3,3] * (rev.wa[3] + rev.w_rela[3]));
//   rev.ab[1] = rev.S_rel[1,1] * rev.aa[1] + (rev.S_rel[1,2] * rev.aa[2] + rev.S_rel[1,3] * rev.aa[3]);
//   rev.ab[2] = rev.S_rel[2,1] * rev.aa[1] + (rev.S_rel[2,2] * rev.aa[2] + rev.S_rel[2,3] * rev.aa[3]);
//   rev.ab[3] = rev.S_rel[3,1] * rev.aa[1] + (rev.S_rel[3,2] * rev.aa[2] + rev.S_rel[3,3] * rev.aa[3]);
//   rev.zb[1] = rev.S_rel[1,1] * (rev.za[1] + (rev.z_rela[1] + (rev.wa[2] * rev.w_rela[3] + (-rev.wa[3] * rev.w_rela[2])))) + (rev.S_rel[1,2] * (rev.za[2] + (rev.z_rela[2] + (rev.wa[3] * rev.w_rela[1] + (-rev.wa[1] * rev.w_rela[3])))) + rev.S_rel[1,3] * (rev.za[3] + (rev.z_rela[3] + (rev.wa[1] * rev.w_rela[2] + (-rev.wa[2] * rev.w_rela[1])))));
//   rev.zb[2] = rev.S_rel[2,1] * (rev.za[1] + (rev.z_rela[1] + (rev.wa[2] * rev.w_rela[3] + (-rev.wa[3] * rev.w_rela[2])))) + (rev.S_rel[2,2] * (rev.za[2] + (rev.z_rela[2] + (rev.wa[3] * rev.w_rela[1] + (-rev.wa[1] * rev.w_rela[3])))) + rev.S_rel[2,3] * (rev.za[3] + (rev.z_rela[3] + (rev.wa[1] * rev.w_rela[2] + (-rev.wa[2] * rev.w_rela[1])))));
//   rev.zb[3] = rev.S_rel[3,1] * (rev.za[1] + (rev.z_rela[1] + (rev.wa[2] * rev.w_rela[3] + (-rev.wa[3] * rev.w_rela[2])))) + (rev.S_rel[3,2] * (rev.za[2] + (rev.z_rela[2] + (rev.wa[3] * rev.w_rela[1] + (-rev.wa[1] * rev.w_rela[3])))) + rev.S_rel[3,3] * (rev.za[3] + (rev.z_rela[3] + (rev.wa[1] * rev.w_rela[2] + (-rev.wa[2] * rev.w_rela[1])))));
//   rev.fa[1] = rev.S_rel[1,1] * rev.fb[1] + (rev.S_rel[2,1] * rev.fb[2] + rev.S_rel[3,1] * rev.fb[3]);
//   rev.fa[2] = rev.S_rel[1,2] * rev.fb[1] + (rev.S_rel[2,2] * rev.fb[2] + rev.S_rel[3,2] * rev.fb[3]);
//   rev.fa[3] = rev.S_rel[1,3] * rev.fb[1] + (rev.S_rel[2,3] * rev.fb[2] + rev.S_rel[3,3] * rev.fb[3]);
//   rev.ta[1] = rev.S_rel[1,1] * rev.tb[1] + (rev.S_rel[2,1] * rev.tb[2] + rev.S_rel[3,1] * rev.tb[3]);
//   rev.ta[2] = rev.S_rel[1,2] * rev.tb[1] + (rev.S_rel[2,2] * rev.tb[2] + rev.S_rel[3,2] * rev.tb[3]);
//   rev.ta[3] = rev.S_rel[1,3] * rev.tb[1] + (rev.S_rel[2,3] * rev.tb[2] + rev.S_rel[3,3] * rev.tb[3]);
//   rev.axis.tau = rev.nn[1] * rev.tb[1] + (rev.nn[2] * rev.tb[2] + rev.nn[3] * rev.tb[3]);
//   rev1.axis.phi = rev1.q;
//   rev1.bearing.phi = 0.0;
//   rev1.qd = der(rev1.q);
//   rev1.qdd = der(rev1.qd);
//   rev1.nn[1] = rev1.n[1] / sqrt(rev1.n[1] ^ 2.0 + (rev1.n[2] ^ 2.0 + rev1.n[3] ^ 2.0));
//   rev1.nn[2] = rev1.n[2] / sqrt(rev1.n[1] ^ 2.0 + (rev1.n[2] ^ 2.0 + rev1.n[3] ^ 2.0));
//   rev1.nn[3] = rev1.n[3] / sqrt(rev1.n[1] ^ 2.0 + (rev1.n[2] ^ 2.0 + rev1.n[3] ^ 2.0));
//   rev1.qq = rev1.q - 0.0174532925199433 * rev1.q0;
//   rev1.sinq = sin(rev1.qq);
//   rev1.cosq = cos(rev1.qq);
//   rev1.S_rel[1,1] = rev1.nn[1] ^ 2.0 + rev1.cosq * (1.0 - rev1.nn[1] ^ 2.0);
//   rev1.S_rel[1,2] = rev1.nn[1] * rev1.nn[2] + rev1.cosq * ((-rev1.nn[1]) * rev1.nn[2]) - (-rev1.sinq) * rev1.nn[3];
//   rev1.S_rel[1,3] = rev1.nn[1] * rev1.nn[3] + rev1.cosq * ((-rev1.nn[1]) * rev1.nn[3]) - rev1.sinq * rev1.nn[2];
//   rev1.S_rel[2,1] = rev1.nn[2] * rev1.nn[1] + rev1.cosq * ((-rev1.nn[2]) * rev1.nn[1]) - rev1.sinq * rev1.nn[3];
//   rev1.S_rel[2,2] = rev1.nn[2] ^ 2.0 + rev1.cosq * (1.0 - rev1.nn[2] ^ 2.0);
//   rev1.S_rel[2,3] = rev1.nn[2] * rev1.nn[3] + rev1.cosq * ((-rev1.nn[2]) * rev1.nn[3]) - (-rev1.sinq) * rev1.nn[1];
//   rev1.S_rel[3,1] = rev1.nn[3] * rev1.nn[1] + rev1.cosq * ((-rev1.nn[3]) * rev1.nn[1]) - (-rev1.sinq) * rev1.nn[2];
//   rev1.S_rel[3,2] = rev1.nn[3] * rev1.nn[2] + rev1.cosq * ((-rev1.nn[3]) * rev1.nn[2]) - rev1.sinq * rev1.nn[1];
//   rev1.S_rel[3,3] = rev1.nn[3] ^ 2.0 + rev1.cosq * (1.0 - rev1.nn[3] ^ 2.0);
//   rev1.r_rela[1] = 0.0;
//   rev1.r_rela[2] = 0.0;
//   rev1.r_rela[3] = 0.0;
//   rev1.v_rela[1] = 0.0;
//   rev1.v_rela[2] = 0.0;
//   rev1.v_rela[3] = 0.0;
//   rev1.a_rela[1] = 0.0;
//   rev1.a_rela[2] = 0.0;
//   rev1.a_rela[3] = 0.0;
//   rev1.w_rela[1] = rev1.qd * rev1.nn[1];
//   rev1.w_rela[2] = rev1.qd * rev1.nn[2];
//   rev1.w_rela[3] = rev1.qd * rev1.nn[3];
//   rev1.z_rela[1] = rev1.qdd * rev1.nn[1];
//   rev1.z_rela[2] = rev1.qdd * rev1.nn[2];
//   rev1.z_rela[3] = rev1.qdd * rev1.nn[3];
//   rev1.Sb[1,1] = rev1.Sa[1,1] * rev1.S_rel[1,1] + (rev1.Sa[1,2] * rev1.S_rel[1,2] + rev1.Sa[1,3] * rev1.S_rel[1,3]);
//   rev1.Sb[1,2] = rev1.Sa[1,1] * rev1.S_rel[2,1] + (rev1.Sa[1,2] * rev1.S_rel[2,2] + rev1.Sa[1,3] * rev1.S_rel[2,3]);
//   rev1.Sb[1,3] = rev1.Sa[1,1] * rev1.S_rel[3,1] + (rev1.Sa[1,2] * rev1.S_rel[3,2] + rev1.Sa[1,3] * rev1.S_rel[3,3]);
//   rev1.Sb[2,1] = rev1.Sa[2,1] * rev1.S_rel[1,1] + (rev1.Sa[2,2] * rev1.S_rel[1,2] + rev1.Sa[2,3] * rev1.S_rel[1,3]);
//   rev1.Sb[2,2] = rev1.Sa[2,1] * rev1.S_rel[2,1] + (rev1.Sa[2,2] * rev1.S_rel[2,2] + rev1.Sa[2,3] * rev1.S_rel[2,3]);
//   rev1.Sb[2,3] = rev1.Sa[2,1] * rev1.S_rel[3,1] + (rev1.Sa[2,2] * rev1.S_rel[3,2] + rev1.Sa[2,3] * rev1.S_rel[3,3]);
//   rev1.Sb[3,1] = rev1.Sa[3,1] * rev1.S_rel[1,1] + (rev1.Sa[3,2] * rev1.S_rel[1,2] + rev1.Sa[3,3] * rev1.S_rel[1,3]);
//   rev1.Sb[3,2] = rev1.Sa[3,1] * rev1.S_rel[2,1] + (rev1.Sa[3,2] * rev1.S_rel[2,2] + rev1.Sa[3,3] * rev1.S_rel[2,3]);
//   rev1.Sb[3,3] = rev1.Sa[3,1] * rev1.S_rel[3,1] + (rev1.Sa[3,2] * rev1.S_rel[3,2] + rev1.Sa[3,3] * rev1.S_rel[3,3]);
//   rev1.r0b[1] = rev1.r0a[1];
//   rev1.r0b[2] = rev1.r0a[2];
//   rev1.r0b[3] = rev1.r0a[3];
//   rev1.vb[1] = rev1.S_rel[1,1] * rev1.va[1] + (rev1.S_rel[1,2] * rev1.va[2] + rev1.S_rel[1,3] * rev1.va[3]);
//   rev1.vb[2] = rev1.S_rel[2,1] * rev1.va[1] + (rev1.S_rel[2,2] * rev1.va[2] + rev1.S_rel[2,3] * rev1.va[3]);
//   rev1.vb[3] = rev1.S_rel[3,1] * rev1.va[1] + (rev1.S_rel[3,2] * rev1.va[2] + rev1.S_rel[3,3] * rev1.va[3]);
//   rev1.wb[1] = rev1.S_rel[1,1] * (rev1.wa[1] + rev1.w_rela[1]) + (rev1.S_rel[1,2] * (rev1.wa[2] + rev1.w_rela[2]) + rev1.S_rel[1,3] * (rev1.wa[3] + rev1.w_rela[3]));
//   rev1.wb[2] = rev1.S_rel[2,1] * (rev1.wa[1] + rev1.w_rela[1]) + (rev1.S_rel[2,2] * (rev1.wa[2] + rev1.w_rela[2]) + rev1.S_rel[2,3] * (rev1.wa[3] + rev1.w_rela[3]));
//   rev1.wb[3] = rev1.S_rel[3,1] * (rev1.wa[1] + rev1.w_rela[1]) + (rev1.S_rel[3,2] * (rev1.wa[2] + rev1.w_rela[2]) + rev1.S_rel[3,3] * (rev1.wa[3] + rev1.w_rela[3]));
//   rev1.ab[1] = rev1.S_rel[1,1] * rev1.aa[1] + (rev1.S_rel[1,2] * rev1.aa[2] + rev1.S_rel[1,3] * rev1.aa[3]);
//   rev1.ab[2] = rev1.S_rel[2,1] * rev1.aa[1] + (rev1.S_rel[2,2] * rev1.aa[2] + rev1.S_rel[2,3] * rev1.aa[3]);
//   rev1.ab[3] = rev1.S_rel[3,1] * rev1.aa[1] + (rev1.S_rel[3,2] * rev1.aa[2] + rev1.S_rel[3,3] * rev1.aa[3]);
//   rev1.zb[1] = rev1.S_rel[1,1] * (rev1.za[1] + (rev1.z_rela[1] + (rev1.wa[2] * rev1.w_rela[3] + (-rev1.wa[3] * rev1.w_rela[2])))) + (rev1.S_rel[1,2] * (rev1.za[2] + (rev1.z_rela[2] + (rev1.wa[3] * rev1.w_rela[1] + (-rev1.wa[1] * rev1.w_rela[3])))) + rev1.S_rel[1,3] * (rev1.za[3] + (rev1.z_rela[3] + (rev1.wa[1] * rev1.w_rela[2] + (-rev1.wa[2] * rev1.w_rela[1])))));
//   rev1.zb[2] = rev1.S_rel[2,1] * (rev1.za[1] + (rev1.z_rela[1] + (rev1.wa[2] * rev1.w_rela[3] + (-rev1.wa[3] * rev1.w_rela[2])))) + (rev1.S_rel[2,2] * (rev1.za[2] + (rev1.z_rela[2] + (rev1.wa[3] * rev1.w_rela[1] + (-rev1.wa[1] * rev1.w_rela[3])))) + rev1.S_rel[2,3] * (rev1.za[3] + (rev1.z_rela[3] + (rev1.wa[1] * rev1.w_rela[2] + (-rev1.wa[2] * rev1.w_rela[1])))));
//   rev1.zb[3] = rev1.S_rel[3,1] * (rev1.za[1] + (rev1.z_rela[1] + (rev1.wa[2] * rev1.w_rela[3] + (-rev1.wa[3] * rev1.w_rela[2])))) + (rev1.S_rel[3,2] * (rev1.za[2] + (rev1.z_rela[2] + (rev1.wa[3] * rev1.w_rela[1] + (-rev1.wa[1] * rev1.w_rela[3])))) + rev1.S_rel[3,3] * (rev1.za[3] + (rev1.z_rela[3] + (rev1.wa[1] * rev1.w_rela[2] + (-rev1.wa[2] * rev1.w_rela[1])))));
//   rev1.fa[1] = rev1.S_rel[1,1] * rev1.fb[1] + (rev1.S_rel[2,1] * rev1.fb[2] + rev1.S_rel[3,1] * rev1.fb[3]);
//   rev1.fa[2] = rev1.S_rel[1,2] * rev1.fb[1] + (rev1.S_rel[2,2] * rev1.fb[2] + rev1.S_rel[3,2] * rev1.fb[3]);
//   rev1.fa[3] = rev1.S_rel[1,3] * rev1.fb[1] + (rev1.S_rel[2,3] * rev1.fb[2] + rev1.S_rel[3,3] * rev1.fb[3]);
//   rev1.ta[1] = rev1.S_rel[1,1] * rev1.tb[1] + (rev1.S_rel[2,1] * rev1.tb[2] + rev1.S_rel[3,1] * rev1.tb[3]);
//   rev1.ta[2] = rev1.S_rel[1,2] * rev1.tb[1] + (rev1.S_rel[2,2] * rev1.tb[2] + rev1.S_rel[3,2] * rev1.tb[3]);
//   rev1.ta[3] = rev1.S_rel[1,3] * rev1.tb[1] + (rev1.S_rel[2,3] * rev1.tb[2] + rev1.S_rel[3,3] * rev1.tb[3]);
//   rev1.axis.tau = rev1.nn[1] * rev1.tb[1] + (rev1.nn[2] * rev1.tb[2] + rev1.nn[3] * rev1.tb[3]);
//   j1q = j1.q;
//   j2q = j2.q;
//   j1qd = j1.qd;
//   j2qd = j2.qd;
//   inertial.frame_b.t[1] + (j1.frame_a.t[1] + b0.frame_a.t[1]) = 0.0;
//   inertial.frame_b.t[2] + (j1.frame_a.t[2] + b0.frame_a.t[2]) = 0.0;
//   inertial.frame_b.t[3] + (j1.frame_a.t[3] + b0.frame_a.t[3]) = 0.0;
//   inertial.frame_b.f[1] + (j1.frame_a.f[1] + b0.frame_a.f[1]) = 0.0;
//   inertial.frame_b.f[2] + (j1.frame_a.f[2] + b0.frame_a.f[2]) = 0.0;
//   inertial.frame_b.f[3] + (j1.frame_a.f[3] + b0.frame_a.f[3]) = 0.0;
//   b0.frame_a.z[1] = inertial.frame_b.z[1];
//   b0.frame_a.z[1] = j1.frame_a.z[1];
//   b0.frame_a.z[2] = inertial.frame_b.z[2];
//   b0.frame_a.z[2] = j1.frame_a.z[2];
//   b0.frame_a.z[3] = inertial.frame_b.z[3];
//   b0.frame_a.z[3] = j1.frame_a.z[3];
//   b0.frame_a.a[1] = inertial.frame_b.a[1];
//   b0.frame_a.a[1] = j1.frame_a.a[1];
//   b0.frame_a.a[2] = inertial.frame_b.a[2];
//   b0.frame_a.a[2] = j1.frame_a.a[2];
//   b0.frame_a.a[3] = inertial.frame_b.a[3];
//   b0.frame_a.a[3] = j1.frame_a.a[3];
//   b0.frame_a.w[1] = inertial.frame_b.w[1];
//   b0.frame_a.w[1] = j1.frame_a.w[1];
//   b0.frame_a.w[2] = inertial.frame_b.w[2];
//   b0.frame_a.w[2] = j1.frame_a.w[2];
//   b0.frame_a.w[3] = inertial.frame_b.w[3];
//   b0.frame_a.w[3] = j1.frame_a.w[3];
//   b0.frame_a.v[1] = inertial.frame_b.v[1];
//   b0.frame_a.v[1] = j1.frame_a.v[1];
//   b0.frame_a.v[2] = inertial.frame_b.v[2];
//   b0.frame_a.v[2] = j1.frame_a.v[2];
//   b0.frame_a.v[3] = inertial.frame_b.v[3];
//   b0.frame_a.v[3] = j1.frame_a.v[3];
//   b0.frame_a.S[1,1] = inertial.frame_b.S[1,1];
//   b0.frame_a.S[1,1] = j1.frame_a.S[1,1];
//   b0.frame_a.S[1,2] = inertial.frame_b.S[1,2];
//   b0.frame_a.S[1,2] = j1.frame_a.S[1,2];
//   b0.frame_a.S[1,3] = inertial.frame_b.S[1,3];
//   b0.frame_a.S[1,3] = j1.frame_a.S[1,3];
//   b0.frame_a.S[2,1] = inertial.frame_b.S[2,1];
//   b0.frame_a.S[2,1] = j1.frame_a.S[2,1];
//   b0.frame_a.S[2,2] = inertial.frame_b.S[2,2];
//   b0.frame_a.S[2,2] = j1.frame_a.S[2,2];
//   b0.frame_a.S[2,3] = inertial.frame_b.S[2,3];
//   b0.frame_a.S[2,3] = j1.frame_a.S[2,3];
//   b0.frame_a.S[3,1] = inertial.frame_b.S[3,1];
//   b0.frame_a.S[3,1] = j1.frame_a.S[3,1];
//   b0.frame_a.S[3,2] = inertial.frame_b.S[3,2];
//   b0.frame_a.S[3,2] = j1.frame_a.S[3,2];
//   b0.frame_a.S[3,3] = inertial.frame_b.S[3,3];
//   b0.frame_a.S[3,3] = j1.frame_a.S[3,3];
//   b0.frame_a.r0[1] = inertial.frame_b.r0[1];
//   b0.frame_a.r0[1] = j1.frame_a.r0[1];
//   b0.frame_a.r0[2] = inertial.frame_b.r0[2];
//   b0.frame_a.r0[2] = j1.frame_a.r0[2];
//   b0.frame_a.r0[3] = inertial.frame_b.r0[3];
//   b0.frame_a.r0[3] = j1.frame_a.r0[3];
//   b0.frame_b.t[1] + j2.frame_a.t[1] = 0.0;
//   b0.frame_b.t[2] + j2.frame_a.t[2] = 0.0;
//   b0.frame_b.t[3] + j2.frame_a.t[3] = 0.0;
//   b0.frame_b.f[1] + j2.frame_a.f[1] = 0.0;
//   b0.frame_b.f[2] + j2.frame_a.f[2] = 0.0;
//   b0.frame_b.f[3] + j2.frame_a.f[3] = 0.0;
//   b0.frame_b.z[1] = j2.frame_a.z[1];
//   b0.frame_b.z[2] = j2.frame_a.z[2];
//   b0.frame_b.z[3] = j2.frame_a.z[3];
//   b0.frame_b.a[1] = j2.frame_a.a[1];
//   b0.frame_b.a[2] = j2.frame_a.a[2];
//   b0.frame_b.a[3] = j2.frame_a.a[3];
//   b0.frame_b.w[1] = j2.frame_a.w[1];
//   b0.frame_b.w[2] = j2.frame_a.w[2];
//   b0.frame_b.w[3] = j2.frame_a.w[3];
//   b0.frame_b.v[1] = j2.frame_a.v[1];
//   b0.frame_b.v[2] = j2.frame_a.v[2];
//   b0.frame_b.v[3] = j2.frame_a.v[3];
//   b0.frame_b.S[1,1] = j2.frame_a.S[1,1];
//   b0.frame_b.S[1,2] = j2.frame_a.S[1,2];
//   b0.frame_b.S[1,3] = j2.frame_a.S[1,3];
//   b0.frame_b.S[2,1] = j2.frame_a.S[2,1];
//   b0.frame_b.S[2,2] = j2.frame_a.S[2,2];
//   b0.frame_b.S[2,3] = j2.frame_a.S[2,3];
//   b0.frame_b.S[3,1] = j2.frame_a.S[3,1];
//   b0.frame_b.S[3,2] = j2.frame_a.S[3,2];
//   b0.frame_b.S[3,3] = j2.frame_a.S[3,3];
//   b0.frame_b.r0[1] = j2.frame_a.r0[1];
//   b0.frame_b.r0[2] = j2.frame_a.r0[2];
//   b0.frame_b.r0[3] = j2.frame_a.r0[3];
//   b3.frame_b.t[1] + sphereC.frame_b.t[1] = 0.0;
//   b3.frame_b.t[2] + sphereC.frame_b.t[2] = 0.0;
//   b3.frame_b.t[3] + sphereC.frame_b.t[3] = 0.0;
//   b3.frame_b.f[1] + sphereC.frame_b.f[1] = 0.0;
//   b3.frame_b.f[2] + sphereC.frame_b.f[2] = 0.0;
//   b3.frame_b.f[3] + sphereC.frame_b.f[3] = 0.0;
//   b3.frame_b.z[1] = sphereC.frame_b.z[1];
//   b3.frame_b.z[2] = sphereC.frame_b.z[2];
//   b3.frame_b.z[3] = sphereC.frame_b.z[3];
//   b3.frame_b.a[1] = sphereC.frame_b.a[1];
//   b3.frame_b.a[2] = sphereC.frame_b.a[2];
//   b3.frame_b.a[3] = sphereC.frame_b.a[3];
//   b3.frame_b.w[1] = sphereC.frame_b.w[1];
//   b3.frame_b.w[2] = sphereC.frame_b.w[2];
//   b3.frame_b.w[3] = sphereC.frame_b.w[3];
//   b3.frame_b.v[1] = sphereC.frame_b.v[1];
//   b3.frame_b.v[2] = sphereC.frame_b.v[2];
//   b3.frame_b.v[3] = sphereC.frame_b.v[3];
//   b3.frame_b.S[1,1] = sphereC.frame_b.S[1,1];
//   b3.frame_b.S[1,2] = sphereC.frame_b.S[1,2];
//   b3.frame_b.S[1,3] = sphereC.frame_b.S[1,3];
//   b3.frame_b.S[2,1] = sphereC.frame_b.S[2,1];
//   b3.frame_b.S[2,2] = sphereC.frame_b.S[2,2];
//   b3.frame_b.S[2,3] = sphereC.frame_b.S[2,3];
//   b3.frame_b.S[3,1] = sphereC.frame_b.S[3,1];
//   b3.frame_b.S[3,2] = sphereC.frame_b.S[3,2];
//   b3.frame_b.S[3,3] = sphereC.frame_b.S[3,3];
//   b3.frame_b.r0[1] = sphereC.frame_b.r0[1];
//   b3.frame_b.r0[2] = sphereC.frame_b.r0[2];
//   b3.frame_b.r0[3] = sphereC.frame_b.r0[3];
//   rev1.frame_b.t[1] + b3.frame_a.t[1] = 0.0;
//   rev1.frame_b.t[2] + b3.frame_a.t[2] = 0.0;
//   rev1.frame_b.t[3] + b3.frame_a.t[3] = 0.0;
//   rev1.frame_b.f[1] + b3.frame_a.f[1] = 0.0;
//   rev1.frame_b.f[2] + b3.frame_a.f[2] = 0.0;
//   rev1.frame_b.f[3] + b3.frame_a.f[3] = 0.0;
//   b3.frame_a.z[1] = rev1.frame_b.z[1];
//   b3.frame_a.z[2] = rev1.frame_b.z[2];
//   b3.frame_a.z[3] = rev1.frame_b.z[3];
//   b3.frame_a.a[1] = rev1.frame_b.a[1];
//   b3.frame_a.a[2] = rev1.frame_b.a[2];
//   b3.frame_a.a[3] = rev1.frame_b.a[3];
//   b3.frame_a.w[1] = rev1.frame_b.w[1];
//   b3.frame_a.w[2] = rev1.frame_b.w[2];
//   b3.frame_a.w[3] = rev1.frame_b.w[3];
//   b3.frame_a.v[1] = rev1.frame_b.v[1];
//   b3.frame_a.v[2] = rev1.frame_b.v[2];
//   b3.frame_a.v[3] = rev1.frame_b.v[3];
//   b3.frame_a.S[1,1] = rev1.frame_b.S[1,1];
//   b3.frame_a.S[1,2] = rev1.frame_b.S[1,2];
//   b3.frame_a.S[1,3] = rev1.frame_b.S[1,3];
//   b3.frame_a.S[2,1] = rev1.frame_b.S[2,1];
//   b3.frame_a.S[2,2] = rev1.frame_b.S[2,2];
//   b3.frame_a.S[2,3] = rev1.frame_b.S[2,3];
//   b3.frame_a.S[3,1] = rev1.frame_b.S[3,1];
//   b3.frame_a.S[3,2] = rev1.frame_b.S[3,2];
//   b3.frame_a.S[3,3] = rev1.frame_b.S[3,3];
//   b3.frame_a.r0[1] = rev1.frame_b.r0[1];
//   b3.frame_a.r0[2] = rev1.frame_b.r0[2];
//   b3.frame_a.r0[3] = rev1.frame_b.r0[3];
//   rev.frame_b.t[1] + rev1.frame_a.t[1] = 0.0;
//   rev.frame_b.t[2] + rev1.frame_a.t[2] = 0.0;
//   rev.frame_b.t[3] + rev1.frame_a.t[3] = 0.0;
//   rev.frame_b.f[1] + rev1.frame_a.f[1] = 0.0;
//   rev.frame_b.f[2] + rev1.frame_a.f[2] = 0.0;
//   rev.frame_b.f[3] + rev1.frame_a.f[3] = 0.0;
//   rev.frame_b.z[1] = rev1.frame_a.z[1];
//   rev.frame_b.z[2] = rev1.frame_a.z[2];
//   rev.frame_b.z[3] = rev1.frame_a.z[3];
//   rev.frame_b.a[1] = rev1.frame_a.a[1];
//   rev.frame_b.a[2] = rev1.frame_a.a[2];
//   rev.frame_b.a[3] = rev1.frame_a.a[3];
//   rev.frame_b.w[1] = rev1.frame_a.w[1];
//   rev.frame_b.w[2] = rev1.frame_a.w[2];
//   rev.frame_b.w[3] = rev1.frame_a.w[3];
//   rev.frame_b.v[1] = rev1.frame_a.v[1];
//   rev.frame_b.v[2] = rev1.frame_a.v[2];
//   rev.frame_b.v[3] = rev1.frame_a.v[3];
//   rev.frame_b.S[1,1] = rev1.frame_a.S[1,1];
//   rev.frame_b.S[1,2] = rev1.frame_a.S[1,2];
//   rev.frame_b.S[1,3] = rev1.frame_a.S[1,3];
//   rev.frame_b.S[2,1] = rev1.frame_a.S[2,1];
//   rev.frame_b.S[2,2] = rev1.frame_a.S[2,2];
//   rev.frame_b.S[2,3] = rev1.frame_a.S[2,3];
//   rev.frame_b.S[3,1] = rev1.frame_a.S[3,1];
//   rev.frame_b.S[3,2] = rev1.frame_a.S[3,2];
//   rev.frame_b.S[3,3] = rev1.frame_a.S[3,3];
//   rev.frame_b.r0[1] = rev1.frame_a.r0[1];
//   rev.frame_b.r0[2] = rev1.frame_a.r0[2];
//   rev.frame_b.r0[3] = rev1.frame_a.r0[3];
//   rev.frame_a.t[1] + b2.frame_b.t[1] = 0.0;
//   rev.frame_a.t[2] + b2.frame_b.t[2] = 0.0;
//   rev.frame_a.t[3] + b2.frame_b.t[3] = 0.0;
//   rev.frame_a.f[1] + b2.frame_b.f[1] = 0.0;
//   rev.frame_a.f[2] + b2.frame_b.f[2] = 0.0;
//   rev.frame_a.f[3] + b2.frame_b.f[3] = 0.0;
//   b2.frame_b.z[1] = rev.frame_a.z[1];
//   b2.frame_b.z[2] = rev.frame_a.z[2];
//   b2.frame_b.z[3] = rev.frame_a.z[3];
//   b2.frame_b.a[1] = rev.frame_a.a[1];
//   b2.frame_b.a[2] = rev.frame_a.a[2];
//   b2.frame_b.a[3] = rev.frame_a.a[3];
//   b2.frame_b.w[1] = rev.frame_a.w[1];
//   b2.frame_b.w[2] = rev.frame_a.w[2];
//   b2.frame_b.w[3] = rev.frame_a.w[3];
//   b2.frame_b.v[1] = rev.frame_a.v[1];
//   b2.frame_b.v[2] = rev.frame_a.v[2];
//   b2.frame_b.v[3] = rev.frame_a.v[3];
//   b2.frame_b.S[1,1] = rev.frame_a.S[1,1];
//   b2.frame_b.S[1,2] = rev.frame_a.S[1,2];
//   b2.frame_b.S[1,3] = rev.frame_a.S[1,3];
//   b2.frame_b.S[2,1] = rev.frame_a.S[2,1];
//   b2.frame_b.S[2,2] = rev.frame_a.S[2,2];
//   b2.frame_b.S[2,3] = rev.frame_a.S[2,3];
//   b2.frame_b.S[3,1] = rev.frame_a.S[3,1];
//   b2.frame_b.S[3,2] = rev.frame_a.S[3,2];
//   b2.frame_b.S[3,3] = rev.frame_a.S[3,3];
//   b2.frame_b.r0[1] = rev.frame_a.r0[1];
//   b2.frame_b.r0[2] = rev.frame_a.r0[2];
//   b2.frame_b.r0[3] = rev.frame_a.r0[3];
//   j2.frame_b.t[1] + b2.frame_a.t[1] = 0.0;
//   j2.frame_b.t[2] + b2.frame_a.t[2] = 0.0;
//   j2.frame_b.t[3] + b2.frame_a.t[3] = 0.0;
//   j2.frame_b.f[1] + b2.frame_a.f[1] = 0.0;
//   j2.frame_b.f[2] + b2.frame_a.f[2] = 0.0;
//   j2.frame_b.f[3] + b2.frame_a.f[3] = 0.0;
//   b2.frame_a.z[1] = j2.frame_b.z[1];
//   b2.frame_a.z[2] = j2.frame_b.z[2];
//   b2.frame_a.z[3] = j2.frame_b.z[3];
//   b2.frame_a.a[1] = j2.frame_b.a[1];
//   b2.frame_a.a[2] = j2.frame_b.a[2];
//   b2.frame_a.a[3] = j2.frame_b.a[3];
//   b2.frame_a.w[1] = j2.frame_b.w[1];
//   b2.frame_a.w[2] = j2.frame_b.w[2];
//   b2.frame_a.w[3] = j2.frame_b.w[3];
//   b2.frame_a.v[1] = j2.frame_b.v[1];
//   b2.frame_a.v[2] = j2.frame_b.v[2];
//   b2.frame_a.v[3] = j2.frame_b.v[3];
//   b2.frame_a.S[1,1] = j2.frame_b.S[1,1];
//   b2.frame_a.S[1,2] = j2.frame_b.S[1,2];
//   b2.frame_a.S[1,3] = j2.frame_b.S[1,3];
//   b2.frame_a.S[2,1] = j2.frame_b.S[2,1];
//   b2.frame_a.S[2,2] = j2.frame_b.S[2,2];
//   b2.frame_a.S[2,3] = j2.frame_b.S[2,3];
//   b2.frame_a.S[3,1] = j2.frame_b.S[3,1];
//   b2.frame_a.S[3,2] = j2.frame_b.S[3,2];
//   b2.frame_a.S[3,3] = j2.frame_b.S[3,3];
//   b2.frame_a.r0[1] = j2.frame_b.r0[1];
//   b2.frame_a.r0[2] = j2.frame_b.r0[2];
//   b2.frame_a.r0[3] = j2.frame_b.r0[3];
//   j1.frame_b.t[1] + b1.frame_a.t[1] = 0.0;
//   j1.frame_b.t[2] + b1.frame_a.t[2] = 0.0;
//   j1.frame_b.t[3] + b1.frame_a.t[3] = 0.0;
//   j1.frame_b.f[1] + b1.frame_a.f[1] = 0.0;
//   j1.frame_b.f[2] + b1.frame_a.f[2] = 0.0;
//   j1.frame_b.f[3] + b1.frame_a.f[3] = 0.0;
//   b1.frame_a.z[1] = j1.frame_b.z[1];
//   b1.frame_a.z[2] = j1.frame_b.z[2];
//   b1.frame_a.z[3] = j1.frame_b.z[3];
//   b1.frame_a.a[1] = j1.frame_b.a[1];
//   b1.frame_a.a[2] = j1.frame_b.a[2];
//   b1.frame_a.a[3] = j1.frame_b.a[3];
//   b1.frame_a.w[1] = j1.frame_b.w[1];
//   b1.frame_a.w[2] = j1.frame_b.w[2];
//   b1.frame_a.w[3] = j1.frame_b.w[3];
//   b1.frame_a.v[1] = j1.frame_b.v[1];
//   b1.frame_a.v[2] = j1.frame_b.v[2];
//   b1.frame_a.v[3] = j1.frame_b.v[3];
//   b1.frame_a.S[1,1] = j1.frame_b.S[1,1];
//   b1.frame_a.S[1,2] = j1.frame_b.S[1,2];
//   b1.frame_a.S[1,3] = j1.frame_b.S[1,3];
//   b1.frame_a.S[2,1] = j1.frame_b.S[2,1];
//   b1.frame_a.S[2,2] = j1.frame_b.S[2,2];
//   b1.frame_a.S[2,3] = j1.frame_b.S[2,3];
//   b1.frame_a.S[3,1] = j1.frame_b.S[3,1];
//   b1.frame_a.S[3,2] = j1.frame_b.S[3,2];
//   b1.frame_a.S[3,3] = j1.frame_b.S[3,3];
//   b1.frame_a.r0[1] = j1.frame_b.r0[1];
//   b1.frame_a.r0[2] = j1.frame_b.r0[2];
//   b1.frame_a.r0[3] = j1.frame_b.r0[3];
//   b1.frame_b.t[1] + sphereC.frame_a.t[1] = 0.0;
//   b1.frame_b.t[2] + sphereC.frame_a.t[2] = 0.0;
//   b1.frame_b.t[3] + sphereC.frame_a.t[3] = 0.0;
//   b1.frame_b.f[1] + sphereC.frame_a.f[1] = 0.0;
//   b1.frame_b.f[2] + sphereC.frame_a.f[2] = 0.0;
//   b1.frame_b.f[3] + sphereC.frame_a.f[3] = 0.0;
//   b1.frame_b.z[1] = sphereC.frame_a.z[1];
//   b1.frame_b.z[2] = sphereC.frame_a.z[2];
//   b1.frame_b.z[3] = sphereC.frame_a.z[3];
//   b1.frame_b.a[1] = sphereC.frame_a.a[1];
//   b1.frame_b.a[2] = sphereC.frame_a.a[2];
//   b1.frame_b.a[3] = sphereC.frame_a.a[3];
//   b1.frame_b.w[1] = sphereC.frame_a.w[1];
//   b1.frame_b.w[2] = sphereC.frame_a.w[2];
//   b1.frame_b.w[3] = sphereC.frame_a.w[3];
//   b1.frame_b.v[1] = sphereC.frame_a.v[1];
//   b1.frame_b.v[2] = sphereC.frame_a.v[2];
//   b1.frame_b.v[3] = sphereC.frame_a.v[3];
//   b1.frame_b.S[1,1] = sphereC.frame_a.S[1,1];
//   b1.frame_b.S[1,2] = sphereC.frame_a.S[1,2];
//   b1.frame_b.S[1,3] = sphereC.frame_a.S[1,3];
//   b1.frame_b.S[2,1] = sphereC.frame_a.S[2,1];
//   b1.frame_b.S[2,2] = sphereC.frame_a.S[2,2];
//   b1.frame_b.S[2,3] = sphereC.frame_a.S[2,3];
//   b1.frame_b.S[3,1] = sphereC.frame_a.S[3,1];
//   b1.frame_b.S[3,2] = sphereC.frame_a.S[3,2];
//   b1.frame_b.S[3,3] = sphereC.frame_a.S[3,3];
//   b1.frame_b.r0[1] = sphereC.frame_a.r0[1];
//   b1.frame_b.r0[2] = sphereC.frame_a.r0[2];
//   b1.frame_b.r0[3] = sphereC.frame_a.r0[3];
//   rev1.bearing.tau = 0.0;
//   rev1.axis.tau = 0.0;
//   rev.bearing.tau = 0.0;
//   rev.axis.tau = 0.0;
//   (-b3.frame_a.t[1]) + (b3.frameTranslation.frame_a.t[1] + b3.body.frame_a.t[1]) = 0.0;
//   (-b3.frame_a.t[2]) + (b3.frameTranslation.frame_a.t[2] + b3.body.frame_a.t[2]) = 0.0;
//   (-b3.frame_a.t[3]) + (b3.frameTranslation.frame_a.t[3] + b3.body.frame_a.t[3]) = 0.0;
//   (-b3.frame_a.f[1]) + (b3.frameTranslation.frame_a.f[1] + b3.body.frame_a.f[1]) = 0.0;
//   (-b3.frame_a.f[2]) + (b3.frameTranslation.frame_a.f[2] + b3.body.frame_a.f[2]) = 0.0;
//   (-b3.frame_a.f[3]) + (b3.frameTranslation.frame_a.f[3] + b3.body.frame_a.f[3]) = 0.0;
//   b3.body.frame_a.z[1] = b3.frameTranslation.frame_a.z[1];
//   b3.body.frame_a.z[1] = b3.frame_a.z[1];
//   b3.body.frame_a.z[2] = b3.frameTranslation.frame_a.z[2];
//   b3.body.frame_a.z[2] = b3.frame_a.z[2];
//   b3.body.frame_a.z[3] = b3.frameTranslation.frame_a.z[3];
//   b3.body.frame_a.z[3] = b3.frame_a.z[3];
//   b3.body.frame_a.a[1] = b3.frameTranslation.frame_a.a[1];
//   b3.body.frame_a.a[1] = b3.frame_a.a[1];
//   b3.body.frame_a.a[2] = b3.frameTranslation.frame_a.a[2];
//   b3.body.frame_a.a[2] = b3.frame_a.a[2];
//   b3.body.frame_a.a[3] = b3.frameTranslation.frame_a.a[3];
//   b3.body.frame_a.a[3] = b3.frame_a.a[3];
//   b3.body.frame_a.w[1] = b3.frameTranslation.frame_a.w[1];
//   b3.body.frame_a.w[1] = b3.frame_a.w[1];
//   b3.body.frame_a.w[2] = b3.frameTranslation.frame_a.w[2];
//   b3.body.frame_a.w[2] = b3.frame_a.w[2];
//   b3.body.frame_a.w[3] = b3.frameTranslation.frame_a.w[3];
//   b3.body.frame_a.w[3] = b3.frame_a.w[3];
//   b3.body.frame_a.v[1] = b3.frameTranslation.frame_a.v[1];
//   b3.body.frame_a.v[1] = b3.frame_a.v[1];
//   b3.body.frame_a.v[2] = b3.frameTranslation.frame_a.v[2];
//   b3.body.frame_a.v[2] = b3.frame_a.v[2];
//   b3.body.frame_a.v[3] = b3.frameTranslation.frame_a.v[3];
//   b3.body.frame_a.v[3] = b3.frame_a.v[3];
//   b3.body.frame_a.S[1,1] = b3.frameTranslation.frame_a.S[1,1];
//   b3.body.frame_a.S[1,1] = b3.frame_a.S[1,1];
//   b3.body.frame_a.S[1,2] = b3.frameTranslation.frame_a.S[1,2];
//   b3.body.frame_a.S[1,2] = b3.frame_a.S[1,2];
//   b3.body.frame_a.S[1,3] = b3.frameTranslation.frame_a.S[1,3];
//   b3.body.frame_a.S[1,3] = b3.frame_a.S[1,3];
//   b3.body.frame_a.S[2,1] = b3.frameTranslation.frame_a.S[2,1];
//   b3.body.frame_a.S[2,1] = b3.frame_a.S[2,1];
//   b3.body.frame_a.S[2,2] = b3.frameTranslation.frame_a.S[2,2];
//   b3.body.frame_a.S[2,2] = b3.frame_a.S[2,2];
//   b3.body.frame_a.S[2,3] = b3.frameTranslation.frame_a.S[2,3];
//   b3.body.frame_a.S[2,3] = b3.frame_a.S[2,3];
//   b3.body.frame_a.S[3,1] = b3.frameTranslation.frame_a.S[3,1];
//   b3.body.frame_a.S[3,1] = b3.frame_a.S[3,1];
//   b3.body.frame_a.S[3,2] = b3.frameTranslation.frame_a.S[3,2];
//   b3.body.frame_a.S[3,2] = b3.frame_a.S[3,2];
//   b3.body.frame_a.S[3,3] = b3.frameTranslation.frame_a.S[3,3];
//   b3.body.frame_a.S[3,3] = b3.frame_a.S[3,3];
//   b3.body.frame_a.r0[1] = b3.frameTranslation.frame_a.r0[1];
//   b3.body.frame_a.r0[1] = b3.frame_a.r0[1];
//   b3.body.frame_a.r0[2] = b3.frameTranslation.frame_a.r0[2];
//   b3.body.frame_a.r0[2] = b3.frame_a.r0[2];
//   b3.body.frame_a.r0[3] = b3.frameTranslation.frame_a.r0[3];
//   b3.body.frame_a.r0[3] = b3.frame_a.r0[3];
//   b3.frameTranslation.frame_b.t[1] + (-b3.frame_b.t[1]) = 0.0;
//   b3.frameTranslation.frame_b.t[2] + (-b3.frame_b.t[2]) = 0.0;
//   b3.frameTranslation.frame_b.t[3] + (-b3.frame_b.t[3]) = 0.0;
//   b3.frameTranslation.frame_b.f[1] + (-b3.frame_b.f[1]) = 0.0;
//   b3.frameTranslation.frame_b.f[2] + (-b3.frame_b.f[2]) = 0.0;
//   b3.frameTranslation.frame_b.f[3] + (-b3.frame_b.f[3]) = 0.0;
//   b3.frameTranslation.frame_b.z[1] = b3.frame_b.z[1];
//   b3.frameTranslation.frame_b.z[2] = b3.frame_b.z[2];
//   b3.frameTranslation.frame_b.z[3] = b3.frame_b.z[3];
//   b3.frameTranslation.frame_b.a[1] = b3.frame_b.a[1];
//   b3.frameTranslation.frame_b.a[2] = b3.frame_b.a[2];
//   b3.frameTranslation.frame_b.a[3] = b3.frame_b.a[3];
//   b3.frameTranslation.frame_b.w[1] = b3.frame_b.w[1];
//   b3.frameTranslation.frame_b.w[2] = b3.frame_b.w[2];
//   b3.frameTranslation.frame_b.w[3] = b3.frame_b.w[3];
//   b3.frameTranslation.frame_b.v[1] = b3.frame_b.v[1];
//   b3.frameTranslation.frame_b.v[2] = b3.frame_b.v[2];
//   b3.frameTranslation.frame_b.v[3] = b3.frame_b.v[3];
//   b3.frameTranslation.frame_b.S[1,1] = b3.frame_b.S[1,1];
//   b3.frameTranslation.frame_b.S[1,2] = b3.frame_b.S[1,2];
//   b3.frameTranslation.frame_b.S[1,3] = b3.frame_b.S[1,3];
//   b3.frameTranslation.frame_b.S[2,1] = b3.frame_b.S[2,1];
//   b3.frameTranslation.frame_b.S[2,2] = b3.frame_b.S[2,2];
//   b3.frameTranslation.frame_b.S[2,3] = b3.frame_b.S[2,3];
//   b3.frameTranslation.frame_b.S[3,1] = b3.frame_b.S[3,1];
//   b3.frameTranslation.frame_b.S[3,2] = b3.frame_b.S[3,2];
//   b3.frameTranslation.frame_b.S[3,3] = b3.frame_b.S[3,3];
//   b3.frameTranslation.frame_b.r0[1] = b3.frame_b.r0[1];
//   b3.frameTranslation.frame_b.r0[2] = b3.frame_b.r0[2];
//   b3.frameTranslation.frame_b.r0[3] = b3.frame_b.r0[3];
//   b0.body.frame_a.t[1] + ((-b0.frame_a.t[1]) + b0.frameTranslation.frame_a.t[1]) = 0.0;
//   b0.body.frame_a.t[2] + ((-b0.frame_a.t[2]) + b0.frameTranslation.frame_a.t[2]) = 0.0;
//   b0.body.frame_a.t[3] + ((-b0.frame_a.t[3]) + b0.frameTranslation.frame_a.t[3]) = 0.0;
//   b0.body.frame_a.f[1] + ((-b0.frame_a.f[1]) + b0.frameTranslation.frame_a.f[1]) = 0.0;
//   b0.body.frame_a.f[2] + ((-b0.frame_a.f[2]) + b0.frameTranslation.frame_a.f[2]) = 0.0;
//   b0.body.frame_a.f[3] + ((-b0.frame_a.f[3]) + b0.frameTranslation.frame_a.f[3]) = 0.0;
//   b0.body.frame_a.z[1] = b0.frameTranslation.frame_a.z[1];
//   b0.body.frame_a.z[1] = b0.frame_a.z[1];
//   b0.body.frame_a.z[2] = b0.frameTranslation.frame_a.z[2];
//   b0.body.frame_a.z[2] = b0.frame_a.z[2];
//   b0.body.frame_a.z[3] = b0.frameTranslation.frame_a.z[3];
//   b0.body.frame_a.z[3] = b0.frame_a.z[3];
//   b0.body.frame_a.a[1] = b0.frameTranslation.frame_a.a[1];
//   b0.body.frame_a.a[1] = b0.frame_a.a[1];
//   b0.body.frame_a.a[2] = b0.frameTranslation.frame_a.a[2];
//   b0.body.frame_a.a[2] = b0.frame_a.a[2];
//   b0.body.frame_a.a[3] = b0.frameTranslation.frame_a.a[3];
//   b0.body.frame_a.a[3] = b0.frame_a.a[3];
//   b0.body.frame_a.w[1] = b0.frameTranslation.frame_a.w[1];
//   b0.body.frame_a.w[1] = b0.frame_a.w[1];
//   b0.body.frame_a.w[2] = b0.frameTranslation.frame_a.w[2];
//   b0.body.frame_a.w[2] = b0.frame_a.w[2];
//   b0.body.frame_a.w[3] = b0.frameTranslation.frame_a.w[3];
//   b0.body.frame_a.w[3] = b0.frame_a.w[3];
//   b0.body.frame_a.v[1] = b0.frameTranslation.frame_a.v[1];
//   b0.body.frame_a.v[1] = b0.frame_a.v[1];
//   b0.body.frame_a.v[2] = b0.frameTranslation.frame_a.v[2];
//   b0.body.frame_a.v[2] = b0.frame_a.v[2];
//   b0.body.frame_a.v[3] = b0.frameTranslation.frame_a.v[3];
//   b0.body.frame_a.v[3] = b0.frame_a.v[3];
//   b0.body.frame_a.S[1,1] = b0.frameTranslation.frame_a.S[1,1];
//   b0.body.frame_a.S[1,1] = b0.frame_a.S[1,1];
//   b0.body.frame_a.S[1,2] = b0.frameTranslation.frame_a.S[1,2];
//   b0.body.frame_a.S[1,2] = b0.frame_a.S[1,2];
//   b0.body.frame_a.S[1,3] = b0.frameTranslation.frame_a.S[1,3];
//   b0.body.frame_a.S[1,3] = b0.frame_a.S[1,3];
//   b0.body.frame_a.S[2,1] = b0.frameTranslation.frame_a.S[2,1];
//   b0.body.frame_a.S[2,1] = b0.frame_a.S[2,1];
//   b0.body.frame_a.S[2,2] = b0.frameTranslation.frame_a.S[2,2];
//   b0.body.frame_a.S[2,2] = b0.frame_a.S[2,2];
//   b0.body.frame_a.S[2,3] = b0.frameTranslation.frame_a.S[2,3];
//   b0.body.frame_a.S[2,3] = b0.frame_a.S[2,3];
//   b0.body.frame_a.S[3,1] = b0.frameTranslation.frame_a.S[3,1];
//   b0.body.frame_a.S[3,1] = b0.frame_a.S[3,1];
//   b0.body.frame_a.S[3,2] = b0.frameTranslation.frame_a.S[3,2];
//   b0.body.frame_a.S[3,2] = b0.frame_a.S[3,2];
//   b0.body.frame_a.S[3,3] = b0.frameTranslation.frame_a.S[3,3];
//   b0.body.frame_a.S[3,3] = b0.frame_a.S[3,3];
//   b0.body.frame_a.r0[1] = b0.frameTranslation.frame_a.r0[1];
//   b0.body.frame_a.r0[1] = b0.frame_a.r0[1];
//   b0.body.frame_a.r0[2] = b0.frameTranslation.frame_a.r0[2];
//   b0.body.frame_a.r0[2] = b0.frame_a.r0[2];
//   b0.body.frame_a.r0[3] = b0.frameTranslation.frame_a.r0[3];
//   b0.body.frame_a.r0[3] = b0.frame_a.r0[3];
//   b0.frameTranslation.frame_b.t[1] + (-b0.frame_b.t[1]) = 0.0;
//   b0.frameTranslation.frame_b.t[2] + (-b0.frame_b.t[2]) = 0.0;
//   b0.frameTranslation.frame_b.t[3] + (-b0.frame_b.t[3]) = 0.0;
//   b0.frameTranslation.frame_b.f[1] + (-b0.frame_b.f[1]) = 0.0;
//   b0.frameTranslation.frame_b.f[2] + (-b0.frame_b.f[2]) = 0.0;
//   b0.frameTranslation.frame_b.f[3] + (-b0.frame_b.f[3]) = 0.0;
//   b0.frameTranslation.frame_b.z[1] = b0.frame_b.z[1];
//   b0.frameTranslation.frame_b.z[2] = b0.frame_b.z[2];
//   b0.frameTranslation.frame_b.z[3] = b0.frame_b.z[3];
//   b0.frameTranslation.frame_b.a[1] = b0.frame_b.a[1];
//   b0.frameTranslation.frame_b.a[2] = b0.frame_b.a[2];
//   b0.frameTranslation.frame_b.a[3] = b0.frame_b.a[3];
//   b0.frameTranslation.frame_b.w[1] = b0.frame_b.w[1];
//   b0.frameTranslation.frame_b.w[2] = b0.frame_b.w[2];
//   b0.frameTranslation.frame_b.w[3] = b0.frame_b.w[3];
//   b0.frameTranslation.frame_b.v[1] = b0.frame_b.v[1];
//   b0.frameTranslation.frame_b.v[2] = b0.frame_b.v[2];
//   b0.frameTranslation.frame_b.v[3] = b0.frame_b.v[3];
//   b0.frameTranslation.frame_b.S[1,1] = b0.frame_b.S[1,1];
//   b0.frameTranslation.frame_b.S[1,2] = b0.frame_b.S[1,2];
//   b0.frameTranslation.frame_b.S[1,3] = b0.frame_b.S[1,3];
//   b0.frameTranslation.frame_b.S[2,1] = b0.frame_b.S[2,1];
//   b0.frameTranslation.frame_b.S[2,2] = b0.frame_b.S[2,2];
//   b0.frameTranslation.frame_b.S[2,3] = b0.frame_b.S[2,3];
//   b0.frameTranslation.frame_b.S[3,1] = b0.frame_b.S[3,1];
//   b0.frameTranslation.frame_b.S[3,2] = b0.frame_b.S[3,2];
//   b0.frameTranslation.frame_b.S[3,3] = b0.frame_b.S[3,3];
//   b0.frameTranslation.frame_b.r0[1] = b0.frame_b.r0[1];
//   b0.frameTranslation.frame_b.r0[2] = b0.frame_b.r0[2];
//   b0.frameTranslation.frame_b.r0[3] = b0.frame_b.r0[3];
//   (-b2.frame_a.t[1]) + (b2.frameTranslation.frame_a.t[1] + b2.body.frame_a.t[1]) = 0.0;
//   (-b2.frame_a.t[2]) + (b2.frameTranslation.frame_a.t[2] + b2.body.frame_a.t[2]) = 0.0;
//   (-b2.frame_a.t[3]) + (b2.frameTranslation.frame_a.t[3] + b2.body.frame_a.t[3]) = 0.0;
//   (-b2.frame_a.f[1]) + (b2.frameTranslation.frame_a.f[1] + b2.body.frame_a.f[1]) = 0.0;
//   (-b2.frame_a.f[2]) + (b2.frameTranslation.frame_a.f[2] + b2.body.frame_a.f[2]) = 0.0;
//   (-b2.frame_a.f[3]) + (b2.frameTranslation.frame_a.f[3] + b2.body.frame_a.f[3]) = 0.0;
//   b2.body.frame_a.z[1] = b2.frameTranslation.frame_a.z[1];
//   b2.body.frame_a.z[1] = b2.frame_a.z[1];
//   b2.body.frame_a.z[2] = b2.frameTranslation.frame_a.z[2];
//   b2.body.frame_a.z[2] = b2.frame_a.z[2];
//   b2.body.frame_a.z[3] = b2.frameTranslation.frame_a.z[3];
//   b2.body.frame_a.z[3] = b2.frame_a.z[3];
//   b2.body.frame_a.a[1] = b2.frameTranslation.frame_a.a[1];
//   b2.body.frame_a.a[1] = b2.frame_a.a[1];
//   b2.body.frame_a.a[2] = b2.frameTranslation.frame_a.a[2];
//   b2.body.frame_a.a[2] = b2.frame_a.a[2];
//   b2.body.frame_a.a[3] = b2.frameTranslation.frame_a.a[3];
//   b2.body.frame_a.a[3] = b2.frame_a.a[3];
//   b2.body.frame_a.w[1] = b2.frameTranslation.frame_a.w[1];
//   b2.body.frame_a.w[1] = b2.frame_a.w[1];
//   b2.body.frame_a.w[2] = b2.frameTranslation.frame_a.w[2];
//   b2.body.frame_a.w[2] = b2.frame_a.w[2];
//   b2.body.frame_a.w[3] = b2.frameTranslation.frame_a.w[3];
//   b2.body.frame_a.w[3] = b2.frame_a.w[3];
//   b2.body.frame_a.v[1] = b2.frameTranslation.frame_a.v[1];
//   b2.body.frame_a.v[1] = b2.frame_a.v[1];
//   b2.body.frame_a.v[2] = b2.frameTranslation.frame_a.v[2];
//   b2.body.frame_a.v[2] = b2.frame_a.v[2];
//   b2.body.frame_a.v[3] = b2.frameTranslation.frame_a.v[3];
//   b2.body.frame_a.v[3] = b2.frame_a.v[3];
//   b2.body.frame_a.S[1,1] = b2.frameTranslation.frame_a.S[1,1];
//   b2.body.frame_a.S[1,1] = b2.frame_a.S[1,1];
//   b2.body.frame_a.S[1,2] = b2.frameTranslation.frame_a.S[1,2];
//   b2.body.frame_a.S[1,2] = b2.frame_a.S[1,2];
//   b2.body.frame_a.S[1,3] = b2.frameTranslation.frame_a.S[1,3];
//   b2.body.frame_a.S[1,3] = b2.frame_a.S[1,3];
//   b2.body.frame_a.S[2,1] = b2.frameTranslation.frame_a.S[2,1];
//   b2.body.frame_a.S[2,1] = b2.frame_a.S[2,1];
//   b2.body.frame_a.S[2,2] = b2.frameTranslation.frame_a.S[2,2];
//   b2.body.frame_a.S[2,2] = b2.frame_a.S[2,2];
//   b2.body.frame_a.S[2,3] = b2.frameTranslation.frame_a.S[2,3];
//   b2.body.frame_a.S[2,3] = b2.frame_a.S[2,3];
//   b2.body.frame_a.S[3,1] = b2.frameTranslation.frame_a.S[3,1];
//   b2.body.frame_a.S[3,1] = b2.frame_a.S[3,1];
//   b2.body.frame_a.S[3,2] = b2.frameTranslation.frame_a.S[3,2];
//   b2.body.frame_a.S[3,2] = b2.frame_a.S[3,2];
//   b2.body.frame_a.S[3,3] = b2.frameTranslation.frame_a.S[3,3];
//   b2.body.frame_a.S[3,3] = b2.frame_a.S[3,3];
//   b2.body.frame_a.r0[1] = b2.frameTranslation.frame_a.r0[1];
//   b2.body.frame_a.r0[1] = b2.frame_a.r0[1];
//   b2.body.frame_a.r0[2] = b2.frameTranslation.frame_a.r0[2];
//   b2.body.frame_a.r0[2] = b2.frame_a.r0[2];
//   b2.body.frame_a.r0[3] = b2.frameTranslation.frame_a.r0[3];
//   b2.body.frame_a.r0[3] = b2.frame_a.r0[3];
//   b2.frameTranslation.frame_b.t[1] + (-b2.frame_b.t[1]) = 0.0;
//   b2.frameTranslation.frame_b.t[2] + (-b2.frame_b.t[2]) = 0.0;
//   b2.frameTranslation.frame_b.t[3] + (-b2.frame_b.t[3]) = 0.0;
//   b2.frameTranslation.frame_b.f[1] + (-b2.frame_b.f[1]) = 0.0;
//   b2.frameTranslation.frame_b.f[2] + (-b2.frame_b.f[2]) = 0.0;
//   b2.frameTranslation.frame_b.f[3] + (-b2.frame_b.f[3]) = 0.0;
//   b2.frameTranslation.frame_b.z[1] = b2.frame_b.z[1];
//   b2.frameTranslation.frame_b.z[2] = b2.frame_b.z[2];
//   b2.frameTranslation.frame_b.z[3] = b2.frame_b.z[3];
//   b2.frameTranslation.frame_b.a[1] = b2.frame_b.a[1];
//   b2.frameTranslation.frame_b.a[2] = b2.frame_b.a[2];
//   b2.frameTranslation.frame_b.a[3] = b2.frame_b.a[3];
//   b2.frameTranslation.frame_b.w[1] = b2.frame_b.w[1];
//   b2.frameTranslation.frame_b.w[2] = b2.frame_b.w[2];
//   b2.frameTranslation.frame_b.w[3] = b2.frame_b.w[3];
//   b2.frameTranslation.frame_b.v[1] = b2.frame_b.v[1];
//   b2.frameTranslation.frame_b.v[2] = b2.frame_b.v[2];
//   b2.frameTranslation.frame_b.v[3] = b2.frame_b.v[3];
//   b2.frameTranslation.frame_b.S[1,1] = b2.frame_b.S[1,1];
//   b2.frameTranslation.frame_b.S[1,2] = b2.frame_b.S[1,2];
//   b2.frameTranslation.frame_b.S[1,3] = b2.frame_b.S[1,3];
//   b2.frameTranslation.frame_b.S[2,1] = b2.frame_b.S[2,1];
//   b2.frameTranslation.frame_b.S[2,2] = b2.frame_b.S[2,2];
//   b2.frameTranslation.frame_b.S[2,3] = b2.frame_b.S[2,3];
//   b2.frameTranslation.frame_b.S[3,1] = b2.frame_b.S[3,1];
//   b2.frameTranslation.frame_b.S[3,2] = b2.frame_b.S[3,2];
//   b2.frameTranslation.frame_b.S[3,3] = b2.frame_b.S[3,3];
//   b2.frameTranslation.frame_b.r0[1] = b2.frame_b.r0[1];
//   b2.frameTranslation.frame_b.r0[2] = b2.frame_b.r0[2];
//   b2.frameTranslation.frame_b.r0[3] = b2.frame_b.r0[3];
//   (-b1.frame_a.t[1]) + (b1.frameTranslation.frame_a.t[1] + b1.body.frame_a.t[1]) = 0.0;
//   (-b1.frame_a.t[2]) + (b1.frameTranslation.frame_a.t[2] + b1.body.frame_a.t[2]) = 0.0;
//   (-b1.frame_a.t[3]) + (b1.frameTranslation.frame_a.t[3] + b1.body.frame_a.t[3]) = 0.0;
//   (-b1.frame_a.f[1]) + (b1.frameTranslation.frame_a.f[1] + b1.body.frame_a.f[1]) = 0.0;
//   (-b1.frame_a.f[2]) + (b1.frameTranslation.frame_a.f[2] + b1.body.frame_a.f[2]) = 0.0;
//   (-b1.frame_a.f[3]) + (b1.frameTranslation.frame_a.f[3] + b1.body.frame_a.f[3]) = 0.0;
//   b1.body.frame_a.z[1] = b1.frameTranslation.frame_a.z[1];
//   b1.body.frame_a.z[1] = b1.frame_a.z[1];
//   b1.body.frame_a.z[2] = b1.frameTranslation.frame_a.z[2];
//   b1.body.frame_a.z[2] = b1.frame_a.z[2];
//   b1.body.frame_a.z[3] = b1.frameTranslation.frame_a.z[3];
//   b1.body.frame_a.z[3] = b1.frame_a.z[3];
//   b1.body.frame_a.a[1] = b1.frameTranslation.frame_a.a[1];
//   b1.body.frame_a.a[1] = b1.frame_a.a[1];
//   b1.body.frame_a.a[2] = b1.frameTranslation.frame_a.a[2];
//   b1.body.frame_a.a[2] = b1.frame_a.a[2];
//   b1.body.frame_a.a[3] = b1.frameTranslation.frame_a.a[3];
//   b1.body.frame_a.a[3] = b1.frame_a.a[3];
//   b1.body.frame_a.w[1] = b1.frameTranslation.frame_a.w[1];
//   b1.body.frame_a.w[1] = b1.frame_a.w[1];
//   b1.body.frame_a.w[2] = b1.frameTranslation.frame_a.w[2];
//   b1.body.frame_a.w[2] = b1.frame_a.w[2];
//   b1.body.frame_a.w[3] = b1.frameTranslation.frame_a.w[3];
//   b1.body.frame_a.w[3] = b1.frame_a.w[3];
//   b1.body.frame_a.v[1] = b1.frameTranslation.frame_a.v[1];
//   b1.body.frame_a.v[1] = b1.frame_a.v[1];
//   b1.body.frame_a.v[2] = b1.frameTranslation.frame_a.v[2];
//   b1.body.frame_a.v[2] = b1.frame_a.v[2];
//   b1.body.frame_a.v[3] = b1.frameTranslation.frame_a.v[3];
//   b1.body.frame_a.v[3] = b1.frame_a.v[3];
//   b1.body.frame_a.S[1,1] = b1.frameTranslation.frame_a.S[1,1];
//   b1.body.frame_a.S[1,1] = b1.frame_a.S[1,1];
//   b1.body.frame_a.S[1,2] = b1.frameTranslation.frame_a.S[1,2];
//   b1.body.frame_a.S[1,2] = b1.frame_a.S[1,2];
//   b1.body.frame_a.S[1,3] = b1.frameTranslation.frame_a.S[1,3];
//   b1.body.frame_a.S[1,3] = b1.frame_a.S[1,3];
//   b1.body.frame_a.S[2,1] = b1.frameTranslation.frame_a.S[2,1];
//   b1.body.frame_a.S[2,1] = b1.frame_a.S[2,1];
//   b1.body.frame_a.S[2,2] = b1.frameTranslation.frame_a.S[2,2];
//   b1.body.frame_a.S[2,2] = b1.frame_a.S[2,2];
//   b1.body.frame_a.S[2,3] = b1.frameTranslation.frame_a.S[2,3];
//   b1.body.frame_a.S[2,3] = b1.frame_a.S[2,3];
//   b1.body.frame_a.S[3,1] = b1.frameTranslation.frame_a.S[3,1];
//   b1.body.frame_a.S[3,1] = b1.frame_a.S[3,1];
//   b1.body.frame_a.S[3,2] = b1.frameTranslation.frame_a.S[3,2];
//   b1.body.frame_a.S[3,2] = b1.frame_a.S[3,2];
//   b1.body.frame_a.S[3,3] = b1.frameTranslation.frame_a.S[3,3];
//   b1.body.frame_a.S[3,3] = b1.frame_a.S[3,3];
//   b1.body.frame_a.r0[1] = b1.frameTranslation.frame_a.r0[1];
//   b1.body.frame_a.r0[1] = b1.frame_a.r0[1];
//   b1.body.frame_a.r0[2] = b1.frameTranslation.frame_a.r0[2];
//   b1.body.frame_a.r0[2] = b1.frame_a.r0[2];
//   b1.body.frame_a.r0[3] = b1.frameTranslation.frame_a.r0[3];
//   b1.body.frame_a.r0[3] = b1.frame_a.r0[3];
//   b1.frameTranslation.frame_b.t[1] + (-b1.frame_b.t[1]) = 0.0;
//   b1.frameTranslation.frame_b.t[2] + (-b1.frame_b.t[2]) = 0.0;
//   b1.frameTranslation.frame_b.t[3] + (-b1.frame_b.t[3]) = 0.0;
//   b1.frameTranslation.frame_b.f[1] + (-b1.frame_b.f[1]) = 0.0;
//   b1.frameTranslation.frame_b.f[2] + (-b1.frame_b.f[2]) = 0.0;
//   b1.frameTranslation.frame_b.f[3] + (-b1.frame_b.f[3]) = 0.0;
//   b1.frameTranslation.frame_b.z[1] = b1.frame_b.z[1];
//   b1.frameTranslation.frame_b.z[2] = b1.frame_b.z[2];
//   b1.frameTranslation.frame_b.z[3] = b1.frame_b.z[3];
//   b1.frameTranslation.frame_b.a[1] = b1.frame_b.a[1];
//   b1.frameTranslation.frame_b.a[2] = b1.frame_b.a[2];
//   b1.frameTranslation.frame_b.a[3] = b1.frame_b.a[3];
//   b1.frameTranslation.frame_b.w[1] = b1.frame_b.w[1];
//   b1.frameTranslation.frame_b.w[2] = b1.frame_b.w[2];
//   b1.frameTranslation.frame_b.w[3] = b1.frame_b.w[3];
//   b1.frameTranslation.frame_b.v[1] = b1.frame_b.v[1];
//   b1.frameTranslation.frame_b.v[2] = b1.frame_b.v[2];
//   b1.frameTranslation.frame_b.v[3] = b1.frame_b.v[3];
//   b1.frameTranslation.frame_b.S[1,1] = b1.frame_b.S[1,1];
//   b1.frameTranslation.frame_b.S[1,2] = b1.frame_b.S[1,2];
//   b1.frameTranslation.frame_b.S[1,3] = b1.frame_b.S[1,3];
//   b1.frameTranslation.frame_b.S[2,1] = b1.frame_b.S[2,1];
//   b1.frameTranslation.frame_b.S[2,2] = b1.frame_b.S[2,2];
//   b1.frameTranslation.frame_b.S[2,3] = b1.frame_b.S[2,3];
//   b1.frameTranslation.frame_b.S[3,1] = b1.frame_b.S[3,1];
//   b1.frameTranslation.frame_b.S[3,2] = b1.frame_b.S[3,2];
//   b1.frameTranslation.frame_b.S[3,3] = b1.frame_b.S[3,3];
//   b1.frameTranslation.frame_b.r0[1] = b1.frame_b.r0[1];
//   b1.frameTranslation.frame_b.r0[2] = b1.frame_b.r0[2];
//   b1.frameTranslation.frame_b.r0[3] = b1.frame_b.r0[3];
//   j2.bearing.f = 0.0;
//   j2.axis.f = 0.0;
//   j1.bearing.tau = 0.0;
//   j1.axis.tau = 0.0;
// end MultiBody.Examples.Loops.Fourbar2;
// "
// "Check of MultiBody.Examples.Loops.Fourbar2 completed successfully.
// 
// [FourBar2Total.mo:2021:7-2021:70:writable] Warning: Component Length has the same name as its type SI.Length.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [FourBar2Total.mo:1941:7-1941:73:writable] Warning: Component Length has the same name as its type SI.Length.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [FourBar2Total.mo:2021:7-2021:70:writable] Warning: Component Length has the same name as its type SI.Length.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class MultiBody.Examples.Loops.Fourbar2 has 2522 equation(s) and 2525 variable(s).
// 2008 of these are trivial equation(s).
// "
// ""
// endResult
