// name: ModelicaAdditions.MultiBody.Examples.Loops.TwoLoop
// keywords: MultiBody, Examples
// status: correct

loadFile("TwoLoopTotal.mo");
instantiateModel(MultiBody.Examples.Loops.TwoLoop);
checkModel(MultiBody.Examples.Loops.TwoLoop);
getErrorString();

// Result:
// true
// "function MCVisualShape.local_normalize
//   input Real[3] iv;
//   output Real[3] ov;
//   Real length;
// algorithm
//   length := sqrt(iv[1] ^ 2.0 + iv[2] ^ 2.0 + iv[3] ^ 2.0);
//   ov := {iv[1] / length,iv[2] / length,iv[3] / length};
// end MCVisualShape.local_normalize;
// 
// function PackMaterial
//   input Real r;
//   input Real g;
//   input Real b;
//   input Real spec;
//   output Real packedMaterial;
//   Integer i1;
//   Integer i2;
//   Integer i3;
//   Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
//   input String shape;
//   output Real packedShape;
// algorithm
//   if shape == "box" then
//     packedShape := 101.0;
//   elseif shape == "sphere" then
//     packedShape := 102.0;
//   elseif shape == "cylinder" then
//     packedShape := 103.0;
//   elseif shape == "cone" then
//     packedShape := 104.0;
//   elseif shape == "pipe" then
//     packedShape := 105.0;
//   elseif shape == "beam" then
//     packedShape := 106.0;
//   elseif shape == "wirebox" then
//     packedShape := 107.0;
//   elseif shape == "gearwheel" then
//     packedShape := 108.0;
//   elseif shape == "spring" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class MultiBody.Examples.Loops.TwoLoop
//   parameter Real inertial.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Gravity constant";
//   parameter Real inertial.ng[1] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real inertial.ng[2] = -1.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real inertial.ng[3] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter String inertial.label1 = "x" "Label of horizontal axis in icon";
//   parameter String inertial.label2 = "y" "Label of vertical axis in icon";
//   Real inertial.gravity[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real inertial.gravity[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real inertial.gravity[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   output Real inertial.frame_b.r0[1](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real inertial.frame_b.r0[2](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real inertial.frame_b.r0[3](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real inertial.frame_b.S[1,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[1,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[1,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[2,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,1] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,2] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.S[3,3] "Transformation matrix from frame_a to inertial system";
//   Real inertial.frame_b.v[1](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.v[2](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.v[3](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real inertial.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real inertial.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real inertial.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real inertial.frame_b.f[1](quantity = "Force", unit = "N");
//   Real inertial.frame_b.f[2](quantity = "Force", unit = "N");
//   Real inertial.frame_b.f[3](quantity = "Force", unit = "N");
//   Real inertial.frame_b.t[1](quantity = "Torque", unit = "N.m");
//   Real inertial.frame_b.t[2](quantity = "Torque", unit = "N.m");
//   Real inertial.frame_b.t[3](quantity = "Torque", unit = "N.m");
//   constant Real j1.pi = 3.14159265358979;
//   constant Real j1.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j1.frame_a.r0[1](quantity = "Length", unit = "m") = j1.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j1.frame_a.r0[2](quantity = "Length", unit = "m") = j1.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j1.frame_a.r0[3](quantity = "Length", unit = "m") = j1.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j1.frame_a.S[1,1] = j1.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[1,2] = j1.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[1,3] = j1.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[2,1] = j1.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[2,2] = j1.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[2,3] = j1.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[3,1] = j1.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[3,2] = j1.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.S[3,3] = j1.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j1.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j1.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j1.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j1.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j1.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j1.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j1.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j1.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j1.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_a.f[1](quantity = "Force", unit = "N") = j1.fa[1];
//   Real j1.frame_a.f[2](quantity = "Force", unit = "N") = j1.fa[2];
//   Real j1.frame_a.f[3](quantity = "Force", unit = "N") = j1.fa[3];
//   Real j1.frame_a.t[1](quantity = "Torque", unit = "N.m") = j1.ta[1];
//   Real j1.frame_a.t[2](quantity = "Torque", unit = "N.m") = j1.ta[2];
//   Real j1.frame_a.t[3](quantity = "Torque", unit = "N.m") = j1.ta[3];
//   output Real j1.frame_b.r0[1](quantity = "Length", unit = "m") = j1.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j1.frame_b.r0[2](quantity = "Length", unit = "m") = j1.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j1.frame_b.r0[3](quantity = "Length", unit = "m") = j1.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j1.frame_b.S[1,1] = j1.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[1,2] = j1.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[1,3] = j1.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[2,1] = j1.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[2,2] = j1.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[2,3] = j1.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[3,1] = j1.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[3,2] = j1.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.S[3,3] = j1.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j1.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j1.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j1.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j1.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j1.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j1.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j1.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j1.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j1.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j1.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j1.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j1.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j1.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j1.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j1.frame_b.f[1](quantity = "Force", unit = "N") = -j1.fb[1];
//   Real j1.frame_b.f[2](quantity = "Force", unit = "N") = -j1.fb[2];
//   Real j1.frame_b.f[3](quantity = "Force", unit = "N") = -j1.fb[3];
//   Real j1.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j1.tb[1];
//   Real j1.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j1.tb[2];
//   Real j1.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j1.tb[3];
//   protected Real j1.Sa[1,1](start = 1.0);
//   protected Real j1.Sa[1,2](start = 0.0);
//   protected Real j1.Sa[1,3](start = 0.0);
//   protected Real j1.Sa[2,1](start = 0.0);
//   protected Real j1.Sa[2,2](start = 1.0);
//   protected Real j1.Sa[2,3](start = 0.0);
//   protected Real j1.Sa[3,1](start = 0.0);
//   protected Real j1.Sa[3,2](start = 0.0);
//   protected Real j1.Sa[3,3](start = 1.0);
//   protected Real j1.r0a[1](quantity = "Length", unit = "m");
//   protected Real j1.r0a[2](quantity = "Length", unit = "m");
//   protected Real j1.r0a[3](quantity = "Length", unit = "m");
//   protected Real j1.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j1.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j1.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j1.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.fa[1](quantity = "Force", unit = "N");
//   protected Real j1.fa[2](quantity = "Force", unit = "N");
//   protected Real j1.fa[3](quantity = "Force", unit = "N");
//   protected Real j1.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j1.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j1.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j1.Sb[1,1](start = 1.0);
//   protected Real j1.Sb[1,2](start = 0.0);
//   protected Real j1.Sb[1,3](start = 0.0);
//   protected Real j1.Sb[2,1](start = 0.0);
//   protected Real j1.Sb[2,2](start = 1.0);
//   protected Real j1.Sb[2,3](start = 0.0);
//   protected Real j1.Sb[3,1](start = 0.0);
//   protected Real j1.Sb[3,2](start = 0.0);
//   protected Real j1.Sb[3,3](start = 1.0);
//   protected Real j1.r0b[1](quantity = "Length", unit = "m");
//   protected Real j1.r0b[2](quantity = "Length", unit = "m");
//   protected Real j1.r0b[3](quantity = "Length", unit = "m");
//   protected Real j1.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j1.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j1.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j1.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j1.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j1.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j1.fb[1](quantity = "Force", unit = "N");
//   protected Real j1.fb[2](quantity = "Force", unit = "N");
//   protected Real j1.fb[3](quantity = "Force", unit = "N");
//   protected Real j1.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j1.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j1.tb[3](quantity = "Torque", unit = "N.m");
//   Real j1.S_rel[1,1];
//   Real j1.S_rel[1,2];
//   Real j1.S_rel[1,3];
//   Real j1.S_rel[2,1];
//   Real j1.S_rel[2,2];
//   Real j1.S_rel[2,3];
//   Real j1.S_rel[3,1];
//   Real j1.S_rel[3,2];
//   Real j1.S_rel[3,3];
//   Real j1.r_rela[1](quantity = "Length", unit = "m");
//   Real j1.r_rela[2](quantity = "Length", unit = "m");
//   Real j1.r_rela[3](quantity = "Length", unit = "m");
//   Real j1.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j1.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j1.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j1.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j1.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j1.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j1.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j1.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j1.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j1.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j1.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j1.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real j1.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j1.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j1.n[3] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j1.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean j1.startValueFixed = true "true, if start values of q, qd are fixed";
//   Real j1.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = j1.startValueFixed);
//   Real j1.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = j1.startValueFixed);
//   Real j1.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j1.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real j1.nn[1];
//   Real j1.nn[2];
//   Real j1.nn[3];
//   Real j1.sinq;
//   Real j1.cosq;
//   Real j1.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j1.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j1.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real b1.pi = 3.14159265358979;
//   constant Real b1.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b1.frame_a.r0[1](quantity = "Length", unit = "m") = b1.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.frame_a.r0[2](quantity = "Length", unit = "m") = b1.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.frame_a.r0[3](quantity = "Length", unit = "m") = b1.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b1.frame_a.S[1,1] = b1.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[1,2] = b1.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[1,3] = b1.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[2,1] = b1.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[2,2] = b1.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[2,3] = b1.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[3,1] = b1.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[3,2] = b1.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.S[3,3] = b1.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b1.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b1.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b1.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b1.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b1.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b1.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_a.f[1](quantity = "Force", unit = "N") = b1.fa[1];
//   Real b1.frame_a.f[2](quantity = "Force", unit = "N") = b1.fa[2];
//   Real b1.frame_a.f[3](quantity = "Force", unit = "N") = b1.fa[3];
//   Real b1.frame_a.t[1](quantity = "Torque", unit = "N.m") = b1.ta[1];
//   Real b1.frame_a.t[2](quantity = "Torque", unit = "N.m") = b1.ta[2];
//   Real b1.frame_a.t[3](quantity = "Torque", unit = "N.m") = b1.ta[3];
//   output Real b1.frame_b.r0[1](quantity = "Length", unit = "m") = b1.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b1.frame_b.r0[2](quantity = "Length", unit = "m") = b1.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b1.frame_b.r0[3](quantity = "Length", unit = "m") = b1.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b1.frame_b.S[1,1] = b1.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[1,2] = b1.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[1,3] = b1.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[2,1] = b1.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[2,2] = b1.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[2,3] = b1.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[3,1] = b1.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[3,2] = b1.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.S[3,3] = b1.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b1.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b1.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b1.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b1.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b1.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b1.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frame_b.f[1](quantity = "Force", unit = "N") = -b1.fb[1];
//   Real b1.frame_b.f[2](quantity = "Force", unit = "N") = -b1.fb[2];
//   Real b1.frame_b.f[3](quantity = "Force", unit = "N") = -b1.fb[3];
//   Real b1.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b1.tb[1];
//   Real b1.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b1.tb[2];
//   Real b1.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b1.tb[3];
//   protected Real b1.Sa[1,1](start = 1.0);
//   protected Real b1.Sa[1,2](start = 0.0);
//   protected Real b1.Sa[1,3](start = 0.0);
//   protected Real b1.Sa[2,1](start = 0.0);
//   protected Real b1.Sa[2,2](start = 1.0);
//   protected Real b1.Sa[2,3](start = 0.0);
//   protected Real b1.Sa[3,1](start = 0.0);
//   protected Real b1.Sa[3,2](start = 0.0);
//   protected Real b1.Sa[3,3](start = 1.0);
//   protected Real b1.r0a[1](quantity = "Length", unit = "m");
//   protected Real b1.r0a[2](quantity = "Length", unit = "m");
//   protected Real b1.r0a[3](quantity = "Length", unit = "m");
//   protected Real b1.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b1.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.fa[1](quantity = "Force", unit = "N");
//   protected Real b1.fa[2](quantity = "Force", unit = "N");
//   protected Real b1.fa[3](quantity = "Force", unit = "N");
//   protected Real b1.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b1.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b1.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b1.Sb[1,1](start = 1.0);
//   protected Real b1.Sb[1,2](start = 0.0);
//   protected Real b1.Sb[1,3](start = 0.0);
//   protected Real b1.Sb[2,1](start = 0.0);
//   protected Real b1.Sb[2,2](start = 1.0);
//   protected Real b1.Sb[2,3](start = 0.0);
//   protected Real b1.Sb[3,1](start = 0.0);
//   protected Real b1.Sb[3,2](start = 0.0);
//   protected Real b1.Sb[3,3](start = 1.0);
//   protected Real b1.r0b[1](quantity = "Length", unit = "m");
//   protected Real b1.r0b[2](quantity = "Length", unit = "m");
//   protected Real b1.r0b[3](quantity = "Length", unit = "m");
//   protected Real b1.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b1.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.fb[1](quantity = "Force", unit = "N");
//   protected Real b1.fb[2](quantity = "Force", unit = "N");
//   protected Real b1.fb[3](quantity = "Force", unit = "N");
//   protected Real b1.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b1.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b1.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b1.r[1](quantity = "Length", unit = "m") = 0.1 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r[2](quantity = "Length", unit = "m") = 0.5 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r[3](quantity = "Length", unit = "m") = -0.5 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b1.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b1.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b1.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b1.Axis[1](quantity = "Length", unit = "m") = b1.r[1] - b1.r0[1] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b1.Axis[2](quantity = "Length", unit = "m") = b1.r[2] - b1.r0[2] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b1.Axis[3](quantity = "Length", unit = "m") = b1.r[3] - b1.r0[3] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b1.Length(quantity = "Length", unit = "m") = sqrt(b1.Axis[1] ^ 2.0 + (b1.Axis[2] ^ 2.0 + b1.Axis[3] ^ 2.0)) "Length of cylinder";
//   parameter Real b1.Radius(quantity = "Length", unit = "m", min = 0.0) = 0.02 "Radius of cylinder";
//   parameter Real b1.InnerRadius(quantity = "Length", unit = "m", min = 0.0, max = b1.Radius) = 0.0 "Inner radius of cylinder";
//   parameter Real b1.rho(min = 0.0) = 7.7 "Density of material [g/cm^3]";
//   parameter Real b1.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real b1.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real b1.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real b1.Material[4] = 0.5 "Color and specular coefficient";
//   Real b1.Scyl[1,1];
//   Real b1.Scyl[1,2];
//   Real b1.Scyl[1,3];
//   Real b1.Scyl[2,1];
//   Real b1.Scyl[2,2];
//   Real b1.Scyl[2,3];
//   Real b1.Scyl[3,1];
//   Real b1.Scyl[3,2];
//   Real b1.Scyl[3,3];
//   Real b1.mo(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b1.mi(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b1.I22(quantity = "MomentOfInertia", unit = "kg.m2");
//   parameter Real b1.box.r0[1] = b1.r0[1] "Origin of visual object.";
//   parameter Real b1.box.r0[2] = b1.r0[2] "Origin of visual object.";
//   parameter Real b1.box.r0[3] = b1.r0[3] "Origin of visual object.";
//   parameter Real b1.box.Length = b1.Length "Length of visual object.";
//   parameter Real b1.box.Width = 2.0 * b1.Radius "Width of visual object.";
//   parameter Real b1.box.Height = 2.0 * b1.Radius "Height of visual object.";
//   parameter Real b1.box.LengthDirection[1] = b1.Axis[1] "Vector in length direction.";
//   parameter Real b1.box.LengthDirection[2] = b1.Axis[2] "Vector in length direction.";
//   parameter Real b1.box.LengthDirection[3] = b1.Axis[3] "Vector in length direction.";
//   parameter Real b1.box.WidthDirection[1] = 0.0 "Vector in width direction.";
//   parameter Real b1.box.WidthDirection[2] = 1.0 "Vector in width direction.";
//   parameter Real b1.box.WidthDirection[3] = 0.0 "Vector in width direction.";
//   parameter String b1.box.Shape = "pipe" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b1.box.Material[1] = b1.Material[1] "Color and specular coefficient.";
//   parameter Real b1.box.Material[2] = b1.Material[2] "Color and specular coefficient.";
//   parameter Real b1.box.Material[3] = b1.Material[3] "Color and specular coefficient.";
//   parameter Real b1.box.Material[4] = b1.Material[4] "Color and specular coefficient.";
//   parameter Real b1.box.Extra = b1.InnerRadius / b1.Radius "Additional size data for some of the shape types";
//   input Real b1.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b1.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b1.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b1.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b1.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b1.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b1.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b1.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b1.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b1.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b1.box.r[1] "Position of visual object.";
//   input Real b1.box.r[2] "Position of visual object.";
//   input Real b1.box.r[3] "Position of visual object.";
//   Real b1.box.nLength[1];
//   Real b1.box.nLength[2];
//   Real b1.box.nLength[3];
//   Real b1.box.nWidth[1];
//   Real b1.box.nWidth[2];
//   Real b1.box.nWidth[3];
//   Real b1.box.nHeight[1];
//   Real b1.box.nHeight[2];
//   Real b1.box.nHeight[3];
//   parameter String b1.box.mcShape.shapeType = b1.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b1.box.mcShape.r[1](quantity = "Length", unit = "m") = b1.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.box.mcShape.r[2](quantity = "Length", unit = "m") = b1.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.box.mcShape.r[3](quantity = "Length", unit = "m") = b1.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b1.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = b1.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = b1.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = b1.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b1.box.mcShape.lengthDirection[1] = b1.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b1.box.mcShape.lengthDirection[2] = b1.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b1.box.mcShape.lengthDirection[3] = b1.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b1.box.mcShape.widthDirection[1] = b1.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b1.box.mcShape.widthDirection[2] = b1.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b1.box.mcShape.widthDirection[3] = b1.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b1.box.mcShape.length(quantity = "Length", unit = "m") = b1.box.Length "Length of visual object";
//   input Real b1.box.mcShape.width(quantity = "Length", unit = "m") = b1.box.Width "Width of visual object";
//   input Real b1.box.mcShape.height(quantity = "Length", unit = "m") = b1.box.Height "Height of visual object";
//   input Real b1.box.mcShape.extra = b1.box.Extra "Additional size data for some of the shape types";
//   input Real b1.box.mcShape.color[1] = 255.0 * b1.box.Material[1] "Color of shape";
//   input Real b1.box.mcShape.color[2] = 255.0 * b1.box.Material[2] "Color of shape";
//   input Real b1.box.mcShape.color[3] = 255.0 * b1.box.Material[3] "Color of shape";
//   input Real b1.box.mcShape.specularCoefficient = b1.box.Material[4];
//   input Real b1.box.mcShape.S[1,1] = b1.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[1,2] = b1.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[1,3] = b1.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[2,1] = b1.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[2,2] = b1.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[2,3] = b1.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[3,1] = b1.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[3,2] = b1.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b1.box.mcShape.S[3,3] = b1.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[1,1] = b1.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[1,2] = b1.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[1,3] = b1.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[2,1] = b1.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[2,2] = b1.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[2,3] = b1.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[3,1] = b1.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[3,2] = b1.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b1.box.mcShape.Sshape[3,3] = b1.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b1.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b1.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b1.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b1.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b1.box.mcShape.abs_n_x = sqrt(b1.box.mcShape.lengthDirection[1] ^ 2.0 + (b1.box.mcShape.lengthDirection[2] ^ 2.0 + b1.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b1.box.mcShape.e_x[1] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 1.0 else b1.box.mcShape.lengthDirection[1] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.e_x[2] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 0.0 else b1.box.mcShape.lengthDirection[2] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.e_x[3] = if noEvent(b1.box.mcShape.abs_n_x < 1e-10) then 0.0 else b1.box.mcShape.lengthDirection[3] / b1.box.mcShape.abs_n_x;
//   Real b1.box.mcShape.n_z_aux[1] = b1.box.mcShape.e_x[2] * b1.box.mcShape.widthDirection[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.widthDirection[2];
//   Real b1.box.mcShape.n_z_aux[2] = b1.box.mcShape.e_x[3] * b1.box.mcShape.widthDirection[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.widthDirection[3];
//   Real b1.box.mcShape.n_z_aux[3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.widthDirection[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.widthDirection[1];
//   Real b1.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[1];
//   Real b1.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[2];
//   Real b1.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]},if noEvent(b1.box.mcShape.n_z_aux[1] ^ 2.0 + (b1.box.mcShape.n_z_aux[2] ^ 2.0 + b1.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b1.box.mcShape.widthDirection[1],b1.box.mcShape.widthDirection[2],b1.box.mcShape.widthDirection[3]} else if noEvent(abs(b1.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b1.box.mcShape.e_x[1],b1.box.mcShape.e_x[2],b1.box.mcShape.e_x[3]})[3];
//   Real b1.box.mcShape.e_z[1] = b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[2];
//   Real b1.box.mcShape.e_z[2] = b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[3];
//   Real b1.box.mcShape.e_z[3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[1];
//   protected output Real b1.box.mcShape.Form;
//   protected output Real b1.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b1.box.mcShape.Material;
//   protected output Real b1.box.mcShape.Extra;
//   constant Real b1.frameTranslation.pi = 3.14159265358979;
//   constant Real b1.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b1.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b1.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b1.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b1.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b1.frameTranslation.frame_a.S[1,1] = b1.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[1,2] = b1.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[1,3] = b1.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[2,1] = b1.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[2,2] = b1.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[2,3] = b1.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[3,1] = b1.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[3,2] = b1.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.S[3,3] = b1.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b1.frameTranslation.fa[1];
//   Real b1.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b1.frameTranslation.fa[2];
//   Real b1.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b1.frameTranslation.fa[3];
//   Real b1.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b1.frameTranslation.ta[1];
//   Real b1.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b1.frameTranslation.ta[2];
//   Real b1.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b1.frameTranslation.ta[3];
//   output Real b1.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b1.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b1.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b1.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b1.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b1.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b1.frameTranslation.frame_b.S[1,1] = b1.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[1,2] = b1.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[1,3] = b1.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[2,1] = b1.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[2,2] = b1.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[2,3] = b1.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[3,1] = b1.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[3,2] = b1.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.S[3,3] = b1.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b1.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b1.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b1.frameTranslation.fb[1];
//   Real b1.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b1.frameTranslation.fb[2];
//   Real b1.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b1.frameTranslation.fb[3];
//   Real b1.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b1.frameTranslation.tb[1];
//   Real b1.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b1.frameTranslation.tb[2];
//   Real b1.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b1.frameTranslation.tb[3];
//   protected Real b1.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b1.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b1.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b1.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b1.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b1.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b1.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b1.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b1.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b1.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b1.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b1.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b1.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b1.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b1.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b1.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b1.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b1.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b1.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b1.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b1.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b1.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b1.frameTranslation.r[1](quantity = "Length", unit = "m") = b1.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b1.frameTranslation.r[2](quantity = "Length", unit = "m") = b1.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b1.frameTranslation.r[3](quantity = "Length", unit = "m") = b1.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b1.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b1.body.frame_a.r0[1](quantity = "Length", unit = "m") = b1.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.body.frame_a.r0[2](quantity = "Length", unit = "m") = b1.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b1.body.frame_a.r0[3](quantity = "Length", unit = "m") = b1.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b1.body.frame_a.S[1,1] = b1.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[1,2] = b1.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[1,3] = b1.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[2,1] = b1.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[2,2] = b1.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[2,3] = b1.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[3,1] = b1.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[3,2] = b1.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.S[3,3] = b1.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b1.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b1.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b1.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b1.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b1.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b1.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b1.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b1.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b1.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b1.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b1.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b1.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b1.body.frame_a.f[1](quantity = "Force", unit = "N") = b1.body.fa[1];
//   Real b1.body.frame_a.f[2](quantity = "Force", unit = "N") = b1.body.fa[2];
//   Real b1.body.frame_a.f[3](quantity = "Force", unit = "N") = b1.body.fa[3];
//   Real b1.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b1.body.ta[1];
//   Real b1.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b1.body.ta[2];
//   Real b1.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b1.body.ta[3];
//   protected Real b1.body.Sa[1,1](start = 1.0);
//   protected Real b1.body.Sa[1,2](start = 0.0);
//   protected Real b1.body.Sa[1,3](start = 0.0);
//   protected Real b1.body.Sa[2,1](start = 0.0);
//   protected Real b1.body.Sa[2,2](start = 1.0);
//   protected Real b1.body.Sa[2,3](start = 0.0);
//   protected Real b1.body.Sa[3,1](start = 0.0);
//   protected Real b1.body.Sa[3,2](start = 0.0);
//   protected Real b1.body.Sa[3,3](start = 1.0);
//   protected Real b1.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b1.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b1.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b1.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b1.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b1.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b1.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b1.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b1.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b1.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b1.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b1.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b1.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b1.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b1.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b1.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b1.body.rCM[1](quantity = "Length", unit = "m");
//   Real b1.body.rCM[2](quantity = "Length", unit = "m");
//   Real b1.body.rCM[3](quantity = "Length", unit = "m");
//   Real b1.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b1.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   constant Real j2.pi = 3.14159265358979;
//   constant Real j2.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j2.frame_a.r0[1](quantity = "Length", unit = "m") = j2.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j2.frame_a.r0[2](quantity = "Length", unit = "m") = j2.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j2.frame_a.r0[3](quantity = "Length", unit = "m") = j2.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j2.frame_a.S[1,1] = j2.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[1,2] = j2.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[1,3] = j2.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[2,1] = j2.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[2,2] = j2.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[2,3] = j2.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[3,1] = j2.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[3,2] = j2.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.S[3,3] = j2.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j2.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j2.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j2.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j2.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j2.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j2.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j2.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j2.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j2.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_a.f[1](quantity = "Force", unit = "N") = j2.fa[1];
//   Real j2.frame_a.f[2](quantity = "Force", unit = "N") = j2.fa[2];
//   Real j2.frame_a.f[3](quantity = "Force", unit = "N") = j2.fa[3];
//   Real j2.frame_a.t[1](quantity = "Torque", unit = "N.m") = j2.ta[1];
//   Real j2.frame_a.t[2](quantity = "Torque", unit = "N.m") = j2.ta[2];
//   Real j2.frame_a.t[3](quantity = "Torque", unit = "N.m") = j2.ta[3];
//   input Real j2.frame_b.r0[1](quantity = "Length", unit = "m") = j2.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j2.frame_b.r0[2](quantity = "Length", unit = "m") = j2.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j2.frame_b.r0[3](quantity = "Length", unit = "m") = j2.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j2.frame_b.S[1,1] = j2.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[1,2] = j2.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[1,3] = j2.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[2,1] = j2.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[2,2] = j2.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[2,3] = j2.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[3,1] = j2.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[3,2] = j2.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.S[3,3] = j2.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j2.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j2.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j2.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j2.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j2.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j2.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_b.f[1](quantity = "Force", unit = "N") = -j2.fb[1];
//   Real j2.frame_b.f[2](quantity = "Force", unit = "N") = -j2.fb[2];
//   Real j2.frame_b.f[3](quantity = "Force", unit = "N") = -j2.fb[3];
//   Real j2.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j2.tb[1];
//   Real j2.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j2.tb[2];
//   Real j2.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j2.tb[3];
//   protected Real j2.Sa[1,1](start = 1.0);
//   protected Real j2.Sa[1,2](start = 0.0);
//   protected Real j2.Sa[1,3](start = 0.0);
//   protected Real j2.Sa[2,1](start = 0.0);
//   protected Real j2.Sa[2,2](start = 1.0);
//   protected Real j2.Sa[2,3](start = 0.0);
//   protected Real j2.Sa[3,1](start = 0.0);
//   protected Real j2.Sa[3,2](start = 0.0);
//   protected Real j2.Sa[3,3](start = 1.0);
//   protected Real j2.r0a[1](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j2.r0a[2](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j2.r0a[3](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j2.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j2.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j2.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j2.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.fa[1](quantity = "Force", unit = "N");
//   protected Real j2.fa[2](quantity = "Force", unit = "N");
//   protected Real j2.fa[3](quantity = "Force", unit = "N");
//   protected Real j2.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j2.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j2.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j2.Sb[1,1](start = 1.0);
//   protected Real j2.Sb[1,2](start = 0.0);
//   protected Real j2.Sb[1,3](start = 0.0);
//   protected Real j2.Sb[2,1](start = 0.0);
//   protected Real j2.Sb[2,2](start = 1.0);
//   protected Real j2.Sb[2,3](start = 0.0);
//   protected Real j2.Sb[3,1](start = 0.0);
//   protected Real j2.Sb[3,2](start = 0.0);
//   protected Real j2.Sb[3,3](start = 1.0);
//   protected Real j2.r0b[1](quantity = "Length", unit = "m");
//   protected Real j2.r0b[2](quantity = "Length", unit = "m");
//   protected Real j2.r0b[3](quantity = "Length", unit = "m");
//   protected Real j2.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j2.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j2.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j2.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j2.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j2.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j2.fb[1](quantity = "Force", unit = "N");
//   protected Real j2.fb[2](quantity = "Force", unit = "N");
//   protected Real j2.fb[3](quantity = "Force", unit = "N");
//   protected Real j2.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j2.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j2.tb[3](quantity = "Torque", unit = "N.m");
//   Real j2.S_rel[1,1];
//   Real j2.S_rel[1,2];
//   Real j2.S_rel[1,3];
//   Real j2.S_rel[2,1];
//   Real j2.S_rel[2,2];
//   Real j2.S_rel[2,3];
//   Real j2.S_rel[3,1];
//   Real j2.S_rel[3,2];
//   Real j2.S_rel[3,3];
//   Real j2.r_rela[1](quantity = "Length", unit = "m");
//   Real j2.r_rela[2](quantity = "Length", unit = "m");
//   Real j2.r_rela[3](quantity = "Length", unit = "m");
//   Real j2.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j2.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j2.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j2.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j2.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j2.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j2.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j2.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j2.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j2.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j2.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j2.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j2.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real j2.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real j2.vaux[3](quantity = "Velocity", unit = "m/s");
//   parameter Real j2.L(quantity = "Length", unit = "m") = 1.1 "Length of the rod";
//   parameter Real j2.na[1] = 1.0 "orthogonal to y-axis of cut-frame C";
//   parameter Real j2.na[2] = 0.0 "orthogonal to y-axis of cut-frame C";
//   parameter Real j2.na[3] = 0.0 "orthogonal to y-axis of cut-frame C";
//   Real j2.fRod(quantity = "Force", unit = "N") "Constraint force in direction of the rod";
//   output Real j2.frame_c.r0[1](quantity = "Length", unit = "m") = j2.r0c[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j2.frame_c.r0[2](quantity = "Length", unit = "m") = j2.r0c[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j2.frame_c.r0[3](quantity = "Length", unit = "m") = j2.r0c[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j2.frame_c.S[1,1] = j2.Sc[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[1,2] = j2.Sc[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[1,3] = j2.Sc[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[2,1] = j2.Sc[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[2,2] = j2.Sc[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[2,3] = j2.Sc[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[3,1] = j2.Sc[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[3,2] = j2.Sc[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.S[3,3] = j2.Sc[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j2.frame_c.v[1](quantity = "Velocity", unit = "m/s") = j2.vc[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_c.v[2](quantity = "Velocity", unit = "m/s") = j2.vc[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_c.v[3](quantity = "Velocity", unit = "m/s") = j2.vc[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j2.frame_c.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wc[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_c.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wc[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_c.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j2.wc[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j2.frame_c.a[1](quantity = "Acceleration", unit = "m/s2") = j2.ac[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_c.a[2](quantity = "Acceleration", unit = "m/s2") = j2.ac[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_c.a[3](quantity = "Acceleration", unit = "m/s2") = j2.ac[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j2.frame_c.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zc[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_c.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zc[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_c.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j2.zc[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j2.frame_c.f[1](quantity = "Force", unit = "N") = -j2.fc[1];
//   Real j2.frame_c.f[2](quantity = "Force", unit = "N") = -j2.fc[2];
//   Real j2.frame_c.f[3](quantity = "Force", unit = "N") = -j2.fc[3];
//   Real j2.frame_c.t[1](quantity = "Torque", unit = "N.m") = -j2.tc[1];
//   Real j2.frame_c.t[2](quantity = "Torque", unit = "N.m") = -j2.tc[2];
//   Real j2.frame_c.t[3](quantity = "Torque", unit = "N.m") = -j2.tc[3];
//   protected Real j2.Sc[1,1];
//   protected Real j2.Sc[1,2];
//   protected Real j2.Sc[1,3];
//   protected Real j2.Sc[2,1];
//   protected Real j2.Sc[2,2];
//   protected Real j2.Sc[2,3];
//   protected Real j2.Sc[3,1];
//   protected Real j2.Sc[3,2];
//   protected Real j2.Sc[3,3];
//   protected Real j2.r0c[1];
//   protected Real j2.r0c[2];
//   protected Real j2.r0c[3];
//   protected Real j2.vc[1];
//   protected Real j2.vc[2];
//   protected Real j2.vc[3];
//   protected Real j2.wc[1];
//   protected Real j2.wc[2];
//   protected Real j2.wc[3];
//   protected Real j2.ac[1];
//   protected Real j2.ac[2];
//   protected Real j2.ac[3];
//   protected Real j2.zc[1];
//   protected Real j2.zc[2];
//   protected Real j2.zc[3];
//   protected Real j2.fc[1];
//   protected Real j2.fc[2];
//   protected Real j2.fc[3];
//   protected Real j2.tc[1];
//   protected Real j2.tc[2];
//   protected Real j2.tc[3];
//   protected Real j2.fb_a[1] "cut-force fb resolved in cut a";
//   protected Real j2.fb_a[2] "cut-force fb resolved in cut a";
//   protected Real j2.fb_a[3] "cut-force fb resolved in cut a";
//   protected Real j2.b1[1];
//   protected Real j2.b1[2];
//   protected Real j2.b1[3];
//   protected Real j2.bd[1];
//   protected Real j2.bd[2];
//   protected Real j2.bd[3];
//   protected Real j2.bdd[1];
//   protected Real j2.bdd[2];
//   protected Real j2.bdd[3];
//   protected Real j2.normb;
//   protected Real j2.bb;
//   protected Real j2.nx[1];
//   protected Real j2.nx[2];
//   protected Real j2.nx[3];
//   protected Real j2.ny[1];
//   protected Real j2.ny[2];
//   protected Real j2.ny[3];
//   protected Real j2.nz[1];
//   protected Real j2.nz[2];
//   protected Real j2.nz[3];
//   protected Real j2.S_relc[1,1];
//   protected Real j2.S_relc[1,2];
//   protected Real j2.S_relc[1,3];
//   protected Real j2.S_relc[2,1];
//   protected Real j2.S_relc[2,2];
//   protected Real j2.S_relc[2,3];
//   protected Real j2.S_relc[3,1];
//   protected Real j2.S_relc[3,2];
//   protected Real j2.S_relc[3,3];
//   protected Real j2.nxd[1];
//   protected Real j2.nxd[2];
//   protected Real j2.nxd[3];
//   protected Real j2.nyd[1];
//   protected Real j2.nyd[2];
//   protected Real j2.nyd[3];
//   protected Real j2.nzd[1];
//   protected Real j2.nzd[2];
//   protected Real j2.nzd[3];
//   protected Real j2.w_relc[1];
//   protected Real j2.w_relc[2];
//   protected Real j2.w_relc[3];
//   protected Real j2.nxdd[1];
//   protected Real j2.nxdd[2];
//   protected Real j2.nxdd[3];
//   protected Real j2.nydd[1];
//   protected Real j2.nydd[2];
//   protected Real j2.nydd[3];
//   protected Real j2.nzdd[1];
//   protected Real j2.nzdd[2];
//   protected Real j2.nzdd[3];
//   protected Real j2.z_relc[1];
//   protected Real j2.z_relc[2];
//   protected Real j2.z_relc[3];
//   protected Real j2.constraintResidue;
//   protected Real j2.constraintResidue_d;
//   protected Real j2.constraintResidue_dd;
//   constant Real b2.pi = 3.14159265358979;
//   constant Real b2.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b2.frame_a.r0[1](quantity = "Length", unit = "m") = b2.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.frame_a.r0[2](quantity = "Length", unit = "m") = b2.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.frame_a.r0[3](quantity = "Length", unit = "m") = b2.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b2.frame_a.S[1,1] = b2.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[1,2] = b2.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[1,3] = b2.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[2,1] = b2.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[2,2] = b2.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[2,3] = b2.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[3,1] = b2.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[3,2] = b2.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.S[3,3] = b2.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b2.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b2.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b2.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b2.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b2.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b2.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_a.f[1](quantity = "Force", unit = "N") = b2.fa[1];
//   Real b2.frame_a.f[2](quantity = "Force", unit = "N") = b2.fa[2];
//   Real b2.frame_a.f[3](quantity = "Force", unit = "N") = b2.fa[3];
//   Real b2.frame_a.t[1](quantity = "Torque", unit = "N.m") = b2.ta[1];
//   Real b2.frame_a.t[2](quantity = "Torque", unit = "N.m") = b2.ta[2];
//   Real b2.frame_a.t[3](quantity = "Torque", unit = "N.m") = b2.ta[3];
//   output Real b2.frame_b.r0[1](quantity = "Length", unit = "m") = b2.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b2.frame_b.r0[2](quantity = "Length", unit = "m") = b2.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b2.frame_b.r0[3](quantity = "Length", unit = "m") = b2.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b2.frame_b.S[1,1] = b2.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[1,2] = b2.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[1,3] = b2.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[2,1] = b2.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[2,2] = b2.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[2,3] = b2.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[3,1] = b2.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[3,2] = b2.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.S[3,3] = b2.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b2.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b2.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b2.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b2.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b2.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b2.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frame_b.f[1](quantity = "Force", unit = "N") = -b2.fb[1];
//   Real b2.frame_b.f[2](quantity = "Force", unit = "N") = -b2.fb[2];
//   Real b2.frame_b.f[3](quantity = "Force", unit = "N") = -b2.fb[3];
//   Real b2.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b2.tb[1];
//   Real b2.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b2.tb[2];
//   Real b2.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b2.tb[3];
//   protected Real b2.Sa[1,1](start = 1.0);
//   protected Real b2.Sa[1,2](start = 0.0);
//   protected Real b2.Sa[1,3](start = 0.0);
//   protected Real b2.Sa[2,1](start = 0.0);
//   protected Real b2.Sa[2,2](start = 1.0);
//   protected Real b2.Sa[2,3](start = 0.0);
//   protected Real b2.Sa[3,1](start = 0.0);
//   protected Real b2.Sa[3,2](start = 0.0);
//   protected Real b2.Sa[3,3](start = 1.0);
//   protected Real b2.r0a[1](quantity = "Length", unit = "m");
//   protected Real b2.r0a[2](quantity = "Length", unit = "m");
//   protected Real b2.r0a[3](quantity = "Length", unit = "m");
//   protected Real b2.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b2.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.fa[1](quantity = "Force", unit = "N");
//   protected Real b2.fa[2](quantity = "Force", unit = "N");
//   protected Real b2.fa[3](quantity = "Force", unit = "N");
//   protected Real b2.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b2.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b2.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b2.Sb[1,1](start = 1.0);
//   protected Real b2.Sb[1,2](start = 0.0);
//   protected Real b2.Sb[1,3](start = 0.0);
//   protected Real b2.Sb[2,1](start = 0.0);
//   protected Real b2.Sb[2,2](start = 1.0);
//   protected Real b2.Sb[2,3](start = 0.0);
//   protected Real b2.Sb[3,1](start = 0.0);
//   protected Real b2.Sb[3,2](start = 0.0);
//   protected Real b2.Sb[3,3](start = 1.0);
//   protected Real b2.r0b[1](quantity = "Length", unit = "m");
//   protected Real b2.r0b[2](quantity = "Length", unit = "m");
//   protected Real b2.r0b[3](quantity = "Length", unit = "m");
//   protected Real b2.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b2.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.fb[1](quantity = "Force", unit = "N");
//   protected Real b2.fb[2](quantity = "Force", unit = "N");
//   protected Real b2.fb[3](quantity = "Force", unit = "N");
//   protected Real b2.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b2.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b2.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b2.r[1](quantity = "Length", unit = "m") = 1.1 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b2.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b2.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b2.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b2.Axis[1](quantity = "Length", unit = "m") = b2.r[1] - b2.r0[1] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b2.Axis[2](quantity = "Length", unit = "m") = b2.r[2] - b2.r0[2] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b2.Axis[3](quantity = "Length", unit = "m") = b2.r[3] - b2.r0[3] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b2.Length(quantity = "Length", unit = "m") = sqrt(b2.Axis[1] ^ 2.0 + (b2.Axis[2] ^ 2.0 + b2.Axis[3] ^ 2.0)) "Length of cylinder";
//   parameter Real b2.Radius(quantity = "Length", unit = "m", min = 0.0) = 0.02 "Radius of cylinder";
//   parameter Real b2.InnerRadius(quantity = "Length", unit = "m", min = 0.0, max = b2.Radius) = 0.0 "Inner radius of cylinder";
//   parameter Real b2.rho(min = 0.0) = 7.7 "Density of material [g/cm^3]";
//   parameter Real b2.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real b2.Material[2] = 1.0 "Color and specular coefficient";
//   parameter Real b2.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real b2.Material[4] = 0.5 "Color and specular coefficient";
//   Real b2.Scyl[1,1];
//   Real b2.Scyl[1,2];
//   Real b2.Scyl[1,3];
//   Real b2.Scyl[2,1];
//   Real b2.Scyl[2,2];
//   Real b2.Scyl[2,3];
//   Real b2.Scyl[3,1];
//   Real b2.Scyl[3,2];
//   Real b2.Scyl[3,3];
//   Real b2.mo(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b2.mi(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b2.I22(quantity = "MomentOfInertia", unit = "kg.m2");
//   parameter Real b2.box.r0[1] = b2.r0[1] "Origin of visual object.";
//   parameter Real b2.box.r0[2] = b2.r0[2] "Origin of visual object.";
//   parameter Real b2.box.r0[3] = b2.r0[3] "Origin of visual object.";
//   parameter Real b2.box.Length = b2.Length "Length of visual object.";
//   parameter Real b2.box.Width = 2.0 * b2.Radius "Width of visual object.";
//   parameter Real b2.box.Height = 2.0 * b2.Radius "Height of visual object.";
//   parameter Real b2.box.LengthDirection[1] = b2.Axis[1] "Vector in length direction.";
//   parameter Real b2.box.LengthDirection[2] = b2.Axis[2] "Vector in length direction.";
//   parameter Real b2.box.LengthDirection[3] = b2.Axis[3] "Vector in length direction.";
//   parameter Real b2.box.WidthDirection[1] = 0.0 "Vector in width direction.";
//   parameter Real b2.box.WidthDirection[2] = 1.0 "Vector in width direction.";
//   parameter Real b2.box.WidthDirection[3] = 0.0 "Vector in width direction.";
//   parameter String b2.box.Shape = "pipe" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b2.box.Material[1] = b2.Material[1] "Color and specular coefficient.";
//   parameter Real b2.box.Material[2] = b2.Material[2] "Color and specular coefficient.";
//   parameter Real b2.box.Material[3] = b2.Material[3] "Color and specular coefficient.";
//   parameter Real b2.box.Material[4] = b2.Material[4] "Color and specular coefficient.";
//   parameter Real b2.box.Extra = b2.InnerRadius / b2.Radius "Additional size data for some of the shape types";
//   input Real b2.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b2.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b2.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b2.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b2.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b2.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b2.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b2.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b2.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b2.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b2.box.r[1] "Position of visual object.";
//   input Real b2.box.r[2] "Position of visual object.";
//   input Real b2.box.r[3] "Position of visual object.";
//   Real b2.box.nLength[1];
//   Real b2.box.nLength[2];
//   Real b2.box.nLength[3];
//   Real b2.box.nWidth[1];
//   Real b2.box.nWidth[2];
//   Real b2.box.nWidth[3];
//   Real b2.box.nHeight[1];
//   Real b2.box.nHeight[2];
//   Real b2.box.nHeight[3];
//   parameter String b2.box.mcShape.shapeType = b2.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b2.box.mcShape.r[1](quantity = "Length", unit = "m") = b2.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.box.mcShape.r[2](quantity = "Length", unit = "m") = b2.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.box.mcShape.r[3](quantity = "Length", unit = "m") = b2.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b2.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = b2.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = b2.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = b2.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b2.box.mcShape.lengthDirection[1] = b2.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b2.box.mcShape.lengthDirection[2] = b2.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b2.box.mcShape.lengthDirection[3] = b2.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b2.box.mcShape.widthDirection[1] = b2.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b2.box.mcShape.widthDirection[2] = b2.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b2.box.mcShape.widthDirection[3] = b2.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b2.box.mcShape.length(quantity = "Length", unit = "m") = b2.box.Length "Length of visual object";
//   input Real b2.box.mcShape.width(quantity = "Length", unit = "m") = b2.box.Width "Width of visual object";
//   input Real b2.box.mcShape.height(quantity = "Length", unit = "m") = b2.box.Height "Height of visual object";
//   input Real b2.box.mcShape.extra = b2.box.Extra "Additional size data for some of the shape types";
//   input Real b2.box.mcShape.color[1] = 255.0 * b2.box.Material[1] "Color of shape";
//   input Real b2.box.mcShape.color[2] = 255.0 * b2.box.Material[2] "Color of shape";
//   input Real b2.box.mcShape.color[3] = 255.0 * b2.box.Material[3] "Color of shape";
//   input Real b2.box.mcShape.specularCoefficient = b2.box.Material[4];
//   input Real b2.box.mcShape.S[1,1] = b2.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[1,2] = b2.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[1,3] = b2.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[2,1] = b2.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[2,2] = b2.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[2,3] = b2.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[3,1] = b2.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[3,2] = b2.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b2.box.mcShape.S[3,3] = b2.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[1,1] = b2.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[1,2] = b2.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[1,3] = b2.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[2,1] = b2.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[2,2] = b2.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[2,3] = b2.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[3,1] = b2.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[3,2] = b2.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b2.box.mcShape.Sshape[3,3] = b2.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b2.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b2.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b2.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b2.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b2.box.mcShape.abs_n_x = sqrt(b2.box.mcShape.lengthDirection[1] ^ 2.0 + (b2.box.mcShape.lengthDirection[2] ^ 2.0 + b2.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b2.box.mcShape.e_x[1] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 1.0 else b2.box.mcShape.lengthDirection[1] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.e_x[2] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 0.0 else b2.box.mcShape.lengthDirection[2] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.e_x[3] = if noEvent(b2.box.mcShape.abs_n_x < 1e-10) then 0.0 else b2.box.mcShape.lengthDirection[3] / b2.box.mcShape.abs_n_x;
//   Real b2.box.mcShape.n_z_aux[1] = b2.box.mcShape.e_x[2] * b2.box.mcShape.widthDirection[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.widthDirection[2];
//   Real b2.box.mcShape.n_z_aux[2] = b2.box.mcShape.e_x[3] * b2.box.mcShape.widthDirection[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.widthDirection[3];
//   Real b2.box.mcShape.n_z_aux[3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.widthDirection[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.widthDirection[1];
//   Real b2.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[1];
//   Real b2.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[2];
//   Real b2.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]},if noEvent(b2.box.mcShape.n_z_aux[1] ^ 2.0 + (b2.box.mcShape.n_z_aux[2] ^ 2.0 + b2.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b2.box.mcShape.widthDirection[1],b2.box.mcShape.widthDirection[2],b2.box.mcShape.widthDirection[3]} else if noEvent(abs(b2.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b2.box.mcShape.e_x[1],b2.box.mcShape.e_x[2],b2.box.mcShape.e_x[3]})[3];
//   Real b2.box.mcShape.e_z[1] = b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[2];
//   Real b2.box.mcShape.e_z[2] = b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[3];
//   Real b2.box.mcShape.e_z[3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[1];
//   protected output Real b2.box.mcShape.Form;
//   protected output Real b2.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b2.box.mcShape.Material;
//   protected output Real b2.box.mcShape.Extra;
//   constant Real b2.frameTranslation.pi = 3.14159265358979;
//   constant Real b2.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b2.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b2.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b2.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b2.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b2.frameTranslation.frame_a.S[1,1] = b2.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[1,2] = b2.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[1,3] = b2.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[2,1] = b2.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[2,2] = b2.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[2,3] = b2.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[3,1] = b2.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[3,2] = b2.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.S[3,3] = b2.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b2.frameTranslation.fa[1];
//   Real b2.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b2.frameTranslation.fa[2];
//   Real b2.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b2.frameTranslation.fa[3];
//   Real b2.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b2.frameTranslation.ta[1];
//   Real b2.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b2.frameTranslation.ta[2];
//   Real b2.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b2.frameTranslation.ta[3];
//   output Real b2.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b2.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b2.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b2.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b2.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b2.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b2.frameTranslation.frame_b.S[1,1] = b2.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[1,2] = b2.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[1,3] = b2.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[2,1] = b2.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[2,2] = b2.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[2,3] = b2.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[3,1] = b2.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[3,2] = b2.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.S[3,3] = b2.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b2.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b2.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b2.frameTranslation.fb[1];
//   Real b2.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b2.frameTranslation.fb[2];
//   Real b2.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b2.frameTranslation.fb[3];
//   Real b2.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b2.frameTranslation.tb[1];
//   Real b2.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b2.frameTranslation.tb[2];
//   Real b2.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b2.frameTranslation.tb[3];
//   protected Real b2.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b2.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b2.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b2.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b2.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b2.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b2.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b2.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b2.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b2.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b2.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b2.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b2.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b2.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b2.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b2.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b2.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b2.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b2.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b2.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b2.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b2.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b2.frameTranslation.r[1](quantity = "Length", unit = "m") = b2.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b2.frameTranslation.r[2](quantity = "Length", unit = "m") = b2.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b2.frameTranslation.r[3](quantity = "Length", unit = "m") = b2.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b2.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b2.body.frame_a.r0[1](quantity = "Length", unit = "m") = b2.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.body.frame_a.r0[2](quantity = "Length", unit = "m") = b2.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b2.body.frame_a.r0[3](quantity = "Length", unit = "m") = b2.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b2.body.frame_a.S[1,1] = b2.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[1,2] = b2.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[1,3] = b2.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[2,1] = b2.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[2,2] = b2.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[2,3] = b2.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[3,1] = b2.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[3,2] = b2.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.S[3,3] = b2.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b2.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b2.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b2.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b2.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b2.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b2.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b2.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b2.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b2.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b2.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b2.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b2.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b2.body.frame_a.f[1](quantity = "Force", unit = "N") = b2.body.fa[1];
//   Real b2.body.frame_a.f[2](quantity = "Force", unit = "N") = b2.body.fa[2];
//   Real b2.body.frame_a.f[3](quantity = "Force", unit = "N") = b2.body.fa[3];
//   Real b2.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b2.body.ta[1];
//   Real b2.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b2.body.ta[2];
//   Real b2.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b2.body.ta[3];
//   protected Real b2.body.Sa[1,1](start = 1.0);
//   protected Real b2.body.Sa[1,2](start = 0.0);
//   protected Real b2.body.Sa[1,3](start = 0.0);
//   protected Real b2.body.Sa[2,1](start = 0.0);
//   protected Real b2.body.Sa[2,2](start = 1.0);
//   protected Real b2.body.Sa[2,3](start = 0.0);
//   protected Real b2.body.Sa[3,1](start = 0.0);
//   protected Real b2.body.Sa[3,2](start = 0.0);
//   protected Real b2.body.Sa[3,3](start = 1.0);
//   protected Real b2.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b2.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b2.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b2.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b2.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b2.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b2.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b2.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b2.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b2.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b2.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b2.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b2.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b2.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b2.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b2.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b2.body.rCM[1](quantity = "Length", unit = "m");
//   Real b2.body.rCM[2](quantity = "Length", unit = "m");
//   Real b2.body.rCM[3](quantity = "Length", unit = "m");
//   Real b2.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b2.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   constant Real b3.pi = 3.14159265358979;
//   constant Real b3.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b3.frame_a.r0[1](quantity = "Length", unit = "m") = b3.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.frame_a.r0[2](quantity = "Length", unit = "m") = b3.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.frame_a.r0[3](quantity = "Length", unit = "m") = b3.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.frame_a.S[1,1] = b3.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[1,2] = b3.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[1,3] = b3.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[2,1] = b3.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[2,2] = b3.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[2,3] = b3.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[3,1] = b3.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[3,2] = b3.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.S[3,3] = b3.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b3.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b3.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b3.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b3.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b3.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b3.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_a.f[1](quantity = "Force", unit = "N") = b3.fa[1];
//   Real b3.frame_a.f[2](quantity = "Force", unit = "N") = b3.fa[2];
//   Real b3.frame_a.f[3](quantity = "Force", unit = "N") = b3.fa[3];
//   Real b3.frame_a.t[1](quantity = "Torque", unit = "N.m") = b3.ta[1];
//   Real b3.frame_a.t[2](quantity = "Torque", unit = "N.m") = b3.ta[2];
//   Real b3.frame_a.t[3](quantity = "Torque", unit = "N.m") = b3.ta[3];
//   output Real b3.frame_b.r0[1](quantity = "Length", unit = "m") = b3.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.frame_b.r0[2](quantity = "Length", unit = "m") = b3.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.frame_b.r0[3](quantity = "Length", unit = "m") = b3.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.frame_b.S[1,1] = b3.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[1,2] = b3.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[1,3] = b3.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[2,1] = b3.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[2,2] = b3.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[2,3] = b3.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[3,1] = b3.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[3,2] = b3.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.S[3,3] = b3.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b3.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b3.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b3.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b3.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b3.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b3.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.frame_b.f[1](quantity = "Force", unit = "N") = -b3.fb[1];
//   Real b3.frame_b.f[2](quantity = "Force", unit = "N") = -b3.fb[2];
//   Real b3.frame_b.f[3](quantity = "Force", unit = "N") = -b3.fb[3];
//   Real b3.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b3.tb[1];
//   Real b3.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b3.tb[2];
//   Real b3.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b3.tb[3];
//   protected Real b3.Sa[1,1](start = 1.0);
//   protected Real b3.Sa[1,2](start = 0.0);
//   protected Real b3.Sa[1,3](start = 0.0);
//   protected Real b3.Sa[2,1](start = 0.0);
//   protected Real b3.Sa[2,2](start = 1.0);
//   protected Real b3.Sa[2,3](start = 0.0);
//   protected Real b3.Sa[3,1](start = 0.0);
//   protected Real b3.Sa[3,2](start = 0.0);
//   protected Real b3.Sa[3,3](start = 1.0);
//   protected Real b3.r0a[1](quantity = "Length", unit = "m");
//   protected Real b3.r0a[2](quantity = "Length", unit = "m");
//   protected Real b3.r0a[3](quantity = "Length", unit = "m");
//   protected Real b3.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.fa[1](quantity = "Force", unit = "N");
//   protected Real b3.fa[2](quantity = "Force", unit = "N");
//   protected Real b3.fa[3](quantity = "Force", unit = "N");
//   protected Real b3.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b3.Sb[1,1](start = 1.0);
//   protected Real b3.Sb[1,2](start = 0.0);
//   protected Real b3.Sb[1,3](start = 0.0);
//   protected Real b3.Sb[2,1](start = 0.0);
//   protected Real b3.Sb[2,2](start = 1.0);
//   protected Real b3.Sb[2,3](start = 0.0);
//   protected Real b3.Sb[3,1](start = 0.0);
//   protected Real b3.Sb[3,2](start = 0.0);
//   protected Real b3.Sb[3,3](start = 1.0);
//   protected Real b3.r0b[1](quantity = "Length", unit = "m");
//   protected Real b3.r0b[2](quantity = "Length", unit = "m");
//   protected Real b3.r0b[3](quantity = "Length", unit = "m");
//   protected Real b3.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.fb[1](quantity = "Force", unit = "N");
//   protected Real b3.fb[2](quantity = "Force", unit = "N");
//   protected Real b3.fb[3](quantity = "Force", unit = "N");
//   protected Real b3.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b3.r[1](quantity = "Length", unit = "m") = -0.2 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real b3.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real b3.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real b3.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real b3.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real b3.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real b3.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String b3.Shape = "box" "Name of shape (see info text)";
//   parameter Real b3.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b3.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b3.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b3.LengthDirection[1](quantity = "Length", unit = "m") = b3.r[1] - b3.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real b3.LengthDirection[2](quantity = "Length", unit = "m") = b3.r[2] - b3.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real b3.LengthDirection[3](quantity = "Length", unit = "m") = b3.r[3] - b3.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real b3.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b3.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b3.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b3.Length(quantity = "Length", unit = "m") = sqrt((b3.r[1] - b3.r0[1]) ^ 2.0 + ((b3.r[2] - b3.r0[2]) ^ 2.0 + (b3.r[3] - b3.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real b3.Width(quantity = "Length", unit = "m") = 0.04 "Width of shape";
//   parameter Real b3.Height(quantity = "Length", unit = "m") = 0.04 "Height of shape";
//   parameter Real b3.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real b3.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real b3.Material[3] = 1.0 "Color and specular coefficient";
//   parameter Real b3.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real b3.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real b3.body.pi = 3.14159265358979;
//   constant Real b3.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b3.body.frame_a.r0[1](quantity = "Length", unit = "m") = b3.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.frame_a.r0[2](quantity = "Length", unit = "m") = b3.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.frame_a.r0[3](quantity = "Length", unit = "m") = b3.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.body.frame_a.S[1,1] = b3.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[1,2] = b3.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[1,3] = b3.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[2,1] = b3.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[2,2] = b3.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[2,3] = b3.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[3,1] = b3.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[3,2] = b3.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.S[3,3] = b3.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b3.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b3.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b3.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b3.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b3.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b3.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_a.f[1](quantity = "Force", unit = "N") = b3.body.fa[1];
//   Real b3.body.frame_a.f[2](quantity = "Force", unit = "N") = b3.body.fa[2];
//   Real b3.body.frame_a.f[3](quantity = "Force", unit = "N") = b3.body.fa[3];
//   Real b3.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b3.body.ta[1];
//   Real b3.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b3.body.ta[2];
//   Real b3.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b3.body.ta[3];
//   output Real b3.body.frame_b.r0[1](quantity = "Length", unit = "m") = b3.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.body.frame_b.r0[2](quantity = "Length", unit = "m") = b3.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.body.frame_b.r0[3](quantity = "Length", unit = "m") = b3.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.body.frame_b.S[1,1] = b3.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[1,2] = b3.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[1,3] = b3.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[2,1] = b3.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[2,2] = b3.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[2,3] = b3.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[3,1] = b3.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[3,2] = b3.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.S[3,3] = b3.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b3.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b3.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b3.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b3.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b3.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b3.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frame_b.f[1](quantity = "Force", unit = "N") = -b3.body.fb[1];
//   Real b3.body.frame_b.f[2](quantity = "Force", unit = "N") = -b3.body.fb[2];
//   Real b3.body.frame_b.f[3](quantity = "Force", unit = "N") = -b3.body.fb[3];
//   Real b3.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b3.body.tb[1];
//   Real b3.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b3.body.tb[2];
//   Real b3.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b3.body.tb[3];
//   protected Real b3.body.Sa[1,1](start = 1.0);
//   protected Real b3.body.Sa[1,2](start = 0.0);
//   protected Real b3.body.Sa[1,3](start = 0.0);
//   protected Real b3.body.Sa[2,1](start = 0.0);
//   protected Real b3.body.Sa[2,2](start = 1.0);
//   protected Real b3.body.Sa[2,3](start = 0.0);
//   protected Real b3.body.Sa[3,1](start = 0.0);
//   protected Real b3.body.Sa[3,2](start = 0.0);
//   protected Real b3.body.Sa[3,3](start = 1.0);
//   protected Real b3.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b3.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b3.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b3.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b3.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b3.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b3.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.Sb[1,1](start = 1.0);
//   protected Real b3.body.Sb[1,2](start = 0.0);
//   protected Real b3.body.Sb[1,3](start = 0.0);
//   protected Real b3.body.Sb[2,1](start = 0.0);
//   protected Real b3.body.Sb[2,2](start = 1.0);
//   protected Real b3.body.Sb[2,3](start = 0.0);
//   protected Real b3.body.Sb[3,1](start = 0.0);
//   protected Real b3.body.Sb[3,2](start = 0.0);
//   protected Real b3.body.Sb[3,3](start = 1.0);
//   protected Real b3.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real b3.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real b3.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real b3.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.fb[1](quantity = "Force", unit = "N");
//   protected Real b3.body.fb[2](quantity = "Force", unit = "N");
//   protected Real b3.body.fb[3](quantity = "Force", unit = "N");
//   protected Real b3.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b3.body.r[1](quantity = "Length", unit = "m") = b3.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.body.r[2](quantity = "Length", unit = "m") = b3.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.body.r[3](quantity = "Length", unit = "m") = b3.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b3.body.rCM[1](quantity = "Length", unit = "m") = b3.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.body.rCM[2](quantity = "Length", unit = "m") = b3.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.body.rCM[3](quantity = "Length", unit = "m") = b3.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b3.body.m(quantity = "Mass", unit = "kg", min = 0.0) = b3.m "Mass of body";
//   parameter Real b3.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I11 "(1,1) element of inertia tensor";
//   parameter Real b3.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I22 "(2,2) element of inertia tensor";
//   parameter Real b3.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I33 "(3,3) element of inertia tensor";
//   parameter Real b3.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I21 "(2,1) element of inertia tensor";
//   parameter Real b3.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I31 "(3,1) element of inertia tensor";
//   parameter Real b3.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = b3.I32 "(3,2) element of inertia tensor";
//   constant Real b3.body.frameTranslation.pi = 3.14159265358979;
//   constant Real b3.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b3.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.body.frameTranslation.frame_a.S[1,1] = b3.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[1,2] = b3.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[1,3] = b3.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[2,1] = b3.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[2,2] = b3.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[2,3] = b3.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[3,1] = b3.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[3,2] = b3.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.S[3,3] = b3.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b3.body.frameTranslation.fa[1];
//   Real b3.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b3.body.frameTranslation.fa[2];
//   Real b3.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b3.body.frameTranslation.fa[3];
//   Real b3.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b3.body.frameTranslation.ta[1];
//   Real b3.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b3.body.frameTranslation.ta[2];
//   Real b3.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b3.body.frameTranslation.ta[3];
//   output Real b3.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b3.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b3.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.body.frameTranslation.frame_b.S[1,1] = b3.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[1,2] = b3.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[1,3] = b3.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[2,1] = b3.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[2,2] = b3.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[2,3] = b3.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[3,1] = b3.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[3,2] = b3.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.S[3,3] = b3.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b3.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b3.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b3.body.frameTranslation.fb[1];
//   Real b3.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b3.body.frameTranslation.fb[2];
//   Real b3.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b3.body.frameTranslation.fb[3];
//   Real b3.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b3.body.frameTranslation.tb[1];
//   Real b3.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b3.body.frameTranslation.tb[2];
//   Real b3.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b3.body.frameTranslation.tb[3];
//   protected Real b3.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b3.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b3.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b3.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b3.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b3.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b3.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b3.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b3.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b3.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b3.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b3.body.frameTranslation.r[1](quantity = "Length", unit = "m") = b3.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b3.body.frameTranslation.r[2](quantity = "Length", unit = "m") = b3.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b3.body.frameTranslation.r[3](quantity = "Length", unit = "m") = b3.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b3.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b3.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = b3.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = b3.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = b3.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.body.body.frame_a.S[1,1] = b3.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[1,2] = b3.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[1,3] = b3.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[2,1] = b3.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[2,2] = b3.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[2,3] = b3.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[3,1] = b3.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[3,2] = b3.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.S[3,3] = b3.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b3.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b3.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b3.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b3.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b3.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b3.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.body.body.frame_a.f[1](quantity = "Force", unit = "N") = b3.body.body.fa[1];
//   Real b3.body.body.frame_a.f[2](quantity = "Force", unit = "N") = b3.body.body.fa[2];
//   Real b3.body.body.frame_a.f[3](quantity = "Force", unit = "N") = b3.body.body.fa[3];
//   Real b3.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b3.body.body.ta[1];
//   Real b3.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b3.body.body.ta[2];
//   Real b3.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b3.body.body.ta[3];
//   protected Real b3.body.body.Sa[1,1](start = 1.0);
//   protected Real b3.body.body.Sa[1,2](start = 0.0);
//   protected Real b3.body.body.Sa[1,3](start = 0.0);
//   protected Real b3.body.body.Sa[2,1](start = 0.0);
//   protected Real b3.body.body.Sa[2,2](start = 1.0);
//   protected Real b3.body.body.Sa[2,3](start = 0.0);
//   protected Real b3.body.body.Sa[3,1](start = 0.0);
//   protected Real b3.body.body.Sa[3,2](start = 0.0);
//   protected Real b3.body.body.Sa[3,3](start = 1.0);
//   protected Real b3.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b3.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b3.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b3.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b3.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b3.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b3.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b3.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b3.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real b3.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real b3.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real b3.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b3.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real b3.vis.frame_a.r0[1](quantity = "Length", unit = "m") = b3.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.vis.frame_a.r0[2](quantity = "Length", unit = "m") = b3.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b3.vis.frame_a.r0[3](quantity = "Length", unit = "m") = b3.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b3.vis.frame_a.S[1,1] = b3.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[1,2] = b3.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[1,3] = b3.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[2,1] = b3.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[2,2] = b3.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[2,3] = b3.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[3,1] = b3.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[3,2] = b3.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.S[3,3] = b3.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b3.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b3.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b3.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b3.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b3.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b3.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b3.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b3.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b3.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b3.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b3.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b3.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b3.vis.frame_a.f[1](quantity = "Force", unit = "N") = b3.vis.fa[1];
//   Real b3.vis.frame_a.f[2](quantity = "Force", unit = "N") = b3.vis.fa[2];
//   Real b3.vis.frame_a.f[3](quantity = "Force", unit = "N") = b3.vis.fa[3];
//   Real b3.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = b3.vis.ta[1];
//   Real b3.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = b3.vis.ta[2];
//   Real b3.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = b3.vis.ta[3];
//   protected Real b3.vis.Sa[1,1](start = 1.0);
//   protected Real b3.vis.Sa[1,2](start = 0.0);
//   protected Real b3.vis.Sa[1,3](start = 0.0);
//   protected Real b3.vis.Sa[2,1](start = 0.0);
//   protected Real b3.vis.Sa[2,2](start = 1.0);
//   protected Real b3.vis.Sa[2,3](start = 0.0);
//   protected Real b3.vis.Sa[3,1](start = 0.0);
//   protected Real b3.vis.Sa[3,2](start = 0.0);
//   protected Real b3.vis.Sa[3,3](start = 1.0);
//   protected Real b3.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real b3.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real b3.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real b3.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b3.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b3.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b3.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b3.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b3.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b3.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real b3.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real b3.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real b3.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b3.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b3.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String b3.vis.Shape = b3.Shape "Name of shape (see info text)";
//   parameter Real b3.vis.r0[1] = b3.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real b3.vis.r0[2] = b3.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real b3.vis.r0[3] = b3.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real b3.vis.LengthDirection[1] = b3.LengthDirection[1] "Vector in length direction";
//   parameter Real b3.vis.LengthDirection[2] = b3.LengthDirection[2] "Vector in length direction";
//   parameter Real b3.vis.LengthDirection[3] = b3.LengthDirection[3] "Vector in length direction";
//   parameter Real b3.vis.WidthDirection[1] = b3.WidthDirection[1] "Vector in width direction";
//   parameter Real b3.vis.WidthDirection[2] = b3.WidthDirection[2] "Vector in width direction";
//   parameter Real b3.vis.WidthDirection[3] = b3.WidthDirection[3] "Vector in width direction";
//   parameter Real b3.vis.Length = b3.Length "Length of shape [m]";
//   parameter Real b3.vis.Width = b3.Width "Width of shape [m]";
//   parameter Real b3.vis.Height = b3.Height "Height of shape [m]";
//   parameter Real b3.vis.Material[1] = b3.Material[1] "Color and specular coefficient";
//   parameter Real b3.vis.Material[2] = b3.Material[2] "Color and specular coefficient";
//   parameter Real b3.vis.Material[3] = b3.Material[3] "Color and specular coefficient";
//   parameter Real b3.vis.Material[4] = b3.Material[4] "Color and specular coefficient";
//   parameter Real b3.vis.Extra = b3.Extra "Additional parameter for cone and pipe";
//   Real b3.vis.nLength[1];
//   Real b3.vis.nLength[2];
//   Real b3.vis.nLength[3];
//   Real b3.vis.nWidth[1];
//   Real b3.vis.nWidth[2];
//   Real b3.vis.nWidth[3];
//   Real b3.vis.nHeight[1];
//   Real b3.vis.nHeight[2];
//   Real b3.vis.nHeight[3];
//   parameter Real b3.vis.vis.r0[1] = b3.vis.r0[1] "Origin of visual object.";
//   parameter Real b3.vis.vis.r0[2] = b3.vis.r0[2] "Origin of visual object.";
//   parameter Real b3.vis.vis.r0[3] = b3.vis.r0[3] "Origin of visual object.";
//   parameter Real b3.vis.vis.Length = b3.vis.Length "Length of visual object.";
//   parameter Real b3.vis.vis.Width = b3.vis.Width "Width of visual object.";
//   parameter Real b3.vis.vis.Height = b3.vis.Height "Height of visual object.";
//   parameter Real b3.vis.vis.LengthDirection[1] = b3.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real b3.vis.vis.LengthDirection[2] = b3.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real b3.vis.vis.LengthDirection[3] = b3.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real b3.vis.vis.WidthDirection[1] = b3.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real b3.vis.vis.WidthDirection[2] = b3.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real b3.vis.vis.WidthDirection[3] = b3.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String b3.vis.vis.Shape = b3.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b3.vis.vis.Material[1] = b3.vis.Material[1] "Color and specular coefficient.";
//   parameter Real b3.vis.vis.Material[2] = b3.vis.Material[2] "Color and specular coefficient.";
//   parameter Real b3.vis.vis.Material[3] = b3.vis.Material[3] "Color and specular coefficient.";
//   parameter Real b3.vis.vis.Material[4] = b3.vis.Material[4] "Color and specular coefficient.";
//   parameter Real b3.vis.vis.Extra = b3.vis.Extra "Additional size data for some of the shape types";
//   input Real b3.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b3.vis.vis.r[1] "Position of visual object.";
//   input Real b3.vis.vis.r[2] "Position of visual object.";
//   input Real b3.vis.vis.r[3] "Position of visual object.";
//   Real b3.vis.vis.nLength[1];
//   Real b3.vis.vis.nLength[2];
//   Real b3.vis.vis.nLength[3];
//   Real b3.vis.vis.nWidth[1];
//   Real b3.vis.vis.nWidth[2];
//   Real b3.vis.vis.nWidth[3];
//   Real b3.vis.vis.nHeight[1];
//   Real b3.vis.vis.nHeight[2];
//   Real b3.vis.vis.nHeight[3];
//   parameter String b3.vis.vis.mcShape.shapeType = b3.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b3.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = b3.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b3.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = b3.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b3.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = b3.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b3.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = b3.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b3.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = b3.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b3.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = b3.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b3.vis.vis.mcShape.lengthDirection[1] = b3.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.lengthDirection[2] = b3.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.lengthDirection[3] = b3.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.widthDirection[1] = b3.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.widthDirection[2] = b3.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.widthDirection[3] = b3.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b3.vis.vis.mcShape.length(quantity = "Length", unit = "m") = b3.vis.vis.Length "Length of visual object";
//   input Real b3.vis.vis.mcShape.width(quantity = "Length", unit = "m") = b3.vis.vis.Width "Width of visual object";
//   input Real b3.vis.vis.mcShape.height(quantity = "Length", unit = "m") = b3.vis.vis.Height "Height of visual object";
//   input Real b3.vis.vis.mcShape.extra = b3.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real b3.vis.vis.mcShape.color[1] = 255.0 * b3.vis.vis.Material[1] "Color of shape";
//   input Real b3.vis.vis.mcShape.color[2] = 255.0 * b3.vis.vis.Material[2] "Color of shape";
//   input Real b3.vis.vis.mcShape.color[3] = 255.0 * b3.vis.vis.Material[3] "Color of shape";
//   input Real b3.vis.vis.mcShape.specularCoefficient = b3.vis.vis.Material[4];
//   input Real b3.vis.vis.mcShape.S[1,1] = b3.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[1,2] = b3.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[1,3] = b3.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[2,1] = b3.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[2,2] = b3.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[2,3] = b3.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[3,1] = b3.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[3,2] = b3.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b3.vis.vis.mcShape.S[3,3] = b3.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[1,1] = b3.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[1,2] = b3.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[1,3] = b3.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[2,1] = b3.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[2,2] = b3.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[2,3] = b3.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[3,1] = b3.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[3,2] = b3.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b3.vis.vis.mcShape.Sshape[3,3] = b3.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b3.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b3.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b3.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b3.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b3.vis.vis.mcShape.abs_n_x = sqrt(b3.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (b3.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + b3.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real b3.vis.vis.mcShape.e_x[1] = if noEvent(b3.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else b3.vis.vis.mcShape.lengthDirection[1] / b3.vis.vis.mcShape.abs_n_x;
//   Real b3.vis.vis.mcShape.e_x[2] = if noEvent(b3.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b3.vis.vis.mcShape.lengthDirection[2] / b3.vis.vis.mcShape.abs_n_x;
//   Real b3.vis.vis.mcShape.e_x[3] = if noEvent(b3.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b3.vis.vis.mcShape.lengthDirection[3] / b3.vis.vis.mcShape.abs_n_x;
//   Real b3.vis.vis.mcShape.n_z_aux[1] = b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.widthDirection[3] - b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.widthDirection[2];
//   Real b3.vis.vis.mcShape.n_z_aux[2] = b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.widthDirection[1] - b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.widthDirection[3];
//   Real b3.vis.vis.mcShape.n_z_aux[3] = b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.widthDirection[2] - b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.widthDirection[1];
//   Real b3.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]},if noEvent(b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.vis.vis.mcShape.widthDirection[1],b3.vis.vis.mcShape.widthDirection[2],b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]})[1];
//   Real b3.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]},if noEvent(b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.vis.vis.mcShape.widthDirection[1],b3.vis.vis.mcShape.widthDirection[2],b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]})[2];
//   Real b3.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]},if noEvent(b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b3.vis.vis.mcShape.widthDirection[1],b3.vis.vis.mcShape.widthDirection[2],b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b3.vis.vis.mcShape.e_x[1],b3.vis.vis.mcShape.e_x[2],b3.vis.vis.mcShape.e_x[3]})[3];
//   Real b3.vis.vis.mcShape.e_z[1] = b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.e_y[3] - b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.e_y[2];
//   Real b3.vis.vis.mcShape.e_z[2] = b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.e_y[1] - b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.e_y[3];
//   Real b3.vis.vis.mcShape.e_z[3] = b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.e_y[2] - b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.e_y[1];
//   protected output Real b3.vis.vis.mcShape.Form;
//   protected output Real b3.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b3.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b3.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b3.vis.vis.mcShape.Material;
//   protected output Real b3.vis.vis.mcShape.Extra;
//   constant Real j3.pi = 3.14159265358979;
//   constant Real j3.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j3.frame_a.r0[1](quantity = "Length", unit = "m") = j3.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j3.frame_a.r0[2](quantity = "Length", unit = "m") = j3.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j3.frame_a.r0[3](quantity = "Length", unit = "m") = j3.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j3.frame_a.S[1,1] = j3.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[1,2] = j3.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[1,3] = j3.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[2,1] = j3.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[2,2] = j3.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[2,3] = j3.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[3,1] = j3.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[3,2] = j3.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.S[3,3] = j3.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j3.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j3.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j3.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j3.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j3.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j3.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j3.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j3.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j3.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_a.f[1](quantity = "Force", unit = "N") = j3.fa[1];
//   Real j3.frame_a.f[2](quantity = "Force", unit = "N") = j3.fa[2];
//   Real j3.frame_a.f[3](quantity = "Force", unit = "N") = j3.fa[3];
//   Real j3.frame_a.t[1](quantity = "Torque", unit = "N.m") = j3.ta[1];
//   Real j3.frame_a.t[2](quantity = "Torque", unit = "N.m") = j3.ta[2];
//   Real j3.frame_a.t[3](quantity = "Torque", unit = "N.m") = j3.ta[3];
//   output Real j3.frame_b.r0[1](quantity = "Length", unit = "m") = j3.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j3.frame_b.r0[2](quantity = "Length", unit = "m") = j3.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j3.frame_b.r0[3](quantity = "Length", unit = "m") = j3.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j3.frame_b.S[1,1] = j3.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[1,2] = j3.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[1,3] = j3.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[2,1] = j3.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[2,2] = j3.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[2,3] = j3.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[3,1] = j3.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[3,2] = j3.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.S[3,3] = j3.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j3.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j3.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j3.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j3.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j3.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j3.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j3.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j3.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j3.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j3.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j3.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j3.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j3.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j3.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j3.frame_b.f[1](quantity = "Force", unit = "N") = -j3.fb[1];
//   Real j3.frame_b.f[2](quantity = "Force", unit = "N") = -j3.fb[2];
//   Real j3.frame_b.f[3](quantity = "Force", unit = "N") = -j3.fb[3];
//   Real j3.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j3.tb[1];
//   Real j3.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j3.tb[2];
//   Real j3.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j3.tb[3];
//   protected Real j3.Sa[1,1](start = 1.0);
//   protected Real j3.Sa[1,2](start = 0.0);
//   protected Real j3.Sa[1,3](start = 0.0);
//   protected Real j3.Sa[2,1](start = 0.0);
//   protected Real j3.Sa[2,2](start = 1.0);
//   protected Real j3.Sa[2,3](start = 0.0);
//   protected Real j3.Sa[3,1](start = 0.0);
//   protected Real j3.Sa[3,2](start = 0.0);
//   protected Real j3.Sa[3,3](start = 1.0);
//   protected Real j3.r0a[1](quantity = "Length", unit = "m");
//   protected Real j3.r0a[2](quantity = "Length", unit = "m");
//   protected Real j3.r0a[3](quantity = "Length", unit = "m");
//   protected Real j3.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j3.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j3.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j3.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.fa[1](quantity = "Force", unit = "N");
//   protected Real j3.fa[2](quantity = "Force", unit = "N");
//   protected Real j3.fa[3](quantity = "Force", unit = "N");
//   protected Real j3.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j3.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j3.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j3.Sb[1,1](start = 1.0);
//   protected Real j3.Sb[1,2](start = 0.0);
//   protected Real j3.Sb[1,3](start = 0.0);
//   protected Real j3.Sb[2,1](start = 0.0);
//   protected Real j3.Sb[2,2](start = 1.0);
//   protected Real j3.Sb[2,3](start = 0.0);
//   protected Real j3.Sb[3,1](start = 0.0);
//   protected Real j3.Sb[3,2](start = 0.0);
//   protected Real j3.Sb[3,3](start = 1.0);
//   protected Real j3.r0b[1](quantity = "Length", unit = "m");
//   protected Real j3.r0b[2](quantity = "Length", unit = "m");
//   protected Real j3.r0b[3](quantity = "Length", unit = "m");
//   protected Real j3.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j3.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j3.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j3.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j3.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j3.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j3.fb[1](quantity = "Force", unit = "N");
//   protected Real j3.fb[2](quantity = "Force", unit = "N");
//   protected Real j3.fb[3](quantity = "Force", unit = "N");
//   protected Real j3.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j3.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j3.tb[3](quantity = "Torque", unit = "N.m");
//   Real j3.S_rel[1,1];
//   Real j3.S_rel[1,2];
//   Real j3.S_rel[1,3];
//   Real j3.S_rel[2,1];
//   Real j3.S_rel[2,2];
//   Real j3.S_rel[2,3];
//   Real j3.S_rel[3,1];
//   Real j3.S_rel[3,2];
//   Real j3.S_rel[3,3];
//   Real j3.r_rela[1](quantity = "Length", unit = "m");
//   Real j3.r_rela[2](quantity = "Length", unit = "m");
//   Real j3.r_rela[3](quantity = "Length", unit = "m");
//   Real j3.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j3.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j3.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j3.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j3.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j3.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j3.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j3.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j3.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j3.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j3.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j3.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real j3.n[1] = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j3.n[2] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j3.n[3] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j3.q0(quantity = "Length", unit = "m") = 0.0 "Relative distance offset(see info)";
//   parameter Boolean j3.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real j3.q(quantity = "Length", unit = "m", fixed = j3.startValueFixed);
//   Real j3.qd(quantity = "Velocity", unit = "m/s", fixed = j3.startValueFixed);
//   Real j3.qdd(quantity = "Acceleration", unit = "m/s2");
//   Real j3.qq(quantity = "Length", unit = "m");
//   Real j3.nn[1];
//   Real j3.nn[2];
//   Real j3.nn[3];
//   Real j3.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real j3.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real j3.vaux[3](quantity = "Velocity", unit = "m/s");
//   Real j3.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j3.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real j3.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j3.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   constant Real b5.pi = 3.14159265358979;
//   constant Real b5.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b5.frame_a.r0[1](quantity = "Length", unit = "m") = b5.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.frame_a.r0[2](quantity = "Length", unit = "m") = b5.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.frame_a.r0[3](quantity = "Length", unit = "m") = b5.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.frame_a.S[1,1] = b5.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[1,2] = b5.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[1,3] = b5.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[2,1] = b5.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[2,2] = b5.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[2,3] = b5.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[3,1] = b5.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[3,2] = b5.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.S[3,3] = b5.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b5.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b5.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b5.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b5.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b5.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b5.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_a.f[1](quantity = "Force", unit = "N") = b5.fa[1];
//   Real b5.frame_a.f[2](quantity = "Force", unit = "N") = b5.fa[2];
//   Real b5.frame_a.f[3](quantity = "Force", unit = "N") = b5.fa[3];
//   Real b5.frame_a.t[1](quantity = "Torque", unit = "N.m") = b5.ta[1];
//   Real b5.frame_a.t[2](quantity = "Torque", unit = "N.m") = b5.ta[2];
//   Real b5.frame_a.t[3](quantity = "Torque", unit = "N.m") = b5.ta[3];
//   output Real b5.frame_b.r0[1](quantity = "Length", unit = "m") = b5.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.frame_b.r0[2](quantity = "Length", unit = "m") = b5.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.frame_b.r0[3](quantity = "Length", unit = "m") = b5.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.frame_b.S[1,1] = b5.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[1,2] = b5.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[1,3] = b5.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[2,1] = b5.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[2,2] = b5.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[2,3] = b5.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[3,1] = b5.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[3,2] = b5.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.S[3,3] = b5.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b5.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b5.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b5.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b5.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b5.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b5.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.frame_b.f[1](quantity = "Force", unit = "N") = -b5.fb[1];
//   Real b5.frame_b.f[2](quantity = "Force", unit = "N") = -b5.fb[2];
//   Real b5.frame_b.f[3](quantity = "Force", unit = "N") = -b5.fb[3];
//   Real b5.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b5.tb[1];
//   Real b5.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b5.tb[2];
//   Real b5.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b5.tb[3];
//   protected Real b5.Sa[1,1](start = 1.0);
//   protected Real b5.Sa[1,2](start = 0.0);
//   protected Real b5.Sa[1,3](start = 0.0);
//   protected Real b5.Sa[2,1](start = 0.0);
//   protected Real b5.Sa[2,2](start = 1.0);
//   protected Real b5.Sa[2,3](start = 0.0);
//   protected Real b5.Sa[3,1](start = 0.0);
//   protected Real b5.Sa[3,2](start = 0.0);
//   protected Real b5.Sa[3,3](start = 1.0);
//   protected Real b5.r0a[1](quantity = "Length", unit = "m");
//   protected Real b5.r0a[2](quantity = "Length", unit = "m");
//   protected Real b5.r0a[3](quantity = "Length", unit = "m");
//   protected Real b5.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.fa[1](quantity = "Force", unit = "N");
//   protected Real b5.fa[2](quantity = "Force", unit = "N");
//   protected Real b5.fa[3](quantity = "Force", unit = "N");
//   protected Real b5.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b5.Sb[1,1](start = 1.0);
//   protected Real b5.Sb[1,2](start = 0.0);
//   protected Real b5.Sb[1,3](start = 0.0);
//   protected Real b5.Sb[2,1](start = 0.0);
//   protected Real b5.Sb[2,2](start = 1.0);
//   protected Real b5.Sb[2,3](start = 0.0);
//   protected Real b5.Sb[3,1](start = 0.0);
//   protected Real b5.Sb[3,2](start = 0.0);
//   protected Real b5.Sb[3,3](start = 1.0);
//   protected Real b5.r0b[1](quantity = "Length", unit = "m");
//   protected Real b5.r0b[2](quantity = "Length", unit = "m");
//   protected Real b5.r0b[3](quantity = "Length", unit = "m");
//   protected Real b5.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.fb[1](quantity = "Force", unit = "N");
//   protected Real b5.fb[2](quantity = "Force", unit = "N");
//   protected Real b5.fb[3](quantity = "Force", unit = "N");
//   protected Real b5.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b5.r[1](quantity = "Length", unit = "m") = 1.8 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real b5.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real b5.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real b5.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real b5.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real b5.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real b5.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String b5.Shape = "box" "Name of shape (see info text)";
//   parameter Real b5.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b5.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b5.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b5.LengthDirection[1](quantity = "Length", unit = "m") = b5.r[1] - b5.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real b5.LengthDirection[2](quantity = "Length", unit = "m") = b5.r[2] - b5.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real b5.LengthDirection[3](quantity = "Length", unit = "m") = b5.r[3] - b5.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real b5.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b5.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b5.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b5.Length(quantity = "Length", unit = "m") = sqrt((b5.r[1] - b5.r0[1]) ^ 2.0 + ((b5.r[2] - b5.r0[2]) ^ 2.0 + (b5.r[3] - b5.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real b5.Width(quantity = "Length", unit = "m") = 0.02 "Width of shape";
//   parameter Real b5.Height(quantity = "Length", unit = "m") = 0.02 "Height of shape";
//   parameter Real b5.Material[1] = 0.5 "Color and specular coefficient";
//   parameter Real b5.Material[2] = 0.5 "Color and specular coefficient";
//   parameter Real b5.Material[3] = 0.5 "Color and specular coefficient";
//   parameter Real b5.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real b5.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real b5.body.pi = 3.14159265358979;
//   constant Real b5.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b5.body.frame_a.r0[1](quantity = "Length", unit = "m") = b5.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.frame_a.r0[2](quantity = "Length", unit = "m") = b5.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.frame_a.r0[3](quantity = "Length", unit = "m") = b5.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.body.frame_a.S[1,1] = b5.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[1,2] = b5.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[1,3] = b5.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[2,1] = b5.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[2,2] = b5.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[2,3] = b5.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[3,1] = b5.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[3,2] = b5.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.S[3,3] = b5.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b5.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b5.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b5.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b5.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b5.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b5.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_a.f[1](quantity = "Force", unit = "N") = b5.body.fa[1];
//   Real b5.body.frame_a.f[2](quantity = "Force", unit = "N") = b5.body.fa[2];
//   Real b5.body.frame_a.f[3](quantity = "Force", unit = "N") = b5.body.fa[3];
//   Real b5.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b5.body.ta[1];
//   Real b5.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b5.body.ta[2];
//   Real b5.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b5.body.ta[3];
//   output Real b5.body.frame_b.r0[1](quantity = "Length", unit = "m") = b5.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.body.frame_b.r0[2](quantity = "Length", unit = "m") = b5.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.body.frame_b.r0[3](quantity = "Length", unit = "m") = b5.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.body.frame_b.S[1,1] = b5.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[1,2] = b5.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[1,3] = b5.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[2,1] = b5.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[2,2] = b5.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[2,3] = b5.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[3,1] = b5.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[3,2] = b5.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.S[3,3] = b5.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b5.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b5.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b5.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b5.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b5.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b5.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frame_b.f[1](quantity = "Force", unit = "N") = -b5.body.fb[1];
//   Real b5.body.frame_b.f[2](quantity = "Force", unit = "N") = -b5.body.fb[2];
//   Real b5.body.frame_b.f[3](quantity = "Force", unit = "N") = -b5.body.fb[3];
//   Real b5.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b5.body.tb[1];
//   Real b5.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b5.body.tb[2];
//   Real b5.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b5.body.tb[3];
//   protected Real b5.body.Sa[1,1](start = 1.0);
//   protected Real b5.body.Sa[1,2](start = 0.0);
//   protected Real b5.body.Sa[1,3](start = 0.0);
//   protected Real b5.body.Sa[2,1](start = 0.0);
//   protected Real b5.body.Sa[2,2](start = 1.0);
//   protected Real b5.body.Sa[2,3](start = 0.0);
//   protected Real b5.body.Sa[3,1](start = 0.0);
//   protected Real b5.body.Sa[3,2](start = 0.0);
//   protected Real b5.body.Sa[3,3](start = 1.0);
//   protected Real b5.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b5.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b5.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b5.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b5.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b5.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b5.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.Sb[1,1](start = 1.0);
//   protected Real b5.body.Sb[1,2](start = 0.0);
//   protected Real b5.body.Sb[1,3](start = 0.0);
//   protected Real b5.body.Sb[2,1](start = 0.0);
//   protected Real b5.body.Sb[2,2](start = 1.0);
//   protected Real b5.body.Sb[2,3](start = 0.0);
//   protected Real b5.body.Sb[3,1](start = 0.0);
//   protected Real b5.body.Sb[3,2](start = 0.0);
//   protected Real b5.body.Sb[3,3](start = 1.0);
//   protected Real b5.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real b5.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real b5.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real b5.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.fb[1](quantity = "Force", unit = "N");
//   protected Real b5.body.fb[2](quantity = "Force", unit = "N");
//   protected Real b5.body.fb[3](quantity = "Force", unit = "N");
//   protected Real b5.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b5.body.r[1](quantity = "Length", unit = "m") = b5.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.body.r[2](quantity = "Length", unit = "m") = b5.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.body.r[3](quantity = "Length", unit = "m") = b5.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b5.body.rCM[1](quantity = "Length", unit = "m") = b5.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.body.rCM[2](quantity = "Length", unit = "m") = b5.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.body.rCM[3](quantity = "Length", unit = "m") = b5.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b5.body.m(quantity = "Mass", unit = "kg", min = 0.0) = b5.m "Mass of body";
//   parameter Real b5.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I11 "(1,1) element of inertia tensor";
//   parameter Real b5.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I22 "(2,2) element of inertia tensor";
//   parameter Real b5.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I33 "(3,3) element of inertia tensor";
//   parameter Real b5.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I21 "(2,1) element of inertia tensor";
//   parameter Real b5.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I31 "(3,1) element of inertia tensor";
//   parameter Real b5.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = b5.I32 "(3,2) element of inertia tensor";
//   constant Real b5.body.frameTranslation.pi = 3.14159265358979;
//   constant Real b5.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b5.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.body.frameTranslation.frame_a.S[1,1] = b5.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[1,2] = b5.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[1,3] = b5.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[2,1] = b5.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[2,2] = b5.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[2,3] = b5.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[3,1] = b5.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[3,2] = b5.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.S[3,3] = b5.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b5.body.frameTranslation.fa[1];
//   Real b5.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b5.body.frameTranslation.fa[2];
//   Real b5.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b5.body.frameTranslation.fa[3];
//   Real b5.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b5.body.frameTranslation.ta[1];
//   Real b5.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b5.body.frameTranslation.ta[2];
//   Real b5.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b5.body.frameTranslation.ta[3];
//   output Real b5.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b5.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b5.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.body.frameTranslation.frame_b.S[1,1] = b5.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[1,2] = b5.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[1,3] = b5.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[2,1] = b5.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[2,2] = b5.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[2,3] = b5.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[3,1] = b5.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[3,2] = b5.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.S[3,3] = b5.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b5.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b5.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b5.body.frameTranslation.fb[1];
//   Real b5.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b5.body.frameTranslation.fb[2];
//   Real b5.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b5.body.frameTranslation.fb[3];
//   Real b5.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b5.body.frameTranslation.tb[1];
//   Real b5.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b5.body.frameTranslation.tb[2];
//   Real b5.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b5.body.frameTranslation.tb[3];
//   protected Real b5.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b5.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b5.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b5.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b5.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b5.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b5.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b5.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b5.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b5.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b5.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b5.body.frameTranslation.r[1](quantity = "Length", unit = "m") = b5.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b5.body.frameTranslation.r[2](quantity = "Length", unit = "m") = b5.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b5.body.frameTranslation.r[3](quantity = "Length", unit = "m") = b5.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b5.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b5.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = b5.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = b5.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = b5.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.body.body.frame_a.S[1,1] = b5.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[1,2] = b5.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[1,3] = b5.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[2,1] = b5.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[2,2] = b5.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[2,3] = b5.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[3,1] = b5.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[3,2] = b5.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.S[3,3] = b5.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b5.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b5.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b5.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b5.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b5.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b5.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.body.body.frame_a.f[1](quantity = "Force", unit = "N") = b5.body.body.fa[1];
//   Real b5.body.body.frame_a.f[2](quantity = "Force", unit = "N") = b5.body.body.fa[2];
//   Real b5.body.body.frame_a.f[3](quantity = "Force", unit = "N") = b5.body.body.fa[3];
//   Real b5.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b5.body.body.ta[1];
//   Real b5.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b5.body.body.ta[2];
//   Real b5.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b5.body.body.ta[3];
//   protected Real b5.body.body.Sa[1,1](start = 1.0);
//   protected Real b5.body.body.Sa[1,2](start = 0.0);
//   protected Real b5.body.body.Sa[1,3](start = 0.0);
//   protected Real b5.body.body.Sa[2,1](start = 0.0);
//   protected Real b5.body.body.Sa[2,2](start = 1.0);
//   protected Real b5.body.body.Sa[2,3](start = 0.0);
//   protected Real b5.body.body.Sa[3,1](start = 0.0);
//   protected Real b5.body.body.Sa[3,2](start = 0.0);
//   protected Real b5.body.body.Sa[3,3](start = 1.0);
//   protected Real b5.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b5.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b5.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b5.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b5.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b5.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b5.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b5.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b5.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real b5.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real b5.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real b5.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b5.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real b5.vis.frame_a.r0[1](quantity = "Length", unit = "m") = b5.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.vis.frame_a.r0[2](quantity = "Length", unit = "m") = b5.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b5.vis.frame_a.r0[3](quantity = "Length", unit = "m") = b5.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b5.vis.frame_a.S[1,1] = b5.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[1,2] = b5.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[1,3] = b5.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[2,1] = b5.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[2,2] = b5.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[2,3] = b5.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[3,1] = b5.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[3,2] = b5.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.S[3,3] = b5.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b5.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b5.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b5.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b5.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b5.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b5.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b5.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b5.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b5.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b5.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b5.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b5.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b5.vis.frame_a.f[1](quantity = "Force", unit = "N") = b5.vis.fa[1];
//   Real b5.vis.frame_a.f[2](quantity = "Force", unit = "N") = b5.vis.fa[2];
//   Real b5.vis.frame_a.f[3](quantity = "Force", unit = "N") = b5.vis.fa[3];
//   Real b5.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = b5.vis.ta[1];
//   Real b5.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = b5.vis.ta[2];
//   Real b5.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = b5.vis.ta[3];
//   protected Real b5.vis.Sa[1,1](start = 1.0);
//   protected Real b5.vis.Sa[1,2](start = 0.0);
//   protected Real b5.vis.Sa[1,3](start = 0.0);
//   protected Real b5.vis.Sa[2,1](start = 0.0);
//   protected Real b5.vis.Sa[2,2](start = 1.0);
//   protected Real b5.vis.Sa[2,3](start = 0.0);
//   protected Real b5.vis.Sa[3,1](start = 0.0);
//   protected Real b5.vis.Sa[3,2](start = 0.0);
//   protected Real b5.vis.Sa[3,3](start = 1.0);
//   protected Real b5.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real b5.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real b5.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real b5.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b5.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b5.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b5.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b5.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b5.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b5.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real b5.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real b5.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real b5.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b5.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b5.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String b5.vis.Shape = b5.Shape "Name of shape (see info text)";
//   parameter Real b5.vis.r0[1] = b5.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real b5.vis.r0[2] = b5.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real b5.vis.r0[3] = b5.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real b5.vis.LengthDirection[1] = b5.LengthDirection[1] "Vector in length direction";
//   parameter Real b5.vis.LengthDirection[2] = b5.LengthDirection[2] "Vector in length direction";
//   parameter Real b5.vis.LengthDirection[3] = b5.LengthDirection[3] "Vector in length direction";
//   parameter Real b5.vis.WidthDirection[1] = b5.WidthDirection[1] "Vector in width direction";
//   parameter Real b5.vis.WidthDirection[2] = b5.WidthDirection[2] "Vector in width direction";
//   parameter Real b5.vis.WidthDirection[3] = b5.WidthDirection[3] "Vector in width direction";
//   parameter Real b5.vis.Length = b5.Length "Length of shape [m]";
//   parameter Real b5.vis.Width = b5.Width "Width of shape [m]";
//   parameter Real b5.vis.Height = b5.Height "Height of shape [m]";
//   parameter Real b5.vis.Material[1] = b5.Material[1] "Color and specular coefficient";
//   parameter Real b5.vis.Material[2] = b5.Material[2] "Color and specular coefficient";
//   parameter Real b5.vis.Material[3] = b5.Material[3] "Color and specular coefficient";
//   parameter Real b5.vis.Material[4] = b5.Material[4] "Color and specular coefficient";
//   parameter Real b5.vis.Extra = b5.Extra "Additional parameter for cone and pipe";
//   Real b5.vis.nLength[1];
//   Real b5.vis.nLength[2];
//   Real b5.vis.nLength[3];
//   Real b5.vis.nWidth[1];
//   Real b5.vis.nWidth[2];
//   Real b5.vis.nWidth[3];
//   Real b5.vis.nHeight[1];
//   Real b5.vis.nHeight[2];
//   Real b5.vis.nHeight[3];
//   parameter Real b5.vis.vis.r0[1] = b5.vis.r0[1] "Origin of visual object.";
//   parameter Real b5.vis.vis.r0[2] = b5.vis.r0[2] "Origin of visual object.";
//   parameter Real b5.vis.vis.r0[3] = b5.vis.r0[3] "Origin of visual object.";
//   parameter Real b5.vis.vis.Length = b5.vis.Length "Length of visual object.";
//   parameter Real b5.vis.vis.Width = b5.vis.Width "Width of visual object.";
//   parameter Real b5.vis.vis.Height = b5.vis.Height "Height of visual object.";
//   parameter Real b5.vis.vis.LengthDirection[1] = b5.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real b5.vis.vis.LengthDirection[2] = b5.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real b5.vis.vis.LengthDirection[3] = b5.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real b5.vis.vis.WidthDirection[1] = b5.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real b5.vis.vis.WidthDirection[2] = b5.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real b5.vis.vis.WidthDirection[3] = b5.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String b5.vis.vis.Shape = b5.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b5.vis.vis.Material[1] = b5.vis.Material[1] "Color and specular coefficient.";
//   parameter Real b5.vis.vis.Material[2] = b5.vis.Material[2] "Color and specular coefficient.";
//   parameter Real b5.vis.vis.Material[3] = b5.vis.Material[3] "Color and specular coefficient.";
//   parameter Real b5.vis.vis.Material[4] = b5.vis.Material[4] "Color and specular coefficient.";
//   parameter Real b5.vis.vis.Extra = b5.vis.Extra "Additional size data for some of the shape types";
//   input Real b5.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b5.vis.vis.r[1] "Position of visual object.";
//   input Real b5.vis.vis.r[2] "Position of visual object.";
//   input Real b5.vis.vis.r[3] "Position of visual object.";
//   Real b5.vis.vis.nLength[1];
//   Real b5.vis.vis.nLength[2];
//   Real b5.vis.vis.nLength[3];
//   Real b5.vis.vis.nWidth[1];
//   Real b5.vis.vis.nWidth[2];
//   Real b5.vis.vis.nWidth[3];
//   Real b5.vis.vis.nHeight[1];
//   Real b5.vis.vis.nHeight[2];
//   Real b5.vis.vis.nHeight[3];
//   parameter String b5.vis.vis.mcShape.shapeType = b5.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b5.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = b5.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b5.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = b5.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b5.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = b5.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b5.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = b5.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b5.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = b5.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b5.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = b5.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b5.vis.vis.mcShape.lengthDirection[1] = b5.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.lengthDirection[2] = b5.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.lengthDirection[3] = b5.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.widthDirection[1] = b5.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.widthDirection[2] = b5.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.widthDirection[3] = b5.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b5.vis.vis.mcShape.length(quantity = "Length", unit = "m") = b5.vis.vis.Length "Length of visual object";
//   input Real b5.vis.vis.mcShape.width(quantity = "Length", unit = "m") = b5.vis.vis.Width "Width of visual object";
//   input Real b5.vis.vis.mcShape.height(quantity = "Length", unit = "m") = b5.vis.vis.Height "Height of visual object";
//   input Real b5.vis.vis.mcShape.extra = b5.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real b5.vis.vis.mcShape.color[1] = 255.0 * b5.vis.vis.Material[1] "Color of shape";
//   input Real b5.vis.vis.mcShape.color[2] = 255.0 * b5.vis.vis.Material[2] "Color of shape";
//   input Real b5.vis.vis.mcShape.color[3] = 255.0 * b5.vis.vis.Material[3] "Color of shape";
//   input Real b5.vis.vis.mcShape.specularCoefficient = b5.vis.vis.Material[4];
//   input Real b5.vis.vis.mcShape.S[1,1] = b5.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[1,2] = b5.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[1,3] = b5.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[2,1] = b5.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[2,2] = b5.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[2,3] = b5.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[3,1] = b5.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[3,2] = b5.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b5.vis.vis.mcShape.S[3,3] = b5.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[1,1] = b5.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[1,2] = b5.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[1,3] = b5.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[2,1] = b5.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[2,2] = b5.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[2,3] = b5.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[3,1] = b5.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[3,2] = b5.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b5.vis.vis.mcShape.Sshape[3,3] = b5.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b5.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b5.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b5.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b5.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b5.vis.vis.mcShape.abs_n_x = sqrt(b5.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (b5.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + b5.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real b5.vis.vis.mcShape.e_x[1] = if noEvent(b5.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else b5.vis.vis.mcShape.lengthDirection[1] / b5.vis.vis.mcShape.abs_n_x;
//   Real b5.vis.vis.mcShape.e_x[2] = if noEvent(b5.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b5.vis.vis.mcShape.lengthDirection[2] / b5.vis.vis.mcShape.abs_n_x;
//   Real b5.vis.vis.mcShape.e_x[3] = if noEvent(b5.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b5.vis.vis.mcShape.lengthDirection[3] / b5.vis.vis.mcShape.abs_n_x;
//   Real b5.vis.vis.mcShape.n_z_aux[1] = b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.widthDirection[3] - b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.widthDirection[2];
//   Real b5.vis.vis.mcShape.n_z_aux[2] = b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.widthDirection[1] - b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.widthDirection[3];
//   Real b5.vis.vis.mcShape.n_z_aux[3] = b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.widthDirection[2] - b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.widthDirection[1];
//   Real b5.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]},if noEvent(b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b5.vis.vis.mcShape.widthDirection[1],b5.vis.vis.mcShape.widthDirection[2],b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]})[1];
//   Real b5.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]},if noEvent(b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b5.vis.vis.mcShape.widthDirection[1],b5.vis.vis.mcShape.widthDirection[2],b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]})[2];
//   Real b5.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]},if noEvent(b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b5.vis.vis.mcShape.widthDirection[1],b5.vis.vis.mcShape.widthDirection[2],b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b5.vis.vis.mcShape.e_x[1],b5.vis.vis.mcShape.e_x[2],b5.vis.vis.mcShape.e_x[3]})[3];
//   Real b5.vis.vis.mcShape.e_z[1] = b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.e_y[3] - b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.e_y[2];
//   Real b5.vis.vis.mcShape.e_z[2] = b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.e_y[1] - b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.e_y[3];
//   Real b5.vis.vis.mcShape.e_z[3] = b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.e_y[2] - b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.e_y[1];
//   protected output Real b5.vis.vis.mcShape.Form;
//   protected output Real b5.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b5.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b5.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b5.vis.vis.mcShape.Material;
//   protected output Real b5.vis.vis.mcShape.Extra;
//   constant Real b6.pi = 3.14159265358979;
//   constant Real b6.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b6.frame_a.r0[1](quantity = "Length", unit = "m") = b6.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.frame_a.r0[2](quantity = "Length", unit = "m") = b6.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.frame_a.r0[3](quantity = "Length", unit = "m") = b6.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b6.frame_a.S[1,1] = b6.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[1,2] = b6.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[1,3] = b6.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[2,1] = b6.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[2,2] = b6.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[2,3] = b6.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[3,1] = b6.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[3,2] = b6.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.S[3,3] = b6.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b6.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b6.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b6.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b6.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b6.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b6.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b6.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b6.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b6.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_a.f[1](quantity = "Force", unit = "N") = b6.fa[1];
//   Real b6.frame_a.f[2](quantity = "Force", unit = "N") = b6.fa[2];
//   Real b6.frame_a.f[3](quantity = "Force", unit = "N") = b6.fa[3];
//   Real b6.frame_a.t[1](quantity = "Torque", unit = "N.m") = b6.ta[1];
//   Real b6.frame_a.t[2](quantity = "Torque", unit = "N.m") = b6.ta[2];
//   Real b6.frame_a.t[3](quantity = "Torque", unit = "N.m") = b6.ta[3];
//   output Real b6.frame_b.r0[1](quantity = "Length", unit = "m") = b6.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b6.frame_b.r0[2](quantity = "Length", unit = "m") = b6.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b6.frame_b.r0[3](quantity = "Length", unit = "m") = b6.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b6.frame_b.S[1,1] = b6.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[1,2] = b6.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[1,3] = b6.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[2,1] = b6.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[2,2] = b6.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[2,3] = b6.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[3,1] = b6.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[3,2] = b6.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.S[3,3] = b6.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b6.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b6.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b6.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b6.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b6.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b6.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b6.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b6.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b6.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frame_b.f[1](quantity = "Force", unit = "N") = -b6.fb[1];
//   Real b6.frame_b.f[2](quantity = "Force", unit = "N") = -b6.fb[2];
//   Real b6.frame_b.f[3](quantity = "Force", unit = "N") = -b6.fb[3];
//   Real b6.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b6.tb[1];
//   Real b6.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b6.tb[2];
//   Real b6.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b6.tb[3];
//   protected Real b6.Sa[1,1](start = 1.0);
//   protected Real b6.Sa[1,2](start = 0.0);
//   protected Real b6.Sa[1,3](start = 0.0);
//   protected Real b6.Sa[2,1](start = 0.0);
//   protected Real b6.Sa[2,2](start = 1.0);
//   protected Real b6.Sa[2,3](start = 0.0);
//   protected Real b6.Sa[3,1](start = 0.0);
//   protected Real b6.Sa[3,2](start = 0.0);
//   protected Real b6.Sa[3,3](start = 1.0);
//   protected Real b6.r0a[1](quantity = "Length", unit = "m");
//   protected Real b6.r0a[2](quantity = "Length", unit = "m");
//   protected Real b6.r0a[3](quantity = "Length", unit = "m");
//   protected Real b6.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b6.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.fa[1](quantity = "Force", unit = "N");
//   protected Real b6.fa[2](quantity = "Force", unit = "N");
//   protected Real b6.fa[3](quantity = "Force", unit = "N");
//   protected Real b6.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b6.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b6.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b6.Sb[1,1](start = 1.0);
//   protected Real b6.Sb[1,2](start = 0.0);
//   protected Real b6.Sb[1,3](start = 0.0);
//   protected Real b6.Sb[2,1](start = 0.0);
//   protected Real b6.Sb[2,2](start = 1.0);
//   protected Real b6.Sb[2,3](start = 0.0);
//   protected Real b6.Sb[3,1](start = 0.0);
//   protected Real b6.Sb[3,2](start = 0.0);
//   protected Real b6.Sb[3,3](start = 1.0);
//   protected Real b6.r0b[1](quantity = "Length", unit = "m");
//   protected Real b6.r0b[2](quantity = "Length", unit = "m");
//   protected Real b6.r0b[3](quantity = "Length", unit = "m");
//   protected Real b6.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b6.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.fb[1](quantity = "Force", unit = "N");
//   protected Real b6.fb[2](quantity = "Force", unit = "N");
//   protected Real b6.fb[3](quantity = "Force", unit = "N");
//   protected Real b6.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b6.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b6.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b6.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b6.r[2](quantity = "Length", unit = "m") = -0.3 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b6.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b6.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b6.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b6.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left circle center, resolved in frame_a";
//   parameter Real b6.Axis[1](quantity = "Length", unit = "m") = b6.r[1] - b6.r0[1] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b6.Axis[2](quantity = "Length", unit = "m") = b6.r[2] - b6.r0[2] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b6.Axis[3](quantity = "Length", unit = "m") = b6.r[3] - b6.r0[3] "Vector in direction of cylinder axis, resolved in frame_a";
//   parameter Real b6.Length(quantity = "Length", unit = "m") = sqrt(b6.Axis[1] ^ 2.0 + (b6.Axis[2] ^ 2.0 + b6.Axis[3] ^ 2.0)) "Length of cylinder";
//   parameter Real b6.Radius(quantity = "Length", unit = "m", min = 0.0) = 0.03 "Radius of cylinder";
//   parameter Real b6.InnerRadius(quantity = "Length", unit = "m", min = 0.0, max = b6.Radius) = 0.0 "Inner radius of cylinder";
//   parameter Real b6.rho(min = 0.0) = 7.7 "Density of material [g/cm^3]";
//   parameter Real b6.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real b6.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real b6.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real b6.Material[4] = 0.5 "Color and specular coefficient";
//   Real b6.Scyl[1,1];
//   Real b6.Scyl[1,2];
//   Real b6.Scyl[1,3];
//   Real b6.Scyl[2,1];
//   Real b6.Scyl[2,2];
//   Real b6.Scyl[2,3];
//   Real b6.Scyl[3,1];
//   Real b6.Scyl[3,2];
//   Real b6.Scyl[3,3];
//   Real b6.mo(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b6.mi(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b6.I22(quantity = "MomentOfInertia", unit = "kg.m2");
//   parameter Real b6.box.r0[1] = b6.r0[1] "Origin of visual object.";
//   parameter Real b6.box.r0[2] = b6.r0[2] "Origin of visual object.";
//   parameter Real b6.box.r0[3] = b6.r0[3] "Origin of visual object.";
//   parameter Real b6.box.Length = b6.Length "Length of visual object.";
//   parameter Real b6.box.Width = 2.0 * b6.Radius "Width of visual object.";
//   parameter Real b6.box.Height = 2.0 * b6.Radius "Height of visual object.";
//   parameter Real b6.box.LengthDirection[1] = b6.Axis[1] "Vector in length direction.";
//   parameter Real b6.box.LengthDirection[2] = b6.Axis[2] "Vector in length direction.";
//   parameter Real b6.box.LengthDirection[3] = b6.Axis[3] "Vector in length direction.";
//   parameter Real b6.box.WidthDirection[1] = 0.0 "Vector in width direction.";
//   parameter Real b6.box.WidthDirection[2] = 1.0 "Vector in width direction.";
//   parameter Real b6.box.WidthDirection[3] = 0.0 "Vector in width direction.";
//   parameter String b6.box.Shape = "pipe" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b6.box.Material[1] = b6.Material[1] "Color and specular coefficient.";
//   parameter Real b6.box.Material[2] = b6.Material[2] "Color and specular coefficient.";
//   parameter Real b6.box.Material[3] = b6.Material[3] "Color and specular coefficient.";
//   parameter Real b6.box.Material[4] = b6.Material[4] "Color and specular coefficient.";
//   parameter Real b6.box.Extra = b6.InnerRadius / b6.Radius "Additional size data for some of the shape types";
//   input Real b6.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b6.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b6.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b6.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b6.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b6.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b6.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b6.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b6.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b6.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b6.box.r[1] "Position of visual object.";
//   input Real b6.box.r[2] "Position of visual object.";
//   input Real b6.box.r[3] "Position of visual object.";
//   Real b6.box.nLength[1];
//   Real b6.box.nLength[2];
//   Real b6.box.nLength[3];
//   Real b6.box.nWidth[1];
//   Real b6.box.nWidth[2];
//   Real b6.box.nWidth[3];
//   Real b6.box.nHeight[1];
//   Real b6.box.nHeight[2];
//   Real b6.box.nHeight[3];
//   parameter String b6.box.mcShape.shapeType = b6.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b6.box.mcShape.r[1](quantity = "Length", unit = "m") = b6.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b6.box.mcShape.r[2](quantity = "Length", unit = "m") = b6.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b6.box.mcShape.r[3](quantity = "Length", unit = "m") = b6.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b6.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = b6.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b6.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = b6.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b6.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = b6.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b6.box.mcShape.lengthDirection[1] = b6.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b6.box.mcShape.lengthDirection[2] = b6.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b6.box.mcShape.lengthDirection[3] = b6.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b6.box.mcShape.widthDirection[1] = b6.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b6.box.mcShape.widthDirection[2] = b6.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b6.box.mcShape.widthDirection[3] = b6.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b6.box.mcShape.length(quantity = "Length", unit = "m") = b6.box.Length "Length of visual object";
//   input Real b6.box.mcShape.width(quantity = "Length", unit = "m") = b6.box.Width "Width of visual object";
//   input Real b6.box.mcShape.height(quantity = "Length", unit = "m") = b6.box.Height "Height of visual object";
//   input Real b6.box.mcShape.extra = b6.box.Extra "Additional size data for some of the shape types";
//   input Real b6.box.mcShape.color[1] = 255.0 * b6.box.Material[1] "Color of shape";
//   input Real b6.box.mcShape.color[2] = 255.0 * b6.box.Material[2] "Color of shape";
//   input Real b6.box.mcShape.color[3] = 255.0 * b6.box.Material[3] "Color of shape";
//   input Real b6.box.mcShape.specularCoefficient = b6.box.Material[4];
//   input Real b6.box.mcShape.S[1,1] = b6.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[1,2] = b6.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[1,3] = b6.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[2,1] = b6.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[2,2] = b6.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[2,3] = b6.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[3,1] = b6.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[3,2] = b6.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real b6.box.mcShape.S[3,3] = b6.box.S[3,3] "3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[1,1] = b6.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[1,2] = b6.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[1,3] = b6.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[2,1] = b6.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[2,2] = b6.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[2,3] = b6.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[3,1] = b6.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[3,2] = b6.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b6.box.mcShape.Sshape[3,3] = b6.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b6.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b6.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b6.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b6.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b6.box.mcShape.abs_n_x = sqrt(b6.box.mcShape.lengthDirection[1] ^ 2.0 + (b6.box.mcShape.lengthDirection[2] ^ 2.0 + b6.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real b6.box.mcShape.e_x[1] = if noEvent(b6.box.mcShape.abs_n_x < 1e-10) then 1.0 else b6.box.mcShape.lengthDirection[1] / b6.box.mcShape.abs_n_x;
//   Real b6.box.mcShape.e_x[2] = if noEvent(b6.box.mcShape.abs_n_x < 1e-10) then 0.0 else b6.box.mcShape.lengthDirection[2] / b6.box.mcShape.abs_n_x;
//   Real b6.box.mcShape.e_x[3] = if noEvent(b6.box.mcShape.abs_n_x < 1e-10) then 0.0 else b6.box.mcShape.lengthDirection[3] / b6.box.mcShape.abs_n_x;
//   Real b6.box.mcShape.n_z_aux[1] = b6.box.mcShape.e_x[2] * b6.box.mcShape.widthDirection[3] - b6.box.mcShape.e_x[3] * b6.box.mcShape.widthDirection[2];
//   Real b6.box.mcShape.n_z_aux[2] = b6.box.mcShape.e_x[3] * b6.box.mcShape.widthDirection[1] - b6.box.mcShape.e_x[1] * b6.box.mcShape.widthDirection[3];
//   Real b6.box.mcShape.n_z_aux[3] = b6.box.mcShape.e_x[1] * b6.box.mcShape.widthDirection[2] - b6.box.mcShape.e_x[2] * b6.box.mcShape.widthDirection[1];
//   Real b6.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]},if noEvent(b6.box.mcShape.n_z_aux[1] ^ 2.0 + (b6.box.mcShape.n_z_aux[2] ^ 2.0 + b6.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b6.box.mcShape.widthDirection[1],b6.box.mcShape.widthDirection[2],b6.box.mcShape.widthDirection[3]} else if noEvent(abs(b6.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]})[1];
//   Real b6.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]},if noEvent(b6.box.mcShape.n_z_aux[1] ^ 2.0 + (b6.box.mcShape.n_z_aux[2] ^ 2.0 + b6.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b6.box.mcShape.widthDirection[1],b6.box.mcShape.widthDirection[2],b6.box.mcShape.widthDirection[3]} else if noEvent(abs(b6.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]})[2];
//   Real b6.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]},if noEvent(b6.box.mcShape.n_z_aux[1] ^ 2.0 + (b6.box.mcShape.n_z_aux[2] ^ 2.0 + b6.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b6.box.mcShape.widthDirection[1],b6.box.mcShape.widthDirection[2],b6.box.mcShape.widthDirection[3]} else if noEvent(abs(b6.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b6.box.mcShape.e_x[1],b6.box.mcShape.e_x[2],b6.box.mcShape.e_x[3]})[3];
//   Real b6.box.mcShape.e_z[1] = b6.box.mcShape.e_x[2] * b6.box.mcShape.e_y[3] - b6.box.mcShape.e_x[3] * b6.box.mcShape.e_y[2];
//   Real b6.box.mcShape.e_z[2] = b6.box.mcShape.e_x[3] * b6.box.mcShape.e_y[1] - b6.box.mcShape.e_x[1] * b6.box.mcShape.e_y[3];
//   Real b6.box.mcShape.e_z[3] = b6.box.mcShape.e_x[1] * b6.box.mcShape.e_y[2] - b6.box.mcShape.e_x[2] * b6.box.mcShape.e_y[1];
//   protected output Real b6.box.mcShape.Form;
//   protected output Real b6.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b6.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b6.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b6.box.mcShape.Material;
//   protected output Real b6.box.mcShape.Extra;
//   constant Real b6.frameTranslation.pi = 3.14159265358979;
//   constant Real b6.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b6.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b6.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b6.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b6.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b6.frameTranslation.frame_a.S[1,1] = b6.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[1,2] = b6.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[1,3] = b6.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[2,1] = b6.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[2,2] = b6.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[2,3] = b6.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[3,1] = b6.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[3,2] = b6.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.S[3,3] = b6.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b6.frameTranslation.fa[1];
//   Real b6.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b6.frameTranslation.fa[2];
//   Real b6.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b6.frameTranslation.fa[3];
//   Real b6.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b6.frameTranslation.ta[1];
//   Real b6.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b6.frameTranslation.ta[2];
//   Real b6.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b6.frameTranslation.ta[3];
//   output Real b6.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b6.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b6.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b6.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b6.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b6.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b6.frameTranslation.frame_b.S[1,1] = b6.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[1,2] = b6.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[1,3] = b6.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[2,1] = b6.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[2,2] = b6.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[2,3] = b6.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[3,1] = b6.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[3,2] = b6.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.S[3,3] = b6.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b6.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b6.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b6.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b6.frameTranslation.fb[1];
//   Real b6.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b6.frameTranslation.fb[2];
//   Real b6.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b6.frameTranslation.fb[3];
//   Real b6.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b6.frameTranslation.tb[1];
//   Real b6.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b6.frameTranslation.tb[2];
//   Real b6.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b6.frameTranslation.tb[3];
//   protected Real b6.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b6.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b6.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b6.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b6.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b6.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b6.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b6.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b6.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b6.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b6.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b6.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b6.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b6.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b6.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b6.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b6.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b6.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b6.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b6.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b6.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b6.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b6.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b6.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b6.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b6.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b6.frameTranslation.r[1](quantity = "Length", unit = "m") = b6.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b6.frameTranslation.r[2](quantity = "Length", unit = "m") = b6.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b6.frameTranslation.r[3](quantity = "Length", unit = "m") = b6.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b6.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b6.body.frame_a.r0[1](quantity = "Length", unit = "m") = b6.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.body.frame_a.r0[2](quantity = "Length", unit = "m") = b6.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b6.body.frame_a.r0[3](quantity = "Length", unit = "m") = b6.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b6.body.frame_a.S[1,1] = b6.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[1,2] = b6.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[1,3] = b6.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[2,1] = b6.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[2,2] = b6.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[2,3] = b6.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[3,1] = b6.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[3,2] = b6.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.S[3,3] = b6.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b6.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b6.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b6.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b6.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b6.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b6.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b6.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b6.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b6.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b6.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b6.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b6.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b6.body.frame_a.f[1](quantity = "Force", unit = "N") = b6.body.fa[1];
//   Real b6.body.frame_a.f[2](quantity = "Force", unit = "N") = b6.body.fa[2];
//   Real b6.body.frame_a.f[3](quantity = "Force", unit = "N") = b6.body.fa[3];
//   Real b6.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b6.body.ta[1];
//   Real b6.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b6.body.ta[2];
//   Real b6.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b6.body.ta[3];
//   protected Real b6.body.Sa[1,1](start = 1.0);
//   protected Real b6.body.Sa[1,2](start = 0.0);
//   protected Real b6.body.Sa[1,3](start = 0.0);
//   protected Real b6.body.Sa[2,1](start = 0.0);
//   protected Real b6.body.Sa[2,2](start = 1.0);
//   protected Real b6.body.Sa[2,3](start = 0.0);
//   protected Real b6.body.Sa[3,1](start = 0.0);
//   protected Real b6.body.Sa[3,2](start = 0.0);
//   protected Real b6.body.Sa[3,3](start = 1.0);
//   protected Real b6.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b6.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b6.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b6.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b6.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b6.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b6.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b6.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b6.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b6.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b6.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b6.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b6.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b6.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b6.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b6.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b6.body.rCM[1](quantity = "Length", unit = "m");
//   Real b6.body.rCM[2](quantity = "Length", unit = "m");
//   Real b6.body.rCM[3](quantity = "Length", unit = "m");
//   Real b6.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b6.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   constant Real j5.pi = 3.14159265358979;
//   constant Real j5.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j5.frame_a.r0[1](quantity = "Length", unit = "m") = j5.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j5.frame_a.r0[2](quantity = "Length", unit = "m") = j5.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j5.frame_a.r0[3](quantity = "Length", unit = "m") = j5.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j5.frame_a.S[1,1] = j5.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[1,2] = j5.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[1,3] = j5.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[2,1] = j5.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[2,2] = j5.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[2,3] = j5.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[3,1] = j5.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[3,2] = j5.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.S[3,3] = j5.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j5.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j5.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j5.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j5.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j5.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j5.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j5.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j5.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j5.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_a.f[1](quantity = "Force", unit = "N") = j5.fa[1];
//   Real j5.frame_a.f[2](quantity = "Force", unit = "N") = j5.fa[2];
//   Real j5.frame_a.f[3](quantity = "Force", unit = "N") = j5.fa[3];
//   Real j5.frame_a.t[1](quantity = "Torque", unit = "N.m") = j5.ta[1];
//   Real j5.frame_a.t[2](quantity = "Torque", unit = "N.m") = j5.ta[2];
//   Real j5.frame_a.t[3](quantity = "Torque", unit = "N.m") = j5.ta[3];
//   output Real j5.frame_b.r0[1](quantity = "Length", unit = "m") = j5.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j5.frame_b.r0[2](quantity = "Length", unit = "m") = j5.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j5.frame_b.r0[3](quantity = "Length", unit = "m") = j5.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j5.frame_b.S[1,1] = j5.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[1,2] = j5.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[1,3] = j5.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[2,1] = j5.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[2,2] = j5.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[2,3] = j5.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[3,1] = j5.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[3,2] = j5.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.S[3,3] = j5.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j5.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j5.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j5.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j5.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j5.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j5.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j5.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j5.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j5.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j5.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j5.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j5.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j5.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j5.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j5.frame_b.f[1](quantity = "Force", unit = "N") = -j5.fb[1];
//   Real j5.frame_b.f[2](quantity = "Force", unit = "N") = -j5.fb[2];
//   Real j5.frame_b.f[3](quantity = "Force", unit = "N") = -j5.fb[3];
//   Real j5.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j5.tb[1];
//   Real j5.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j5.tb[2];
//   Real j5.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j5.tb[3];
//   protected Real j5.Sa[1,1](start = 1.0);
//   protected Real j5.Sa[1,2](start = 0.0);
//   protected Real j5.Sa[1,3](start = 0.0);
//   protected Real j5.Sa[2,1](start = 0.0);
//   protected Real j5.Sa[2,2](start = 1.0);
//   protected Real j5.Sa[2,3](start = 0.0);
//   protected Real j5.Sa[3,1](start = 0.0);
//   protected Real j5.Sa[3,2](start = 0.0);
//   protected Real j5.Sa[3,3](start = 1.0);
//   protected Real j5.r0a[1](quantity = "Length", unit = "m");
//   protected Real j5.r0a[2](quantity = "Length", unit = "m");
//   protected Real j5.r0a[3](quantity = "Length", unit = "m");
//   protected Real j5.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j5.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j5.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j5.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.fa[1](quantity = "Force", unit = "N");
//   protected Real j5.fa[2](quantity = "Force", unit = "N");
//   protected Real j5.fa[3](quantity = "Force", unit = "N");
//   protected Real j5.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j5.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j5.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j5.Sb[1,1](start = 1.0);
//   protected Real j5.Sb[1,2](start = 0.0);
//   protected Real j5.Sb[1,3](start = 0.0);
//   protected Real j5.Sb[2,1](start = 0.0);
//   protected Real j5.Sb[2,2](start = 1.0);
//   protected Real j5.Sb[2,3](start = 0.0);
//   protected Real j5.Sb[3,1](start = 0.0);
//   protected Real j5.Sb[3,2](start = 0.0);
//   protected Real j5.Sb[3,3](start = 1.0);
//   protected Real j5.r0b[1](quantity = "Length", unit = "m");
//   protected Real j5.r0b[2](quantity = "Length", unit = "m");
//   protected Real j5.r0b[3](quantity = "Length", unit = "m");
//   protected Real j5.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j5.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j5.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j5.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j5.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j5.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j5.fb[1](quantity = "Force", unit = "N");
//   protected Real j5.fb[2](quantity = "Force", unit = "N");
//   protected Real j5.fb[3](quantity = "Force", unit = "N");
//   protected Real j5.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j5.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j5.tb[3](quantity = "Torque", unit = "N.m");
//   Real j5.S_rel[1,1];
//   Real j5.S_rel[1,2];
//   Real j5.S_rel[1,3];
//   Real j5.S_rel[2,1];
//   Real j5.S_rel[2,2];
//   Real j5.S_rel[2,3];
//   Real j5.S_rel[3,1];
//   Real j5.S_rel[3,2];
//   Real j5.S_rel[3,3];
//   Real j5.r_rela[1](quantity = "Length", unit = "m");
//   Real j5.r_rela[2](quantity = "Length", unit = "m");
//   Real j5.r_rela[3](quantity = "Length", unit = "m");
//   Real j5.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j5.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j5.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j5.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j5.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j5.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j5.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j5.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j5.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j5.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j5.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j5.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real j5.n[1] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j5.n[2] = 0.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j5.n[3] = 1.0 "Axis of translation resolved in frame_a (= same as in frame_b)";
//   parameter Real j5.q0(quantity = "Length", unit = "m") = 0.0 "Relative distance offset(see info)";
//   parameter Boolean j5.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real j5.q(quantity = "Length", unit = "m", fixed = j5.startValueFixed);
//   Real j5.qd(quantity = "Velocity", unit = "m/s", fixed = j5.startValueFixed);
//   Real j5.qdd(quantity = "Acceleration", unit = "m/s2");
//   Real j5.qq(quantity = "Length", unit = "m", start = -0.5, fixed = false);
//   Real j5.nn[1];
//   Real j5.nn[2];
//   Real j5.nn[3];
//   Real j5.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real j5.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real j5.vaux[3](quantity = "Velocity", unit = "m/s");
//   Real j5.axis.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j5.axis.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   Real j5.bearing.s(quantity = "Length", unit = "m") "absolute position of flange";
//   Real j5.bearing.f(quantity = "Force", unit = "N") "cut force directed into flange";
//   constant Real b7.pi = 3.14159265358979;
//   constant Real b7.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b7.frame_a.r0[1](quantity = "Length", unit = "m") = b7.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.frame_a.r0[2](quantity = "Length", unit = "m") = b7.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.frame_a.r0[3](quantity = "Length", unit = "m") = b7.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.frame_a.S[1,1] = b7.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[1,2] = b7.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[1,3] = b7.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[2,1] = b7.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[2,2] = b7.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[2,3] = b7.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[3,1] = b7.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[3,2] = b7.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.S[3,3] = b7.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b7.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b7.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b7.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b7.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b7.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b7.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_a.f[1](quantity = "Force", unit = "N") = b7.fa[1];
//   Real b7.frame_a.f[2](quantity = "Force", unit = "N") = b7.fa[2];
//   Real b7.frame_a.f[3](quantity = "Force", unit = "N") = b7.fa[3];
//   Real b7.frame_a.t[1](quantity = "Torque", unit = "N.m") = b7.ta[1];
//   Real b7.frame_a.t[2](quantity = "Torque", unit = "N.m") = b7.ta[2];
//   Real b7.frame_a.t[3](quantity = "Torque", unit = "N.m") = b7.ta[3];
//   output Real b7.frame_b.r0[1](quantity = "Length", unit = "m") = b7.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.frame_b.r0[2](quantity = "Length", unit = "m") = b7.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.frame_b.r0[3](quantity = "Length", unit = "m") = b7.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.frame_b.S[1,1] = b7.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[1,2] = b7.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[1,3] = b7.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[2,1] = b7.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[2,2] = b7.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[2,3] = b7.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[3,1] = b7.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[3,2] = b7.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.S[3,3] = b7.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b7.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b7.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b7.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b7.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b7.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b7.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.frame_b.f[1](quantity = "Force", unit = "N") = -b7.fb[1];
//   Real b7.frame_b.f[2](quantity = "Force", unit = "N") = -b7.fb[2];
//   Real b7.frame_b.f[3](quantity = "Force", unit = "N") = -b7.fb[3];
//   Real b7.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b7.tb[1];
//   Real b7.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b7.tb[2];
//   Real b7.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b7.tb[3];
//   protected Real b7.Sa[1,1](start = 1.0);
//   protected Real b7.Sa[1,2](start = 0.0);
//   protected Real b7.Sa[1,3](start = 0.0);
//   protected Real b7.Sa[2,1](start = 0.0);
//   protected Real b7.Sa[2,2](start = 1.0);
//   protected Real b7.Sa[2,3](start = 0.0);
//   protected Real b7.Sa[3,1](start = 0.0);
//   protected Real b7.Sa[3,2](start = 0.0);
//   protected Real b7.Sa[3,3](start = 1.0);
//   protected Real b7.r0a[1](quantity = "Length", unit = "m");
//   protected Real b7.r0a[2](quantity = "Length", unit = "m");
//   protected Real b7.r0a[3](quantity = "Length", unit = "m");
//   protected Real b7.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.fa[1](quantity = "Force", unit = "N");
//   protected Real b7.fa[2](quantity = "Force", unit = "N");
//   protected Real b7.fa[3](quantity = "Force", unit = "N");
//   protected Real b7.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b7.Sb[1,1](start = 1.0);
//   protected Real b7.Sb[1,2](start = 0.0);
//   protected Real b7.Sb[1,3](start = 0.0);
//   protected Real b7.Sb[2,1](start = 0.0);
//   protected Real b7.Sb[2,2](start = 1.0);
//   protected Real b7.Sb[2,3](start = 0.0);
//   protected Real b7.Sb[3,1](start = 0.0);
//   protected Real b7.Sb[3,2](start = 0.0);
//   protected Real b7.Sb[3,3](start = 1.0);
//   protected Real b7.r0b[1](quantity = "Length", unit = "m");
//   protected Real b7.r0b[2](quantity = "Length", unit = "m");
//   protected Real b7.r0b[3](quantity = "Length", unit = "m");
//   protected Real b7.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.fb[1](quantity = "Force", unit = "N");
//   protected Real b7.fb[2](quantity = "Force", unit = "N");
//   protected Real b7.fb[3](quantity = "Force", unit = "N");
//   protected Real b7.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b7.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.r[3](quantity = "Length", unit = "m") = -0.3 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real b7.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real b7.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real b7.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real b7.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real b7.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real b7.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String b7.Shape = "box" "Name of shape (see info text)";
//   parameter Real b7.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b7.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b7.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b7.LengthDirection[1](quantity = "Length", unit = "m") = b7.r[1] - b7.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real b7.LengthDirection[2](quantity = "Length", unit = "m") = b7.r[2] - b7.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real b7.LengthDirection[3](quantity = "Length", unit = "m") = b7.r[3] - b7.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real b7.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b7.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b7.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b7.Length(quantity = "Length", unit = "m") = sqrt((b7.r[1] - b7.r0[1]) ^ 2.0 + ((b7.r[2] - b7.r0[2]) ^ 2.0 + (b7.r[3] - b7.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real b7.Width(quantity = "Length", unit = "m") = 0.03 "Width of shape";
//   parameter Real b7.Height(quantity = "Length", unit = "m") = 0.03 "Height of shape";
//   parameter Real b7.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real b7.Material[2] = 1.0 "Color and specular coefficient";
//   parameter Real b7.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real b7.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real b7.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real b7.body.pi = 3.14159265358979;
//   constant Real b7.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b7.body.frame_a.r0[1](quantity = "Length", unit = "m") = b7.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.frame_a.r0[2](quantity = "Length", unit = "m") = b7.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.frame_a.r0[3](quantity = "Length", unit = "m") = b7.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.body.frame_a.S[1,1] = b7.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[1,2] = b7.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[1,3] = b7.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[2,1] = b7.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[2,2] = b7.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[2,3] = b7.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[3,1] = b7.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[3,2] = b7.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.S[3,3] = b7.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b7.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b7.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b7.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b7.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b7.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b7.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_a.f[1](quantity = "Force", unit = "N") = b7.body.fa[1];
//   Real b7.body.frame_a.f[2](quantity = "Force", unit = "N") = b7.body.fa[2];
//   Real b7.body.frame_a.f[3](quantity = "Force", unit = "N") = b7.body.fa[3];
//   Real b7.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b7.body.ta[1];
//   Real b7.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b7.body.ta[2];
//   Real b7.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b7.body.ta[3];
//   output Real b7.body.frame_b.r0[1](quantity = "Length", unit = "m") = b7.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.body.frame_b.r0[2](quantity = "Length", unit = "m") = b7.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.body.frame_b.r0[3](quantity = "Length", unit = "m") = b7.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.body.frame_b.S[1,1] = b7.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[1,2] = b7.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[1,3] = b7.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[2,1] = b7.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[2,2] = b7.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[2,3] = b7.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[3,1] = b7.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[3,2] = b7.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.S[3,3] = b7.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b7.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b7.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b7.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b7.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b7.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b7.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frame_b.f[1](quantity = "Force", unit = "N") = -b7.body.fb[1];
//   Real b7.body.frame_b.f[2](quantity = "Force", unit = "N") = -b7.body.fb[2];
//   Real b7.body.frame_b.f[3](quantity = "Force", unit = "N") = -b7.body.fb[3];
//   Real b7.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b7.body.tb[1];
//   Real b7.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b7.body.tb[2];
//   Real b7.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b7.body.tb[3];
//   protected Real b7.body.Sa[1,1](start = 1.0);
//   protected Real b7.body.Sa[1,2](start = 0.0);
//   protected Real b7.body.Sa[1,3](start = 0.0);
//   protected Real b7.body.Sa[2,1](start = 0.0);
//   protected Real b7.body.Sa[2,2](start = 1.0);
//   protected Real b7.body.Sa[2,3](start = 0.0);
//   protected Real b7.body.Sa[3,1](start = 0.0);
//   protected Real b7.body.Sa[3,2](start = 0.0);
//   protected Real b7.body.Sa[3,3](start = 1.0);
//   protected Real b7.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b7.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b7.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b7.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b7.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b7.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b7.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.Sb[1,1](start = 1.0);
//   protected Real b7.body.Sb[1,2](start = 0.0);
//   protected Real b7.body.Sb[1,3](start = 0.0);
//   protected Real b7.body.Sb[2,1](start = 0.0);
//   protected Real b7.body.Sb[2,2](start = 1.0);
//   protected Real b7.body.Sb[2,3](start = 0.0);
//   protected Real b7.body.Sb[3,1](start = 0.0);
//   protected Real b7.body.Sb[3,2](start = 0.0);
//   protected Real b7.body.Sb[3,3](start = 1.0);
//   protected Real b7.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real b7.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real b7.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real b7.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.fb[1](quantity = "Force", unit = "N");
//   protected Real b7.body.fb[2](quantity = "Force", unit = "N");
//   protected Real b7.body.fb[3](quantity = "Force", unit = "N");
//   protected Real b7.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b7.body.r[1](quantity = "Length", unit = "m") = b7.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.body.r[2](quantity = "Length", unit = "m") = b7.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.body.r[3](quantity = "Length", unit = "m") = b7.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b7.body.rCM[1](quantity = "Length", unit = "m") = b7.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.body.rCM[2](quantity = "Length", unit = "m") = b7.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.body.rCM[3](quantity = "Length", unit = "m") = b7.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b7.body.m(quantity = "Mass", unit = "kg", min = 0.0) = b7.m "Mass of body";
//   parameter Real b7.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I11 "(1,1) element of inertia tensor";
//   parameter Real b7.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I22 "(2,2) element of inertia tensor";
//   parameter Real b7.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I33 "(3,3) element of inertia tensor";
//   parameter Real b7.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I21 "(2,1) element of inertia tensor";
//   parameter Real b7.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I31 "(3,1) element of inertia tensor";
//   parameter Real b7.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = b7.I32 "(3,2) element of inertia tensor";
//   constant Real b7.body.frameTranslation.pi = 3.14159265358979;
//   constant Real b7.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b7.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.body.frameTranslation.frame_a.S[1,1] = b7.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[1,2] = b7.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[1,3] = b7.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[2,1] = b7.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[2,2] = b7.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[2,3] = b7.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[3,1] = b7.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[3,2] = b7.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.S[3,3] = b7.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b7.body.frameTranslation.fa[1];
//   Real b7.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b7.body.frameTranslation.fa[2];
//   Real b7.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b7.body.frameTranslation.fa[3];
//   Real b7.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b7.body.frameTranslation.ta[1];
//   Real b7.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b7.body.frameTranslation.ta[2];
//   Real b7.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b7.body.frameTranslation.ta[3];
//   output Real b7.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b7.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b7.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.body.frameTranslation.frame_b.S[1,1] = b7.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[1,2] = b7.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[1,3] = b7.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[2,1] = b7.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[2,2] = b7.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[2,3] = b7.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[3,1] = b7.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[3,2] = b7.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.S[3,3] = b7.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b7.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b7.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b7.body.frameTranslation.fb[1];
//   Real b7.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b7.body.frameTranslation.fb[2];
//   Real b7.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b7.body.frameTranslation.fb[3];
//   Real b7.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b7.body.frameTranslation.tb[1];
//   Real b7.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b7.body.frameTranslation.tb[2];
//   Real b7.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b7.body.frameTranslation.tb[3];
//   protected Real b7.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b7.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b7.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b7.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b7.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b7.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b7.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b7.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b7.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b7.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b7.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b7.body.frameTranslation.r[1](quantity = "Length", unit = "m") = b7.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b7.body.frameTranslation.r[2](quantity = "Length", unit = "m") = b7.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b7.body.frameTranslation.r[3](quantity = "Length", unit = "m") = b7.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b7.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b7.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = b7.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = b7.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = b7.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.body.body.frame_a.S[1,1] = b7.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[1,2] = b7.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[1,3] = b7.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[2,1] = b7.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[2,2] = b7.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[2,3] = b7.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[3,1] = b7.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[3,2] = b7.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.S[3,3] = b7.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b7.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b7.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b7.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b7.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b7.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b7.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.body.body.frame_a.f[1](quantity = "Force", unit = "N") = b7.body.body.fa[1];
//   Real b7.body.body.frame_a.f[2](quantity = "Force", unit = "N") = b7.body.body.fa[2];
//   Real b7.body.body.frame_a.f[3](quantity = "Force", unit = "N") = b7.body.body.fa[3];
//   Real b7.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b7.body.body.ta[1];
//   Real b7.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b7.body.body.ta[2];
//   Real b7.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b7.body.body.ta[3];
//   protected Real b7.body.body.Sa[1,1](start = 1.0);
//   protected Real b7.body.body.Sa[1,2](start = 0.0);
//   protected Real b7.body.body.Sa[1,3](start = 0.0);
//   protected Real b7.body.body.Sa[2,1](start = 0.0);
//   protected Real b7.body.body.Sa[2,2](start = 1.0);
//   protected Real b7.body.body.Sa[2,3](start = 0.0);
//   protected Real b7.body.body.Sa[3,1](start = 0.0);
//   protected Real b7.body.body.Sa[3,2](start = 0.0);
//   protected Real b7.body.body.Sa[3,3](start = 1.0);
//   protected Real b7.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b7.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b7.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b7.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b7.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b7.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b7.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b7.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b7.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real b7.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real b7.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real b7.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b7.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real b7.vis.frame_a.r0[1](quantity = "Length", unit = "m") = b7.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.vis.frame_a.r0[2](quantity = "Length", unit = "m") = b7.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b7.vis.frame_a.r0[3](quantity = "Length", unit = "m") = b7.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b7.vis.frame_a.S[1,1] = b7.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[1,2] = b7.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[1,3] = b7.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[2,1] = b7.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[2,2] = b7.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[2,3] = b7.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[3,1] = b7.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[3,2] = b7.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.S[3,3] = b7.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b7.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b7.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b7.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b7.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b7.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b7.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b7.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b7.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b7.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b7.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b7.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b7.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b7.vis.frame_a.f[1](quantity = "Force", unit = "N") = b7.vis.fa[1];
//   Real b7.vis.frame_a.f[2](quantity = "Force", unit = "N") = b7.vis.fa[2];
//   Real b7.vis.frame_a.f[3](quantity = "Force", unit = "N") = b7.vis.fa[3];
//   Real b7.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = b7.vis.ta[1];
//   Real b7.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = b7.vis.ta[2];
//   Real b7.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = b7.vis.ta[3];
//   protected Real b7.vis.Sa[1,1](start = 1.0);
//   protected Real b7.vis.Sa[1,2](start = 0.0);
//   protected Real b7.vis.Sa[1,3](start = 0.0);
//   protected Real b7.vis.Sa[2,1](start = 0.0);
//   protected Real b7.vis.Sa[2,2](start = 1.0);
//   protected Real b7.vis.Sa[2,3](start = 0.0);
//   protected Real b7.vis.Sa[3,1](start = 0.0);
//   protected Real b7.vis.Sa[3,2](start = 0.0);
//   protected Real b7.vis.Sa[3,3](start = 1.0);
//   protected Real b7.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real b7.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real b7.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real b7.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b7.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b7.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b7.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b7.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b7.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b7.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real b7.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real b7.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real b7.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b7.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b7.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String b7.vis.Shape = b7.Shape "Name of shape (see info text)";
//   parameter Real b7.vis.r0[1] = b7.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real b7.vis.r0[2] = b7.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real b7.vis.r0[3] = b7.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real b7.vis.LengthDirection[1] = b7.LengthDirection[1] "Vector in length direction";
//   parameter Real b7.vis.LengthDirection[2] = b7.LengthDirection[2] "Vector in length direction";
//   parameter Real b7.vis.LengthDirection[3] = b7.LengthDirection[3] "Vector in length direction";
//   parameter Real b7.vis.WidthDirection[1] = b7.WidthDirection[1] "Vector in width direction";
//   parameter Real b7.vis.WidthDirection[2] = b7.WidthDirection[2] "Vector in width direction";
//   parameter Real b7.vis.WidthDirection[3] = b7.WidthDirection[3] "Vector in width direction";
//   parameter Real b7.vis.Length = b7.Length "Length of shape [m]";
//   parameter Real b7.vis.Width = b7.Width "Width of shape [m]";
//   parameter Real b7.vis.Height = b7.Height "Height of shape [m]";
//   parameter Real b7.vis.Material[1] = b7.Material[1] "Color and specular coefficient";
//   parameter Real b7.vis.Material[2] = b7.Material[2] "Color and specular coefficient";
//   parameter Real b7.vis.Material[3] = b7.Material[3] "Color and specular coefficient";
//   parameter Real b7.vis.Material[4] = b7.Material[4] "Color and specular coefficient";
//   parameter Real b7.vis.Extra = b7.Extra "Additional parameter for cone and pipe";
//   Real b7.vis.nLength[1];
//   Real b7.vis.nLength[2];
//   Real b7.vis.nLength[3];
//   Real b7.vis.nWidth[1];
//   Real b7.vis.nWidth[2];
//   Real b7.vis.nWidth[3];
//   Real b7.vis.nHeight[1];
//   Real b7.vis.nHeight[2];
//   Real b7.vis.nHeight[3];
//   parameter Real b7.vis.vis.r0[1] = b7.vis.r0[1] "Origin of visual object.";
//   parameter Real b7.vis.vis.r0[2] = b7.vis.r0[2] "Origin of visual object.";
//   parameter Real b7.vis.vis.r0[3] = b7.vis.r0[3] "Origin of visual object.";
//   parameter Real b7.vis.vis.Length = b7.vis.Length "Length of visual object.";
//   parameter Real b7.vis.vis.Width = b7.vis.Width "Width of visual object.";
//   parameter Real b7.vis.vis.Height = b7.vis.Height "Height of visual object.";
//   parameter Real b7.vis.vis.LengthDirection[1] = b7.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real b7.vis.vis.LengthDirection[2] = b7.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real b7.vis.vis.LengthDirection[3] = b7.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real b7.vis.vis.WidthDirection[1] = b7.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real b7.vis.vis.WidthDirection[2] = b7.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real b7.vis.vis.WidthDirection[3] = b7.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String b7.vis.vis.Shape = b7.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b7.vis.vis.Material[1] = b7.vis.Material[1] "Color and specular coefficient.";
//   parameter Real b7.vis.vis.Material[2] = b7.vis.Material[2] "Color and specular coefficient.";
//   parameter Real b7.vis.vis.Material[3] = b7.vis.Material[3] "Color and specular coefficient.";
//   parameter Real b7.vis.vis.Material[4] = b7.vis.Material[4] "Color and specular coefficient.";
//   parameter Real b7.vis.vis.Extra = b7.vis.Extra "Additional size data for some of the shape types";
//   input Real b7.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b7.vis.vis.r[1] "Position of visual object.";
//   input Real b7.vis.vis.r[2] "Position of visual object.";
//   input Real b7.vis.vis.r[3] "Position of visual object.";
//   Real b7.vis.vis.nLength[1];
//   Real b7.vis.vis.nLength[2];
//   Real b7.vis.vis.nLength[3];
//   Real b7.vis.vis.nWidth[1];
//   Real b7.vis.vis.nWidth[2];
//   Real b7.vis.vis.nWidth[3];
//   Real b7.vis.vis.nHeight[1];
//   Real b7.vis.vis.nHeight[2];
//   Real b7.vis.vis.nHeight[3];
//   parameter String b7.vis.vis.mcShape.shapeType = b7.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b7.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = b7.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b7.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = b7.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b7.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = b7.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b7.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = b7.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b7.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = b7.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b7.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = b7.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b7.vis.vis.mcShape.lengthDirection[1] = b7.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.lengthDirection[2] = b7.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.lengthDirection[3] = b7.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.widthDirection[1] = b7.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.widthDirection[2] = b7.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.widthDirection[3] = b7.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b7.vis.vis.mcShape.length(quantity = "Length", unit = "m") = b7.vis.vis.Length "Length of visual object";
//   input Real b7.vis.vis.mcShape.width(quantity = "Length", unit = "m") = b7.vis.vis.Width "Width of visual object";
//   input Real b7.vis.vis.mcShape.height(quantity = "Length", unit = "m") = b7.vis.vis.Height "Height of visual object";
//   input Real b7.vis.vis.mcShape.extra = b7.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real b7.vis.vis.mcShape.color[1] = 255.0 * b7.vis.vis.Material[1] "Color of shape";
//   input Real b7.vis.vis.mcShape.color[2] = 255.0 * b7.vis.vis.Material[2] "Color of shape";
//   input Real b7.vis.vis.mcShape.color[3] = 255.0 * b7.vis.vis.Material[3] "Color of shape";
//   input Real b7.vis.vis.mcShape.specularCoefficient = b7.vis.vis.Material[4];
//   input Real b7.vis.vis.mcShape.S[1,1] = b7.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[1,2] = b7.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[1,3] = b7.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[2,1] = b7.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[2,2] = b7.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[2,3] = b7.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[3,1] = b7.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[3,2] = b7.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b7.vis.vis.mcShape.S[3,3] = b7.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[1,1] = b7.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[1,2] = b7.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[1,3] = b7.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[2,1] = b7.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[2,2] = b7.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[2,3] = b7.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[3,1] = b7.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[3,2] = b7.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b7.vis.vis.mcShape.Sshape[3,3] = b7.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b7.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b7.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b7.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b7.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b7.vis.vis.mcShape.abs_n_x = sqrt(b7.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (b7.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + b7.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real b7.vis.vis.mcShape.e_x[1] = if noEvent(b7.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else b7.vis.vis.mcShape.lengthDirection[1] / b7.vis.vis.mcShape.abs_n_x;
//   Real b7.vis.vis.mcShape.e_x[2] = if noEvent(b7.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b7.vis.vis.mcShape.lengthDirection[2] / b7.vis.vis.mcShape.abs_n_x;
//   Real b7.vis.vis.mcShape.e_x[3] = if noEvent(b7.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b7.vis.vis.mcShape.lengthDirection[3] / b7.vis.vis.mcShape.abs_n_x;
//   Real b7.vis.vis.mcShape.n_z_aux[1] = b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.widthDirection[3] - b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.widthDirection[2];
//   Real b7.vis.vis.mcShape.n_z_aux[2] = b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.widthDirection[1] - b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.widthDirection[3];
//   Real b7.vis.vis.mcShape.n_z_aux[3] = b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.widthDirection[2] - b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.widthDirection[1];
//   Real b7.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]},if noEvent(b7.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b7.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b7.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b7.vis.vis.mcShape.widthDirection[1],b7.vis.vis.mcShape.widthDirection[2],b7.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b7.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]})[1];
//   Real b7.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]},if noEvent(b7.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b7.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b7.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b7.vis.vis.mcShape.widthDirection[1],b7.vis.vis.mcShape.widthDirection[2],b7.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b7.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]})[2];
//   Real b7.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]},if noEvent(b7.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b7.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b7.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b7.vis.vis.mcShape.widthDirection[1],b7.vis.vis.mcShape.widthDirection[2],b7.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b7.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b7.vis.vis.mcShape.e_x[1],b7.vis.vis.mcShape.e_x[2],b7.vis.vis.mcShape.e_x[3]})[3];
//   Real b7.vis.vis.mcShape.e_z[1] = b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.e_y[3] - b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.e_y[2];
//   Real b7.vis.vis.mcShape.e_z[2] = b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.e_y[1] - b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.e_y[3];
//   Real b7.vis.vis.mcShape.e_z[3] = b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.e_y[2] - b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.e_y[1];
//   protected output Real b7.vis.vis.mcShape.Form;
//   protected output Real b7.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b7.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b7.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b7.vis.vis.mcShape.Material;
//   protected output Real b7.vis.vis.mcShape.Extra;
//   constant Real j4.pi = 3.14159265358979;
//   constant Real j4.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j4.frame_a.r0[1](quantity = "Length", unit = "m") = j4.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j4.frame_a.r0[2](quantity = "Length", unit = "m") = j4.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j4.frame_a.r0[3](quantity = "Length", unit = "m") = j4.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j4.frame_a.S[1,1] = j4.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[1,2] = j4.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[1,3] = j4.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[2,1] = j4.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[2,2] = j4.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[2,3] = j4.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[3,1] = j4.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[3,2] = j4.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.S[3,3] = j4.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j4.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j4.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j4.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j4.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j4.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j4.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j4.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j4.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j4.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_a.f[1](quantity = "Force", unit = "N") = j4.fa[1];
//   Real j4.frame_a.f[2](quantity = "Force", unit = "N") = j4.fa[2];
//   Real j4.frame_a.f[3](quantity = "Force", unit = "N") = j4.fa[3];
//   Real j4.frame_a.t[1](quantity = "Torque", unit = "N.m") = j4.ta[1];
//   Real j4.frame_a.t[2](quantity = "Torque", unit = "N.m") = j4.ta[2];
//   Real j4.frame_a.t[3](quantity = "Torque", unit = "N.m") = j4.ta[3];
//   input Real j4.frame_b.r0[1](quantity = "Length", unit = "m") = j4.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j4.frame_b.r0[2](quantity = "Length", unit = "m") = j4.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j4.frame_b.r0[3](quantity = "Length", unit = "m") = j4.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j4.frame_b.S[1,1] = j4.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[1,2] = j4.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[1,3] = j4.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[2,1] = j4.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[2,2] = j4.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[2,3] = j4.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[3,1] = j4.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[3,2] = j4.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.S[3,3] = j4.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j4.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j4.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j4.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j4.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j4.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j4.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j4.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j4.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j4.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j4.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j4.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j4.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j4.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j4.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j4.frame_b.f[1](quantity = "Force", unit = "N") = -j4.fb[1];
//   Real j4.frame_b.f[2](quantity = "Force", unit = "N") = -j4.fb[2];
//   Real j4.frame_b.f[3](quantity = "Force", unit = "N") = -j4.fb[3];
//   Real j4.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j4.tb[1];
//   Real j4.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j4.tb[2];
//   Real j4.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j4.tb[3];
//   protected Real j4.Sa[1,1](start = 1.0);
//   protected Real j4.Sa[1,2](start = 0.0);
//   protected Real j4.Sa[1,3](start = 0.0);
//   protected Real j4.Sa[2,1](start = 0.0);
//   protected Real j4.Sa[2,2](start = 1.0);
//   protected Real j4.Sa[2,3](start = 0.0);
//   protected Real j4.Sa[3,1](start = 0.0);
//   protected Real j4.Sa[3,2](start = 0.0);
//   protected Real j4.Sa[3,3](start = 1.0);
//   protected Real j4.r0a[1](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j4.r0a[2](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j4.r0a[3](quantity = "Length", unit = "m", start = 1.0);
//   protected Real j4.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j4.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j4.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j4.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.fa[1](quantity = "Force", unit = "N");
//   protected Real j4.fa[2](quantity = "Force", unit = "N");
//   protected Real j4.fa[3](quantity = "Force", unit = "N");
//   protected Real j4.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j4.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j4.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j4.Sb[1,1](start = 1.0);
//   protected Real j4.Sb[1,2](start = 0.0);
//   protected Real j4.Sb[1,3](start = 0.0);
//   protected Real j4.Sb[2,1](start = 0.0);
//   protected Real j4.Sb[2,2](start = 1.0);
//   protected Real j4.Sb[2,3](start = 0.0);
//   protected Real j4.Sb[3,1](start = 0.0);
//   protected Real j4.Sb[3,2](start = 0.0);
//   protected Real j4.Sb[3,3](start = 1.0);
//   protected Real j4.r0b[1](quantity = "Length", unit = "m");
//   protected Real j4.r0b[2](quantity = "Length", unit = "m");
//   protected Real j4.r0b[3](quantity = "Length", unit = "m");
//   protected Real j4.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j4.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j4.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j4.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j4.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j4.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j4.fb[1](quantity = "Force", unit = "N");
//   protected Real j4.fb[2](quantity = "Force", unit = "N");
//   protected Real j4.fb[3](quantity = "Force", unit = "N");
//   protected Real j4.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j4.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j4.tb[3](quantity = "Torque", unit = "N.m");
//   Real j4.S_rel[1,1];
//   Real j4.S_rel[1,2];
//   Real j4.S_rel[1,3];
//   Real j4.S_rel[2,1];
//   Real j4.S_rel[2,2];
//   Real j4.S_rel[2,3];
//   Real j4.S_rel[3,1];
//   Real j4.S_rel[3,2];
//   Real j4.S_rel[3,3];
//   Real j4.r_rela[1](quantity = "Length", unit = "m");
//   Real j4.r_rela[2](quantity = "Length", unit = "m");
//   Real j4.r_rela[3](quantity = "Length", unit = "m");
//   Real j4.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j4.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j4.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j4.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j4.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j4.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j4.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j4.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j4.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j4.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j4.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j4.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j4.vaux[1](quantity = "Velocity", unit = "m/s");
//   Real j4.vaux[2](quantity = "Velocity", unit = "m/s");
//   Real j4.vaux[3](quantity = "Velocity", unit = "m/s");
//   Real j4.fc[1](quantity = "Force", unit = "N") "Constraint forces in direction of fa";
//   Real j4.fc[2](quantity = "Force", unit = "N") "Constraint forces in direction of fa";
//   Real j4.fc[3](quantity = "Force", unit = "N") "Constraint forces in direction of fa";
//   protected Real j4.constraintResidue[1];
//   protected Real j4.constraintResidue[2];
//   protected Real j4.constraintResidue[3];
//   protected Real j4.constraintResidue_d[1];
//   protected Real j4.constraintResidue_d[2];
//   protected Real j4.constraintResidue_d[3];
//   protected Real j4.constraintResidue_dd[1];
//   protected Real j4.constraintResidue_dd[2];
//   protected Real j4.constraintResidue_dd[3];
//   constant Real j6.pi = 3.14159265358979;
//   constant Real j6.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j6.frame_a.r0[1](quantity = "Length", unit = "m") = j6.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j6.frame_a.r0[2](quantity = "Length", unit = "m") = j6.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j6.frame_a.r0[3](quantity = "Length", unit = "m") = j6.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j6.frame_a.S[1,1] = j6.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[1,2] = j6.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[1,3] = j6.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[2,1] = j6.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[2,2] = j6.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[2,3] = j6.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[3,1] = j6.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[3,2] = j6.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.S[3,3] = j6.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j6.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j6.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j6.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j6.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j6.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j6.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j6.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j6.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j6.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_a.f[1](quantity = "Force", unit = "N") = j6.fa[1];
//   Real j6.frame_a.f[2](quantity = "Force", unit = "N") = j6.fa[2];
//   Real j6.frame_a.f[3](quantity = "Force", unit = "N") = j6.fa[3];
//   Real j6.frame_a.t[1](quantity = "Torque", unit = "N.m") = j6.ta[1];
//   Real j6.frame_a.t[2](quantity = "Torque", unit = "N.m") = j6.ta[2];
//   Real j6.frame_a.t[3](quantity = "Torque", unit = "N.m") = j6.ta[3];
//   output Real j6.frame_b.r0[1](quantity = "Length", unit = "m") = j6.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j6.frame_b.r0[2](quantity = "Length", unit = "m") = j6.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j6.frame_b.r0[3](quantity = "Length", unit = "m") = j6.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j6.frame_b.S[1,1] = j6.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[1,2] = j6.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[1,3] = j6.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[2,1] = j6.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[2,2] = j6.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[2,3] = j6.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[3,1] = j6.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[3,2] = j6.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.S[3,3] = j6.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j6.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j6.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j6.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j6.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j6.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j6.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j6.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j6.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j6.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j6.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j6.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j6.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j6.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j6.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j6.frame_b.f[1](quantity = "Force", unit = "N") = -j6.fb[1];
//   Real j6.frame_b.f[2](quantity = "Force", unit = "N") = -j6.fb[2];
//   Real j6.frame_b.f[3](quantity = "Force", unit = "N") = -j6.fb[3];
//   Real j6.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j6.tb[1];
//   Real j6.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j6.tb[2];
//   Real j6.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j6.tb[3];
//   protected Real j6.Sa[1,1](start = 1.0);
//   protected Real j6.Sa[1,2](start = 0.0);
//   protected Real j6.Sa[1,3](start = 0.0);
//   protected Real j6.Sa[2,1](start = 0.0);
//   protected Real j6.Sa[2,2](start = 1.0);
//   protected Real j6.Sa[2,3](start = 0.0);
//   protected Real j6.Sa[3,1](start = 0.0);
//   protected Real j6.Sa[3,2](start = 0.0);
//   protected Real j6.Sa[3,3](start = 1.0);
//   protected Real j6.r0a[1](quantity = "Length", unit = "m");
//   protected Real j6.r0a[2](quantity = "Length", unit = "m");
//   protected Real j6.r0a[3](quantity = "Length", unit = "m");
//   protected Real j6.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j6.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j6.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j6.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.fa[1](quantity = "Force", unit = "N");
//   protected Real j6.fa[2](quantity = "Force", unit = "N");
//   protected Real j6.fa[3](quantity = "Force", unit = "N");
//   protected Real j6.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j6.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j6.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j6.Sb[1,1](start = 1.0);
//   protected Real j6.Sb[1,2](start = 0.0);
//   protected Real j6.Sb[1,3](start = 0.0);
//   protected Real j6.Sb[2,1](start = 0.0);
//   protected Real j6.Sb[2,2](start = 1.0);
//   protected Real j6.Sb[2,3](start = 0.0);
//   protected Real j6.Sb[3,1](start = 0.0);
//   protected Real j6.Sb[3,2](start = 0.0);
//   protected Real j6.Sb[3,3](start = 1.0);
//   protected Real j6.r0b[1](quantity = "Length", unit = "m");
//   protected Real j6.r0b[2](quantity = "Length", unit = "m");
//   protected Real j6.r0b[3](quantity = "Length", unit = "m");
//   protected Real j6.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j6.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j6.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j6.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j6.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j6.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j6.fb[1](quantity = "Force", unit = "N");
//   protected Real j6.fb[2](quantity = "Force", unit = "N");
//   protected Real j6.fb[3](quantity = "Force", unit = "N");
//   protected Real j6.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j6.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j6.tb[3](quantity = "Torque", unit = "N.m");
//   Real j6.S_rel[1,1];
//   Real j6.S_rel[1,2];
//   Real j6.S_rel[1,3];
//   Real j6.S_rel[2,1];
//   Real j6.S_rel[2,2];
//   Real j6.S_rel[2,3];
//   Real j6.S_rel[3,1];
//   Real j6.S_rel[3,2];
//   Real j6.S_rel[3,3];
//   Real j6.r_rela[1](quantity = "Length", unit = "m");
//   Real j6.r_rela[2](quantity = "Length", unit = "m");
//   Real j6.r_rela[3](quantity = "Length", unit = "m");
//   Real j6.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j6.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j6.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j6.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j6.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j6.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j6.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j6.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j6.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j6.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j6.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j6.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real j6.n[1] = -1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j6.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j6.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j6.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean j6.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real j6.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = j6.startValueFixed);
//   Real j6.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = j6.startValueFixed);
//   Real j6.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j6.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real j6.nn[1];
//   Real j6.nn[2];
//   Real j6.nn[3];
//   Real j6.sinq;
//   Real j6.cosq;
//   Real j6.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j6.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j6.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j6.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real j7.pi = 3.14159265358979;
//   constant Real j7.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real j7.frame_a.r0[1](quantity = "Length", unit = "m") = j7.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j7.frame_a.r0[2](quantity = "Length", unit = "m") = j7.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real j7.frame_a.r0[3](quantity = "Length", unit = "m") = j7.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j7.frame_a.S[1,1] = j7.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[1,2] = j7.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[1,3] = j7.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[2,1] = j7.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[2,2] = j7.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[2,3] = j7.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[3,1] = j7.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[3,2] = j7.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.S[3,3] = j7.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_a.v[1](quantity = "Velocity", unit = "m/s") = j7.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_a.v[2](quantity = "Velocity", unit = "m/s") = j7.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_a.v[3](quantity = "Velocity", unit = "m/s") = j7.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = j7.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = j7.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = j7.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j7.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j7.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j7.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_a.f[1](quantity = "Force", unit = "N") = j7.fa[1];
//   Real j7.frame_a.f[2](quantity = "Force", unit = "N") = j7.fa[2];
//   Real j7.frame_a.f[3](quantity = "Force", unit = "N") = j7.fa[3];
//   Real j7.frame_a.t[1](quantity = "Torque", unit = "N.m") = j7.ta[1];
//   Real j7.frame_a.t[2](quantity = "Torque", unit = "N.m") = j7.ta[2];
//   Real j7.frame_a.t[3](quantity = "Torque", unit = "N.m") = j7.ta[3];
//   output Real j7.frame_b.r0[1](quantity = "Length", unit = "m") = j7.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j7.frame_b.r0[2](quantity = "Length", unit = "m") = j7.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real j7.frame_b.r0[3](quantity = "Length", unit = "m") = j7.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real j7.frame_b.S[1,1] = j7.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[1,2] = j7.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[1,3] = j7.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[2,1] = j7.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[2,2] = j7.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[2,3] = j7.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[3,1] = j7.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[3,2] = j7.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.S[3,3] = j7.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real j7.frame_b.v[1](quantity = "Velocity", unit = "m/s") = j7.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_b.v[2](quantity = "Velocity", unit = "m/s") = j7.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_b.v[3](quantity = "Velocity", unit = "m/s") = j7.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real j7.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = j7.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real j7.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = j7.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = j7.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = j7.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real j7.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = j7.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = j7.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = j7.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real j7.frame_b.f[1](quantity = "Force", unit = "N") = -j7.fb[1];
//   Real j7.frame_b.f[2](quantity = "Force", unit = "N") = -j7.fb[2];
//   Real j7.frame_b.f[3](quantity = "Force", unit = "N") = -j7.fb[3];
//   Real j7.frame_b.t[1](quantity = "Torque", unit = "N.m") = -j7.tb[1];
//   Real j7.frame_b.t[2](quantity = "Torque", unit = "N.m") = -j7.tb[2];
//   Real j7.frame_b.t[3](quantity = "Torque", unit = "N.m") = -j7.tb[3];
//   protected Real j7.Sa[1,1](start = 1.0);
//   protected Real j7.Sa[1,2](start = 0.0);
//   protected Real j7.Sa[1,3](start = 0.0);
//   protected Real j7.Sa[2,1](start = 0.0);
//   protected Real j7.Sa[2,2](start = 1.0);
//   protected Real j7.Sa[2,3](start = 0.0);
//   protected Real j7.Sa[3,1](start = 0.0);
//   protected Real j7.Sa[3,2](start = 0.0);
//   protected Real j7.Sa[3,3](start = 1.0);
//   protected Real j7.r0a[1](quantity = "Length", unit = "m");
//   protected Real j7.r0a[2](quantity = "Length", unit = "m");
//   protected Real j7.r0a[3](quantity = "Length", unit = "m");
//   protected Real j7.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real j7.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real j7.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real j7.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.fa[1](quantity = "Force", unit = "N");
//   protected Real j7.fa[2](quantity = "Force", unit = "N");
//   protected Real j7.fa[3](quantity = "Force", unit = "N");
//   protected Real j7.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real j7.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real j7.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real j7.Sb[1,1](start = 1.0);
//   protected Real j7.Sb[1,2](start = 0.0);
//   protected Real j7.Sb[1,3](start = 0.0);
//   protected Real j7.Sb[2,1](start = 0.0);
//   protected Real j7.Sb[2,2](start = 1.0);
//   protected Real j7.Sb[2,3](start = 0.0);
//   protected Real j7.Sb[3,1](start = 0.0);
//   protected Real j7.Sb[3,2](start = 0.0);
//   protected Real j7.Sb[3,3](start = 1.0);
//   protected Real j7.r0b[1](quantity = "Length", unit = "m");
//   protected Real j7.r0b[2](quantity = "Length", unit = "m");
//   protected Real j7.r0b[3](quantity = "Length", unit = "m");
//   protected Real j7.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real j7.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real j7.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real j7.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real j7.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real j7.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real j7.fb[1](quantity = "Force", unit = "N");
//   protected Real j7.fb[2](quantity = "Force", unit = "N");
//   protected Real j7.fb[3](quantity = "Force", unit = "N");
//   protected Real j7.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real j7.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real j7.tb[3](quantity = "Torque", unit = "N.m");
//   Real j7.S_rel[1,1];
//   Real j7.S_rel[1,2];
//   Real j7.S_rel[1,3];
//   Real j7.S_rel[2,1];
//   Real j7.S_rel[2,2];
//   Real j7.S_rel[2,3];
//   Real j7.S_rel[3,1];
//   Real j7.S_rel[3,2];
//   Real j7.S_rel[3,3];
//   Real j7.r_rela[1](quantity = "Length", unit = "m");
//   Real j7.r_rela[2](quantity = "Length", unit = "m");
//   Real j7.r_rela[3](quantity = "Length", unit = "m");
//   Real j7.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real j7.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real j7.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real j7.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j7.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j7.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real j7.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real j7.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real j7.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real j7.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j7.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j7.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real j7.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j7.n[2] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j7.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real j7.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean j7.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real j7.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = j7.startValueFixed);
//   Real j7.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = j7.startValueFixed);
//   Real j7.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real j7.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real j7.nn[1];
//   Real j7.nn[2];
//   Real j7.nn[3];
//   Real j7.sinq;
//   Real j7.cosq;
//   Real j7.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j7.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real j7.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real j7.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real b4.pi = 3.14159265358979;
//   constant Real b4.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b4.frame_a.r0[1](quantity = "Length", unit = "m") = b4.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.frame_a.r0[2](quantity = "Length", unit = "m") = b4.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.frame_a.r0[3](quantity = "Length", unit = "m") = b4.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.frame_a.S[1,1] = b4.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[1,2] = b4.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[1,3] = b4.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[2,1] = b4.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[2,2] = b4.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[2,3] = b4.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[3,1] = b4.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[3,2] = b4.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.S[3,3] = b4.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b4.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b4.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b4.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b4.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b4.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b4.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_a.f[1](quantity = "Force", unit = "N") = b4.fa[1];
//   Real b4.frame_a.f[2](quantity = "Force", unit = "N") = b4.fa[2];
//   Real b4.frame_a.f[3](quantity = "Force", unit = "N") = b4.fa[3];
//   Real b4.frame_a.t[1](quantity = "Torque", unit = "N.m") = b4.ta[1];
//   Real b4.frame_a.t[2](quantity = "Torque", unit = "N.m") = b4.ta[2];
//   Real b4.frame_a.t[3](quantity = "Torque", unit = "N.m") = b4.ta[3];
//   output Real b4.frame_b.r0[1](quantity = "Length", unit = "m") = b4.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.frame_b.r0[2](quantity = "Length", unit = "m") = b4.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.frame_b.r0[3](quantity = "Length", unit = "m") = b4.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.frame_b.S[1,1] = b4.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[1,2] = b4.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[1,3] = b4.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[2,1] = b4.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[2,2] = b4.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[2,3] = b4.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[3,1] = b4.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[3,2] = b4.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.S[3,3] = b4.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b4.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b4.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b4.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b4.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b4.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b4.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.frame_b.f[1](quantity = "Force", unit = "N") = -b4.fb[1];
//   Real b4.frame_b.f[2](quantity = "Force", unit = "N") = -b4.fb[2];
//   Real b4.frame_b.f[3](quantity = "Force", unit = "N") = -b4.fb[3];
//   Real b4.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b4.tb[1];
//   Real b4.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b4.tb[2];
//   Real b4.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b4.tb[3];
//   protected Real b4.Sa[1,1](start = 1.0);
//   protected Real b4.Sa[1,2](start = 0.0);
//   protected Real b4.Sa[1,3](start = 0.0);
//   protected Real b4.Sa[2,1](start = 0.0);
//   protected Real b4.Sa[2,2](start = 1.0);
//   protected Real b4.Sa[2,3](start = 0.0);
//   protected Real b4.Sa[3,1](start = 0.0);
//   protected Real b4.Sa[3,2](start = 0.0);
//   protected Real b4.Sa[3,3](start = 1.0);
//   protected Real b4.r0a[1](quantity = "Length", unit = "m");
//   protected Real b4.r0a[2](quantity = "Length", unit = "m");
//   protected Real b4.r0a[3](quantity = "Length", unit = "m");
//   protected Real b4.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.fa[1](quantity = "Force", unit = "N");
//   protected Real b4.fa[2](quantity = "Force", unit = "N");
//   protected Real b4.fa[3](quantity = "Force", unit = "N");
//   protected Real b4.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b4.Sb[1,1](start = 1.0);
//   protected Real b4.Sb[1,2](start = 0.0);
//   protected Real b4.Sb[1,3](start = 0.0);
//   protected Real b4.Sb[2,1](start = 0.0);
//   protected Real b4.Sb[2,2](start = 1.0);
//   protected Real b4.Sb[2,3](start = 0.0);
//   protected Real b4.Sb[3,1](start = 0.0);
//   protected Real b4.Sb[3,2](start = 0.0);
//   protected Real b4.Sb[3,3](start = 1.0);
//   protected Real b4.r0b[1](quantity = "Length", unit = "m");
//   protected Real b4.r0b[2](quantity = "Length", unit = "m");
//   protected Real b4.r0b[3](quantity = "Length", unit = "m");
//   protected Real b4.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.fb[1](quantity = "Force", unit = "N");
//   protected Real b4.fb[2](quantity = "Force", unit = "N");
//   protected Real b4.fb[3](quantity = "Force", unit = "N");
//   protected Real b4.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b4.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.r[3](quantity = "Length", unit = "m") = 0.5 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real b4.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real b4.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,2) element of inertia tensor";
//   parameter Real b4.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real b4.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real b4.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real b4.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String b4.Shape = "box" "Name of shape (see info text)";
//   parameter Real b4.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b4.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b4.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real b4.LengthDirection[1](quantity = "Length", unit = "m") = b4.r[1] - b4.r0[1] "Vector in length direction, resolved in frame_a";
//   parameter Real b4.LengthDirection[2](quantity = "Length", unit = "m") = b4.r[2] - b4.r0[2] "Vector in length direction, resolved in frame_a";
//   parameter Real b4.LengthDirection[3](quantity = "Length", unit = "m") = b4.r[3] - b4.r0[3] "Vector in length direction, resolved in frame_a";
//   parameter Real b4.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b4.WidthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b4.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real b4.Length(quantity = "Length", unit = "m") = sqrt((b4.r[1] - b4.r0[1]) ^ 2.0 + ((b4.r[2] - b4.r0[2]) ^ 2.0 + (b4.r[3] - b4.r0[3]) ^ 2.0)) "Length of shape";
//   parameter Real b4.Width(quantity = "Length", unit = "m") = 0.02 "Width of shape";
//   parameter Real b4.Height(quantity = "Length", unit = "m") = 0.02 "Height of shape";
//   parameter Real b4.Material[1] = 0.5 "Color and specular coefficient";
//   parameter Real b4.Material[2] = 0.5 "Color and specular coefficient";
//   parameter Real b4.Material[3] = 0.5 "Color and specular coefficient";
//   parameter Real b4.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real b4.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real b4.body.pi = 3.14159265358979;
//   constant Real b4.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b4.body.frame_a.r0[1](quantity = "Length", unit = "m") = b4.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.frame_a.r0[2](quantity = "Length", unit = "m") = b4.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.frame_a.r0[3](quantity = "Length", unit = "m") = b4.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.body.frame_a.S[1,1] = b4.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[1,2] = b4.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[1,3] = b4.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[2,1] = b4.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[2,2] = b4.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[2,3] = b4.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[3,1] = b4.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[3,2] = b4.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.S[3,3] = b4.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b4.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b4.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b4.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b4.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b4.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b4.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_a.f[1](quantity = "Force", unit = "N") = b4.body.fa[1];
//   Real b4.body.frame_a.f[2](quantity = "Force", unit = "N") = b4.body.fa[2];
//   Real b4.body.frame_a.f[3](quantity = "Force", unit = "N") = b4.body.fa[3];
//   Real b4.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b4.body.ta[1];
//   Real b4.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b4.body.ta[2];
//   Real b4.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b4.body.ta[3];
//   output Real b4.body.frame_b.r0[1](quantity = "Length", unit = "m") = b4.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.body.frame_b.r0[2](quantity = "Length", unit = "m") = b4.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.body.frame_b.r0[3](quantity = "Length", unit = "m") = b4.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.body.frame_b.S[1,1] = b4.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[1,2] = b4.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[1,3] = b4.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[2,1] = b4.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[2,2] = b4.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[2,3] = b4.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[3,1] = b4.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[3,2] = b4.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.S[3,3] = b4.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b4.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b4.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b4.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b4.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b4.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b4.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frame_b.f[1](quantity = "Force", unit = "N") = -b4.body.fb[1];
//   Real b4.body.frame_b.f[2](quantity = "Force", unit = "N") = -b4.body.fb[2];
//   Real b4.body.frame_b.f[3](quantity = "Force", unit = "N") = -b4.body.fb[3];
//   Real b4.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b4.body.tb[1];
//   Real b4.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b4.body.tb[2];
//   Real b4.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b4.body.tb[3];
//   protected Real b4.body.Sa[1,1](start = 1.0);
//   protected Real b4.body.Sa[1,2](start = 0.0);
//   protected Real b4.body.Sa[1,3](start = 0.0);
//   protected Real b4.body.Sa[2,1](start = 0.0);
//   protected Real b4.body.Sa[2,2](start = 1.0);
//   protected Real b4.body.Sa[2,3](start = 0.0);
//   protected Real b4.body.Sa[3,1](start = 0.0);
//   protected Real b4.body.Sa[3,2](start = 0.0);
//   protected Real b4.body.Sa[3,3](start = 1.0);
//   protected Real b4.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b4.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b4.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b4.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b4.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b4.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b4.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.Sb[1,1](start = 1.0);
//   protected Real b4.body.Sb[1,2](start = 0.0);
//   protected Real b4.body.Sb[1,3](start = 0.0);
//   protected Real b4.body.Sb[2,1](start = 0.0);
//   protected Real b4.body.Sb[2,2](start = 1.0);
//   protected Real b4.body.Sb[2,3](start = 0.0);
//   protected Real b4.body.Sb[3,1](start = 0.0);
//   protected Real b4.body.Sb[3,2](start = 0.0);
//   protected Real b4.body.Sb[3,3](start = 1.0);
//   protected Real b4.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real b4.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real b4.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real b4.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.fb[1](quantity = "Force", unit = "N");
//   protected Real b4.body.fb[2](quantity = "Force", unit = "N");
//   protected Real b4.body.fb[3](quantity = "Force", unit = "N");
//   protected Real b4.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b4.body.r[1](quantity = "Length", unit = "m") = b4.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.body.r[2](quantity = "Length", unit = "m") = b4.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.body.r[3](quantity = "Length", unit = "m") = b4.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real b4.body.rCM[1](quantity = "Length", unit = "m") = b4.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.body.rCM[2](quantity = "Length", unit = "m") = b4.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.body.rCM[3](quantity = "Length", unit = "m") = b4.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real b4.body.m(quantity = "Mass", unit = "kg", min = 0.0) = b4.m "Mass of body";
//   parameter Real b4.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I11 "(1,1) element of inertia tensor";
//   parameter Real b4.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I22 "(2,2) element of inertia tensor";
//   parameter Real b4.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I33 "(3,3) element of inertia tensor";
//   parameter Real b4.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I21 "(2,1) element of inertia tensor";
//   parameter Real b4.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I31 "(3,1) element of inertia tensor";
//   parameter Real b4.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = b4.I32 "(3,2) element of inertia tensor";
//   constant Real b4.body.frameTranslation.pi = 3.14159265358979;
//   constant Real b4.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b4.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.body.frameTranslation.frame_a.S[1,1] = b4.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[1,2] = b4.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[1,3] = b4.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[2,1] = b4.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[2,2] = b4.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[2,3] = b4.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[3,1] = b4.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[3,2] = b4.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.S[3,3] = b4.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = b4.body.frameTranslation.fa[1];
//   Real b4.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = b4.body.frameTranslation.fa[2];
//   Real b4.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = b4.body.frameTranslation.fa[3];
//   Real b4.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = b4.body.frameTranslation.ta[1];
//   Real b4.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = b4.body.frameTranslation.ta[2];
//   Real b4.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = b4.body.frameTranslation.ta[3];
//   output Real b4.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b4.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = b4.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.body.frameTranslation.frame_b.S[1,1] = b4.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[1,2] = b4.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[1,3] = b4.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[2,1] = b4.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[2,2] = b4.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[2,3] = b4.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[3,1] = b4.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[3,2] = b4.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.S[3,3] = b4.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b4.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b4.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -b4.body.frameTranslation.fb[1];
//   Real b4.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -b4.body.frameTranslation.fb[2];
//   Real b4.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -b4.body.frameTranslation.fb[3];
//   Real b4.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b4.body.frameTranslation.tb[1];
//   Real b4.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b4.body.frameTranslation.tb[2];
//   Real b4.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b4.body.frameTranslation.tb[3];
//   protected Real b4.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real b4.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real b4.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real b4.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real b4.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real b4.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real b4.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real b4.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real b4.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real b4.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real b4.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b4.body.frameTranslation.r[1](quantity = "Length", unit = "m") = b4.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b4.body.frameTranslation.r[2](quantity = "Length", unit = "m") = b4.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b4.body.frameTranslation.r[3](quantity = "Length", unit = "m") = b4.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b4.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real b4.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = b4.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = b4.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = b4.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.body.body.frame_a.S[1,1] = b4.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[1,2] = b4.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[1,3] = b4.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[2,1] = b4.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[2,2] = b4.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[2,3] = b4.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[3,1] = b4.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[3,2] = b4.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.S[3,3] = b4.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b4.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b4.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b4.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b4.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b4.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b4.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.body.body.frame_a.f[1](quantity = "Force", unit = "N") = b4.body.body.fa[1];
//   Real b4.body.body.frame_a.f[2](quantity = "Force", unit = "N") = b4.body.body.fa[2];
//   Real b4.body.body.frame_a.f[3](quantity = "Force", unit = "N") = b4.body.body.fa[3];
//   Real b4.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = b4.body.body.ta[1];
//   Real b4.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = b4.body.body.ta[2];
//   Real b4.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = b4.body.body.ta[3];
//   protected Real b4.body.body.Sa[1,1](start = 1.0);
//   protected Real b4.body.body.Sa[1,2](start = 0.0);
//   protected Real b4.body.body.Sa[1,3](start = 0.0);
//   protected Real b4.body.body.Sa[2,1](start = 0.0);
//   protected Real b4.body.body.Sa[2,2](start = 1.0);
//   protected Real b4.body.body.Sa[2,3](start = 0.0);
//   protected Real b4.body.body.Sa[3,1](start = 0.0);
//   protected Real b4.body.body.Sa[3,2](start = 0.0);
//   protected Real b4.body.body.Sa[3,3](start = 1.0);
//   protected Real b4.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real b4.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real b4.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real b4.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real b4.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real b4.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real b4.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real b4.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real b4.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real b4.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real b4.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real b4.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real b4.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real b4.vis.frame_a.r0[1](quantity = "Length", unit = "m") = b4.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.vis.frame_a.r0[2](quantity = "Length", unit = "m") = b4.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b4.vis.frame_a.r0[3](quantity = "Length", unit = "m") = b4.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b4.vis.frame_a.S[1,1] = b4.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[1,2] = b4.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[1,3] = b4.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[2,1] = b4.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[2,2] = b4.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[2,3] = b4.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[3,1] = b4.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[3,2] = b4.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.S[3,3] = b4.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b4.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b4.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b4.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b4.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b4.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b4.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b4.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b4.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b4.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b4.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b4.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b4.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b4.vis.frame_a.f[1](quantity = "Force", unit = "N") = b4.vis.fa[1];
//   Real b4.vis.frame_a.f[2](quantity = "Force", unit = "N") = b4.vis.fa[2];
//   Real b4.vis.frame_a.f[3](quantity = "Force", unit = "N") = b4.vis.fa[3];
//   Real b4.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = b4.vis.ta[1];
//   Real b4.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = b4.vis.ta[2];
//   Real b4.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = b4.vis.ta[3];
//   protected Real b4.vis.Sa[1,1](start = 1.0);
//   protected Real b4.vis.Sa[1,2](start = 0.0);
//   protected Real b4.vis.Sa[1,3](start = 0.0);
//   protected Real b4.vis.Sa[2,1](start = 0.0);
//   protected Real b4.vis.Sa[2,2](start = 1.0);
//   protected Real b4.vis.Sa[2,3](start = 0.0);
//   protected Real b4.vis.Sa[3,1](start = 0.0);
//   protected Real b4.vis.Sa[3,2](start = 0.0);
//   protected Real b4.vis.Sa[3,3](start = 1.0);
//   protected Real b4.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real b4.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real b4.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real b4.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b4.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b4.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b4.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b4.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b4.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b4.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real b4.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real b4.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real b4.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b4.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b4.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String b4.vis.Shape = b4.Shape "Name of shape (see info text)";
//   parameter Real b4.vis.r0[1] = b4.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real b4.vis.r0[2] = b4.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real b4.vis.r0[3] = b4.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real b4.vis.LengthDirection[1] = b4.LengthDirection[1] "Vector in length direction";
//   parameter Real b4.vis.LengthDirection[2] = b4.LengthDirection[2] "Vector in length direction";
//   parameter Real b4.vis.LengthDirection[3] = b4.LengthDirection[3] "Vector in length direction";
//   parameter Real b4.vis.WidthDirection[1] = b4.WidthDirection[1] "Vector in width direction";
//   parameter Real b4.vis.WidthDirection[2] = b4.WidthDirection[2] "Vector in width direction";
//   parameter Real b4.vis.WidthDirection[3] = b4.WidthDirection[3] "Vector in width direction";
//   parameter Real b4.vis.Length = b4.Length "Length of shape [m]";
//   parameter Real b4.vis.Width = b4.Width "Width of shape [m]";
//   parameter Real b4.vis.Height = b4.Height "Height of shape [m]";
//   parameter Real b4.vis.Material[1] = b4.Material[1] "Color and specular coefficient";
//   parameter Real b4.vis.Material[2] = b4.Material[2] "Color and specular coefficient";
//   parameter Real b4.vis.Material[3] = b4.Material[3] "Color and specular coefficient";
//   parameter Real b4.vis.Material[4] = b4.Material[4] "Color and specular coefficient";
//   parameter Real b4.vis.Extra = b4.Extra "Additional parameter for cone and pipe";
//   Real b4.vis.nLength[1];
//   Real b4.vis.nLength[2];
//   Real b4.vis.nLength[3];
//   Real b4.vis.nWidth[1];
//   Real b4.vis.nWidth[2];
//   Real b4.vis.nWidth[3];
//   Real b4.vis.nHeight[1];
//   Real b4.vis.nHeight[2];
//   Real b4.vis.nHeight[3];
//   parameter Real b4.vis.vis.r0[1] = b4.vis.r0[1] "Origin of visual object.";
//   parameter Real b4.vis.vis.r0[2] = b4.vis.r0[2] "Origin of visual object.";
//   parameter Real b4.vis.vis.r0[3] = b4.vis.r0[3] "Origin of visual object.";
//   parameter Real b4.vis.vis.Length = b4.vis.Length "Length of visual object.";
//   parameter Real b4.vis.vis.Width = b4.vis.Width "Width of visual object.";
//   parameter Real b4.vis.vis.Height = b4.vis.Height "Height of visual object.";
//   parameter Real b4.vis.vis.LengthDirection[1] = b4.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real b4.vis.vis.LengthDirection[2] = b4.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real b4.vis.vis.LengthDirection[3] = b4.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real b4.vis.vis.WidthDirection[1] = b4.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real b4.vis.vis.WidthDirection[2] = b4.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real b4.vis.vis.WidthDirection[3] = b4.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String b4.vis.vis.Shape = b4.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real b4.vis.vis.Material[1] = b4.vis.Material[1] "Color and specular coefficient.";
//   parameter Real b4.vis.vis.Material[2] = b4.vis.Material[2] "Color and specular coefficient.";
//   parameter Real b4.vis.vis.Material[3] = b4.vis.Material[3] "Color and specular coefficient.";
//   parameter Real b4.vis.vis.Material[4] = b4.vis.Material[4] "Color and specular coefficient.";
//   parameter Real b4.vis.vis.Extra = b4.vis.Extra "Additional size data for some of the shape types";
//   input Real b4.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real b4.vis.vis.r[1] "Position of visual object.";
//   input Real b4.vis.vis.r[2] "Position of visual object.";
//   input Real b4.vis.vis.r[3] "Position of visual object.";
//   Real b4.vis.vis.nLength[1];
//   Real b4.vis.vis.nLength[2];
//   Real b4.vis.vis.nLength[3];
//   Real b4.vis.vis.nWidth[1];
//   Real b4.vis.vis.nWidth[2];
//   Real b4.vis.vis.nWidth[3];
//   Real b4.vis.vis.nHeight[1];
//   Real b4.vis.vis.nHeight[2];
//   Real b4.vis.vis.nHeight[3];
//   parameter String b4.vis.vis.mcShape.shapeType = b4.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real b4.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = b4.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b4.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = b4.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b4.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = b4.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real b4.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = b4.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b4.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = b4.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b4.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = b4.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real b4.vis.vis.mcShape.lengthDirection[1] = b4.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.lengthDirection[2] = b4.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.lengthDirection[3] = b4.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.widthDirection[1] = b4.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.widthDirection[2] = b4.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.widthDirection[3] = b4.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real b4.vis.vis.mcShape.length(quantity = "Length", unit = "m") = b4.vis.vis.Length "Length of visual object";
//   input Real b4.vis.vis.mcShape.width(quantity = "Length", unit = "m") = b4.vis.vis.Width "Width of visual object";
//   input Real b4.vis.vis.mcShape.height(quantity = "Length", unit = "m") = b4.vis.vis.Height "Height of visual object";
//   input Real b4.vis.vis.mcShape.extra = b4.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real b4.vis.vis.mcShape.color[1] = 255.0 * b4.vis.vis.Material[1] "Color of shape";
//   input Real b4.vis.vis.mcShape.color[2] = 255.0 * b4.vis.vis.Material[2] "Color of shape";
//   input Real b4.vis.vis.mcShape.color[3] = 255.0 * b4.vis.vis.Material[3] "Color of shape";
//   input Real b4.vis.vis.mcShape.specularCoefficient = b4.vis.vis.Material[4];
//   input Real b4.vis.vis.mcShape.S[1,1] = b4.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[1,2] = b4.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[1,3] = b4.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[2,1] = b4.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[2,2] = b4.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[2,3] = b4.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[3,1] = b4.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[3,2] = b4.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real b4.vis.vis.mcShape.S[3,3] = b4.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[1,1] = b4.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[1,2] = b4.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[1,3] = b4.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[2,1] = b4.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[2,2] = b4.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[2,3] = b4.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[3,1] = b4.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[3,2] = b4.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real b4.vis.vis.mcShape.Sshape[3,3] = b4.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real b4.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real b4.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b4.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real b4.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real b4.vis.vis.mcShape.abs_n_x = sqrt(b4.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (b4.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + b4.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real b4.vis.vis.mcShape.e_x[1] = if noEvent(b4.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else b4.vis.vis.mcShape.lengthDirection[1] / b4.vis.vis.mcShape.abs_n_x;
//   Real b4.vis.vis.mcShape.e_x[2] = if noEvent(b4.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b4.vis.vis.mcShape.lengthDirection[2] / b4.vis.vis.mcShape.abs_n_x;
//   Real b4.vis.vis.mcShape.e_x[3] = if noEvent(b4.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else b4.vis.vis.mcShape.lengthDirection[3] / b4.vis.vis.mcShape.abs_n_x;
//   Real b4.vis.vis.mcShape.n_z_aux[1] = b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.widthDirection[3] - b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.widthDirection[2];
//   Real b4.vis.vis.mcShape.n_z_aux[2] = b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.widthDirection[1] - b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.widthDirection[3];
//   Real b4.vis.vis.mcShape.n_z_aux[3] = b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.widthDirection[2] - b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.widthDirection[1];
//   Real b4.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]},if noEvent(b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b4.vis.vis.mcShape.widthDirection[1],b4.vis.vis.mcShape.widthDirection[2],b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]})[1];
//   Real b4.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]},if noEvent(b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b4.vis.vis.mcShape.widthDirection[1],b4.vis.vis.mcShape.widthDirection[2],b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]})[2];
//   Real b4.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]},if noEvent(b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {b4.vis.vis.mcShape.widthDirection[1],b4.vis.vis.mcShape.widthDirection[2],b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{b4.vis.vis.mcShape.e_x[1],b4.vis.vis.mcShape.e_x[2],b4.vis.vis.mcShape.e_x[3]})[3];
//   Real b4.vis.vis.mcShape.e_z[1] = b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.e_y[3] - b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.e_y[2];
//   Real b4.vis.vis.mcShape.e_z[2] = b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.e_y[1] - b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.e_y[3];
//   Real b4.vis.vis.mcShape.e_z[3] = b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.e_y[2] - b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.e_y[1];
//   protected output Real b4.vis.vis.mcShape.Form;
//   protected output Real b4.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b4.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b4.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real b4.vis.vis.mcShape.Material;
//   protected output Real b4.vis.vis.mcShape.Extra;
//   input Real shape.frame_a.r0[1](quantity = "Length", unit = "m") = shape.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real shape.frame_a.r0[2](quantity = "Length", unit = "m") = shape.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real shape.frame_a.r0[3](quantity = "Length", unit = "m") = shape.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real shape.frame_a.S[1,1] = shape.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[1,2] = shape.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[1,3] = shape.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[2,1] = shape.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[2,2] = shape.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[2,3] = shape.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[3,1] = shape.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[3,2] = shape.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.S[3,3] = shape.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real shape.frame_a.v[1](quantity = "Velocity", unit = "m/s") = shape.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real shape.frame_a.v[2](quantity = "Velocity", unit = "m/s") = shape.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real shape.frame_a.v[3](quantity = "Velocity", unit = "m/s") = shape.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real shape.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = shape.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real shape.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = shape.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real shape.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = shape.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real shape.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = shape.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real shape.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = shape.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real shape.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = shape.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real shape.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = shape.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real shape.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = shape.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real shape.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = shape.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real shape.frame_a.f[1](quantity = "Force", unit = "N") = shape.fa[1];
//   Real shape.frame_a.f[2](quantity = "Force", unit = "N") = shape.fa[2];
//   Real shape.frame_a.f[3](quantity = "Force", unit = "N") = shape.fa[3];
//   Real shape.frame_a.t[1](quantity = "Torque", unit = "N.m") = shape.ta[1];
//   Real shape.frame_a.t[2](quantity = "Torque", unit = "N.m") = shape.ta[2];
//   Real shape.frame_a.t[3](quantity = "Torque", unit = "N.m") = shape.ta[3];
//   protected Real shape.Sa[1,1](start = 1.0);
//   protected Real shape.Sa[1,2](start = 0.0);
//   protected Real shape.Sa[1,3](start = 0.0);
//   protected Real shape.Sa[2,1](start = 0.0);
//   protected Real shape.Sa[2,2](start = 1.0);
//   protected Real shape.Sa[2,3](start = 0.0);
//   protected Real shape.Sa[3,1](start = 0.0);
//   protected Real shape.Sa[3,2](start = 0.0);
//   protected Real shape.Sa[3,3](start = 1.0);
//   protected Real shape.r0a[1](quantity = "Length", unit = "m");
//   protected Real shape.r0a[2](quantity = "Length", unit = "m");
//   protected Real shape.r0a[3](quantity = "Length", unit = "m");
//   protected Real shape.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real shape.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real shape.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real shape.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real shape.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real shape.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real shape.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real shape.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real shape.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real shape.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real shape.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real shape.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real shape.fa[1](quantity = "Force", unit = "N");
//   protected Real shape.fa[2](quantity = "Force", unit = "N");
//   protected Real shape.fa[3](quantity = "Force", unit = "N");
//   protected Real shape.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real shape.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real shape.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String shape.Shape = "box" "Name of shape (see info text)";
//   parameter Real shape.r0[1] = 0.0 "Vector from frame_a to shape origin [m]";
//   parameter Real shape.r0[2] = 0.0 "Vector from frame_a to shape origin [m]";
//   parameter Real shape.r0[3] = 0.0 "Vector from frame_a to shape origin [m]";
//   parameter Real shape.LengthDirection[1] = 0.0 "Vector in length direction";
//   parameter Real shape.LengthDirection[2] = 0.0 "Vector in length direction";
//   parameter Real shape.LengthDirection[3] = 0.4 "Vector in length direction";
//   parameter Real shape.WidthDirection[1] = 0.0 "Vector in width direction";
//   parameter Real shape.WidthDirection[2] = 1.0 "Vector in width direction";
//   parameter Real shape.WidthDirection[3] = 0.0 "Vector in width direction";
//   parameter Real shape.Length = 1.0 "Length of shape [m]";
//   parameter Real shape.Width = 0.02 "Width of shape [m]";
//   parameter Real shape.Height = 0.02 "Height of shape [m]";
//   parameter Real shape.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real shape.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real shape.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real shape.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real shape.Extra = 0.0 "Additional parameter for cone and pipe";
//   Real shape.nLength[1];
//   Real shape.nLength[2];
//   Real shape.nLength[3];
//   Real shape.nWidth[1];
//   Real shape.nWidth[2];
//   Real shape.nWidth[3];
//   Real shape.nHeight[1];
//   Real shape.nHeight[2];
//   Real shape.nHeight[3];
//   parameter Real shape.vis.r0[1] = shape.r0[1] "Origin of visual object.";
//   parameter Real shape.vis.r0[2] = shape.r0[2] "Origin of visual object.";
//   parameter Real shape.vis.r0[3] = shape.r0[3] "Origin of visual object.";
//   parameter Real shape.vis.Length = shape.Length "Length of visual object.";
//   parameter Real shape.vis.Width = shape.Width "Width of visual object.";
//   parameter Real shape.vis.Height = shape.Height "Height of visual object.";
//   parameter Real shape.vis.LengthDirection[1] = shape.LengthDirection[1] "Vector in length direction.";
//   parameter Real shape.vis.LengthDirection[2] = shape.LengthDirection[2] "Vector in length direction.";
//   parameter Real shape.vis.LengthDirection[3] = shape.LengthDirection[3] "Vector in length direction.";
//   parameter Real shape.vis.WidthDirection[1] = shape.WidthDirection[1] "Vector in width direction.";
//   parameter Real shape.vis.WidthDirection[2] = shape.WidthDirection[2] "Vector in width direction.";
//   parameter Real shape.vis.WidthDirection[3] = shape.WidthDirection[3] "Vector in width direction.";
//   parameter String shape.vis.Shape = shape.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real shape.vis.Material[1] = shape.Material[1] "Color and specular coefficient.";
//   parameter Real shape.vis.Material[2] = shape.Material[2] "Color and specular coefficient.";
//   parameter Real shape.vis.Material[3] = shape.Material[3] "Color and specular coefficient.";
//   parameter Real shape.vis.Material[4] = shape.Material[4] "Color and specular coefficient.";
//   parameter Real shape.vis.Extra = shape.Extra "Additional size data for some of the shape types";
//   input Real shape.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real shape.vis.r[1] "Position of visual object.";
//   input Real shape.vis.r[2] "Position of visual object.";
//   input Real shape.vis.r[3] "Position of visual object.";
//   Real shape.vis.nLength[1];
//   Real shape.vis.nLength[2];
//   Real shape.vis.nLength[3];
//   Real shape.vis.nWidth[1];
//   Real shape.vis.nWidth[2];
//   Real shape.vis.nWidth[3];
//   Real shape.vis.nHeight[1];
//   Real shape.vis.nHeight[2];
//   Real shape.vis.nHeight[3];
//   parameter String shape.vis.mcShape.shapeType = shape.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real shape.vis.mcShape.r[1](quantity = "Length", unit = "m") = shape.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.mcShape.r[2](quantity = "Length", unit = "m") = shape.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.mcShape.r[3](quantity = "Length", unit = "m") = shape.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real shape.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = shape.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = shape.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = shape.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real shape.vis.mcShape.lengthDirection[1] = shape.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.mcShape.lengthDirection[2] = shape.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.mcShape.lengthDirection[3] = shape.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real shape.vis.mcShape.widthDirection[1] = shape.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.mcShape.widthDirection[2] = shape.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.mcShape.widthDirection[3] = shape.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real shape.vis.mcShape.length(quantity = "Length", unit = "m") = shape.vis.Length "Length of visual object";
//   input Real shape.vis.mcShape.width(quantity = "Length", unit = "m") = shape.vis.Width "Width of visual object";
//   input Real shape.vis.mcShape.height(quantity = "Length", unit = "m") = shape.vis.Height "Height of visual object";
//   input Real shape.vis.mcShape.extra = shape.vis.Extra "Additional size data for some of the shape types";
//   input Real shape.vis.mcShape.color[1] = 255.0 * shape.vis.Material[1] "Color of shape";
//   input Real shape.vis.mcShape.color[2] = 255.0 * shape.vis.Material[2] "Color of shape";
//   input Real shape.vis.mcShape.color[3] = 255.0 * shape.vis.Material[3] "Color of shape";
//   input Real shape.vis.mcShape.specularCoefficient = shape.vis.Material[4];
//   input Real shape.vis.mcShape.S[1,1] = shape.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[1,2] = shape.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[1,3] = shape.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[2,1] = shape.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[2,2] = shape.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[2,3] = shape.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[3,1] = shape.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[3,2] = shape.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real shape.vis.mcShape.S[3,3] = shape.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[1,1] = shape.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[1,2] = shape.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[1,3] = shape.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[2,1] = shape.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[2,2] = shape.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[2,3] = shape.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[3,1] = shape.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[3,2] = shape.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real shape.vis.mcShape.Sshape[3,3] = shape.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real shape.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real shape.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real shape.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real shape.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real shape.vis.mcShape.abs_n_x = sqrt(shape.vis.mcShape.lengthDirection[1] ^ 2.0 + (shape.vis.mcShape.lengthDirection[2] ^ 2.0 + shape.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real shape.vis.mcShape.e_x[1] = if noEvent(shape.vis.mcShape.abs_n_x < 1e-10) then 1.0 else shape.vis.mcShape.lengthDirection[1] / shape.vis.mcShape.abs_n_x;
//   Real shape.vis.mcShape.e_x[2] = if noEvent(shape.vis.mcShape.abs_n_x < 1e-10) then 0.0 else shape.vis.mcShape.lengthDirection[2] / shape.vis.mcShape.abs_n_x;
//   Real shape.vis.mcShape.e_x[3] = if noEvent(shape.vis.mcShape.abs_n_x < 1e-10) then 0.0 else shape.vis.mcShape.lengthDirection[3] / shape.vis.mcShape.abs_n_x;
//   Real shape.vis.mcShape.n_z_aux[1] = shape.vis.mcShape.e_x[2] * shape.vis.mcShape.widthDirection[3] - shape.vis.mcShape.e_x[3] * shape.vis.mcShape.widthDirection[2];
//   Real shape.vis.mcShape.n_z_aux[2] = shape.vis.mcShape.e_x[3] * shape.vis.mcShape.widthDirection[1] - shape.vis.mcShape.e_x[1] * shape.vis.mcShape.widthDirection[3];
//   Real shape.vis.mcShape.n_z_aux[3] = shape.vis.mcShape.e_x[1] * shape.vis.mcShape.widthDirection[2] - shape.vis.mcShape.e_x[2] * shape.vis.mcShape.widthDirection[1];
//   Real shape.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]},if noEvent(shape.vis.mcShape.n_z_aux[1] ^ 2.0 + (shape.vis.mcShape.n_z_aux[2] ^ 2.0 + shape.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.mcShape.widthDirection[1],shape.vis.mcShape.widthDirection[2],shape.vis.mcShape.widthDirection[3]} else if noEvent(abs(shape.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]})[1];
//   Real shape.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]},if noEvent(shape.vis.mcShape.n_z_aux[1] ^ 2.0 + (shape.vis.mcShape.n_z_aux[2] ^ 2.0 + shape.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.mcShape.widthDirection[1],shape.vis.mcShape.widthDirection[2],shape.vis.mcShape.widthDirection[3]} else if noEvent(abs(shape.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]})[2];
//   Real shape.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]},if noEvent(shape.vis.mcShape.n_z_aux[1] ^ 2.0 + (shape.vis.mcShape.n_z_aux[2] ^ 2.0 + shape.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {shape.vis.mcShape.widthDirection[1],shape.vis.mcShape.widthDirection[2],shape.vis.mcShape.widthDirection[3]} else if noEvent(abs(shape.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{shape.vis.mcShape.e_x[1],shape.vis.mcShape.e_x[2],shape.vis.mcShape.e_x[3]})[3];
//   Real shape.vis.mcShape.e_z[1] = shape.vis.mcShape.e_x[2] * shape.vis.mcShape.e_y[3] - shape.vis.mcShape.e_x[3] * shape.vis.mcShape.e_y[2];
//   Real shape.vis.mcShape.e_z[2] = shape.vis.mcShape.e_x[3] * shape.vis.mcShape.e_y[1] - shape.vis.mcShape.e_x[1] * shape.vis.mcShape.e_y[3];
//   Real shape.vis.mcShape.e_z[3] = shape.vis.mcShape.e_x[1] * shape.vis.mcShape.e_y[2] - shape.vis.mcShape.e_x[2] * shape.vis.mcShape.e_y[1];
//   protected output Real shape.vis.mcShape.Form;
//   protected output Real shape.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real shape.vis.mcShape.Material;
//   protected output Real shape.vis.mcShape.Extra;
//   constant Real frame.pi = 3.14159265358979;
//   constant Real frame.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real frame.frame_a.r0[1](quantity = "Length", unit = "m") = frame.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real frame.frame_a.r0[2](quantity = "Length", unit = "m") = frame.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real frame.frame_a.r0[3](quantity = "Length", unit = "m") = frame.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real frame.frame_a.S[1,1] = frame.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[1,2] = frame.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[1,3] = frame.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[2,1] = frame.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[2,2] = frame.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[2,3] = frame.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[3,1] = frame.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[3,2] = frame.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.S[3,3] = frame.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_a.v[1](quantity = "Velocity", unit = "m/s") = frame.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_a.v[2](quantity = "Velocity", unit = "m/s") = frame.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_a.v[3](quantity = "Velocity", unit = "m/s") = frame.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = frame.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = frame.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = frame.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = frame.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = frame.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = frame.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_a.f[1](quantity = "Force", unit = "N") = frame.fa[1];
//   Real frame.frame_a.f[2](quantity = "Force", unit = "N") = frame.fa[2];
//   Real frame.frame_a.f[3](quantity = "Force", unit = "N") = frame.fa[3];
//   Real frame.frame_a.t[1](quantity = "Torque", unit = "N.m") = frame.ta[1];
//   Real frame.frame_a.t[2](quantity = "Torque", unit = "N.m") = frame.ta[2];
//   Real frame.frame_a.t[3](quantity = "Torque", unit = "N.m") = frame.ta[3];
//   output Real frame.frame_b.r0[1](quantity = "Length", unit = "m") = frame.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real frame.frame_b.r0[2](quantity = "Length", unit = "m") = frame.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real frame.frame_b.r0[3](quantity = "Length", unit = "m") = frame.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real frame.frame_b.S[1,1] = frame.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[1,2] = frame.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[1,3] = frame.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[2,1] = frame.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[2,2] = frame.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[2,3] = frame.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[3,1] = frame.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[3,2] = frame.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.S[3,3] = frame.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real frame.frame_b.v[1](quantity = "Velocity", unit = "m/s") = frame.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_b.v[2](quantity = "Velocity", unit = "m/s") = frame.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_b.v[3](quantity = "Velocity", unit = "m/s") = frame.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real frame.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = frame.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real frame.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = frame.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = frame.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = frame.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real frame.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = frame.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = frame.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = frame.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real frame.frame_b.f[1](quantity = "Force", unit = "N") = -frame.fb[1];
//   Real frame.frame_b.f[2](quantity = "Force", unit = "N") = -frame.fb[2];
//   Real frame.frame_b.f[3](quantity = "Force", unit = "N") = -frame.fb[3];
//   Real frame.frame_b.t[1](quantity = "Torque", unit = "N.m") = -frame.tb[1];
//   Real frame.frame_b.t[2](quantity = "Torque", unit = "N.m") = -frame.tb[2];
//   Real frame.frame_b.t[3](quantity = "Torque", unit = "N.m") = -frame.tb[3];
//   protected Real frame.Sa[1,1](start = 1.0);
//   protected Real frame.Sa[1,2](start = 0.0);
//   protected Real frame.Sa[1,3](start = 0.0);
//   protected Real frame.Sa[2,1](start = 0.0);
//   protected Real frame.Sa[2,2](start = 1.0);
//   protected Real frame.Sa[2,3](start = 0.0);
//   protected Real frame.Sa[3,1](start = 0.0);
//   protected Real frame.Sa[3,2](start = 0.0);
//   protected Real frame.Sa[3,3](start = 1.0);
//   protected Real frame.r0a[1](quantity = "Length", unit = "m");
//   protected Real frame.r0a[2](quantity = "Length", unit = "m");
//   protected Real frame.r0a[3](quantity = "Length", unit = "m");
//   protected Real frame.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real frame.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real frame.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real frame.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.fa[1](quantity = "Force", unit = "N");
//   protected Real frame.fa[2](quantity = "Force", unit = "N");
//   protected Real frame.fa[3](quantity = "Force", unit = "N");
//   protected Real frame.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real frame.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real frame.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real frame.Sb[1,1](start = 1.0);
//   protected Real frame.Sb[1,2](start = 0.0);
//   protected Real frame.Sb[1,3](start = 0.0);
//   protected Real frame.Sb[2,1](start = 0.0);
//   protected Real frame.Sb[2,2](start = 1.0);
//   protected Real frame.Sb[2,3](start = 0.0);
//   protected Real frame.Sb[3,1](start = 0.0);
//   protected Real frame.Sb[3,2](start = 0.0);
//   protected Real frame.Sb[3,3](start = 1.0);
//   protected Real frame.r0b[1](quantity = "Length", unit = "m");
//   protected Real frame.r0b[2](quantity = "Length", unit = "m");
//   protected Real frame.r0b[3](quantity = "Length", unit = "m");
//   protected Real frame.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real frame.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real frame.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real frame.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real frame.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real frame.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real frame.fb[1](quantity = "Force", unit = "N");
//   protected Real frame.fb[2](quantity = "Force", unit = "N");
//   protected Real frame.fb[3](quantity = "Force", unit = "N");
//   protected Real frame.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real frame.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real frame.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real frame.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real frame.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real frame.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real frame.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real frame.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real frame.vaux[3](quantity = "Velocity", unit = "m/s");
//   protected Real frame.S_rel[1,1] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[1,2] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[1,3] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[2,1] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[2,2] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[2,3] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[3,1] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[3,2] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   protected Real frame.S_rel[3,3] "relative transformation matrix from frame_a to frame_b (defined in subclasses)";
//   parameter Real frame.nx[1] = 1.0 "x-axis of frame_b resolved in frame_a";
//   parameter Real frame.nx[2] = -1.0 "x-axis of frame_b resolved in frame_a";
//   parameter Real frame.nx[3] = 1.0 "x-axis of frame_b resolved in frame_a";
//   parameter Real frame.ny[1] = 0.0 "y-axis of frame_b resolved in frame_a";
//   parameter Real frame.ny[2] = 1.0 "y-axis of frame_b resolved in frame_a";
//   parameter Real frame.ny[3] = 0.0 "y-axis of frame_b resolved in frame_a";
//   parameter String frame.label1 = "x" "Label of horizontal axis in icon";
//   parameter String frame.label2 = "y" "Label of vertical axis in icon";
//   protected Real frame.nz[1];
//   protected Real frame.nz[2];
//   protected Real frame.nz[3];
//   protected Real frame.nnx[1];
//   protected Real frame.nnx[2];
//   protected Real frame.nnx[3];
//   protected Real frame.nny[1];
//   protected Real frame.nny[2];
//   protected Real frame.nny[3];
//   protected Real frame.nnz[1];
//   protected Real frame.nnz[2];
//   protected Real frame.nnz[3];
//   input Real torque.tau(quantity = "Torque", unit = "N.m") "Torque driving the flange (a positive value accelerates the flange)";
//   Real torque.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real torque.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real torque.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real gear.ratio = 10.0 "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real shaft.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = shaft.phi_start, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real shaft.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real shaft.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real shaft.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real shaft.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real shaft.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.5 "Moment of inertia";
//   parameter Integer shaft.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real shaft.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real shaft.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real shaft.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer shaft.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real shaft.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = shaft.w_start, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real shaft.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   output Real constIn.y "Connector of Real output signal";
//   parameter Real constIn.k = 10.0 "Constant output value";
//   constant Real b8.pi = 3.14159265358979;
//   constant Real b8.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real b8.frame_a.r0[1](quantity = "Length", unit = "m") = b8.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b8.frame_a.r0[2](quantity = "Length", unit = "m") = b8.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real b8.frame_a.r0[3](quantity = "Length", unit = "m") = b8.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b8.frame_a.S[1,1] = b8.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[1,2] = b8.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[1,3] = b8.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[2,1] = b8.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[2,2] = b8.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[2,3] = b8.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[3,1] = b8.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[3,2] = b8.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.S[3,3] = b8.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_a.v[1](quantity = "Velocity", unit = "m/s") = b8.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_a.v[2](quantity = "Velocity", unit = "m/s") = b8.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_a.v[3](quantity = "Velocity", unit = "m/s") = b8.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = b8.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = b8.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = b8.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b8.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b8.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b8.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_a.f[1](quantity = "Force", unit = "N") = b8.fa[1];
//   Real b8.frame_a.f[2](quantity = "Force", unit = "N") = b8.fa[2];
//   Real b8.frame_a.f[3](quantity = "Force", unit = "N") = b8.fa[3];
//   Real b8.frame_a.t[1](quantity = "Torque", unit = "N.m") = b8.ta[1];
//   Real b8.frame_a.t[2](quantity = "Torque", unit = "N.m") = b8.ta[2];
//   Real b8.frame_a.t[3](quantity = "Torque", unit = "N.m") = b8.ta[3];
//   output Real b8.frame_b.r0[1](quantity = "Length", unit = "m") = b8.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b8.frame_b.r0[2](quantity = "Length", unit = "m") = b8.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real b8.frame_b.r0[3](quantity = "Length", unit = "m") = b8.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real b8.frame_b.S[1,1] = b8.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[1,2] = b8.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[1,3] = b8.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[2,1] = b8.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[2,2] = b8.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[2,3] = b8.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[3,1] = b8.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[3,2] = b8.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.S[3,3] = b8.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real b8.frame_b.v[1](quantity = "Velocity", unit = "m/s") = b8.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_b.v[2](quantity = "Velocity", unit = "m/s") = b8.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_b.v[3](quantity = "Velocity", unit = "m/s") = b8.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real b8.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = b8.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real b8.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = b8.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = b8.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = b8.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real b8.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = b8.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = b8.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = b8.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real b8.frame_b.f[1](quantity = "Force", unit = "N") = -b8.fb[1];
//   Real b8.frame_b.f[2](quantity = "Force", unit = "N") = -b8.fb[2];
//   Real b8.frame_b.f[3](quantity = "Force", unit = "N") = -b8.fb[3];
//   Real b8.frame_b.t[1](quantity = "Torque", unit = "N.m") = -b8.tb[1];
//   Real b8.frame_b.t[2](quantity = "Torque", unit = "N.m") = -b8.tb[2];
//   Real b8.frame_b.t[3](quantity = "Torque", unit = "N.m") = -b8.tb[3];
//   protected Real b8.Sa[1,1](start = 1.0);
//   protected Real b8.Sa[1,2](start = 0.0);
//   protected Real b8.Sa[1,3](start = 0.0);
//   protected Real b8.Sa[2,1](start = 0.0);
//   protected Real b8.Sa[2,2](start = 1.0);
//   protected Real b8.Sa[2,3](start = 0.0);
//   protected Real b8.Sa[3,1](start = 0.0);
//   protected Real b8.Sa[3,2](start = 0.0);
//   protected Real b8.Sa[3,3](start = 1.0);
//   protected Real b8.r0a[1](quantity = "Length", unit = "m");
//   protected Real b8.r0a[2](quantity = "Length", unit = "m");
//   protected Real b8.r0a[3](quantity = "Length", unit = "m");
//   protected Real b8.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real b8.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real b8.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real b8.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.fa[1](quantity = "Force", unit = "N");
//   protected Real b8.fa[2](quantity = "Force", unit = "N");
//   protected Real b8.fa[3](quantity = "Force", unit = "N");
//   protected Real b8.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real b8.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real b8.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real b8.Sb[1,1](start = 1.0);
//   protected Real b8.Sb[1,2](start = 0.0);
//   protected Real b8.Sb[1,3](start = 0.0);
//   protected Real b8.Sb[2,1](start = 0.0);
//   protected Real b8.Sb[2,2](start = 1.0);
//   protected Real b8.Sb[2,3](start = 0.0);
//   protected Real b8.Sb[3,1](start = 0.0);
//   protected Real b8.Sb[3,2](start = 0.0);
//   protected Real b8.Sb[3,3](start = 1.0);
//   protected Real b8.r0b[1](quantity = "Length", unit = "m");
//   protected Real b8.r0b[2](quantity = "Length", unit = "m");
//   protected Real b8.r0b[3](quantity = "Length", unit = "m");
//   protected Real b8.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real b8.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real b8.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real b8.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real b8.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real b8.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real b8.fb[1](quantity = "Force", unit = "N");
//   protected Real b8.fb[2](quantity = "Force", unit = "N");
//   protected Real b8.fb[3](quantity = "Force", unit = "N");
//   protected Real b8.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real b8.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real b8.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real b8.r[1](quantity = "Length", unit = "m") = -0.8 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b8.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real b8.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real b8.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real b8.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real b8.vaux[3](quantity = "Velocity", unit = "m/s");
// equation
//   inertial.gravity[1] = inertial.g * inertial.ng[1];
//   inertial.gravity[2] = inertial.g * inertial.ng[2];
//   inertial.gravity[3] = inertial.g * inertial.ng[3];
//   inertial.frame_b.S[1,1] = 1.0;
//   inertial.frame_b.S[1,2] = 0.0;
//   inertial.frame_b.S[1,3] = 0.0;
//   inertial.frame_b.S[2,1] = 0.0;
//   inertial.frame_b.S[2,2] = 1.0;
//   inertial.frame_b.S[2,3] = 0.0;
//   inertial.frame_b.S[3,1] = 0.0;
//   inertial.frame_b.S[3,2] = 0.0;
//   inertial.frame_b.S[3,3] = 1.0;
//   inertial.frame_b.r0[1] = 0.0;
//   inertial.frame_b.r0[2] = 0.0;
//   inertial.frame_b.r0[3] = 0.0;
//   inertial.frame_b.v[1] = 0.0;
//   inertial.frame_b.v[2] = 0.0;
//   inertial.frame_b.v[3] = 0.0;
//   inertial.frame_b.w[1] = 0.0;
//   inertial.frame_b.w[2] = 0.0;
//   inertial.frame_b.w[3] = 0.0;
//   inertial.frame_b.a[1] = -inertial.gravity[1];
//   inertial.frame_b.a[2] = -inertial.gravity[2];
//   inertial.frame_b.a[3] = -inertial.gravity[3];
//   inertial.frame_b.z[1] = 0.0;
//   inertial.frame_b.z[2] = 0.0;
//   inertial.frame_b.z[3] = 0.0;
//   j1.axis.phi = j1.q;
//   j1.bearing.phi = 0.0;
//   j1.qd = der(j1.q);
//   j1.qdd = der(j1.qd);
//   j1.nn[1] = j1.n[1] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.nn[2] = j1.n[2] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.nn[3] = j1.n[3] / sqrt(j1.n[1] ^ 2.0 + (j1.n[2] ^ 2.0 + j1.n[3] ^ 2.0));
//   j1.qq = j1.q - 0.0174532925199433 * j1.q0;
//   j1.sinq = sin(j1.qq);
//   j1.cosq = cos(j1.qq);
//   j1.S_rel[1,1] = j1.nn[1] ^ 2.0 + j1.cosq * (1.0 - j1.nn[1] ^ 2.0);
//   j1.S_rel[1,2] = j1.nn[1] * j1.nn[2] + j1.cosq * ((-j1.nn[1]) * j1.nn[2]) - (-j1.sinq) * j1.nn[3];
//   j1.S_rel[1,3] = j1.nn[1] * j1.nn[3] + j1.cosq * ((-j1.nn[1]) * j1.nn[3]) - j1.sinq * j1.nn[2];
//   j1.S_rel[2,1] = j1.nn[2] * j1.nn[1] + j1.cosq * ((-j1.nn[2]) * j1.nn[1]) - j1.sinq * j1.nn[3];
//   j1.S_rel[2,2] = j1.nn[2] ^ 2.0 + j1.cosq * (1.0 - j1.nn[2] ^ 2.0);
//   j1.S_rel[2,3] = j1.nn[2] * j1.nn[3] + j1.cosq * ((-j1.nn[2]) * j1.nn[3]) - (-j1.sinq) * j1.nn[1];
//   j1.S_rel[3,1] = j1.nn[3] * j1.nn[1] + j1.cosq * ((-j1.nn[3]) * j1.nn[1]) - (-j1.sinq) * j1.nn[2];
//   j1.S_rel[3,2] = j1.nn[3] * j1.nn[2] + j1.cosq * ((-j1.nn[3]) * j1.nn[2]) - j1.sinq * j1.nn[1];
//   j1.S_rel[3,3] = j1.nn[3] ^ 2.0 + j1.cosq * (1.0 - j1.nn[3] ^ 2.0);
//   j1.r_rela[1] = 0.0;
//   j1.r_rela[2] = 0.0;
//   j1.r_rela[3] = 0.0;
//   j1.v_rela[1] = 0.0;
//   j1.v_rela[2] = 0.0;
//   j1.v_rela[3] = 0.0;
//   j1.a_rela[1] = 0.0;
//   j1.a_rela[2] = 0.0;
//   j1.a_rela[3] = 0.0;
//   j1.w_rela[1] = j1.qd * j1.nn[1];
//   j1.w_rela[2] = j1.qd * j1.nn[2];
//   j1.w_rela[3] = j1.qd * j1.nn[3];
//   j1.z_rela[1] = j1.qdd * j1.nn[1];
//   j1.z_rela[2] = j1.qdd * j1.nn[2];
//   j1.z_rela[3] = j1.qdd * j1.nn[3];
//   j1.Sb[1,1] = j1.Sa[1,1] * j1.S_rel[1,1] + (j1.Sa[1,2] * j1.S_rel[1,2] + j1.Sa[1,3] * j1.S_rel[1,3]);
//   j1.Sb[1,2] = j1.Sa[1,1] * j1.S_rel[2,1] + (j1.Sa[1,2] * j1.S_rel[2,2] + j1.Sa[1,3] * j1.S_rel[2,3]);
//   j1.Sb[1,3] = j1.Sa[1,1] * j1.S_rel[3,1] + (j1.Sa[1,2] * j1.S_rel[3,2] + j1.Sa[1,3] * j1.S_rel[3,3]);
//   j1.Sb[2,1] = j1.Sa[2,1] * j1.S_rel[1,1] + (j1.Sa[2,2] * j1.S_rel[1,2] + j1.Sa[2,3] * j1.S_rel[1,3]);
//   j1.Sb[2,2] = j1.Sa[2,1] * j1.S_rel[2,1] + (j1.Sa[2,2] * j1.S_rel[2,2] + j1.Sa[2,3] * j1.S_rel[2,3]);
//   j1.Sb[2,3] = j1.Sa[2,1] * j1.S_rel[3,1] + (j1.Sa[2,2] * j1.S_rel[3,2] + j1.Sa[2,3] * j1.S_rel[3,3]);
//   j1.Sb[3,1] = j1.Sa[3,1] * j1.S_rel[1,1] + (j1.Sa[3,2] * j1.S_rel[1,2] + j1.Sa[3,3] * j1.S_rel[1,3]);
//   j1.Sb[3,2] = j1.Sa[3,1] * j1.S_rel[2,1] + (j1.Sa[3,2] * j1.S_rel[2,2] + j1.Sa[3,3] * j1.S_rel[2,3]);
//   j1.Sb[3,3] = j1.Sa[3,1] * j1.S_rel[3,1] + (j1.Sa[3,2] * j1.S_rel[3,2] + j1.Sa[3,3] * j1.S_rel[3,3]);
//   j1.r0b[1] = j1.r0a[1];
//   j1.r0b[2] = j1.r0a[2];
//   j1.r0b[3] = j1.r0a[3];
//   j1.vb[1] = j1.S_rel[1,1] * j1.va[1] + (j1.S_rel[1,2] * j1.va[2] + j1.S_rel[1,3] * j1.va[3]);
//   j1.vb[2] = j1.S_rel[2,1] * j1.va[1] + (j1.S_rel[2,2] * j1.va[2] + j1.S_rel[2,3] * j1.va[3]);
//   j1.vb[3] = j1.S_rel[3,1] * j1.va[1] + (j1.S_rel[3,2] * j1.va[2] + j1.S_rel[3,3] * j1.va[3]);
//   j1.wb[1] = j1.S_rel[1,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[1,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[1,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.wb[2] = j1.S_rel[2,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[2,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[2,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.wb[3] = j1.S_rel[3,1] * (j1.wa[1] + j1.w_rela[1]) + (j1.S_rel[3,2] * (j1.wa[2] + j1.w_rela[2]) + j1.S_rel[3,3] * (j1.wa[3] + j1.w_rela[3]));
//   j1.ab[1] = j1.S_rel[1,1] * j1.aa[1] + (j1.S_rel[1,2] * j1.aa[2] + j1.S_rel[1,3] * j1.aa[3]);
//   j1.ab[2] = j1.S_rel[2,1] * j1.aa[1] + (j1.S_rel[2,2] * j1.aa[2] + j1.S_rel[2,3] * j1.aa[3]);
//   j1.ab[3] = j1.S_rel[3,1] * j1.aa[1] + (j1.S_rel[3,2] * j1.aa[2] + j1.S_rel[3,3] * j1.aa[3]);
//   j1.zb[1] = j1.S_rel[1,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[1,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[1,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.zb[2] = j1.S_rel[2,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[2,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[2,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.zb[3] = j1.S_rel[3,1] * (j1.za[1] + (j1.z_rela[1] + (j1.wa[2] * j1.w_rela[3] + (-j1.wa[3] * j1.w_rela[2])))) + (j1.S_rel[3,2] * (j1.za[2] + (j1.z_rela[2] + (j1.wa[3] * j1.w_rela[1] + (-j1.wa[1] * j1.w_rela[3])))) + j1.S_rel[3,3] * (j1.za[3] + (j1.z_rela[3] + (j1.wa[1] * j1.w_rela[2] + (-j1.wa[2] * j1.w_rela[1])))));
//   j1.fa[1] = j1.S_rel[1,1] * j1.fb[1] + (j1.S_rel[2,1] * j1.fb[2] + j1.S_rel[3,1] * j1.fb[3]);
//   j1.fa[2] = j1.S_rel[1,2] * j1.fb[1] + (j1.S_rel[2,2] * j1.fb[2] + j1.S_rel[3,2] * j1.fb[3]);
//   j1.fa[3] = j1.S_rel[1,3] * j1.fb[1] + (j1.S_rel[2,3] * j1.fb[2] + j1.S_rel[3,3] * j1.fb[3]);
//   j1.ta[1] = j1.S_rel[1,1] * j1.tb[1] + (j1.S_rel[2,1] * j1.tb[2] + j1.S_rel[3,1] * j1.tb[3]);
//   j1.ta[2] = j1.S_rel[1,2] * j1.tb[1] + (j1.S_rel[2,2] * j1.tb[2] + j1.S_rel[3,2] * j1.tb[3]);
//   j1.ta[3] = j1.S_rel[1,3] * j1.tb[1] + (j1.S_rel[2,3] * j1.tb[2] + j1.S_rel[3,3] * j1.tb[3]);
//   j1.axis.tau = j1.nn[1] * j1.tb[1] + (j1.nn[2] * j1.tb[2] + j1.nn[3] * j1.tb[3]);
//   b1.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b1.box.mcShape.shapeType);
//   b1.box.mcShape.Material = PackMaterial(b1.box.mcShape.color[1] / 255.0,b1.box.mcShape.color[2] / 255.0,b1.box.mcShape.color[3] / 255.0,b1.box.mcShape.specularCoefficient);
//   b1.box.mcShape.Extra = b1.box.mcShape.extra;
//   b1.box.mcShape.size[1] = b1.box.mcShape.length;
//   b1.box.mcShape.size[2] = b1.box.mcShape.width;
//   b1.box.mcShape.size[3] = b1.box.mcShape.height;
//   b1.box.mcShape.Sshape[1,1] = b1.box.mcShape.e_x[1];
//   b1.box.mcShape.Sshape[1,2] = b1.box.mcShape.e_y[1];
//   b1.box.mcShape.Sshape[1,3] = b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[3] - b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[2];
//   b1.box.mcShape.Sshape[2,1] = b1.box.mcShape.e_x[2];
//   b1.box.mcShape.Sshape[2,2] = b1.box.mcShape.e_y[2];
//   b1.box.mcShape.Sshape[2,3] = b1.box.mcShape.e_x[3] * b1.box.mcShape.e_y[1] - b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[3];
//   b1.box.mcShape.Sshape[3,1] = b1.box.mcShape.e_x[3];
//   b1.box.mcShape.Sshape[3,2] = b1.box.mcShape.e_y[3];
//   b1.box.mcShape.Sshape[3,3] = b1.box.mcShape.e_x[1] * b1.box.mcShape.e_y[2] - b1.box.mcShape.e_x[2] * b1.box.mcShape.e_y[1];
//   b1.box.mcShape.rxvisobj[1] = b1.box.mcShape.S[1,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.rxvisobj[2] = b1.box.mcShape.S[2,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.rxvisobj[3] = b1.box.mcShape.S[3,1] * b1.box.mcShape.e_x[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.e_x[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.e_x[3]);
//   b1.box.mcShape.ryvisobj[1] = b1.box.mcShape.S[1,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.ryvisobj[2] = b1.box.mcShape.S[2,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.ryvisobj[3] = b1.box.mcShape.S[3,1] * b1.box.mcShape.e_y[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.e_y[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.e_y[3]);
//   b1.box.mcShape.rvisobj[1] = b1.box.mcShape.r[1] + (b1.box.mcShape.S[1,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[1,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[1,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.rvisobj[2] = b1.box.mcShape.r[2] + (b1.box.mcShape.S[2,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[2,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[2,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.rvisobj[3] = b1.box.mcShape.r[3] + (b1.box.mcShape.S[3,1] * b1.box.mcShape.r_shape[1] + (b1.box.mcShape.S[3,2] * b1.box.mcShape.r_shape[2] + b1.box.mcShape.S[3,3] * b1.box.mcShape.r_shape[3]));
//   b1.box.mcShape.e_x[1] = b1.box.nLength[1];
//   b1.box.mcShape.e_x[2] = b1.box.nLength[2];
//   b1.box.mcShape.e_x[3] = b1.box.nLength[3];
//   b1.box.mcShape.e_y[1] = b1.box.nWidth[1];
//   b1.box.mcShape.e_y[2] = b1.box.nWidth[2];
//   b1.box.mcShape.e_y[3] = b1.box.nWidth[3];
//   b1.box.mcShape.e_z[1] = b1.box.nHeight[1];
//   b1.box.mcShape.e_z[2] = b1.box.nHeight[2];
//   b1.box.mcShape.e_z[3] = b1.box.nHeight[3];
//   b1.frameTranslation.Sb[1,1] = b1.frameTranslation.Sa[1,1];
//   b1.frameTranslation.Sb[1,2] = b1.frameTranslation.Sa[1,2];
//   b1.frameTranslation.Sb[1,3] = b1.frameTranslation.Sa[1,3];
//   b1.frameTranslation.Sb[2,1] = b1.frameTranslation.Sa[2,1];
//   b1.frameTranslation.Sb[2,2] = b1.frameTranslation.Sa[2,2];
//   b1.frameTranslation.Sb[2,3] = b1.frameTranslation.Sa[2,3];
//   b1.frameTranslation.Sb[3,1] = b1.frameTranslation.Sa[3,1];
//   b1.frameTranslation.Sb[3,2] = b1.frameTranslation.Sa[3,2];
//   b1.frameTranslation.Sb[3,3] = b1.frameTranslation.Sa[3,3];
//   b1.frameTranslation.wb[1] = b1.frameTranslation.wa[1];
//   b1.frameTranslation.wb[2] = b1.frameTranslation.wa[2];
//   b1.frameTranslation.wb[3] = b1.frameTranslation.wa[3];
//   b1.frameTranslation.zb[1] = b1.frameTranslation.za[1];
//   b1.frameTranslation.zb[2] = b1.frameTranslation.za[2];
//   b1.frameTranslation.zb[3] = b1.frameTranslation.za[3];
//   b1.frameTranslation.r0b[1] = b1.frameTranslation.r0a[1] + (b1.frameTranslation.Sa[1,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[1,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[1,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.r0b[2] = b1.frameTranslation.r0a[2] + (b1.frameTranslation.Sa[2,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[2,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[2,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.r0b[3] = b1.frameTranslation.r0a[3] + (b1.frameTranslation.Sa[3,1] * b1.frameTranslation.r[1] + (b1.frameTranslation.Sa[3,2] * b1.frameTranslation.r[2] + b1.frameTranslation.Sa[3,3] * b1.frameTranslation.r[3]));
//   b1.frameTranslation.vaux[1] = b1.frameTranslation.wa[2] * b1.frameTranslation.r[3] - b1.frameTranslation.wa[3] * b1.frameTranslation.r[2];
//   b1.frameTranslation.vaux[2] = b1.frameTranslation.wa[3] * b1.frameTranslation.r[1] - b1.frameTranslation.wa[1] * b1.frameTranslation.r[3];
//   b1.frameTranslation.vaux[3] = b1.frameTranslation.wa[1] * b1.frameTranslation.r[2] - b1.frameTranslation.wa[2] * b1.frameTranslation.r[1];
//   b1.frameTranslation.vb[1] = b1.frameTranslation.va[1] + b1.frameTranslation.vaux[1];
//   b1.frameTranslation.vb[2] = b1.frameTranslation.va[2] + b1.frameTranslation.vaux[2];
//   b1.frameTranslation.vb[3] = b1.frameTranslation.va[3] + b1.frameTranslation.vaux[3];
//   b1.frameTranslation.ab[1] = b1.frameTranslation.aa[1] + (b1.frameTranslation.za[2] * b1.frameTranslation.r[3] + ((-b1.frameTranslation.za[3] * b1.frameTranslation.r[2]) + (b1.frameTranslation.wa[2] * b1.frameTranslation.vaux[3] + (-b1.frameTranslation.wa[3] * b1.frameTranslation.vaux[2]))));
//   b1.frameTranslation.ab[2] = b1.frameTranslation.aa[2] + (b1.frameTranslation.za[3] * b1.frameTranslation.r[1] + ((-b1.frameTranslation.za[1] * b1.frameTranslation.r[3]) + (b1.frameTranslation.wa[3] * b1.frameTranslation.vaux[1] + (-b1.frameTranslation.wa[1] * b1.frameTranslation.vaux[3]))));
//   b1.frameTranslation.ab[3] = b1.frameTranslation.aa[3] + (b1.frameTranslation.za[1] * b1.frameTranslation.r[2] + ((-b1.frameTranslation.za[2] * b1.frameTranslation.r[1]) + (b1.frameTranslation.wa[1] * b1.frameTranslation.vaux[2] + (-b1.frameTranslation.wa[2] * b1.frameTranslation.vaux[1]))));
//   b1.frameTranslation.fa[1] = b1.frameTranslation.fb[1];
//   b1.frameTranslation.fa[2] = b1.frameTranslation.fb[2];
//   b1.frameTranslation.fa[3] = b1.frameTranslation.fb[3];
//   b1.frameTranslation.ta[1] = b1.frameTranslation.tb[1] + (b1.frameTranslation.r[2] * b1.frameTranslation.fa[3] + (-b1.frameTranslation.r[3] * b1.frameTranslation.fa[2]));
//   b1.frameTranslation.ta[2] = b1.frameTranslation.tb[2] + (b1.frameTranslation.r[3] * b1.frameTranslation.fa[1] + (-b1.frameTranslation.r[1] * b1.frameTranslation.fa[3]));
//   b1.frameTranslation.ta[3] = b1.frameTranslation.tb[3] + (b1.frameTranslation.r[1] * b1.frameTranslation.fa[2] + (-b1.frameTranslation.r[2] * b1.frameTranslation.fa[1]));
//   b1.body.fa[1] = b1.body.m * (b1.body.aa[1] + (b1.body.za[2] * b1.body.rCM[3] + ((-b1.body.za[3] * b1.body.rCM[2]) + (b1.body.wa[2] * (b1.body.wa[1] * b1.body.rCM[2] - b1.body.wa[2] * b1.body.rCM[1]) + (-b1.body.wa[3] * (b1.body.wa[3] * b1.body.rCM[1] - b1.body.wa[1] * b1.body.rCM[3]))))));
//   b1.body.fa[2] = b1.body.m * (b1.body.aa[2] + (b1.body.za[3] * b1.body.rCM[1] + ((-b1.body.za[1] * b1.body.rCM[3]) + (b1.body.wa[3] * (b1.body.wa[2] * b1.body.rCM[3] - b1.body.wa[3] * b1.body.rCM[2]) + (-b1.body.wa[1] * (b1.body.wa[1] * b1.body.rCM[2] - b1.body.wa[2] * b1.body.rCM[1]))))));
//   b1.body.fa[3] = b1.body.m * (b1.body.aa[3] + (b1.body.za[1] * b1.body.rCM[2] + ((-b1.body.za[2] * b1.body.rCM[1]) + (b1.body.wa[1] * (b1.body.wa[3] * b1.body.rCM[1] - b1.body.wa[1] * b1.body.rCM[3]) + (-b1.body.wa[2] * (b1.body.wa[2] * b1.body.rCM[3] - b1.body.wa[3] * b1.body.rCM[2]))))));
//   b1.body.ta[1] = b1.body.I[1,1] * b1.body.za[1] + (b1.body.I[1,2] * b1.body.za[2] + (b1.body.I[1,3] * b1.body.za[3] + (b1.body.wa[2] * (b1.body.I[3,1] * b1.body.wa[1] + (b1.body.I[3,2] * b1.body.wa[2] + b1.body.I[3,3] * b1.body.wa[3])) + ((-b1.body.wa[3] * (b1.body.I[2,1] * b1.body.wa[1] + (b1.body.I[2,2] * b1.body.wa[2] + b1.body.I[2,3] * b1.body.wa[3]))) + (b1.body.rCM[2] * b1.body.fa[3] + (-b1.body.rCM[3] * b1.body.fa[2]))))));
//   b1.body.ta[2] = b1.body.I[2,1] * b1.body.za[1] + (b1.body.I[2,2] * b1.body.za[2] + (b1.body.I[2,3] * b1.body.za[3] + (b1.body.wa[3] * (b1.body.I[1,1] * b1.body.wa[1] + (b1.body.I[1,2] * b1.body.wa[2] + b1.body.I[1,3] * b1.body.wa[3])) + ((-b1.body.wa[1] * (b1.body.I[3,1] * b1.body.wa[1] + (b1.body.I[3,2] * b1.body.wa[2] + b1.body.I[3,3] * b1.body.wa[3]))) + (b1.body.rCM[3] * b1.body.fa[1] + (-b1.body.rCM[1] * b1.body.fa[3]))))));
//   b1.body.ta[3] = b1.body.I[3,1] * b1.body.za[1] + (b1.body.I[3,2] * b1.body.za[2] + (b1.body.I[3,3] * b1.body.za[3] + (b1.body.wa[1] * (b1.body.I[2,1] * b1.body.wa[1] + (b1.body.I[2,2] * b1.body.wa[2] + b1.body.I[2,3] * b1.body.wa[3])) + ((-b1.body.wa[2] * (b1.body.I[1,1] * b1.body.wa[1] + (b1.body.I[1,2] * b1.body.wa[2] + b1.body.I[1,3] * b1.body.wa[3]))) + (b1.body.rCM[1] * b1.body.fa[2] + (-b1.body.rCM[2] * b1.body.fa[1]))))));
//   b1.box.S[1,1] = b1.Sa[1,1];
//   b1.box.S[1,2] = b1.Sa[1,2];
//   b1.box.S[1,3] = b1.Sa[1,3];
//   b1.box.S[2,1] = b1.Sa[2,1];
//   b1.box.S[2,2] = b1.Sa[2,2];
//   b1.box.S[2,3] = b1.Sa[2,3];
//   b1.box.S[3,1] = b1.Sa[3,1];
//   b1.box.S[3,2] = b1.Sa[3,2];
//   b1.box.S[3,3] = b1.Sa[3,3];
//   b1.box.r[1] = b1.r0a[1];
//   b1.box.r[2] = b1.r0a[2];
//   b1.box.r[3] = b1.r0a[3];
//   b1.box.Sshape[1,1] = b1.Scyl[1,1];
//   b1.box.Sshape[1,2] = b1.Scyl[1,2];
//   b1.box.Sshape[1,3] = b1.Scyl[1,3];
//   b1.box.Sshape[2,1] = b1.Scyl[2,1];
//   b1.box.Sshape[2,2] = b1.Scyl[2,2];
//   b1.box.Sshape[2,3] = b1.Scyl[2,3];
//   b1.box.Sshape[3,1] = b1.Scyl[3,1];
//   b1.box.Sshape[3,2] = b1.Scyl[3,2];
//   b1.box.Sshape[3,3] = b1.Scyl[3,3];
//   b1.mo = 3141.59265358979 * (b1.rho * (b1.Length * b1.Radius ^ 2.0));
//   b1.mi = 3141.59265358979 * (b1.rho * (b1.Length * b1.InnerRadius ^ 2.0));
//   b1.I22 = b1.mo * (b1.Length ^ 2.0 + 3.0 * b1.Radius ^ 2.0) / 12.0 - b1.mi * (b1.Length ^ 2.0 + 3.0 * b1.InnerRadius ^ 2.0) / 12.0;
//   b1.body.m = b1.mo - b1.mi;
//   b1.body.rCM[1] = b1.r0[1] + 0.5 * (b1.Length * b1.box.nLength[1]);
//   b1.body.rCM[2] = b1.r0[2] + 0.5 * (b1.Length * b1.box.nLength[2]);
//   b1.body.rCM[3] = b1.r0[3] + 0.5 * (b1.Length * b1.box.nLength[3]);
//   b1.body.I[1,1] = b1.Scyl[1,1] ^ 2.0 * (0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) + (b1.Scyl[1,2] ^ 2.0 * b1.I22 + b1.Scyl[1,3] ^ 2.0 * b1.I22);
//   b1.body.I[1,2] = b1.Scyl[1,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[2,1]) + (b1.Scyl[1,2] * (b1.I22 * b1.Scyl[2,2]) + b1.Scyl[1,3] * (b1.I22 * b1.Scyl[2,3]));
//   b1.body.I[1,3] = b1.Scyl[1,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[3,1]) + (b1.Scyl[1,2] * (b1.I22 * b1.Scyl[3,2]) + b1.Scyl[1,3] * (b1.I22 * b1.Scyl[3,3]));
//   b1.body.I[2,1] = b1.Scyl[2,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[1,1]) + (b1.Scyl[2,2] * (b1.I22 * b1.Scyl[1,2]) + b1.Scyl[2,3] * (b1.I22 * b1.Scyl[1,3]));
//   b1.body.I[2,2] = b1.Scyl[2,1] ^ 2.0 * (0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) + (b1.Scyl[2,2] ^ 2.0 * b1.I22 + b1.Scyl[2,3] ^ 2.0 * b1.I22);
//   b1.body.I[2,3] = b1.Scyl[2,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[3,1]) + (b1.Scyl[2,2] * (b1.I22 * b1.Scyl[3,2]) + b1.Scyl[2,3] * (b1.I22 * b1.Scyl[3,3]));
//   b1.body.I[3,1] = b1.Scyl[3,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[1,1]) + (b1.Scyl[3,2] * (b1.I22 * b1.Scyl[1,2]) + b1.Scyl[3,3] * (b1.I22 * b1.Scyl[1,3]));
//   b1.body.I[3,2] = b1.Scyl[3,1] * ((0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) * b1.Scyl[2,1]) + (b1.Scyl[3,2] * (b1.I22 * b1.Scyl[2,2]) + b1.Scyl[3,3] * (b1.I22 * b1.Scyl[2,3]));
//   b1.body.I[3,3] = b1.Scyl[3,1] ^ 2.0 * (0.5 * (b1.mo * b1.Radius ^ 2.0) - 0.5 * (b1.mi * b1.InnerRadius ^ 2.0)) + (b1.Scyl[3,2] ^ 2.0 * b1.I22 + b1.Scyl[3,3] ^ 2.0 * b1.I22);
//   j2.constraintResidue = j2.r_rela[1] ^ 2.0 / 2.0 + (j2.r_rela[2] ^ 2.0 / 2.0 + j2.r_rela[3] ^ 2.0 / 2.0) - j2.L ^ 2.0 / 2.0;
//   j2.constraintResidue_d = j2.r_rela[1] * j2.v_rela[1] + (j2.r_rela[2] * j2.v_rela[2] + j2.r_rela[3] * j2.v_rela[3]);
//   j2.constraintResidue_dd = j2.r_rela[1] * j2.a_rela[1] + (j2.r_rela[2] * j2.a_rela[2] + (j2.r_rela[3] * j2.a_rela[3] + (j2.v_rela[1] ^ 2.0 + (j2.v_rela[2] ^ 2.0 + j2.v_rela[3] ^ 2.0))));
//   constrain(j2.constraintResidue,j2.constraintResidue_d,j2.constraintResidue_dd);
//   j2.nx[1] = j2.r_rela[1] / j2.L;
//   j2.nx[2] = j2.r_rela[2] / j2.L;
//   j2.nx[3] = j2.r_rela[3] / j2.L;
//   j2.b1[1] = j2.na[2] * j2.nx[3] - j2.na[3] * j2.nx[2];
//   j2.b1[2] = j2.na[3] * j2.nx[1] - j2.na[1] * j2.nx[3];
//   j2.b1[3] = j2.na[1] * j2.nx[2] - j2.na[2] * j2.nx[1];
//   j2.normb = sqrt(j2.b1[1] ^ 2.0 + (j2.b1[2] ^ 2.0 + j2.b1[3] ^ 2.0));
//   j2.ny[1] = j2.b1[1] / j2.normb;
//   j2.ny[2] = j2.b1[2] / j2.normb;
//   j2.ny[3] = j2.b1[3] / j2.normb;
//   j2.nz[1] = j2.nx[2] * j2.ny[3] - j2.nx[3] * j2.ny[2];
//   j2.nz[2] = j2.nx[3] * j2.ny[1] - j2.nx[1] * j2.ny[3];
//   j2.nz[3] = j2.nx[1] * j2.ny[2] - j2.nx[2] * j2.ny[1];
//   j2.S_relc[1,1] = j2.nx[1];
//   j2.S_relc[1,2] = j2.nx[2];
//   j2.S_relc[1,3] = j2.nx[3];
//   j2.S_relc[2,1] = j2.ny[1];
//   j2.S_relc[2,2] = j2.ny[2];
//   j2.S_relc[2,3] = j2.ny[3];
//   j2.S_relc[3,1] = j2.nz[1];
//   j2.S_relc[3,2] = j2.nz[2];
//   j2.S_relc[3,3] = j2.nz[3];
//   j2.Sc[1,1] = j2.Sa[1,1] * j2.S_relc[1,1] + (j2.Sa[1,2] * j2.S_relc[1,2] + j2.Sa[1,3] * j2.S_relc[1,3]);
//   j2.Sc[1,2] = j2.Sa[1,1] * j2.S_relc[2,1] + (j2.Sa[1,2] * j2.S_relc[2,2] + j2.Sa[1,3] * j2.S_relc[2,3]);
//   j2.Sc[1,3] = j2.Sa[1,1] * j2.S_relc[3,1] + (j2.Sa[1,2] * j2.S_relc[3,2] + j2.Sa[1,3] * j2.S_relc[3,3]);
//   j2.Sc[2,1] = j2.Sa[2,1] * j2.S_relc[1,1] + (j2.Sa[2,2] * j2.S_relc[1,2] + j2.Sa[2,3] * j2.S_relc[1,3]);
//   j2.Sc[2,2] = j2.Sa[2,1] * j2.S_relc[2,1] + (j2.Sa[2,2] * j2.S_relc[2,2] + j2.Sa[2,3] * j2.S_relc[2,3]);
//   j2.Sc[2,3] = j2.Sa[2,1] * j2.S_relc[3,1] + (j2.Sa[2,2] * j2.S_relc[3,2] + j2.Sa[2,3] * j2.S_relc[3,3]);
//   j2.Sc[3,1] = j2.Sa[3,1] * j2.S_relc[1,1] + (j2.Sa[3,2] * j2.S_relc[1,2] + j2.Sa[3,3] * j2.S_relc[1,3]);
//   j2.Sc[3,2] = j2.Sa[3,1] * j2.S_relc[2,1] + (j2.Sa[3,2] * j2.S_relc[2,2] + j2.Sa[3,3] * j2.S_relc[2,3]);
//   j2.Sc[3,3] = j2.Sa[3,1] * j2.S_relc[3,1] + (j2.Sa[3,2] * j2.S_relc[3,2] + j2.Sa[3,3] * j2.S_relc[3,3]);
//   j2.nxd[1] = j2.v_rela[1] / j2.L;
//   j2.nxd[2] = j2.v_rela[2] / j2.L;
//   j2.nxd[3] = j2.v_rela[3] / j2.L;
//   j2.bd[1] = (j2.na[2] * j2.nxd[3] - j2.na[3] * j2.nxd[2]) / j2.normb;
//   j2.bd[2] = (j2.na[3] * j2.nxd[1] - j2.na[1] * j2.nxd[3]) / j2.normb;
//   j2.bd[3] = (j2.na[1] * j2.nxd[2] - j2.na[2] * j2.nxd[1]) / j2.normb;
//   j2.bb = j2.ny[1] * j2.bd[1] + (j2.ny[2] * j2.bd[2] + j2.ny[3] * j2.bd[3]);
//   j2.nyd[1] = j2.bd[1] - j2.bb * j2.ny[1];
//   j2.nyd[2] = j2.bd[2] - j2.bb * j2.ny[2];
//   j2.nyd[3] = j2.bd[3] - j2.bb * j2.ny[3];
//   j2.nzd[1] = j2.nxd[2] * j2.ny[3] + ((-j2.nxd[3] * j2.ny[2]) + (j2.nx[2] * j2.nyd[3] + (-j2.nx[3] * j2.nyd[2])));
//   j2.nzd[2] = j2.nxd[3] * j2.ny[1] + ((-j2.nxd[1] * j2.ny[3]) + (j2.nx[3] * j2.nyd[1] + (-j2.nx[1] * j2.nyd[3])));
//   j2.nzd[3] = j2.nxd[1] * j2.ny[2] + ((-j2.nxd[2] * j2.ny[1]) + (j2.nx[1] * j2.nyd[2] + (-j2.nx[2] * j2.nyd[1])));
//   j2.w_relc[1] = j2.nz[1] * j2.nyd[1] + (j2.nz[2] * j2.nyd[2] + j2.nz[3] * j2.nyd[3]);
//   j2.w_relc[2] = j2.nx[1] * j2.nzd[1] + (j2.nx[2] * j2.nzd[2] + j2.nx[3] * j2.nzd[3]);
//   j2.w_relc[3] = j2.ny[1] * j2.nxd[1] + (j2.ny[2] * j2.nxd[2] + j2.ny[3] * j2.nxd[3]);
//   j2.wc[1] = j2.S_relc[1,1] * j2.wa[1] + (j2.S_relc[1,2] * j2.wa[2] + (j2.S_relc[1,3] * j2.wa[3] + j2.w_relc[1]));
//   j2.wc[2] = j2.S_relc[2,1] * j2.wa[1] + (j2.S_relc[2,2] * j2.wa[2] + (j2.S_relc[2,3] * j2.wa[3] + j2.w_relc[2]));
//   j2.wc[3] = j2.S_relc[3,1] * j2.wa[1] + (j2.S_relc[3,2] * j2.wa[2] + (j2.S_relc[3,3] * j2.wa[3] + j2.w_relc[3]));
//   j2.nxdd[1] = j2.a_rela[1] / j2.L;
//   j2.nxdd[2] = j2.a_rela[2] / j2.L;
//   j2.nxdd[3] = j2.a_rela[3] / j2.L;
//   j2.bdd[1] = (j2.na[2] * j2.nxdd[3] - j2.na[3] * j2.nxdd[2]) / j2.normb - j2.bb * j2.bd[1];
//   j2.bdd[2] = (j2.na[3] * j2.nxdd[1] - j2.na[1] * j2.nxdd[3]) / j2.normb - j2.bb * j2.bd[2];
//   j2.bdd[3] = (j2.na[1] * j2.nxdd[2] - j2.na[2] * j2.nxdd[1]) / j2.normb - j2.bb * j2.bd[3];
//   j2.nydd[1] = j2.bdd[1] - (j2.nyd[1] * j2.bd[1] + (j2.nyd[2] * j2.bd[2] + (j2.nyd[3] * j2.bd[3] + (j2.ny[1] * j2.bdd[1] + (j2.ny[2] * j2.bdd[2] + j2.ny[3] * j2.bdd[3]))))) * j2.ny[1] - j2.bb * j2.nyd[1];
//   j2.nydd[2] = j2.bdd[2] - (j2.nyd[1] * j2.bd[1] + (j2.nyd[2] * j2.bd[2] + (j2.nyd[3] * j2.bd[3] + (j2.ny[1] * j2.bdd[1] + (j2.ny[2] * j2.bdd[2] + j2.ny[3] * j2.bdd[3]))))) * j2.ny[2] - j2.bb * j2.nyd[2];
//   j2.nydd[3] = j2.bdd[3] - (j2.nyd[1] * j2.bd[1] + (j2.nyd[2] * j2.bd[2] + (j2.nyd[3] * j2.bd[3] + (j2.ny[1] * j2.bdd[1] + (j2.ny[2] * j2.bdd[2] + j2.ny[3] * j2.bdd[3]))))) * j2.ny[3] - j2.bb * j2.nyd[3];
//   j2.nzdd[1] = j2.nxdd[2] * j2.ny[3] + ((-j2.nxdd[3] * j2.ny[2]) + (j2.nx[2] * j2.nydd[3] + ((-j2.nx[3] * j2.nydd[2]) + 2.0 * (j2.nxd[2] * j2.nyd[3] - j2.nxd[3] * j2.nyd[2]))));
//   j2.nzdd[2] = j2.nxdd[3] * j2.ny[1] + ((-j2.nxdd[1] * j2.ny[3]) + (j2.nx[3] * j2.nydd[1] + ((-j2.nx[1] * j2.nydd[3]) + 2.0 * (j2.nxd[3] * j2.nyd[1] - j2.nxd[1] * j2.nyd[3]))));
//   j2.nzdd[3] = j2.nxdd[1] * j2.ny[2] + ((-j2.nxdd[2] * j2.ny[1]) + (j2.nx[1] * j2.nydd[2] + ((-j2.nx[2] * j2.nydd[1]) + 2.0 * (j2.nxd[1] * j2.nyd[2] - j2.nxd[2] * j2.nyd[1]))));
//   j2.z_relc[1] = j2.nz[1] * j2.nydd[1] + (j2.nz[2] * j2.nydd[2] + (j2.nz[3] * j2.nydd[3] + (j2.nzd[1] * j2.nyd[1] + (j2.nzd[2] * j2.nyd[2] + j2.nzd[3] * j2.nyd[3]))));
//   j2.z_relc[2] = j2.nx[1] * j2.nzdd[1] + (j2.nx[2] * j2.nzdd[2] + (j2.nx[3] * j2.nzdd[3] + (j2.nxd[1] * j2.nzd[1] + (j2.nxd[2] * j2.nzd[2] + j2.nxd[3] * j2.nzd[3]))));
//   j2.z_relc[3] = j2.ny[1] * j2.nxdd[1] + (j2.ny[2] * j2.nxdd[2] + (j2.ny[3] * j2.nxdd[3] + (j2.nyd[1] * j2.nxd[1] + (j2.nyd[2] * j2.nxd[2] + j2.nyd[3] * j2.nxd[3]))));
//   j2.zc[1] = j2.S_relc[1,1] * j2.za[1] + (j2.S_relc[1,2] * j2.za[2] + (j2.S_relc[1,3] * j2.za[3] + (j2.wc[2] * j2.w_relc[3] + ((-j2.wc[3] * j2.w_relc[2]) + j2.z_relc[1]))));
//   j2.zc[2] = j2.S_relc[2,1] * j2.za[1] + (j2.S_relc[2,2] * j2.za[2] + (j2.S_relc[2,3] * j2.za[3] + (j2.wc[3] * j2.w_relc[1] + ((-j2.wc[1] * j2.w_relc[3]) + j2.z_relc[2]))));
//   j2.zc[3] = j2.S_relc[3,1] * j2.za[1] + (j2.S_relc[3,2] * j2.za[2] + (j2.S_relc[3,3] * j2.za[3] + (j2.wc[1] * j2.w_relc[2] + ((-j2.wc[2] * j2.w_relc[1]) + j2.z_relc[3]))));
//   j2.r0c[1] = j2.r0a[1];
//   j2.r0c[2] = j2.r0a[2];
//   j2.r0c[3] = j2.r0a[3];
//   j2.vc[1] = j2.S_relc[1,1] * j2.va[1] + (j2.S_relc[1,2] * j2.va[2] + j2.S_relc[1,3] * j2.va[3]);
//   j2.vc[2] = j2.S_relc[2,1] * j2.va[1] + (j2.S_relc[2,2] * j2.va[2] + j2.S_relc[2,3] * j2.va[3]);
//   j2.vc[3] = j2.S_relc[3,1] * j2.va[1] + (j2.S_relc[3,2] * j2.va[2] + j2.S_relc[3,3] * j2.va[3]);
//   j2.ac[1] = j2.S_relc[1,1] * j2.aa[1] + (j2.S_relc[1,2] * j2.aa[2] + j2.S_relc[1,3] * j2.aa[3]);
//   j2.ac[2] = j2.S_relc[2,1] * j2.aa[1] + (j2.S_relc[2,2] * j2.aa[2] + j2.S_relc[2,3] * j2.aa[3]);
//   j2.ac[3] = j2.S_relc[3,1] * j2.aa[1] + (j2.S_relc[3,2] * j2.aa[2] + j2.S_relc[3,3] * j2.aa[3]);
//   j2.fb_a[1] = j2.S_relc[1,1] * j2.fRod + ((-j2.S_relc[2,1]) * j2.tc[3] / j2.L + j2.S_relc[3,1] * j2.tc[2] / j2.L);
//   j2.fb_a[2] = j2.S_relc[1,2] * j2.fRod + ((-j2.S_relc[2,2]) * j2.tc[3] / j2.L + j2.S_relc[3,2] * j2.tc[2] / j2.L);
//   j2.fb_a[3] = j2.S_relc[1,3] * j2.fRod + ((-j2.S_relc[2,3]) * j2.tc[3] / j2.L + j2.S_relc[3,3] * j2.tc[2] / j2.L);
//   j2.fb[1] = j2.S_rel[1,1] * j2.fb_a[1] + (j2.S_rel[1,2] * j2.fb_a[2] + j2.S_rel[1,3] * j2.fb_a[3]);
//   j2.fb[2] = j2.S_rel[2,1] * j2.fb_a[1] + (j2.S_rel[2,2] * j2.fb_a[2] + j2.S_rel[2,3] * j2.fb_a[3]);
//   j2.fb[3] = j2.S_rel[3,1] * j2.fb_a[1] + (j2.S_rel[3,2] * j2.fb_a[2] + j2.S_rel[3,3] * j2.fb_a[3]);
//   j2.fa[1] = j2.fb_a[1] + (j2.S_relc[1,1] * j2.fc[1] + (j2.S_relc[2,1] * j2.fc[2] + j2.S_relc[3,1] * j2.fc[3]));
//   j2.fa[2] = j2.fb_a[2] + (j2.S_relc[1,2] * j2.fc[1] + (j2.S_relc[2,2] * j2.fc[2] + j2.S_relc[3,2] * j2.fc[3]));
//   j2.fa[3] = j2.fb_a[3] + (j2.S_relc[1,3] * j2.fc[1] + (j2.S_relc[2,3] * j2.fc[2] + j2.S_relc[3,3] * j2.fc[3]));
//   j2.tb[1] = 0.0;
//   j2.tb[2] = 0.0;
//   j2.tb[3] = 0.0;
//   j2.ta[1] = j2.tc[1] * j2.nx[1];
//   j2.ta[2] = j2.tc[1] * j2.nx[2];
//   j2.ta[3] = j2.tc[1] * j2.nx[3];
//   j2.S_rel[1,1] = j2.Sb[1,1] * j2.Sa[1,1] + (j2.Sb[2,1] * j2.Sa[2,1] + j2.Sb[3,1] * j2.Sa[3,1]);
//   j2.S_rel[1,2] = j2.Sb[1,1] * j2.Sa[1,2] + (j2.Sb[2,1] * j2.Sa[2,2] + j2.Sb[3,1] * j2.Sa[3,2]);
//   j2.S_rel[1,3] = j2.Sb[1,1] * j2.Sa[1,3] + (j2.Sb[2,1] * j2.Sa[2,3] + j2.Sb[3,1] * j2.Sa[3,3]);
//   j2.S_rel[2,1] = j2.Sb[1,2] * j2.Sa[1,1] + (j2.Sb[2,2] * j2.Sa[2,1] + j2.Sb[3,2] * j2.Sa[3,1]);
//   j2.S_rel[2,2] = j2.Sb[1,2] * j2.Sa[1,2] + (j2.Sb[2,2] * j2.Sa[2,2] + j2.Sb[3,2] * j2.Sa[3,2]);
//   j2.S_rel[2,3] = j2.Sb[1,2] * j2.Sa[1,3] + (j2.Sb[2,2] * j2.Sa[2,3] + j2.Sb[3,2] * j2.Sa[3,3]);
//   j2.S_rel[3,1] = j2.Sb[1,3] * j2.Sa[1,1] + (j2.Sb[2,3] * j2.Sa[2,1] + j2.Sb[3,3] * j2.Sa[3,1]);
//   j2.S_rel[3,2] = j2.Sb[1,3] * j2.Sa[1,2] + (j2.Sb[2,3] * j2.Sa[2,2] + j2.Sb[3,3] * j2.Sa[3,2]);
//   j2.S_rel[3,3] = j2.Sb[1,3] * j2.Sa[1,3] + (j2.Sb[2,3] * j2.Sa[2,3] + j2.Sb[3,3] * j2.Sa[3,3]);
//   j2.r_rela[1] = j2.Sa[1,1] * (j2.r0b[1] - j2.r0a[1]) + (j2.Sa[2,1] * (j2.r0b[2] - j2.r0a[2]) + j2.Sa[3,1] * (j2.r0b[3] - j2.r0a[3]));
//   j2.r_rela[2] = j2.Sa[1,2] * (j2.r0b[1] - j2.r0a[1]) + (j2.Sa[2,2] * (j2.r0b[2] - j2.r0a[2]) + j2.Sa[3,2] * (j2.r0b[3] - j2.r0a[3]));
//   j2.r_rela[3] = j2.Sa[1,3] * (j2.r0b[1] - j2.r0a[1]) + (j2.Sa[2,3] * (j2.r0b[2] - j2.r0a[2]) + j2.Sa[3,3] * (j2.r0b[3] - j2.r0a[3]));
//   j2.vaux[1] = j2.wa[2] * j2.r_rela[3] - j2.wa[3] * j2.r_rela[2];
//   j2.vaux[2] = j2.wa[3] * j2.r_rela[1] - j2.wa[1] * j2.r_rela[3];
//   j2.vaux[3] = j2.wa[1] * j2.r_rela[2] - j2.wa[2] * j2.r_rela[1];
//   j2.v_rela[1] = j2.S_rel[1,1] * j2.vb[1] + (j2.S_rel[2,1] * j2.vb[2] + j2.S_rel[3,1] * j2.vb[3]) - j2.va[1] - j2.vaux[1];
//   j2.v_rela[2] = j2.S_rel[1,2] * j2.vb[1] + (j2.S_rel[2,2] * j2.vb[2] + j2.S_rel[3,2] * j2.vb[3]) - j2.va[2] - j2.vaux[2];
//   j2.v_rela[3] = j2.S_rel[1,3] * j2.vb[1] + (j2.S_rel[2,3] * j2.vb[2] + j2.S_rel[3,3] * j2.vb[3]) - j2.va[3] - j2.vaux[3];
//   j2.w_rela[1] = j2.S_rel[1,1] * j2.wb[1] + (j2.S_rel[2,1] * j2.wb[2] + j2.S_rel[3,1] * j2.wb[3]) - j2.wa[1];
//   j2.w_rela[2] = j2.S_rel[1,2] * j2.wb[1] + (j2.S_rel[2,2] * j2.wb[2] + j2.S_rel[3,2] * j2.wb[3]) - j2.wa[2];
//   j2.w_rela[3] = j2.S_rel[1,3] * j2.wb[1] + (j2.S_rel[2,3] * j2.wb[2] + j2.S_rel[3,3] * j2.wb[3]) - j2.wa[3];
//   j2.a_rela[1] = j2.S_rel[1,1] * j2.ab[1] + (j2.S_rel[2,1] * j2.ab[2] + j2.S_rel[3,1] * j2.ab[3]) - j2.aa[1] - (j2.za[2] * j2.r_rela[3] - j2.za[3] * j2.r_rela[2]) - (j2.wa[2] * (j2.vaux[3] + 2.0 * j2.v_rela[3]) - j2.wa[3] * (j2.vaux[2] + 2.0 * j2.v_rela[2]));
//   j2.a_rela[2] = j2.S_rel[1,2] * j2.ab[1] + (j2.S_rel[2,2] * j2.ab[2] + j2.S_rel[3,2] * j2.ab[3]) - j2.aa[2] - (j2.za[3] * j2.r_rela[1] - j2.za[1] * j2.r_rela[3]) - (j2.wa[3] * (j2.vaux[1] + 2.0 * j2.v_rela[1]) - j2.wa[1] * (j2.vaux[3] + 2.0 * j2.v_rela[3]));
//   j2.a_rela[3] = j2.S_rel[1,3] * j2.ab[1] + (j2.S_rel[2,3] * j2.ab[2] + j2.S_rel[3,3] * j2.ab[3]) - j2.aa[3] - (j2.za[1] * j2.r_rela[2] - j2.za[2] * j2.r_rela[1]) - (j2.wa[1] * (j2.vaux[2] + 2.0 * j2.v_rela[2]) - j2.wa[2] * (j2.vaux[1] + 2.0 * j2.v_rela[1]));
//   j2.z_rela[1] = j2.S_rel[1,1] * j2.zb[1] + (j2.S_rel[2,1] * j2.zb[2] + j2.S_rel[3,1] * j2.zb[3]) - j2.za[1] - (j2.wa[2] * j2.w_rela[3] - j2.wa[3] * j2.w_rela[2]);
//   j2.z_rela[2] = j2.S_rel[1,2] * j2.zb[1] + (j2.S_rel[2,2] * j2.zb[2] + j2.S_rel[3,2] * j2.zb[3]) - j2.za[2] - (j2.wa[3] * j2.w_rela[1] - j2.wa[1] * j2.w_rela[3]);
//   j2.z_rela[3] = j2.S_rel[1,3] * j2.zb[1] + (j2.S_rel[2,3] * j2.zb[2] + j2.S_rel[3,3] * j2.zb[3]) - j2.za[3] - (j2.wa[1] * j2.w_rela[2] - j2.wa[2] * j2.w_rela[1]);
//   b2.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b2.box.mcShape.shapeType);
//   b2.box.mcShape.Material = PackMaterial(b2.box.mcShape.color[1] / 255.0,b2.box.mcShape.color[2] / 255.0,b2.box.mcShape.color[3] / 255.0,b2.box.mcShape.specularCoefficient);
//   b2.box.mcShape.Extra = b2.box.mcShape.extra;
//   b2.box.mcShape.size[1] = b2.box.mcShape.length;
//   b2.box.mcShape.size[2] = b2.box.mcShape.width;
//   b2.box.mcShape.size[3] = b2.box.mcShape.height;
//   b2.box.mcShape.Sshape[1,1] = b2.box.mcShape.e_x[1];
//   b2.box.mcShape.Sshape[1,2] = b2.box.mcShape.e_y[1];
//   b2.box.mcShape.Sshape[1,3] = b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[3] - b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[2];
//   b2.box.mcShape.Sshape[2,1] = b2.box.mcShape.e_x[2];
//   b2.box.mcShape.Sshape[2,2] = b2.box.mcShape.e_y[2];
//   b2.box.mcShape.Sshape[2,3] = b2.box.mcShape.e_x[3] * b2.box.mcShape.e_y[1] - b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[3];
//   b2.box.mcShape.Sshape[3,1] = b2.box.mcShape.e_x[3];
//   b2.box.mcShape.Sshape[3,2] = b2.box.mcShape.e_y[3];
//   b2.box.mcShape.Sshape[3,3] = b2.box.mcShape.e_x[1] * b2.box.mcShape.e_y[2] - b2.box.mcShape.e_x[2] * b2.box.mcShape.e_y[1];
//   b2.box.mcShape.rxvisobj[1] = b2.box.mcShape.S[1,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.rxvisobj[2] = b2.box.mcShape.S[2,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.rxvisobj[3] = b2.box.mcShape.S[3,1] * b2.box.mcShape.e_x[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.e_x[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.e_x[3]);
//   b2.box.mcShape.ryvisobj[1] = b2.box.mcShape.S[1,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.ryvisobj[2] = b2.box.mcShape.S[2,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.ryvisobj[3] = b2.box.mcShape.S[3,1] * b2.box.mcShape.e_y[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.e_y[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.e_y[3]);
//   b2.box.mcShape.rvisobj[1] = b2.box.mcShape.r[1] + (b2.box.mcShape.S[1,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[1,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[1,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.rvisobj[2] = b2.box.mcShape.r[2] + (b2.box.mcShape.S[2,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[2,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[2,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.rvisobj[3] = b2.box.mcShape.r[3] + (b2.box.mcShape.S[3,1] * b2.box.mcShape.r_shape[1] + (b2.box.mcShape.S[3,2] * b2.box.mcShape.r_shape[2] + b2.box.mcShape.S[3,3] * b2.box.mcShape.r_shape[3]));
//   b2.box.mcShape.e_x[1] = b2.box.nLength[1];
//   b2.box.mcShape.e_x[2] = b2.box.nLength[2];
//   b2.box.mcShape.e_x[3] = b2.box.nLength[3];
//   b2.box.mcShape.e_y[1] = b2.box.nWidth[1];
//   b2.box.mcShape.e_y[2] = b2.box.nWidth[2];
//   b2.box.mcShape.e_y[3] = b2.box.nWidth[3];
//   b2.box.mcShape.e_z[1] = b2.box.nHeight[1];
//   b2.box.mcShape.e_z[2] = b2.box.nHeight[2];
//   b2.box.mcShape.e_z[3] = b2.box.nHeight[3];
//   b2.frameTranslation.Sb[1,1] = b2.frameTranslation.Sa[1,1];
//   b2.frameTranslation.Sb[1,2] = b2.frameTranslation.Sa[1,2];
//   b2.frameTranslation.Sb[1,3] = b2.frameTranslation.Sa[1,3];
//   b2.frameTranslation.Sb[2,1] = b2.frameTranslation.Sa[2,1];
//   b2.frameTranslation.Sb[2,2] = b2.frameTranslation.Sa[2,2];
//   b2.frameTranslation.Sb[2,3] = b2.frameTranslation.Sa[2,3];
//   b2.frameTranslation.Sb[3,1] = b2.frameTranslation.Sa[3,1];
//   b2.frameTranslation.Sb[3,2] = b2.frameTranslation.Sa[3,2];
//   b2.frameTranslation.Sb[3,3] = b2.frameTranslation.Sa[3,3];
//   b2.frameTranslation.wb[1] = b2.frameTranslation.wa[1];
//   b2.frameTranslation.wb[2] = b2.frameTranslation.wa[2];
//   b2.frameTranslation.wb[3] = b2.frameTranslation.wa[3];
//   b2.frameTranslation.zb[1] = b2.frameTranslation.za[1];
//   b2.frameTranslation.zb[2] = b2.frameTranslation.za[2];
//   b2.frameTranslation.zb[3] = b2.frameTranslation.za[3];
//   b2.frameTranslation.r0b[1] = b2.frameTranslation.r0a[1] + (b2.frameTranslation.Sa[1,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[1,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[1,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.r0b[2] = b2.frameTranslation.r0a[2] + (b2.frameTranslation.Sa[2,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[2,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[2,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.r0b[3] = b2.frameTranslation.r0a[3] + (b2.frameTranslation.Sa[3,1] * b2.frameTranslation.r[1] + (b2.frameTranslation.Sa[3,2] * b2.frameTranslation.r[2] + b2.frameTranslation.Sa[3,3] * b2.frameTranslation.r[3]));
//   b2.frameTranslation.vaux[1] = b2.frameTranslation.wa[2] * b2.frameTranslation.r[3] - b2.frameTranslation.wa[3] * b2.frameTranslation.r[2];
//   b2.frameTranslation.vaux[2] = b2.frameTranslation.wa[3] * b2.frameTranslation.r[1] - b2.frameTranslation.wa[1] * b2.frameTranslation.r[3];
//   b2.frameTranslation.vaux[3] = b2.frameTranslation.wa[1] * b2.frameTranslation.r[2] - b2.frameTranslation.wa[2] * b2.frameTranslation.r[1];
//   b2.frameTranslation.vb[1] = b2.frameTranslation.va[1] + b2.frameTranslation.vaux[1];
//   b2.frameTranslation.vb[2] = b2.frameTranslation.va[2] + b2.frameTranslation.vaux[2];
//   b2.frameTranslation.vb[3] = b2.frameTranslation.va[3] + b2.frameTranslation.vaux[3];
//   b2.frameTranslation.ab[1] = b2.frameTranslation.aa[1] + (b2.frameTranslation.za[2] * b2.frameTranslation.r[3] + ((-b2.frameTranslation.za[3] * b2.frameTranslation.r[2]) + (b2.frameTranslation.wa[2] * b2.frameTranslation.vaux[3] + (-b2.frameTranslation.wa[3] * b2.frameTranslation.vaux[2]))));
//   b2.frameTranslation.ab[2] = b2.frameTranslation.aa[2] + (b2.frameTranslation.za[3] * b2.frameTranslation.r[1] + ((-b2.frameTranslation.za[1] * b2.frameTranslation.r[3]) + (b2.frameTranslation.wa[3] * b2.frameTranslation.vaux[1] + (-b2.frameTranslation.wa[1] * b2.frameTranslation.vaux[3]))));
//   b2.frameTranslation.ab[3] = b2.frameTranslation.aa[3] + (b2.frameTranslation.za[1] * b2.frameTranslation.r[2] + ((-b2.frameTranslation.za[2] * b2.frameTranslation.r[1]) + (b2.frameTranslation.wa[1] * b2.frameTranslation.vaux[2] + (-b2.frameTranslation.wa[2] * b2.frameTranslation.vaux[1]))));
//   b2.frameTranslation.fa[1] = b2.frameTranslation.fb[1];
//   b2.frameTranslation.fa[2] = b2.frameTranslation.fb[2];
//   b2.frameTranslation.fa[3] = b2.frameTranslation.fb[3];
//   b2.frameTranslation.ta[1] = b2.frameTranslation.tb[1] + (b2.frameTranslation.r[2] * b2.frameTranslation.fa[3] + (-b2.frameTranslation.r[3] * b2.frameTranslation.fa[2]));
//   b2.frameTranslation.ta[2] = b2.frameTranslation.tb[2] + (b2.frameTranslation.r[3] * b2.frameTranslation.fa[1] + (-b2.frameTranslation.r[1] * b2.frameTranslation.fa[3]));
//   b2.frameTranslation.ta[3] = b2.frameTranslation.tb[3] + (b2.frameTranslation.r[1] * b2.frameTranslation.fa[2] + (-b2.frameTranslation.r[2] * b2.frameTranslation.fa[1]));
//   b2.body.fa[1] = b2.body.m * (b2.body.aa[1] + (b2.body.za[2] * b2.body.rCM[3] + ((-b2.body.za[3] * b2.body.rCM[2]) + (b2.body.wa[2] * (b2.body.wa[1] * b2.body.rCM[2] - b2.body.wa[2] * b2.body.rCM[1]) + (-b2.body.wa[3] * (b2.body.wa[3] * b2.body.rCM[1] - b2.body.wa[1] * b2.body.rCM[3]))))));
//   b2.body.fa[2] = b2.body.m * (b2.body.aa[2] + (b2.body.za[3] * b2.body.rCM[1] + ((-b2.body.za[1] * b2.body.rCM[3]) + (b2.body.wa[3] * (b2.body.wa[2] * b2.body.rCM[3] - b2.body.wa[3] * b2.body.rCM[2]) + (-b2.body.wa[1] * (b2.body.wa[1] * b2.body.rCM[2] - b2.body.wa[2] * b2.body.rCM[1]))))));
//   b2.body.fa[3] = b2.body.m * (b2.body.aa[3] + (b2.body.za[1] * b2.body.rCM[2] + ((-b2.body.za[2] * b2.body.rCM[1]) + (b2.body.wa[1] * (b2.body.wa[3] * b2.body.rCM[1] - b2.body.wa[1] * b2.body.rCM[3]) + (-b2.body.wa[2] * (b2.body.wa[2] * b2.body.rCM[3] - b2.body.wa[3] * b2.body.rCM[2]))))));
//   b2.body.ta[1] = b2.body.I[1,1] * b2.body.za[1] + (b2.body.I[1,2] * b2.body.za[2] + (b2.body.I[1,3] * b2.body.za[3] + (b2.body.wa[2] * (b2.body.I[3,1] * b2.body.wa[1] + (b2.body.I[3,2] * b2.body.wa[2] + b2.body.I[3,3] * b2.body.wa[3])) + ((-b2.body.wa[3] * (b2.body.I[2,1] * b2.body.wa[1] + (b2.body.I[2,2] * b2.body.wa[2] + b2.body.I[2,3] * b2.body.wa[3]))) + (b2.body.rCM[2] * b2.body.fa[3] + (-b2.body.rCM[3] * b2.body.fa[2]))))));
//   b2.body.ta[2] = b2.body.I[2,1] * b2.body.za[1] + (b2.body.I[2,2] * b2.body.za[2] + (b2.body.I[2,3] * b2.body.za[3] + (b2.body.wa[3] * (b2.body.I[1,1] * b2.body.wa[1] + (b2.body.I[1,2] * b2.body.wa[2] + b2.body.I[1,3] * b2.body.wa[3])) + ((-b2.body.wa[1] * (b2.body.I[3,1] * b2.body.wa[1] + (b2.body.I[3,2] * b2.body.wa[2] + b2.body.I[3,3] * b2.body.wa[3]))) + (b2.body.rCM[3] * b2.body.fa[1] + (-b2.body.rCM[1] * b2.body.fa[3]))))));
//   b2.body.ta[3] = b2.body.I[3,1] * b2.body.za[1] + (b2.body.I[3,2] * b2.body.za[2] + (b2.body.I[3,3] * b2.body.za[3] + (b2.body.wa[1] * (b2.body.I[2,1] * b2.body.wa[1] + (b2.body.I[2,2] * b2.body.wa[2] + b2.body.I[2,3] * b2.body.wa[3])) + ((-b2.body.wa[2] * (b2.body.I[1,1] * b2.body.wa[1] + (b2.body.I[1,2] * b2.body.wa[2] + b2.body.I[1,3] * b2.body.wa[3]))) + (b2.body.rCM[1] * b2.body.fa[2] + (-b2.body.rCM[2] * b2.body.fa[1]))))));
//   b2.box.S[1,1] = b2.Sa[1,1];
//   b2.box.S[1,2] = b2.Sa[1,2];
//   b2.box.S[1,3] = b2.Sa[1,3];
//   b2.box.S[2,1] = b2.Sa[2,1];
//   b2.box.S[2,2] = b2.Sa[2,2];
//   b2.box.S[2,3] = b2.Sa[2,3];
//   b2.box.S[3,1] = b2.Sa[3,1];
//   b2.box.S[3,2] = b2.Sa[3,2];
//   b2.box.S[3,3] = b2.Sa[3,3];
//   b2.box.r[1] = b2.r0a[1];
//   b2.box.r[2] = b2.r0a[2];
//   b2.box.r[3] = b2.r0a[3];
//   b2.box.Sshape[1,1] = b2.Scyl[1,1];
//   b2.box.Sshape[1,2] = b2.Scyl[1,2];
//   b2.box.Sshape[1,3] = b2.Scyl[1,3];
//   b2.box.Sshape[2,1] = b2.Scyl[2,1];
//   b2.box.Sshape[2,2] = b2.Scyl[2,2];
//   b2.box.Sshape[2,3] = b2.Scyl[2,3];
//   b2.box.Sshape[3,1] = b2.Scyl[3,1];
//   b2.box.Sshape[3,2] = b2.Scyl[3,2];
//   b2.box.Sshape[3,3] = b2.Scyl[3,3];
//   b2.mo = 3141.59265358979 * (b2.rho * (b2.Length * b2.Radius ^ 2.0));
//   b2.mi = 3141.59265358979 * (b2.rho * (b2.Length * b2.InnerRadius ^ 2.0));
//   b2.I22 = b2.mo * (b2.Length ^ 2.0 + 3.0 * b2.Radius ^ 2.0) / 12.0 - b2.mi * (b2.Length ^ 2.0 + 3.0 * b2.InnerRadius ^ 2.0) / 12.0;
//   b2.body.m = b2.mo - b2.mi;
//   b2.body.rCM[1] = b2.r0[1] + 0.5 * (b2.Length * b2.box.nLength[1]);
//   b2.body.rCM[2] = b2.r0[2] + 0.5 * (b2.Length * b2.box.nLength[2]);
//   b2.body.rCM[3] = b2.r0[3] + 0.5 * (b2.Length * b2.box.nLength[3]);
//   b2.body.I[1,1] = b2.Scyl[1,1] ^ 2.0 * (0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) + (b2.Scyl[1,2] ^ 2.0 * b2.I22 + b2.Scyl[1,3] ^ 2.0 * b2.I22);
//   b2.body.I[1,2] = b2.Scyl[1,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[2,1]) + (b2.Scyl[1,2] * (b2.I22 * b2.Scyl[2,2]) + b2.Scyl[1,3] * (b2.I22 * b2.Scyl[2,3]));
//   b2.body.I[1,3] = b2.Scyl[1,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[3,1]) + (b2.Scyl[1,2] * (b2.I22 * b2.Scyl[3,2]) + b2.Scyl[1,3] * (b2.I22 * b2.Scyl[3,3]));
//   b2.body.I[2,1] = b2.Scyl[2,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[1,1]) + (b2.Scyl[2,2] * (b2.I22 * b2.Scyl[1,2]) + b2.Scyl[2,3] * (b2.I22 * b2.Scyl[1,3]));
//   b2.body.I[2,2] = b2.Scyl[2,1] ^ 2.0 * (0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) + (b2.Scyl[2,2] ^ 2.0 * b2.I22 + b2.Scyl[2,3] ^ 2.0 * b2.I22);
//   b2.body.I[2,3] = b2.Scyl[2,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[3,1]) + (b2.Scyl[2,2] * (b2.I22 * b2.Scyl[3,2]) + b2.Scyl[2,3] * (b2.I22 * b2.Scyl[3,3]));
//   b2.body.I[3,1] = b2.Scyl[3,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[1,1]) + (b2.Scyl[3,2] * (b2.I22 * b2.Scyl[1,2]) + b2.Scyl[3,3] * (b2.I22 * b2.Scyl[1,3]));
//   b2.body.I[3,2] = b2.Scyl[3,1] * ((0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) * b2.Scyl[2,1]) + (b2.Scyl[3,2] * (b2.I22 * b2.Scyl[2,2]) + b2.Scyl[3,3] * (b2.I22 * b2.Scyl[2,3]));
//   b2.body.I[3,3] = b2.Scyl[3,1] ^ 2.0 * (0.5 * (b2.mo * b2.Radius ^ 2.0) - 0.5 * (b2.mi * b2.InnerRadius ^ 2.0)) + (b2.Scyl[3,2] ^ 2.0 * b2.I22 + b2.Scyl[3,3] ^ 2.0 * b2.I22);
//   b3.body.frameTranslation.Sb[1,1] = b3.body.frameTranslation.Sa[1,1];
//   b3.body.frameTranslation.Sb[1,2] = b3.body.frameTranslation.Sa[1,2];
//   b3.body.frameTranslation.Sb[1,3] = b3.body.frameTranslation.Sa[1,3];
//   b3.body.frameTranslation.Sb[2,1] = b3.body.frameTranslation.Sa[2,1];
//   b3.body.frameTranslation.Sb[2,2] = b3.body.frameTranslation.Sa[2,2];
//   b3.body.frameTranslation.Sb[2,3] = b3.body.frameTranslation.Sa[2,3];
//   b3.body.frameTranslation.Sb[3,1] = b3.body.frameTranslation.Sa[3,1];
//   b3.body.frameTranslation.Sb[3,2] = b3.body.frameTranslation.Sa[3,2];
//   b3.body.frameTranslation.Sb[3,3] = b3.body.frameTranslation.Sa[3,3];
//   b3.body.frameTranslation.wb[1] = b3.body.frameTranslation.wa[1];
//   b3.body.frameTranslation.wb[2] = b3.body.frameTranslation.wa[2];
//   b3.body.frameTranslation.wb[3] = b3.body.frameTranslation.wa[3];
//   b3.body.frameTranslation.zb[1] = b3.body.frameTranslation.za[1];
//   b3.body.frameTranslation.zb[2] = b3.body.frameTranslation.za[2];
//   b3.body.frameTranslation.zb[3] = b3.body.frameTranslation.za[3];
//   b3.body.frameTranslation.r0b[1] = b3.body.frameTranslation.r0a[1] + (b3.body.frameTranslation.Sa[1,1] * b3.body.frameTranslation.r[1] + (b3.body.frameTranslation.Sa[1,2] * b3.body.frameTranslation.r[2] + b3.body.frameTranslation.Sa[1,3] * b3.body.frameTranslation.r[3]));
//   b3.body.frameTranslation.r0b[2] = b3.body.frameTranslation.r0a[2] + (b3.body.frameTranslation.Sa[2,1] * b3.body.frameTranslation.r[1] + (b3.body.frameTranslation.Sa[2,2] * b3.body.frameTranslation.r[2] + b3.body.frameTranslation.Sa[2,3] * b3.body.frameTranslation.r[3]));
//   b3.body.frameTranslation.r0b[3] = b3.body.frameTranslation.r0a[3] + (b3.body.frameTranslation.Sa[3,1] * b3.body.frameTranslation.r[1] + (b3.body.frameTranslation.Sa[3,2] * b3.body.frameTranslation.r[2] + b3.body.frameTranslation.Sa[3,3] * b3.body.frameTranslation.r[3]));
//   b3.body.frameTranslation.vaux[1] = b3.body.frameTranslation.wa[2] * b3.body.frameTranslation.r[3] - b3.body.frameTranslation.wa[3] * b3.body.frameTranslation.r[2];
//   b3.body.frameTranslation.vaux[2] = b3.body.frameTranslation.wa[3] * b3.body.frameTranslation.r[1] - b3.body.frameTranslation.wa[1] * b3.body.frameTranslation.r[3];
//   b3.body.frameTranslation.vaux[3] = b3.body.frameTranslation.wa[1] * b3.body.frameTranslation.r[2] - b3.body.frameTranslation.wa[2] * b3.body.frameTranslation.r[1];
//   b3.body.frameTranslation.vb[1] = b3.body.frameTranslation.va[1] + b3.body.frameTranslation.vaux[1];
//   b3.body.frameTranslation.vb[2] = b3.body.frameTranslation.va[2] + b3.body.frameTranslation.vaux[2];
//   b3.body.frameTranslation.vb[3] = b3.body.frameTranslation.va[3] + b3.body.frameTranslation.vaux[3];
//   b3.body.frameTranslation.ab[1] = b3.body.frameTranslation.aa[1] + (b3.body.frameTranslation.za[2] * b3.body.frameTranslation.r[3] + ((-b3.body.frameTranslation.za[3] * b3.body.frameTranslation.r[2]) + (b3.body.frameTranslation.wa[2] * b3.body.frameTranslation.vaux[3] + (-b3.body.frameTranslation.wa[3] * b3.body.frameTranslation.vaux[2]))));
//   b3.body.frameTranslation.ab[2] = b3.body.frameTranslation.aa[2] + (b3.body.frameTranslation.za[3] * b3.body.frameTranslation.r[1] + ((-b3.body.frameTranslation.za[1] * b3.body.frameTranslation.r[3]) + (b3.body.frameTranslation.wa[3] * b3.body.frameTranslation.vaux[1] + (-b3.body.frameTranslation.wa[1] * b3.body.frameTranslation.vaux[3]))));
//   b3.body.frameTranslation.ab[3] = b3.body.frameTranslation.aa[3] + (b3.body.frameTranslation.za[1] * b3.body.frameTranslation.r[2] + ((-b3.body.frameTranslation.za[2] * b3.body.frameTranslation.r[1]) + (b3.body.frameTranslation.wa[1] * b3.body.frameTranslation.vaux[2] + (-b3.body.frameTranslation.wa[2] * b3.body.frameTranslation.vaux[1]))));
//   b3.body.frameTranslation.fa[1] = b3.body.frameTranslation.fb[1];
//   b3.body.frameTranslation.fa[2] = b3.body.frameTranslation.fb[2];
//   b3.body.frameTranslation.fa[3] = b3.body.frameTranslation.fb[3];
//   b3.body.frameTranslation.ta[1] = b3.body.frameTranslation.tb[1] + (b3.body.frameTranslation.r[2] * b3.body.frameTranslation.fa[3] + (-b3.body.frameTranslation.r[3] * b3.body.frameTranslation.fa[2]));
//   b3.body.frameTranslation.ta[2] = b3.body.frameTranslation.tb[2] + (b3.body.frameTranslation.r[3] * b3.body.frameTranslation.fa[1] + (-b3.body.frameTranslation.r[1] * b3.body.frameTranslation.fa[3]));
//   b3.body.frameTranslation.ta[3] = b3.body.frameTranslation.tb[3] + (b3.body.frameTranslation.r[1] * b3.body.frameTranslation.fa[2] + (-b3.body.frameTranslation.r[2] * b3.body.frameTranslation.fa[1]));
//   b3.body.body.fa[1] = b3.body.body.m * (b3.body.body.aa[1] + (b3.body.body.za[2] * b3.body.body.rCM[3] + ((-b3.body.body.za[3] * b3.body.body.rCM[2]) + (b3.body.body.wa[2] * (b3.body.body.wa[1] * b3.body.body.rCM[2] - b3.body.body.wa[2] * b3.body.body.rCM[1]) + (-b3.body.body.wa[3] * (b3.body.body.wa[3] * b3.body.body.rCM[1] - b3.body.body.wa[1] * b3.body.body.rCM[3]))))));
//   b3.body.body.fa[2] = b3.body.body.m * (b3.body.body.aa[2] + (b3.body.body.za[3] * b3.body.body.rCM[1] + ((-b3.body.body.za[1] * b3.body.body.rCM[3]) + (b3.body.body.wa[3] * (b3.body.body.wa[2] * b3.body.body.rCM[3] - b3.body.body.wa[3] * b3.body.body.rCM[2]) + (-b3.body.body.wa[1] * (b3.body.body.wa[1] * b3.body.body.rCM[2] - b3.body.body.wa[2] * b3.body.body.rCM[1]))))));
//   b3.body.body.fa[3] = b3.body.body.m * (b3.body.body.aa[3] + (b3.body.body.za[1] * b3.body.body.rCM[2] + ((-b3.body.body.za[2] * b3.body.body.rCM[1]) + (b3.body.body.wa[1] * (b3.body.body.wa[3] * b3.body.body.rCM[1] - b3.body.body.wa[1] * b3.body.body.rCM[3]) + (-b3.body.body.wa[2] * (b3.body.body.wa[2] * b3.body.body.rCM[3] - b3.body.body.wa[3] * b3.body.body.rCM[2]))))));
//   b3.body.body.ta[1] = b3.body.body.I[1,1] * b3.body.body.za[1] + (b3.body.body.I[1,2] * b3.body.body.za[2] + (b3.body.body.I[1,3] * b3.body.body.za[3] + (b3.body.body.wa[2] * (b3.body.body.I[3,1] * b3.body.body.wa[1] + (b3.body.body.I[3,2] * b3.body.body.wa[2] + b3.body.body.I[3,3] * b3.body.body.wa[3])) + ((-b3.body.body.wa[3] * (b3.body.body.I[2,1] * b3.body.body.wa[1] + (b3.body.body.I[2,2] * b3.body.body.wa[2] + b3.body.body.I[2,3] * b3.body.body.wa[3]))) + (b3.body.body.rCM[2] * b3.body.body.fa[3] + (-b3.body.body.rCM[3] * b3.body.body.fa[2]))))));
//   b3.body.body.ta[2] = b3.body.body.I[2,1] * b3.body.body.za[1] + (b3.body.body.I[2,2] * b3.body.body.za[2] + (b3.body.body.I[2,3] * b3.body.body.za[3] + (b3.body.body.wa[3] * (b3.body.body.I[1,1] * b3.body.body.wa[1] + (b3.body.body.I[1,2] * b3.body.body.wa[2] + b3.body.body.I[1,3] * b3.body.body.wa[3])) + ((-b3.body.body.wa[1] * (b3.body.body.I[3,1] * b3.body.body.wa[1] + (b3.body.body.I[3,2] * b3.body.body.wa[2] + b3.body.body.I[3,3] * b3.body.body.wa[3]))) + (b3.body.body.rCM[3] * b3.body.body.fa[1] + (-b3.body.body.rCM[1] * b3.body.body.fa[3]))))));
//   b3.body.body.ta[3] = b3.body.body.I[3,1] * b3.body.body.za[1] + (b3.body.body.I[3,2] * b3.body.body.za[2] + (b3.body.body.I[3,3] * b3.body.body.za[3] + (b3.body.body.wa[1] * (b3.body.body.I[2,1] * b3.body.body.wa[1] + (b3.body.body.I[2,2] * b3.body.body.wa[2] + b3.body.body.I[2,3] * b3.body.body.wa[3])) + ((-b3.body.body.wa[2] * (b3.body.body.I[1,1] * b3.body.body.wa[1] + (b3.body.body.I[1,2] * b3.body.body.wa[2] + b3.body.body.I[1,3] * b3.body.body.wa[3]))) + (b3.body.body.rCM[1] * b3.body.body.fa[2] + (-b3.body.body.rCM[2] * b3.body.body.fa[1]))))));
//   b3.body.body.m = b3.body.m;
//   b3.body.body.rCM[1] = b3.body.rCM[1];
//   b3.body.body.rCM[2] = b3.body.rCM[2];
//   b3.body.body.rCM[3] = b3.body.rCM[3];
//   b3.body.body.I[1,1] = b3.body.I11;
//   b3.body.body.I[1,2] = b3.body.I21;
//   b3.body.body.I[1,3] = b3.body.I31;
//   b3.body.body.I[2,1] = b3.body.I21;
//   b3.body.body.I[2,2] = b3.body.I22;
//   b3.body.body.I[2,3] = b3.body.I32;
//   b3.body.body.I[3,1] = b3.body.I31;
//   b3.body.body.I[3,2] = b3.body.I32;
//   b3.body.body.I[3,3] = b3.body.I33;
//   b3.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b3.vis.vis.mcShape.shapeType);
//   b3.vis.vis.mcShape.Material = PackMaterial(b3.vis.vis.mcShape.color[1] / 255.0,b3.vis.vis.mcShape.color[2] / 255.0,b3.vis.vis.mcShape.color[3] / 255.0,b3.vis.vis.mcShape.specularCoefficient);
//   b3.vis.vis.mcShape.Extra = b3.vis.vis.mcShape.extra;
//   b3.vis.vis.mcShape.size[1] = b3.vis.vis.mcShape.length;
//   b3.vis.vis.mcShape.size[2] = b3.vis.vis.mcShape.width;
//   b3.vis.vis.mcShape.size[3] = b3.vis.vis.mcShape.height;
//   b3.vis.vis.mcShape.Sshape[1,1] = b3.vis.vis.mcShape.e_x[1];
//   b3.vis.vis.mcShape.Sshape[1,2] = b3.vis.vis.mcShape.e_y[1];
//   b3.vis.vis.mcShape.Sshape[1,3] = b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.e_y[3] - b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.e_y[2];
//   b3.vis.vis.mcShape.Sshape[2,1] = b3.vis.vis.mcShape.e_x[2];
//   b3.vis.vis.mcShape.Sshape[2,2] = b3.vis.vis.mcShape.e_y[2];
//   b3.vis.vis.mcShape.Sshape[2,3] = b3.vis.vis.mcShape.e_x[3] * b3.vis.vis.mcShape.e_y[1] - b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.e_y[3];
//   b3.vis.vis.mcShape.Sshape[3,1] = b3.vis.vis.mcShape.e_x[3];
//   b3.vis.vis.mcShape.Sshape[3,2] = b3.vis.vis.mcShape.e_y[3];
//   b3.vis.vis.mcShape.Sshape[3,3] = b3.vis.vis.mcShape.e_x[1] * b3.vis.vis.mcShape.e_y[2] - b3.vis.vis.mcShape.e_x[2] * b3.vis.vis.mcShape.e_y[1];
//   b3.vis.vis.mcShape.rxvisobj[1] = b3.vis.vis.mcShape.S[1,1] * b3.vis.vis.mcShape.e_x[1] + (b3.vis.vis.mcShape.S[1,2] * b3.vis.vis.mcShape.e_x[2] + b3.vis.vis.mcShape.S[1,3] * b3.vis.vis.mcShape.e_x[3]);
//   b3.vis.vis.mcShape.rxvisobj[2] = b3.vis.vis.mcShape.S[2,1] * b3.vis.vis.mcShape.e_x[1] + (b3.vis.vis.mcShape.S[2,2] * b3.vis.vis.mcShape.e_x[2] + b3.vis.vis.mcShape.S[2,3] * b3.vis.vis.mcShape.e_x[3]);
//   b3.vis.vis.mcShape.rxvisobj[3] = b3.vis.vis.mcShape.S[3,1] * b3.vis.vis.mcShape.e_x[1] + (b3.vis.vis.mcShape.S[3,2] * b3.vis.vis.mcShape.e_x[2] + b3.vis.vis.mcShape.S[3,3] * b3.vis.vis.mcShape.e_x[3]);
//   b3.vis.vis.mcShape.ryvisobj[1] = b3.vis.vis.mcShape.S[1,1] * b3.vis.vis.mcShape.e_y[1] + (b3.vis.vis.mcShape.S[1,2] * b3.vis.vis.mcShape.e_y[2] + b3.vis.vis.mcShape.S[1,3] * b3.vis.vis.mcShape.e_y[3]);
//   b3.vis.vis.mcShape.ryvisobj[2] = b3.vis.vis.mcShape.S[2,1] * b3.vis.vis.mcShape.e_y[1] + (b3.vis.vis.mcShape.S[2,2] * b3.vis.vis.mcShape.e_y[2] + b3.vis.vis.mcShape.S[2,3] * b3.vis.vis.mcShape.e_y[3]);
//   b3.vis.vis.mcShape.ryvisobj[3] = b3.vis.vis.mcShape.S[3,1] * b3.vis.vis.mcShape.e_y[1] + (b3.vis.vis.mcShape.S[3,2] * b3.vis.vis.mcShape.e_y[2] + b3.vis.vis.mcShape.S[3,3] * b3.vis.vis.mcShape.e_y[3]);
//   b3.vis.vis.mcShape.rvisobj[1] = b3.vis.vis.mcShape.r[1] + (b3.vis.vis.mcShape.S[1,1] * b3.vis.vis.mcShape.r_shape[1] + (b3.vis.vis.mcShape.S[1,2] * b3.vis.vis.mcShape.r_shape[2] + b3.vis.vis.mcShape.S[1,3] * b3.vis.vis.mcShape.r_shape[3]));
//   b3.vis.vis.mcShape.rvisobj[2] = b3.vis.vis.mcShape.r[2] + (b3.vis.vis.mcShape.S[2,1] * b3.vis.vis.mcShape.r_shape[1] + (b3.vis.vis.mcShape.S[2,2] * b3.vis.vis.mcShape.r_shape[2] + b3.vis.vis.mcShape.S[2,3] * b3.vis.vis.mcShape.r_shape[3]));
//   b3.vis.vis.mcShape.rvisobj[3] = b3.vis.vis.mcShape.r[3] + (b3.vis.vis.mcShape.S[3,1] * b3.vis.vis.mcShape.r_shape[1] + (b3.vis.vis.mcShape.S[3,2] * b3.vis.vis.mcShape.r_shape[2] + b3.vis.vis.mcShape.S[3,3] * b3.vis.vis.mcShape.r_shape[3]));
//   b3.vis.vis.mcShape.e_x[1] = b3.vis.vis.nLength[1];
//   b3.vis.vis.mcShape.e_x[2] = b3.vis.vis.nLength[2];
//   b3.vis.vis.mcShape.e_x[3] = b3.vis.vis.nLength[3];
//   b3.vis.vis.mcShape.e_y[1] = b3.vis.vis.nWidth[1];
//   b3.vis.vis.mcShape.e_y[2] = b3.vis.vis.nWidth[2];
//   b3.vis.vis.mcShape.e_y[3] = b3.vis.vis.nWidth[3];
//   b3.vis.vis.mcShape.e_z[1] = b3.vis.vis.nHeight[1];
//   b3.vis.vis.mcShape.e_z[2] = b3.vis.vis.nHeight[2];
//   b3.vis.vis.mcShape.e_z[3] = b3.vis.vis.nHeight[3];
//   b3.vis.vis.S[1,1] = b3.vis.Sa[1,1];
//   b3.vis.vis.S[1,2] = b3.vis.Sa[1,2];
//   b3.vis.vis.S[1,3] = b3.vis.Sa[1,3];
//   b3.vis.vis.S[2,1] = b3.vis.Sa[2,1];
//   b3.vis.vis.S[2,2] = b3.vis.Sa[2,2];
//   b3.vis.vis.S[2,3] = b3.vis.Sa[2,3];
//   b3.vis.vis.S[3,1] = b3.vis.Sa[3,1];
//   b3.vis.vis.S[3,2] = b3.vis.Sa[3,2];
//   b3.vis.vis.S[3,3] = b3.vis.Sa[3,3];
//   b3.vis.vis.r[1] = b3.vis.r0a[1];
//   b3.vis.vis.r[2] = b3.vis.r0a[2];
//   b3.vis.vis.r[3] = b3.vis.r0a[3];
//   b3.vis.vis.nLength[1] = b3.vis.nLength[1];
//   b3.vis.vis.nLength[2] = b3.vis.nLength[2];
//   b3.vis.vis.nLength[3] = b3.vis.nLength[3];
//   b3.vis.vis.nWidth[1] = b3.vis.nWidth[1];
//   b3.vis.vis.nWidth[2] = b3.vis.nWidth[2];
//   b3.vis.vis.nWidth[3] = b3.vis.nWidth[3];
//   b3.vis.vis.nHeight[1] = b3.vis.nHeight[1];
//   b3.vis.vis.nHeight[2] = b3.vis.nHeight[2];
//   b3.vis.vis.nHeight[3] = b3.vis.nHeight[3];
//   b3.vis.fa[1] = 0.0;
//   b3.vis.fa[2] = 0.0;
//   b3.vis.fa[3] = 0.0;
//   b3.vis.ta[1] = 0.0;
//   b3.vis.ta[2] = 0.0;
//   b3.vis.ta[3] = 0.0;
//   j3.axis.s = j3.q;
//   j3.bearing.s = 0.0;
//   j3.qd = der(j3.q);
//   j3.qdd = der(j3.qd);
//   j3.nn[1] = j3.n[1] / sqrt(j3.n[1] ^ 2.0 + (j3.n[2] ^ 2.0 + j3.n[3] ^ 2.0));
//   j3.nn[2] = j3.n[2] / sqrt(j3.n[1] ^ 2.0 + (j3.n[2] ^ 2.0 + j3.n[3] ^ 2.0));
//   j3.nn[3] = j3.n[3] / sqrt(j3.n[1] ^ 2.0 + (j3.n[2] ^ 2.0 + j3.n[3] ^ 2.0));
//   j3.S_rel[1,1] = 1.0;
//   j3.S_rel[1,2] = 0.0;
//   j3.S_rel[1,3] = 0.0;
//   j3.S_rel[2,1] = 0.0;
//   j3.S_rel[2,2] = 1.0;
//   j3.S_rel[2,3] = 0.0;
//   j3.S_rel[3,1] = 0.0;
//   j3.S_rel[3,2] = 0.0;
//   j3.S_rel[3,3] = 1.0;
//   j3.qq = j3.q - j3.q0;
//   j3.r_rela[1] = j3.qq * j3.nn[1];
//   j3.r_rela[2] = j3.qq * j3.nn[2];
//   j3.r_rela[3] = j3.qq * j3.nn[3];
//   j3.v_rela[1] = j3.qd * j3.nn[1];
//   j3.v_rela[2] = j3.qd * j3.nn[2];
//   j3.v_rela[3] = j3.qd * j3.nn[3];
//   j3.a_rela[1] = j3.qdd * j3.nn[1];
//   j3.a_rela[2] = j3.qdd * j3.nn[2];
//   j3.a_rela[3] = j3.qdd * j3.nn[3];
//   j3.w_rela[1] = 0.0;
//   j3.w_rela[2] = 0.0;
//   j3.w_rela[3] = 0.0;
//   j3.z_rela[1] = 0.0;
//   j3.z_rela[2] = 0.0;
//   j3.z_rela[3] = 0.0;
//   j3.Sb[1,1] = j3.Sa[1,1];
//   j3.Sb[1,2] = j3.Sa[1,2];
//   j3.Sb[1,3] = j3.Sa[1,3];
//   j3.Sb[2,1] = j3.Sa[2,1];
//   j3.Sb[2,2] = j3.Sa[2,2];
//   j3.Sb[2,3] = j3.Sa[2,3];
//   j3.Sb[3,1] = j3.Sa[3,1];
//   j3.Sb[3,2] = j3.Sa[3,2];
//   j3.Sb[3,3] = j3.Sa[3,3];
//   j3.r0b[1] = j3.r0a[1] + (j3.Sa[1,1] * j3.r_rela[1] + (j3.Sa[1,2] * j3.r_rela[2] + j3.Sa[1,3] * j3.r_rela[3]));
//   j3.r0b[2] = j3.r0a[2] + (j3.Sa[2,1] * j3.r_rela[1] + (j3.Sa[2,2] * j3.r_rela[2] + j3.Sa[2,3] * j3.r_rela[3]));
//   j3.r0b[3] = j3.r0a[3] + (j3.Sa[3,1] * j3.r_rela[1] + (j3.Sa[3,2] * j3.r_rela[2] + j3.Sa[3,3] * j3.r_rela[3]));
//   j3.vaux[1] = j3.wa[2] * j3.r_rela[3] - j3.wa[3] * j3.r_rela[2];
//   j3.vaux[2] = j3.wa[3] * j3.r_rela[1] - j3.wa[1] * j3.r_rela[3];
//   j3.vaux[3] = j3.wa[1] * j3.r_rela[2] - j3.wa[2] * j3.r_rela[1];
//   j3.vb[1] = j3.va[1] + (j3.v_rela[1] + j3.vaux[1]);
//   j3.vb[2] = j3.va[2] + (j3.v_rela[2] + j3.vaux[2]);
//   j3.vb[3] = j3.va[3] + (j3.v_rela[3] + j3.vaux[3]);
//   j3.wb[1] = j3.wa[1];
//   j3.wb[2] = j3.wa[2];
//   j3.wb[3] = j3.wa[3];
//   j3.ab[1] = j3.aa[1] + (j3.a_rela[1] + (j3.za[2] * j3.r_rela[3] + ((-j3.za[3] * j3.r_rela[2]) + (j3.wa[2] * (j3.vaux[3] + 2.0 * j3.v_rela[3]) + (-j3.wa[3] * (j3.vaux[2] + 2.0 * j3.v_rela[2]))))));
//   j3.ab[2] = j3.aa[2] + (j3.a_rela[2] + (j3.za[3] * j3.r_rela[1] + ((-j3.za[1] * j3.r_rela[3]) + (j3.wa[3] * (j3.vaux[1] + 2.0 * j3.v_rela[1]) + (-j3.wa[1] * (j3.vaux[3] + 2.0 * j3.v_rela[3]))))));
//   j3.ab[3] = j3.aa[3] + (j3.a_rela[3] + (j3.za[1] * j3.r_rela[2] + ((-j3.za[2] * j3.r_rela[1]) + (j3.wa[1] * (j3.vaux[2] + 2.0 * j3.v_rela[2]) + (-j3.wa[2] * (j3.vaux[1] + 2.0 * j3.v_rela[1]))))));
//   j3.zb[1] = j3.za[1];
//   j3.zb[2] = j3.za[2];
//   j3.zb[3] = j3.za[3];
//   j3.fa[1] = j3.fb[1];
//   j3.fa[2] = j3.fb[2];
//   j3.fa[3] = j3.fb[3];
//   j3.ta[1] = j3.tb[1] + (j3.r_rela[2] * j3.fa[3] + (-j3.r_rela[3] * j3.fa[2]));
//   j3.ta[2] = j3.tb[2] + (j3.r_rela[3] * j3.fa[1] + (-j3.r_rela[1] * j3.fa[3]));
//   j3.ta[3] = j3.tb[3] + (j3.r_rela[1] * j3.fa[2] + (-j3.r_rela[2] * j3.fa[1]));
//   j3.axis.f = j3.nn[1] * j3.fb[1] + (j3.nn[2] * j3.fb[2] + j3.nn[3] * j3.fb[3]);
//   b5.body.frameTranslation.Sb[1,1] = b5.body.frameTranslation.Sa[1,1];
//   b5.body.frameTranslation.Sb[1,2] = b5.body.frameTranslation.Sa[1,2];
//   b5.body.frameTranslation.Sb[1,3] = b5.body.frameTranslation.Sa[1,3];
//   b5.body.frameTranslation.Sb[2,1] = b5.body.frameTranslation.Sa[2,1];
//   b5.body.frameTranslation.Sb[2,2] = b5.body.frameTranslation.Sa[2,2];
//   b5.body.frameTranslation.Sb[2,3] = b5.body.frameTranslation.Sa[2,3];
//   b5.body.frameTranslation.Sb[3,1] = b5.body.frameTranslation.Sa[3,1];
//   b5.body.frameTranslation.Sb[3,2] = b5.body.frameTranslation.Sa[3,2];
//   b5.body.frameTranslation.Sb[3,3] = b5.body.frameTranslation.Sa[3,3];
//   b5.body.frameTranslation.wb[1] = b5.body.frameTranslation.wa[1];
//   b5.body.frameTranslation.wb[2] = b5.body.frameTranslation.wa[2];
//   b5.body.frameTranslation.wb[3] = b5.body.frameTranslation.wa[3];
//   b5.body.frameTranslation.zb[1] = b5.body.frameTranslation.za[1];
//   b5.body.frameTranslation.zb[2] = b5.body.frameTranslation.za[2];
//   b5.body.frameTranslation.zb[3] = b5.body.frameTranslation.za[3];
//   b5.body.frameTranslation.r0b[1] = b5.body.frameTranslation.r0a[1] + (b5.body.frameTranslation.Sa[1,1] * b5.body.frameTranslation.r[1] + (b5.body.frameTranslation.Sa[1,2] * b5.body.frameTranslation.r[2] + b5.body.frameTranslation.Sa[1,3] * b5.body.frameTranslation.r[3]));
//   b5.body.frameTranslation.r0b[2] = b5.body.frameTranslation.r0a[2] + (b5.body.frameTranslation.Sa[2,1] * b5.body.frameTranslation.r[1] + (b5.body.frameTranslation.Sa[2,2] * b5.body.frameTranslation.r[2] + b5.body.frameTranslation.Sa[2,3] * b5.body.frameTranslation.r[3]));
//   b5.body.frameTranslation.r0b[3] = b5.body.frameTranslation.r0a[3] + (b5.body.frameTranslation.Sa[3,1] * b5.body.frameTranslation.r[1] + (b5.body.frameTranslation.Sa[3,2] * b5.body.frameTranslation.r[2] + b5.body.frameTranslation.Sa[3,3] * b5.body.frameTranslation.r[3]));
//   b5.body.frameTranslation.vaux[1] = b5.body.frameTranslation.wa[2] * b5.body.frameTranslation.r[3] - b5.body.frameTranslation.wa[3] * b5.body.frameTranslation.r[2];
//   b5.body.frameTranslation.vaux[2] = b5.body.frameTranslation.wa[3] * b5.body.frameTranslation.r[1] - b5.body.frameTranslation.wa[1] * b5.body.frameTranslation.r[3];
//   b5.body.frameTranslation.vaux[3] = b5.body.frameTranslation.wa[1] * b5.body.frameTranslation.r[2] - b5.body.frameTranslation.wa[2] * b5.body.frameTranslation.r[1];
//   b5.body.frameTranslation.vb[1] = b5.body.frameTranslation.va[1] + b5.body.frameTranslation.vaux[1];
//   b5.body.frameTranslation.vb[2] = b5.body.frameTranslation.va[2] + b5.body.frameTranslation.vaux[2];
//   b5.body.frameTranslation.vb[3] = b5.body.frameTranslation.va[3] + b5.body.frameTranslation.vaux[3];
//   b5.body.frameTranslation.ab[1] = b5.body.frameTranslation.aa[1] + (b5.body.frameTranslation.za[2] * b5.body.frameTranslation.r[3] + ((-b5.body.frameTranslation.za[3] * b5.body.frameTranslation.r[2]) + (b5.body.frameTranslation.wa[2] * b5.body.frameTranslation.vaux[3] + (-b5.body.frameTranslation.wa[3] * b5.body.frameTranslation.vaux[2]))));
//   b5.body.frameTranslation.ab[2] = b5.body.frameTranslation.aa[2] + (b5.body.frameTranslation.za[3] * b5.body.frameTranslation.r[1] + ((-b5.body.frameTranslation.za[1] * b5.body.frameTranslation.r[3]) + (b5.body.frameTranslation.wa[3] * b5.body.frameTranslation.vaux[1] + (-b5.body.frameTranslation.wa[1] * b5.body.frameTranslation.vaux[3]))));
//   b5.body.frameTranslation.ab[3] = b5.body.frameTranslation.aa[3] + (b5.body.frameTranslation.za[1] * b5.body.frameTranslation.r[2] + ((-b5.body.frameTranslation.za[2] * b5.body.frameTranslation.r[1]) + (b5.body.frameTranslation.wa[1] * b5.body.frameTranslation.vaux[2] + (-b5.body.frameTranslation.wa[2] * b5.body.frameTranslation.vaux[1]))));
//   b5.body.frameTranslation.fa[1] = b5.body.frameTranslation.fb[1];
//   b5.body.frameTranslation.fa[2] = b5.body.frameTranslation.fb[2];
//   b5.body.frameTranslation.fa[3] = b5.body.frameTranslation.fb[3];
//   b5.body.frameTranslation.ta[1] = b5.body.frameTranslation.tb[1] + (b5.body.frameTranslation.r[2] * b5.body.frameTranslation.fa[3] + (-b5.body.frameTranslation.r[3] * b5.body.frameTranslation.fa[2]));
//   b5.body.frameTranslation.ta[2] = b5.body.frameTranslation.tb[2] + (b5.body.frameTranslation.r[3] * b5.body.frameTranslation.fa[1] + (-b5.body.frameTranslation.r[1] * b5.body.frameTranslation.fa[3]));
//   b5.body.frameTranslation.ta[3] = b5.body.frameTranslation.tb[3] + (b5.body.frameTranslation.r[1] * b5.body.frameTranslation.fa[2] + (-b5.body.frameTranslation.r[2] * b5.body.frameTranslation.fa[1]));
//   b5.body.body.fa[1] = b5.body.body.m * (b5.body.body.aa[1] + (b5.body.body.za[2] * b5.body.body.rCM[3] + ((-b5.body.body.za[3] * b5.body.body.rCM[2]) + (b5.body.body.wa[2] * (b5.body.body.wa[1] * b5.body.body.rCM[2] - b5.body.body.wa[2] * b5.body.body.rCM[1]) + (-b5.body.body.wa[3] * (b5.body.body.wa[3] * b5.body.body.rCM[1] - b5.body.body.wa[1] * b5.body.body.rCM[3]))))));
//   b5.body.body.fa[2] = b5.body.body.m * (b5.body.body.aa[2] + (b5.body.body.za[3] * b5.body.body.rCM[1] + ((-b5.body.body.za[1] * b5.body.body.rCM[3]) + (b5.body.body.wa[3] * (b5.body.body.wa[2] * b5.body.body.rCM[3] - b5.body.body.wa[3] * b5.body.body.rCM[2]) + (-b5.body.body.wa[1] * (b5.body.body.wa[1] * b5.body.body.rCM[2] - b5.body.body.wa[2] * b5.body.body.rCM[1]))))));
//   b5.body.body.fa[3] = b5.body.body.m * (b5.body.body.aa[3] + (b5.body.body.za[1] * b5.body.body.rCM[2] + ((-b5.body.body.za[2] * b5.body.body.rCM[1]) + (b5.body.body.wa[1] * (b5.body.body.wa[3] * b5.body.body.rCM[1] - b5.body.body.wa[1] * b5.body.body.rCM[3]) + (-b5.body.body.wa[2] * (b5.body.body.wa[2] * b5.body.body.rCM[3] - b5.body.body.wa[3] * b5.body.body.rCM[2]))))));
//   b5.body.body.ta[1] = b5.body.body.I[1,1] * b5.body.body.za[1] + (b5.body.body.I[1,2] * b5.body.body.za[2] + (b5.body.body.I[1,3] * b5.body.body.za[3] + (b5.body.body.wa[2] * (b5.body.body.I[3,1] * b5.body.body.wa[1] + (b5.body.body.I[3,2] * b5.body.body.wa[2] + b5.body.body.I[3,3] * b5.body.body.wa[3])) + ((-b5.body.body.wa[3] * (b5.body.body.I[2,1] * b5.body.body.wa[1] + (b5.body.body.I[2,2] * b5.body.body.wa[2] + b5.body.body.I[2,3] * b5.body.body.wa[3]))) + (b5.body.body.rCM[2] * b5.body.body.fa[3] + (-b5.body.body.rCM[3] * b5.body.body.fa[2]))))));
//   b5.body.body.ta[2] = b5.body.body.I[2,1] * b5.body.body.za[1] + (b5.body.body.I[2,2] * b5.body.body.za[2] + (b5.body.body.I[2,3] * b5.body.body.za[3] + (b5.body.body.wa[3] * (b5.body.body.I[1,1] * b5.body.body.wa[1] + (b5.body.body.I[1,2] * b5.body.body.wa[2] + b5.body.body.I[1,3] * b5.body.body.wa[3])) + ((-b5.body.body.wa[1] * (b5.body.body.I[3,1] * b5.body.body.wa[1] + (b5.body.body.I[3,2] * b5.body.body.wa[2] + b5.body.body.I[3,3] * b5.body.body.wa[3]))) + (b5.body.body.rCM[3] * b5.body.body.fa[1] + (-b5.body.body.rCM[1] * b5.body.body.fa[3]))))));
//   b5.body.body.ta[3] = b5.body.body.I[3,1] * b5.body.body.za[1] + (b5.body.body.I[3,2] * b5.body.body.za[2] + (b5.body.body.I[3,3] * b5.body.body.za[3] + (b5.body.body.wa[1] * (b5.body.body.I[2,1] * b5.body.body.wa[1] + (b5.body.body.I[2,2] * b5.body.body.wa[2] + b5.body.body.I[2,3] * b5.body.body.wa[3])) + ((-b5.body.body.wa[2] * (b5.body.body.I[1,1] * b5.body.body.wa[1] + (b5.body.body.I[1,2] * b5.body.body.wa[2] + b5.body.body.I[1,3] * b5.body.body.wa[3]))) + (b5.body.body.rCM[1] * b5.body.body.fa[2] + (-b5.body.body.rCM[2] * b5.body.body.fa[1]))))));
//   b5.body.body.m = b5.body.m;
//   b5.body.body.rCM[1] = b5.body.rCM[1];
//   b5.body.body.rCM[2] = b5.body.rCM[2];
//   b5.body.body.rCM[3] = b5.body.rCM[3];
//   b5.body.body.I[1,1] = b5.body.I11;
//   b5.body.body.I[1,2] = b5.body.I21;
//   b5.body.body.I[1,3] = b5.body.I31;
//   b5.body.body.I[2,1] = b5.body.I21;
//   b5.body.body.I[2,2] = b5.body.I22;
//   b5.body.body.I[2,3] = b5.body.I32;
//   b5.body.body.I[3,1] = b5.body.I31;
//   b5.body.body.I[3,2] = b5.body.I32;
//   b5.body.body.I[3,3] = b5.body.I33;
//   b5.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b5.vis.vis.mcShape.shapeType);
//   b5.vis.vis.mcShape.Material = PackMaterial(b5.vis.vis.mcShape.color[1] / 255.0,b5.vis.vis.mcShape.color[2] / 255.0,b5.vis.vis.mcShape.color[3] / 255.0,b5.vis.vis.mcShape.specularCoefficient);
//   b5.vis.vis.mcShape.Extra = b5.vis.vis.mcShape.extra;
//   b5.vis.vis.mcShape.size[1] = b5.vis.vis.mcShape.length;
//   b5.vis.vis.mcShape.size[2] = b5.vis.vis.mcShape.width;
//   b5.vis.vis.mcShape.size[3] = b5.vis.vis.mcShape.height;
//   b5.vis.vis.mcShape.Sshape[1,1] = b5.vis.vis.mcShape.e_x[1];
//   b5.vis.vis.mcShape.Sshape[1,2] = b5.vis.vis.mcShape.e_y[1];
//   b5.vis.vis.mcShape.Sshape[1,3] = b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.e_y[3] - b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.e_y[2];
//   b5.vis.vis.mcShape.Sshape[2,1] = b5.vis.vis.mcShape.e_x[2];
//   b5.vis.vis.mcShape.Sshape[2,2] = b5.vis.vis.mcShape.e_y[2];
//   b5.vis.vis.mcShape.Sshape[2,3] = b5.vis.vis.mcShape.e_x[3] * b5.vis.vis.mcShape.e_y[1] - b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.e_y[3];
//   b5.vis.vis.mcShape.Sshape[3,1] = b5.vis.vis.mcShape.e_x[3];
//   b5.vis.vis.mcShape.Sshape[3,2] = b5.vis.vis.mcShape.e_y[3];
//   b5.vis.vis.mcShape.Sshape[3,3] = b5.vis.vis.mcShape.e_x[1] * b5.vis.vis.mcShape.e_y[2] - b5.vis.vis.mcShape.e_x[2] * b5.vis.vis.mcShape.e_y[1];
//   b5.vis.vis.mcShape.rxvisobj[1] = b5.vis.vis.mcShape.S[1,1] * b5.vis.vis.mcShape.e_x[1] + (b5.vis.vis.mcShape.S[1,2] * b5.vis.vis.mcShape.e_x[2] + b5.vis.vis.mcShape.S[1,3] * b5.vis.vis.mcShape.e_x[3]);
//   b5.vis.vis.mcShape.rxvisobj[2] = b5.vis.vis.mcShape.S[2,1] * b5.vis.vis.mcShape.e_x[1] + (b5.vis.vis.mcShape.S[2,2] * b5.vis.vis.mcShape.e_x[2] + b5.vis.vis.mcShape.S[2,3] * b5.vis.vis.mcShape.e_x[3]);
//   b5.vis.vis.mcShape.rxvisobj[3] = b5.vis.vis.mcShape.S[3,1] * b5.vis.vis.mcShape.e_x[1] + (b5.vis.vis.mcShape.S[3,2] * b5.vis.vis.mcShape.e_x[2] + b5.vis.vis.mcShape.S[3,3] * b5.vis.vis.mcShape.e_x[3]);
//   b5.vis.vis.mcShape.ryvisobj[1] = b5.vis.vis.mcShape.S[1,1] * b5.vis.vis.mcShape.e_y[1] + (b5.vis.vis.mcShape.S[1,2] * b5.vis.vis.mcShape.e_y[2] + b5.vis.vis.mcShape.S[1,3] * b5.vis.vis.mcShape.e_y[3]);
//   b5.vis.vis.mcShape.ryvisobj[2] = b5.vis.vis.mcShape.S[2,1] * b5.vis.vis.mcShape.e_y[1] + (b5.vis.vis.mcShape.S[2,2] * b5.vis.vis.mcShape.e_y[2] + b5.vis.vis.mcShape.S[2,3] * b5.vis.vis.mcShape.e_y[3]);
//   b5.vis.vis.mcShape.ryvisobj[3] = b5.vis.vis.mcShape.S[3,1] * b5.vis.vis.mcShape.e_y[1] + (b5.vis.vis.mcShape.S[3,2] * b5.vis.vis.mcShape.e_y[2] + b5.vis.vis.mcShape.S[3,3] * b5.vis.vis.mcShape.e_y[3]);
//   b5.vis.vis.mcShape.rvisobj[1] = b5.vis.vis.mcShape.r[1] + (b5.vis.vis.mcShape.S[1,1] * b5.vis.vis.mcShape.r_shape[1] + (b5.vis.vis.mcShape.S[1,2] * b5.vis.vis.mcShape.r_shape[2] + b5.vis.vis.mcShape.S[1,3] * b5.vis.vis.mcShape.r_shape[3]));
//   b5.vis.vis.mcShape.rvisobj[2] = b5.vis.vis.mcShape.r[2] + (b5.vis.vis.mcShape.S[2,1] * b5.vis.vis.mcShape.r_shape[1] + (b5.vis.vis.mcShape.S[2,2] * b5.vis.vis.mcShape.r_shape[2] + b5.vis.vis.mcShape.S[2,3] * b5.vis.vis.mcShape.r_shape[3]));
//   b5.vis.vis.mcShape.rvisobj[3] = b5.vis.vis.mcShape.r[3] + (b5.vis.vis.mcShape.S[3,1] * b5.vis.vis.mcShape.r_shape[1] + (b5.vis.vis.mcShape.S[3,2] * b5.vis.vis.mcShape.r_shape[2] + b5.vis.vis.mcShape.S[3,3] * b5.vis.vis.mcShape.r_shape[3]));
//   b5.vis.vis.mcShape.e_x[1] = b5.vis.vis.nLength[1];
//   b5.vis.vis.mcShape.e_x[2] = b5.vis.vis.nLength[2];
//   b5.vis.vis.mcShape.e_x[3] = b5.vis.vis.nLength[3];
//   b5.vis.vis.mcShape.e_y[1] = b5.vis.vis.nWidth[1];
//   b5.vis.vis.mcShape.e_y[2] = b5.vis.vis.nWidth[2];
//   b5.vis.vis.mcShape.e_y[3] = b5.vis.vis.nWidth[3];
//   b5.vis.vis.mcShape.e_z[1] = b5.vis.vis.nHeight[1];
//   b5.vis.vis.mcShape.e_z[2] = b5.vis.vis.nHeight[2];
//   b5.vis.vis.mcShape.e_z[3] = b5.vis.vis.nHeight[3];
//   b5.vis.vis.S[1,1] = b5.vis.Sa[1,1];
//   b5.vis.vis.S[1,2] = b5.vis.Sa[1,2];
//   b5.vis.vis.S[1,3] = b5.vis.Sa[1,3];
//   b5.vis.vis.S[2,1] = b5.vis.Sa[2,1];
//   b5.vis.vis.S[2,2] = b5.vis.Sa[2,2];
//   b5.vis.vis.S[2,3] = b5.vis.Sa[2,3];
//   b5.vis.vis.S[3,1] = b5.vis.Sa[3,1];
//   b5.vis.vis.S[3,2] = b5.vis.Sa[3,2];
//   b5.vis.vis.S[3,3] = b5.vis.Sa[3,3];
//   b5.vis.vis.r[1] = b5.vis.r0a[1];
//   b5.vis.vis.r[2] = b5.vis.r0a[2];
//   b5.vis.vis.r[3] = b5.vis.r0a[3];
//   b5.vis.vis.nLength[1] = b5.vis.nLength[1];
//   b5.vis.vis.nLength[2] = b5.vis.nLength[2];
//   b5.vis.vis.nLength[3] = b5.vis.nLength[3];
//   b5.vis.vis.nWidth[1] = b5.vis.nWidth[1];
//   b5.vis.vis.nWidth[2] = b5.vis.nWidth[2];
//   b5.vis.vis.nWidth[3] = b5.vis.nWidth[3];
//   b5.vis.vis.nHeight[1] = b5.vis.nHeight[1];
//   b5.vis.vis.nHeight[2] = b5.vis.nHeight[2];
//   b5.vis.vis.nHeight[3] = b5.vis.nHeight[3];
//   b5.vis.fa[1] = 0.0;
//   b5.vis.fa[2] = 0.0;
//   b5.vis.fa[3] = 0.0;
//   b5.vis.ta[1] = 0.0;
//   b5.vis.ta[2] = 0.0;
//   b5.vis.ta[3] = 0.0;
//   b6.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b6.box.mcShape.shapeType);
//   b6.box.mcShape.Material = PackMaterial(b6.box.mcShape.color[1] / 255.0,b6.box.mcShape.color[2] / 255.0,b6.box.mcShape.color[3] / 255.0,b6.box.mcShape.specularCoefficient);
//   b6.box.mcShape.Extra = b6.box.mcShape.extra;
//   b6.box.mcShape.size[1] = b6.box.mcShape.length;
//   b6.box.mcShape.size[2] = b6.box.mcShape.width;
//   b6.box.mcShape.size[3] = b6.box.mcShape.height;
//   b6.box.mcShape.Sshape[1,1] = b6.box.mcShape.e_x[1];
//   b6.box.mcShape.Sshape[1,2] = b6.box.mcShape.e_y[1];
//   b6.box.mcShape.Sshape[1,3] = b6.box.mcShape.e_x[2] * b6.box.mcShape.e_y[3] - b6.box.mcShape.e_x[3] * b6.box.mcShape.e_y[2];
//   b6.box.mcShape.Sshape[2,1] = b6.box.mcShape.e_x[2];
//   b6.box.mcShape.Sshape[2,2] = b6.box.mcShape.e_y[2];
//   b6.box.mcShape.Sshape[2,3] = b6.box.mcShape.e_x[3] * b6.box.mcShape.e_y[1] - b6.box.mcShape.e_x[1] * b6.box.mcShape.e_y[3];
//   b6.box.mcShape.Sshape[3,1] = b6.box.mcShape.e_x[3];
//   b6.box.mcShape.Sshape[3,2] = b6.box.mcShape.e_y[3];
//   b6.box.mcShape.Sshape[3,3] = b6.box.mcShape.e_x[1] * b6.box.mcShape.e_y[2] - b6.box.mcShape.e_x[2] * b6.box.mcShape.e_y[1];
//   b6.box.mcShape.rxvisobj[1] = b6.box.mcShape.S[1,1] * b6.box.mcShape.e_x[1] + (b6.box.mcShape.S[1,2] * b6.box.mcShape.e_x[2] + b6.box.mcShape.S[1,3] * b6.box.mcShape.e_x[3]);
//   b6.box.mcShape.rxvisobj[2] = b6.box.mcShape.S[2,1] * b6.box.mcShape.e_x[1] + (b6.box.mcShape.S[2,2] * b6.box.mcShape.e_x[2] + b6.box.mcShape.S[2,3] * b6.box.mcShape.e_x[3]);
//   b6.box.mcShape.rxvisobj[3] = b6.box.mcShape.S[3,1] * b6.box.mcShape.e_x[1] + (b6.box.mcShape.S[3,2] * b6.box.mcShape.e_x[2] + b6.box.mcShape.S[3,3] * b6.box.mcShape.e_x[3]);
//   b6.box.mcShape.ryvisobj[1] = b6.box.mcShape.S[1,1] * b6.box.mcShape.e_y[1] + (b6.box.mcShape.S[1,2] * b6.box.mcShape.e_y[2] + b6.box.mcShape.S[1,3] * b6.box.mcShape.e_y[3]);
//   b6.box.mcShape.ryvisobj[2] = b6.box.mcShape.S[2,1] * b6.box.mcShape.e_y[1] + (b6.box.mcShape.S[2,2] * b6.box.mcShape.e_y[2] + b6.box.mcShape.S[2,3] * b6.box.mcShape.e_y[3]);
//   b6.box.mcShape.ryvisobj[3] = b6.box.mcShape.S[3,1] * b6.box.mcShape.e_y[1] + (b6.box.mcShape.S[3,2] * b6.box.mcShape.e_y[2] + b6.box.mcShape.S[3,3] * b6.box.mcShape.e_y[3]);
//   b6.box.mcShape.rvisobj[1] = b6.box.mcShape.r[1] + (b6.box.mcShape.S[1,1] * b6.box.mcShape.r_shape[1] + (b6.box.mcShape.S[1,2] * b6.box.mcShape.r_shape[2] + b6.box.mcShape.S[1,3] * b6.box.mcShape.r_shape[3]));
//   b6.box.mcShape.rvisobj[2] = b6.box.mcShape.r[2] + (b6.box.mcShape.S[2,1] * b6.box.mcShape.r_shape[1] + (b6.box.mcShape.S[2,2] * b6.box.mcShape.r_shape[2] + b6.box.mcShape.S[2,3] * b6.box.mcShape.r_shape[3]));
//   b6.box.mcShape.rvisobj[3] = b6.box.mcShape.r[3] + (b6.box.mcShape.S[3,1] * b6.box.mcShape.r_shape[1] + (b6.box.mcShape.S[3,2] * b6.box.mcShape.r_shape[2] + b6.box.mcShape.S[3,3] * b6.box.mcShape.r_shape[3]));
//   b6.box.mcShape.e_x[1] = b6.box.nLength[1];
//   b6.box.mcShape.e_x[2] = b6.box.nLength[2];
//   b6.box.mcShape.e_x[3] = b6.box.nLength[3];
//   b6.box.mcShape.e_y[1] = b6.box.nWidth[1];
//   b6.box.mcShape.e_y[2] = b6.box.nWidth[2];
//   b6.box.mcShape.e_y[3] = b6.box.nWidth[3];
//   b6.box.mcShape.e_z[1] = b6.box.nHeight[1];
//   b6.box.mcShape.e_z[2] = b6.box.nHeight[2];
//   b6.box.mcShape.e_z[3] = b6.box.nHeight[3];
//   b6.frameTranslation.Sb[1,1] = b6.frameTranslation.Sa[1,1];
//   b6.frameTranslation.Sb[1,2] = b6.frameTranslation.Sa[1,2];
//   b6.frameTranslation.Sb[1,3] = b6.frameTranslation.Sa[1,3];
//   b6.frameTranslation.Sb[2,1] = b6.frameTranslation.Sa[2,1];
//   b6.frameTranslation.Sb[2,2] = b6.frameTranslation.Sa[2,2];
//   b6.frameTranslation.Sb[2,3] = b6.frameTranslation.Sa[2,3];
//   b6.frameTranslation.Sb[3,1] = b6.frameTranslation.Sa[3,1];
//   b6.frameTranslation.Sb[3,2] = b6.frameTranslation.Sa[3,2];
//   b6.frameTranslation.Sb[3,3] = b6.frameTranslation.Sa[3,3];
//   b6.frameTranslation.wb[1] = b6.frameTranslation.wa[1];
//   b6.frameTranslation.wb[2] = b6.frameTranslation.wa[2];
//   b6.frameTranslation.wb[3] = b6.frameTranslation.wa[3];
//   b6.frameTranslation.zb[1] = b6.frameTranslation.za[1];
//   b6.frameTranslation.zb[2] = b6.frameTranslation.za[2];
//   b6.frameTranslation.zb[3] = b6.frameTranslation.za[3];
//   b6.frameTranslation.r0b[1] = b6.frameTranslation.r0a[1] + (b6.frameTranslation.Sa[1,1] * b6.frameTranslation.r[1] + (b6.frameTranslation.Sa[1,2] * b6.frameTranslation.r[2] + b6.frameTranslation.Sa[1,3] * b6.frameTranslation.r[3]));
//   b6.frameTranslation.r0b[2] = b6.frameTranslation.r0a[2] + (b6.frameTranslation.Sa[2,1] * b6.frameTranslation.r[1] + (b6.frameTranslation.Sa[2,2] * b6.frameTranslation.r[2] + b6.frameTranslation.Sa[2,3] * b6.frameTranslation.r[3]));
//   b6.frameTranslation.r0b[3] = b6.frameTranslation.r0a[3] + (b6.frameTranslation.Sa[3,1] * b6.frameTranslation.r[1] + (b6.frameTranslation.Sa[3,2] * b6.frameTranslation.r[2] + b6.frameTranslation.Sa[3,3] * b6.frameTranslation.r[3]));
//   b6.frameTranslation.vaux[1] = b6.frameTranslation.wa[2] * b6.frameTranslation.r[3] - b6.frameTranslation.wa[3] * b6.frameTranslation.r[2];
//   b6.frameTranslation.vaux[2] = b6.frameTranslation.wa[3] * b6.frameTranslation.r[1] - b6.frameTranslation.wa[1] * b6.frameTranslation.r[3];
//   b6.frameTranslation.vaux[3] = b6.frameTranslation.wa[1] * b6.frameTranslation.r[2] - b6.frameTranslation.wa[2] * b6.frameTranslation.r[1];
//   b6.frameTranslation.vb[1] = b6.frameTranslation.va[1] + b6.frameTranslation.vaux[1];
//   b6.frameTranslation.vb[2] = b6.frameTranslation.va[2] + b6.frameTranslation.vaux[2];
//   b6.frameTranslation.vb[3] = b6.frameTranslation.va[3] + b6.frameTranslation.vaux[3];
//   b6.frameTranslation.ab[1] = b6.frameTranslation.aa[1] + (b6.frameTranslation.za[2] * b6.frameTranslation.r[3] + ((-b6.frameTranslation.za[3] * b6.frameTranslation.r[2]) + (b6.frameTranslation.wa[2] * b6.frameTranslation.vaux[3] + (-b6.frameTranslation.wa[3] * b6.frameTranslation.vaux[2]))));
//   b6.frameTranslation.ab[2] = b6.frameTranslation.aa[2] + (b6.frameTranslation.za[3] * b6.frameTranslation.r[1] + ((-b6.frameTranslation.za[1] * b6.frameTranslation.r[3]) + (b6.frameTranslation.wa[3] * b6.frameTranslation.vaux[1] + (-b6.frameTranslation.wa[1] * b6.frameTranslation.vaux[3]))));
//   b6.frameTranslation.ab[3] = b6.frameTranslation.aa[3] + (b6.frameTranslation.za[1] * b6.frameTranslation.r[2] + ((-b6.frameTranslation.za[2] * b6.frameTranslation.r[1]) + (b6.frameTranslation.wa[1] * b6.frameTranslation.vaux[2] + (-b6.frameTranslation.wa[2] * b6.frameTranslation.vaux[1]))));
//   b6.frameTranslation.fa[1] = b6.frameTranslation.fb[1];
//   b6.frameTranslation.fa[2] = b6.frameTranslation.fb[2];
//   b6.frameTranslation.fa[3] = b6.frameTranslation.fb[3];
//   b6.frameTranslation.ta[1] = b6.frameTranslation.tb[1] + (b6.frameTranslation.r[2] * b6.frameTranslation.fa[3] + (-b6.frameTranslation.r[3] * b6.frameTranslation.fa[2]));
//   b6.frameTranslation.ta[2] = b6.frameTranslation.tb[2] + (b6.frameTranslation.r[3] * b6.frameTranslation.fa[1] + (-b6.frameTranslation.r[1] * b6.frameTranslation.fa[3]));
//   b6.frameTranslation.ta[3] = b6.frameTranslation.tb[3] + (b6.frameTranslation.r[1] * b6.frameTranslation.fa[2] + (-b6.frameTranslation.r[2] * b6.frameTranslation.fa[1]));
//   b6.body.fa[1] = b6.body.m * (b6.body.aa[1] + (b6.body.za[2] * b6.body.rCM[3] + ((-b6.body.za[3] * b6.body.rCM[2]) + (b6.body.wa[2] * (b6.body.wa[1] * b6.body.rCM[2] - b6.body.wa[2] * b6.body.rCM[1]) + (-b6.body.wa[3] * (b6.body.wa[3] * b6.body.rCM[1] - b6.body.wa[1] * b6.body.rCM[3]))))));
//   b6.body.fa[2] = b6.body.m * (b6.body.aa[2] + (b6.body.za[3] * b6.body.rCM[1] + ((-b6.body.za[1] * b6.body.rCM[3]) + (b6.body.wa[3] * (b6.body.wa[2] * b6.body.rCM[3] - b6.body.wa[3] * b6.body.rCM[2]) + (-b6.body.wa[1] * (b6.body.wa[1] * b6.body.rCM[2] - b6.body.wa[2] * b6.body.rCM[1]))))));
//   b6.body.fa[3] = b6.body.m * (b6.body.aa[3] + (b6.body.za[1] * b6.body.rCM[2] + ((-b6.body.za[2] * b6.body.rCM[1]) + (b6.body.wa[1] * (b6.body.wa[3] * b6.body.rCM[1] - b6.body.wa[1] * b6.body.rCM[3]) + (-b6.body.wa[2] * (b6.body.wa[2] * b6.body.rCM[3] - b6.body.wa[3] * b6.body.rCM[2]))))));
//   b6.body.ta[1] = b6.body.I[1,1] * b6.body.za[1] + (b6.body.I[1,2] * b6.body.za[2] + (b6.body.I[1,3] * b6.body.za[3] + (b6.body.wa[2] * (b6.body.I[3,1] * b6.body.wa[1] + (b6.body.I[3,2] * b6.body.wa[2] + b6.body.I[3,3] * b6.body.wa[3])) + ((-b6.body.wa[3] * (b6.body.I[2,1] * b6.body.wa[1] + (b6.body.I[2,2] * b6.body.wa[2] + b6.body.I[2,3] * b6.body.wa[3]))) + (b6.body.rCM[2] * b6.body.fa[3] + (-b6.body.rCM[3] * b6.body.fa[2]))))));
//   b6.body.ta[2] = b6.body.I[2,1] * b6.body.za[1] + (b6.body.I[2,2] * b6.body.za[2] + (b6.body.I[2,3] * b6.body.za[3] + (b6.body.wa[3] * (b6.body.I[1,1] * b6.body.wa[1] + (b6.body.I[1,2] * b6.body.wa[2] + b6.body.I[1,3] * b6.body.wa[3])) + ((-b6.body.wa[1] * (b6.body.I[3,1] * b6.body.wa[1] + (b6.body.I[3,2] * b6.body.wa[2] + b6.body.I[3,3] * b6.body.wa[3]))) + (b6.body.rCM[3] * b6.body.fa[1] + (-b6.body.rCM[1] * b6.body.fa[3]))))));
//   b6.body.ta[3] = b6.body.I[3,1] * b6.body.za[1] + (b6.body.I[3,2] * b6.body.za[2] + (b6.body.I[3,3] * b6.body.za[3] + (b6.body.wa[1] * (b6.body.I[2,1] * b6.body.wa[1] + (b6.body.I[2,2] * b6.body.wa[2] + b6.body.I[2,3] * b6.body.wa[3])) + ((-b6.body.wa[2] * (b6.body.I[1,1] * b6.body.wa[1] + (b6.body.I[1,2] * b6.body.wa[2] + b6.body.I[1,3] * b6.body.wa[3]))) + (b6.body.rCM[1] * b6.body.fa[2] + (-b6.body.rCM[2] * b6.body.fa[1]))))));
//   b6.box.S[1,1] = b6.Sa[1,1];
//   b6.box.S[1,2] = b6.Sa[1,2];
//   b6.box.S[1,3] = b6.Sa[1,3];
//   b6.box.S[2,1] = b6.Sa[2,1];
//   b6.box.S[2,2] = b6.Sa[2,2];
//   b6.box.S[2,3] = b6.Sa[2,3];
//   b6.box.S[3,1] = b6.Sa[3,1];
//   b6.box.S[3,2] = b6.Sa[3,2];
//   b6.box.S[3,3] = b6.Sa[3,3];
//   b6.box.r[1] = b6.r0a[1];
//   b6.box.r[2] = b6.r0a[2];
//   b6.box.r[3] = b6.r0a[3];
//   b6.box.Sshape[1,1] = b6.Scyl[1,1];
//   b6.box.Sshape[1,2] = b6.Scyl[1,2];
//   b6.box.Sshape[1,3] = b6.Scyl[1,3];
//   b6.box.Sshape[2,1] = b6.Scyl[2,1];
//   b6.box.Sshape[2,2] = b6.Scyl[2,2];
//   b6.box.Sshape[2,3] = b6.Scyl[2,3];
//   b6.box.Sshape[3,1] = b6.Scyl[3,1];
//   b6.box.Sshape[3,2] = b6.Scyl[3,2];
//   b6.box.Sshape[3,3] = b6.Scyl[3,3];
//   b6.mo = 3141.59265358979 * (b6.rho * (b6.Length * b6.Radius ^ 2.0));
//   b6.mi = 3141.59265358979 * (b6.rho * (b6.Length * b6.InnerRadius ^ 2.0));
//   b6.I22 = b6.mo * (b6.Length ^ 2.0 + 3.0 * b6.Radius ^ 2.0) / 12.0 - b6.mi * (b6.Length ^ 2.0 + 3.0 * b6.InnerRadius ^ 2.0) / 12.0;
//   b6.body.m = b6.mo - b6.mi;
//   b6.body.rCM[1] = b6.r0[1] + 0.5 * (b6.Length * b6.box.nLength[1]);
//   b6.body.rCM[2] = b6.r0[2] + 0.5 * (b6.Length * b6.box.nLength[2]);
//   b6.body.rCM[3] = b6.r0[3] + 0.5 * (b6.Length * b6.box.nLength[3]);
//   b6.body.I[1,1] = b6.Scyl[1,1] ^ 2.0 * (0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) + (b6.Scyl[1,2] ^ 2.0 * b6.I22 + b6.Scyl[1,3] ^ 2.0 * b6.I22);
//   b6.body.I[1,2] = b6.Scyl[1,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[2,1]) + (b6.Scyl[1,2] * (b6.I22 * b6.Scyl[2,2]) + b6.Scyl[1,3] * (b6.I22 * b6.Scyl[2,3]));
//   b6.body.I[1,3] = b6.Scyl[1,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[3,1]) + (b6.Scyl[1,2] * (b6.I22 * b6.Scyl[3,2]) + b6.Scyl[1,3] * (b6.I22 * b6.Scyl[3,3]));
//   b6.body.I[2,1] = b6.Scyl[2,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[1,1]) + (b6.Scyl[2,2] * (b6.I22 * b6.Scyl[1,2]) + b6.Scyl[2,3] * (b6.I22 * b6.Scyl[1,3]));
//   b6.body.I[2,2] = b6.Scyl[2,1] ^ 2.0 * (0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) + (b6.Scyl[2,2] ^ 2.0 * b6.I22 + b6.Scyl[2,3] ^ 2.0 * b6.I22);
//   b6.body.I[2,3] = b6.Scyl[2,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[3,1]) + (b6.Scyl[2,2] * (b6.I22 * b6.Scyl[3,2]) + b6.Scyl[2,3] * (b6.I22 * b6.Scyl[3,3]));
//   b6.body.I[3,1] = b6.Scyl[3,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[1,1]) + (b6.Scyl[3,2] * (b6.I22 * b6.Scyl[1,2]) + b6.Scyl[3,3] * (b6.I22 * b6.Scyl[1,3]));
//   b6.body.I[3,2] = b6.Scyl[3,1] * ((0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) * b6.Scyl[2,1]) + (b6.Scyl[3,2] * (b6.I22 * b6.Scyl[2,2]) + b6.Scyl[3,3] * (b6.I22 * b6.Scyl[2,3]));
//   b6.body.I[3,3] = b6.Scyl[3,1] ^ 2.0 * (0.5 * (b6.mo * b6.Radius ^ 2.0) - 0.5 * (b6.mi * b6.InnerRadius ^ 2.0)) + (b6.Scyl[3,2] ^ 2.0 * b6.I22 + b6.Scyl[3,3] ^ 2.0 * b6.I22);
//   j5.axis.s = j5.q;
//   j5.bearing.s = 0.0;
//   j5.qd = der(j5.q);
//   j5.qdd = der(j5.qd);
//   j5.nn[1] = j5.n[1] / sqrt(j5.n[1] ^ 2.0 + (j5.n[2] ^ 2.0 + j5.n[3] ^ 2.0));
//   j5.nn[2] = j5.n[2] / sqrt(j5.n[1] ^ 2.0 + (j5.n[2] ^ 2.0 + j5.n[3] ^ 2.0));
//   j5.nn[3] = j5.n[3] / sqrt(j5.n[1] ^ 2.0 + (j5.n[2] ^ 2.0 + j5.n[3] ^ 2.0));
//   j5.S_rel[1,1] = 1.0;
//   j5.S_rel[1,2] = 0.0;
//   j5.S_rel[1,3] = 0.0;
//   j5.S_rel[2,1] = 0.0;
//   j5.S_rel[2,2] = 1.0;
//   j5.S_rel[2,3] = 0.0;
//   j5.S_rel[3,1] = 0.0;
//   j5.S_rel[3,2] = 0.0;
//   j5.S_rel[3,3] = 1.0;
//   j5.qq = j5.q - j5.q0;
//   j5.r_rela[1] = j5.qq * j5.nn[1];
//   j5.r_rela[2] = j5.qq * j5.nn[2];
//   j5.r_rela[3] = j5.qq * j5.nn[3];
//   j5.v_rela[1] = j5.qd * j5.nn[1];
//   j5.v_rela[2] = j5.qd * j5.nn[2];
//   j5.v_rela[3] = j5.qd * j5.nn[3];
//   j5.a_rela[1] = j5.qdd * j5.nn[1];
//   j5.a_rela[2] = j5.qdd * j5.nn[2];
//   j5.a_rela[3] = j5.qdd * j5.nn[3];
//   j5.w_rela[1] = 0.0;
//   j5.w_rela[2] = 0.0;
//   j5.w_rela[3] = 0.0;
//   j5.z_rela[1] = 0.0;
//   j5.z_rela[2] = 0.0;
//   j5.z_rela[3] = 0.0;
//   j5.Sb[1,1] = j5.Sa[1,1];
//   j5.Sb[1,2] = j5.Sa[1,2];
//   j5.Sb[1,3] = j5.Sa[1,3];
//   j5.Sb[2,1] = j5.Sa[2,1];
//   j5.Sb[2,2] = j5.Sa[2,2];
//   j5.Sb[2,3] = j5.Sa[2,3];
//   j5.Sb[3,1] = j5.Sa[3,1];
//   j5.Sb[3,2] = j5.Sa[3,2];
//   j5.Sb[3,3] = j5.Sa[3,3];
//   j5.r0b[1] = j5.r0a[1] + (j5.Sa[1,1] * j5.r_rela[1] + (j5.Sa[1,2] * j5.r_rela[2] + j5.Sa[1,3] * j5.r_rela[3]));
//   j5.r0b[2] = j5.r0a[2] + (j5.Sa[2,1] * j5.r_rela[1] + (j5.Sa[2,2] * j5.r_rela[2] + j5.Sa[2,3] * j5.r_rela[3]));
//   j5.r0b[3] = j5.r0a[3] + (j5.Sa[3,1] * j5.r_rela[1] + (j5.Sa[3,2] * j5.r_rela[2] + j5.Sa[3,3] * j5.r_rela[3]));
//   j5.vaux[1] = j5.wa[2] * j5.r_rela[3] - j5.wa[3] * j5.r_rela[2];
//   j5.vaux[2] = j5.wa[3] * j5.r_rela[1] - j5.wa[1] * j5.r_rela[3];
//   j5.vaux[3] = j5.wa[1] * j5.r_rela[2] - j5.wa[2] * j5.r_rela[1];
//   j5.vb[1] = j5.va[1] + (j5.v_rela[1] + j5.vaux[1]);
//   j5.vb[2] = j5.va[2] + (j5.v_rela[2] + j5.vaux[2]);
//   j5.vb[3] = j5.va[3] + (j5.v_rela[3] + j5.vaux[3]);
//   j5.wb[1] = j5.wa[1];
//   j5.wb[2] = j5.wa[2];
//   j5.wb[3] = j5.wa[3];
//   j5.ab[1] = j5.aa[1] + (j5.a_rela[1] + (j5.za[2] * j5.r_rela[3] + ((-j5.za[3] * j5.r_rela[2]) + (j5.wa[2] * (j5.vaux[3] + 2.0 * j5.v_rela[3]) + (-j5.wa[3] * (j5.vaux[2] + 2.0 * j5.v_rela[2]))))));
//   j5.ab[2] = j5.aa[2] + (j5.a_rela[2] + (j5.za[3] * j5.r_rela[1] + ((-j5.za[1] * j5.r_rela[3]) + (j5.wa[3] * (j5.vaux[1] + 2.0 * j5.v_rela[1]) + (-j5.wa[1] * (j5.vaux[3] + 2.0 * j5.v_rela[3]))))));
//   j5.ab[3] = j5.aa[3] + (j5.a_rela[3] + (j5.za[1] * j5.r_rela[2] + ((-j5.za[2] * j5.r_rela[1]) + (j5.wa[1] * (j5.vaux[2] + 2.0 * j5.v_rela[2]) + (-j5.wa[2] * (j5.vaux[1] + 2.0 * j5.v_rela[1]))))));
//   j5.zb[1] = j5.za[1];
//   j5.zb[2] = j5.za[2];
//   j5.zb[3] = j5.za[3];
//   j5.fa[1] = j5.fb[1];
//   j5.fa[2] = j5.fb[2];
//   j5.fa[3] = j5.fb[3];
//   j5.ta[1] = j5.tb[1] + (j5.r_rela[2] * j5.fa[3] + (-j5.r_rela[3] * j5.fa[2]));
//   j5.ta[2] = j5.tb[2] + (j5.r_rela[3] * j5.fa[1] + (-j5.r_rela[1] * j5.fa[3]));
//   j5.ta[3] = j5.tb[3] + (j5.r_rela[1] * j5.fa[2] + (-j5.r_rela[2] * j5.fa[1]));
//   j5.axis.f = j5.nn[1] * j5.fb[1] + (j5.nn[2] * j5.fb[2] + j5.nn[3] * j5.fb[3]);
//   b7.body.frameTranslation.Sb[1,1] = b7.body.frameTranslation.Sa[1,1];
//   b7.body.frameTranslation.Sb[1,2] = b7.body.frameTranslation.Sa[1,2];
//   b7.body.frameTranslation.Sb[1,3] = b7.body.frameTranslation.Sa[1,3];
//   b7.body.frameTranslation.Sb[2,1] = b7.body.frameTranslation.Sa[2,1];
//   b7.body.frameTranslation.Sb[2,2] = b7.body.frameTranslation.Sa[2,2];
//   b7.body.frameTranslation.Sb[2,3] = b7.body.frameTranslation.Sa[2,3];
//   b7.body.frameTranslation.Sb[3,1] = b7.body.frameTranslation.Sa[3,1];
//   b7.body.frameTranslation.Sb[3,2] = b7.body.frameTranslation.Sa[3,2];
//   b7.body.frameTranslation.Sb[3,3] = b7.body.frameTranslation.Sa[3,3];
//   b7.body.frameTranslation.wb[1] = b7.body.frameTranslation.wa[1];
//   b7.body.frameTranslation.wb[2] = b7.body.frameTranslation.wa[2];
//   b7.body.frameTranslation.wb[3] = b7.body.frameTranslation.wa[3];
//   b7.body.frameTranslation.zb[1] = b7.body.frameTranslation.za[1];
//   b7.body.frameTranslation.zb[2] = b7.body.frameTranslation.za[2];
//   b7.body.frameTranslation.zb[3] = b7.body.frameTranslation.za[3];
//   b7.body.frameTranslation.r0b[1] = b7.body.frameTranslation.r0a[1] + (b7.body.frameTranslation.Sa[1,1] * b7.body.frameTranslation.r[1] + (b7.body.frameTranslation.Sa[1,2] * b7.body.frameTranslation.r[2] + b7.body.frameTranslation.Sa[1,3] * b7.body.frameTranslation.r[3]));
//   b7.body.frameTranslation.r0b[2] = b7.body.frameTranslation.r0a[2] + (b7.body.frameTranslation.Sa[2,1] * b7.body.frameTranslation.r[1] + (b7.body.frameTranslation.Sa[2,2] * b7.body.frameTranslation.r[2] + b7.body.frameTranslation.Sa[2,3] * b7.body.frameTranslation.r[3]));
//   b7.body.frameTranslation.r0b[3] = b7.body.frameTranslation.r0a[3] + (b7.body.frameTranslation.Sa[3,1] * b7.body.frameTranslation.r[1] + (b7.body.frameTranslation.Sa[3,2] * b7.body.frameTranslation.r[2] + b7.body.frameTranslation.Sa[3,3] * b7.body.frameTranslation.r[3]));
//   b7.body.frameTranslation.vaux[1] = b7.body.frameTranslation.wa[2] * b7.body.frameTranslation.r[3] - b7.body.frameTranslation.wa[3] * b7.body.frameTranslation.r[2];
//   b7.body.frameTranslation.vaux[2] = b7.body.frameTranslation.wa[3] * b7.body.frameTranslation.r[1] - b7.body.frameTranslation.wa[1] * b7.body.frameTranslation.r[3];
//   b7.body.frameTranslation.vaux[3] = b7.body.frameTranslation.wa[1] * b7.body.frameTranslation.r[2] - b7.body.frameTranslation.wa[2] * b7.body.frameTranslation.r[1];
//   b7.body.frameTranslation.vb[1] = b7.body.frameTranslation.va[1] + b7.body.frameTranslation.vaux[1];
//   b7.body.frameTranslation.vb[2] = b7.body.frameTranslation.va[2] + b7.body.frameTranslation.vaux[2];
//   b7.body.frameTranslation.vb[3] = b7.body.frameTranslation.va[3] + b7.body.frameTranslation.vaux[3];
//   b7.body.frameTranslation.ab[1] = b7.body.frameTranslation.aa[1] + (b7.body.frameTranslation.za[2] * b7.body.frameTranslation.r[3] + ((-b7.body.frameTranslation.za[3] * b7.body.frameTranslation.r[2]) + (b7.body.frameTranslation.wa[2] * b7.body.frameTranslation.vaux[3] + (-b7.body.frameTranslation.wa[3] * b7.body.frameTranslation.vaux[2]))));
//   b7.body.frameTranslation.ab[2] = b7.body.frameTranslation.aa[2] + (b7.body.frameTranslation.za[3] * b7.body.frameTranslation.r[1] + ((-b7.body.frameTranslation.za[1] * b7.body.frameTranslation.r[3]) + (b7.body.frameTranslation.wa[3] * b7.body.frameTranslation.vaux[1] + (-b7.body.frameTranslation.wa[1] * b7.body.frameTranslation.vaux[3]))));
//   b7.body.frameTranslation.ab[3] = b7.body.frameTranslation.aa[3] + (b7.body.frameTranslation.za[1] * b7.body.frameTranslation.r[2] + ((-b7.body.frameTranslation.za[2] * b7.body.frameTranslation.r[1]) + (b7.body.frameTranslation.wa[1] * b7.body.frameTranslation.vaux[2] + (-b7.body.frameTranslation.wa[2] * b7.body.frameTranslation.vaux[1]))));
//   b7.body.frameTranslation.fa[1] = b7.body.frameTranslation.fb[1];
//   b7.body.frameTranslation.fa[2] = b7.body.frameTranslation.fb[2];
//   b7.body.frameTranslation.fa[3] = b7.body.frameTranslation.fb[3];
//   b7.body.frameTranslation.ta[1] = b7.body.frameTranslation.tb[1] + (b7.body.frameTranslation.r[2] * b7.body.frameTranslation.fa[3] + (-b7.body.frameTranslation.r[3] * b7.body.frameTranslation.fa[2]));
//   b7.body.frameTranslation.ta[2] = b7.body.frameTranslation.tb[2] + (b7.body.frameTranslation.r[3] * b7.body.frameTranslation.fa[1] + (-b7.body.frameTranslation.r[1] * b7.body.frameTranslation.fa[3]));
//   b7.body.frameTranslation.ta[3] = b7.body.frameTranslation.tb[3] + (b7.body.frameTranslation.r[1] * b7.body.frameTranslation.fa[2] + (-b7.body.frameTranslation.r[2] * b7.body.frameTranslation.fa[1]));
//   b7.body.body.fa[1] = b7.body.body.m * (b7.body.body.aa[1] + (b7.body.body.za[2] * b7.body.body.rCM[3] + ((-b7.body.body.za[3] * b7.body.body.rCM[2]) + (b7.body.body.wa[2] * (b7.body.body.wa[1] * b7.body.body.rCM[2] - b7.body.body.wa[2] * b7.body.body.rCM[1]) + (-b7.body.body.wa[3] * (b7.body.body.wa[3] * b7.body.body.rCM[1] - b7.body.body.wa[1] * b7.body.body.rCM[3]))))));
//   b7.body.body.fa[2] = b7.body.body.m * (b7.body.body.aa[2] + (b7.body.body.za[3] * b7.body.body.rCM[1] + ((-b7.body.body.za[1] * b7.body.body.rCM[3]) + (b7.body.body.wa[3] * (b7.body.body.wa[2] * b7.body.body.rCM[3] - b7.body.body.wa[3] * b7.body.body.rCM[2]) + (-b7.body.body.wa[1] * (b7.body.body.wa[1] * b7.body.body.rCM[2] - b7.body.body.wa[2] * b7.body.body.rCM[1]))))));
//   b7.body.body.fa[3] = b7.body.body.m * (b7.body.body.aa[3] + (b7.body.body.za[1] * b7.body.body.rCM[2] + ((-b7.body.body.za[2] * b7.body.body.rCM[1]) + (b7.body.body.wa[1] * (b7.body.body.wa[3] * b7.body.body.rCM[1] - b7.body.body.wa[1] * b7.body.body.rCM[3]) + (-b7.body.body.wa[2] * (b7.body.body.wa[2] * b7.body.body.rCM[3] - b7.body.body.wa[3] * b7.body.body.rCM[2]))))));
//   b7.body.body.ta[1] = b7.body.body.I[1,1] * b7.body.body.za[1] + (b7.body.body.I[1,2] * b7.body.body.za[2] + (b7.body.body.I[1,3] * b7.body.body.za[3] + (b7.body.body.wa[2] * (b7.body.body.I[3,1] * b7.body.body.wa[1] + (b7.body.body.I[3,2] * b7.body.body.wa[2] + b7.body.body.I[3,3] * b7.body.body.wa[3])) + ((-b7.body.body.wa[3] * (b7.body.body.I[2,1] * b7.body.body.wa[1] + (b7.body.body.I[2,2] * b7.body.body.wa[2] + b7.body.body.I[2,3] * b7.body.body.wa[3]))) + (b7.body.body.rCM[2] * b7.body.body.fa[3] + (-b7.body.body.rCM[3] * b7.body.body.fa[2]))))));
//   b7.body.body.ta[2] = b7.body.body.I[2,1] * b7.body.body.za[1] + (b7.body.body.I[2,2] * b7.body.body.za[2] + (b7.body.body.I[2,3] * b7.body.body.za[3] + (b7.body.body.wa[3] * (b7.body.body.I[1,1] * b7.body.body.wa[1] + (b7.body.body.I[1,2] * b7.body.body.wa[2] + b7.body.body.I[1,3] * b7.body.body.wa[3])) + ((-b7.body.body.wa[1] * (b7.body.body.I[3,1] * b7.body.body.wa[1] + (b7.body.body.I[3,2] * b7.body.body.wa[2] + b7.body.body.I[3,3] * b7.body.body.wa[3]))) + (b7.body.body.rCM[3] * b7.body.body.fa[1] + (-b7.body.body.rCM[1] * b7.body.body.fa[3]))))));
//   b7.body.body.ta[3] = b7.body.body.I[3,1] * b7.body.body.za[1] + (b7.body.body.I[3,2] * b7.body.body.za[2] + (b7.body.body.I[3,3] * b7.body.body.za[3] + (b7.body.body.wa[1] * (b7.body.body.I[2,1] * b7.body.body.wa[1] + (b7.body.body.I[2,2] * b7.body.body.wa[2] + b7.body.body.I[2,3] * b7.body.body.wa[3])) + ((-b7.body.body.wa[2] * (b7.body.body.I[1,1] * b7.body.body.wa[1] + (b7.body.body.I[1,2] * b7.body.body.wa[2] + b7.body.body.I[1,3] * b7.body.body.wa[3]))) + (b7.body.body.rCM[1] * b7.body.body.fa[2] + (-b7.body.body.rCM[2] * b7.body.body.fa[1]))))));
//   b7.body.body.m = b7.body.m;
//   b7.body.body.rCM[1] = b7.body.rCM[1];
//   b7.body.body.rCM[2] = b7.body.rCM[2];
//   b7.body.body.rCM[3] = b7.body.rCM[3];
//   b7.body.body.I[1,1] = b7.body.I11;
//   b7.body.body.I[1,2] = b7.body.I21;
//   b7.body.body.I[1,3] = b7.body.I31;
//   b7.body.body.I[2,1] = b7.body.I21;
//   b7.body.body.I[2,2] = b7.body.I22;
//   b7.body.body.I[2,3] = b7.body.I32;
//   b7.body.body.I[3,1] = b7.body.I31;
//   b7.body.body.I[3,2] = b7.body.I32;
//   b7.body.body.I[3,3] = b7.body.I33;
//   b7.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b7.vis.vis.mcShape.shapeType);
//   b7.vis.vis.mcShape.Material = PackMaterial(b7.vis.vis.mcShape.color[1] / 255.0,b7.vis.vis.mcShape.color[2] / 255.0,b7.vis.vis.mcShape.color[3] / 255.0,b7.vis.vis.mcShape.specularCoefficient);
//   b7.vis.vis.mcShape.Extra = b7.vis.vis.mcShape.extra;
//   b7.vis.vis.mcShape.size[1] = b7.vis.vis.mcShape.length;
//   b7.vis.vis.mcShape.size[2] = b7.vis.vis.mcShape.width;
//   b7.vis.vis.mcShape.size[3] = b7.vis.vis.mcShape.height;
//   b7.vis.vis.mcShape.Sshape[1,1] = b7.vis.vis.mcShape.e_x[1];
//   b7.vis.vis.mcShape.Sshape[1,2] = b7.vis.vis.mcShape.e_y[1];
//   b7.vis.vis.mcShape.Sshape[1,3] = b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.e_y[3] - b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.e_y[2];
//   b7.vis.vis.mcShape.Sshape[2,1] = b7.vis.vis.mcShape.e_x[2];
//   b7.vis.vis.mcShape.Sshape[2,2] = b7.vis.vis.mcShape.e_y[2];
//   b7.vis.vis.mcShape.Sshape[2,3] = b7.vis.vis.mcShape.e_x[3] * b7.vis.vis.mcShape.e_y[1] - b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.e_y[3];
//   b7.vis.vis.mcShape.Sshape[3,1] = b7.vis.vis.mcShape.e_x[3];
//   b7.vis.vis.mcShape.Sshape[3,2] = b7.vis.vis.mcShape.e_y[3];
//   b7.vis.vis.mcShape.Sshape[3,3] = b7.vis.vis.mcShape.e_x[1] * b7.vis.vis.mcShape.e_y[2] - b7.vis.vis.mcShape.e_x[2] * b7.vis.vis.mcShape.e_y[1];
//   b7.vis.vis.mcShape.rxvisobj[1] = b7.vis.vis.mcShape.S[1,1] * b7.vis.vis.mcShape.e_x[1] + (b7.vis.vis.mcShape.S[1,2] * b7.vis.vis.mcShape.e_x[2] + b7.vis.vis.mcShape.S[1,3] * b7.vis.vis.mcShape.e_x[3]);
//   b7.vis.vis.mcShape.rxvisobj[2] = b7.vis.vis.mcShape.S[2,1] * b7.vis.vis.mcShape.e_x[1] + (b7.vis.vis.mcShape.S[2,2] * b7.vis.vis.mcShape.e_x[2] + b7.vis.vis.mcShape.S[2,3] * b7.vis.vis.mcShape.e_x[3]);
//   b7.vis.vis.mcShape.rxvisobj[3] = b7.vis.vis.mcShape.S[3,1] * b7.vis.vis.mcShape.e_x[1] + (b7.vis.vis.mcShape.S[3,2] * b7.vis.vis.mcShape.e_x[2] + b7.vis.vis.mcShape.S[3,3] * b7.vis.vis.mcShape.e_x[3]);
//   b7.vis.vis.mcShape.ryvisobj[1] = b7.vis.vis.mcShape.S[1,1] * b7.vis.vis.mcShape.e_y[1] + (b7.vis.vis.mcShape.S[1,2] * b7.vis.vis.mcShape.e_y[2] + b7.vis.vis.mcShape.S[1,3] * b7.vis.vis.mcShape.e_y[3]);
//   b7.vis.vis.mcShape.ryvisobj[2] = b7.vis.vis.mcShape.S[2,1] * b7.vis.vis.mcShape.e_y[1] + (b7.vis.vis.mcShape.S[2,2] * b7.vis.vis.mcShape.e_y[2] + b7.vis.vis.mcShape.S[2,3] * b7.vis.vis.mcShape.e_y[3]);
//   b7.vis.vis.mcShape.ryvisobj[3] = b7.vis.vis.mcShape.S[3,1] * b7.vis.vis.mcShape.e_y[1] + (b7.vis.vis.mcShape.S[3,2] * b7.vis.vis.mcShape.e_y[2] + b7.vis.vis.mcShape.S[3,3] * b7.vis.vis.mcShape.e_y[3]);
//   b7.vis.vis.mcShape.rvisobj[1] = b7.vis.vis.mcShape.r[1] + (b7.vis.vis.mcShape.S[1,1] * b7.vis.vis.mcShape.r_shape[1] + (b7.vis.vis.mcShape.S[1,2] * b7.vis.vis.mcShape.r_shape[2] + b7.vis.vis.mcShape.S[1,3] * b7.vis.vis.mcShape.r_shape[3]));
//   b7.vis.vis.mcShape.rvisobj[2] = b7.vis.vis.mcShape.r[2] + (b7.vis.vis.mcShape.S[2,1] * b7.vis.vis.mcShape.r_shape[1] + (b7.vis.vis.mcShape.S[2,2] * b7.vis.vis.mcShape.r_shape[2] + b7.vis.vis.mcShape.S[2,3] * b7.vis.vis.mcShape.r_shape[3]));
//   b7.vis.vis.mcShape.rvisobj[3] = b7.vis.vis.mcShape.r[3] + (b7.vis.vis.mcShape.S[3,1] * b7.vis.vis.mcShape.r_shape[1] + (b7.vis.vis.mcShape.S[3,2] * b7.vis.vis.mcShape.r_shape[2] + b7.vis.vis.mcShape.S[3,3] * b7.vis.vis.mcShape.r_shape[3]));
//   b7.vis.vis.mcShape.e_x[1] = b7.vis.vis.nLength[1];
//   b7.vis.vis.mcShape.e_x[2] = b7.vis.vis.nLength[2];
//   b7.vis.vis.mcShape.e_x[3] = b7.vis.vis.nLength[3];
//   b7.vis.vis.mcShape.e_y[1] = b7.vis.vis.nWidth[1];
//   b7.vis.vis.mcShape.e_y[2] = b7.vis.vis.nWidth[2];
//   b7.vis.vis.mcShape.e_y[3] = b7.vis.vis.nWidth[3];
//   b7.vis.vis.mcShape.e_z[1] = b7.vis.vis.nHeight[1];
//   b7.vis.vis.mcShape.e_z[2] = b7.vis.vis.nHeight[2];
//   b7.vis.vis.mcShape.e_z[3] = b7.vis.vis.nHeight[3];
//   b7.vis.vis.S[1,1] = b7.vis.Sa[1,1];
//   b7.vis.vis.S[1,2] = b7.vis.Sa[1,2];
//   b7.vis.vis.S[1,3] = b7.vis.Sa[1,3];
//   b7.vis.vis.S[2,1] = b7.vis.Sa[2,1];
//   b7.vis.vis.S[2,2] = b7.vis.Sa[2,2];
//   b7.vis.vis.S[2,3] = b7.vis.Sa[2,3];
//   b7.vis.vis.S[3,1] = b7.vis.Sa[3,1];
//   b7.vis.vis.S[3,2] = b7.vis.Sa[3,2];
//   b7.vis.vis.S[3,3] = b7.vis.Sa[3,3];
//   b7.vis.vis.r[1] = b7.vis.r0a[1];
//   b7.vis.vis.r[2] = b7.vis.r0a[2];
//   b7.vis.vis.r[3] = b7.vis.r0a[3];
//   b7.vis.vis.nLength[1] = b7.vis.nLength[1];
//   b7.vis.vis.nLength[2] = b7.vis.nLength[2];
//   b7.vis.vis.nLength[3] = b7.vis.nLength[3];
//   b7.vis.vis.nWidth[1] = b7.vis.nWidth[1];
//   b7.vis.vis.nWidth[2] = b7.vis.nWidth[2];
//   b7.vis.vis.nWidth[3] = b7.vis.nWidth[3];
//   b7.vis.vis.nHeight[1] = b7.vis.nHeight[1];
//   b7.vis.vis.nHeight[2] = b7.vis.nHeight[2];
//   b7.vis.vis.nHeight[3] = b7.vis.nHeight[3];
//   b7.vis.fa[1] = 0.0;
//   b7.vis.fa[2] = 0.0;
//   b7.vis.fa[3] = 0.0;
//   b7.vis.ta[1] = 0.0;
//   b7.vis.ta[2] = 0.0;
//   b7.vis.ta[3] = 0.0;
//   j4.constraintResidue[1] = j4.r_rela[1];
//   j4.constraintResidue[2] = j4.r_rela[2];
//   j4.constraintResidue[3] = j4.r_rela[3];
//   j4.constraintResidue_d[1] = j4.v_rela[1];
//   j4.constraintResidue_d[2] = j4.v_rela[2];
//   j4.constraintResidue_d[3] = j4.v_rela[3];
//   j4.constraintResidue_dd[1] = j4.a_rela[1];
//   j4.constraintResidue_dd[2] = j4.a_rela[2];
//   j4.constraintResidue_dd[3] = j4.a_rela[3];
//   constrain(j4.constraintResidue[3],j4.constraintResidue_d[3],j4.constraintResidue_dd[3]);
//   constrain(j4.constraintResidue[2],j4.constraintResidue_d[2],j4.constraintResidue_dd[2]);
//   constrain(j4.constraintResidue[1],j4.constraintResidue_d[1],j4.constraintResidue_dd[1]);
//   j4.ta[1] = 0.0;
//   j4.ta[2] = 0.0;
//   j4.ta[3] = 0.0;
//   j4.tb[1] = 0.0;
//   j4.tb[2] = 0.0;
//   j4.tb[3] = 0.0;
//   j4.fa[1] = j4.fc[1];
//   j4.fa[2] = j4.fc[2];
//   j4.fa[3] = j4.fc[3];
//   j4.fb[1] = j4.S_rel[1,1] * j4.fc[1] + (j4.S_rel[1,2] * j4.fc[2] + j4.S_rel[1,3] * j4.fc[3]);
//   j4.fb[2] = j4.S_rel[2,1] * j4.fc[1] + (j4.S_rel[2,2] * j4.fc[2] + j4.S_rel[2,3] * j4.fc[3]);
//   j4.fb[3] = j4.S_rel[3,1] * j4.fc[1] + (j4.S_rel[3,2] * j4.fc[2] + j4.S_rel[3,3] * j4.fc[3]);
//   j4.S_rel[1,1] = j4.Sb[1,1] * j4.Sa[1,1] + (j4.Sb[2,1] * j4.Sa[2,1] + j4.Sb[3,1] * j4.Sa[3,1]);
//   j4.S_rel[1,2] = j4.Sb[1,1] * j4.Sa[1,2] + (j4.Sb[2,1] * j4.Sa[2,2] + j4.Sb[3,1] * j4.Sa[3,2]);
//   j4.S_rel[1,3] = j4.Sb[1,1] * j4.Sa[1,3] + (j4.Sb[2,1] * j4.Sa[2,3] + j4.Sb[3,1] * j4.Sa[3,3]);
//   j4.S_rel[2,1] = j4.Sb[1,2] * j4.Sa[1,1] + (j4.Sb[2,2] * j4.Sa[2,1] + j4.Sb[3,2] * j4.Sa[3,1]);
//   j4.S_rel[2,2] = j4.Sb[1,2] * j4.Sa[1,2] + (j4.Sb[2,2] * j4.Sa[2,2] + j4.Sb[3,2] * j4.Sa[3,2]);
//   j4.S_rel[2,3] = j4.Sb[1,2] * j4.Sa[1,3] + (j4.Sb[2,2] * j4.Sa[2,3] + j4.Sb[3,2] * j4.Sa[3,3]);
//   j4.S_rel[3,1] = j4.Sb[1,3] * j4.Sa[1,1] + (j4.Sb[2,3] * j4.Sa[2,1] + j4.Sb[3,3] * j4.Sa[3,1]);
//   j4.S_rel[3,2] = j4.Sb[1,3] * j4.Sa[1,2] + (j4.Sb[2,3] * j4.Sa[2,2] + j4.Sb[3,3] * j4.Sa[3,2]);
//   j4.S_rel[3,3] = j4.Sb[1,3] * j4.Sa[1,3] + (j4.Sb[2,3] * j4.Sa[2,3] + j4.Sb[3,3] * j4.Sa[3,3]);
//   j4.r_rela[1] = j4.Sa[1,1] * (j4.r0b[1] - j4.r0a[1]) + (j4.Sa[2,1] * (j4.r0b[2] - j4.r0a[2]) + j4.Sa[3,1] * (j4.r0b[3] - j4.r0a[3]));
//   j4.r_rela[2] = j4.Sa[1,2] * (j4.r0b[1] - j4.r0a[1]) + (j4.Sa[2,2] * (j4.r0b[2] - j4.r0a[2]) + j4.Sa[3,2] * (j4.r0b[3] - j4.r0a[3]));
//   j4.r_rela[3] = j4.Sa[1,3] * (j4.r0b[1] - j4.r0a[1]) + (j4.Sa[2,3] * (j4.r0b[2] - j4.r0a[2]) + j4.Sa[3,3] * (j4.r0b[3] - j4.r0a[3]));
//   j4.vaux[1] = j4.wa[2] * j4.r_rela[3] - j4.wa[3] * j4.r_rela[2];
//   j4.vaux[2] = j4.wa[3] * j4.r_rela[1] - j4.wa[1] * j4.r_rela[3];
//   j4.vaux[3] = j4.wa[1] * j4.r_rela[2] - j4.wa[2] * j4.r_rela[1];
//   j4.v_rela[1] = j4.S_rel[1,1] * j4.vb[1] + (j4.S_rel[2,1] * j4.vb[2] + j4.S_rel[3,1] * j4.vb[3]) - j4.va[1] - j4.vaux[1];
//   j4.v_rela[2] = j4.S_rel[1,2] * j4.vb[1] + (j4.S_rel[2,2] * j4.vb[2] + j4.S_rel[3,2] * j4.vb[3]) - j4.va[2] - j4.vaux[2];
//   j4.v_rela[3] = j4.S_rel[1,3] * j4.vb[1] + (j4.S_rel[2,3] * j4.vb[2] + j4.S_rel[3,3] * j4.vb[3]) - j4.va[3] - j4.vaux[3];
//   j4.w_rela[1] = j4.S_rel[1,1] * j4.wb[1] + (j4.S_rel[2,1] * j4.wb[2] + j4.S_rel[3,1] * j4.wb[3]) - j4.wa[1];
//   j4.w_rela[2] = j4.S_rel[1,2] * j4.wb[1] + (j4.S_rel[2,2] * j4.wb[2] + j4.S_rel[3,2] * j4.wb[3]) - j4.wa[2];
//   j4.w_rela[3] = j4.S_rel[1,3] * j4.wb[1] + (j4.S_rel[2,3] * j4.wb[2] + j4.S_rel[3,3] * j4.wb[3]) - j4.wa[3];
//   j4.a_rela[1] = j4.S_rel[1,1] * j4.ab[1] + (j4.S_rel[2,1] * j4.ab[2] + j4.S_rel[3,1] * j4.ab[3]) - j4.aa[1] - (j4.za[2] * j4.r_rela[3] - j4.za[3] * j4.r_rela[2]) - (j4.wa[2] * (j4.vaux[3] + 2.0 * j4.v_rela[3]) - j4.wa[3] * (j4.vaux[2] + 2.0 * j4.v_rela[2]));
//   j4.a_rela[2] = j4.S_rel[1,2] * j4.ab[1] + (j4.S_rel[2,2] * j4.ab[2] + j4.S_rel[3,2] * j4.ab[3]) - j4.aa[2] - (j4.za[3] * j4.r_rela[1] - j4.za[1] * j4.r_rela[3]) - (j4.wa[3] * (j4.vaux[1] + 2.0 * j4.v_rela[1]) - j4.wa[1] * (j4.vaux[3] + 2.0 * j4.v_rela[3]));
//   j4.a_rela[3] = j4.S_rel[1,3] * j4.ab[1] + (j4.S_rel[2,3] * j4.ab[2] + j4.S_rel[3,3] * j4.ab[3]) - j4.aa[3] - (j4.za[1] * j4.r_rela[2] - j4.za[2] * j4.r_rela[1]) - (j4.wa[1] * (j4.vaux[2] + 2.0 * j4.v_rela[2]) - j4.wa[2] * (j4.vaux[1] + 2.0 * j4.v_rela[1]));
//   j4.z_rela[1] = j4.S_rel[1,1] * j4.zb[1] + (j4.S_rel[2,1] * j4.zb[2] + j4.S_rel[3,1] * j4.zb[3]) - j4.za[1] - (j4.wa[2] * j4.w_rela[3] - j4.wa[3] * j4.w_rela[2]);
//   j4.z_rela[2] = j4.S_rel[1,2] * j4.zb[1] + (j4.S_rel[2,2] * j4.zb[2] + j4.S_rel[3,2] * j4.zb[3]) - j4.za[2] - (j4.wa[3] * j4.w_rela[1] - j4.wa[1] * j4.w_rela[3]);
//   j4.z_rela[3] = j4.S_rel[1,3] * j4.zb[1] + (j4.S_rel[2,3] * j4.zb[2] + j4.S_rel[3,3] * j4.zb[3]) - j4.za[3] - (j4.wa[1] * j4.w_rela[2] - j4.wa[2] * j4.w_rela[1]);
//   j6.axis.phi = j6.q;
//   j6.bearing.phi = 0.0;
//   j6.qd = der(j6.q);
//   j6.qdd = der(j6.qd);
//   j6.nn[1] = j6.n[1] / sqrt(j6.n[1] ^ 2.0 + (j6.n[2] ^ 2.0 + j6.n[3] ^ 2.0));
//   j6.nn[2] = j6.n[2] / sqrt(j6.n[1] ^ 2.0 + (j6.n[2] ^ 2.0 + j6.n[3] ^ 2.0));
//   j6.nn[3] = j6.n[3] / sqrt(j6.n[1] ^ 2.0 + (j6.n[2] ^ 2.0 + j6.n[3] ^ 2.0));
//   j6.qq = j6.q - 0.0174532925199433 * j6.q0;
//   j6.sinq = sin(j6.qq);
//   j6.cosq = cos(j6.qq);
//   j6.S_rel[1,1] = j6.nn[1] ^ 2.0 + j6.cosq * (1.0 - j6.nn[1] ^ 2.0);
//   j6.S_rel[1,2] = j6.nn[1] * j6.nn[2] + j6.cosq * ((-j6.nn[1]) * j6.nn[2]) - (-j6.sinq) * j6.nn[3];
//   j6.S_rel[1,3] = j6.nn[1] * j6.nn[3] + j6.cosq * ((-j6.nn[1]) * j6.nn[3]) - j6.sinq * j6.nn[2];
//   j6.S_rel[2,1] = j6.nn[2] * j6.nn[1] + j6.cosq * ((-j6.nn[2]) * j6.nn[1]) - j6.sinq * j6.nn[3];
//   j6.S_rel[2,2] = j6.nn[2] ^ 2.0 + j6.cosq * (1.0 - j6.nn[2] ^ 2.0);
//   j6.S_rel[2,3] = j6.nn[2] * j6.nn[3] + j6.cosq * ((-j6.nn[2]) * j6.nn[3]) - (-j6.sinq) * j6.nn[1];
//   j6.S_rel[3,1] = j6.nn[3] * j6.nn[1] + j6.cosq * ((-j6.nn[3]) * j6.nn[1]) - (-j6.sinq) * j6.nn[2];
//   j6.S_rel[3,2] = j6.nn[3] * j6.nn[2] + j6.cosq * ((-j6.nn[3]) * j6.nn[2]) - j6.sinq * j6.nn[1];
//   j6.S_rel[3,3] = j6.nn[3] ^ 2.0 + j6.cosq * (1.0 - j6.nn[3] ^ 2.0);
//   j6.r_rela[1] = 0.0;
//   j6.r_rela[2] = 0.0;
//   j6.r_rela[3] = 0.0;
//   j6.v_rela[1] = 0.0;
//   j6.v_rela[2] = 0.0;
//   j6.v_rela[3] = 0.0;
//   j6.a_rela[1] = 0.0;
//   j6.a_rela[2] = 0.0;
//   j6.a_rela[3] = 0.0;
//   j6.w_rela[1] = j6.qd * j6.nn[1];
//   j6.w_rela[2] = j6.qd * j6.nn[2];
//   j6.w_rela[3] = j6.qd * j6.nn[3];
//   j6.z_rela[1] = j6.qdd * j6.nn[1];
//   j6.z_rela[2] = j6.qdd * j6.nn[2];
//   j6.z_rela[3] = j6.qdd * j6.nn[3];
//   j6.Sb[1,1] = j6.Sa[1,1] * j6.S_rel[1,1] + (j6.Sa[1,2] * j6.S_rel[1,2] + j6.Sa[1,3] * j6.S_rel[1,3]);
//   j6.Sb[1,2] = j6.Sa[1,1] * j6.S_rel[2,1] + (j6.Sa[1,2] * j6.S_rel[2,2] + j6.Sa[1,3] * j6.S_rel[2,3]);
//   j6.Sb[1,3] = j6.Sa[1,1] * j6.S_rel[3,1] + (j6.Sa[1,2] * j6.S_rel[3,2] + j6.Sa[1,3] * j6.S_rel[3,3]);
//   j6.Sb[2,1] = j6.Sa[2,1] * j6.S_rel[1,1] + (j6.Sa[2,2] * j6.S_rel[1,2] + j6.Sa[2,3] * j6.S_rel[1,3]);
//   j6.Sb[2,2] = j6.Sa[2,1] * j6.S_rel[2,1] + (j6.Sa[2,2] * j6.S_rel[2,2] + j6.Sa[2,3] * j6.S_rel[2,3]);
//   j6.Sb[2,3] = j6.Sa[2,1] * j6.S_rel[3,1] + (j6.Sa[2,2] * j6.S_rel[3,2] + j6.Sa[2,3] * j6.S_rel[3,3]);
//   j6.Sb[3,1] = j6.Sa[3,1] * j6.S_rel[1,1] + (j6.Sa[3,2] * j6.S_rel[1,2] + j6.Sa[3,3] * j6.S_rel[1,3]);
//   j6.Sb[3,2] = j6.Sa[3,1] * j6.S_rel[2,1] + (j6.Sa[3,2] * j6.S_rel[2,2] + j6.Sa[3,3] * j6.S_rel[2,3]);
//   j6.Sb[3,3] = j6.Sa[3,1] * j6.S_rel[3,1] + (j6.Sa[3,2] * j6.S_rel[3,2] + j6.Sa[3,3] * j6.S_rel[3,3]);
//   j6.r0b[1] = j6.r0a[1];
//   j6.r0b[2] = j6.r0a[2];
//   j6.r0b[3] = j6.r0a[3];
//   j6.vb[1] = j6.S_rel[1,1] * j6.va[1] + (j6.S_rel[1,2] * j6.va[2] + j6.S_rel[1,3] * j6.va[3]);
//   j6.vb[2] = j6.S_rel[2,1] * j6.va[1] + (j6.S_rel[2,2] * j6.va[2] + j6.S_rel[2,3] * j6.va[3]);
//   j6.vb[3] = j6.S_rel[3,1] * j6.va[1] + (j6.S_rel[3,2] * j6.va[2] + j6.S_rel[3,3] * j6.va[3]);
//   j6.wb[1] = j6.S_rel[1,1] * (j6.wa[1] + j6.w_rela[1]) + (j6.S_rel[1,2] * (j6.wa[2] + j6.w_rela[2]) + j6.S_rel[1,3] * (j6.wa[3] + j6.w_rela[3]));
//   j6.wb[2] = j6.S_rel[2,1] * (j6.wa[1] + j6.w_rela[1]) + (j6.S_rel[2,2] * (j6.wa[2] + j6.w_rela[2]) + j6.S_rel[2,3] * (j6.wa[3] + j6.w_rela[3]));
//   j6.wb[3] = j6.S_rel[3,1] * (j6.wa[1] + j6.w_rela[1]) + (j6.S_rel[3,2] * (j6.wa[2] + j6.w_rela[2]) + j6.S_rel[3,3] * (j6.wa[3] + j6.w_rela[3]));
//   j6.ab[1] = j6.S_rel[1,1] * j6.aa[1] + (j6.S_rel[1,2] * j6.aa[2] + j6.S_rel[1,3] * j6.aa[3]);
//   j6.ab[2] = j6.S_rel[2,1] * j6.aa[1] + (j6.S_rel[2,2] * j6.aa[2] + j6.S_rel[2,3] * j6.aa[3]);
//   j6.ab[3] = j6.S_rel[3,1] * j6.aa[1] + (j6.S_rel[3,2] * j6.aa[2] + j6.S_rel[3,3] * j6.aa[3]);
//   j6.zb[1] = j6.S_rel[1,1] * (j6.za[1] + (j6.z_rela[1] + (j6.wa[2] * j6.w_rela[3] + (-j6.wa[3] * j6.w_rela[2])))) + (j6.S_rel[1,2] * (j6.za[2] + (j6.z_rela[2] + (j6.wa[3] * j6.w_rela[1] + (-j6.wa[1] * j6.w_rela[3])))) + j6.S_rel[1,3] * (j6.za[3] + (j6.z_rela[3] + (j6.wa[1] * j6.w_rela[2] + (-j6.wa[2] * j6.w_rela[1])))));
//   j6.zb[2] = j6.S_rel[2,1] * (j6.za[1] + (j6.z_rela[1] + (j6.wa[2] * j6.w_rela[3] + (-j6.wa[3] * j6.w_rela[2])))) + (j6.S_rel[2,2] * (j6.za[2] + (j6.z_rela[2] + (j6.wa[3] * j6.w_rela[1] + (-j6.wa[1] * j6.w_rela[3])))) + j6.S_rel[2,3] * (j6.za[3] + (j6.z_rela[3] + (j6.wa[1] * j6.w_rela[2] + (-j6.wa[2] * j6.w_rela[1])))));
//   j6.zb[3] = j6.S_rel[3,1] * (j6.za[1] + (j6.z_rela[1] + (j6.wa[2] * j6.w_rela[3] + (-j6.wa[3] * j6.w_rela[2])))) + (j6.S_rel[3,2] * (j6.za[2] + (j6.z_rela[2] + (j6.wa[3] * j6.w_rela[1] + (-j6.wa[1] * j6.w_rela[3])))) + j6.S_rel[3,3] * (j6.za[3] + (j6.z_rela[3] + (j6.wa[1] * j6.w_rela[2] + (-j6.wa[2] * j6.w_rela[1])))));
//   j6.fa[1] = j6.S_rel[1,1] * j6.fb[1] + (j6.S_rel[2,1] * j6.fb[2] + j6.S_rel[3,1] * j6.fb[3]);
//   j6.fa[2] = j6.S_rel[1,2] * j6.fb[1] + (j6.S_rel[2,2] * j6.fb[2] + j6.S_rel[3,2] * j6.fb[3]);
//   j6.fa[3] = j6.S_rel[1,3] * j6.fb[1] + (j6.S_rel[2,3] * j6.fb[2] + j6.S_rel[3,3] * j6.fb[3]);
//   j6.ta[1] = j6.S_rel[1,1] * j6.tb[1] + (j6.S_rel[2,1] * j6.tb[2] + j6.S_rel[3,1] * j6.tb[3]);
//   j6.ta[2] = j6.S_rel[1,2] * j6.tb[1] + (j6.S_rel[2,2] * j6.tb[2] + j6.S_rel[3,2] * j6.tb[3]);
//   j6.ta[3] = j6.S_rel[1,3] * j6.tb[1] + (j6.S_rel[2,3] * j6.tb[2] + j6.S_rel[3,3] * j6.tb[3]);
//   j6.axis.tau = j6.nn[1] * j6.tb[1] + (j6.nn[2] * j6.tb[2] + j6.nn[3] * j6.tb[3]);
//   j7.axis.phi = j7.q;
//   j7.bearing.phi = 0.0;
//   j7.qd = der(j7.q);
//   j7.qdd = der(j7.qd);
//   j7.nn[1] = j7.n[1] / sqrt(j7.n[1] ^ 2.0 + (j7.n[2] ^ 2.0 + j7.n[3] ^ 2.0));
//   j7.nn[2] = j7.n[2] / sqrt(j7.n[1] ^ 2.0 + (j7.n[2] ^ 2.0 + j7.n[3] ^ 2.0));
//   j7.nn[3] = j7.n[3] / sqrt(j7.n[1] ^ 2.0 + (j7.n[2] ^ 2.0 + j7.n[3] ^ 2.0));
//   j7.qq = j7.q - 0.0174532925199433 * j7.q0;
//   j7.sinq = sin(j7.qq);
//   j7.cosq = cos(j7.qq);
//   j7.S_rel[1,1] = j7.nn[1] ^ 2.0 + j7.cosq * (1.0 - j7.nn[1] ^ 2.0);
//   j7.S_rel[1,2] = j7.nn[1] * j7.nn[2] + j7.cosq * ((-j7.nn[1]) * j7.nn[2]) - (-j7.sinq) * j7.nn[3];
//   j7.S_rel[1,3] = j7.nn[1] * j7.nn[3] + j7.cosq * ((-j7.nn[1]) * j7.nn[3]) - j7.sinq * j7.nn[2];
//   j7.S_rel[2,1] = j7.nn[2] * j7.nn[1] + j7.cosq * ((-j7.nn[2]) * j7.nn[1]) - j7.sinq * j7.nn[3];
//   j7.S_rel[2,2] = j7.nn[2] ^ 2.0 + j7.cosq * (1.0 - j7.nn[2] ^ 2.0);
//   j7.S_rel[2,3] = j7.nn[2] * j7.nn[3] + j7.cosq * ((-j7.nn[2]) * j7.nn[3]) - (-j7.sinq) * j7.nn[1];
//   j7.S_rel[3,1] = j7.nn[3] * j7.nn[1] + j7.cosq * ((-j7.nn[3]) * j7.nn[1]) - (-j7.sinq) * j7.nn[2];
//   j7.S_rel[3,2] = j7.nn[3] * j7.nn[2] + j7.cosq * ((-j7.nn[3]) * j7.nn[2]) - j7.sinq * j7.nn[1];
//   j7.S_rel[3,3] = j7.nn[3] ^ 2.0 + j7.cosq * (1.0 - j7.nn[3] ^ 2.0);
//   j7.r_rela[1] = 0.0;
//   j7.r_rela[2] = 0.0;
//   j7.r_rela[3] = 0.0;
//   j7.v_rela[1] = 0.0;
//   j7.v_rela[2] = 0.0;
//   j7.v_rela[3] = 0.0;
//   j7.a_rela[1] = 0.0;
//   j7.a_rela[2] = 0.0;
//   j7.a_rela[3] = 0.0;
//   j7.w_rela[1] = j7.qd * j7.nn[1];
//   j7.w_rela[2] = j7.qd * j7.nn[2];
//   j7.w_rela[3] = j7.qd * j7.nn[3];
//   j7.z_rela[1] = j7.qdd * j7.nn[1];
//   j7.z_rela[2] = j7.qdd * j7.nn[2];
//   j7.z_rela[3] = j7.qdd * j7.nn[3];
//   j7.Sb[1,1] = j7.Sa[1,1] * j7.S_rel[1,1] + (j7.Sa[1,2] * j7.S_rel[1,2] + j7.Sa[1,3] * j7.S_rel[1,3]);
//   j7.Sb[1,2] = j7.Sa[1,1] * j7.S_rel[2,1] + (j7.Sa[1,2] * j7.S_rel[2,2] + j7.Sa[1,3] * j7.S_rel[2,3]);
//   j7.Sb[1,3] = j7.Sa[1,1] * j7.S_rel[3,1] + (j7.Sa[1,2] * j7.S_rel[3,2] + j7.Sa[1,3] * j7.S_rel[3,3]);
//   j7.Sb[2,1] = j7.Sa[2,1] * j7.S_rel[1,1] + (j7.Sa[2,2] * j7.S_rel[1,2] + j7.Sa[2,3] * j7.S_rel[1,3]);
//   j7.Sb[2,2] = j7.Sa[2,1] * j7.S_rel[2,1] + (j7.Sa[2,2] * j7.S_rel[2,2] + j7.Sa[2,3] * j7.S_rel[2,3]);
//   j7.Sb[2,3] = j7.Sa[2,1] * j7.S_rel[3,1] + (j7.Sa[2,2] * j7.S_rel[3,2] + j7.Sa[2,3] * j7.S_rel[3,3]);
//   j7.Sb[3,1] = j7.Sa[3,1] * j7.S_rel[1,1] + (j7.Sa[3,2] * j7.S_rel[1,2] + j7.Sa[3,3] * j7.S_rel[1,3]);
//   j7.Sb[3,2] = j7.Sa[3,1] * j7.S_rel[2,1] + (j7.Sa[3,2] * j7.S_rel[2,2] + j7.Sa[3,3] * j7.S_rel[2,3]);
//   j7.Sb[3,3] = j7.Sa[3,1] * j7.S_rel[3,1] + (j7.Sa[3,2] * j7.S_rel[3,2] + j7.Sa[3,3] * j7.S_rel[3,3]);
//   j7.r0b[1] = j7.r0a[1];
//   j7.r0b[2] = j7.r0a[2];
//   j7.r0b[3] = j7.r0a[3];
//   j7.vb[1] = j7.S_rel[1,1] * j7.va[1] + (j7.S_rel[1,2] * j7.va[2] + j7.S_rel[1,3] * j7.va[3]);
//   j7.vb[2] = j7.S_rel[2,1] * j7.va[1] + (j7.S_rel[2,2] * j7.va[2] + j7.S_rel[2,3] * j7.va[3]);
//   j7.vb[3] = j7.S_rel[3,1] * j7.va[1] + (j7.S_rel[3,2] * j7.va[2] + j7.S_rel[3,3] * j7.va[3]);
//   j7.wb[1] = j7.S_rel[1,1] * (j7.wa[1] + j7.w_rela[1]) + (j7.S_rel[1,2] * (j7.wa[2] + j7.w_rela[2]) + j7.S_rel[1,3] * (j7.wa[3] + j7.w_rela[3]));
//   j7.wb[2] = j7.S_rel[2,1] * (j7.wa[1] + j7.w_rela[1]) + (j7.S_rel[2,2] * (j7.wa[2] + j7.w_rela[2]) + j7.S_rel[2,3] * (j7.wa[3] + j7.w_rela[3]));
//   j7.wb[3] = j7.S_rel[3,1] * (j7.wa[1] + j7.w_rela[1]) + (j7.S_rel[3,2] * (j7.wa[2] + j7.w_rela[2]) + j7.S_rel[3,3] * (j7.wa[3] + j7.w_rela[3]));
//   j7.ab[1] = j7.S_rel[1,1] * j7.aa[1] + (j7.S_rel[1,2] * j7.aa[2] + j7.S_rel[1,3] * j7.aa[3]);
//   j7.ab[2] = j7.S_rel[2,1] * j7.aa[1] + (j7.S_rel[2,2] * j7.aa[2] + j7.S_rel[2,3] * j7.aa[3]);
//   j7.ab[3] = j7.S_rel[3,1] * j7.aa[1] + (j7.S_rel[3,2] * j7.aa[2] + j7.S_rel[3,3] * j7.aa[3]);
//   j7.zb[1] = j7.S_rel[1,1] * (j7.za[1] + (j7.z_rela[1] + (j7.wa[2] * j7.w_rela[3] + (-j7.wa[3] * j7.w_rela[2])))) + (j7.S_rel[1,2] * (j7.za[2] + (j7.z_rela[2] + (j7.wa[3] * j7.w_rela[1] + (-j7.wa[1] * j7.w_rela[3])))) + j7.S_rel[1,3] * (j7.za[3] + (j7.z_rela[3] + (j7.wa[1] * j7.w_rela[2] + (-j7.wa[2] * j7.w_rela[1])))));
//   j7.zb[2] = j7.S_rel[2,1] * (j7.za[1] + (j7.z_rela[1] + (j7.wa[2] * j7.w_rela[3] + (-j7.wa[3] * j7.w_rela[2])))) + (j7.S_rel[2,2] * (j7.za[2] + (j7.z_rela[2] + (j7.wa[3] * j7.w_rela[1] + (-j7.wa[1] * j7.w_rela[3])))) + j7.S_rel[2,3] * (j7.za[3] + (j7.z_rela[3] + (j7.wa[1] * j7.w_rela[2] + (-j7.wa[2] * j7.w_rela[1])))));
//   j7.zb[3] = j7.S_rel[3,1] * (j7.za[1] + (j7.z_rela[1] + (j7.wa[2] * j7.w_rela[3] + (-j7.wa[3] * j7.w_rela[2])))) + (j7.S_rel[3,2] * (j7.za[2] + (j7.z_rela[2] + (j7.wa[3] * j7.w_rela[1] + (-j7.wa[1] * j7.w_rela[3])))) + j7.S_rel[3,3] * (j7.za[3] + (j7.z_rela[3] + (j7.wa[1] * j7.w_rela[2] + (-j7.wa[2] * j7.w_rela[1])))));
//   j7.fa[1] = j7.S_rel[1,1] * j7.fb[1] + (j7.S_rel[2,1] * j7.fb[2] + j7.S_rel[3,1] * j7.fb[3]);
//   j7.fa[2] = j7.S_rel[1,2] * j7.fb[1] + (j7.S_rel[2,2] * j7.fb[2] + j7.S_rel[3,2] * j7.fb[3]);
//   j7.fa[3] = j7.S_rel[1,3] * j7.fb[1] + (j7.S_rel[2,3] * j7.fb[2] + j7.S_rel[3,3] * j7.fb[3]);
//   j7.ta[1] = j7.S_rel[1,1] * j7.tb[1] + (j7.S_rel[2,1] * j7.tb[2] + j7.S_rel[3,1] * j7.tb[3]);
//   j7.ta[2] = j7.S_rel[1,2] * j7.tb[1] + (j7.S_rel[2,2] * j7.tb[2] + j7.S_rel[3,2] * j7.tb[3]);
//   j7.ta[3] = j7.S_rel[1,3] * j7.tb[1] + (j7.S_rel[2,3] * j7.tb[2] + j7.S_rel[3,3] * j7.tb[3]);
//   j7.axis.tau = j7.nn[1] * j7.tb[1] + (j7.nn[2] * j7.tb[2] + j7.nn[3] * j7.tb[3]);
//   b4.body.frameTranslation.Sb[1,1] = b4.body.frameTranslation.Sa[1,1];
//   b4.body.frameTranslation.Sb[1,2] = b4.body.frameTranslation.Sa[1,2];
//   b4.body.frameTranslation.Sb[1,3] = b4.body.frameTranslation.Sa[1,3];
//   b4.body.frameTranslation.Sb[2,1] = b4.body.frameTranslation.Sa[2,1];
//   b4.body.frameTranslation.Sb[2,2] = b4.body.frameTranslation.Sa[2,2];
//   b4.body.frameTranslation.Sb[2,3] = b4.body.frameTranslation.Sa[2,3];
//   b4.body.frameTranslation.Sb[3,1] = b4.body.frameTranslation.Sa[3,1];
//   b4.body.frameTranslation.Sb[3,2] = b4.body.frameTranslation.Sa[3,2];
//   b4.body.frameTranslation.Sb[3,3] = b4.body.frameTranslation.Sa[3,3];
//   b4.body.frameTranslation.wb[1] = b4.body.frameTranslation.wa[1];
//   b4.body.frameTranslation.wb[2] = b4.body.frameTranslation.wa[2];
//   b4.body.frameTranslation.wb[3] = b4.body.frameTranslation.wa[3];
//   b4.body.frameTranslation.zb[1] = b4.body.frameTranslation.za[1];
//   b4.body.frameTranslation.zb[2] = b4.body.frameTranslation.za[2];
//   b4.body.frameTranslation.zb[3] = b4.body.frameTranslation.za[3];
//   b4.body.frameTranslation.r0b[1] = b4.body.frameTranslation.r0a[1] + (b4.body.frameTranslation.Sa[1,1] * b4.body.frameTranslation.r[1] + (b4.body.frameTranslation.Sa[1,2] * b4.body.frameTranslation.r[2] + b4.body.frameTranslation.Sa[1,3] * b4.body.frameTranslation.r[3]));
//   b4.body.frameTranslation.r0b[2] = b4.body.frameTranslation.r0a[2] + (b4.body.frameTranslation.Sa[2,1] * b4.body.frameTranslation.r[1] + (b4.body.frameTranslation.Sa[2,2] * b4.body.frameTranslation.r[2] + b4.body.frameTranslation.Sa[2,3] * b4.body.frameTranslation.r[3]));
//   b4.body.frameTranslation.r0b[3] = b4.body.frameTranslation.r0a[3] + (b4.body.frameTranslation.Sa[3,1] * b4.body.frameTranslation.r[1] + (b4.body.frameTranslation.Sa[3,2] * b4.body.frameTranslation.r[2] + b4.body.frameTranslation.Sa[3,3] * b4.body.frameTranslation.r[3]));
//   b4.body.frameTranslation.vaux[1] = b4.body.frameTranslation.wa[2] * b4.body.frameTranslation.r[3] - b4.body.frameTranslation.wa[3] * b4.body.frameTranslation.r[2];
//   b4.body.frameTranslation.vaux[2] = b4.body.frameTranslation.wa[3] * b4.body.frameTranslation.r[1] - b4.body.frameTranslation.wa[1] * b4.body.frameTranslation.r[3];
//   b4.body.frameTranslation.vaux[3] = b4.body.frameTranslation.wa[1] * b4.body.frameTranslation.r[2] - b4.body.frameTranslation.wa[2] * b4.body.frameTranslation.r[1];
//   b4.body.frameTranslation.vb[1] = b4.body.frameTranslation.va[1] + b4.body.frameTranslation.vaux[1];
//   b4.body.frameTranslation.vb[2] = b4.body.frameTranslation.va[2] + b4.body.frameTranslation.vaux[2];
//   b4.body.frameTranslation.vb[3] = b4.body.frameTranslation.va[3] + b4.body.frameTranslation.vaux[3];
//   b4.body.frameTranslation.ab[1] = b4.body.frameTranslation.aa[1] + (b4.body.frameTranslation.za[2] * b4.body.frameTranslation.r[3] + ((-b4.body.frameTranslation.za[3] * b4.body.frameTranslation.r[2]) + (b4.body.frameTranslation.wa[2] * b4.body.frameTranslation.vaux[3] + (-b4.body.frameTranslation.wa[3] * b4.body.frameTranslation.vaux[2]))));
//   b4.body.frameTranslation.ab[2] = b4.body.frameTranslation.aa[2] + (b4.body.frameTranslation.za[3] * b4.body.frameTranslation.r[1] + ((-b4.body.frameTranslation.za[1] * b4.body.frameTranslation.r[3]) + (b4.body.frameTranslation.wa[3] * b4.body.frameTranslation.vaux[1] + (-b4.body.frameTranslation.wa[1] * b4.body.frameTranslation.vaux[3]))));
//   b4.body.frameTranslation.ab[3] = b4.body.frameTranslation.aa[3] + (b4.body.frameTranslation.za[1] * b4.body.frameTranslation.r[2] + ((-b4.body.frameTranslation.za[2] * b4.body.frameTranslation.r[1]) + (b4.body.frameTranslation.wa[1] * b4.body.frameTranslation.vaux[2] + (-b4.body.frameTranslation.wa[2] * b4.body.frameTranslation.vaux[1]))));
//   b4.body.frameTranslation.fa[1] = b4.body.frameTranslation.fb[1];
//   b4.body.frameTranslation.fa[2] = b4.body.frameTranslation.fb[2];
//   b4.body.frameTranslation.fa[3] = b4.body.frameTranslation.fb[3];
//   b4.body.frameTranslation.ta[1] = b4.body.frameTranslation.tb[1] + (b4.body.frameTranslation.r[2] * b4.body.frameTranslation.fa[3] + (-b4.body.frameTranslation.r[3] * b4.body.frameTranslation.fa[2]));
//   b4.body.frameTranslation.ta[2] = b4.body.frameTranslation.tb[2] + (b4.body.frameTranslation.r[3] * b4.body.frameTranslation.fa[1] + (-b4.body.frameTranslation.r[1] * b4.body.frameTranslation.fa[3]));
//   b4.body.frameTranslation.ta[3] = b4.body.frameTranslation.tb[3] + (b4.body.frameTranslation.r[1] * b4.body.frameTranslation.fa[2] + (-b4.body.frameTranslation.r[2] * b4.body.frameTranslation.fa[1]));
//   b4.body.body.fa[1] = b4.body.body.m * (b4.body.body.aa[1] + (b4.body.body.za[2] * b4.body.body.rCM[3] + ((-b4.body.body.za[3] * b4.body.body.rCM[2]) + (b4.body.body.wa[2] * (b4.body.body.wa[1] * b4.body.body.rCM[2] - b4.body.body.wa[2] * b4.body.body.rCM[1]) + (-b4.body.body.wa[3] * (b4.body.body.wa[3] * b4.body.body.rCM[1] - b4.body.body.wa[1] * b4.body.body.rCM[3]))))));
//   b4.body.body.fa[2] = b4.body.body.m * (b4.body.body.aa[2] + (b4.body.body.za[3] * b4.body.body.rCM[1] + ((-b4.body.body.za[1] * b4.body.body.rCM[3]) + (b4.body.body.wa[3] * (b4.body.body.wa[2] * b4.body.body.rCM[3] - b4.body.body.wa[3] * b4.body.body.rCM[2]) + (-b4.body.body.wa[1] * (b4.body.body.wa[1] * b4.body.body.rCM[2] - b4.body.body.wa[2] * b4.body.body.rCM[1]))))));
//   b4.body.body.fa[3] = b4.body.body.m * (b4.body.body.aa[3] + (b4.body.body.za[1] * b4.body.body.rCM[2] + ((-b4.body.body.za[2] * b4.body.body.rCM[1]) + (b4.body.body.wa[1] * (b4.body.body.wa[3] * b4.body.body.rCM[1] - b4.body.body.wa[1] * b4.body.body.rCM[3]) + (-b4.body.body.wa[2] * (b4.body.body.wa[2] * b4.body.body.rCM[3] - b4.body.body.wa[3] * b4.body.body.rCM[2]))))));
//   b4.body.body.ta[1] = b4.body.body.I[1,1] * b4.body.body.za[1] + (b4.body.body.I[1,2] * b4.body.body.za[2] + (b4.body.body.I[1,3] * b4.body.body.za[3] + (b4.body.body.wa[2] * (b4.body.body.I[3,1] * b4.body.body.wa[1] + (b4.body.body.I[3,2] * b4.body.body.wa[2] + b4.body.body.I[3,3] * b4.body.body.wa[3])) + ((-b4.body.body.wa[3] * (b4.body.body.I[2,1] * b4.body.body.wa[1] + (b4.body.body.I[2,2] * b4.body.body.wa[2] + b4.body.body.I[2,3] * b4.body.body.wa[3]))) + (b4.body.body.rCM[2] * b4.body.body.fa[3] + (-b4.body.body.rCM[3] * b4.body.body.fa[2]))))));
//   b4.body.body.ta[2] = b4.body.body.I[2,1] * b4.body.body.za[1] + (b4.body.body.I[2,2] * b4.body.body.za[2] + (b4.body.body.I[2,3] * b4.body.body.za[3] + (b4.body.body.wa[3] * (b4.body.body.I[1,1] * b4.body.body.wa[1] + (b4.body.body.I[1,2] * b4.body.body.wa[2] + b4.body.body.I[1,3] * b4.body.body.wa[3])) + ((-b4.body.body.wa[1] * (b4.body.body.I[3,1] * b4.body.body.wa[1] + (b4.body.body.I[3,2] * b4.body.body.wa[2] + b4.body.body.I[3,3] * b4.body.body.wa[3]))) + (b4.body.body.rCM[3] * b4.body.body.fa[1] + (-b4.body.body.rCM[1] * b4.body.body.fa[3]))))));
//   b4.body.body.ta[3] = b4.body.body.I[3,1] * b4.body.body.za[1] + (b4.body.body.I[3,2] * b4.body.body.za[2] + (b4.body.body.I[3,3] * b4.body.body.za[3] + (b4.body.body.wa[1] * (b4.body.body.I[2,1] * b4.body.body.wa[1] + (b4.body.body.I[2,2] * b4.body.body.wa[2] + b4.body.body.I[2,3] * b4.body.body.wa[3])) + ((-b4.body.body.wa[2] * (b4.body.body.I[1,1] * b4.body.body.wa[1] + (b4.body.body.I[1,2] * b4.body.body.wa[2] + b4.body.body.I[1,3] * b4.body.body.wa[3]))) + (b4.body.body.rCM[1] * b4.body.body.fa[2] + (-b4.body.body.rCM[2] * b4.body.body.fa[1]))))));
//   b4.body.body.m = b4.body.m;
//   b4.body.body.rCM[1] = b4.body.rCM[1];
//   b4.body.body.rCM[2] = b4.body.rCM[2];
//   b4.body.body.rCM[3] = b4.body.rCM[3];
//   b4.body.body.I[1,1] = b4.body.I11;
//   b4.body.body.I[1,2] = b4.body.I21;
//   b4.body.body.I[1,3] = b4.body.I31;
//   b4.body.body.I[2,1] = b4.body.I21;
//   b4.body.body.I[2,2] = b4.body.I22;
//   b4.body.body.I[2,3] = b4.body.I32;
//   b4.body.body.I[3,1] = b4.body.I31;
//   b4.body.body.I[3,2] = b4.body.I32;
//   b4.body.body.I[3,3] = b4.body.I33;
//   b4.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(b4.vis.vis.mcShape.shapeType);
//   b4.vis.vis.mcShape.Material = PackMaterial(b4.vis.vis.mcShape.color[1] / 255.0,b4.vis.vis.mcShape.color[2] / 255.0,b4.vis.vis.mcShape.color[3] / 255.0,b4.vis.vis.mcShape.specularCoefficient);
//   b4.vis.vis.mcShape.Extra = b4.vis.vis.mcShape.extra;
//   b4.vis.vis.mcShape.size[1] = b4.vis.vis.mcShape.length;
//   b4.vis.vis.mcShape.size[2] = b4.vis.vis.mcShape.width;
//   b4.vis.vis.mcShape.size[3] = b4.vis.vis.mcShape.height;
//   b4.vis.vis.mcShape.Sshape[1,1] = b4.vis.vis.mcShape.e_x[1];
//   b4.vis.vis.mcShape.Sshape[1,2] = b4.vis.vis.mcShape.e_y[1];
//   b4.vis.vis.mcShape.Sshape[1,3] = b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.e_y[3] - b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.e_y[2];
//   b4.vis.vis.mcShape.Sshape[2,1] = b4.vis.vis.mcShape.e_x[2];
//   b4.vis.vis.mcShape.Sshape[2,2] = b4.vis.vis.mcShape.e_y[2];
//   b4.vis.vis.mcShape.Sshape[2,3] = b4.vis.vis.mcShape.e_x[3] * b4.vis.vis.mcShape.e_y[1] - b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.e_y[3];
//   b4.vis.vis.mcShape.Sshape[3,1] = b4.vis.vis.mcShape.e_x[3];
//   b4.vis.vis.mcShape.Sshape[3,2] = b4.vis.vis.mcShape.e_y[3];
//   b4.vis.vis.mcShape.Sshape[3,3] = b4.vis.vis.mcShape.e_x[1] * b4.vis.vis.mcShape.e_y[2] - b4.vis.vis.mcShape.e_x[2] * b4.vis.vis.mcShape.e_y[1];
//   b4.vis.vis.mcShape.rxvisobj[1] = b4.vis.vis.mcShape.S[1,1] * b4.vis.vis.mcShape.e_x[1] + (b4.vis.vis.mcShape.S[1,2] * b4.vis.vis.mcShape.e_x[2] + b4.vis.vis.mcShape.S[1,3] * b4.vis.vis.mcShape.e_x[3]);
//   b4.vis.vis.mcShape.rxvisobj[2] = b4.vis.vis.mcShape.S[2,1] * b4.vis.vis.mcShape.e_x[1] + (b4.vis.vis.mcShape.S[2,2] * b4.vis.vis.mcShape.e_x[2] + b4.vis.vis.mcShape.S[2,3] * b4.vis.vis.mcShape.e_x[3]);
//   b4.vis.vis.mcShape.rxvisobj[3] = b4.vis.vis.mcShape.S[3,1] * b4.vis.vis.mcShape.e_x[1] + (b4.vis.vis.mcShape.S[3,2] * b4.vis.vis.mcShape.e_x[2] + b4.vis.vis.mcShape.S[3,3] * b4.vis.vis.mcShape.e_x[3]);
//   b4.vis.vis.mcShape.ryvisobj[1] = b4.vis.vis.mcShape.S[1,1] * b4.vis.vis.mcShape.e_y[1] + (b4.vis.vis.mcShape.S[1,2] * b4.vis.vis.mcShape.e_y[2] + b4.vis.vis.mcShape.S[1,3] * b4.vis.vis.mcShape.e_y[3]);
//   b4.vis.vis.mcShape.ryvisobj[2] = b4.vis.vis.mcShape.S[2,1] * b4.vis.vis.mcShape.e_y[1] + (b4.vis.vis.mcShape.S[2,2] * b4.vis.vis.mcShape.e_y[2] + b4.vis.vis.mcShape.S[2,3] * b4.vis.vis.mcShape.e_y[3]);
//   b4.vis.vis.mcShape.ryvisobj[3] = b4.vis.vis.mcShape.S[3,1] * b4.vis.vis.mcShape.e_y[1] + (b4.vis.vis.mcShape.S[3,2] * b4.vis.vis.mcShape.e_y[2] + b4.vis.vis.mcShape.S[3,3] * b4.vis.vis.mcShape.e_y[3]);
//   b4.vis.vis.mcShape.rvisobj[1] = b4.vis.vis.mcShape.r[1] + (b4.vis.vis.mcShape.S[1,1] * b4.vis.vis.mcShape.r_shape[1] + (b4.vis.vis.mcShape.S[1,2] * b4.vis.vis.mcShape.r_shape[2] + b4.vis.vis.mcShape.S[1,3] * b4.vis.vis.mcShape.r_shape[3]));
//   b4.vis.vis.mcShape.rvisobj[2] = b4.vis.vis.mcShape.r[2] + (b4.vis.vis.mcShape.S[2,1] * b4.vis.vis.mcShape.r_shape[1] + (b4.vis.vis.mcShape.S[2,2] * b4.vis.vis.mcShape.r_shape[2] + b4.vis.vis.mcShape.S[2,3] * b4.vis.vis.mcShape.r_shape[3]));
//   b4.vis.vis.mcShape.rvisobj[3] = b4.vis.vis.mcShape.r[3] + (b4.vis.vis.mcShape.S[3,1] * b4.vis.vis.mcShape.r_shape[1] + (b4.vis.vis.mcShape.S[3,2] * b4.vis.vis.mcShape.r_shape[2] + b4.vis.vis.mcShape.S[3,3] * b4.vis.vis.mcShape.r_shape[3]));
//   b4.vis.vis.mcShape.e_x[1] = b4.vis.vis.nLength[1];
//   b4.vis.vis.mcShape.e_x[2] = b4.vis.vis.nLength[2];
//   b4.vis.vis.mcShape.e_x[3] = b4.vis.vis.nLength[3];
//   b4.vis.vis.mcShape.e_y[1] = b4.vis.vis.nWidth[1];
//   b4.vis.vis.mcShape.e_y[2] = b4.vis.vis.nWidth[2];
//   b4.vis.vis.mcShape.e_y[3] = b4.vis.vis.nWidth[3];
//   b4.vis.vis.mcShape.e_z[1] = b4.vis.vis.nHeight[1];
//   b4.vis.vis.mcShape.e_z[2] = b4.vis.vis.nHeight[2];
//   b4.vis.vis.mcShape.e_z[3] = b4.vis.vis.nHeight[3];
//   b4.vis.vis.S[1,1] = b4.vis.Sa[1,1];
//   b4.vis.vis.S[1,2] = b4.vis.Sa[1,2];
//   b4.vis.vis.S[1,3] = b4.vis.Sa[1,3];
//   b4.vis.vis.S[2,1] = b4.vis.Sa[2,1];
//   b4.vis.vis.S[2,2] = b4.vis.Sa[2,2];
//   b4.vis.vis.S[2,3] = b4.vis.Sa[2,3];
//   b4.vis.vis.S[3,1] = b4.vis.Sa[3,1];
//   b4.vis.vis.S[3,2] = b4.vis.Sa[3,2];
//   b4.vis.vis.S[3,3] = b4.vis.Sa[3,3];
//   b4.vis.vis.r[1] = b4.vis.r0a[1];
//   b4.vis.vis.r[2] = b4.vis.r0a[2];
//   b4.vis.vis.r[3] = b4.vis.r0a[3];
//   b4.vis.vis.nLength[1] = b4.vis.nLength[1];
//   b4.vis.vis.nLength[2] = b4.vis.nLength[2];
//   b4.vis.vis.nLength[3] = b4.vis.nLength[3];
//   b4.vis.vis.nWidth[1] = b4.vis.nWidth[1];
//   b4.vis.vis.nWidth[2] = b4.vis.nWidth[2];
//   b4.vis.vis.nWidth[3] = b4.vis.nWidth[3];
//   b4.vis.vis.nHeight[1] = b4.vis.nHeight[1];
//   b4.vis.vis.nHeight[2] = b4.vis.nHeight[2];
//   b4.vis.vis.nHeight[3] = b4.vis.nHeight[3];
//   b4.vis.fa[1] = 0.0;
//   b4.vis.fa[2] = 0.0;
//   b4.vis.fa[3] = 0.0;
//   b4.vis.ta[1] = 0.0;
//   b4.vis.ta[2] = 0.0;
//   b4.vis.ta[3] = 0.0;
//   shape.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(shape.vis.mcShape.shapeType);
//   shape.vis.mcShape.Material = PackMaterial(shape.vis.mcShape.color[1] / 255.0,shape.vis.mcShape.color[2] / 255.0,shape.vis.mcShape.color[3] / 255.0,shape.vis.mcShape.specularCoefficient);
//   shape.vis.mcShape.Extra = shape.vis.mcShape.extra;
//   shape.vis.mcShape.size[1] = shape.vis.mcShape.length;
//   shape.vis.mcShape.size[2] = shape.vis.mcShape.width;
//   shape.vis.mcShape.size[3] = shape.vis.mcShape.height;
//   shape.vis.mcShape.Sshape[1,1] = shape.vis.mcShape.e_x[1];
//   shape.vis.mcShape.Sshape[1,2] = shape.vis.mcShape.e_y[1];
//   shape.vis.mcShape.Sshape[1,3] = shape.vis.mcShape.e_x[2] * shape.vis.mcShape.e_y[3] - shape.vis.mcShape.e_x[3] * shape.vis.mcShape.e_y[2];
//   shape.vis.mcShape.Sshape[2,1] = shape.vis.mcShape.e_x[2];
//   shape.vis.mcShape.Sshape[2,2] = shape.vis.mcShape.e_y[2];
//   shape.vis.mcShape.Sshape[2,3] = shape.vis.mcShape.e_x[3] * shape.vis.mcShape.e_y[1] - shape.vis.mcShape.e_x[1] * shape.vis.mcShape.e_y[3];
//   shape.vis.mcShape.Sshape[3,1] = shape.vis.mcShape.e_x[3];
//   shape.vis.mcShape.Sshape[3,2] = shape.vis.mcShape.e_y[3];
//   shape.vis.mcShape.Sshape[3,3] = shape.vis.mcShape.e_x[1] * shape.vis.mcShape.e_y[2] - shape.vis.mcShape.e_x[2] * shape.vis.mcShape.e_y[1];
//   shape.vis.mcShape.rxvisobj[1] = shape.vis.mcShape.S[1,1] * shape.vis.mcShape.e_x[1] + (shape.vis.mcShape.S[1,2] * shape.vis.mcShape.e_x[2] + shape.vis.mcShape.S[1,3] * shape.vis.mcShape.e_x[3]);
//   shape.vis.mcShape.rxvisobj[2] = shape.vis.mcShape.S[2,1] * shape.vis.mcShape.e_x[1] + (shape.vis.mcShape.S[2,2] * shape.vis.mcShape.e_x[2] + shape.vis.mcShape.S[2,3] * shape.vis.mcShape.e_x[3]);
//   shape.vis.mcShape.rxvisobj[3] = shape.vis.mcShape.S[3,1] * shape.vis.mcShape.e_x[1] + (shape.vis.mcShape.S[3,2] * shape.vis.mcShape.e_x[2] + shape.vis.mcShape.S[3,3] * shape.vis.mcShape.e_x[3]);
//   shape.vis.mcShape.ryvisobj[1] = shape.vis.mcShape.S[1,1] * shape.vis.mcShape.e_y[1] + (shape.vis.mcShape.S[1,2] * shape.vis.mcShape.e_y[2] + shape.vis.mcShape.S[1,3] * shape.vis.mcShape.e_y[3]);
//   shape.vis.mcShape.ryvisobj[2] = shape.vis.mcShape.S[2,1] * shape.vis.mcShape.e_y[1] + (shape.vis.mcShape.S[2,2] * shape.vis.mcShape.e_y[2] + shape.vis.mcShape.S[2,3] * shape.vis.mcShape.e_y[3]);
//   shape.vis.mcShape.ryvisobj[3] = shape.vis.mcShape.S[3,1] * shape.vis.mcShape.e_y[1] + (shape.vis.mcShape.S[3,2] * shape.vis.mcShape.e_y[2] + shape.vis.mcShape.S[3,3] * shape.vis.mcShape.e_y[3]);
//   shape.vis.mcShape.rvisobj[1] = shape.vis.mcShape.r[1] + (shape.vis.mcShape.S[1,1] * shape.vis.mcShape.r_shape[1] + (shape.vis.mcShape.S[1,2] * shape.vis.mcShape.r_shape[2] + shape.vis.mcShape.S[1,3] * shape.vis.mcShape.r_shape[3]));
//   shape.vis.mcShape.rvisobj[2] = shape.vis.mcShape.r[2] + (shape.vis.mcShape.S[2,1] * shape.vis.mcShape.r_shape[1] + (shape.vis.mcShape.S[2,2] * shape.vis.mcShape.r_shape[2] + shape.vis.mcShape.S[2,3] * shape.vis.mcShape.r_shape[3]));
//   shape.vis.mcShape.rvisobj[3] = shape.vis.mcShape.r[3] + (shape.vis.mcShape.S[3,1] * shape.vis.mcShape.r_shape[1] + (shape.vis.mcShape.S[3,2] * shape.vis.mcShape.r_shape[2] + shape.vis.mcShape.S[3,3] * shape.vis.mcShape.r_shape[3]));
//   shape.vis.mcShape.e_x[1] = shape.vis.nLength[1];
//   shape.vis.mcShape.e_x[2] = shape.vis.nLength[2];
//   shape.vis.mcShape.e_x[3] = shape.vis.nLength[3];
//   shape.vis.mcShape.e_y[1] = shape.vis.nWidth[1];
//   shape.vis.mcShape.e_y[2] = shape.vis.nWidth[2];
//   shape.vis.mcShape.e_y[3] = shape.vis.nWidth[3];
//   shape.vis.mcShape.e_z[1] = shape.vis.nHeight[1];
//   shape.vis.mcShape.e_z[2] = shape.vis.nHeight[2];
//   shape.vis.mcShape.e_z[3] = shape.vis.nHeight[3];
//   shape.vis.S[1,1] = shape.Sa[1,1];
//   shape.vis.S[1,2] = shape.Sa[1,2];
//   shape.vis.S[1,3] = shape.Sa[1,3];
//   shape.vis.S[2,1] = shape.Sa[2,1];
//   shape.vis.S[2,2] = shape.Sa[2,2];
//   shape.vis.S[2,3] = shape.Sa[2,3];
//   shape.vis.S[3,1] = shape.Sa[3,1];
//   shape.vis.S[3,2] = shape.Sa[3,2];
//   shape.vis.S[3,3] = shape.Sa[3,3];
//   shape.vis.r[1] = shape.r0a[1];
//   shape.vis.r[2] = shape.r0a[2];
//   shape.vis.r[3] = shape.r0a[3];
//   shape.vis.nLength[1] = shape.nLength[1];
//   shape.vis.nLength[2] = shape.nLength[2];
//   shape.vis.nLength[3] = shape.nLength[3];
//   shape.vis.nWidth[1] = shape.nWidth[1];
//   shape.vis.nWidth[2] = shape.nWidth[2];
//   shape.vis.nWidth[3] = shape.nWidth[3];
//   shape.vis.nHeight[1] = shape.nHeight[1];
//   shape.vis.nHeight[2] = shape.nHeight[2];
//   shape.vis.nHeight[3] = shape.nHeight[3];
//   shape.fa[1] = 0.0;
//   shape.fa[2] = 0.0;
//   shape.fa[3] = 0.0;
//   shape.ta[1] = 0.0;
//   shape.ta[2] = 0.0;
//   shape.ta[3] = 0.0;
//   frame.nz[1] = frame.nx[2] * frame.ny[3] - frame.nx[3] * frame.ny[2];
//   frame.nz[2] = frame.nx[3] * frame.ny[1] - frame.nx[1] * frame.ny[3];
//   frame.nz[3] = frame.nx[1] * frame.ny[2] - frame.nx[2] * frame.ny[1];
//   frame.nnz[1] = frame.nz[1] / sqrt(frame.nz[1] ^ 2.0 + (frame.nz[2] ^ 2.0 + frame.nz[3] ^ 2.0));
//   frame.nnz[2] = frame.nz[2] / sqrt(frame.nz[1] ^ 2.0 + (frame.nz[2] ^ 2.0 + frame.nz[3] ^ 2.0));
//   frame.nnz[3] = frame.nz[3] / sqrt(frame.nz[1] ^ 2.0 + (frame.nz[2] ^ 2.0 + frame.nz[3] ^ 2.0));
//   frame.nnx[1] = frame.nx[1] / sqrt(frame.nx[1] ^ 2.0 + (frame.nx[2] ^ 2.0 + frame.nx[3] ^ 2.0));
//   frame.nnx[2] = frame.nx[2] / sqrt(frame.nx[1] ^ 2.0 + (frame.nx[2] ^ 2.0 + frame.nx[3] ^ 2.0));
//   frame.nnx[3] = frame.nx[3] / sqrt(frame.nx[1] ^ 2.0 + (frame.nx[2] ^ 2.0 + frame.nx[3] ^ 2.0));
//   frame.nny[1] = frame.nnz[2] * frame.nnx[3] - frame.nnz[3] * frame.nnx[2];
//   frame.nny[2] = frame.nnz[3] * frame.nnx[1] - frame.nnz[1] * frame.nnx[3];
//   frame.nny[3] = frame.nnz[1] * frame.nnx[2] - frame.nnz[2] * frame.nnx[1];
//   frame.S_rel[1,1] = frame.nnx[1];
//   frame.S_rel[1,2] = frame.nnx[2];
//   frame.S_rel[1,3] = frame.nnx[3];
//   frame.S_rel[2,1] = frame.nny[1];
//   frame.S_rel[2,2] = frame.nny[2];
//   frame.S_rel[2,3] = frame.nny[3];
//   frame.S_rel[3,1] = frame.nnz[1];
//   frame.S_rel[3,2] = frame.nnz[2];
//   frame.S_rel[3,3] = frame.nnz[3];
//   frame.Sb[1,1] = frame.Sa[1,1] * frame.S_rel[1,1] + (frame.Sa[1,2] * frame.S_rel[1,2] + frame.Sa[1,3] * frame.S_rel[1,3]);
//   frame.Sb[1,2] = frame.Sa[1,1] * frame.S_rel[2,1] + (frame.Sa[1,2] * frame.S_rel[2,2] + frame.Sa[1,3] * frame.S_rel[2,3]);
//   frame.Sb[1,3] = frame.Sa[1,1] * frame.S_rel[3,1] + (frame.Sa[1,2] * frame.S_rel[3,2] + frame.Sa[1,3] * frame.S_rel[3,3]);
//   frame.Sb[2,1] = frame.Sa[2,1] * frame.S_rel[1,1] + (frame.Sa[2,2] * frame.S_rel[1,2] + frame.Sa[2,3] * frame.S_rel[1,3]);
//   frame.Sb[2,2] = frame.Sa[2,1] * frame.S_rel[2,1] + (frame.Sa[2,2] * frame.S_rel[2,2] + frame.Sa[2,3] * frame.S_rel[2,3]);
//   frame.Sb[2,3] = frame.Sa[2,1] * frame.S_rel[3,1] + (frame.Sa[2,2] * frame.S_rel[3,2] + frame.Sa[2,3] * frame.S_rel[3,3]);
//   frame.Sb[3,1] = frame.Sa[3,1] * frame.S_rel[1,1] + (frame.Sa[3,2] * frame.S_rel[1,2] + frame.Sa[3,3] * frame.S_rel[1,3]);
//   frame.Sb[3,2] = frame.Sa[3,1] * frame.S_rel[2,1] + (frame.Sa[3,2] * frame.S_rel[2,2] + frame.Sa[3,3] * frame.S_rel[2,3]);
//   frame.Sb[3,3] = frame.Sa[3,1] * frame.S_rel[3,1] + (frame.Sa[3,2] * frame.S_rel[3,2] + frame.Sa[3,3] * frame.S_rel[3,3]);
//   frame.r0b[1] = frame.r0a[1] + (frame.Sa[1,1] * frame.r[1] + (frame.Sa[1,2] * frame.r[2] + frame.Sa[1,3] * frame.r[3]));
//   frame.r0b[2] = frame.r0a[2] + (frame.Sa[2,1] * frame.r[1] + (frame.Sa[2,2] * frame.r[2] + frame.Sa[2,3] * frame.r[3]));
//   frame.r0b[3] = frame.r0a[3] + (frame.Sa[3,1] * frame.r[1] + (frame.Sa[3,2] * frame.r[2] + frame.Sa[3,3] * frame.r[3]));
//   frame.vaux[1] = frame.wa[2] * frame.r[3] - frame.wa[3] * frame.r[2];
//   frame.vaux[2] = frame.wa[3] * frame.r[1] - frame.wa[1] * frame.r[3];
//   frame.vaux[3] = frame.wa[1] * frame.r[2] - frame.wa[2] * frame.r[1];
//   frame.vb[1] = frame.S_rel[1,1] * (frame.va[1] + frame.vaux[1]) + (frame.S_rel[1,2] * (frame.va[2] + frame.vaux[2]) + frame.S_rel[1,3] * (frame.va[3] + frame.vaux[3]));
//   frame.vb[2] = frame.S_rel[2,1] * (frame.va[1] + frame.vaux[1]) + (frame.S_rel[2,2] * (frame.va[2] + frame.vaux[2]) + frame.S_rel[2,3] * (frame.va[3] + frame.vaux[3]));
//   frame.vb[3] = frame.S_rel[3,1] * (frame.va[1] + frame.vaux[1]) + (frame.S_rel[3,2] * (frame.va[2] + frame.vaux[2]) + frame.S_rel[3,3] * (frame.va[3] + frame.vaux[3]));
//   frame.ab[1] = frame.S_rel[1,1] * (frame.aa[1] + (frame.za[2] * frame.r[3] + ((-frame.za[3] * frame.r[2]) + (frame.wa[2] * frame.vaux[3] + (-frame.wa[3] * frame.vaux[2]))))) + (frame.S_rel[1,2] * (frame.aa[2] + (frame.za[3] * frame.r[1] + ((-frame.za[1] * frame.r[3]) + (frame.wa[3] * frame.vaux[1] + (-frame.wa[1] * frame.vaux[3]))))) + frame.S_rel[1,3] * (frame.aa[3] + (frame.za[1] * frame.r[2] + ((-frame.za[2] * frame.r[1]) + (frame.wa[1] * frame.vaux[2] + (-frame.wa[2] * frame.vaux[1]))))));
//   frame.ab[2] = frame.S_rel[2,1] * (frame.aa[1] + (frame.za[2] * frame.r[3] + ((-frame.za[3] * frame.r[2]) + (frame.wa[2] * frame.vaux[3] + (-frame.wa[3] * frame.vaux[2]))))) + (frame.S_rel[2,2] * (frame.aa[2] + (frame.za[3] * frame.r[1] + ((-frame.za[1] * frame.r[3]) + (frame.wa[3] * frame.vaux[1] + (-frame.wa[1] * frame.vaux[3]))))) + frame.S_rel[2,3] * (frame.aa[3] + (frame.za[1] * frame.r[2] + ((-frame.za[2] * frame.r[1]) + (frame.wa[1] * frame.vaux[2] + (-frame.wa[2] * frame.vaux[1]))))));
//   frame.ab[3] = frame.S_rel[3,1] * (frame.aa[1] + (frame.za[2] * frame.r[3] + ((-frame.za[3] * frame.r[2]) + (frame.wa[2] * frame.vaux[3] + (-frame.wa[3] * frame.vaux[2]))))) + (frame.S_rel[3,2] * (frame.aa[2] + (frame.za[3] * frame.r[1] + ((-frame.za[1] * frame.r[3]) + (frame.wa[3] * frame.vaux[1] + (-frame.wa[1] * frame.vaux[3]))))) + frame.S_rel[3,3] * (frame.aa[3] + (frame.za[1] * frame.r[2] + ((-frame.za[2] * frame.r[1]) + (frame.wa[1] * frame.vaux[2] + (-frame.wa[2] * frame.vaux[1]))))));
//   frame.wb[1] = frame.S_rel[1,1] * frame.wa[1] + (frame.S_rel[1,2] * frame.wa[2] + frame.S_rel[1,3] * frame.wa[3]);
//   frame.wb[2] = frame.S_rel[2,1] * frame.wa[1] + (frame.S_rel[2,2] * frame.wa[2] + frame.S_rel[2,3] * frame.wa[3]);
//   frame.wb[3] = frame.S_rel[3,1] * frame.wa[1] + (frame.S_rel[3,2] * frame.wa[2] + frame.S_rel[3,3] * frame.wa[3]);
//   frame.zb[1] = frame.S_rel[1,1] * frame.za[1] + (frame.S_rel[1,2] * frame.za[2] + frame.S_rel[1,3] * frame.za[3]);
//   frame.zb[2] = frame.S_rel[2,1] * frame.za[1] + (frame.S_rel[2,2] * frame.za[2] + frame.S_rel[2,3] * frame.za[3]);
//   frame.zb[3] = frame.S_rel[3,1] * frame.za[1] + (frame.S_rel[3,2] * frame.za[2] + frame.S_rel[3,3] * frame.za[3]);
//   frame.fa[1] = frame.S_rel[1,1] * frame.fb[1] + (frame.S_rel[2,1] * frame.fb[2] + frame.S_rel[3,1] * frame.fb[3]);
//   frame.fa[2] = frame.S_rel[1,2] * frame.fb[1] + (frame.S_rel[2,2] * frame.fb[2] + frame.S_rel[3,2] * frame.fb[3]);
//   frame.fa[3] = frame.S_rel[1,3] * frame.fb[1] + (frame.S_rel[2,3] * frame.fb[2] + frame.S_rel[3,3] * frame.fb[3]);
//   frame.ta[1] = frame.S_rel[1,1] * frame.tb[1] + (frame.S_rel[2,1] * frame.tb[2] + (frame.S_rel[3,1] * frame.tb[3] + (frame.r[2] * frame.fa[3] + (-frame.r[3] * frame.fa[2]))));
//   frame.ta[2] = frame.S_rel[1,2] * frame.tb[1] + (frame.S_rel[2,2] * frame.tb[2] + (frame.S_rel[3,2] * frame.tb[3] + (frame.r[3] * frame.fa[1] + (-frame.r[1] * frame.fa[3]))));
//   frame.ta[3] = frame.S_rel[1,3] * frame.tb[1] + (frame.S_rel[2,3] * frame.tb[2] + (frame.S_rel[3,3] * frame.tb[3] + (frame.r[1] * frame.fa[2] + (-frame.r[2] * frame.fa[1]))));
//   torque.flange_b.tau = -torque.tau;
//   torque.bearing.phi = 0.0;
//   gear.phi_a = gear.ratio * gear.phi_b;
//   0.0 = gear.ratio * gear.flange_a.tau + gear.flange_b.tau;
//   gear.bearing.phi = 0.0;
//   0.0 = gear.flange_a.tau + (gear.flange_b.tau + gear.tau_support);
//   gear.phi_a = gear.flange_a.phi - gear.bearing.phi;
//   gear.phi_b = gear.flange_b.phi - gear.bearing.phi;
//   shaft.w = der(shaft.phi);
//   shaft.a = der(shaft.w);
//   shaft.J * shaft.a = shaft.flange_a.tau + shaft.flange_b.tau;
//   shaft.flange_a.phi = shaft.phi;
//   shaft.flange_b.phi = shaft.phi;
//   constIn.y = constIn.k;
//   b8.Sb[1,1] = b8.Sa[1,1];
//   b8.Sb[1,2] = b8.Sa[1,2];
//   b8.Sb[1,3] = b8.Sa[1,3];
//   b8.Sb[2,1] = b8.Sa[2,1];
//   b8.Sb[2,2] = b8.Sa[2,2];
//   b8.Sb[2,3] = b8.Sa[2,3];
//   b8.Sb[3,1] = b8.Sa[3,1];
//   b8.Sb[3,2] = b8.Sa[3,2];
//   b8.Sb[3,3] = b8.Sa[3,3];
//   b8.wb[1] = b8.wa[1];
//   b8.wb[2] = b8.wa[2];
//   b8.wb[3] = b8.wa[3];
//   b8.zb[1] = b8.za[1];
//   b8.zb[2] = b8.za[2];
//   b8.zb[3] = b8.za[3];
//   b8.r0b[1] = b8.r0a[1] + (b8.Sa[1,1] * b8.r[1] + (b8.Sa[1,2] * b8.r[2] + b8.Sa[1,3] * b8.r[3]));
//   b8.r0b[2] = b8.r0a[2] + (b8.Sa[2,1] * b8.r[1] + (b8.Sa[2,2] * b8.r[2] + b8.Sa[2,3] * b8.r[3]));
//   b8.r0b[3] = b8.r0a[3] + (b8.Sa[3,1] * b8.r[1] + (b8.Sa[3,2] * b8.r[2] + b8.Sa[3,3] * b8.r[3]));
//   b8.vaux[1] = b8.wa[2] * b8.r[3] - b8.wa[3] * b8.r[2];
//   b8.vaux[2] = b8.wa[3] * b8.r[1] - b8.wa[1] * b8.r[3];
//   b8.vaux[3] = b8.wa[1] * b8.r[2] - b8.wa[2] * b8.r[1];
//   b8.vb[1] = b8.va[1] + b8.vaux[1];
//   b8.vb[2] = b8.va[2] + b8.vaux[2];
//   b8.vb[3] = b8.va[3] + b8.vaux[3];
//   b8.ab[1] = b8.aa[1] + (b8.za[2] * b8.r[3] + ((-b8.za[3] * b8.r[2]) + (b8.wa[2] * b8.vaux[3] + (-b8.wa[3] * b8.vaux[2]))));
//   b8.ab[2] = b8.aa[2] + (b8.za[3] * b8.r[1] + ((-b8.za[1] * b8.r[3]) + (b8.wa[3] * b8.vaux[1] + (-b8.wa[1] * b8.vaux[3]))));
//   b8.ab[3] = b8.aa[3] + (b8.za[1] * b8.r[2] + ((-b8.za[2] * b8.r[1]) + (b8.wa[1] * b8.vaux[2] + (-b8.wa[2] * b8.vaux[1]))));
//   b8.fa[1] = b8.fb[1];
//   b8.fa[2] = b8.fb[2];
//   b8.fa[3] = b8.fb[3];
//   b8.ta[1] = b8.tb[1] + (b8.r[2] * b8.fa[3] + (-b8.r[3] * b8.fa[2]));
//   b8.ta[2] = b8.tb[2] + (b8.r[3] * b8.fa[1] + (-b8.r[1] * b8.fa[3]));
//   b8.ta[3] = b8.tb[3] + (b8.r[1] * b8.fa[2] + (-b8.r[2] * b8.fa[1]));
//   b4.frame_b.t[1] + j7.frame_a.t[1] = 0.0;
//   b4.frame_b.t[2] + j7.frame_a.t[2] = 0.0;
//   b4.frame_b.t[3] + j7.frame_a.t[3] = 0.0;
//   b4.frame_b.f[1] + j7.frame_a.f[1] = 0.0;
//   b4.frame_b.f[2] + j7.frame_a.f[2] = 0.0;
//   b4.frame_b.f[3] + j7.frame_a.f[3] = 0.0;
//   b4.body.frameTranslation.frame_b.z[1] = b4.body.frame_b.z[1];
//   b4.body.frameTranslation.frame_b.z[1] = b4.frame_b.z[1];
//   b4.body.frameTranslation.frame_b.z[1] = j7.frame_a.z[1];
//   b4.body.frameTranslation.frame_b.z[2] = b4.body.frame_b.z[2];
//   b4.body.frameTranslation.frame_b.z[2] = b4.frame_b.z[2];
//   b4.body.frameTranslation.frame_b.z[2] = j7.frame_a.z[2];
//   b4.body.frameTranslation.frame_b.z[3] = b4.body.frame_b.z[3];
//   b4.body.frameTranslation.frame_b.z[3] = b4.frame_b.z[3];
//   b4.body.frameTranslation.frame_b.z[3] = j7.frame_a.z[3];
//   b4.body.frameTranslation.frame_b.a[1] = b4.body.frame_b.a[1];
//   b4.body.frameTranslation.frame_b.a[1] = b4.frame_b.a[1];
//   b4.body.frameTranslation.frame_b.a[1] = j7.frame_a.a[1];
//   b4.body.frameTranslation.frame_b.a[2] = b4.body.frame_b.a[2];
//   b4.body.frameTranslation.frame_b.a[2] = b4.frame_b.a[2];
//   b4.body.frameTranslation.frame_b.a[2] = j7.frame_a.a[2];
//   b4.body.frameTranslation.frame_b.a[3] = b4.body.frame_b.a[3];
//   b4.body.frameTranslation.frame_b.a[3] = b4.frame_b.a[3];
//   b4.body.frameTranslation.frame_b.a[3] = j7.frame_a.a[3];
//   b4.body.frameTranslation.frame_b.w[1] = b4.body.frame_b.w[1];
//   b4.body.frameTranslation.frame_b.w[1] = b4.frame_b.w[1];
//   b4.body.frameTranslation.frame_b.w[1] = j7.frame_a.w[1];
//   b4.body.frameTranslation.frame_b.w[2] = b4.body.frame_b.w[2];
//   b4.body.frameTranslation.frame_b.w[2] = b4.frame_b.w[2];
//   b4.body.frameTranslation.frame_b.w[2] = j7.frame_a.w[2];
//   b4.body.frameTranslation.frame_b.w[3] = b4.body.frame_b.w[3];
//   b4.body.frameTranslation.frame_b.w[3] = b4.frame_b.w[3];
//   b4.body.frameTranslation.frame_b.w[3] = j7.frame_a.w[3];
//   b4.body.frameTranslation.frame_b.v[1] = b4.body.frame_b.v[1];
//   b4.body.frameTranslation.frame_b.v[1] = b4.frame_b.v[1];
//   b4.body.frameTranslation.frame_b.v[1] = j7.frame_a.v[1];
//   b4.body.frameTranslation.frame_b.v[2] = b4.body.frame_b.v[2];
//   b4.body.frameTranslation.frame_b.v[2] = b4.frame_b.v[2];
//   b4.body.frameTranslation.frame_b.v[2] = j7.frame_a.v[2];
//   b4.body.frameTranslation.frame_b.v[3] = b4.body.frame_b.v[3];
//   b4.body.frameTranslation.frame_b.v[3] = b4.frame_b.v[3];
//   b4.body.frameTranslation.frame_b.v[3] = j7.frame_a.v[3];
//   b4.body.frameTranslation.frame_b.S[1,1] = b4.body.frame_b.S[1,1];
//   b4.body.frameTranslation.frame_b.S[1,1] = b4.frame_b.S[1,1];
//   b4.body.frameTranslation.frame_b.S[1,1] = j7.frame_a.S[1,1];
//   b4.body.frameTranslation.frame_b.S[1,2] = b4.body.frame_b.S[1,2];
//   b4.body.frameTranslation.frame_b.S[1,2] = b4.frame_b.S[1,2];
//   b4.body.frameTranslation.frame_b.S[1,2] = j7.frame_a.S[1,2];
//   b4.body.frameTranslation.frame_b.S[1,3] = b4.body.frame_b.S[1,3];
//   b4.body.frameTranslation.frame_b.S[1,3] = b4.frame_b.S[1,3];
//   b4.body.frameTranslation.frame_b.S[1,3] = j7.frame_a.S[1,3];
//   b4.body.frameTranslation.frame_b.S[2,1] = b4.body.frame_b.S[2,1];
//   b4.body.frameTranslation.frame_b.S[2,1] = b4.frame_b.S[2,1];
//   b4.body.frameTranslation.frame_b.S[2,1] = j7.frame_a.S[2,1];
//   b4.body.frameTranslation.frame_b.S[2,2] = b4.body.frame_b.S[2,2];
//   b4.body.frameTranslation.frame_b.S[2,2] = b4.frame_b.S[2,2];
//   b4.body.frameTranslation.frame_b.S[2,2] = j7.frame_a.S[2,2];
//   b4.body.frameTranslation.frame_b.S[2,3] = b4.body.frame_b.S[2,3];
//   b4.body.frameTranslation.frame_b.S[2,3] = b4.frame_b.S[2,3];
//   b4.body.frameTranslation.frame_b.S[2,3] = j7.frame_a.S[2,3];
//   b4.body.frameTranslation.frame_b.S[3,1] = b4.body.frame_b.S[3,1];
//   b4.body.frameTranslation.frame_b.S[3,1] = b4.frame_b.S[3,1];
//   b4.body.frameTranslation.frame_b.S[3,1] = j7.frame_a.S[3,1];
//   b4.body.frameTranslation.frame_b.S[3,2] = b4.body.frame_b.S[3,2];
//   b4.body.frameTranslation.frame_b.S[3,2] = b4.frame_b.S[3,2];
//   b4.body.frameTranslation.frame_b.S[3,2] = j7.frame_a.S[3,2];
//   b4.body.frameTranslation.frame_b.S[3,3] = b4.body.frame_b.S[3,3];
//   b4.body.frameTranslation.frame_b.S[3,3] = b4.frame_b.S[3,3];
//   b4.body.frameTranslation.frame_b.S[3,3] = j7.frame_a.S[3,3];
//   b4.body.frameTranslation.frame_b.r0[1] = b4.body.frame_b.r0[1];
//   b4.body.frameTranslation.frame_b.r0[1] = b4.frame_b.r0[1];
//   b4.body.frameTranslation.frame_b.r0[1] = j7.frame_a.r0[1];
//   b4.body.frameTranslation.frame_b.r0[2] = b4.body.frame_b.r0[2];
//   b4.body.frameTranslation.frame_b.r0[2] = b4.frame_b.r0[2];
//   b4.body.frameTranslation.frame_b.r0[2] = j7.frame_a.r0[2];
//   b4.body.frameTranslation.frame_b.r0[3] = b4.body.frame_b.r0[3];
//   b4.body.frameTranslation.frame_b.r0[3] = b4.frame_b.r0[3];
//   b4.body.frameTranslation.frame_b.r0[3] = j7.frame_a.r0[3];
//   constIn.y = torque.tau;
//   torque.flange_b.tau + gear.flange_a.tau = 0.0;
//   gear.flange_a.phi = torque.flange_b.phi;
//   gear.flange_b.tau + shaft.flange_a.tau = 0.0;
//   gear.flange_b.phi = shaft.flange_a.phi;
//   shaft.flange_b.tau + j1.axis.tau = 0.0;
//   j1.axis.phi = shaft.flange_b.phi;
//   j3.frame_b.t[1] + (b3.frame_a.t[1] + j4.frame_a.t[1]) = 0.0;
//   j3.frame_b.t[2] + (b3.frame_a.t[2] + j4.frame_a.t[2]) = 0.0;
//   j3.frame_b.t[3] + (b3.frame_a.t[3] + j4.frame_a.t[3]) = 0.0;
//   j3.frame_b.f[1] + (b3.frame_a.f[1] + j4.frame_a.f[1]) = 0.0;
//   j3.frame_b.f[2] + (b3.frame_a.f[2] + j4.frame_a.f[2]) = 0.0;
//   j3.frame_b.f[3] + (b3.frame_a.f[3] + j4.frame_a.f[3]) = 0.0;
//   b3.body.body.frame_a.z[1] = b3.body.frameTranslation.frame_a.z[1];
//   b3.body.body.frame_a.z[1] = b3.body.frame_a.z[1];
//   b3.body.body.frame_a.z[1] = b3.frame_a.z[1];
//   b3.body.body.frame_a.z[1] = b3.vis.frame_a.z[1];
//   b3.body.body.frame_a.z[1] = j3.frame_b.z[1];
//   b3.body.body.frame_a.z[1] = j4.frame_a.z[1];
//   b3.body.body.frame_a.z[2] = b3.body.frameTranslation.frame_a.z[2];
//   b3.body.body.frame_a.z[2] = b3.body.frame_a.z[2];
//   b3.body.body.frame_a.z[2] = b3.frame_a.z[2];
//   b3.body.body.frame_a.z[2] = b3.vis.frame_a.z[2];
//   b3.body.body.frame_a.z[2] = j3.frame_b.z[2];
//   b3.body.body.frame_a.z[2] = j4.frame_a.z[2];
//   b3.body.body.frame_a.z[3] = b3.body.frameTranslation.frame_a.z[3];
//   b3.body.body.frame_a.z[3] = b3.body.frame_a.z[3];
//   b3.body.body.frame_a.z[3] = b3.frame_a.z[3];
//   b3.body.body.frame_a.z[3] = b3.vis.frame_a.z[3];
//   b3.body.body.frame_a.z[3] = j3.frame_b.z[3];
//   b3.body.body.frame_a.z[3] = j4.frame_a.z[3];
//   b3.body.body.frame_a.a[1] = b3.body.frameTranslation.frame_a.a[1];
//   b3.body.body.frame_a.a[1] = b3.body.frame_a.a[1];
//   b3.body.body.frame_a.a[1] = b3.frame_a.a[1];
//   b3.body.body.frame_a.a[1] = b3.vis.frame_a.a[1];
//   b3.body.body.frame_a.a[1] = j3.frame_b.a[1];
//   b3.body.body.frame_a.a[1] = j4.frame_a.a[1];
//   b3.body.body.frame_a.a[2] = b3.body.frameTranslation.frame_a.a[2];
//   b3.body.body.frame_a.a[2] = b3.body.frame_a.a[2];
//   b3.body.body.frame_a.a[2] = b3.frame_a.a[2];
//   b3.body.body.frame_a.a[2] = b3.vis.frame_a.a[2];
//   b3.body.body.frame_a.a[2] = j3.frame_b.a[2];
//   b3.body.body.frame_a.a[2] = j4.frame_a.a[2];
//   b3.body.body.frame_a.a[3] = b3.body.frameTranslation.frame_a.a[3];
//   b3.body.body.frame_a.a[3] = b3.body.frame_a.a[3];
//   b3.body.body.frame_a.a[3] = b3.frame_a.a[3];
//   b3.body.body.frame_a.a[3] = b3.vis.frame_a.a[3];
//   b3.body.body.frame_a.a[3] = j3.frame_b.a[3];
//   b3.body.body.frame_a.a[3] = j4.frame_a.a[3];
//   b3.body.body.frame_a.w[1] = b3.body.frameTranslation.frame_a.w[1];
//   b3.body.body.frame_a.w[1] = b3.body.frame_a.w[1];
//   b3.body.body.frame_a.w[1] = b3.frame_a.w[1];
//   b3.body.body.frame_a.w[1] = b3.vis.frame_a.w[1];
//   b3.body.body.frame_a.w[1] = j3.frame_b.w[1];
//   b3.body.body.frame_a.w[1] = j4.frame_a.w[1];
//   b3.body.body.frame_a.w[2] = b3.body.frameTranslation.frame_a.w[2];
//   b3.body.body.frame_a.w[2] = b3.body.frame_a.w[2];
//   b3.body.body.frame_a.w[2] = b3.frame_a.w[2];
//   b3.body.body.frame_a.w[2] = b3.vis.frame_a.w[2];
//   b3.body.body.frame_a.w[2] = j3.frame_b.w[2];
//   b3.body.body.frame_a.w[2] = j4.frame_a.w[2];
//   b3.body.body.frame_a.w[3] = b3.body.frameTranslation.frame_a.w[3];
//   b3.body.body.frame_a.w[3] = b3.body.frame_a.w[3];
//   b3.body.body.frame_a.w[3] = b3.frame_a.w[3];
//   b3.body.body.frame_a.w[3] = b3.vis.frame_a.w[3];
//   b3.body.body.frame_a.w[3] = j3.frame_b.w[3];
//   b3.body.body.frame_a.w[3] = j4.frame_a.w[3];
//   b3.body.body.frame_a.v[1] = b3.body.frameTranslation.frame_a.v[1];
//   b3.body.body.frame_a.v[1] = b3.body.frame_a.v[1];
//   b3.body.body.frame_a.v[1] = b3.frame_a.v[1];
//   b3.body.body.frame_a.v[1] = b3.vis.frame_a.v[1];
//   b3.body.body.frame_a.v[1] = j3.frame_b.v[1];
//   b3.body.body.frame_a.v[1] = j4.frame_a.v[1];
//   b3.body.body.frame_a.v[2] = b3.body.frameTranslation.frame_a.v[2];
//   b3.body.body.frame_a.v[2] = b3.body.frame_a.v[2];
//   b3.body.body.frame_a.v[2] = b3.frame_a.v[2];
//   b3.body.body.frame_a.v[2] = b3.vis.frame_a.v[2];
//   b3.body.body.frame_a.v[2] = j3.frame_b.v[2];
//   b3.body.body.frame_a.v[2] = j4.frame_a.v[2];
//   b3.body.body.frame_a.v[3] = b3.body.frameTranslation.frame_a.v[3];
//   b3.body.body.frame_a.v[3] = b3.body.frame_a.v[3];
//   b3.body.body.frame_a.v[3] = b3.frame_a.v[3];
//   b3.body.body.frame_a.v[3] = b3.vis.frame_a.v[3];
//   b3.body.body.frame_a.v[3] = j3.frame_b.v[3];
//   b3.body.body.frame_a.v[3] = j4.frame_a.v[3];
//   b3.body.body.frame_a.S[1,1] = b3.body.frameTranslation.frame_a.S[1,1];
//   b3.body.body.frame_a.S[1,1] = b3.body.frame_a.S[1,1];
//   b3.body.body.frame_a.S[1,1] = b3.frame_a.S[1,1];
//   b3.body.body.frame_a.S[1,1] = b3.vis.frame_a.S[1,1];
//   b3.body.body.frame_a.S[1,1] = j3.frame_b.S[1,1];
//   b3.body.body.frame_a.S[1,1] = j4.frame_a.S[1,1];
//   b3.body.body.frame_a.S[1,2] = b3.body.frameTranslation.frame_a.S[1,2];
//   b3.body.body.frame_a.S[1,2] = b3.body.frame_a.S[1,2];
//   b3.body.body.frame_a.S[1,2] = b3.frame_a.S[1,2];
//   b3.body.body.frame_a.S[1,2] = b3.vis.frame_a.S[1,2];
//   b3.body.body.frame_a.S[1,2] = j3.frame_b.S[1,2];
//   b3.body.body.frame_a.S[1,2] = j4.frame_a.S[1,2];
//   b3.body.body.frame_a.S[1,3] = b3.body.frameTranslation.frame_a.S[1,3];
//   b3.body.body.frame_a.S[1,3] = b3.body.frame_a.S[1,3];
//   b3.body.body.frame_a.S[1,3] = b3.frame_a.S[1,3];
//   b3.body.body.frame_a.S[1,3] = b3.vis.frame_a.S[1,3];
//   b3.body.body.frame_a.S[1,3] = j3.frame_b.S[1,3];
//   b3.body.body.frame_a.S[1,3] = j4.frame_a.S[1,3];
//   b3.body.body.frame_a.S[2,1] = b3.body.frameTranslation.frame_a.S[2,1];
//   b3.body.body.frame_a.S[2,1] = b3.body.frame_a.S[2,1];
//   b3.body.body.frame_a.S[2,1] = b3.frame_a.S[2,1];
//   b3.body.body.frame_a.S[2,1] = b3.vis.frame_a.S[2,1];
//   b3.body.body.frame_a.S[2,1] = j3.frame_b.S[2,1];
//   b3.body.body.frame_a.S[2,1] = j4.frame_a.S[2,1];
//   b3.body.body.frame_a.S[2,2] = b3.body.frameTranslation.frame_a.S[2,2];
//   b3.body.body.frame_a.S[2,2] = b3.body.frame_a.S[2,2];
//   b3.body.body.frame_a.S[2,2] = b3.frame_a.S[2,2];
//   b3.body.body.frame_a.S[2,2] = b3.vis.frame_a.S[2,2];
//   b3.body.body.frame_a.S[2,2] = j3.frame_b.S[2,2];
//   b3.body.body.frame_a.S[2,2] = j4.frame_a.S[2,2];
//   b3.body.body.frame_a.S[2,3] = b3.body.frameTranslation.frame_a.S[2,3];
//   b3.body.body.frame_a.S[2,3] = b3.body.frame_a.S[2,3];
//   b3.body.body.frame_a.S[2,3] = b3.frame_a.S[2,3];
//   b3.body.body.frame_a.S[2,3] = b3.vis.frame_a.S[2,3];
//   b3.body.body.frame_a.S[2,3] = j3.frame_b.S[2,3];
//   b3.body.body.frame_a.S[2,3] = j4.frame_a.S[2,3];
//   b3.body.body.frame_a.S[3,1] = b3.body.frameTranslation.frame_a.S[3,1];
//   b3.body.body.frame_a.S[3,1] = b3.body.frame_a.S[3,1];
//   b3.body.body.frame_a.S[3,1] = b3.frame_a.S[3,1];
//   b3.body.body.frame_a.S[3,1] = b3.vis.frame_a.S[3,1];
//   b3.body.body.frame_a.S[3,1] = j3.frame_b.S[3,1];
//   b3.body.body.frame_a.S[3,1] = j4.frame_a.S[3,1];
//   b3.body.body.frame_a.S[3,2] = b3.body.frameTranslation.frame_a.S[3,2];
//   b3.body.body.frame_a.S[3,2] = b3.body.frame_a.S[3,2];
//   b3.body.body.frame_a.S[3,2] = b3.frame_a.S[3,2];
//   b3.body.body.frame_a.S[3,2] = b3.vis.frame_a.S[3,2];
//   b3.body.body.frame_a.S[3,2] = j3.frame_b.S[3,2];
//   b3.body.body.frame_a.S[3,2] = j4.frame_a.S[3,2];
//   b3.body.body.frame_a.S[3,3] = b3.body.frameTranslation.frame_a.S[3,3];
//   b3.body.body.frame_a.S[3,3] = b3.body.frame_a.S[3,3];
//   b3.body.body.frame_a.S[3,3] = b3.frame_a.S[3,3];
//   b3.body.body.frame_a.S[3,3] = b3.vis.frame_a.S[3,3];
//   b3.body.body.frame_a.S[3,3] = j3.frame_b.S[3,3];
//   b3.body.body.frame_a.S[3,3] = j4.frame_a.S[3,3];
//   b3.body.body.frame_a.r0[1] = b3.body.frameTranslation.frame_a.r0[1];
//   b3.body.body.frame_a.r0[1] = b3.body.frame_a.r0[1];
//   b3.body.body.frame_a.r0[1] = b3.frame_a.r0[1];
//   b3.body.body.frame_a.r0[1] = b3.vis.frame_a.r0[1];
//   b3.body.body.frame_a.r0[1] = j3.frame_b.r0[1];
//   b3.body.body.frame_a.r0[1] = j4.frame_a.r0[1];
//   b3.body.body.frame_a.r0[2] = b3.body.frameTranslation.frame_a.r0[2];
//   b3.body.body.frame_a.r0[2] = b3.body.frame_a.r0[2];
//   b3.body.body.frame_a.r0[2] = b3.frame_a.r0[2];
//   b3.body.body.frame_a.r0[2] = b3.vis.frame_a.r0[2];
//   b3.body.body.frame_a.r0[2] = j3.frame_b.r0[2];
//   b3.body.body.frame_a.r0[2] = j4.frame_a.r0[2];
//   b3.body.body.frame_a.r0[3] = b3.body.frameTranslation.frame_a.r0[3];
//   b3.body.body.frame_a.r0[3] = b3.body.frame_a.r0[3];
//   b3.body.body.frame_a.r0[3] = b3.frame_a.r0[3];
//   b3.body.body.frame_a.r0[3] = b3.vis.frame_a.r0[3];
//   b3.body.body.frame_a.r0[3] = j3.frame_b.r0[3];
//   b3.body.body.frame_a.r0[3] = j4.frame_a.r0[3];
//   frame.frame_b.t[1] + b8.frame_a.t[1] = 0.0;
//   frame.frame_b.t[2] + b8.frame_a.t[2] = 0.0;
//   frame.frame_b.t[3] + b8.frame_a.t[3] = 0.0;
//   frame.frame_b.f[1] + b8.frame_a.f[1] = 0.0;
//   frame.frame_b.f[2] + b8.frame_a.f[2] = 0.0;
//   frame.frame_b.f[3] + b8.frame_a.f[3] = 0.0;
//   b8.frame_a.z[1] = frame.frame_b.z[1];
//   b8.frame_a.z[2] = frame.frame_b.z[2];
//   b8.frame_a.z[3] = frame.frame_b.z[3];
//   b8.frame_a.a[1] = frame.frame_b.a[1];
//   b8.frame_a.a[2] = frame.frame_b.a[2];
//   b8.frame_a.a[3] = frame.frame_b.a[3];
//   b8.frame_a.w[1] = frame.frame_b.w[1];
//   b8.frame_a.w[2] = frame.frame_b.w[2];
//   b8.frame_a.w[3] = frame.frame_b.w[3];
//   b8.frame_a.v[1] = frame.frame_b.v[1];
//   b8.frame_a.v[2] = frame.frame_b.v[2];
//   b8.frame_a.v[3] = frame.frame_b.v[3];
//   b8.frame_a.S[1,1] = frame.frame_b.S[1,1];
//   b8.frame_a.S[1,2] = frame.frame_b.S[1,2];
//   b8.frame_a.S[1,3] = frame.frame_b.S[1,3];
//   b8.frame_a.S[2,1] = frame.frame_b.S[2,1];
//   b8.frame_a.S[2,2] = frame.frame_b.S[2,2];
//   b8.frame_a.S[2,3] = frame.frame_b.S[2,3];
//   b8.frame_a.S[3,1] = frame.frame_b.S[3,1];
//   b8.frame_a.S[3,2] = frame.frame_b.S[3,2];
//   b8.frame_a.S[3,3] = frame.frame_b.S[3,3];
//   b8.frame_a.r0[1] = frame.frame_b.r0[1];
//   b8.frame_a.r0[2] = frame.frame_b.r0[2];
//   b8.frame_a.r0[3] = frame.frame_b.r0[3];
//   b8.frame_b.t[1] + (b5.frame_a.t[1] + j1.frame_a.t[1]) = 0.0;
//   b8.frame_b.t[2] + (b5.frame_a.t[2] + j1.frame_a.t[2]) = 0.0;
//   b8.frame_b.t[3] + (b5.frame_a.t[3] + j1.frame_a.t[3]) = 0.0;
//   b8.frame_b.f[1] + (b5.frame_a.f[1] + j1.frame_a.f[1]) = 0.0;
//   b8.frame_b.f[2] + (b5.frame_a.f[2] + j1.frame_a.f[2]) = 0.0;
//   b8.frame_b.f[3] + (b5.frame_a.f[3] + j1.frame_a.f[3]) = 0.0;
//   b5.body.body.frame_a.z[1] = b5.body.frameTranslation.frame_a.z[1];
//   b5.body.body.frame_a.z[1] = b5.body.frame_a.z[1];
//   b5.body.body.frame_a.z[1] = b5.frame_a.z[1];
//   b5.body.body.frame_a.z[1] = b5.vis.frame_a.z[1];
//   b5.body.body.frame_a.z[1] = b8.frame_b.z[1];
//   b5.body.body.frame_a.z[1] = j1.frame_a.z[1];
//   b5.body.body.frame_a.z[2] = b5.body.frameTranslation.frame_a.z[2];
//   b5.body.body.frame_a.z[2] = b5.body.frame_a.z[2];
//   b5.body.body.frame_a.z[2] = b5.frame_a.z[2];
//   b5.body.body.frame_a.z[2] = b5.vis.frame_a.z[2];
//   b5.body.body.frame_a.z[2] = b8.frame_b.z[2];
//   b5.body.body.frame_a.z[2] = j1.frame_a.z[2];
//   b5.body.body.frame_a.z[3] = b5.body.frameTranslation.frame_a.z[3];
//   b5.body.body.frame_a.z[3] = b5.body.frame_a.z[3];
//   b5.body.body.frame_a.z[3] = b5.frame_a.z[3];
//   b5.body.body.frame_a.z[3] = b5.vis.frame_a.z[3];
//   b5.body.body.frame_a.z[3] = b8.frame_b.z[3];
//   b5.body.body.frame_a.z[3] = j1.frame_a.z[3];
//   b5.body.body.frame_a.a[1] = b5.body.frameTranslation.frame_a.a[1];
//   b5.body.body.frame_a.a[1] = b5.body.frame_a.a[1];
//   b5.body.body.frame_a.a[1] = b5.frame_a.a[1];
//   b5.body.body.frame_a.a[1] = b5.vis.frame_a.a[1];
//   b5.body.body.frame_a.a[1] = b8.frame_b.a[1];
//   b5.body.body.frame_a.a[1] = j1.frame_a.a[1];
//   b5.body.body.frame_a.a[2] = b5.body.frameTranslation.frame_a.a[2];
//   b5.body.body.frame_a.a[2] = b5.body.frame_a.a[2];
//   b5.body.body.frame_a.a[2] = b5.frame_a.a[2];
//   b5.body.body.frame_a.a[2] = b5.vis.frame_a.a[2];
//   b5.body.body.frame_a.a[2] = b8.frame_b.a[2];
//   b5.body.body.frame_a.a[2] = j1.frame_a.a[2];
//   b5.body.body.frame_a.a[3] = b5.body.frameTranslation.frame_a.a[3];
//   b5.body.body.frame_a.a[3] = b5.body.frame_a.a[3];
//   b5.body.body.frame_a.a[3] = b5.frame_a.a[3];
//   b5.body.body.frame_a.a[3] = b5.vis.frame_a.a[3];
//   b5.body.body.frame_a.a[3] = b8.frame_b.a[3];
//   b5.body.body.frame_a.a[3] = j1.frame_a.a[3];
//   b5.body.body.frame_a.w[1] = b5.body.frameTranslation.frame_a.w[1];
//   b5.body.body.frame_a.w[1] = b5.body.frame_a.w[1];
//   b5.body.body.frame_a.w[1] = b5.frame_a.w[1];
//   b5.body.body.frame_a.w[1] = b5.vis.frame_a.w[1];
//   b5.body.body.frame_a.w[1] = b8.frame_b.w[1];
//   b5.body.body.frame_a.w[1] = j1.frame_a.w[1];
//   b5.body.body.frame_a.w[2] = b5.body.frameTranslation.frame_a.w[2];
//   b5.body.body.frame_a.w[2] = b5.body.frame_a.w[2];
//   b5.body.body.frame_a.w[2] = b5.frame_a.w[2];
//   b5.body.body.frame_a.w[2] = b5.vis.frame_a.w[2];
//   b5.body.body.frame_a.w[2] = b8.frame_b.w[2];
//   b5.body.body.frame_a.w[2] = j1.frame_a.w[2];
//   b5.body.body.frame_a.w[3] = b5.body.frameTranslation.frame_a.w[3];
//   b5.body.body.frame_a.w[3] = b5.body.frame_a.w[3];
//   b5.body.body.frame_a.w[3] = b5.frame_a.w[3];
//   b5.body.body.frame_a.w[3] = b5.vis.frame_a.w[3];
//   b5.body.body.frame_a.w[3] = b8.frame_b.w[3];
//   b5.body.body.frame_a.w[3] = j1.frame_a.w[3];
//   b5.body.body.frame_a.v[1] = b5.body.frameTranslation.frame_a.v[1];
//   b5.body.body.frame_a.v[1] = b5.body.frame_a.v[1];
//   b5.body.body.frame_a.v[1] = b5.frame_a.v[1];
//   b5.body.body.frame_a.v[1] = b5.vis.frame_a.v[1];
//   b5.body.body.frame_a.v[1] = b8.frame_b.v[1];
//   b5.body.body.frame_a.v[1] = j1.frame_a.v[1];
//   b5.body.body.frame_a.v[2] = b5.body.frameTranslation.frame_a.v[2];
//   b5.body.body.frame_a.v[2] = b5.body.frame_a.v[2];
//   b5.body.body.frame_a.v[2] = b5.frame_a.v[2];
//   b5.body.body.frame_a.v[2] = b5.vis.frame_a.v[2];
//   b5.body.body.frame_a.v[2] = b8.frame_b.v[2];
//   b5.body.body.frame_a.v[2] = j1.frame_a.v[2];
//   b5.body.body.frame_a.v[3] = b5.body.frameTranslation.frame_a.v[3];
//   b5.body.body.frame_a.v[3] = b5.body.frame_a.v[3];
//   b5.body.body.frame_a.v[3] = b5.frame_a.v[3];
//   b5.body.body.frame_a.v[3] = b5.vis.frame_a.v[3];
//   b5.body.body.frame_a.v[3] = b8.frame_b.v[3];
//   b5.body.body.frame_a.v[3] = j1.frame_a.v[3];
//   b5.body.body.frame_a.S[1,1] = b5.body.frameTranslation.frame_a.S[1,1];
//   b5.body.body.frame_a.S[1,1] = b5.body.frame_a.S[1,1];
//   b5.body.body.frame_a.S[1,1] = b5.frame_a.S[1,1];
//   b5.body.body.frame_a.S[1,1] = b5.vis.frame_a.S[1,1];
//   b5.body.body.frame_a.S[1,1] = b8.frame_b.S[1,1];
//   b5.body.body.frame_a.S[1,1] = j1.frame_a.S[1,1];
//   b5.body.body.frame_a.S[1,2] = b5.body.frameTranslation.frame_a.S[1,2];
//   b5.body.body.frame_a.S[1,2] = b5.body.frame_a.S[1,2];
//   b5.body.body.frame_a.S[1,2] = b5.frame_a.S[1,2];
//   b5.body.body.frame_a.S[1,2] = b5.vis.frame_a.S[1,2];
//   b5.body.body.frame_a.S[1,2] = b8.frame_b.S[1,2];
//   b5.body.body.frame_a.S[1,2] = j1.frame_a.S[1,2];
//   b5.body.body.frame_a.S[1,3] = b5.body.frameTranslation.frame_a.S[1,3];
//   b5.body.body.frame_a.S[1,3] = b5.body.frame_a.S[1,3];
//   b5.body.body.frame_a.S[1,3] = b5.frame_a.S[1,3];
//   b5.body.body.frame_a.S[1,3] = b5.vis.frame_a.S[1,3];
//   b5.body.body.frame_a.S[1,3] = b8.frame_b.S[1,3];
//   b5.body.body.frame_a.S[1,3] = j1.frame_a.S[1,3];
//   b5.body.body.frame_a.S[2,1] = b5.body.frameTranslation.frame_a.S[2,1];
//   b5.body.body.frame_a.S[2,1] = b5.body.frame_a.S[2,1];
//   b5.body.body.frame_a.S[2,1] = b5.frame_a.S[2,1];
//   b5.body.body.frame_a.S[2,1] = b5.vis.frame_a.S[2,1];
//   b5.body.body.frame_a.S[2,1] = b8.frame_b.S[2,1];
//   b5.body.body.frame_a.S[2,1] = j1.frame_a.S[2,1];
//   b5.body.body.frame_a.S[2,2] = b5.body.frameTranslation.frame_a.S[2,2];
//   b5.body.body.frame_a.S[2,2] = b5.body.frame_a.S[2,2];
//   b5.body.body.frame_a.S[2,2] = b5.frame_a.S[2,2];
//   b5.body.body.frame_a.S[2,2] = b5.vis.frame_a.S[2,2];
//   b5.body.body.frame_a.S[2,2] = b8.frame_b.S[2,2];
//   b5.body.body.frame_a.S[2,2] = j1.frame_a.S[2,2];
//   b5.body.body.frame_a.S[2,3] = b5.body.frameTranslation.frame_a.S[2,3];
//   b5.body.body.frame_a.S[2,3] = b5.body.frame_a.S[2,3];
//   b5.body.body.frame_a.S[2,3] = b5.frame_a.S[2,3];
//   b5.body.body.frame_a.S[2,3] = b5.vis.frame_a.S[2,3];
//   b5.body.body.frame_a.S[2,3] = b8.frame_b.S[2,3];
//   b5.body.body.frame_a.S[2,3] = j1.frame_a.S[2,3];
//   b5.body.body.frame_a.S[3,1] = b5.body.frameTranslation.frame_a.S[3,1];
//   b5.body.body.frame_a.S[3,1] = b5.body.frame_a.S[3,1];
//   b5.body.body.frame_a.S[3,1] = b5.frame_a.S[3,1];
//   b5.body.body.frame_a.S[3,1] = b5.vis.frame_a.S[3,1];
//   b5.body.body.frame_a.S[3,1] = b8.frame_b.S[3,1];
//   b5.body.body.frame_a.S[3,1] = j1.frame_a.S[3,1];
//   b5.body.body.frame_a.S[3,2] = b5.body.frameTranslation.frame_a.S[3,2];
//   b5.body.body.frame_a.S[3,2] = b5.body.frame_a.S[3,2];
//   b5.body.body.frame_a.S[3,2] = b5.frame_a.S[3,2];
//   b5.body.body.frame_a.S[3,2] = b5.vis.frame_a.S[3,2];
//   b5.body.body.frame_a.S[3,2] = b8.frame_b.S[3,2];
//   b5.body.body.frame_a.S[3,2] = j1.frame_a.S[3,2];
//   b5.body.body.frame_a.S[3,3] = b5.body.frameTranslation.frame_a.S[3,3];
//   b5.body.body.frame_a.S[3,3] = b5.body.frame_a.S[3,3];
//   b5.body.body.frame_a.S[3,3] = b5.frame_a.S[3,3];
//   b5.body.body.frame_a.S[3,3] = b5.vis.frame_a.S[3,3];
//   b5.body.body.frame_a.S[3,3] = b8.frame_b.S[3,3];
//   b5.body.body.frame_a.S[3,3] = j1.frame_a.S[3,3];
//   b5.body.body.frame_a.r0[1] = b5.body.frameTranslation.frame_a.r0[1];
//   b5.body.body.frame_a.r0[1] = b5.body.frame_a.r0[1];
//   b5.body.body.frame_a.r0[1] = b5.frame_a.r0[1];
//   b5.body.body.frame_a.r0[1] = b5.vis.frame_a.r0[1];
//   b5.body.body.frame_a.r0[1] = b8.frame_b.r0[1];
//   b5.body.body.frame_a.r0[1] = j1.frame_a.r0[1];
//   b5.body.body.frame_a.r0[2] = b5.body.frameTranslation.frame_a.r0[2];
//   b5.body.body.frame_a.r0[2] = b5.body.frame_a.r0[2];
//   b5.body.body.frame_a.r0[2] = b5.frame_a.r0[2];
//   b5.body.body.frame_a.r0[2] = b5.vis.frame_a.r0[2];
//   b5.body.body.frame_a.r0[2] = b8.frame_b.r0[2];
//   b5.body.body.frame_a.r0[2] = j1.frame_a.r0[2];
//   b5.body.body.frame_a.r0[3] = b5.body.frameTranslation.frame_a.r0[3];
//   b5.body.body.frame_a.r0[3] = b5.body.frame_a.r0[3];
//   b5.body.body.frame_a.r0[3] = b5.frame_a.r0[3];
//   b5.body.body.frame_a.r0[3] = b5.vis.frame_a.r0[3];
//   b5.body.body.frame_a.r0[3] = b8.frame_b.r0[3];
//   b5.body.body.frame_a.r0[3] = j1.frame_a.r0[3];
//   j7.frame_b.t[1] + j6.frame_a.t[1] = 0.0;
//   j7.frame_b.t[2] + j6.frame_a.t[2] = 0.0;
//   j7.frame_b.t[3] + j6.frame_a.t[3] = 0.0;
//   j7.frame_b.f[1] + j6.frame_a.f[1] = 0.0;
//   j7.frame_b.f[2] + j6.frame_a.f[2] = 0.0;
//   j7.frame_b.f[3] + j6.frame_a.f[3] = 0.0;
//   j6.frame_a.z[1] = j7.frame_b.z[1];
//   j6.frame_a.z[2] = j7.frame_b.z[2];
//   j6.frame_a.z[3] = j7.frame_b.z[3];
//   j6.frame_a.a[1] = j7.frame_b.a[1];
//   j6.frame_a.a[2] = j7.frame_b.a[2];
//   j6.frame_a.a[3] = j7.frame_b.a[3];
//   j6.frame_a.w[1] = j7.frame_b.w[1];
//   j6.frame_a.w[2] = j7.frame_b.w[2];
//   j6.frame_a.w[3] = j7.frame_b.w[3];
//   j6.frame_a.v[1] = j7.frame_b.v[1];
//   j6.frame_a.v[2] = j7.frame_b.v[2];
//   j6.frame_a.v[3] = j7.frame_b.v[3];
//   j6.frame_a.S[1,1] = j7.frame_b.S[1,1];
//   j6.frame_a.S[1,2] = j7.frame_b.S[1,2];
//   j6.frame_a.S[1,3] = j7.frame_b.S[1,3];
//   j6.frame_a.S[2,1] = j7.frame_b.S[2,1];
//   j6.frame_a.S[2,2] = j7.frame_b.S[2,2];
//   j6.frame_a.S[2,3] = j7.frame_b.S[2,3];
//   j6.frame_a.S[3,1] = j7.frame_b.S[3,1];
//   j6.frame_a.S[3,2] = j7.frame_b.S[3,2];
//   j6.frame_a.S[3,3] = j7.frame_b.S[3,3];
//   j6.frame_a.r0[1] = j7.frame_b.r0[1];
//   j6.frame_a.r0[2] = j7.frame_b.r0[2];
//   j6.frame_a.r0[3] = j7.frame_b.r0[3];
//   b1.frame_a.t[1] + j1.frame_b.t[1] = 0.0;
//   b1.frame_a.t[2] + j1.frame_b.t[2] = 0.0;
//   b1.frame_a.t[3] + j1.frame_b.t[3] = 0.0;
//   b1.frame_a.f[1] + j1.frame_b.f[1] = 0.0;
//   b1.frame_a.f[2] + j1.frame_b.f[2] = 0.0;
//   b1.frame_a.f[3] + j1.frame_b.f[3] = 0.0;
//   b1.body.frame_a.z[1] = b1.frameTranslation.frame_a.z[1];
//   b1.body.frame_a.z[1] = b1.frame_a.z[1];
//   b1.body.frame_a.z[1] = j1.frame_b.z[1];
//   b1.body.frame_a.z[2] = b1.frameTranslation.frame_a.z[2];
//   b1.body.frame_a.z[2] = b1.frame_a.z[2];
//   b1.body.frame_a.z[2] = j1.frame_b.z[2];
//   b1.body.frame_a.z[3] = b1.frameTranslation.frame_a.z[3];
//   b1.body.frame_a.z[3] = b1.frame_a.z[3];
//   b1.body.frame_a.z[3] = j1.frame_b.z[3];
//   b1.body.frame_a.a[1] = b1.frameTranslation.frame_a.a[1];
//   b1.body.frame_a.a[1] = b1.frame_a.a[1];
//   b1.body.frame_a.a[1] = j1.frame_b.a[1];
//   b1.body.frame_a.a[2] = b1.frameTranslation.frame_a.a[2];
//   b1.body.frame_a.a[2] = b1.frame_a.a[2];
//   b1.body.frame_a.a[2] = j1.frame_b.a[2];
//   b1.body.frame_a.a[3] = b1.frameTranslation.frame_a.a[3];
//   b1.body.frame_a.a[3] = b1.frame_a.a[3];
//   b1.body.frame_a.a[3] = j1.frame_b.a[3];
//   b1.body.frame_a.w[1] = b1.frameTranslation.frame_a.w[1];
//   b1.body.frame_a.w[1] = b1.frame_a.w[1];
//   b1.body.frame_a.w[1] = j1.frame_b.w[1];
//   b1.body.frame_a.w[2] = b1.frameTranslation.frame_a.w[2];
//   b1.body.frame_a.w[2] = b1.frame_a.w[2];
//   b1.body.frame_a.w[2] = j1.frame_b.w[2];
//   b1.body.frame_a.w[3] = b1.frameTranslation.frame_a.w[3];
//   b1.body.frame_a.w[3] = b1.frame_a.w[3];
//   b1.body.frame_a.w[3] = j1.frame_b.w[3];
//   b1.body.frame_a.v[1] = b1.frameTranslation.frame_a.v[1];
//   b1.body.frame_a.v[1] = b1.frame_a.v[1];
//   b1.body.frame_a.v[1] = j1.frame_b.v[1];
//   b1.body.frame_a.v[2] = b1.frameTranslation.frame_a.v[2];
//   b1.body.frame_a.v[2] = b1.frame_a.v[2];
//   b1.body.frame_a.v[2] = j1.frame_b.v[2];
//   b1.body.frame_a.v[3] = b1.frameTranslation.frame_a.v[3];
//   b1.body.frame_a.v[3] = b1.frame_a.v[3];
//   b1.body.frame_a.v[3] = j1.frame_b.v[3];
//   b1.body.frame_a.S[1,1] = b1.frameTranslation.frame_a.S[1,1];
//   b1.body.frame_a.S[1,1] = b1.frame_a.S[1,1];
//   b1.body.frame_a.S[1,1] = j1.frame_b.S[1,1];
//   b1.body.frame_a.S[1,2] = b1.frameTranslation.frame_a.S[1,2];
//   b1.body.frame_a.S[1,2] = b1.frame_a.S[1,2];
//   b1.body.frame_a.S[1,2] = j1.frame_b.S[1,2];
//   b1.body.frame_a.S[1,3] = b1.frameTranslation.frame_a.S[1,3];
//   b1.body.frame_a.S[1,3] = b1.frame_a.S[1,3];
//   b1.body.frame_a.S[1,3] = j1.frame_b.S[1,3];
//   b1.body.frame_a.S[2,1] = b1.frameTranslation.frame_a.S[2,1];
//   b1.body.frame_a.S[2,1] = b1.frame_a.S[2,1];
//   b1.body.frame_a.S[2,1] = j1.frame_b.S[2,1];
//   b1.body.frame_a.S[2,2] = b1.frameTranslation.frame_a.S[2,2];
//   b1.body.frame_a.S[2,2] = b1.frame_a.S[2,2];
//   b1.body.frame_a.S[2,2] = j1.frame_b.S[2,2];
//   b1.body.frame_a.S[2,3] = b1.frameTranslation.frame_a.S[2,3];
//   b1.body.frame_a.S[2,3] = b1.frame_a.S[2,3];
//   b1.body.frame_a.S[2,3] = j1.frame_b.S[2,3];
//   b1.body.frame_a.S[3,1] = b1.frameTranslation.frame_a.S[3,1];
//   b1.body.frame_a.S[3,1] = b1.frame_a.S[3,1];
//   b1.body.frame_a.S[3,1] = j1.frame_b.S[3,1];
//   b1.body.frame_a.S[3,2] = b1.frameTranslation.frame_a.S[3,2];
//   b1.body.frame_a.S[3,2] = b1.frame_a.S[3,2];
//   b1.body.frame_a.S[3,2] = j1.frame_b.S[3,2];
//   b1.body.frame_a.S[3,3] = b1.frameTranslation.frame_a.S[3,3];
//   b1.body.frame_a.S[3,3] = b1.frame_a.S[3,3];
//   b1.body.frame_a.S[3,3] = j1.frame_b.S[3,3];
//   b1.body.frame_a.r0[1] = b1.frameTranslation.frame_a.r0[1];
//   b1.body.frame_a.r0[1] = b1.frame_a.r0[1];
//   b1.body.frame_a.r0[1] = j1.frame_b.r0[1];
//   b1.body.frame_a.r0[2] = b1.frameTranslation.frame_a.r0[2];
//   b1.body.frame_a.r0[2] = b1.frame_a.r0[2];
//   b1.body.frame_a.r0[2] = j1.frame_b.r0[2];
//   b1.body.frame_a.r0[3] = b1.frameTranslation.frame_a.r0[3];
//   b1.body.frame_a.r0[3] = b1.frame_a.r0[3];
//   b1.body.frame_a.r0[3] = j1.frame_b.r0[3];
//   b1.frame_b.t[1] + j2.frame_a.t[1] = 0.0;
//   b1.frame_b.t[2] + j2.frame_a.t[2] = 0.0;
//   b1.frame_b.t[3] + j2.frame_a.t[3] = 0.0;
//   b1.frame_b.f[1] + j2.frame_a.f[1] = 0.0;
//   b1.frame_b.f[2] + j2.frame_a.f[2] = 0.0;
//   b1.frame_b.f[3] + j2.frame_a.f[3] = 0.0;
//   b1.frameTranslation.frame_b.z[1] = b1.frame_b.z[1];
//   b1.frameTranslation.frame_b.z[1] = j2.frame_a.z[1];
//   b1.frameTranslation.frame_b.z[2] = b1.frame_b.z[2];
//   b1.frameTranslation.frame_b.z[2] = j2.frame_a.z[2];
//   b1.frameTranslation.frame_b.z[3] = b1.frame_b.z[3];
//   b1.frameTranslation.frame_b.z[3] = j2.frame_a.z[3];
//   b1.frameTranslation.frame_b.a[1] = b1.frame_b.a[1];
//   b1.frameTranslation.frame_b.a[1] = j2.frame_a.a[1];
//   b1.frameTranslation.frame_b.a[2] = b1.frame_b.a[2];
//   b1.frameTranslation.frame_b.a[2] = j2.frame_a.a[2];
//   b1.frameTranslation.frame_b.a[3] = b1.frame_b.a[3];
//   b1.frameTranslation.frame_b.a[3] = j2.frame_a.a[3];
//   b1.frameTranslation.frame_b.w[1] = b1.frame_b.w[1];
//   b1.frameTranslation.frame_b.w[1] = j2.frame_a.w[1];
//   b1.frameTranslation.frame_b.w[2] = b1.frame_b.w[2];
//   b1.frameTranslation.frame_b.w[2] = j2.frame_a.w[2];
//   b1.frameTranslation.frame_b.w[3] = b1.frame_b.w[3];
//   b1.frameTranslation.frame_b.w[3] = j2.frame_a.w[3];
//   b1.frameTranslation.frame_b.v[1] = b1.frame_b.v[1];
//   b1.frameTranslation.frame_b.v[1] = j2.frame_a.v[1];
//   b1.frameTranslation.frame_b.v[2] = b1.frame_b.v[2];
//   b1.frameTranslation.frame_b.v[2] = j2.frame_a.v[2];
//   b1.frameTranslation.frame_b.v[3] = b1.frame_b.v[3];
//   b1.frameTranslation.frame_b.v[3] = j2.frame_a.v[3];
//   b1.frameTranslation.frame_b.S[1,1] = b1.frame_b.S[1,1];
//   b1.frameTranslation.frame_b.S[1,1] = j2.frame_a.S[1,1];
//   b1.frameTranslation.frame_b.S[1,2] = b1.frame_b.S[1,2];
//   b1.frameTranslation.frame_b.S[1,2] = j2.frame_a.S[1,2];
//   b1.frameTranslation.frame_b.S[1,3] = b1.frame_b.S[1,3];
//   b1.frameTranslation.frame_b.S[1,3] = j2.frame_a.S[1,3];
//   b1.frameTranslation.frame_b.S[2,1] = b1.frame_b.S[2,1];
//   b1.frameTranslation.frame_b.S[2,1] = j2.frame_a.S[2,1];
//   b1.frameTranslation.frame_b.S[2,2] = b1.frame_b.S[2,2];
//   b1.frameTranslation.frame_b.S[2,2] = j2.frame_a.S[2,2];
//   b1.frameTranslation.frame_b.S[2,3] = b1.frame_b.S[2,3];
//   b1.frameTranslation.frame_b.S[2,3] = j2.frame_a.S[2,3];
//   b1.frameTranslation.frame_b.S[3,1] = b1.frame_b.S[3,1];
//   b1.frameTranslation.frame_b.S[3,1] = j2.frame_a.S[3,1];
//   b1.frameTranslation.frame_b.S[3,2] = b1.frame_b.S[3,2];
//   b1.frameTranslation.frame_b.S[3,2] = j2.frame_a.S[3,2];
//   b1.frameTranslation.frame_b.S[3,3] = b1.frame_b.S[3,3];
//   b1.frameTranslation.frame_b.S[3,3] = j2.frame_a.S[3,3];
//   b1.frameTranslation.frame_b.r0[1] = b1.frame_b.r0[1];
//   b1.frameTranslation.frame_b.r0[1] = j2.frame_a.r0[1];
//   b1.frameTranslation.frame_b.r0[2] = b1.frame_b.r0[2];
//   b1.frameTranslation.frame_b.r0[2] = j2.frame_a.r0[2];
//   b1.frameTranslation.frame_b.r0[3] = b1.frame_b.r0[3];
//   b1.frameTranslation.frame_b.r0[3] = j2.frame_a.r0[3];
//   j2.frame_c.t[1] + b2.frame_a.t[1] = 0.0;
//   j2.frame_c.t[2] + b2.frame_a.t[2] = 0.0;
//   j2.frame_c.t[3] + b2.frame_a.t[3] = 0.0;
//   j2.frame_c.f[1] + b2.frame_a.f[1] = 0.0;
//   j2.frame_c.f[2] + b2.frame_a.f[2] = 0.0;
//   j2.frame_c.f[3] + b2.frame_a.f[3] = 0.0;
//   b2.body.frame_a.z[1] = b2.frameTranslation.frame_a.z[1];
//   b2.body.frame_a.z[1] = b2.frame_a.z[1];
//   b2.body.frame_a.z[1] = j2.frame_c.z[1];
//   b2.body.frame_a.z[2] = b2.frameTranslation.frame_a.z[2];
//   b2.body.frame_a.z[2] = b2.frame_a.z[2];
//   b2.body.frame_a.z[2] = j2.frame_c.z[2];
//   b2.body.frame_a.z[3] = b2.frameTranslation.frame_a.z[3];
//   b2.body.frame_a.z[3] = b2.frame_a.z[3];
//   b2.body.frame_a.z[3] = j2.frame_c.z[3];
//   b2.body.frame_a.a[1] = b2.frameTranslation.frame_a.a[1];
//   b2.body.frame_a.a[1] = b2.frame_a.a[1];
//   b2.body.frame_a.a[1] = j2.frame_c.a[1];
//   b2.body.frame_a.a[2] = b2.frameTranslation.frame_a.a[2];
//   b2.body.frame_a.a[2] = b2.frame_a.a[2];
//   b2.body.frame_a.a[2] = j2.frame_c.a[2];
//   b2.body.frame_a.a[3] = b2.frameTranslation.frame_a.a[3];
//   b2.body.frame_a.a[3] = b2.frame_a.a[3];
//   b2.body.frame_a.a[3] = j2.frame_c.a[3];
//   b2.body.frame_a.w[1] = b2.frameTranslation.frame_a.w[1];
//   b2.body.frame_a.w[1] = b2.frame_a.w[1];
//   b2.body.frame_a.w[1] = j2.frame_c.w[1];
//   b2.body.frame_a.w[2] = b2.frameTranslation.frame_a.w[2];
//   b2.body.frame_a.w[2] = b2.frame_a.w[2];
//   b2.body.frame_a.w[2] = j2.frame_c.w[2];
//   b2.body.frame_a.w[3] = b2.frameTranslation.frame_a.w[3];
//   b2.body.frame_a.w[3] = b2.frame_a.w[3];
//   b2.body.frame_a.w[3] = j2.frame_c.w[3];
//   b2.body.frame_a.v[1] = b2.frameTranslation.frame_a.v[1];
//   b2.body.frame_a.v[1] = b2.frame_a.v[1];
//   b2.body.frame_a.v[1] = j2.frame_c.v[1];
//   b2.body.frame_a.v[2] = b2.frameTranslation.frame_a.v[2];
//   b2.body.frame_a.v[2] = b2.frame_a.v[2];
//   b2.body.frame_a.v[2] = j2.frame_c.v[2];
//   b2.body.frame_a.v[3] = b2.frameTranslation.frame_a.v[3];
//   b2.body.frame_a.v[3] = b2.frame_a.v[3];
//   b2.body.frame_a.v[3] = j2.frame_c.v[3];
//   b2.body.frame_a.S[1,1] = b2.frameTranslation.frame_a.S[1,1];
//   b2.body.frame_a.S[1,1] = b2.frame_a.S[1,1];
//   b2.body.frame_a.S[1,1] = j2.frame_c.S[1,1];
//   b2.body.frame_a.S[1,2] = b2.frameTranslation.frame_a.S[1,2];
//   b2.body.frame_a.S[1,2] = b2.frame_a.S[1,2];
//   b2.body.frame_a.S[1,2] = j2.frame_c.S[1,2];
//   b2.body.frame_a.S[1,3] = b2.frameTranslation.frame_a.S[1,3];
//   b2.body.frame_a.S[1,3] = b2.frame_a.S[1,3];
//   b2.body.frame_a.S[1,3] = j2.frame_c.S[1,3];
//   b2.body.frame_a.S[2,1] = b2.frameTranslation.frame_a.S[2,1];
//   b2.body.frame_a.S[2,1] = b2.frame_a.S[2,1];
//   b2.body.frame_a.S[2,1] = j2.frame_c.S[2,1];
//   b2.body.frame_a.S[2,2] = b2.frameTranslation.frame_a.S[2,2];
//   b2.body.frame_a.S[2,2] = b2.frame_a.S[2,2];
//   b2.body.frame_a.S[2,2] = j2.frame_c.S[2,2];
//   b2.body.frame_a.S[2,3] = b2.frameTranslation.frame_a.S[2,3];
//   b2.body.frame_a.S[2,3] = b2.frame_a.S[2,3];
//   b2.body.frame_a.S[2,3] = j2.frame_c.S[2,3];
//   b2.body.frame_a.S[3,1] = b2.frameTranslation.frame_a.S[3,1];
//   b2.body.frame_a.S[3,1] = b2.frame_a.S[3,1];
//   b2.body.frame_a.S[3,1] = j2.frame_c.S[3,1];
//   b2.body.frame_a.S[3,2] = b2.frameTranslation.frame_a.S[3,2];
//   b2.body.frame_a.S[3,2] = b2.frame_a.S[3,2];
//   b2.body.frame_a.S[3,2] = j2.frame_c.S[3,2];
//   b2.body.frame_a.S[3,3] = b2.frameTranslation.frame_a.S[3,3];
//   b2.body.frame_a.S[3,3] = b2.frame_a.S[3,3];
//   b2.body.frame_a.S[3,3] = j2.frame_c.S[3,3];
//   b2.body.frame_a.r0[1] = b2.frameTranslation.frame_a.r0[1];
//   b2.body.frame_a.r0[1] = b2.frame_a.r0[1];
//   b2.body.frame_a.r0[1] = j2.frame_c.r0[1];
//   b2.body.frame_a.r0[2] = b2.frameTranslation.frame_a.r0[2];
//   b2.body.frame_a.r0[2] = b2.frame_a.r0[2];
//   b2.body.frame_a.r0[2] = j2.frame_c.r0[2];
//   b2.body.frame_a.r0[3] = b2.frameTranslation.frame_a.r0[3];
//   b2.body.frame_a.r0[3] = b2.frame_a.r0[3];
//   b2.body.frame_a.r0[3] = j2.frame_c.r0[3];
//   j5.frame_b.t[1] + (shape.frame_a.t[1] + b6.frame_a.t[1]) = 0.0;
//   j5.frame_b.t[2] + (shape.frame_a.t[2] + b6.frame_a.t[2]) = 0.0;
//   j5.frame_b.t[3] + (shape.frame_a.t[3] + b6.frame_a.t[3]) = 0.0;
//   j5.frame_b.f[1] + (shape.frame_a.f[1] + b6.frame_a.f[1]) = 0.0;
//   j5.frame_b.f[2] + (shape.frame_a.f[2] + b6.frame_a.f[2]) = 0.0;
//   j5.frame_b.f[3] + (shape.frame_a.f[3] + b6.frame_a.f[3]) = 0.0;
//   b6.body.frame_a.z[1] = b6.frameTranslation.frame_a.z[1];
//   b6.body.frame_a.z[1] = b6.frame_a.z[1];
//   b6.body.frame_a.z[1] = j5.frame_b.z[1];
//   b6.body.frame_a.z[1] = shape.frame_a.z[1];
//   b6.body.frame_a.z[2] = b6.frameTranslation.frame_a.z[2];
//   b6.body.frame_a.z[2] = b6.frame_a.z[2];
//   b6.body.frame_a.z[2] = j5.frame_b.z[2];
//   b6.body.frame_a.z[2] = shape.frame_a.z[2];
//   b6.body.frame_a.z[3] = b6.frameTranslation.frame_a.z[3];
//   b6.body.frame_a.z[3] = b6.frame_a.z[3];
//   b6.body.frame_a.z[3] = j5.frame_b.z[3];
//   b6.body.frame_a.z[3] = shape.frame_a.z[3];
//   b6.body.frame_a.a[1] = b6.frameTranslation.frame_a.a[1];
//   b6.body.frame_a.a[1] = b6.frame_a.a[1];
//   b6.body.frame_a.a[1] = j5.frame_b.a[1];
//   b6.body.frame_a.a[1] = shape.frame_a.a[1];
//   b6.body.frame_a.a[2] = b6.frameTranslation.frame_a.a[2];
//   b6.body.frame_a.a[2] = b6.frame_a.a[2];
//   b6.body.frame_a.a[2] = j5.frame_b.a[2];
//   b6.body.frame_a.a[2] = shape.frame_a.a[2];
//   b6.body.frame_a.a[3] = b6.frameTranslation.frame_a.a[3];
//   b6.body.frame_a.a[3] = b6.frame_a.a[3];
//   b6.body.frame_a.a[3] = j5.frame_b.a[3];
//   b6.body.frame_a.a[3] = shape.frame_a.a[3];
//   b6.body.frame_a.w[1] = b6.frameTranslation.frame_a.w[1];
//   b6.body.frame_a.w[1] = b6.frame_a.w[1];
//   b6.body.frame_a.w[1] = j5.frame_b.w[1];
//   b6.body.frame_a.w[1] = shape.frame_a.w[1];
//   b6.body.frame_a.w[2] = b6.frameTranslation.frame_a.w[2];
//   b6.body.frame_a.w[2] = b6.frame_a.w[2];
//   b6.body.frame_a.w[2] = j5.frame_b.w[2];
//   b6.body.frame_a.w[2] = shape.frame_a.w[2];
//   b6.body.frame_a.w[3] = b6.frameTranslation.frame_a.w[3];
//   b6.body.frame_a.w[3] = b6.frame_a.w[3];
//   b6.body.frame_a.w[3] = j5.frame_b.w[3];
//   b6.body.frame_a.w[3] = shape.frame_a.w[3];
//   b6.body.frame_a.v[1] = b6.frameTranslation.frame_a.v[1];
//   b6.body.frame_a.v[1] = b6.frame_a.v[1];
//   b6.body.frame_a.v[1] = j5.frame_b.v[1];
//   b6.body.frame_a.v[1] = shape.frame_a.v[1];
//   b6.body.frame_a.v[2] = b6.frameTranslation.frame_a.v[2];
//   b6.body.frame_a.v[2] = b6.frame_a.v[2];
//   b6.body.frame_a.v[2] = j5.frame_b.v[2];
//   b6.body.frame_a.v[2] = shape.frame_a.v[2];
//   b6.body.frame_a.v[3] = b6.frameTranslation.frame_a.v[3];
//   b6.body.frame_a.v[3] = b6.frame_a.v[3];
//   b6.body.frame_a.v[3] = j5.frame_b.v[3];
//   b6.body.frame_a.v[3] = shape.frame_a.v[3];
//   b6.body.frame_a.S[1,1] = b6.frameTranslation.frame_a.S[1,1];
//   b6.body.frame_a.S[1,1] = b6.frame_a.S[1,1];
//   b6.body.frame_a.S[1,1] = j5.frame_b.S[1,1];
//   b6.body.frame_a.S[1,1] = shape.frame_a.S[1,1];
//   b6.body.frame_a.S[1,2] = b6.frameTranslation.frame_a.S[1,2];
//   b6.body.frame_a.S[1,2] = b6.frame_a.S[1,2];
//   b6.body.frame_a.S[1,2] = j5.frame_b.S[1,2];
//   b6.body.frame_a.S[1,2] = shape.frame_a.S[1,2];
//   b6.body.frame_a.S[1,3] = b6.frameTranslation.frame_a.S[1,3];
//   b6.body.frame_a.S[1,3] = b6.frame_a.S[1,3];
//   b6.body.frame_a.S[1,3] = j5.frame_b.S[1,3];
//   b6.body.frame_a.S[1,3] = shape.frame_a.S[1,3];
//   b6.body.frame_a.S[2,1] = b6.frameTranslation.frame_a.S[2,1];
//   b6.body.frame_a.S[2,1] = b6.frame_a.S[2,1];
//   b6.body.frame_a.S[2,1] = j5.frame_b.S[2,1];
//   b6.body.frame_a.S[2,1] = shape.frame_a.S[2,1];
//   b6.body.frame_a.S[2,2] = b6.frameTranslation.frame_a.S[2,2];
//   b6.body.frame_a.S[2,2] = b6.frame_a.S[2,2];
//   b6.body.frame_a.S[2,2] = j5.frame_b.S[2,2];
//   b6.body.frame_a.S[2,2] = shape.frame_a.S[2,2];
//   b6.body.frame_a.S[2,3] = b6.frameTranslation.frame_a.S[2,3];
//   b6.body.frame_a.S[2,3] = b6.frame_a.S[2,3];
//   b6.body.frame_a.S[2,3] = j5.frame_b.S[2,3];
//   b6.body.frame_a.S[2,3] = shape.frame_a.S[2,3];
//   b6.body.frame_a.S[3,1] = b6.frameTranslation.frame_a.S[3,1];
//   b6.body.frame_a.S[3,1] = b6.frame_a.S[3,1];
//   b6.body.frame_a.S[3,1] = j5.frame_b.S[3,1];
//   b6.body.frame_a.S[3,1] = shape.frame_a.S[3,1];
//   b6.body.frame_a.S[3,2] = b6.frameTranslation.frame_a.S[3,2];
//   b6.body.frame_a.S[3,2] = b6.frame_a.S[3,2];
//   b6.body.frame_a.S[3,2] = j5.frame_b.S[3,2];
//   b6.body.frame_a.S[3,2] = shape.frame_a.S[3,2];
//   b6.body.frame_a.S[3,3] = b6.frameTranslation.frame_a.S[3,3];
//   b6.body.frame_a.S[3,3] = b6.frame_a.S[3,3];
//   b6.body.frame_a.S[3,3] = j5.frame_b.S[3,3];
//   b6.body.frame_a.S[3,3] = shape.frame_a.S[3,3];
//   b6.body.frame_a.r0[1] = b6.frameTranslation.frame_a.r0[1];
//   b6.body.frame_a.r0[1] = b6.frame_a.r0[1];
//   b6.body.frame_a.r0[1] = j5.frame_b.r0[1];
//   b6.body.frame_a.r0[1] = shape.frame_a.r0[1];
//   b6.body.frame_a.r0[2] = b6.frameTranslation.frame_a.r0[2];
//   b6.body.frame_a.r0[2] = b6.frame_a.r0[2];
//   b6.body.frame_a.r0[2] = j5.frame_b.r0[2];
//   b6.body.frame_a.r0[2] = shape.frame_a.r0[2];
//   b6.body.frame_a.r0[3] = b6.frameTranslation.frame_a.r0[3];
//   b6.body.frame_a.r0[3] = b6.frame_a.r0[3];
//   b6.body.frame_a.r0[3] = j5.frame_b.r0[3];
//   b6.body.frame_a.r0[3] = shape.frame_a.r0[3];
//   b6.frame_b.t[1] + j4.frame_b.t[1] = 0.0;
//   b6.frame_b.t[2] + j4.frame_b.t[2] = 0.0;
//   b6.frame_b.t[3] + j4.frame_b.t[3] = 0.0;
//   b6.frame_b.f[1] + j4.frame_b.f[1] = 0.0;
//   b6.frame_b.f[2] + j4.frame_b.f[2] = 0.0;
//   b6.frame_b.f[3] + j4.frame_b.f[3] = 0.0;
//   b6.frameTranslation.frame_b.z[1] = b6.frame_b.z[1];
//   b6.frameTranslation.frame_b.z[1] = j4.frame_b.z[1];
//   b6.frameTranslation.frame_b.z[2] = b6.frame_b.z[2];
//   b6.frameTranslation.frame_b.z[2] = j4.frame_b.z[2];
//   b6.frameTranslation.frame_b.z[3] = b6.frame_b.z[3];
//   b6.frameTranslation.frame_b.z[3] = j4.frame_b.z[3];
//   b6.frameTranslation.frame_b.a[1] = b6.frame_b.a[1];
//   b6.frameTranslation.frame_b.a[1] = j4.frame_b.a[1];
//   b6.frameTranslation.frame_b.a[2] = b6.frame_b.a[2];
//   b6.frameTranslation.frame_b.a[2] = j4.frame_b.a[2];
//   b6.frameTranslation.frame_b.a[3] = b6.frame_b.a[3];
//   b6.frameTranslation.frame_b.a[3] = j4.frame_b.a[3];
//   b6.frameTranslation.frame_b.w[1] = b6.frame_b.w[1];
//   b6.frameTranslation.frame_b.w[1] = j4.frame_b.w[1];
//   b6.frameTranslation.frame_b.w[2] = b6.frame_b.w[2];
//   b6.frameTranslation.frame_b.w[2] = j4.frame_b.w[2];
//   b6.frameTranslation.frame_b.w[3] = b6.frame_b.w[3];
//   b6.frameTranslation.frame_b.w[3] = j4.frame_b.w[3];
//   b6.frameTranslation.frame_b.v[1] = b6.frame_b.v[1];
//   b6.frameTranslation.frame_b.v[1] = j4.frame_b.v[1];
//   b6.frameTranslation.frame_b.v[2] = b6.frame_b.v[2];
//   b6.frameTranslation.frame_b.v[2] = j4.frame_b.v[2];
//   b6.frameTranslation.frame_b.v[3] = b6.frame_b.v[3];
//   b6.frameTranslation.frame_b.v[3] = j4.frame_b.v[3];
//   b6.frameTranslation.frame_b.S[1,1] = b6.frame_b.S[1,1];
//   b6.frameTranslation.frame_b.S[1,1] = j4.frame_b.S[1,1];
//   b6.frameTranslation.frame_b.S[1,2] = b6.frame_b.S[1,2];
//   b6.frameTranslation.frame_b.S[1,2] = j4.frame_b.S[1,2];
//   b6.frameTranslation.frame_b.S[1,3] = b6.frame_b.S[1,3];
//   b6.frameTranslation.frame_b.S[1,3] = j4.frame_b.S[1,3];
//   b6.frameTranslation.frame_b.S[2,1] = b6.frame_b.S[2,1];
//   b6.frameTranslation.frame_b.S[2,1] = j4.frame_b.S[2,1];
//   b6.frameTranslation.frame_b.S[2,2] = b6.frame_b.S[2,2];
//   b6.frameTranslation.frame_b.S[2,2] = j4.frame_b.S[2,2];
//   b6.frameTranslation.frame_b.S[2,3] = b6.frame_b.S[2,3];
//   b6.frameTranslation.frame_b.S[2,3] = j4.frame_b.S[2,3];
//   b6.frameTranslation.frame_b.S[3,1] = b6.frame_b.S[3,1];
//   b6.frameTranslation.frame_b.S[3,1] = j4.frame_b.S[3,1];
//   b6.frameTranslation.frame_b.S[3,2] = b6.frame_b.S[3,2];
//   b6.frameTranslation.frame_b.S[3,2] = j4.frame_b.S[3,2];
//   b6.frameTranslation.frame_b.S[3,3] = b6.frame_b.S[3,3];
//   b6.frameTranslation.frame_b.S[3,3] = j4.frame_b.S[3,3];
//   b6.frameTranslation.frame_b.r0[1] = b6.frame_b.r0[1];
//   b6.frameTranslation.frame_b.r0[1] = j4.frame_b.r0[1];
//   b6.frameTranslation.frame_b.r0[2] = b6.frame_b.r0[2];
//   b6.frameTranslation.frame_b.r0[2] = j4.frame_b.r0[2];
//   b6.frameTranslation.frame_b.r0[3] = b6.frame_b.r0[3];
//   b6.frameTranslation.frame_b.r0[3] = j4.frame_b.r0[3];
//   b5.frame_b.t[1] + (j3.frame_a.t[1] + b4.frame_a.t[1]) = 0.0;
//   b5.frame_b.t[2] + (j3.frame_a.t[2] + b4.frame_a.t[2]) = 0.0;
//   b5.frame_b.t[3] + (j3.frame_a.t[3] + b4.frame_a.t[3]) = 0.0;
//   b5.frame_b.f[1] + (j3.frame_a.f[1] + b4.frame_a.f[1]) = 0.0;
//   b5.frame_b.f[2] + (j3.frame_a.f[2] + b4.frame_a.f[2]) = 0.0;
//   b5.frame_b.f[3] + (j3.frame_a.f[3] + b4.frame_a.f[3]) = 0.0;
//   b4.body.body.frame_a.z[1] = b4.body.frameTranslation.frame_a.z[1];
//   b4.body.body.frame_a.z[1] = b4.body.frame_a.z[1];
//   b4.body.body.frame_a.z[1] = b4.frame_a.z[1];
//   b4.body.body.frame_a.z[1] = b4.vis.frame_a.z[1];
//   b4.body.body.frame_a.z[1] = b5.body.frameTranslation.frame_b.z[1];
//   b4.body.body.frame_a.z[1] = b5.body.frame_b.z[1];
//   b4.body.body.frame_a.z[1] = b5.frame_b.z[1];
//   b4.body.body.frame_a.z[1] = j3.frame_a.z[1];
//   b4.body.body.frame_a.z[2] = b4.body.frameTranslation.frame_a.z[2];
//   b4.body.body.frame_a.z[2] = b4.body.frame_a.z[2];
//   b4.body.body.frame_a.z[2] = b4.frame_a.z[2];
//   b4.body.body.frame_a.z[2] = b4.vis.frame_a.z[2];
//   b4.body.body.frame_a.z[2] = b5.body.frameTranslation.frame_b.z[2];
//   b4.body.body.frame_a.z[2] = b5.body.frame_b.z[2];
//   b4.body.body.frame_a.z[2] = b5.frame_b.z[2];
//   b4.body.body.frame_a.z[2] = j3.frame_a.z[2];
//   b4.body.body.frame_a.z[3] = b4.body.frameTranslation.frame_a.z[3];
//   b4.body.body.frame_a.z[3] = b4.body.frame_a.z[3];
//   b4.body.body.frame_a.z[3] = b4.frame_a.z[3];
//   b4.body.body.frame_a.z[3] = b4.vis.frame_a.z[3];
//   b4.body.body.frame_a.z[3] = b5.body.frameTranslation.frame_b.z[3];
//   b4.body.body.frame_a.z[3] = b5.body.frame_b.z[3];
//   b4.body.body.frame_a.z[3] = b5.frame_b.z[3];
//   b4.body.body.frame_a.z[3] = j3.frame_a.z[3];
//   b4.body.body.frame_a.a[1] = b4.body.frameTranslation.frame_a.a[1];
//   b4.body.body.frame_a.a[1] = b4.body.frame_a.a[1];
//   b4.body.body.frame_a.a[1] = b4.frame_a.a[1];
//   b4.body.body.frame_a.a[1] = b4.vis.frame_a.a[1];
//   b4.body.body.frame_a.a[1] = b5.body.frameTranslation.frame_b.a[1];
//   b4.body.body.frame_a.a[1] = b5.body.frame_b.a[1];
//   b4.body.body.frame_a.a[1] = b5.frame_b.a[1];
//   b4.body.body.frame_a.a[1] = j3.frame_a.a[1];
//   b4.body.body.frame_a.a[2] = b4.body.frameTranslation.frame_a.a[2];
//   b4.body.body.frame_a.a[2] = b4.body.frame_a.a[2];
//   b4.body.body.frame_a.a[2] = b4.frame_a.a[2];
//   b4.body.body.frame_a.a[2] = b4.vis.frame_a.a[2];
//   b4.body.body.frame_a.a[2] = b5.body.frameTranslation.frame_b.a[2];
//   b4.body.body.frame_a.a[2] = b5.body.frame_b.a[2];
//   b4.body.body.frame_a.a[2] = b5.frame_b.a[2];
//   b4.body.body.frame_a.a[2] = j3.frame_a.a[2];
//   b4.body.body.frame_a.a[3] = b4.body.frameTranslation.frame_a.a[3];
//   b4.body.body.frame_a.a[3] = b4.body.frame_a.a[3];
//   b4.body.body.frame_a.a[3] = b4.frame_a.a[3];
//   b4.body.body.frame_a.a[3] = b4.vis.frame_a.a[3];
//   b4.body.body.frame_a.a[3] = b5.body.frameTranslation.frame_b.a[3];
//   b4.body.body.frame_a.a[3] = b5.body.frame_b.a[3];
//   b4.body.body.frame_a.a[3] = b5.frame_b.a[3];
//   b4.body.body.frame_a.a[3] = j3.frame_a.a[3];
//   b4.body.body.frame_a.w[1] = b4.body.frameTranslation.frame_a.w[1];
//   b4.body.body.frame_a.w[1] = b4.body.frame_a.w[1];
//   b4.body.body.frame_a.w[1] = b4.frame_a.w[1];
//   b4.body.body.frame_a.w[1] = b4.vis.frame_a.w[1];
//   b4.body.body.frame_a.w[1] = b5.body.frameTranslation.frame_b.w[1];
//   b4.body.body.frame_a.w[1] = b5.body.frame_b.w[1];
//   b4.body.body.frame_a.w[1] = b5.frame_b.w[1];
//   b4.body.body.frame_a.w[1] = j3.frame_a.w[1];
//   b4.body.body.frame_a.w[2] = b4.body.frameTranslation.frame_a.w[2];
//   b4.body.body.frame_a.w[2] = b4.body.frame_a.w[2];
//   b4.body.body.frame_a.w[2] = b4.frame_a.w[2];
//   b4.body.body.frame_a.w[2] = b4.vis.frame_a.w[2];
//   b4.body.body.frame_a.w[2] = b5.body.frameTranslation.frame_b.w[2];
//   b4.body.body.frame_a.w[2] = b5.body.frame_b.w[2];
//   b4.body.body.frame_a.w[2] = b5.frame_b.w[2];
//   b4.body.body.frame_a.w[2] = j3.frame_a.w[2];
//   b4.body.body.frame_a.w[3] = b4.body.frameTranslation.frame_a.w[3];
//   b4.body.body.frame_a.w[3] = b4.body.frame_a.w[3];
//   b4.body.body.frame_a.w[3] = b4.frame_a.w[3];
//   b4.body.body.frame_a.w[3] = b4.vis.frame_a.w[3];
//   b4.body.body.frame_a.w[3] = b5.body.frameTranslation.frame_b.w[3];
//   b4.body.body.frame_a.w[3] = b5.body.frame_b.w[3];
//   b4.body.body.frame_a.w[3] = b5.frame_b.w[3];
//   b4.body.body.frame_a.w[3] = j3.frame_a.w[3];
//   b4.body.body.frame_a.v[1] = b4.body.frameTranslation.frame_a.v[1];
//   b4.body.body.frame_a.v[1] = b4.body.frame_a.v[1];
//   b4.body.body.frame_a.v[1] = b4.frame_a.v[1];
//   b4.body.body.frame_a.v[1] = b4.vis.frame_a.v[1];
//   b4.body.body.frame_a.v[1] = b5.body.frameTranslation.frame_b.v[1];
//   b4.body.body.frame_a.v[1] = b5.body.frame_b.v[1];
//   b4.body.body.frame_a.v[1] = b5.frame_b.v[1];
//   b4.body.body.frame_a.v[1] = j3.frame_a.v[1];
//   b4.body.body.frame_a.v[2] = b4.body.frameTranslation.frame_a.v[2];
//   b4.body.body.frame_a.v[2] = b4.body.frame_a.v[2];
//   b4.body.body.frame_a.v[2] = b4.frame_a.v[2];
//   b4.body.body.frame_a.v[2] = b4.vis.frame_a.v[2];
//   b4.body.body.frame_a.v[2] = b5.body.frameTranslation.frame_b.v[2];
//   b4.body.body.frame_a.v[2] = b5.body.frame_b.v[2];
//   b4.body.body.frame_a.v[2] = b5.frame_b.v[2];
//   b4.body.body.frame_a.v[2] = j3.frame_a.v[2];
//   b4.body.body.frame_a.v[3] = b4.body.frameTranslation.frame_a.v[3];
//   b4.body.body.frame_a.v[3] = b4.body.frame_a.v[3];
//   b4.body.body.frame_a.v[3] = b4.frame_a.v[3];
//   b4.body.body.frame_a.v[3] = b4.vis.frame_a.v[3];
//   b4.body.body.frame_a.v[3] = b5.body.frameTranslation.frame_b.v[3];
//   b4.body.body.frame_a.v[3] = b5.body.frame_b.v[3];
//   b4.body.body.frame_a.v[3] = b5.frame_b.v[3];
//   b4.body.body.frame_a.v[3] = j3.frame_a.v[3];
//   b4.body.body.frame_a.S[1,1] = b4.body.frameTranslation.frame_a.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b4.body.frame_a.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b4.frame_a.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b4.vis.frame_a.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b5.body.frameTranslation.frame_b.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b5.body.frame_b.S[1,1];
//   b4.body.body.frame_a.S[1,1] = b5.frame_b.S[1,1];
//   b4.body.body.frame_a.S[1,1] = j3.frame_a.S[1,1];
//   b4.body.body.frame_a.S[1,2] = b4.body.frameTranslation.frame_a.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b4.body.frame_a.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b4.frame_a.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b4.vis.frame_a.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b5.body.frameTranslation.frame_b.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b5.body.frame_b.S[1,2];
//   b4.body.body.frame_a.S[1,2] = b5.frame_b.S[1,2];
//   b4.body.body.frame_a.S[1,2] = j3.frame_a.S[1,2];
//   b4.body.body.frame_a.S[1,3] = b4.body.frameTranslation.frame_a.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b4.body.frame_a.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b4.frame_a.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b4.vis.frame_a.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b5.body.frameTranslation.frame_b.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b5.body.frame_b.S[1,3];
//   b4.body.body.frame_a.S[1,3] = b5.frame_b.S[1,3];
//   b4.body.body.frame_a.S[1,3] = j3.frame_a.S[1,3];
//   b4.body.body.frame_a.S[2,1] = b4.body.frameTranslation.frame_a.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b4.body.frame_a.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b4.frame_a.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b4.vis.frame_a.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b5.body.frameTranslation.frame_b.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b5.body.frame_b.S[2,1];
//   b4.body.body.frame_a.S[2,1] = b5.frame_b.S[2,1];
//   b4.body.body.frame_a.S[2,1] = j3.frame_a.S[2,1];
//   b4.body.body.frame_a.S[2,2] = b4.body.frameTranslation.frame_a.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b4.body.frame_a.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b4.frame_a.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b4.vis.frame_a.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b5.body.frameTranslation.frame_b.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b5.body.frame_b.S[2,2];
//   b4.body.body.frame_a.S[2,2] = b5.frame_b.S[2,2];
//   b4.body.body.frame_a.S[2,2] = j3.frame_a.S[2,2];
//   b4.body.body.frame_a.S[2,3] = b4.body.frameTranslation.frame_a.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b4.body.frame_a.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b4.frame_a.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b4.vis.frame_a.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b5.body.frameTranslation.frame_b.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b5.body.frame_b.S[2,3];
//   b4.body.body.frame_a.S[2,3] = b5.frame_b.S[2,3];
//   b4.body.body.frame_a.S[2,3] = j3.frame_a.S[2,3];
//   b4.body.body.frame_a.S[3,1] = b4.body.frameTranslation.frame_a.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b4.body.frame_a.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b4.frame_a.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b4.vis.frame_a.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b5.body.frameTranslation.frame_b.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b5.body.frame_b.S[3,1];
//   b4.body.body.frame_a.S[3,1] = b5.frame_b.S[3,1];
//   b4.body.body.frame_a.S[3,1] = j3.frame_a.S[3,1];
//   b4.body.body.frame_a.S[3,2] = b4.body.frameTranslation.frame_a.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b4.body.frame_a.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b4.frame_a.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b4.vis.frame_a.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b5.body.frameTranslation.frame_b.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b5.body.frame_b.S[3,2];
//   b4.body.body.frame_a.S[3,2] = b5.frame_b.S[3,2];
//   b4.body.body.frame_a.S[3,2] = j3.frame_a.S[3,2];
//   b4.body.body.frame_a.S[3,3] = b4.body.frameTranslation.frame_a.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b4.body.frame_a.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b4.frame_a.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b4.vis.frame_a.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b5.body.frameTranslation.frame_b.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b5.body.frame_b.S[3,3];
//   b4.body.body.frame_a.S[3,3] = b5.frame_b.S[3,3];
//   b4.body.body.frame_a.S[3,3] = j3.frame_a.S[3,3];
//   b4.body.body.frame_a.r0[1] = b4.body.frameTranslation.frame_a.r0[1];
//   b4.body.body.frame_a.r0[1] = b4.body.frame_a.r0[1];
//   b4.body.body.frame_a.r0[1] = b4.frame_a.r0[1];
//   b4.body.body.frame_a.r0[1] = b4.vis.frame_a.r0[1];
//   b4.body.body.frame_a.r0[1] = b5.body.frameTranslation.frame_b.r0[1];
//   b4.body.body.frame_a.r0[1] = b5.body.frame_b.r0[1];
//   b4.body.body.frame_a.r0[1] = b5.frame_b.r0[1];
//   b4.body.body.frame_a.r0[1] = j3.frame_a.r0[1];
//   b4.body.body.frame_a.r0[2] = b4.body.frameTranslation.frame_a.r0[2];
//   b4.body.body.frame_a.r0[2] = b4.body.frame_a.r0[2];
//   b4.body.body.frame_a.r0[2] = b4.frame_a.r0[2];
//   b4.body.body.frame_a.r0[2] = b4.vis.frame_a.r0[2];
//   b4.body.body.frame_a.r0[2] = b5.body.frameTranslation.frame_b.r0[2];
//   b4.body.body.frame_a.r0[2] = b5.body.frame_b.r0[2];
//   b4.body.body.frame_a.r0[2] = b5.frame_b.r0[2];
//   b4.body.body.frame_a.r0[2] = j3.frame_a.r0[2];
//   b4.body.body.frame_a.r0[3] = b4.body.frameTranslation.frame_a.r0[3];
//   b4.body.body.frame_a.r0[3] = b4.body.frame_a.r0[3];
//   b4.body.body.frame_a.r0[3] = b4.frame_a.r0[3];
//   b4.body.body.frame_a.r0[3] = b4.vis.frame_a.r0[3];
//   b4.body.body.frame_a.r0[3] = b5.body.frameTranslation.frame_b.r0[3];
//   b4.body.body.frame_a.r0[3] = b5.body.frame_b.r0[3];
//   b4.body.body.frame_a.r0[3] = b5.frame_b.r0[3];
//   b4.body.body.frame_a.r0[3] = j3.frame_a.r0[3];
//   j6.frame_b.t[1] + b7.frame_a.t[1] = 0.0;
//   j6.frame_b.t[2] + b7.frame_a.t[2] = 0.0;
//   j6.frame_b.t[3] + b7.frame_a.t[3] = 0.0;
//   j6.frame_b.f[1] + b7.frame_a.f[1] = 0.0;
//   j6.frame_b.f[2] + b7.frame_a.f[2] = 0.0;
//   j6.frame_b.f[3] + b7.frame_a.f[3] = 0.0;
//   b7.body.body.frame_a.z[1] = b7.body.frameTranslation.frame_a.z[1];
//   b7.body.body.frame_a.z[1] = b7.body.frame_a.z[1];
//   b7.body.body.frame_a.z[1] = b7.frame_a.z[1];
//   b7.body.body.frame_a.z[1] = b7.vis.frame_a.z[1];
//   b7.body.body.frame_a.z[1] = j6.frame_b.z[1];
//   b7.body.body.frame_a.z[2] = b7.body.frameTranslation.frame_a.z[2];
//   b7.body.body.frame_a.z[2] = b7.body.frame_a.z[2];
//   b7.body.body.frame_a.z[2] = b7.frame_a.z[2];
//   b7.body.body.frame_a.z[2] = b7.vis.frame_a.z[2];
//   b7.body.body.frame_a.z[2] = j6.frame_b.z[2];
//   b7.body.body.frame_a.z[3] = b7.body.frameTranslation.frame_a.z[3];
//   b7.body.body.frame_a.z[3] = b7.body.frame_a.z[3];
//   b7.body.body.frame_a.z[3] = b7.frame_a.z[3];
//   b7.body.body.frame_a.z[3] = b7.vis.frame_a.z[3];
//   b7.body.body.frame_a.z[3] = j6.frame_b.z[3];
//   b7.body.body.frame_a.a[1] = b7.body.frameTranslation.frame_a.a[1];
//   b7.body.body.frame_a.a[1] = b7.body.frame_a.a[1];
//   b7.body.body.frame_a.a[1] = b7.frame_a.a[1];
//   b7.body.body.frame_a.a[1] = b7.vis.frame_a.a[1];
//   b7.body.body.frame_a.a[1] = j6.frame_b.a[1];
//   b7.body.body.frame_a.a[2] = b7.body.frameTranslation.frame_a.a[2];
//   b7.body.body.frame_a.a[2] = b7.body.frame_a.a[2];
//   b7.body.body.frame_a.a[2] = b7.frame_a.a[2];
//   b7.body.body.frame_a.a[2] = b7.vis.frame_a.a[2];
//   b7.body.body.frame_a.a[2] = j6.frame_b.a[2];
//   b7.body.body.frame_a.a[3] = b7.body.frameTranslation.frame_a.a[3];
//   b7.body.body.frame_a.a[3] = b7.body.frame_a.a[3];
//   b7.body.body.frame_a.a[3] = b7.frame_a.a[3];
//   b7.body.body.frame_a.a[3] = b7.vis.frame_a.a[3];
//   b7.body.body.frame_a.a[3] = j6.frame_b.a[3];
//   b7.body.body.frame_a.w[1] = b7.body.frameTranslation.frame_a.w[1];
//   b7.body.body.frame_a.w[1] = b7.body.frame_a.w[1];
//   b7.body.body.frame_a.w[1] = b7.frame_a.w[1];
//   b7.body.body.frame_a.w[1] = b7.vis.frame_a.w[1];
//   b7.body.body.frame_a.w[1] = j6.frame_b.w[1];
//   b7.body.body.frame_a.w[2] = b7.body.frameTranslation.frame_a.w[2];
//   b7.body.body.frame_a.w[2] = b7.body.frame_a.w[2];
//   b7.body.body.frame_a.w[2] = b7.frame_a.w[2];
//   b7.body.body.frame_a.w[2] = b7.vis.frame_a.w[2];
//   b7.body.body.frame_a.w[2] = j6.frame_b.w[2];
//   b7.body.body.frame_a.w[3] = b7.body.frameTranslation.frame_a.w[3];
//   b7.body.body.frame_a.w[3] = b7.body.frame_a.w[3];
//   b7.body.body.frame_a.w[3] = b7.frame_a.w[3];
//   b7.body.body.frame_a.w[3] = b7.vis.frame_a.w[3];
//   b7.body.body.frame_a.w[3] = j6.frame_b.w[3];
//   b7.body.body.frame_a.v[1] = b7.body.frameTranslation.frame_a.v[1];
//   b7.body.body.frame_a.v[1] = b7.body.frame_a.v[1];
//   b7.body.body.frame_a.v[1] = b7.frame_a.v[1];
//   b7.body.body.frame_a.v[1] = b7.vis.frame_a.v[1];
//   b7.body.body.frame_a.v[1] = j6.frame_b.v[1];
//   b7.body.body.frame_a.v[2] = b7.body.frameTranslation.frame_a.v[2];
//   b7.body.body.frame_a.v[2] = b7.body.frame_a.v[2];
//   b7.body.body.frame_a.v[2] = b7.frame_a.v[2];
//   b7.body.body.frame_a.v[2] = b7.vis.frame_a.v[2];
//   b7.body.body.frame_a.v[2] = j6.frame_b.v[2];
//   b7.body.body.frame_a.v[3] = b7.body.frameTranslation.frame_a.v[3];
//   b7.body.body.frame_a.v[3] = b7.body.frame_a.v[3];
//   b7.body.body.frame_a.v[3] = b7.frame_a.v[3];
//   b7.body.body.frame_a.v[3] = b7.vis.frame_a.v[3];
//   b7.body.body.frame_a.v[3] = j6.frame_b.v[3];
//   b7.body.body.frame_a.S[1,1] = b7.body.frameTranslation.frame_a.S[1,1];
//   b7.body.body.frame_a.S[1,1] = b7.body.frame_a.S[1,1];
//   b7.body.body.frame_a.S[1,1] = b7.frame_a.S[1,1];
//   b7.body.body.frame_a.S[1,1] = b7.vis.frame_a.S[1,1];
//   b7.body.body.frame_a.S[1,1] = j6.frame_b.S[1,1];
//   b7.body.body.frame_a.S[1,2] = b7.body.frameTranslation.frame_a.S[1,2];
//   b7.body.body.frame_a.S[1,2] = b7.body.frame_a.S[1,2];
//   b7.body.body.frame_a.S[1,2] = b7.frame_a.S[1,2];
//   b7.body.body.frame_a.S[1,2] = b7.vis.frame_a.S[1,2];
//   b7.body.body.frame_a.S[1,2] = j6.frame_b.S[1,2];
//   b7.body.body.frame_a.S[1,3] = b7.body.frameTranslation.frame_a.S[1,3];
//   b7.body.body.frame_a.S[1,3] = b7.body.frame_a.S[1,3];
//   b7.body.body.frame_a.S[1,3] = b7.frame_a.S[1,3];
//   b7.body.body.frame_a.S[1,3] = b7.vis.frame_a.S[1,3];
//   b7.body.body.frame_a.S[1,3] = j6.frame_b.S[1,3];
//   b7.body.body.frame_a.S[2,1] = b7.body.frameTranslation.frame_a.S[2,1];
//   b7.body.body.frame_a.S[2,1] = b7.body.frame_a.S[2,1];
//   b7.body.body.frame_a.S[2,1] = b7.frame_a.S[2,1];
//   b7.body.body.frame_a.S[2,1] = b7.vis.frame_a.S[2,1];
//   b7.body.body.frame_a.S[2,1] = j6.frame_b.S[2,1];
//   b7.body.body.frame_a.S[2,2] = b7.body.frameTranslation.frame_a.S[2,2];
//   b7.body.body.frame_a.S[2,2] = b7.body.frame_a.S[2,2];
//   b7.body.body.frame_a.S[2,2] = b7.frame_a.S[2,2];
//   b7.body.body.frame_a.S[2,2] = b7.vis.frame_a.S[2,2];
//   b7.body.body.frame_a.S[2,2] = j6.frame_b.S[2,2];
//   b7.body.body.frame_a.S[2,3] = b7.body.frameTranslation.frame_a.S[2,3];
//   b7.body.body.frame_a.S[2,3] = b7.body.frame_a.S[2,3];
//   b7.body.body.frame_a.S[2,3] = b7.frame_a.S[2,3];
//   b7.body.body.frame_a.S[2,3] = b7.vis.frame_a.S[2,3];
//   b7.body.body.frame_a.S[2,3] = j6.frame_b.S[2,3];
//   b7.body.body.frame_a.S[3,1] = b7.body.frameTranslation.frame_a.S[3,1];
//   b7.body.body.frame_a.S[3,1] = b7.body.frame_a.S[3,1];
//   b7.body.body.frame_a.S[3,1] = b7.frame_a.S[3,1];
//   b7.body.body.frame_a.S[3,1] = b7.vis.frame_a.S[3,1];
//   b7.body.body.frame_a.S[3,1] = j6.frame_b.S[3,1];
//   b7.body.body.frame_a.S[3,2] = b7.body.frameTranslation.frame_a.S[3,2];
//   b7.body.body.frame_a.S[3,2] = b7.body.frame_a.S[3,2];
//   b7.body.body.frame_a.S[3,2] = b7.frame_a.S[3,2];
//   b7.body.body.frame_a.S[3,2] = b7.vis.frame_a.S[3,2];
//   b7.body.body.frame_a.S[3,2] = j6.frame_b.S[3,2];
//   b7.body.body.frame_a.S[3,3] = b7.body.frameTranslation.frame_a.S[3,3];
//   b7.body.body.frame_a.S[3,3] = b7.body.frame_a.S[3,3];
//   b7.body.body.frame_a.S[3,3] = b7.frame_a.S[3,3];
//   b7.body.body.frame_a.S[3,3] = b7.vis.frame_a.S[3,3];
//   b7.body.body.frame_a.S[3,3] = j6.frame_b.S[3,3];
//   b7.body.body.frame_a.r0[1] = b7.body.frameTranslation.frame_a.r0[1];
//   b7.body.body.frame_a.r0[1] = b7.body.frame_a.r0[1];
//   b7.body.body.frame_a.r0[1] = b7.frame_a.r0[1];
//   b7.body.body.frame_a.r0[1] = b7.vis.frame_a.r0[1];
//   b7.body.body.frame_a.r0[1] = j6.frame_b.r0[1];
//   b7.body.body.frame_a.r0[2] = b7.body.frameTranslation.frame_a.r0[2];
//   b7.body.body.frame_a.r0[2] = b7.body.frame_a.r0[2];
//   b7.body.body.frame_a.r0[2] = b7.frame_a.r0[2];
//   b7.body.body.frame_a.r0[2] = b7.vis.frame_a.r0[2];
//   b7.body.body.frame_a.r0[2] = j6.frame_b.r0[2];
//   b7.body.body.frame_a.r0[3] = b7.body.frameTranslation.frame_a.r0[3];
//   b7.body.body.frame_a.r0[3] = b7.body.frame_a.r0[3];
//   b7.body.body.frame_a.r0[3] = b7.frame_a.r0[3];
//   b7.body.body.frame_a.r0[3] = b7.vis.frame_a.r0[3];
//   b7.body.body.frame_a.r0[3] = j6.frame_b.r0[3];
//   b7.frame_b.t[1] + j5.frame_a.t[1] = 0.0;
//   b7.frame_b.t[2] + j5.frame_a.t[2] = 0.0;
//   b7.frame_b.t[3] + j5.frame_a.t[3] = 0.0;
//   b7.frame_b.f[1] + j5.frame_a.f[1] = 0.0;
//   b7.frame_b.f[2] + j5.frame_a.f[2] = 0.0;
//   b7.frame_b.f[3] + j5.frame_a.f[3] = 0.0;
//   b7.body.frameTranslation.frame_b.z[1] = b7.body.frame_b.z[1];
//   b7.body.frameTranslation.frame_b.z[1] = b7.frame_b.z[1];
//   b7.body.frameTranslation.frame_b.z[1] = j5.frame_a.z[1];
//   b7.body.frameTranslation.frame_b.z[2] = b7.body.frame_b.z[2];
//   b7.body.frameTranslation.frame_b.z[2] = b7.frame_b.z[2];
//   b7.body.frameTranslation.frame_b.z[2] = j5.frame_a.z[2];
//   b7.body.frameTranslation.frame_b.z[3] = b7.body.frame_b.z[3];
//   b7.body.frameTranslation.frame_b.z[3] = b7.frame_b.z[3];
//   b7.body.frameTranslation.frame_b.z[3] = j5.frame_a.z[3];
//   b7.body.frameTranslation.frame_b.a[1] = b7.body.frame_b.a[1];
//   b7.body.frameTranslation.frame_b.a[1] = b7.frame_b.a[1];
//   b7.body.frameTranslation.frame_b.a[1] = j5.frame_a.a[1];
//   b7.body.frameTranslation.frame_b.a[2] = b7.body.frame_b.a[2];
//   b7.body.frameTranslation.frame_b.a[2] = b7.frame_b.a[2];
//   b7.body.frameTranslation.frame_b.a[2] = j5.frame_a.a[2];
//   b7.body.frameTranslation.frame_b.a[3] = b7.body.frame_b.a[3];
//   b7.body.frameTranslation.frame_b.a[3] = b7.frame_b.a[3];
//   b7.body.frameTranslation.frame_b.a[3] = j5.frame_a.a[3];
//   b7.body.frameTranslation.frame_b.w[1] = b7.body.frame_b.w[1];
//   b7.body.frameTranslation.frame_b.w[1] = b7.frame_b.w[1];
//   b7.body.frameTranslation.frame_b.w[1] = j5.frame_a.w[1];
//   b7.body.frameTranslation.frame_b.w[2] = b7.body.frame_b.w[2];
//   b7.body.frameTranslation.frame_b.w[2] = b7.frame_b.w[2];
//   b7.body.frameTranslation.frame_b.w[2] = j5.frame_a.w[2];
//   b7.body.frameTranslation.frame_b.w[3] = b7.body.frame_b.w[3];
//   b7.body.frameTranslation.frame_b.w[3] = b7.frame_b.w[3];
//   b7.body.frameTranslation.frame_b.w[3] = j5.frame_a.w[3];
//   b7.body.frameTranslation.frame_b.v[1] = b7.body.frame_b.v[1];
//   b7.body.frameTranslation.frame_b.v[1] = b7.frame_b.v[1];
//   b7.body.frameTranslation.frame_b.v[1] = j5.frame_a.v[1];
//   b7.body.frameTranslation.frame_b.v[2] = b7.body.frame_b.v[2];
//   b7.body.frameTranslation.frame_b.v[2] = b7.frame_b.v[2];
//   b7.body.frameTranslation.frame_b.v[2] = j5.frame_a.v[2];
//   b7.body.frameTranslation.frame_b.v[3] = b7.body.frame_b.v[3];
//   b7.body.frameTranslation.frame_b.v[3] = b7.frame_b.v[3];
//   b7.body.frameTranslation.frame_b.v[3] = j5.frame_a.v[3];
//   b7.body.frameTranslation.frame_b.S[1,1] = b7.body.frame_b.S[1,1];
//   b7.body.frameTranslation.frame_b.S[1,1] = b7.frame_b.S[1,1];
//   b7.body.frameTranslation.frame_b.S[1,1] = j5.frame_a.S[1,1];
//   b7.body.frameTranslation.frame_b.S[1,2] = b7.body.frame_b.S[1,2];
//   b7.body.frameTranslation.frame_b.S[1,2] = b7.frame_b.S[1,2];
//   b7.body.frameTranslation.frame_b.S[1,2] = j5.frame_a.S[1,2];
//   b7.body.frameTranslation.frame_b.S[1,3] = b7.body.frame_b.S[1,3];
//   b7.body.frameTranslation.frame_b.S[1,3] = b7.frame_b.S[1,3];
//   b7.body.frameTranslation.frame_b.S[1,3] = j5.frame_a.S[1,3];
//   b7.body.frameTranslation.frame_b.S[2,1] = b7.body.frame_b.S[2,1];
//   b7.body.frameTranslation.frame_b.S[2,1] = b7.frame_b.S[2,1];
//   b7.body.frameTranslation.frame_b.S[2,1] = j5.frame_a.S[2,1];
//   b7.body.frameTranslation.frame_b.S[2,2] = b7.body.frame_b.S[2,2];
//   b7.body.frameTranslation.frame_b.S[2,2] = b7.frame_b.S[2,2];
//   b7.body.frameTranslation.frame_b.S[2,2] = j5.frame_a.S[2,2];
//   b7.body.frameTranslation.frame_b.S[2,3] = b7.body.frame_b.S[2,3];
//   b7.body.frameTranslation.frame_b.S[2,3] = b7.frame_b.S[2,3];
//   b7.body.frameTranslation.frame_b.S[2,3] = j5.frame_a.S[2,3];
//   b7.body.frameTranslation.frame_b.S[3,1] = b7.body.frame_b.S[3,1];
//   b7.body.frameTranslation.frame_b.S[3,1] = b7.frame_b.S[3,1];
//   b7.body.frameTranslation.frame_b.S[3,1] = j5.frame_a.S[3,1];
//   b7.body.frameTranslation.frame_b.S[3,2] = b7.body.frame_b.S[3,2];
//   b7.body.frameTranslation.frame_b.S[3,2] = b7.frame_b.S[3,2];
//   b7.body.frameTranslation.frame_b.S[3,2] = j5.frame_a.S[3,2];
//   b7.body.frameTranslation.frame_b.S[3,3] = b7.body.frame_b.S[3,3];
//   b7.body.frameTranslation.frame_b.S[3,3] = b7.frame_b.S[3,3];
//   b7.body.frameTranslation.frame_b.S[3,3] = j5.frame_a.S[3,3];
//   b7.body.frameTranslation.frame_b.r0[1] = b7.body.frame_b.r0[1];
//   b7.body.frameTranslation.frame_b.r0[1] = b7.frame_b.r0[1];
//   b7.body.frameTranslation.frame_b.r0[1] = j5.frame_a.r0[1];
//   b7.body.frameTranslation.frame_b.r0[2] = b7.body.frame_b.r0[2];
//   b7.body.frameTranslation.frame_b.r0[2] = b7.frame_b.r0[2];
//   b7.body.frameTranslation.frame_b.r0[2] = j5.frame_a.r0[2];
//   b7.body.frameTranslation.frame_b.r0[3] = b7.body.frame_b.r0[3];
//   b7.body.frameTranslation.frame_b.r0[3] = b7.frame_b.r0[3];
//   b7.body.frameTranslation.frame_b.r0[3] = j5.frame_a.r0[3];
//   b3.frame_b.t[1] + j2.frame_b.t[1] = 0.0;
//   b3.frame_b.t[2] + j2.frame_b.t[2] = 0.0;
//   b3.frame_b.t[3] + j2.frame_b.t[3] = 0.0;
//   b3.frame_b.f[1] + j2.frame_b.f[1] = 0.0;
//   b3.frame_b.f[2] + j2.frame_b.f[2] = 0.0;
//   b3.frame_b.f[3] + j2.frame_b.f[3] = 0.0;
//   b3.body.frameTranslation.frame_b.z[1] = b3.body.frame_b.z[1];
//   b3.body.frameTranslation.frame_b.z[1] = b3.frame_b.z[1];
//   b3.body.frameTranslation.frame_b.z[1] = j2.frame_b.z[1];
//   b3.body.frameTranslation.frame_b.z[2] = b3.body.frame_b.z[2];
//   b3.body.frameTranslation.frame_b.z[2] = b3.frame_b.z[2];
//   b3.body.frameTranslation.frame_b.z[2] = j2.frame_b.z[2];
//   b3.body.frameTranslation.frame_b.z[3] = b3.body.frame_b.z[3];
//   b3.body.frameTranslation.frame_b.z[3] = b3.frame_b.z[3];
//   b3.body.frameTranslation.frame_b.z[3] = j2.frame_b.z[3];
//   b3.body.frameTranslation.frame_b.a[1] = b3.body.frame_b.a[1];
//   b3.body.frameTranslation.frame_b.a[1] = b3.frame_b.a[1];
//   b3.body.frameTranslation.frame_b.a[1] = j2.frame_b.a[1];
//   b3.body.frameTranslation.frame_b.a[2] = b3.body.frame_b.a[2];
//   b3.body.frameTranslation.frame_b.a[2] = b3.frame_b.a[2];
//   b3.body.frameTranslation.frame_b.a[2] = j2.frame_b.a[2];
//   b3.body.frameTranslation.frame_b.a[3] = b3.body.frame_b.a[3];
//   b3.body.frameTranslation.frame_b.a[3] = b3.frame_b.a[3];
//   b3.body.frameTranslation.frame_b.a[3] = j2.frame_b.a[3];
//   b3.body.frameTranslation.frame_b.w[1] = b3.body.frame_b.w[1];
//   b3.body.frameTranslation.frame_b.w[1] = b3.frame_b.w[1];
//   b3.body.frameTranslation.frame_b.w[1] = j2.frame_b.w[1];
//   b3.body.frameTranslation.frame_b.w[2] = b3.body.frame_b.w[2];
//   b3.body.frameTranslation.frame_b.w[2] = b3.frame_b.w[2];
//   b3.body.frameTranslation.frame_b.w[2] = j2.frame_b.w[2];
//   b3.body.frameTranslation.frame_b.w[3] = b3.body.frame_b.w[3];
//   b3.body.frameTranslation.frame_b.w[3] = b3.frame_b.w[3];
//   b3.body.frameTranslation.frame_b.w[3] = j2.frame_b.w[3];
//   b3.body.frameTranslation.frame_b.v[1] = b3.body.frame_b.v[1];
//   b3.body.frameTranslation.frame_b.v[1] = b3.frame_b.v[1];
//   b3.body.frameTranslation.frame_b.v[1] = j2.frame_b.v[1];
//   b3.body.frameTranslation.frame_b.v[2] = b3.body.frame_b.v[2];
//   b3.body.frameTranslation.frame_b.v[2] = b3.frame_b.v[2];
//   b3.body.frameTranslation.frame_b.v[2] = j2.frame_b.v[2];
//   b3.body.frameTranslation.frame_b.v[3] = b3.body.frame_b.v[3];
//   b3.body.frameTranslation.frame_b.v[3] = b3.frame_b.v[3];
//   b3.body.frameTranslation.frame_b.v[3] = j2.frame_b.v[3];
//   b3.body.frameTranslation.frame_b.S[1,1] = b3.body.frame_b.S[1,1];
//   b3.body.frameTranslation.frame_b.S[1,1] = b3.frame_b.S[1,1];
//   b3.body.frameTranslation.frame_b.S[1,1] = j2.frame_b.S[1,1];
//   b3.body.frameTranslation.frame_b.S[1,2] = b3.body.frame_b.S[1,2];
//   b3.body.frameTranslation.frame_b.S[1,2] = b3.frame_b.S[1,2];
//   b3.body.frameTranslation.frame_b.S[1,2] = j2.frame_b.S[1,2];
//   b3.body.frameTranslation.frame_b.S[1,3] = b3.body.frame_b.S[1,3];
//   b3.body.frameTranslation.frame_b.S[1,3] = b3.frame_b.S[1,3];
//   b3.body.frameTranslation.frame_b.S[1,3] = j2.frame_b.S[1,3];
//   b3.body.frameTranslation.frame_b.S[2,1] = b3.body.frame_b.S[2,1];
//   b3.body.frameTranslation.frame_b.S[2,1] = b3.frame_b.S[2,1];
//   b3.body.frameTranslation.frame_b.S[2,1] = j2.frame_b.S[2,1];
//   b3.body.frameTranslation.frame_b.S[2,2] = b3.body.frame_b.S[2,2];
//   b3.body.frameTranslation.frame_b.S[2,2] = b3.frame_b.S[2,2];
//   b3.body.frameTranslation.frame_b.S[2,2] = j2.frame_b.S[2,2];
//   b3.body.frameTranslation.frame_b.S[2,3] = b3.body.frame_b.S[2,3];
//   b3.body.frameTranslation.frame_b.S[2,3] = b3.frame_b.S[2,3];
//   b3.body.frameTranslation.frame_b.S[2,3] = j2.frame_b.S[2,3];
//   b3.body.frameTranslation.frame_b.S[3,1] = b3.body.frame_b.S[3,1];
//   b3.body.frameTranslation.frame_b.S[3,1] = b3.frame_b.S[3,1];
//   b3.body.frameTranslation.frame_b.S[3,1] = j2.frame_b.S[3,1];
//   b3.body.frameTranslation.frame_b.S[3,2] = b3.body.frame_b.S[3,2];
//   b3.body.frameTranslation.frame_b.S[3,2] = b3.frame_b.S[3,2];
//   b3.body.frameTranslation.frame_b.S[3,2] = j2.frame_b.S[3,2];
//   b3.body.frameTranslation.frame_b.S[3,3] = b3.body.frame_b.S[3,3];
//   b3.body.frameTranslation.frame_b.S[3,3] = b3.frame_b.S[3,3];
//   b3.body.frameTranslation.frame_b.S[3,3] = j2.frame_b.S[3,3];
//   b3.body.frameTranslation.frame_b.r0[1] = b3.body.frame_b.r0[1];
//   b3.body.frameTranslation.frame_b.r0[1] = b3.frame_b.r0[1];
//   b3.body.frameTranslation.frame_b.r0[1] = j2.frame_b.r0[1];
//   b3.body.frameTranslation.frame_b.r0[2] = b3.body.frame_b.r0[2];
//   b3.body.frameTranslation.frame_b.r0[2] = b3.frame_b.r0[2];
//   b3.body.frameTranslation.frame_b.r0[2] = j2.frame_b.r0[2];
//   b3.body.frameTranslation.frame_b.r0[3] = b3.body.frame_b.r0[3];
//   b3.body.frameTranslation.frame_b.r0[3] = b3.frame_b.r0[3];
//   b3.body.frameTranslation.frame_b.r0[3] = j2.frame_b.r0[3];
//   inertial.frame_b.t[1] + frame.frame_a.t[1] = 0.0;
//   inertial.frame_b.t[2] + frame.frame_a.t[2] = 0.0;
//   inertial.frame_b.t[3] + frame.frame_a.t[3] = 0.0;
//   inertial.frame_b.f[1] + frame.frame_a.f[1] = 0.0;
//   inertial.frame_b.f[2] + frame.frame_a.f[2] = 0.0;
//   inertial.frame_b.f[3] + frame.frame_a.f[3] = 0.0;
//   frame.frame_a.z[1] = inertial.frame_b.z[1];
//   frame.frame_a.z[2] = inertial.frame_b.z[2];
//   frame.frame_a.z[3] = inertial.frame_b.z[3];
//   frame.frame_a.a[1] = inertial.frame_b.a[1];
//   frame.frame_a.a[2] = inertial.frame_b.a[2];
//   frame.frame_a.a[3] = inertial.frame_b.a[3];
//   frame.frame_a.w[1] = inertial.frame_b.w[1];
//   frame.frame_a.w[2] = inertial.frame_b.w[2];
//   frame.frame_a.w[3] = inertial.frame_b.w[3];
//   frame.frame_a.v[1] = inertial.frame_b.v[1];
//   frame.frame_a.v[2] = inertial.frame_b.v[2];
//   frame.frame_a.v[3] = inertial.frame_b.v[3];
//   frame.frame_a.S[1,1] = inertial.frame_b.S[1,1];
//   frame.frame_a.S[1,2] = inertial.frame_b.S[1,2];
//   frame.frame_a.S[1,3] = inertial.frame_b.S[1,3];
//   frame.frame_a.S[2,1] = inertial.frame_b.S[2,1];
//   frame.frame_a.S[2,2] = inertial.frame_b.S[2,2];
//   frame.frame_a.S[2,3] = inertial.frame_b.S[2,3];
//   frame.frame_a.S[3,1] = inertial.frame_b.S[3,1];
//   frame.frame_a.S[3,2] = inertial.frame_b.S[3,2];
//   frame.frame_a.S[3,3] = inertial.frame_b.S[3,3];
//   frame.frame_a.r0[1] = inertial.frame_b.r0[1];
//   frame.frame_a.r0[2] = inertial.frame_b.r0[2];
//   frame.frame_a.r0[3] = inertial.frame_b.r0[3];
//   gear.bearing.tau = 0.0;
//   torque.bearing.tau = 0.0;
//   b4.vis.frame_a.t[1] + ((-b4.frame_a.t[1]) + b4.body.frame_a.t[1]) = 0.0;
//   b4.vis.frame_a.t[2] + ((-b4.frame_a.t[2]) + b4.body.frame_a.t[2]) = 0.0;
//   b4.vis.frame_a.t[3] + ((-b4.frame_a.t[3]) + b4.body.frame_a.t[3]) = 0.0;
//   b4.vis.frame_a.f[1] + ((-b4.frame_a.f[1]) + b4.body.frame_a.f[1]) = 0.0;
//   b4.vis.frame_a.f[2] + ((-b4.frame_a.f[2]) + b4.body.frame_a.f[2]) = 0.0;
//   b4.vis.frame_a.f[3] + ((-b4.frame_a.f[3]) + b4.body.frame_a.f[3]) = 0.0;
//   (-b4.frame_b.t[1]) + b4.body.frame_b.t[1] = 0.0;
//   (-b4.frame_b.t[2]) + b4.body.frame_b.t[2] = 0.0;
//   (-b4.frame_b.t[3]) + b4.body.frame_b.t[3] = 0.0;
//   (-b4.frame_b.f[1]) + b4.body.frame_b.f[1] = 0.0;
//   (-b4.frame_b.f[2]) + b4.body.frame_b.f[2] = 0.0;
//   (-b4.frame_b.f[3]) + b4.body.frame_b.f[3] = 0.0;
//   (-b4.body.frame_a.t[1]) + (b4.body.body.frame_a.t[1] + b4.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-b4.body.frame_a.t[2]) + (b4.body.body.frame_a.t[2] + b4.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-b4.body.frame_a.t[3]) + (b4.body.body.frame_a.t[3] + b4.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-b4.body.frame_a.f[1]) + (b4.body.body.frame_a.f[1] + b4.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-b4.body.frame_a.f[2]) + (b4.body.body.frame_a.f[2] + b4.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-b4.body.frame_a.f[3]) + (b4.body.body.frame_a.f[3] + b4.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-b4.body.frame_b.t[1]) + b4.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-b4.body.frame_b.t[2]) + b4.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-b4.body.frame_b.t[3]) + b4.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-b4.body.frame_b.f[1]) + b4.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-b4.body.frame_b.f[2]) + b4.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-b4.body.frame_b.f[3]) + b4.body.frameTranslation.frame_b.f[3] = 0.0;
//   j7.bearing.tau = 0.0;
//   j7.axis.tau = 0.0;
//   j6.bearing.tau = 0.0;
//   j6.axis.tau = 0.0;
//   b7.vis.frame_a.t[1] + ((-b7.frame_a.t[1]) + b7.body.frame_a.t[1]) = 0.0;
//   b7.vis.frame_a.t[2] + ((-b7.frame_a.t[2]) + b7.body.frame_a.t[2]) = 0.0;
//   b7.vis.frame_a.t[3] + ((-b7.frame_a.t[3]) + b7.body.frame_a.t[3]) = 0.0;
//   b7.vis.frame_a.f[1] + ((-b7.frame_a.f[1]) + b7.body.frame_a.f[1]) = 0.0;
//   b7.vis.frame_a.f[2] + ((-b7.frame_a.f[2]) + b7.body.frame_a.f[2]) = 0.0;
//   b7.vis.frame_a.f[3] + ((-b7.frame_a.f[3]) + b7.body.frame_a.f[3]) = 0.0;
//   (-b7.frame_b.t[1]) + b7.body.frame_b.t[1] = 0.0;
//   (-b7.frame_b.t[2]) + b7.body.frame_b.t[2] = 0.0;
//   (-b7.frame_b.t[3]) + b7.body.frame_b.t[3] = 0.0;
//   (-b7.frame_b.f[1]) + b7.body.frame_b.f[1] = 0.0;
//   (-b7.frame_b.f[2]) + b7.body.frame_b.f[2] = 0.0;
//   (-b7.frame_b.f[3]) + b7.body.frame_b.f[3] = 0.0;
//   (-b7.body.frame_a.t[1]) + (b7.body.body.frame_a.t[1] + b7.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-b7.body.frame_a.t[2]) + (b7.body.body.frame_a.t[2] + b7.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-b7.body.frame_a.t[3]) + (b7.body.body.frame_a.t[3] + b7.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-b7.body.frame_a.f[1]) + (b7.body.body.frame_a.f[1] + b7.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-b7.body.frame_a.f[2]) + (b7.body.body.frame_a.f[2] + b7.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-b7.body.frame_a.f[3]) + (b7.body.body.frame_a.f[3] + b7.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-b7.body.frame_b.t[1]) + b7.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-b7.body.frame_b.t[2]) + b7.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-b7.body.frame_b.t[3]) + b7.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-b7.body.frame_b.f[1]) + b7.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-b7.body.frame_b.f[2]) + b7.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-b7.body.frame_b.f[3]) + b7.body.frameTranslation.frame_b.f[3] = 0.0;
//   j5.bearing.f = 0.0;
//   j5.axis.f = 0.0;
//   (-b6.frame_a.t[1]) + (b6.frameTranslation.frame_a.t[1] + b6.body.frame_a.t[1]) = 0.0;
//   (-b6.frame_a.t[2]) + (b6.frameTranslation.frame_a.t[2] + b6.body.frame_a.t[2]) = 0.0;
//   (-b6.frame_a.t[3]) + (b6.frameTranslation.frame_a.t[3] + b6.body.frame_a.t[3]) = 0.0;
//   (-b6.frame_a.f[1]) + (b6.frameTranslation.frame_a.f[1] + b6.body.frame_a.f[1]) = 0.0;
//   (-b6.frame_a.f[2]) + (b6.frameTranslation.frame_a.f[2] + b6.body.frame_a.f[2]) = 0.0;
//   (-b6.frame_a.f[3]) + (b6.frameTranslation.frame_a.f[3] + b6.body.frame_a.f[3]) = 0.0;
//   b6.frameTranslation.frame_b.t[1] + (-b6.frame_b.t[1]) = 0.0;
//   b6.frameTranslation.frame_b.t[2] + (-b6.frame_b.t[2]) = 0.0;
//   b6.frameTranslation.frame_b.t[3] + (-b6.frame_b.t[3]) = 0.0;
//   b6.frameTranslation.frame_b.f[1] + (-b6.frame_b.f[1]) = 0.0;
//   b6.frameTranslation.frame_b.f[2] + (-b6.frame_b.f[2]) = 0.0;
//   b6.frameTranslation.frame_b.f[3] + (-b6.frame_b.f[3]) = 0.0;
//   b5.vis.frame_a.t[1] + ((-b5.frame_a.t[1]) + b5.body.frame_a.t[1]) = 0.0;
//   b5.vis.frame_a.t[2] + ((-b5.frame_a.t[2]) + b5.body.frame_a.t[2]) = 0.0;
//   b5.vis.frame_a.t[3] + ((-b5.frame_a.t[3]) + b5.body.frame_a.t[3]) = 0.0;
//   b5.vis.frame_a.f[1] + ((-b5.frame_a.f[1]) + b5.body.frame_a.f[1]) = 0.0;
//   b5.vis.frame_a.f[2] + ((-b5.frame_a.f[2]) + b5.body.frame_a.f[2]) = 0.0;
//   b5.vis.frame_a.f[3] + ((-b5.frame_a.f[3]) + b5.body.frame_a.f[3]) = 0.0;
//   (-b5.frame_b.t[1]) + b5.body.frame_b.t[1] = 0.0;
//   (-b5.frame_b.t[2]) + b5.body.frame_b.t[2] = 0.0;
//   (-b5.frame_b.t[3]) + b5.body.frame_b.t[3] = 0.0;
//   (-b5.frame_b.f[1]) + b5.body.frame_b.f[1] = 0.0;
//   (-b5.frame_b.f[2]) + b5.body.frame_b.f[2] = 0.0;
//   (-b5.frame_b.f[3]) + b5.body.frame_b.f[3] = 0.0;
//   (-b5.body.frame_a.t[1]) + (b5.body.body.frame_a.t[1] + b5.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-b5.body.frame_a.t[2]) + (b5.body.body.frame_a.t[2] + b5.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-b5.body.frame_a.t[3]) + (b5.body.body.frame_a.t[3] + b5.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-b5.body.frame_a.f[1]) + (b5.body.body.frame_a.f[1] + b5.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-b5.body.frame_a.f[2]) + (b5.body.body.frame_a.f[2] + b5.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-b5.body.frame_a.f[3]) + (b5.body.body.frame_a.f[3] + b5.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-b5.body.frame_b.t[1]) + b5.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-b5.body.frame_b.t[2]) + b5.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-b5.body.frame_b.t[3]) + b5.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-b5.body.frame_b.f[1]) + b5.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-b5.body.frame_b.f[2]) + b5.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-b5.body.frame_b.f[3]) + b5.body.frameTranslation.frame_b.f[3] = 0.0;
//   j3.bearing.f = 0.0;
//   j3.axis.f = 0.0;
//   b3.vis.frame_a.t[1] + ((-b3.frame_a.t[1]) + b3.body.frame_a.t[1]) = 0.0;
//   b3.vis.frame_a.t[2] + ((-b3.frame_a.t[2]) + b3.body.frame_a.t[2]) = 0.0;
//   b3.vis.frame_a.t[3] + ((-b3.frame_a.t[3]) + b3.body.frame_a.t[3]) = 0.0;
//   b3.vis.frame_a.f[1] + ((-b3.frame_a.f[1]) + b3.body.frame_a.f[1]) = 0.0;
//   b3.vis.frame_a.f[2] + ((-b3.frame_a.f[2]) + b3.body.frame_a.f[2]) = 0.0;
//   b3.vis.frame_a.f[3] + ((-b3.frame_a.f[3]) + b3.body.frame_a.f[3]) = 0.0;
//   (-b3.frame_b.t[1]) + b3.body.frame_b.t[1] = 0.0;
//   (-b3.frame_b.t[2]) + b3.body.frame_b.t[2] = 0.0;
//   (-b3.frame_b.t[3]) + b3.body.frame_b.t[3] = 0.0;
//   (-b3.frame_b.f[1]) + b3.body.frame_b.f[1] = 0.0;
//   (-b3.frame_b.f[2]) + b3.body.frame_b.f[2] = 0.0;
//   (-b3.frame_b.f[3]) + b3.body.frame_b.f[3] = 0.0;
//   (-b3.body.frame_a.t[1]) + (b3.body.body.frame_a.t[1] + b3.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-b3.body.frame_a.t[2]) + (b3.body.body.frame_a.t[2] + b3.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-b3.body.frame_a.t[3]) + (b3.body.body.frame_a.t[3] + b3.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-b3.body.frame_a.f[1]) + (b3.body.body.frame_a.f[1] + b3.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-b3.body.frame_a.f[2]) + (b3.body.body.frame_a.f[2] + b3.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-b3.body.frame_a.f[3]) + (b3.body.body.frame_a.f[3] + b3.body.frameTranslation.frame_a.f[3]) = 0.0;
//   (-b3.body.frame_b.t[1]) + b3.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-b3.body.frame_b.t[2]) + b3.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-b3.body.frame_b.t[3]) + b3.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-b3.body.frame_b.f[1]) + b3.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-b3.body.frame_b.f[2]) + b3.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-b3.body.frame_b.f[3]) + b3.body.frameTranslation.frame_b.f[3] = 0.0;
//   (-b2.frame_a.t[1]) + (b2.frameTranslation.frame_a.t[1] + b2.body.frame_a.t[1]) = 0.0;
//   (-b2.frame_a.t[2]) + (b2.frameTranslation.frame_a.t[2] + b2.body.frame_a.t[2]) = 0.0;
//   (-b2.frame_a.t[3]) + (b2.frameTranslation.frame_a.t[3] + b2.body.frame_a.t[3]) = 0.0;
//   (-b2.frame_a.f[1]) + (b2.frameTranslation.frame_a.f[1] + b2.body.frame_a.f[1]) = 0.0;
//   (-b2.frame_a.f[2]) + (b2.frameTranslation.frame_a.f[2] + b2.body.frame_a.f[2]) = 0.0;
//   (-b2.frame_a.f[3]) + (b2.frameTranslation.frame_a.f[3] + b2.body.frame_a.f[3]) = 0.0;
//   b2.frameTranslation.frame_b.t[1] + (-b2.frame_b.t[1]) = 0.0;
//   b2.frameTranslation.frame_b.t[2] + (-b2.frame_b.t[2]) = 0.0;
//   b2.frameTranslation.frame_b.t[3] + (-b2.frame_b.t[3]) = 0.0;
//   b2.frameTranslation.frame_b.f[1] + (-b2.frame_b.f[1]) = 0.0;
//   b2.frameTranslation.frame_b.f[2] + (-b2.frame_b.f[2]) = 0.0;
//   b2.frameTranslation.frame_b.f[3] + (-b2.frame_b.f[3]) = 0.0;
//   b2.frameTranslation.frame_b.z[1] = b2.frame_b.z[1];
//   b2.frameTranslation.frame_b.z[2] = b2.frame_b.z[2];
//   b2.frameTranslation.frame_b.z[3] = b2.frame_b.z[3];
//   b2.frameTranslation.frame_b.a[1] = b2.frame_b.a[1];
//   b2.frameTranslation.frame_b.a[2] = b2.frame_b.a[2];
//   b2.frameTranslation.frame_b.a[3] = b2.frame_b.a[3];
//   b2.frameTranslation.frame_b.w[1] = b2.frame_b.w[1];
//   b2.frameTranslation.frame_b.w[2] = b2.frame_b.w[2];
//   b2.frameTranslation.frame_b.w[3] = b2.frame_b.w[3];
//   b2.frameTranslation.frame_b.v[1] = b2.frame_b.v[1];
//   b2.frameTranslation.frame_b.v[2] = b2.frame_b.v[2];
//   b2.frameTranslation.frame_b.v[3] = b2.frame_b.v[3];
//   b2.frameTranslation.frame_b.S[1,1] = b2.frame_b.S[1,1];
//   b2.frameTranslation.frame_b.S[1,2] = b2.frame_b.S[1,2];
//   b2.frameTranslation.frame_b.S[1,3] = b2.frame_b.S[1,3];
//   b2.frameTranslation.frame_b.S[2,1] = b2.frame_b.S[2,1];
//   b2.frameTranslation.frame_b.S[2,2] = b2.frame_b.S[2,2];
//   b2.frameTranslation.frame_b.S[2,3] = b2.frame_b.S[2,3];
//   b2.frameTranslation.frame_b.S[3,1] = b2.frame_b.S[3,1];
//   b2.frameTranslation.frame_b.S[3,2] = b2.frame_b.S[3,2];
//   b2.frameTranslation.frame_b.S[3,3] = b2.frame_b.S[3,3];
//   b2.frameTranslation.frame_b.r0[1] = b2.frame_b.r0[1];
//   b2.frameTranslation.frame_b.r0[2] = b2.frame_b.r0[2];
//   b2.frameTranslation.frame_b.r0[3] = b2.frame_b.r0[3];
//   b2.frame_b.t[3] = 0.0;
//   b2.frame_b.t[2] = 0.0;
//   b2.frame_b.t[1] = 0.0;
//   b2.frame_b.f[3] = 0.0;
//   b2.frame_b.f[2] = 0.0;
//   b2.frame_b.f[1] = 0.0;
//   (-b1.frame_a.t[1]) + (b1.frameTranslation.frame_a.t[1] + b1.body.frame_a.t[1]) = 0.0;
//   (-b1.frame_a.t[2]) + (b1.frameTranslation.frame_a.t[2] + b1.body.frame_a.t[2]) = 0.0;
//   (-b1.frame_a.t[3]) + (b1.frameTranslation.frame_a.t[3] + b1.body.frame_a.t[3]) = 0.0;
//   (-b1.frame_a.f[1]) + (b1.frameTranslation.frame_a.f[1] + b1.body.frame_a.f[1]) = 0.0;
//   (-b1.frame_a.f[2]) + (b1.frameTranslation.frame_a.f[2] + b1.body.frame_a.f[2]) = 0.0;
//   (-b1.frame_a.f[3]) + (b1.frameTranslation.frame_a.f[3] + b1.body.frame_a.f[3]) = 0.0;
//   b1.frameTranslation.frame_b.t[1] + (-b1.frame_b.t[1]) = 0.0;
//   b1.frameTranslation.frame_b.t[2] + (-b1.frame_b.t[2]) = 0.0;
//   b1.frameTranslation.frame_b.t[3] + (-b1.frame_b.t[3]) = 0.0;
//   b1.frameTranslation.frame_b.f[1] + (-b1.frame_b.f[1]) = 0.0;
//   b1.frameTranslation.frame_b.f[2] + (-b1.frame_b.f[2]) = 0.0;
//   b1.frameTranslation.frame_b.f[3] + (-b1.frame_b.f[3]) = 0.0;
//   j1.bearing.tau = 0.0;
// end MultiBody.Examples.Loops.TwoLoop;
// "
// "Check of MultiBody.Examples.Loops.TwoLoop completed successfully.
// 
// [TwoLoopTotal.mo:2675:7-2675:70:writable] Warning: Component Length has the same name as its type MultiBody.Parts.CylinderBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// [TwoLoopTotal.mo:2751:7-2751:75:writable] Warning: Component Length has the same name as its type MultiBody.Parts.ShapeBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// [TwoLoopTotal.mo:2675:7-2675:70:writable] Warning: Component Length has the same name as its type MultiBody.Parts.CylinderBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// [TwoLoopTotal.mo:2751:7-2751:75:writable] Warning: Component Length has the same name as its type MultiBody.Parts.ShapeBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// 
// Class MultiBody.Examples.Loops.TwoLoop has 5372 equation(s) and 5376 variable(s).
// 4424 of these are trivial equation(s).
// "
// ""
// endResult
