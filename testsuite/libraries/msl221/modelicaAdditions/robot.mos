// name: ModelicaAdditions.MultiBody.Examples.Robots.r3.robot
// keywords: MultiBody, Examples
// status: correct

loadFile("robotTotal.mo");
instantiateModel(MultiBody.Examples.Robots.r3.robot);
getErrorString();

// Result:
// true
// "function MCVisualShape.local_normalize
//   input Real[3] iv;
//   output Real[3] ov;
//   Real length;
// algorithm
//   length := sqrt(iv[1] ^ 2.0 + iv[2] ^ 2.0 + iv[3] ^ 2.0);
//   ov := {iv[1] / length,iv[2] / length,iv[3] / length};
// end MCVisualShape.local_normalize;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit
//   input Real timeIn;
//   input Real startTime;
//   input Integer ipoType;
//   input Integer expoType;
//   input String tableName;
//   input String fileName;
//   input Real table;
//   input Integer colWise;
//   output Integer tableID;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real timeIn;
//   output Real value;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax
//   input Integer tableID;
//   output Real Tmax "maximum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin
//   input Integer tableID;
//   output Real Tmin "minimum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin;
// 
// function Modelica.Math.tempInterpol1
//   input Real u "input value (first column of table)";
//   input Real[:, :] table "table to be interpolated";
//   input Integer icol "column of table to be interpolated";
//   output Real y "interpolated input value (icol column of table)";
//   protected Integer i;
//   protected Integer n "number of rows of table";
//   protected Real u1;
//   protected Real u2;
//   protected Real y1;
//   protected Real y2;
// algorithm
//   n := size(table,1);
//   if n <= 1 then
//     y := table[1, icol];
//   else
//     if u <= table[1,1] then
//       i := 1;
//     else
//       i := 2;
//       while i < n AND u >= table[i, 1] loop
//         i := 1 + i;
//       end while;
//       i := i - 1;
//     end if;
//     u1 := table[i, 1];
//     u2 := table[1 + i, 1];
//     y1 := table[i, icol];
//     y2 := table[1 + i, icol];
//     assert( u2 > u1, "Table index must be increasing");
//     y := y1 + (y2 - y1) * (u - u1) / (u2 - u1);
//   end if;
// end Modelica.Math.tempInterpol1;
// 
// function PackMaterial
//   input Real r;
//   input Real g;
//   input Real b;
//   input Real spec;
//   output Real packedMaterial;
//   Integer i1;
//   Integer i2;
//   Integer i3;
//   Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
//   input String shape;
//   output Real packedShape;
// algorithm
//   if shape == "box" then
//     packedShape := 101.0;
//   elseif shape == "sphere" then
//     packedShape := 102.0;
//   elseif shape == "cylinder" then
//     packedShape := 103.0;
//   elseif shape == "cone" then
//     packedShape := 104.0;
//   elseif shape == "pipe" then
//     packedShape := 105.0;
//   elseif shape == "beam" then
//     packedShape := 106.0;
//   elseif shape == "wirebox" then
//     packedShape := 107.0;
//   elseif shape == "gearwheel" then
//     packedShape := 108.0;
//   elseif shape == "spring" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class MultiBody.Examples.Robots.r3.robot
//   parameter Real robot.q0[1](quantity = "Angle", unit = "rad", displayUnit = "deg") = -1.0 "initial joint angles";
//   parameter Real robot.q0[2](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.43 "initial joint angles";
//   parameter Real robot.q0[3](quantity = "Angle", unit = "rad", displayUnit = "deg") = 1.57 "initial joint angles";
//   parameter Real robot.q0[4](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "initial joint angles";
//   parameter Real robot.q0[5](quantity = "Angle", unit = "rad", displayUnit = "deg") = -2.0 "initial joint angles";
//   parameter Real robot.q0[6](quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "initial joint angles";
//   output Real robot.q_ref[1](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.q_ref[2](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.q_ref[3](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.q_ref[4](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.q_ref[5](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.q_ref[6](quantity = "Angle", unit = "rad", displayUnit = "deg") "reference values of joint angles";
//   output Real robot.qd_ref[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qd_ref[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qd_ref[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qd_ref[4](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qd_ref[5](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qd_ref[6](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "reference values of joint speeds";
//   output Real robot.qdd_ref[1](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.qdd_ref[2](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.qdd_ref[3](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.qdd_ref[4](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.qdd_ref[5](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.qdd_ref[6](quantity = "AngularAcceleration", unit = "rad/s2") "reference values of joint accelerations";
//   output Real robot.eq[1](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eq[2](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eq[3](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eq[4](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eq[5](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eq[6](quantity = "Angle", unit = "rad", displayUnit = "deg") "control errors of joint angles";
//   output Real robot.eqd[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   output Real robot.eqd[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   output Real robot.eqd[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   output Real robot.eqd[4](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   output Real robot.eqd[5](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   output Real robot.eqd[6](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "control errors of joint speeds";
//   parameter Real robot.mechanics.loadSize[1](quantity = "Length", unit = "m") = 0.125 "size of (steel) load box";
//   parameter Real robot.mechanics.loadSize[2](quantity = "Length", unit = "m") = 0.05 "size of (steel) load box";
//   parameter Real robot.mechanics.loadSize[3](quantity = "Length", unit = "m") = 0.05 "size of (steel) load box";
//   Real robot.mechanics.q[1](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.q[2](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.q[3](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.q[4](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.q[5](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.q[6](quantity = "Angle", unit = "rad", displayUnit = "deg") "joint angles";
//   Real robot.mechanics.qd[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qd[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qd[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qd[4](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qd[5](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qd[6](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "joint speeds";
//   Real robot.mechanics.qdd[1](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.qdd[2](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.qdd[3](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.qdd[4](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.qdd[5](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.qdd[6](quantity = "AngularAcceleration", unit = "rad/s2") "joint accelerations";
//   Real robot.mechanics.tau[1](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.tau[2](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.tau[3](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.tau[4](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.tau[5](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.tau[6](quantity = "Torque", unit = "N.m") "joint driving torques";
//   Real robot.mechanics.axis1.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis1.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.axis2.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis2.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.axis3.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis3.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.axis4.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis4.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.axis5.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis5.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.axis6.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.axis6.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.mechanics.inertial.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Gravity constant";
//   parameter Real robot.mechanics.inertial.ng[1] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real robot.mechanics.inertial.ng[2] = -1.0 "Direction of gravity (gravity = g*ng)";
//   parameter Real robot.mechanics.inertial.ng[3] = 0.0 "Direction of gravity (gravity = g*ng)";
//   parameter String robot.mechanics.inertial.label1 = "x" "Label of horizontal axis in icon";
//   parameter String robot.mechanics.inertial.label2 = "y" "Label of vertical axis in icon";
//   Real robot.mechanics.inertial.gravity[1](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real robot.mechanics.inertial.gravity[2](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   Real robot.mechanics.inertial.gravity[3](quantity = "Acceleration", unit = "m/s2") "Gravity acceleration vector";
//   output Real robot.mechanics.inertial.frame_b.r0[1](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.inertial.frame_b.r0[2](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.inertial.frame_b.r0[3](quantity = "Length", unit = "m") "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.inertial.frame_b.S[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.S[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.inertial.frame_b.v[1](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.v[2](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.v[3](quantity = "Velocity", unit = "m/s") "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.inertial.frame_b.f[1](quantity = "Force", unit = "N");
//   Real robot.mechanics.inertial.frame_b.f[2](quantity = "Force", unit = "N");
//   Real robot.mechanics.inertial.frame_b.f[3](quantity = "Force", unit = "N");
//   Real robot.mechanics.inertial.frame_b.t[1](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.inertial.frame_b.t[2](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.inertial.frame_b.t[3](quantity = "Torque", unit = "N.m");
//   constant Real robot.mechanics.r1.pi = 3.14159265358979;
//   constant Real robot.mechanics.r1.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r1.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r1.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r1.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r1.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r1.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r1.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r1.frame_a.S[1,1] = robot.mechanics.r1.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[1,2] = robot.mechanics.r1.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[1,3] = robot.mechanics.r1.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[2,1] = robot.mechanics.r1.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[2,2] = robot.mechanics.r1.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[2,3] = robot.mechanics.r1.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[3,1] = robot.mechanics.r1.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[3,2] = robot.mechanics.r1.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.S[3,3] = robot.mechanics.r1.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r1.fa[1];
//   Real robot.mechanics.r1.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r1.fa[2];
//   Real robot.mechanics.r1.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r1.fa[3];
//   Real robot.mechanics.r1.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r1.ta[1];
//   Real robot.mechanics.r1.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r1.ta[2];
//   Real robot.mechanics.r1.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r1.ta[3];
//   output Real robot.mechanics.r1.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r1.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r1.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r1.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r1.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r1.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r1.frame_b.S[1,1] = robot.mechanics.r1.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[1,2] = robot.mechanics.r1.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[1,3] = robot.mechanics.r1.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[2,1] = robot.mechanics.r1.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[2,2] = robot.mechanics.r1.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[2,3] = robot.mechanics.r1.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[3,1] = robot.mechanics.r1.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[3,2] = robot.mechanics.r1.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.S[3,3] = robot.mechanics.r1.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r1.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r1.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r1.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r1.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r1.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r1.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r1.fb[1];
//   Real robot.mechanics.r1.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r1.fb[2];
//   Real robot.mechanics.r1.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r1.fb[3];
//   Real robot.mechanics.r1.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r1.tb[1];
//   Real robot.mechanics.r1.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r1.tb[2];
//   Real robot.mechanics.r1.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r1.tb[3];
//   protected Real robot.mechanics.r1.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r1.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r1.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r1.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r1.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r1.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r1.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r1.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r1.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r1.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r1.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r1.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r1.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r1.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r1.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r1.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r1.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r1.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r1.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r1.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r1.S_rel[1,1];
//   Real robot.mechanics.r1.S_rel[1,2];
//   Real robot.mechanics.r1.S_rel[1,3];
//   Real robot.mechanics.r1.S_rel[2,1];
//   Real robot.mechanics.r1.S_rel[2,2];
//   Real robot.mechanics.r1.S_rel[2,3];
//   Real robot.mechanics.r1.S_rel[3,1];
//   Real robot.mechanics.r1.S_rel[3,2];
//   Real robot.mechanics.r1.S_rel[3,3];
//   Real robot.mechanics.r1.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r1.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r1.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r1.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r1.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r1.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r1.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r1.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r1.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r1.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r1.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r1.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r1.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r1.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r1.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r1.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r1.n[2] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r1.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r1.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r1.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r1.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r1.startValueFixed);
//   Real robot.mechanics.r1.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r1.startValueFixed);
//   Real robot.mechanics.r1.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r1.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r1.nn[1];
//   Real robot.mechanics.r1.nn[2];
//   Real robot.mechanics.r1.nn[3];
//   Real robot.mechanics.r1.sinq;
//   Real robot.mechanics.r1.cosq;
//   Real robot.mechanics.r1.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r1.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r1.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r1.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real robot.mechanics.r2.pi = 3.14159265358979;
//   constant Real robot.mechanics.r2.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r2.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r2.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r2.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r2.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r2.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r2.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r2.frame_a.S[1,1] = robot.mechanics.r2.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[1,2] = robot.mechanics.r2.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[1,3] = robot.mechanics.r2.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[2,1] = robot.mechanics.r2.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[2,2] = robot.mechanics.r2.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[2,3] = robot.mechanics.r2.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[3,1] = robot.mechanics.r2.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[3,2] = robot.mechanics.r2.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.S[3,3] = robot.mechanics.r2.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r2.fa[1];
//   Real robot.mechanics.r2.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r2.fa[2];
//   Real robot.mechanics.r2.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r2.fa[3];
//   Real robot.mechanics.r2.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r2.ta[1];
//   Real robot.mechanics.r2.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r2.ta[2];
//   Real robot.mechanics.r2.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r2.ta[3];
//   output Real robot.mechanics.r2.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r2.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r2.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r2.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r2.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r2.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r2.frame_b.S[1,1] = robot.mechanics.r2.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[1,2] = robot.mechanics.r2.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[1,3] = robot.mechanics.r2.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[2,1] = robot.mechanics.r2.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[2,2] = robot.mechanics.r2.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[2,3] = robot.mechanics.r2.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[3,1] = robot.mechanics.r2.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[3,2] = robot.mechanics.r2.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.S[3,3] = robot.mechanics.r2.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r2.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r2.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r2.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r2.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r2.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r2.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r2.fb[1];
//   Real robot.mechanics.r2.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r2.fb[2];
//   Real robot.mechanics.r2.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r2.fb[3];
//   Real robot.mechanics.r2.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r2.tb[1];
//   Real robot.mechanics.r2.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r2.tb[2];
//   Real robot.mechanics.r2.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r2.tb[3];
//   protected Real robot.mechanics.r2.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r2.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r2.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r2.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r2.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r2.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r2.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r2.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r2.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r2.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r2.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r2.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r2.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r2.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r2.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r2.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r2.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r2.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r2.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r2.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r2.S_rel[1,1];
//   Real robot.mechanics.r2.S_rel[1,2];
//   Real robot.mechanics.r2.S_rel[1,3];
//   Real robot.mechanics.r2.S_rel[2,1];
//   Real robot.mechanics.r2.S_rel[2,2];
//   Real robot.mechanics.r2.S_rel[2,3];
//   Real robot.mechanics.r2.S_rel[3,1];
//   Real robot.mechanics.r2.S_rel[3,2];
//   Real robot.mechanics.r2.S_rel[3,3];
//   Real robot.mechanics.r2.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r2.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r2.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r2.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r2.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r2.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r2.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r2.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r2.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r2.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r2.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r2.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r2.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r2.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r2.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r2.n[1] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r2.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r2.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r2.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r2.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r2.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r2.startValueFixed);
//   Real robot.mechanics.r2.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r2.startValueFixed);
//   Real robot.mechanics.r2.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r2.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r2.nn[1];
//   Real robot.mechanics.r2.nn[2];
//   Real robot.mechanics.r2.nn[3];
//   Real robot.mechanics.r2.sinq;
//   Real robot.mechanics.r2.cosq;
//   Real robot.mechanics.r2.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r2.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r2.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r2.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real robot.mechanics.r3.pi = 3.14159265358979;
//   constant Real robot.mechanics.r3.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r3.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r3.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r3.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r3.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r3.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r3.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r3.frame_a.S[1,1] = robot.mechanics.r3.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[1,2] = robot.mechanics.r3.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[1,3] = robot.mechanics.r3.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[2,1] = robot.mechanics.r3.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[2,2] = robot.mechanics.r3.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[2,3] = robot.mechanics.r3.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[3,1] = robot.mechanics.r3.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[3,2] = robot.mechanics.r3.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.S[3,3] = robot.mechanics.r3.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r3.fa[1];
//   Real robot.mechanics.r3.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r3.fa[2];
//   Real robot.mechanics.r3.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r3.fa[3];
//   Real robot.mechanics.r3.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r3.ta[1];
//   Real robot.mechanics.r3.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r3.ta[2];
//   Real robot.mechanics.r3.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r3.ta[3];
//   output Real robot.mechanics.r3.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r3.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r3.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r3.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r3.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r3.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r3.frame_b.S[1,1] = robot.mechanics.r3.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[1,2] = robot.mechanics.r3.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[1,3] = robot.mechanics.r3.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[2,1] = robot.mechanics.r3.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[2,2] = robot.mechanics.r3.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[2,3] = robot.mechanics.r3.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[3,1] = robot.mechanics.r3.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[3,2] = robot.mechanics.r3.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.S[3,3] = robot.mechanics.r3.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r3.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r3.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r3.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r3.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r3.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r3.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r3.fb[1];
//   Real robot.mechanics.r3.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r3.fb[2];
//   Real robot.mechanics.r3.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r3.fb[3];
//   Real robot.mechanics.r3.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r3.tb[1];
//   Real robot.mechanics.r3.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r3.tb[2];
//   Real robot.mechanics.r3.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r3.tb[3];
//   protected Real robot.mechanics.r3.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r3.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r3.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r3.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r3.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r3.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r3.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r3.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r3.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r3.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r3.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r3.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r3.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r3.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r3.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r3.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r3.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r3.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r3.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r3.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r3.S_rel[1,1];
//   Real robot.mechanics.r3.S_rel[1,2];
//   Real robot.mechanics.r3.S_rel[1,3];
//   Real robot.mechanics.r3.S_rel[2,1];
//   Real robot.mechanics.r3.S_rel[2,2];
//   Real robot.mechanics.r3.S_rel[2,3];
//   Real robot.mechanics.r3.S_rel[3,1];
//   Real robot.mechanics.r3.S_rel[3,2];
//   Real robot.mechanics.r3.S_rel[3,3];
//   Real robot.mechanics.r3.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r3.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r3.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r3.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r3.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r3.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r3.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r3.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r3.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r3.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r3.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r3.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r3.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r3.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r3.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r3.n[1] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r3.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r3.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r3.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r3.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r3.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r3.startValueFixed);
//   Real robot.mechanics.r3.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r3.startValueFixed);
//   Real robot.mechanics.r3.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r3.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r3.nn[1];
//   Real robot.mechanics.r3.nn[2];
//   Real robot.mechanics.r3.nn[3];
//   Real robot.mechanics.r3.sinq;
//   Real robot.mechanics.r3.cosq;
//   Real robot.mechanics.r3.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r3.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r3.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r3.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real robot.mechanics.r4.pi = 3.14159265358979;
//   constant Real robot.mechanics.r4.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r4.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r4.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r4.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r4.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r4.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r4.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r4.frame_a.S[1,1] = robot.mechanics.r4.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[1,2] = robot.mechanics.r4.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[1,3] = robot.mechanics.r4.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[2,1] = robot.mechanics.r4.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[2,2] = robot.mechanics.r4.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[2,3] = robot.mechanics.r4.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[3,1] = robot.mechanics.r4.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[3,2] = robot.mechanics.r4.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.S[3,3] = robot.mechanics.r4.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r4.fa[1];
//   Real robot.mechanics.r4.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r4.fa[2];
//   Real robot.mechanics.r4.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r4.fa[3];
//   Real robot.mechanics.r4.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r4.ta[1];
//   Real robot.mechanics.r4.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r4.ta[2];
//   Real robot.mechanics.r4.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r4.ta[3];
//   output Real robot.mechanics.r4.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r4.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r4.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r4.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r4.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r4.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r4.frame_b.S[1,1] = robot.mechanics.r4.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[1,2] = robot.mechanics.r4.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[1,3] = robot.mechanics.r4.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[2,1] = robot.mechanics.r4.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[2,2] = robot.mechanics.r4.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[2,3] = robot.mechanics.r4.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[3,1] = robot.mechanics.r4.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[3,2] = robot.mechanics.r4.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.S[3,3] = robot.mechanics.r4.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r4.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r4.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r4.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r4.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r4.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r4.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r4.fb[1];
//   Real robot.mechanics.r4.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r4.fb[2];
//   Real robot.mechanics.r4.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r4.fb[3];
//   Real robot.mechanics.r4.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r4.tb[1];
//   Real robot.mechanics.r4.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r4.tb[2];
//   Real robot.mechanics.r4.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r4.tb[3];
//   protected Real robot.mechanics.r4.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r4.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r4.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r4.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r4.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r4.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r4.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r4.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r4.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r4.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r4.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r4.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r4.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r4.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r4.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r4.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r4.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r4.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r4.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r4.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r4.S_rel[1,1];
//   Real robot.mechanics.r4.S_rel[1,2];
//   Real robot.mechanics.r4.S_rel[1,3];
//   Real robot.mechanics.r4.S_rel[2,1];
//   Real robot.mechanics.r4.S_rel[2,2];
//   Real robot.mechanics.r4.S_rel[2,3];
//   Real robot.mechanics.r4.S_rel[3,1];
//   Real robot.mechanics.r4.S_rel[3,2];
//   Real robot.mechanics.r4.S_rel[3,3];
//   Real robot.mechanics.r4.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r4.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r4.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r4.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r4.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r4.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r4.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r4.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r4.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r4.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r4.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r4.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r4.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r4.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r4.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r4.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r4.n[2] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r4.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r4.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r4.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r4.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r4.startValueFixed);
//   Real robot.mechanics.r4.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r4.startValueFixed);
//   Real robot.mechanics.r4.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r4.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r4.nn[1];
//   Real robot.mechanics.r4.nn[2];
//   Real robot.mechanics.r4.nn[3];
//   Real robot.mechanics.r4.sinq;
//   Real robot.mechanics.r4.cosq;
//   Real robot.mechanics.r4.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r4.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r4.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r4.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real robot.mechanics.r5.pi = 3.14159265358979;
//   constant Real robot.mechanics.r5.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r5.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r5.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r5.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r5.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r5.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r5.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r5.frame_a.S[1,1] = robot.mechanics.r5.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[1,2] = robot.mechanics.r5.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[1,3] = robot.mechanics.r5.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[2,1] = robot.mechanics.r5.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[2,2] = robot.mechanics.r5.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[2,3] = robot.mechanics.r5.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[3,1] = robot.mechanics.r5.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[3,2] = robot.mechanics.r5.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.S[3,3] = robot.mechanics.r5.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r5.fa[1];
//   Real robot.mechanics.r5.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r5.fa[2];
//   Real robot.mechanics.r5.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r5.fa[3];
//   Real robot.mechanics.r5.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r5.ta[1];
//   Real robot.mechanics.r5.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r5.ta[2];
//   Real robot.mechanics.r5.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r5.ta[3];
//   output Real robot.mechanics.r5.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r5.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r5.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r5.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r5.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r5.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r5.frame_b.S[1,1] = robot.mechanics.r5.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[1,2] = robot.mechanics.r5.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[1,3] = robot.mechanics.r5.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[2,1] = robot.mechanics.r5.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[2,2] = robot.mechanics.r5.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[2,3] = robot.mechanics.r5.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[3,1] = robot.mechanics.r5.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[3,2] = robot.mechanics.r5.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.S[3,3] = robot.mechanics.r5.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r5.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r5.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r5.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r5.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r5.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r5.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r5.fb[1];
//   Real robot.mechanics.r5.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r5.fb[2];
//   Real robot.mechanics.r5.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r5.fb[3];
//   Real robot.mechanics.r5.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r5.tb[1];
//   Real robot.mechanics.r5.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r5.tb[2];
//   Real robot.mechanics.r5.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r5.tb[3];
//   protected Real robot.mechanics.r5.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r5.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r5.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r5.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r5.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r5.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r5.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r5.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r5.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r5.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r5.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r5.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r5.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r5.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r5.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r5.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r5.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r5.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r5.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r5.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r5.S_rel[1,1];
//   Real robot.mechanics.r5.S_rel[1,2];
//   Real robot.mechanics.r5.S_rel[1,3];
//   Real robot.mechanics.r5.S_rel[2,1];
//   Real robot.mechanics.r5.S_rel[2,2];
//   Real robot.mechanics.r5.S_rel[2,3];
//   Real robot.mechanics.r5.S_rel[3,1];
//   Real robot.mechanics.r5.S_rel[3,2];
//   Real robot.mechanics.r5.S_rel[3,3];
//   Real robot.mechanics.r5.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r5.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r5.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r5.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r5.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r5.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r5.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r5.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r5.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r5.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r5.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r5.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r5.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r5.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r5.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r5.n[1] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r5.n[2] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r5.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r5.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r5.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r5.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r5.startValueFixed);
//   Real robot.mechanics.r5.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r5.startValueFixed);
//   Real robot.mechanics.r5.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r5.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r5.nn[1];
//   Real robot.mechanics.r5.nn[2];
//   Real robot.mechanics.r5.nn[3];
//   Real robot.mechanics.r5.sinq;
//   Real robot.mechanics.r5.cosq;
//   Real robot.mechanics.r5.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r5.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r5.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r5.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   constant Real robot.mechanics.r6.pi = 3.14159265358979;
//   constant Real robot.mechanics.r6.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.r6.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r6.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r6.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r6.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.r6.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r6.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r6.frame_a.S[1,1] = robot.mechanics.r6.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[1,2] = robot.mechanics.r6.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[1,3] = robot.mechanics.r6.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[2,1] = robot.mechanics.r6.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[2,2] = robot.mechanics.r6.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[2,3] = robot.mechanics.r6.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[3,1] = robot.mechanics.r6.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[3,2] = robot.mechanics.r6.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.S[3,3] = robot.mechanics.r6.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.r6.fa[1];
//   Real robot.mechanics.r6.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.r6.fa[2];
//   Real robot.mechanics.r6.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.r6.fa[3];
//   Real robot.mechanics.r6.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.r6.ta[1];
//   Real robot.mechanics.r6.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.r6.ta[2];
//   Real robot.mechanics.r6.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.r6.ta[3];
//   output Real robot.mechanics.r6.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.r6.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r6.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.r6.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.r6.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.r6.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.r6.frame_b.S[1,1] = robot.mechanics.r6.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[1,2] = robot.mechanics.r6.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[1,3] = robot.mechanics.r6.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[2,1] = robot.mechanics.r6.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[2,2] = robot.mechanics.r6.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[2,3] = robot.mechanics.r6.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[3,1] = robot.mechanics.r6.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[3,2] = robot.mechanics.r6.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.S[3,3] = robot.mechanics.r6.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.r6.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.r6.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.r6.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.r6.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.r6.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.r6.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.r6.fb[1];
//   Real robot.mechanics.r6.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.r6.fb[2];
//   Real robot.mechanics.r6.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.r6.fb[3];
//   Real robot.mechanics.r6.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.r6.tb[1];
//   Real robot.mechanics.r6.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.r6.tb[2];
//   Real robot.mechanics.r6.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.r6.tb[3];
//   protected Real robot.mechanics.r6.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.r6.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.r6.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.r6.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.r6.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r6.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r6.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r6.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.r6.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.r6.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.r6.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.r6.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.r6.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.r6.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.r6.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.r6.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.r6.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.r6.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r6.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.r6.tb[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.r6.S_rel[1,1];
//   Real robot.mechanics.r6.S_rel[1,2];
//   Real robot.mechanics.r6.S_rel[1,3];
//   Real robot.mechanics.r6.S_rel[2,1];
//   Real robot.mechanics.r6.S_rel[2,2];
//   Real robot.mechanics.r6.S_rel[2,3];
//   Real robot.mechanics.r6.S_rel[3,1];
//   Real robot.mechanics.r6.S_rel[3,2];
//   Real robot.mechanics.r6.S_rel[3,3];
//   Real robot.mechanics.r6.r_rela[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.r6.r_rela[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.r6.r_rela[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.r6.v_rela[1](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r6.v_rela[2](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r6.v_rela[3](quantity = "Velocity", unit = "m/s");
//   Real robot.mechanics.r6.w_rela[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r6.w_rela[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r6.w_rela[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.mechanics.r6.a_rela[1](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r6.a_rela[2](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r6.a_rela[3](quantity = "Acceleration", unit = "m/s2");
//   Real robot.mechanics.r6.z_rela[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r6.z_rela[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r6.z_rela[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   parameter Real robot.mechanics.r6.n[1] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r6.n[2] = 1.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r6.n[3] = 0.0 "Axis of rotation resolved in frame_a (= same as in frame_b)";
//   parameter Real robot.mechanics.r6.q0 = 0.0 "Rotation angle offset (see info) [deg]";
//   parameter Boolean robot.mechanics.r6.startValueFixed = false "true, if start values of q, qd are fixed";
//   Real robot.mechanics.r6.q(quantity = "Angle", unit = "rad", displayUnit = "deg", fixed = robot.mechanics.r6.startValueFixed);
//   Real robot.mechanics.r6.qd(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", fixed = robot.mechanics.r6.startValueFixed);
//   Real robot.mechanics.r6.qdd(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.mechanics.r6.qq(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.mechanics.r6.nn[1];
//   Real robot.mechanics.r6.nn[2];
//   Real robot.mechanics.r6.nn[3];
//   Real robot.mechanics.r6.sinq;
//   Real robot.mechanics.r6.cosq;
//   Real robot.mechanics.r6.axis.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r6.axis.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.mechanics.r6.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.mechanics.r6.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   input Real robot.mechanics.b0.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b0.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b0.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b0.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b0.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b0.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b0.frame_a.S[1,1] = robot.mechanics.b0.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[1,2] = robot.mechanics.b0.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[1,3] = robot.mechanics.b0.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[2,1] = robot.mechanics.b0.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[2,2] = robot.mechanics.b0.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[2,3] = robot.mechanics.b0.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[3,1] = robot.mechanics.b0.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[3,2] = robot.mechanics.b0.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.S[3,3] = robot.mechanics.b0.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b0.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b0.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b0.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b0.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b0.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b0.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b0.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b0.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b0.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b0.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b0.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b0.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b0.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b0.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b0.fa[1];
//   Real robot.mechanics.b0.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b0.fa[2];
//   Real robot.mechanics.b0.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b0.fa[3];
//   Real robot.mechanics.b0.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b0.ta[1];
//   Real robot.mechanics.b0.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b0.ta[2];
//   Real robot.mechanics.b0.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b0.ta[3];
//   protected Real robot.mechanics.b0.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b0.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b0.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b0.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b0.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b0.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b0.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b0.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b0.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b0.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b0.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b0.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b0.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b0.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b0.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b0.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b0.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b0.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b0.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b0.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b0.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b0.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b0.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b0.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b0.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b0.Shape = "cylinder" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b0.r0[1] = 0.0 "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b0.r0[2] = -0.4 "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b0.r0[3] = 0.0 "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b0.LengthDirection[1] = 0.0 "Vector in length direction";
//   parameter Real robot.mechanics.b0.LengthDirection[2] = 1.0 "Vector in length direction";
//   parameter Real robot.mechanics.b0.LengthDirection[3] = 0.0 "Vector in length direction";
//   parameter Real robot.mechanics.b0.WidthDirection[1] = 1.0 "Vector in width direction";
//   parameter Real robot.mechanics.b0.WidthDirection[2] = 0.0 "Vector in width direction";
//   parameter Real robot.mechanics.b0.WidthDirection[3] = 0.0 "Vector in width direction";
//   parameter Real robot.mechanics.b0.Length = 0.225 "Length of shape [m]";
//   parameter Real robot.mechanics.b0.Width = 0.3 "Width of shape [m]";
//   parameter Real robot.mechanics.b0.Height = 0.3 "Height of shape [m]";
//   parameter Real robot.mechanics.b0.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b0.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b0.Material[3] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b0.Material[4] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b0.Extra = 0.0 "Additional parameter for cone and pipe";
//   Real robot.mechanics.b0.nLength[1];
//   Real robot.mechanics.b0.nLength[2];
//   Real robot.mechanics.b0.nLength[3];
//   Real robot.mechanics.b0.nWidth[1];
//   Real robot.mechanics.b0.nWidth[2];
//   Real robot.mechanics.b0.nWidth[3];
//   Real robot.mechanics.b0.nHeight[1];
//   Real robot.mechanics.b0.nHeight[2];
//   Real robot.mechanics.b0.nHeight[3];
//   parameter Real robot.mechanics.b0.vis.r0[1] = robot.mechanics.b0.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b0.vis.r0[2] = robot.mechanics.b0.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b0.vis.r0[3] = robot.mechanics.b0.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b0.vis.Length = robot.mechanics.b0.Length "Length of visual object.";
//   parameter Real robot.mechanics.b0.vis.Width = robot.mechanics.b0.Width "Width of visual object.";
//   parameter Real robot.mechanics.b0.vis.Height = robot.mechanics.b0.Height "Height of visual object.";
//   parameter Real robot.mechanics.b0.vis.LengthDirection[1] = robot.mechanics.b0.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b0.vis.LengthDirection[2] = robot.mechanics.b0.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b0.vis.LengthDirection[3] = robot.mechanics.b0.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b0.vis.WidthDirection[1] = robot.mechanics.b0.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b0.vis.WidthDirection[2] = robot.mechanics.b0.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b0.vis.WidthDirection[3] = robot.mechanics.b0.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b0.vis.Shape = robot.mechanics.b0.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b0.vis.Material[1] = robot.mechanics.b0.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b0.vis.Material[2] = robot.mechanics.b0.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b0.vis.Material[3] = robot.mechanics.b0.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b0.vis.Material[4] = robot.mechanics.b0.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b0.vis.Extra = robot.mechanics.b0.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b0.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b0.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b0.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b0.vis.nLength[1];
//   Real robot.mechanics.b0.vis.nLength[2];
//   Real robot.mechanics.b0.vis.nLength[3];
//   Real robot.mechanics.b0.vis.nWidth[1];
//   Real robot.mechanics.b0.vis.nWidth[2];
//   Real robot.mechanics.b0.vis.nWidth[3];
//   Real robot.mechanics.b0.vis.nHeight[1];
//   Real robot.mechanics.b0.vis.nHeight[2];
//   Real robot.mechanics.b0.vis.nHeight[3];
//   parameter String robot.mechanics.b0.vis.mcShape.shapeType = robot.mechanics.b0.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b0.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b0.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b0.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b0.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b0.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.lengthDirection[1] = robot.mechanics.b0.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.lengthDirection[2] = robot.mechanics.b0.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.lengthDirection[3] = robot.mechanics.b0.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.widthDirection[1] = robot.mechanics.b0.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.widthDirection[2] = robot.mechanics.b0.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.widthDirection[3] = robot.mechanics.b0.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b0.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b0.vis.Length "Length of visual object";
//   input Real robot.mechanics.b0.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b0.vis.Width "Width of visual object";
//   input Real robot.mechanics.b0.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b0.vis.Height "Height of visual object";
//   input Real robot.mechanics.b0.vis.mcShape.extra = robot.mechanics.b0.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b0.vis.mcShape.color[1] = 255.0 * robot.mechanics.b0.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b0.vis.mcShape.color[2] = 255.0 * robot.mechanics.b0.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b0.vis.mcShape.color[3] = 255.0 * robot.mechanics.b0.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b0.vis.mcShape.specularCoefficient = robot.mechanics.b0.vis.Material[4];
//   input Real robot.mechanics.b0.vis.mcShape.S[1,1] = robot.mechanics.b0.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[1,2] = robot.mechanics.b0.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[1,3] = robot.mechanics.b0.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[2,1] = robot.mechanics.b0.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[2,2] = robot.mechanics.b0.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[2,3] = robot.mechanics.b0.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[3,1] = robot.mechanics.b0.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[3,2] = robot.mechanics.b0.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b0.vis.mcShape.S[3,3] = robot.mechanics.b0.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[1,1] = robot.mechanics.b0.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[1,2] = robot.mechanics.b0.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[1,3] = robot.mechanics.b0.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[2,1] = robot.mechanics.b0.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[2,2] = robot.mechanics.b0.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[2,3] = robot.mechanics.b0.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[3,1] = robot.mechanics.b0.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[3,2] = robot.mechanics.b0.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b0.vis.mcShape.Sshape[3,3] = robot.mechanics.b0.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b0.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b0.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b0.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b0.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b0.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b0.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b0.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b0.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b0.vis.mcShape.lengthDirection[1] / robot.mechanics.b0.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b0.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b0.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b0.vis.mcShape.lengthDirection[2] / robot.mechanics.b0.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b0.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b0.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b0.vis.mcShape.lengthDirection[3] / robot.mechanics.b0.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b0.vis.mcShape.n_z_aux[1] = robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.widthDirection[3] - robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b0.vis.mcShape.n_z_aux[2] = robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.widthDirection[1] - robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b0.vis.mcShape.n_z_aux[3] = robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.widthDirection[2] - robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b0.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b0.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b0.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b0.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b0.vis.mcShape.widthDirection[1],robot.mechanics.b0.vis.mcShape.widthDirection[2],robot.mechanics.b0.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b0.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b0.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b0.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b0.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b0.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b0.vis.mcShape.widthDirection[1],robot.mechanics.b0.vis.mcShape.widthDirection[2],robot.mechanics.b0.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b0.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b0.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b0.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b0.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b0.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b0.vis.mcShape.widthDirection[1],robot.mechanics.b0.vis.mcShape.widthDirection[2],robot.mechanics.b0.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b0.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b0.vis.mcShape.e_x[1],robot.mechanics.b0.vis.mcShape.e_x[2],robot.mechanics.b0.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b0.vis.mcShape.e_z[1] = robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.e_y[3] - robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.e_y[2];
//   Real robot.mechanics.b0.vis.mcShape.e_z[2] = robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.e_y[1] - robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.e_y[3];
//   Real robot.mechanics.b0.vis.mcShape.e_z[3] = robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.e_y[2] - robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b0.vis.mcShape.Form;
//   protected output Real robot.mechanics.b0.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b0.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b0.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b0.vis.mcShape.Material;
//   protected output Real robot.mechanics.b0.vis.mcShape.Extra;
//   constant Real robot.mechanics.b1.pi = 3.14159265358979;
//   constant Real robot.mechanics.b1.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b1.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.frame_a.S[1,1] = robot.mechanics.b1.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[1,2] = robot.mechanics.b1.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[1,3] = robot.mechanics.b1.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[2,1] = robot.mechanics.b1.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[2,2] = robot.mechanics.b1.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[2,3] = robot.mechanics.b1.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[3,1] = robot.mechanics.b1.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[3,2] = robot.mechanics.b1.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.S[3,3] = robot.mechanics.b1.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b1.fa[1];
//   Real robot.mechanics.b1.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b1.fa[2];
//   Real robot.mechanics.b1.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b1.fa[3];
//   Real robot.mechanics.b1.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.ta[1];
//   Real robot.mechanics.b1.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.ta[2];
//   Real robot.mechanics.b1.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.ta[3];
//   output Real robot.mechanics.b1.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.frame_b.S[1,1] = robot.mechanics.b1.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[1,2] = robot.mechanics.b1.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[1,3] = robot.mechanics.b1.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[2,1] = robot.mechanics.b1.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[2,2] = robot.mechanics.b1.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[2,3] = robot.mechanics.b1.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[3,1] = robot.mechanics.b1.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[3,2] = robot.mechanics.b1.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.S[3,3] = robot.mechanics.b1.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b1.fb[1];
//   Real robot.mechanics.b1.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b1.fb[2];
//   Real robot.mechanics.b1.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b1.fb[3];
//   Real robot.mechanics.b1.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.tb[1];
//   Real robot.mechanics.b1.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.tb[2];
//   Real robot.mechanics.b1.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.tb[3];
//   protected Real robot.mechanics.b1.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b1.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.rCM[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Mass of body";
//   parameter Real robot.mechanics.b1.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 1.16 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b1.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b1.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String robot.mechanics.b1.Shape = "box" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b1.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b1.r0[2](quantity = "Length", unit = "m") = -0.175 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b1.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b1.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.WidthDirection[1](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b1.Length(quantity = "Length", unit = "m") = 0.25 "Length of shape";
//   parameter Real robot.mechanics.b1.Width(quantity = "Length", unit = "m") = 0.15 "Width of shape";
//   parameter Real robot.mechanics.b1.Height(quantity = "Length", unit = "m") = 0.2 "Height of shape";
//   parameter Real robot.mechanics.b1.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real robot.mechanics.b1.body.pi = 3.14159265358979;
//   constant Real robot.mechanics.b1.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b1.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[1,1] = robot.mechanics.b1.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[1,2] = robot.mechanics.b1.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[1,3] = robot.mechanics.b1.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[2,1] = robot.mechanics.b1.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[2,2] = robot.mechanics.b1.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[2,3] = robot.mechanics.b1.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[3,1] = robot.mechanics.b1.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[3,2] = robot.mechanics.b1.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.S[3,3] = robot.mechanics.b1.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b1.body.fa[1];
//   Real robot.mechanics.b1.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b1.body.fa[2];
//   Real robot.mechanics.b1.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b1.body.fa[3];
//   Real robot.mechanics.b1.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.ta[1];
//   Real robot.mechanics.b1.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.ta[2];
//   Real robot.mechanics.b1.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.ta[3];
//   output Real robot.mechanics.b1.body.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.body.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.body.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[1,1] = robot.mechanics.b1.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[1,2] = robot.mechanics.b1.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[1,3] = robot.mechanics.b1.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[2,1] = robot.mechanics.b1.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[2,2] = robot.mechanics.b1.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[2,3] = robot.mechanics.b1.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[3,1] = robot.mechanics.b1.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[3,2] = robot.mechanics.b1.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.S[3,3] = robot.mechanics.b1.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.fb[1];
//   Real robot.mechanics.b1.body.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.fb[2];
//   Real robot.mechanics.b1.body.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.fb[3];
//   Real robot.mechanics.b1.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.tb[1];
//   Real robot.mechanics.b1.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.tb[2];
//   Real robot.mechanics.b1.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.tb[3];
//   protected Real robot.mechanics.b1.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.body.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.body.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b1.body.r[1](quantity = "Length", unit = "m") = robot.mechanics.b1.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.r[2](quantity = "Length", unit = "m") = robot.mechanics.b1.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.r[3](quantity = "Length", unit = "m") = robot.mechanics.b1.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.rCM[1](quantity = "Length", unit = "m") = robot.mechanics.b1.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.rCM[2](quantity = "Length", unit = "m") = robot.mechanics.b1.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.rCM[3](quantity = "Length", unit = "m") = robot.mechanics.b1.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.m(quantity = "Mass", unit = "kg", min = 0.0) = robot.mechanics.b1.m "Mass of body";
//   parameter Real robot.mechanics.b1.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I11 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I22 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b1.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I33 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b1.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I21 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I31 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b1.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b1.I32 "(3,2) element of inertia tensor";
//   constant Real robot.mechanics.b1.body.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.b1.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b1.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[1,1] = robot.mechanics.b1.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[1,2] = robot.mechanics.b1.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[1,3] = robot.mechanics.b1.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[2,1] = robot.mechanics.b1.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[2,2] = robot.mechanics.b1.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[2,3] = robot.mechanics.b1.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[3,1] = robot.mechanics.b1.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[3,2] = robot.mechanics.b1.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.S[3,3] = robot.mechanics.b1.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b1.body.frameTranslation.fa[1];
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b1.body.frameTranslation.fa[2];
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b1.body.frameTranslation.fa[3];
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.frameTranslation.ta[1];
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.frameTranslation.ta[2];
//   Real robot.mechanics.b1.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.frameTranslation.ta[3];
//   output Real robot.mechanics.b1.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b1.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[1,1] = robot.mechanics.b1.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[1,2] = robot.mechanics.b1.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[1,3] = robot.mechanics.b1.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[2,1] = robot.mechanics.b1.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[2,2] = robot.mechanics.b1.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[2,3] = robot.mechanics.b1.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[3,1] = robot.mechanics.b1.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[3,2] = robot.mechanics.b1.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.S[3,3] = robot.mechanics.b1.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.frameTranslation.fb[1];
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.frameTranslation.fb[2];
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b1.body.frameTranslation.fb[3];
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.frameTranslation.tb[1];
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.frameTranslation.tb[2];
//   Real robot.mechanics.b1.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b1.body.frameTranslation.tb[3];
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b1.body.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b1.body.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.b1.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.b1.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[1,1] = robot.mechanics.b1.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[1,2] = robot.mechanics.b1.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[1,3] = robot.mechanics.b1.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[2,1] = robot.mechanics.b1.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[2,2] = robot.mechanics.b1.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[2,3] = robot.mechanics.b1.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[3,1] = robot.mechanics.b1.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[3,2] = robot.mechanics.b1.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.S[3,3] = robot.mechanics.b1.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.body.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b1.body.body.fa[1];
//   Real robot.mechanics.b1.body.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b1.body.body.fa[2];
//   Real robot.mechanics.b1.body.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b1.body.body.fa[3];
//   Real robot.mechanics.b1.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.body.ta[1];
//   Real robot.mechanics.b1.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.body.ta[2];
//   Real robot.mechanics.b1.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.body.body.ta[3];
//   protected Real robot.mechanics.b1.body.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.body.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.body.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.body.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.b1.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.b1.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.b1.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.b1.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.b1.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b1.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real robot.mechanics.b1.vis.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.vis.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b1.vis.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[1,1] = robot.mechanics.b1.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[1,2] = robot.mechanics.b1.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[1,3] = robot.mechanics.b1.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[2,1] = robot.mechanics.b1.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[2,2] = robot.mechanics.b1.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[2,3] = robot.mechanics.b1.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[3,1] = robot.mechanics.b1.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[3,2] = robot.mechanics.b1.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.S[3,3] = robot.mechanics.b1.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b1.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b1.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b1.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b1.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b1.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b1.vis.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b1.vis.fa[1];
//   Real robot.mechanics.b1.vis.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b1.vis.fa[2];
//   Real robot.mechanics.b1.vis.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b1.vis.fa[3];
//   Real robot.mechanics.b1.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.vis.ta[1];
//   Real robot.mechanics.b1.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.vis.ta[2];
//   Real robot.mechanics.b1.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b1.vis.ta[3];
//   protected Real robot.mechanics.b1.vis.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b1.vis.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b1.vis.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b1.vis.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b1.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b1.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b1.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b1.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b1.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b1.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b1.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b1.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b1.vis.Shape = robot.mechanics.b1.Shape "Name of shape (see info text)";
//   parameter Real robot.mechanics.b1.vis.r0[1] = robot.mechanics.b1.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b1.vis.r0[2] = robot.mechanics.b1.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b1.vis.r0[3] = robot.mechanics.b1.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b1.vis.LengthDirection[1] = robot.mechanics.b1.LengthDirection[1] "Vector in length direction";
//   parameter Real robot.mechanics.b1.vis.LengthDirection[2] = robot.mechanics.b1.LengthDirection[2] "Vector in length direction";
//   parameter Real robot.mechanics.b1.vis.LengthDirection[3] = robot.mechanics.b1.LengthDirection[3] "Vector in length direction";
//   parameter Real robot.mechanics.b1.vis.WidthDirection[1] = robot.mechanics.b1.WidthDirection[1] "Vector in width direction";
//   parameter Real robot.mechanics.b1.vis.WidthDirection[2] = robot.mechanics.b1.WidthDirection[2] "Vector in width direction";
//   parameter Real robot.mechanics.b1.vis.WidthDirection[3] = robot.mechanics.b1.WidthDirection[3] "Vector in width direction";
//   parameter Real robot.mechanics.b1.vis.Length = robot.mechanics.b1.Length "Length of shape [m]";
//   parameter Real robot.mechanics.b1.vis.Width = robot.mechanics.b1.Width "Width of shape [m]";
//   parameter Real robot.mechanics.b1.vis.Height = robot.mechanics.b1.Height "Height of shape [m]";
//   parameter Real robot.mechanics.b1.vis.Material[1] = robot.mechanics.b1.Material[1] "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.vis.Material[2] = robot.mechanics.b1.Material[2] "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.vis.Material[3] = robot.mechanics.b1.Material[3] "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.vis.Material[4] = robot.mechanics.b1.Material[4] "Color and specular coefficient";
//   parameter Real robot.mechanics.b1.vis.Extra = robot.mechanics.b1.Extra "Additional parameter for cone and pipe";
//   Real robot.mechanics.b1.vis.nLength[1];
//   Real robot.mechanics.b1.vis.nLength[2];
//   Real robot.mechanics.b1.vis.nLength[3];
//   Real robot.mechanics.b1.vis.nWidth[1];
//   Real robot.mechanics.b1.vis.nWidth[2];
//   Real robot.mechanics.b1.vis.nWidth[3];
//   Real robot.mechanics.b1.vis.nHeight[1];
//   Real robot.mechanics.b1.vis.nHeight[2];
//   Real robot.mechanics.b1.vis.nHeight[3];
//   parameter Real robot.mechanics.b1.vis.vis.r0[1] = robot.mechanics.b1.vis.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.r0[2] = robot.mechanics.b1.vis.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.r0[3] = robot.mechanics.b1.vis.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.Length = robot.mechanics.b1.vis.Length "Length of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.Width = robot.mechanics.b1.vis.Width "Width of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.Height = robot.mechanics.b1.vis.Height "Height of visual object.";
//   parameter Real robot.mechanics.b1.vis.vis.LengthDirection[1] = robot.mechanics.b1.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b1.vis.vis.LengthDirection[2] = robot.mechanics.b1.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b1.vis.vis.LengthDirection[3] = robot.mechanics.b1.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b1.vis.vis.WidthDirection[1] = robot.mechanics.b1.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b1.vis.vis.WidthDirection[2] = robot.mechanics.b1.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b1.vis.vis.WidthDirection[3] = robot.mechanics.b1.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b1.vis.vis.Shape = robot.mechanics.b1.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b1.vis.vis.Material[1] = robot.mechanics.b1.vis.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b1.vis.vis.Material[2] = robot.mechanics.b1.vis.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b1.vis.vis.Material[3] = robot.mechanics.b1.vis.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b1.vis.vis.Material[4] = robot.mechanics.b1.vis.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b1.vis.vis.Extra = robot.mechanics.b1.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b1.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b1.vis.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b1.vis.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b1.vis.vis.nLength[1];
//   Real robot.mechanics.b1.vis.vis.nLength[2];
//   Real robot.mechanics.b1.vis.vis.nLength[3];
//   Real robot.mechanics.b1.vis.vis.nWidth[1];
//   Real robot.mechanics.b1.vis.vis.nWidth[2];
//   Real robot.mechanics.b1.vis.vis.nWidth[3];
//   Real robot.mechanics.b1.vis.vis.nHeight[1];
//   Real robot.mechanics.b1.vis.vis.nHeight[2];
//   Real robot.mechanics.b1.vis.vis.nHeight[3];
//   parameter String robot.mechanics.b1.vis.vis.mcShape.shapeType = robot.mechanics.b1.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.lengthDirection[1] = robot.mechanics.b1.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.lengthDirection[2] = robot.mechanics.b1.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.lengthDirection[3] = robot.mechanics.b1.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.widthDirection[1] = robot.mechanics.b1.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.widthDirection[2] = robot.mechanics.b1.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.widthDirection[3] = robot.mechanics.b1.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b1.vis.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.Length "Length of visual object";
//   input Real robot.mechanics.b1.vis.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.Width "Width of visual object";
//   input Real robot.mechanics.b1.vis.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b1.vis.vis.Height "Height of visual object";
//   input Real robot.mechanics.b1.vis.vis.mcShape.extra = robot.mechanics.b1.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b1.vis.vis.mcShape.color[1] = 255.0 * robot.mechanics.b1.vis.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b1.vis.vis.mcShape.color[2] = 255.0 * robot.mechanics.b1.vis.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b1.vis.vis.mcShape.color[3] = 255.0 * robot.mechanics.b1.vis.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b1.vis.vis.mcShape.specularCoefficient = robot.mechanics.b1.vis.vis.Material[4];
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[1,1] = robot.mechanics.b1.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[1,2] = robot.mechanics.b1.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[1,3] = robot.mechanics.b1.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[2,1] = robot.mechanics.b1.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[2,2] = robot.mechanics.b1.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[2,3] = robot.mechanics.b1.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[3,1] = robot.mechanics.b1.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[3,2] = robot.mechanics.b1.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b1.vis.vis.mcShape.S[3,3] = robot.mechanics.b1.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b1.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b1.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b1.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b1.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b1.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b1.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b1.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b1.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b1.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b1.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b1.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b1.vis.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b1.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b1.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b1.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b1.vis.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b1.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b1.vis.vis.mcShape.lengthDirection[1] / robot.mechanics.b1.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b1.vis.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b1.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b1.vis.vis.mcShape.lengthDirection[2] / robot.mechanics.b1.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b1.vis.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b1.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b1.vis.vis.mcShape.lengthDirection[3] / robot.mechanics.b1.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b1.vis.vis.mcShape.n_z_aux[1] = robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[3] - robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b1.vis.vis.mcShape.n_z_aux[2] = robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[1] - robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b1.vis.vis.mcShape.n_z_aux[3] = robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[2] - robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b1.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b1.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b1.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b1.vis.vis.mcShape.widthDirection[1],robot.mechanics.b1.vis.vis.mcShape.widthDirection[2],robot.mechanics.b1.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b1.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b1.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b1.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b1.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b1.vis.vis.mcShape.widthDirection[1],robot.mechanics.b1.vis.vis.mcShape.widthDirection[2],robot.mechanics.b1.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b1.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b1.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b1.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b1.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b1.vis.vis.mcShape.widthDirection[1],robot.mechanics.b1.vis.vis.mcShape.widthDirection[2],robot.mechanics.b1.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b1.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b1.vis.vis.mcShape.e_x[1],robot.mechanics.b1.vis.vis.mcShape.e_x[2],robot.mechanics.b1.vis.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_z[1] = robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.e_y[3] - robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.e_y[2];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_z[2] = robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.e_y[1] - robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.e_y[3];
//   Real robot.mechanics.b1.vis.vis.mcShape.e_z[3] = robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.e_y[2] - robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.Form;
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.Material;
//   protected output Real robot.mechanics.b1.vis.vis.mcShape.Extra;
//   constant Real robot.mechanics.b2.pi = 3.14159265358979;
//   constant Real robot.mechanics.b2.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b2.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.frame_a.S[1,1] = robot.mechanics.b2.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[1,2] = robot.mechanics.b2.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[1,3] = robot.mechanics.b2.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[2,1] = robot.mechanics.b2.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[2,2] = robot.mechanics.b2.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[2,3] = robot.mechanics.b2.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[3,1] = robot.mechanics.b2.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[3,2] = robot.mechanics.b2.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.S[3,3] = robot.mechanics.b2.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b2.fa[1];
//   Real robot.mechanics.b2.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b2.fa[2];
//   Real robot.mechanics.b2.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b2.fa[3];
//   Real robot.mechanics.b2.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.ta[1];
//   Real robot.mechanics.b2.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.ta[2];
//   Real robot.mechanics.b2.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.ta[3];
//   output Real robot.mechanics.b2.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.frame_b.S[1,1] = robot.mechanics.b2.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[1,2] = robot.mechanics.b2.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[1,3] = robot.mechanics.b2.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[2,1] = robot.mechanics.b2.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[2,2] = robot.mechanics.b2.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[2,3] = robot.mechanics.b2.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[3,1] = robot.mechanics.b2.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[3,2] = robot.mechanics.b2.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.S[3,3] = robot.mechanics.b2.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b2.fb[1];
//   Real robot.mechanics.b2.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b2.fb[2];
//   Real robot.mechanics.b2.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b2.fb[3];
//   Real robot.mechanics.b2.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.tb[1];
//   Real robot.mechanics.b2.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.tb[2];
//   Real robot.mechanics.b2.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.tb[3];
//   protected Real robot.mechanics.b2.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b2.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.r[2](quantity = "Length", unit = "m") = 0.5 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.rCM[1](quantity = "Length", unit = "m") = 0.172 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.rCM[2](quantity = "Length", unit = "m") = 0.205 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.m(quantity = "Mass", unit = "kg", min = 0.0) = 56.5 "Mass of body";
//   parameter Real robot.mechanics.b2.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 2.58 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.64 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b2.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 2.73 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b2.I21(quantity = "MomentOfInertia", unit = "kg.m2") = -0.46 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String robot.mechanics.b2.Shape = "beam" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b2.r0[1](quantity = "Length", unit = "m") = 0.15 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b2.r0[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b2.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b2.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.WidthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.WidthDirection[3](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b2.Length(quantity = "Length", unit = "m") = 0.5 "Length of shape";
//   parameter Real robot.mechanics.b2.Width(quantity = "Length", unit = "m") = 0.2 "Width of shape";
//   parameter Real robot.mechanics.b2.Height(quantity = "Length", unit = "m") = 0.15 "Height of shape";
//   parameter Real robot.mechanics.b2.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.Material[2] = 0.7 "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.Material[4] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real robot.mechanics.b2.body.pi = 3.14159265358979;
//   constant Real robot.mechanics.b2.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b2.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[1,1] = robot.mechanics.b2.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[1,2] = robot.mechanics.b2.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[1,3] = robot.mechanics.b2.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[2,1] = robot.mechanics.b2.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[2,2] = robot.mechanics.b2.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[2,3] = robot.mechanics.b2.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[3,1] = robot.mechanics.b2.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[3,2] = robot.mechanics.b2.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.S[3,3] = robot.mechanics.b2.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b2.body.fa[1];
//   Real robot.mechanics.b2.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b2.body.fa[2];
//   Real robot.mechanics.b2.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b2.body.fa[3];
//   Real robot.mechanics.b2.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.ta[1];
//   Real robot.mechanics.b2.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.ta[2];
//   Real robot.mechanics.b2.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.ta[3];
//   output Real robot.mechanics.b2.body.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.body.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.body.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[1,1] = robot.mechanics.b2.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[1,2] = robot.mechanics.b2.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[1,3] = robot.mechanics.b2.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[2,1] = robot.mechanics.b2.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[2,2] = robot.mechanics.b2.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[2,3] = robot.mechanics.b2.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[3,1] = robot.mechanics.b2.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[3,2] = robot.mechanics.b2.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.S[3,3] = robot.mechanics.b2.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.fb[1];
//   Real robot.mechanics.b2.body.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.fb[2];
//   Real robot.mechanics.b2.body.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.fb[3];
//   Real robot.mechanics.b2.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.tb[1];
//   Real robot.mechanics.b2.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.tb[2];
//   Real robot.mechanics.b2.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.tb[3];
//   protected Real robot.mechanics.b2.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.body.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.body.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b2.body.r[1](quantity = "Length", unit = "m") = robot.mechanics.b2.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.r[2](quantity = "Length", unit = "m") = robot.mechanics.b2.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.r[3](quantity = "Length", unit = "m") = robot.mechanics.b2.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.rCM[1](quantity = "Length", unit = "m") = robot.mechanics.b2.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.rCM[2](quantity = "Length", unit = "m") = robot.mechanics.b2.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.rCM[3](quantity = "Length", unit = "m") = robot.mechanics.b2.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.m(quantity = "Mass", unit = "kg", min = 0.0) = robot.mechanics.b2.m "Mass of body";
//   parameter Real robot.mechanics.b2.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I11 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I22 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b2.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I33 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b2.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I21 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I31 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b2.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b2.I32 "(3,2) element of inertia tensor";
//   constant Real robot.mechanics.b2.body.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.b2.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b2.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[1,1] = robot.mechanics.b2.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[1,2] = robot.mechanics.b2.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[1,3] = robot.mechanics.b2.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[2,1] = robot.mechanics.b2.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[2,2] = robot.mechanics.b2.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[2,3] = robot.mechanics.b2.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[3,1] = robot.mechanics.b2.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[3,2] = robot.mechanics.b2.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.S[3,3] = robot.mechanics.b2.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b2.body.frameTranslation.fa[1];
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b2.body.frameTranslation.fa[2];
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b2.body.frameTranslation.fa[3];
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.frameTranslation.ta[1];
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.frameTranslation.ta[2];
//   Real robot.mechanics.b2.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.frameTranslation.ta[3];
//   output Real robot.mechanics.b2.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b2.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[1,1] = robot.mechanics.b2.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[1,2] = robot.mechanics.b2.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[1,3] = robot.mechanics.b2.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[2,1] = robot.mechanics.b2.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[2,2] = robot.mechanics.b2.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[2,3] = robot.mechanics.b2.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[3,1] = robot.mechanics.b2.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[3,2] = robot.mechanics.b2.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.S[3,3] = robot.mechanics.b2.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.frameTranslation.fb[1];
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.frameTranslation.fb[2];
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b2.body.frameTranslation.fb[3];
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.frameTranslation.tb[1];
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.frameTranslation.tb[2];
//   Real robot.mechanics.b2.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b2.body.frameTranslation.tb[3];
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b2.body.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b2.body.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.b2.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.b2.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[1,1] = robot.mechanics.b2.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[1,2] = robot.mechanics.b2.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[1,3] = robot.mechanics.b2.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[2,1] = robot.mechanics.b2.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[2,2] = robot.mechanics.b2.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[2,3] = robot.mechanics.b2.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[3,1] = robot.mechanics.b2.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[3,2] = robot.mechanics.b2.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.S[3,3] = robot.mechanics.b2.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.body.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b2.body.body.fa[1];
//   Real robot.mechanics.b2.body.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b2.body.body.fa[2];
//   Real robot.mechanics.b2.body.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b2.body.body.fa[3];
//   Real robot.mechanics.b2.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.body.ta[1];
//   Real robot.mechanics.b2.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.body.ta[2];
//   Real robot.mechanics.b2.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.body.body.ta[3];
//   protected Real robot.mechanics.b2.body.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.body.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.body.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.body.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.b2.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.b2.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.b2.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.b2.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.b2.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b2.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real robot.mechanics.b2.vis.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.vis.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b2.vis.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[1,1] = robot.mechanics.b2.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[1,2] = robot.mechanics.b2.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[1,3] = robot.mechanics.b2.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[2,1] = robot.mechanics.b2.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[2,2] = robot.mechanics.b2.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[2,3] = robot.mechanics.b2.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[3,1] = robot.mechanics.b2.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[3,2] = robot.mechanics.b2.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.S[3,3] = robot.mechanics.b2.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b2.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b2.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b2.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b2.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b2.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b2.vis.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b2.vis.fa[1];
//   Real robot.mechanics.b2.vis.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b2.vis.fa[2];
//   Real robot.mechanics.b2.vis.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b2.vis.fa[3];
//   Real robot.mechanics.b2.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.vis.ta[1];
//   Real robot.mechanics.b2.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.vis.ta[2];
//   Real robot.mechanics.b2.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b2.vis.ta[3];
//   protected Real robot.mechanics.b2.vis.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b2.vis.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b2.vis.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b2.vis.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b2.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b2.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b2.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b2.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b2.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b2.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b2.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b2.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b2.vis.Shape = robot.mechanics.b2.Shape "Name of shape (see info text)";
//   parameter Real robot.mechanics.b2.vis.r0[1] = robot.mechanics.b2.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b2.vis.r0[2] = robot.mechanics.b2.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b2.vis.r0[3] = robot.mechanics.b2.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b2.vis.LengthDirection[1] = robot.mechanics.b2.LengthDirection[1] "Vector in length direction";
//   parameter Real robot.mechanics.b2.vis.LengthDirection[2] = robot.mechanics.b2.LengthDirection[2] "Vector in length direction";
//   parameter Real robot.mechanics.b2.vis.LengthDirection[3] = robot.mechanics.b2.LengthDirection[3] "Vector in length direction";
//   parameter Real robot.mechanics.b2.vis.WidthDirection[1] = robot.mechanics.b2.WidthDirection[1] "Vector in width direction";
//   parameter Real robot.mechanics.b2.vis.WidthDirection[2] = robot.mechanics.b2.WidthDirection[2] "Vector in width direction";
//   parameter Real robot.mechanics.b2.vis.WidthDirection[3] = robot.mechanics.b2.WidthDirection[3] "Vector in width direction";
//   parameter Real robot.mechanics.b2.vis.Length = robot.mechanics.b2.Length "Length of shape [m]";
//   parameter Real robot.mechanics.b2.vis.Width = robot.mechanics.b2.Width "Width of shape [m]";
//   parameter Real robot.mechanics.b2.vis.Height = robot.mechanics.b2.Height "Height of shape [m]";
//   parameter Real robot.mechanics.b2.vis.Material[1] = robot.mechanics.b2.Material[1] "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.vis.Material[2] = robot.mechanics.b2.Material[2] "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.vis.Material[3] = robot.mechanics.b2.Material[3] "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.vis.Material[4] = robot.mechanics.b2.Material[4] "Color and specular coefficient";
//   parameter Real robot.mechanics.b2.vis.Extra = robot.mechanics.b2.Extra "Additional parameter for cone and pipe";
//   Real robot.mechanics.b2.vis.nLength[1];
//   Real robot.mechanics.b2.vis.nLength[2];
//   Real robot.mechanics.b2.vis.nLength[3];
//   Real robot.mechanics.b2.vis.nWidth[1];
//   Real robot.mechanics.b2.vis.nWidth[2];
//   Real robot.mechanics.b2.vis.nWidth[3];
//   Real robot.mechanics.b2.vis.nHeight[1];
//   Real robot.mechanics.b2.vis.nHeight[2];
//   Real robot.mechanics.b2.vis.nHeight[3];
//   parameter Real robot.mechanics.b2.vis.vis.r0[1] = robot.mechanics.b2.vis.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.r0[2] = robot.mechanics.b2.vis.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.r0[3] = robot.mechanics.b2.vis.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.Length = robot.mechanics.b2.vis.Length "Length of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.Width = robot.mechanics.b2.vis.Width "Width of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.Height = robot.mechanics.b2.vis.Height "Height of visual object.";
//   parameter Real robot.mechanics.b2.vis.vis.LengthDirection[1] = robot.mechanics.b2.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b2.vis.vis.LengthDirection[2] = robot.mechanics.b2.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b2.vis.vis.LengthDirection[3] = robot.mechanics.b2.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b2.vis.vis.WidthDirection[1] = robot.mechanics.b2.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b2.vis.vis.WidthDirection[2] = robot.mechanics.b2.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b2.vis.vis.WidthDirection[3] = robot.mechanics.b2.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b2.vis.vis.Shape = robot.mechanics.b2.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b2.vis.vis.Material[1] = robot.mechanics.b2.vis.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b2.vis.vis.Material[2] = robot.mechanics.b2.vis.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b2.vis.vis.Material[3] = robot.mechanics.b2.vis.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b2.vis.vis.Material[4] = robot.mechanics.b2.vis.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b2.vis.vis.Extra = robot.mechanics.b2.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b2.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b2.vis.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b2.vis.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b2.vis.vis.nLength[1];
//   Real robot.mechanics.b2.vis.vis.nLength[2];
//   Real robot.mechanics.b2.vis.vis.nLength[3];
//   Real robot.mechanics.b2.vis.vis.nWidth[1];
//   Real robot.mechanics.b2.vis.vis.nWidth[2];
//   Real robot.mechanics.b2.vis.vis.nWidth[3];
//   Real robot.mechanics.b2.vis.vis.nHeight[1];
//   Real robot.mechanics.b2.vis.vis.nHeight[2];
//   Real robot.mechanics.b2.vis.vis.nHeight[3];
//   parameter String robot.mechanics.b2.vis.vis.mcShape.shapeType = robot.mechanics.b2.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.lengthDirection[1] = robot.mechanics.b2.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.lengthDirection[2] = robot.mechanics.b2.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.lengthDirection[3] = robot.mechanics.b2.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.widthDirection[1] = robot.mechanics.b2.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.widthDirection[2] = robot.mechanics.b2.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.widthDirection[3] = robot.mechanics.b2.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b2.vis.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.Length "Length of visual object";
//   input Real robot.mechanics.b2.vis.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.Width "Width of visual object";
//   input Real robot.mechanics.b2.vis.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b2.vis.vis.Height "Height of visual object";
//   input Real robot.mechanics.b2.vis.vis.mcShape.extra = robot.mechanics.b2.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b2.vis.vis.mcShape.color[1] = 255.0 * robot.mechanics.b2.vis.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b2.vis.vis.mcShape.color[2] = 255.0 * robot.mechanics.b2.vis.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b2.vis.vis.mcShape.color[3] = 255.0 * robot.mechanics.b2.vis.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b2.vis.vis.mcShape.specularCoefficient = robot.mechanics.b2.vis.vis.Material[4];
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[1,1] = robot.mechanics.b2.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[1,2] = robot.mechanics.b2.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[1,3] = robot.mechanics.b2.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[2,1] = robot.mechanics.b2.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[2,2] = robot.mechanics.b2.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[2,3] = robot.mechanics.b2.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[3,1] = robot.mechanics.b2.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[3,2] = robot.mechanics.b2.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b2.vis.vis.mcShape.S[3,3] = robot.mechanics.b2.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b2.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b2.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b2.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b2.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b2.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b2.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b2.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b2.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b2.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b2.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b2.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b2.vis.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b2.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b2.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b2.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b2.vis.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b2.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b2.vis.vis.mcShape.lengthDirection[1] / robot.mechanics.b2.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b2.vis.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b2.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b2.vis.vis.mcShape.lengthDirection[2] / robot.mechanics.b2.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b2.vis.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b2.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b2.vis.vis.mcShape.lengthDirection[3] / robot.mechanics.b2.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b2.vis.vis.mcShape.n_z_aux[1] = robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[3] - robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b2.vis.vis.mcShape.n_z_aux[2] = robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[1] - robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b2.vis.vis.mcShape.n_z_aux[3] = robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[2] - robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b2.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b2.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b2.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b2.vis.vis.mcShape.widthDirection[1],robot.mechanics.b2.vis.vis.mcShape.widthDirection[2],robot.mechanics.b2.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b2.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b2.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b2.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b2.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b2.vis.vis.mcShape.widthDirection[1],robot.mechanics.b2.vis.vis.mcShape.widthDirection[2],robot.mechanics.b2.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b2.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b2.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b2.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b2.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b2.vis.vis.mcShape.widthDirection[1],robot.mechanics.b2.vis.vis.mcShape.widthDirection[2],robot.mechanics.b2.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b2.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b2.vis.vis.mcShape.e_x[1],robot.mechanics.b2.vis.vis.mcShape.e_x[2],robot.mechanics.b2.vis.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_z[1] = robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.e_y[3] - robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.e_y[2];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_z[2] = robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.e_y[1] - robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.e_y[3];
//   Real robot.mechanics.b2.vis.vis.mcShape.e_z[3] = robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.e_y[2] - robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.Form;
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.Material;
//   protected output Real robot.mechanics.b2.vis.vis.mcShape.Extra;
//   constant Real robot.mechanics.b3.pi = 3.14159265358979;
//   constant Real robot.mechanics.b3.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b3.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.frame_a.S[1,1] = robot.mechanics.b3.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[1,2] = robot.mechanics.b3.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[1,3] = robot.mechanics.b3.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[2,1] = robot.mechanics.b3.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[2,2] = robot.mechanics.b3.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[2,3] = robot.mechanics.b3.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[3,1] = robot.mechanics.b3.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[3,2] = robot.mechanics.b3.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.S[3,3] = robot.mechanics.b3.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b3.fa[1];
//   Real robot.mechanics.b3.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b3.fa[2];
//   Real robot.mechanics.b3.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b3.fa[3];
//   Real robot.mechanics.b3.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.ta[1];
//   Real robot.mechanics.b3.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.ta[2];
//   Real robot.mechanics.b3.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.ta[3];
//   output Real robot.mechanics.b3.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.frame_b.S[1,1] = robot.mechanics.b3.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[1,2] = robot.mechanics.b3.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[1,3] = robot.mechanics.b3.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[2,1] = robot.mechanics.b3.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[2,2] = robot.mechanics.b3.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[2,3] = robot.mechanics.b3.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[3,1] = robot.mechanics.b3.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[3,2] = robot.mechanics.b3.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.S[3,3] = robot.mechanics.b3.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b3.fb[1];
//   Real robot.mechanics.b3.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b3.fb[2];
//   Real robot.mechanics.b3.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b3.fb[3];
//   Real robot.mechanics.b3.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.tb[1];
//   Real robot.mechanics.b3.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.tb[2];
//   Real robot.mechanics.b3.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.tb[3];
//   protected Real robot.mechanics.b3.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b3.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.rCM[1](quantity = "Length", unit = "m") = 0.064 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.rCM[2](quantity = "Length", unit = "m") = -0.034 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.m(quantity = "Mass", unit = "kg", min = 0.0) = 26.4 "Mass of body";
//   parameter Real robot.mechanics.b3.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 0.279 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.245 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b3.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 0.413 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b3.I21(quantity = "MomentOfInertia", unit = "kg.m2") = -0.07 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String robot.mechanics.b3.Shape = "box" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b3.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b3.r0[2](quantity = "Length", unit = "m") = -0.075 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b3.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b3.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.WidthDirection[1](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b3.Length(quantity = "Length", unit = "m") = 0.15 "Length of shape";
//   parameter Real robot.mechanics.b3.Width(quantity = "Length", unit = "m") = 0.15 "Width of shape";
//   parameter Real robot.mechanics.b3.Height(quantity = "Length", unit = "m") = 0.15 "Height of shape";
//   parameter Real robot.mechanics.b3.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real robot.mechanics.b3.body.pi = 3.14159265358979;
//   constant Real robot.mechanics.b3.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b3.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[1,1] = robot.mechanics.b3.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[1,2] = robot.mechanics.b3.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[1,3] = robot.mechanics.b3.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[2,1] = robot.mechanics.b3.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[2,2] = robot.mechanics.b3.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[2,3] = robot.mechanics.b3.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[3,1] = robot.mechanics.b3.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[3,2] = robot.mechanics.b3.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.S[3,3] = robot.mechanics.b3.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b3.body.fa[1];
//   Real robot.mechanics.b3.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b3.body.fa[2];
//   Real robot.mechanics.b3.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b3.body.fa[3];
//   Real robot.mechanics.b3.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.ta[1];
//   Real robot.mechanics.b3.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.ta[2];
//   Real robot.mechanics.b3.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.ta[3];
//   output Real robot.mechanics.b3.body.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.body.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.body.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[1,1] = robot.mechanics.b3.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[1,2] = robot.mechanics.b3.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[1,3] = robot.mechanics.b3.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[2,1] = robot.mechanics.b3.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[2,2] = robot.mechanics.b3.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[2,3] = robot.mechanics.b3.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[3,1] = robot.mechanics.b3.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[3,2] = robot.mechanics.b3.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.S[3,3] = robot.mechanics.b3.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.fb[1];
//   Real robot.mechanics.b3.body.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.fb[2];
//   Real robot.mechanics.b3.body.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.fb[3];
//   Real robot.mechanics.b3.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.tb[1];
//   Real robot.mechanics.b3.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.tb[2];
//   Real robot.mechanics.b3.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.tb[3];
//   protected Real robot.mechanics.b3.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.body.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.body.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b3.body.r[1](quantity = "Length", unit = "m") = robot.mechanics.b3.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.r[2](quantity = "Length", unit = "m") = robot.mechanics.b3.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.r[3](quantity = "Length", unit = "m") = robot.mechanics.b3.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.rCM[1](quantity = "Length", unit = "m") = robot.mechanics.b3.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.rCM[2](quantity = "Length", unit = "m") = robot.mechanics.b3.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.rCM[3](quantity = "Length", unit = "m") = robot.mechanics.b3.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.m(quantity = "Mass", unit = "kg", min = 0.0) = robot.mechanics.b3.m "Mass of body";
//   parameter Real robot.mechanics.b3.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I11 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I22 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b3.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I33 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b3.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I21 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I31 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b3.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b3.I32 "(3,2) element of inertia tensor";
//   constant Real robot.mechanics.b3.body.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.b3.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b3.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[1,1] = robot.mechanics.b3.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[1,2] = robot.mechanics.b3.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[1,3] = robot.mechanics.b3.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[2,1] = robot.mechanics.b3.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[2,2] = robot.mechanics.b3.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[2,3] = robot.mechanics.b3.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[3,1] = robot.mechanics.b3.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[3,2] = robot.mechanics.b3.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.S[3,3] = robot.mechanics.b3.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b3.body.frameTranslation.fa[1];
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b3.body.frameTranslation.fa[2];
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b3.body.frameTranslation.fa[3];
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.frameTranslation.ta[1];
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.frameTranslation.ta[2];
//   Real robot.mechanics.b3.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.frameTranslation.ta[3];
//   output Real robot.mechanics.b3.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b3.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[1,1] = robot.mechanics.b3.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[1,2] = robot.mechanics.b3.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[1,3] = robot.mechanics.b3.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[2,1] = robot.mechanics.b3.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[2,2] = robot.mechanics.b3.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[2,3] = robot.mechanics.b3.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[3,1] = robot.mechanics.b3.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[3,2] = robot.mechanics.b3.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.S[3,3] = robot.mechanics.b3.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.frameTranslation.fb[1];
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.frameTranslation.fb[2];
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b3.body.frameTranslation.fb[3];
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.frameTranslation.tb[1];
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.frameTranslation.tb[2];
//   Real robot.mechanics.b3.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b3.body.frameTranslation.tb[3];
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b3.body.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b3.body.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.b3.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.b3.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[1,1] = robot.mechanics.b3.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[1,2] = robot.mechanics.b3.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[1,3] = robot.mechanics.b3.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[2,1] = robot.mechanics.b3.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[2,2] = robot.mechanics.b3.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[2,3] = robot.mechanics.b3.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[3,1] = robot.mechanics.b3.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[3,2] = robot.mechanics.b3.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.S[3,3] = robot.mechanics.b3.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.body.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b3.body.body.fa[1];
//   Real robot.mechanics.b3.body.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b3.body.body.fa[2];
//   Real robot.mechanics.b3.body.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b3.body.body.fa[3];
//   Real robot.mechanics.b3.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.body.ta[1];
//   Real robot.mechanics.b3.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.body.ta[2];
//   Real robot.mechanics.b3.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.body.body.ta[3];
//   protected Real robot.mechanics.b3.body.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.body.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.body.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.body.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.b3.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.b3.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.b3.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.b3.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.b3.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b3.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real robot.mechanics.b3.vis.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.vis.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b3.vis.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[1,1] = robot.mechanics.b3.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[1,2] = robot.mechanics.b3.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[1,3] = robot.mechanics.b3.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[2,1] = robot.mechanics.b3.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[2,2] = robot.mechanics.b3.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[2,3] = robot.mechanics.b3.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[3,1] = robot.mechanics.b3.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[3,2] = robot.mechanics.b3.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.S[3,3] = robot.mechanics.b3.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b3.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b3.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b3.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b3.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b3.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b3.vis.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b3.vis.fa[1];
//   Real robot.mechanics.b3.vis.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b3.vis.fa[2];
//   Real robot.mechanics.b3.vis.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b3.vis.fa[3];
//   Real robot.mechanics.b3.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.vis.ta[1];
//   Real robot.mechanics.b3.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.vis.ta[2];
//   Real robot.mechanics.b3.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b3.vis.ta[3];
//   protected Real robot.mechanics.b3.vis.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b3.vis.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b3.vis.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b3.vis.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b3.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b3.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b3.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b3.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b3.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b3.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b3.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b3.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b3.vis.Shape = robot.mechanics.b3.Shape "Name of shape (see info text)";
//   parameter Real robot.mechanics.b3.vis.r0[1] = robot.mechanics.b3.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b3.vis.r0[2] = robot.mechanics.b3.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b3.vis.r0[3] = robot.mechanics.b3.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b3.vis.LengthDirection[1] = robot.mechanics.b3.LengthDirection[1] "Vector in length direction";
//   parameter Real robot.mechanics.b3.vis.LengthDirection[2] = robot.mechanics.b3.LengthDirection[2] "Vector in length direction";
//   parameter Real robot.mechanics.b3.vis.LengthDirection[3] = robot.mechanics.b3.LengthDirection[3] "Vector in length direction";
//   parameter Real robot.mechanics.b3.vis.WidthDirection[1] = robot.mechanics.b3.WidthDirection[1] "Vector in width direction";
//   parameter Real robot.mechanics.b3.vis.WidthDirection[2] = robot.mechanics.b3.WidthDirection[2] "Vector in width direction";
//   parameter Real robot.mechanics.b3.vis.WidthDirection[3] = robot.mechanics.b3.WidthDirection[3] "Vector in width direction";
//   parameter Real robot.mechanics.b3.vis.Length = robot.mechanics.b3.Length "Length of shape [m]";
//   parameter Real robot.mechanics.b3.vis.Width = robot.mechanics.b3.Width "Width of shape [m]";
//   parameter Real robot.mechanics.b3.vis.Height = robot.mechanics.b3.Height "Height of shape [m]";
//   parameter Real robot.mechanics.b3.vis.Material[1] = robot.mechanics.b3.Material[1] "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.vis.Material[2] = robot.mechanics.b3.Material[2] "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.vis.Material[3] = robot.mechanics.b3.Material[3] "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.vis.Material[4] = robot.mechanics.b3.Material[4] "Color and specular coefficient";
//   parameter Real robot.mechanics.b3.vis.Extra = robot.mechanics.b3.Extra "Additional parameter for cone and pipe";
//   Real robot.mechanics.b3.vis.nLength[1];
//   Real robot.mechanics.b3.vis.nLength[2];
//   Real robot.mechanics.b3.vis.nLength[3];
//   Real robot.mechanics.b3.vis.nWidth[1];
//   Real robot.mechanics.b3.vis.nWidth[2];
//   Real robot.mechanics.b3.vis.nWidth[3];
//   Real robot.mechanics.b3.vis.nHeight[1];
//   Real robot.mechanics.b3.vis.nHeight[2];
//   Real robot.mechanics.b3.vis.nHeight[3];
//   parameter Real robot.mechanics.b3.vis.vis.r0[1] = robot.mechanics.b3.vis.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.r0[2] = robot.mechanics.b3.vis.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.r0[3] = robot.mechanics.b3.vis.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.Length = robot.mechanics.b3.vis.Length "Length of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.Width = robot.mechanics.b3.vis.Width "Width of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.Height = robot.mechanics.b3.vis.Height "Height of visual object.";
//   parameter Real robot.mechanics.b3.vis.vis.LengthDirection[1] = robot.mechanics.b3.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b3.vis.vis.LengthDirection[2] = robot.mechanics.b3.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b3.vis.vis.LengthDirection[3] = robot.mechanics.b3.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b3.vis.vis.WidthDirection[1] = robot.mechanics.b3.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b3.vis.vis.WidthDirection[2] = robot.mechanics.b3.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b3.vis.vis.WidthDirection[3] = robot.mechanics.b3.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b3.vis.vis.Shape = robot.mechanics.b3.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b3.vis.vis.Material[1] = robot.mechanics.b3.vis.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b3.vis.vis.Material[2] = robot.mechanics.b3.vis.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b3.vis.vis.Material[3] = robot.mechanics.b3.vis.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b3.vis.vis.Material[4] = robot.mechanics.b3.vis.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b3.vis.vis.Extra = robot.mechanics.b3.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b3.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b3.vis.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b3.vis.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b3.vis.vis.nLength[1];
//   Real robot.mechanics.b3.vis.vis.nLength[2];
//   Real robot.mechanics.b3.vis.vis.nLength[3];
//   Real robot.mechanics.b3.vis.vis.nWidth[1];
//   Real robot.mechanics.b3.vis.vis.nWidth[2];
//   Real robot.mechanics.b3.vis.vis.nWidth[3];
//   Real robot.mechanics.b3.vis.vis.nHeight[1];
//   Real robot.mechanics.b3.vis.vis.nHeight[2];
//   Real robot.mechanics.b3.vis.vis.nHeight[3];
//   parameter String robot.mechanics.b3.vis.vis.mcShape.shapeType = robot.mechanics.b3.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.lengthDirection[1] = robot.mechanics.b3.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.lengthDirection[2] = robot.mechanics.b3.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.lengthDirection[3] = robot.mechanics.b3.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.widthDirection[1] = robot.mechanics.b3.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.widthDirection[2] = robot.mechanics.b3.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.widthDirection[3] = robot.mechanics.b3.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b3.vis.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.Length "Length of visual object";
//   input Real robot.mechanics.b3.vis.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.Width "Width of visual object";
//   input Real robot.mechanics.b3.vis.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b3.vis.vis.Height "Height of visual object";
//   input Real robot.mechanics.b3.vis.vis.mcShape.extra = robot.mechanics.b3.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b3.vis.vis.mcShape.color[1] = 255.0 * robot.mechanics.b3.vis.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b3.vis.vis.mcShape.color[2] = 255.0 * robot.mechanics.b3.vis.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b3.vis.vis.mcShape.color[3] = 255.0 * robot.mechanics.b3.vis.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b3.vis.vis.mcShape.specularCoefficient = robot.mechanics.b3.vis.vis.Material[4];
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[1,1] = robot.mechanics.b3.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[1,2] = robot.mechanics.b3.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[1,3] = robot.mechanics.b3.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[2,1] = robot.mechanics.b3.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[2,2] = robot.mechanics.b3.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[2,3] = robot.mechanics.b3.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[3,1] = robot.mechanics.b3.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[3,2] = robot.mechanics.b3.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b3.vis.vis.mcShape.S[3,3] = robot.mechanics.b3.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b3.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b3.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b3.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b3.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b3.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b3.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b3.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b3.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b3.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b3.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b3.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b3.vis.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b3.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b3.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b3.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b3.vis.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b3.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b3.vis.vis.mcShape.lengthDirection[1] / robot.mechanics.b3.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b3.vis.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b3.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b3.vis.vis.mcShape.lengthDirection[2] / robot.mechanics.b3.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b3.vis.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b3.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b3.vis.vis.mcShape.lengthDirection[3] / robot.mechanics.b3.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b3.vis.vis.mcShape.n_z_aux[1] = robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[3] - robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b3.vis.vis.mcShape.n_z_aux[2] = robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[1] - robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b3.vis.vis.mcShape.n_z_aux[3] = robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[2] - robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b3.vis.vis.mcShape.widthDirection[1],robot.mechanics.b3.vis.vis.mcShape.widthDirection[2],robot.mechanics.b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b3.vis.vis.mcShape.widthDirection[1],robot.mechanics.b3.vis.vis.mcShape.widthDirection[2],robot.mechanics.b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b3.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b3.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b3.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b3.vis.vis.mcShape.widthDirection[1],robot.mechanics.b3.vis.vis.mcShape.widthDirection[2],robot.mechanics.b3.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b3.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b3.vis.vis.mcShape.e_x[1],robot.mechanics.b3.vis.vis.mcShape.e_x[2],robot.mechanics.b3.vis.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_z[1] = robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.e_y[3] - robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.e_y[2];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_z[2] = robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.e_y[1] - robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.e_y[3];
//   Real robot.mechanics.b3.vis.vis.mcShape.e_z[3] = robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.e_y[2] - robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.Form;
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.Material;
//   protected output Real robot.mechanics.b3.vis.vis.mcShape.Extra;
//   constant Real robot.mechanics.b4.pi = 3.14159265358979;
//   constant Real robot.mechanics.b4.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b4.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.frame_a.S[1,1] = robot.mechanics.b4.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[1,2] = robot.mechanics.b4.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[1,3] = robot.mechanics.b4.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[2,1] = robot.mechanics.b4.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[2,2] = robot.mechanics.b4.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[2,3] = robot.mechanics.b4.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[3,1] = robot.mechanics.b4.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[3,2] = robot.mechanics.b4.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.S[3,3] = robot.mechanics.b4.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b4.fa[1];
//   Real robot.mechanics.b4.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b4.fa[2];
//   Real robot.mechanics.b4.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b4.fa[3];
//   Real robot.mechanics.b4.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.ta[1];
//   Real robot.mechanics.b4.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.ta[2];
//   Real robot.mechanics.b4.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.ta[3];
//   output Real robot.mechanics.b4.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.frame_b.S[1,1] = robot.mechanics.b4.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[1,2] = robot.mechanics.b4.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[1,3] = robot.mechanics.b4.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[2,1] = robot.mechanics.b4.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[2,2] = robot.mechanics.b4.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[2,3] = robot.mechanics.b4.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[3,1] = robot.mechanics.b4.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[3,2] = robot.mechanics.b4.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.S[3,3] = robot.mechanics.b4.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b4.fb[1];
//   Real robot.mechanics.b4.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b4.fb[2];
//   Real robot.mechanics.b4.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b4.fb[3];
//   Real robot.mechanics.b4.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.tb[1];
//   Real robot.mechanics.b4.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.tb[2];
//   Real robot.mechanics.b4.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.tb[3];
//   protected Real robot.mechanics.b4.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b4.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.r[2](quantity = "Length", unit = "m") = 0.73 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.rCM[2](quantity = "Length", unit = "m") = 0.32 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.m(quantity = "Mass", unit = "kg", min = 0.0) = 28.7 "Mass of body";
//   parameter Real robot.mechanics.b4.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 1.67 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.081 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b4.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 1.67 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b4.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String robot.mechanics.b4.Shape = "cylinder" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b4.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b4.r0[2](quantity = "Length", unit = "m") = 0.075 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b4.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b4.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.WidthDirection[1](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b4.Length(quantity = "Length", unit = "m") = 0.73 "Length of shape";
//   parameter Real robot.mechanics.b4.Width(quantity = "Length", unit = "m") = 0.1 "Width of shape";
//   parameter Real robot.mechanics.b4.Height(quantity = "Length", unit = "m") = 0.1 "Height of shape";
//   parameter Real robot.mechanics.b4.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.Material[2] = 0.7 "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.Material[4] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real robot.mechanics.b4.body.pi = 3.14159265358979;
//   constant Real robot.mechanics.b4.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b4.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[1,1] = robot.mechanics.b4.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[1,2] = robot.mechanics.b4.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[1,3] = robot.mechanics.b4.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[2,1] = robot.mechanics.b4.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[2,2] = robot.mechanics.b4.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[2,3] = robot.mechanics.b4.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[3,1] = robot.mechanics.b4.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[3,2] = robot.mechanics.b4.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.S[3,3] = robot.mechanics.b4.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b4.body.fa[1];
//   Real robot.mechanics.b4.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b4.body.fa[2];
//   Real robot.mechanics.b4.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b4.body.fa[3];
//   Real robot.mechanics.b4.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.ta[1];
//   Real robot.mechanics.b4.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.ta[2];
//   Real robot.mechanics.b4.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.ta[3];
//   output Real robot.mechanics.b4.body.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.body.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.body.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[1,1] = robot.mechanics.b4.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[1,2] = robot.mechanics.b4.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[1,3] = robot.mechanics.b4.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[2,1] = robot.mechanics.b4.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[2,2] = robot.mechanics.b4.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[2,3] = robot.mechanics.b4.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[3,1] = robot.mechanics.b4.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[3,2] = robot.mechanics.b4.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.S[3,3] = robot.mechanics.b4.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.fb[1];
//   Real robot.mechanics.b4.body.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.fb[2];
//   Real robot.mechanics.b4.body.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.fb[3];
//   Real robot.mechanics.b4.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.tb[1];
//   Real robot.mechanics.b4.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.tb[2];
//   Real robot.mechanics.b4.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.tb[3];
//   protected Real robot.mechanics.b4.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.body.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.body.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b4.body.r[1](quantity = "Length", unit = "m") = robot.mechanics.b4.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.r[2](quantity = "Length", unit = "m") = robot.mechanics.b4.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.r[3](quantity = "Length", unit = "m") = robot.mechanics.b4.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.rCM[1](quantity = "Length", unit = "m") = robot.mechanics.b4.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.rCM[2](quantity = "Length", unit = "m") = robot.mechanics.b4.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.rCM[3](quantity = "Length", unit = "m") = robot.mechanics.b4.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.m(quantity = "Mass", unit = "kg", min = 0.0) = robot.mechanics.b4.m "Mass of body";
//   parameter Real robot.mechanics.b4.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I11 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I22 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b4.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I33 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b4.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I21 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I31 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b4.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b4.I32 "(3,2) element of inertia tensor";
//   constant Real robot.mechanics.b4.body.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.b4.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b4.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[1,1] = robot.mechanics.b4.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[1,2] = robot.mechanics.b4.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[1,3] = robot.mechanics.b4.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[2,1] = robot.mechanics.b4.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[2,2] = robot.mechanics.b4.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[2,3] = robot.mechanics.b4.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[3,1] = robot.mechanics.b4.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[3,2] = robot.mechanics.b4.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.S[3,3] = robot.mechanics.b4.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b4.body.frameTranslation.fa[1];
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b4.body.frameTranslation.fa[2];
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b4.body.frameTranslation.fa[3];
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.frameTranslation.ta[1];
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.frameTranslation.ta[2];
//   Real robot.mechanics.b4.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.frameTranslation.ta[3];
//   output Real robot.mechanics.b4.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b4.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[1,1] = robot.mechanics.b4.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[1,2] = robot.mechanics.b4.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[1,3] = robot.mechanics.b4.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[2,1] = robot.mechanics.b4.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[2,2] = robot.mechanics.b4.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[2,3] = robot.mechanics.b4.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[3,1] = robot.mechanics.b4.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[3,2] = robot.mechanics.b4.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.S[3,3] = robot.mechanics.b4.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.frameTranslation.fb[1];
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.frameTranslation.fb[2];
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b4.body.frameTranslation.fb[3];
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.frameTranslation.tb[1];
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.frameTranslation.tb[2];
//   Real robot.mechanics.b4.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b4.body.frameTranslation.tb[3];
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b4.body.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b4.body.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.b4.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.b4.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[1,1] = robot.mechanics.b4.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[1,2] = robot.mechanics.b4.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[1,3] = robot.mechanics.b4.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[2,1] = robot.mechanics.b4.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[2,2] = robot.mechanics.b4.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[2,3] = robot.mechanics.b4.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[3,1] = robot.mechanics.b4.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[3,2] = robot.mechanics.b4.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.S[3,3] = robot.mechanics.b4.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.body.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b4.body.body.fa[1];
//   Real robot.mechanics.b4.body.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b4.body.body.fa[2];
//   Real robot.mechanics.b4.body.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b4.body.body.fa[3];
//   Real robot.mechanics.b4.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.body.ta[1];
//   Real robot.mechanics.b4.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.body.ta[2];
//   Real robot.mechanics.b4.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.body.body.ta[3];
//   protected Real robot.mechanics.b4.body.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.body.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.body.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.body.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.b4.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.b4.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.b4.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.b4.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.b4.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b4.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real robot.mechanics.b4.vis.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.vis.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b4.vis.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[1,1] = robot.mechanics.b4.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[1,2] = robot.mechanics.b4.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[1,3] = robot.mechanics.b4.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[2,1] = robot.mechanics.b4.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[2,2] = robot.mechanics.b4.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[2,3] = robot.mechanics.b4.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[3,1] = robot.mechanics.b4.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[3,2] = robot.mechanics.b4.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.S[3,3] = robot.mechanics.b4.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b4.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b4.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b4.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b4.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b4.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b4.vis.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b4.vis.fa[1];
//   Real robot.mechanics.b4.vis.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b4.vis.fa[2];
//   Real robot.mechanics.b4.vis.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b4.vis.fa[3];
//   Real robot.mechanics.b4.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.vis.ta[1];
//   Real robot.mechanics.b4.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.vis.ta[2];
//   Real robot.mechanics.b4.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b4.vis.ta[3];
//   protected Real robot.mechanics.b4.vis.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b4.vis.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b4.vis.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b4.vis.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b4.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b4.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b4.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b4.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b4.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b4.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b4.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b4.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b4.vis.Shape = robot.mechanics.b4.Shape "Name of shape (see info text)";
//   parameter Real robot.mechanics.b4.vis.r0[1] = robot.mechanics.b4.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b4.vis.r0[2] = robot.mechanics.b4.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b4.vis.r0[3] = robot.mechanics.b4.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b4.vis.LengthDirection[1] = robot.mechanics.b4.LengthDirection[1] "Vector in length direction";
//   parameter Real robot.mechanics.b4.vis.LengthDirection[2] = robot.mechanics.b4.LengthDirection[2] "Vector in length direction";
//   parameter Real robot.mechanics.b4.vis.LengthDirection[3] = robot.mechanics.b4.LengthDirection[3] "Vector in length direction";
//   parameter Real robot.mechanics.b4.vis.WidthDirection[1] = robot.mechanics.b4.WidthDirection[1] "Vector in width direction";
//   parameter Real robot.mechanics.b4.vis.WidthDirection[2] = robot.mechanics.b4.WidthDirection[2] "Vector in width direction";
//   parameter Real robot.mechanics.b4.vis.WidthDirection[3] = robot.mechanics.b4.WidthDirection[3] "Vector in width direction";
//   parameter Real robot.mechanics.b4.vis.Length = robot.mechanics.b4.Length "Length of shape [m]";
//   parameter Real robot.mechanics.b4.vis.Width = robot.mechanics.b4.Width "Width of shape [m]";
//   parameter Real robot.mechanics.b4.vis.Height = robot.mechanics.b4.Height "Height of shape [m]";
//   parameter Real robot.mechanics.b4.vis.Material[1] = robot.mechanics.b4.Material[1] "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.vis.Material[2] = robot.mechanics.b4.Material[2] "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.vis.Material[3] = robot.mechanics.b4.Material[3] "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.vis.Material[4] = robot.mechanics.b4.Material[4] "Color and specular coefficient";
//   parameter Real robot.mechanics.b4.vis.Extra = robot.mechanics.b4.Extra "Additional parameter for cone and pipe";
//   Real robot.mechanics.b4.vis.nLength[1];
//   Real robot.mechanics.b4.vis.nLength[2];
//   Real robot.mechanics.b4.vis.nLength[3];
//   Real robot.mechanics.b4.vis.nWidth[1];
//   Real robot.mechanics.b4.vis.nWidth[2];
//   Real robot.mechanics.b4.vis.nWidth[3];
//   Real robot.mechanics.b4.vis.nHeight[1];
//   Real robot.mechanics.b4.vis.nHeight[2];
//   Real robot.mechanics.b4.vis.nHeight[3];
//   parameter Real robot.mechanics.b4.vis.vis.r0[1] = robot.mechanics.b4.vis.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.r0[2] = robot.mechanics.b4.vis.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.r0[3] = robot.mechanics.b4.vis.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.Length = robot.mechanics.b4.vis.Length "Length of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.Width = robot.mechanics.b4.vis.Width "Width of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.Height = robot.mechanics.b4.vis.Height "Height of visual object.";
//   parameter Real robot.mechanics.b4.vis.vis.LengthDirection[1] = robot.mechanics.b4.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b4.vis.vis.LengthDirection[2] = robot.mechanics.b4.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b4.vis.vis.LengthDirection[3] = robot.mechanics.b4.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b4.vis.vis.WidthDirection[1] = robot.mechanics.b4.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b4.vis.vis.WidthDirection[2] = robot.mechanics.b4.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b4.vis.vis.WidthDirection[3] = robot.mechanics.b4.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b4.vis.vis.Shape = robot.mechanics.b4.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b4.vis.vis.Material[1] = robot.mechanics.b4.vis.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b4.vis.vis.Material[2] = robot.mechanics.b4.vis.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b4.vis.vis.Material[3] = robot.mechanics.b4.vis.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b4.vis.vis.Material[4] = robot.mechanics.b4.vis.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b4.vis.vis.Extra = robot.mechanics.b4.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b4.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b4.vis.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b4.vis.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b4.vis.vis.nLength[1];
//   Real robot.mechanics.b4.vis.vis.nLength[2];
//   Real robot.mechanics.b4.vis.vis.nLength[3];
//   Real robot.mechanics.b4.vis.vis.nWidth[1];
//   Real robot.mechanics.b4.vis.vis.nWidth[2];
//   Real robot.mechanics.b4.vis.vis.nWidth[3];
//   Real robot.mechanics.b4.vis.vis.nHeight[1];
//   Real robot.mechanics.b4.vis.vis.nHeight[2];
//   Real robot.mechanics.b4.vis.vis.nHeight[3];
//   parameter String robot.mechanics.b4.vis.vis.mcShape.shapeType = robot.mechanics.b4.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.lengthDirection[1] = robot.mechanics.b4.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.lengthDirection[2] = robot.mechanics.b4.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.lengthDirection[3] = robot.mechanics.b4.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.widthDirection[1] = robot.mechanics.b4.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.widthDirection[2] = robot.mechanics.b4.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.widthDirection[3] = robot.mechanics.b4.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b4.vis.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.Length "Length of visual object";
//   input Real robot.mechanics.b4.vis.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.Width "Width of visual object";
//   input Real robot.mechanics.b4.vis.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b4.vis.vis.Height "Height of visual object";
//   input Real robot.mechanics.b4.vis.vis.mcShape.extra = robot.mechanics.b4.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b4.vis.vis.mcShape.color[1] = 255.0 * robot.mechanics.b4.vis.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b4.vis.vis.mcShape.color[2] = 255.0 * robot.mechanics.b4.vis.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b4.vis.vis.mcShape.color[3] = 255.0 * robot.mechanics.b4.vis.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b4.vis.vis.mcShape.specularCoefficient = robot.mechanics.b4.vis.vis.Material[4];
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[1,1] = robot.mechanics.b4.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[1,2] = robot.mechanics.b4.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[1,3] = robot.mechanics.b4.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[2,1] = robot.mechanics.b4.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[2,2] = robot.mechanics.b4.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[2,3] = robot.mechanics.b4.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[3,1] = robot.mechanics.b4.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[3,2] = robot.mechanics.b4.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b4.vis.vis.mcShape.S[3,3] = robot.mechanics.b4.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b4.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b4.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b4.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b4.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b4.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b4.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b4.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b4.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b4.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b4.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b4.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b4.vis.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b4.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b4.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b4.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b4.vis.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b4.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b4.vis.vis.mcShape.lengthDirection[1] / robot.mechanics.b4.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b4.vis.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b4.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b4.vis.vis.mcShape.lengthDirection[2] / robot.mechanics.b4.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b4.vis.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b4.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b4.vis.vis.mcShape.lengthDirection[3] / robot.mechanics.b4.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b4.vis.vis.mcShape.n_z_aux[1] = robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[3] - robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b4.vis.vis.mcShape.n_z_aux[2] = robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[1] - robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b4.vis.vis.mcShape.n_z_aux[3] = robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[2] - robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b4.vis.vis.mcShape.widthDirection[1],robot.mechanics.b4.vis.vis.mcShape.widthDirection[2],robot.mechanics.b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b4.vis.vis.mcShape.widthDirection[1],robot.mechanics.b4.vis.vis.mcShape.widthDirection[2],robot.mechanics.b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b4.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b4.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b4.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b4.vis.vis.mcShape.widthDirection[1],robot.mechanics.b4.vis.vis.mcShape.widthDirection[2],robot.mechanics.b4.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b4.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b4.vis.vis.mcShape.e_x[1],robot.mechanics.b4.vis.vis.mcShape.e_x[2],robot.mechanics.b4.vis.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_z[1] = robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.e_y[3] - robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.e_y[2];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_z[2] = robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.e_y[1] - robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.e_y[3];
//   Real robot.mechanics.b4.vis.vis.mcShape.e_z[3] = robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.e_y[2] - robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.Form;
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.Material;
//   protected output Real robot.mechanics.b4.vis.vis.mcShape.Extra;
//   constant Real robot.mechanics.b5.pi = 3.14159265358979;
//   constant Real robot.mechanics.b5.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b5.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.frame_a.S[1,1] = robot.mechanics.b5.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[1,2] = robot.mechanics.b5.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[1,3] = robot.mechanics.b5.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[2,1] = robot.mechanics.b5.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[2,2] = robot.mechanics.b5.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[2,3] = robot.mechanics.b5.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[3,1] = robot.mechanics.b5.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[3,2] = robot.mechanics.b5.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.S[3,3] = robot.mechanics.b5.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b5.fa[1];
//   Real robot.mechanics.b5.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b5.fa[2];
//   Real robot.mechanics.b5.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b5.fa[3];
//   Real robot.mechanics.b5.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.ta[1];
//   Real robot.mechanics.b5.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.ta[2];
//   Real robot.mechanics.b5.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.ta[3];
//   output Real robot.mechanics.b5.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.frame_b.S[1,1] = robot.mechanics.b5.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[1,2] = robot.mechanics.b5.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[1,3] = robot.mechanics.b5.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[2,1] = robot.mechanics.b5.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[2,2] = robot.mechanics.b5.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[2,3] = robot.mechanics.b5.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[3,1] = robot.mechanics.b5.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[3,2] = robot.mechanics.b5.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.S[3,3] = robot.mechanics.b5.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b5.fb[1];
//   Real robot.mechanics.b5.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b5.fb[2];
//   Real robot.mechanics.b5.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b5.fb[3];
//   Real robot.mechanics.b5.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.tb[1];
//   Real robot.mechanics.b5.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.tb[2];
//   Real robot.mechanics.b5.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.tb[3];
//   protected Real robot.mechanics.b5.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b5.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.rCM[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.rCM[2](quantity = "Length", unit = "m") = 0.023 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.rCM[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.m(quantity = "Mass", unit = "kg", min = 0.0) = 5.2 "Mass of body";
//   parameter Real robot.mechanics.b5.I11(quantity = "MomentOfInertia", unit = "kg.m2") = 1.25 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.I22(quantity = "MomentOfInertia", unit = "kg.m2") = 0.81 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b5.I33(quantity = "MomentOfInertia", unit = "kg.m2") = 1.53 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b5.I21(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.I31(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.I32(quantity = "MomentOfInertia", unit = "kg.m2") = 0.0 "(3,2) element of inertia tensor";
//   parameter String robot.mechanics.b5.Shape = "box" "Name of shape (see info text)";
//   parameter Real robot.mechanics.b5.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b5.r0[2](quantity = "Length", unit = "m") = -0.075 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b5.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to shape origin. resolved in frame_a";
//   parameter Real robot.mechanics.b5.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.WidthDirection[1](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.b5.Length(quantity = "Length", unit = "m") = 0.225 "Length of shape";
//   parameter Real robot.mechanics.b5.Width(quantity = "Length", unit = "m") = 0.075 "Width of shape";
//   parameter Real robot.mechanics.b5.Height(quantity = "Length", unit = "m") = 0.1 "Height of shape";
//   parameter Real robot.mechanics.b5.Material[1] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.Material[3] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.Material[4] = 0.5 "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.Extra = 0.0 "Additional parameter for cone and pipe";
//   constant Real robot.mechanics.b5.body.pi = 3.14159265358979;
//   constant Real robot.mechanics.b5.body.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b5.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[1,1] = robot.mechanics.b5.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[1,2] = robot.mechanics.b5.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[1,3] = robot.mechanics.b5.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[2,1] = robot.mechanics.b5.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[2,2] = robot.mechanics.b5.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[2,3] = robot.mechanics.b5.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[3,1] = robot.mechanics.b5.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[3,2] = robot.mechanics.b5.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.S[3,3] = robot.mechanics.b5.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b5.body.fa[1];
//   Real robot.mechanics.b5.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b5.body.fa[2];
//   Real robot.mechanics.b5.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b5.body.fa[3];
//   Real robot.mechanics.b5.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.ta[1];
//   Real robot.mechanics.b5.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.ta[2];
//   Real robot.mechanics.b5.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.ta[3];
//   output Real robot.mechanics.b5.body.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.body.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.body.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[1,1] = robot.mechanics.b5.body.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[1,2] = robot.mechanics.b5.body.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[1,3] = robot.mechanics.b5.body.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[2,1] = robot.mechanics.b5.body.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[2,2] = robot.mechanics.b5.body.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[2,3] = robot.mechanics.b5.body.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[3,1] = robot.mechanics.b5.body.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[3,2] = robot.mechanics.b5.body.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.S[3,3] = robot.mechanics.b5.body.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.fb[1];
//   Real robot.mechanics.b5.body.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.fb[2];
//   Real robot.mechanics.b5.body.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.fb[3];
//   Real robot.mechanics.b5.body.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.tb[1];
//   Real robot.mechanics.b5.body.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.tb[2];
//   Real robot.mechanics.b5.body.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.tb[3];
//   protected Real robot.mechanics.b5.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.body.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.body.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.body.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b5.body.r[1](quantity = "Length", unit = "m") = robot.mechanics.b5.r[1] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.r[2](quantity = "Length", unit = "m") = robot.mechanics.b5.r[2] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.r[3](quantity = "Length", unit = "m") = robot.mechanics.b5.r[3] "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.rCM[1](quantity = "Length", unit = "m") = robot.mechanics.b5.rCM[1] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.rCM[2](quantity = "Length", unit = "m") = robot.mechanics.b5.rCM[2] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.rCM[3](quantity = "Length", unit = "m") = robot.mechanics.b5.rCM[3] "Vector from frame_a to center of mass, resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.m(quantity = "Mass", unit = "kg", min = 0.0) = robot.mechanics.b5.m "Mass of body";
//   parameter Real robot.mechanics.b5.body.I11(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I11 "(1,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.body.I22(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I22 "(2,2) element of inertia tensor";
//   parameter Real robot.mechanics.b5.body.I33(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I33 "(3,3) element of inertia tensor";
//   parameter Real robot.mechanics.b5.body.I21(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I21 "(2,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.body.I31(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I31 "(3,1) element of inertia tensor";
//   parameter Real robot.mechanics.b5.body.I32(quantity = "MomentOfInertia", unit = "kg.m2") = robot.mechanics.b5.I32 "(3,2) element of inertia tensor";
//   constant Real robot.mechanics.b5.body.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.b5.body.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.b5.body.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[1,1] = robot.mechanics.b5.body.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[1,2] = robot.mechanics.b5.body.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[1,3] = robot.mechanics.b5.body.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[2,1] = robot.mechanics.b5.body.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[2,2] = robot.mechanics.b5.body.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[2,3] = robot.mechanics.b5.body.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[3,1] = robot.mechanics.b5.body.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[3,2] = robot.mechanics.b5.body.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.S[3,3] = robot.mechanics.b5.body.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b5.body.frameTranslation.fa[1];
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b5.body.frameTranslation.fa[2];
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b5.body.frameTranslation.fa[3];
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.frameTranslation.ta[1];
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.frameTranslation.ta[2];
//   Real robot.mechanics.b5.body.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.frameTranslation.ta[3];
//   output Real robot.mechanics.b5.body.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.body.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.b5.body.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[1,1] = robot.mechanics.b5.body.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[1,2] = robot.mechanics.b5.body.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[1,3] = robot.mechanics.b5.body.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[2,1] = robot.mechanics.b5.body.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[2,2] = robot.mechanics.b5.body.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[2,3] = robot.mechanics.b5.body.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[3,1] = robot.mechanics.b5.body.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[3,2] = robot.mechanics.b5.body.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.S[3,3] = robot.mechanics.b5.body.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.frameTranslation.fb[1];
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.frameTranslation.fb[2];
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.b5.body.frameTranslation.fb[3];
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.frameTranslation.tb[1];
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.frameTranslation.tb[2];
//   Real robot.mechanics.b5.body.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.b5.body.frameTranslation.tb[3];
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.body.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.b5.body.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.b5.body.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.b5.body.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.b5.body.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.body.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.body.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.body.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.body.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[1,1] = robot.mechanics.b5.body.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[1,2] = robot.mechanics.b5.body.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[1,3] = robot.mechanics.b5.body.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[2,1] = robot.mechanics.b5.body.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[2,2] = robot.mechanics.b5.body.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[2,3] = robot.mechanics.b5.body.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[3,1] = robot.mechanics.b5.body.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[3,2] = robot.mechanics.b5.body.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.S[3,3] = robot.mechanics.b5.body.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.body.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.body.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.body.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.body.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.body.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.body.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b5.body.body.fa[1];
//   Real robot.mechanics.b5.body.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b5.body.body.fa[2];
//   Real robot.mechanics.b5.body.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b5.body.body.fa[3];
//   Real robot.mechanics.b5.body.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.body.ta[1];
//   Real robot.mechanics.b5.body.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.body.ta[2];
//   Real robot.mechanics.b5.body.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.body.body.ta[3];
//   protected Real robot.mechanics.b5.body.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.body.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.body.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.body.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.body.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.body.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.body.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.body.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.body.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.body.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.body.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.body.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.b5.body.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.b5.body.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.b5.body.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.b5.body.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.b5.body.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.b5.body.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   input Real robot.mechanics.b5.vis.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.vis.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.b5.vis.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[1,1] = robot.mechanics.b5.vis.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[1,2] = robot.mechanics.b5.vis.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[1,3] = robot.mechanics.b5.vis.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[2,1] = robot.mechanics.b5.vis.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[2,2] = robot.mechanics.b5.vis.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[2,3] = robot.mechanics.b5.vis.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[3,1] = robot.mechanics.b5.vis.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[3,2] = robot.mechanics.b5.vis.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.S[3,3] = robot.mechanics.b5.vis.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.b5.vis.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vis.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vis.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.b5.vis.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.vis.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.vis.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.b5.vis.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.vis.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.vis.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.b5.vis.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.vis.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.vis.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.b5.vis.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.b5.vis.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.b5.vis.fa[1];
//   Real robot.mechanics.b5.vis.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.b5.vis.fa[2];
//   Real robot.mechanics.b5.vis.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.b5.vis.fa[3];
//   Real robot.mechanics.b5.vis.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.vis.ta[1];
//   Real robot.mechanics.b5.vis.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.vis.ta[2];
//   Real robot.mechanics.b5.vis.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.b5.vis.ta[3];
//   protected Real robot.mechanics.b5.vis.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.b5.vis.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.b5.vis.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.b5.vis.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.b5.vis.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.vis.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.vis.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.b5.vis.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.vis.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.vis.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.b5.vis.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.vis.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.vis.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.b5.vis.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.vis.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.vis.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.b5.vis.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.vis.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.vis.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.b5.vis.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.vis.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.vis.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.b5.vis.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.vis.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.b5.vis.ta[3](quantity = "Torque", unit = "N.m");
//   parameter String robot.mechanics.b5.vis.Shape = robot.mechanics.b5.Shape "Name of shape (see info text)";
//   parameter Real robot.mechanics.b5.vis.r0[1] = robot.mechanics.b5.r0[1] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b5.vis.r0[2] = robot.mechanics.b5.r0[2] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b5.vis.r0[3] = robot.mechanics.b5.r0[3] "Vector from frame_a to shape origin [m]";
//   parameter Real robot.mechanics.b5.vis.LengthDirection[1] = robot.mechanics.b5.LengthDirection[1] "Vector in length direction";
//   parameter Real robot.mechanics.b5.vis.LengthDirection[2] = robot.mechanics.b5.LengthDirection[2] "Vector in length direction";
//   parameter Real robot.mechanics.b5.vis.LengthDirection[3] = robot.mechanics.b5.LengthDirection[3] "Vector in length direction";
//   parameter Real robot.mechanics.b5.vis.WidthDirection[1] = robot.mechanics.b5.WidthDirection[1] "Vector in width direction";
//   parameter Real robot.mechanics.b5.vis.WidthDirection[2] = robot.mechanics.b5.WidthDirection[2] "Vector in width direction";
//   parameter Real robot.mechanics.b5.vis.WidthDirection[3] = robot.mechanics.b5.WidthDirection[3] "Vector in width direction";
//   parameter Real robot.mechanics.b5.vis.Length = robot.mechanics.b5.Length "Length of shape [m]";
//   parameter Real robot.mechanics.b5.vis.Width = robot.mechanics.b5.Width "Width of shape [m]";
//   parameter Real robot.mechanics.b5.vis.Height = robot.mechanics.b5.Height "Height of shape [m]";
//   parameter Real robot.mechanics.b5.vis.Material[1] = robot.mechanics.b5.Material[1] "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.vis.Material[2] = robot.mechanics.b5.Material[2] "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.vis.Material[3] = robot.mechanics.b5.Material[3] "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.vis.Material[4] = robot.mechanics.b5.Material[4] "Color and specular coefficient";
//   parameter Real robot.mechanics.b5.vis.Extra = robot.mechanics.b5.Extra "Additional parameter for cone and pipe";
//   Real robot.mechanics.b5.vis.nLength[1];
//   Real robot.mechanics.b5.vis.nLength[2];
//   Real robot.mechanics.b5.vis.nLength[3];
//   Real robot.mechanics.b5.vis.nWidth[1];
//   Real robot.mechanics.b5.vis.nWidth[2];
//   Real robot.mechanics.b5.vis.nWidth[3];
//   Real robot.mechanics.b5.vis.nHeight[1];
//   Real robot.mechanics.b5.vis.nHeight[2];
//   Real robot.mechanics.b5.vis.nHeight[3];
//   parameter Real robot.mechanics.b5.vis.vis.r0[1] = robot.mechanics.b5.vis.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.r0[2] = robot.mechanics.b5.vis.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.r0[3] = robot.mechanics.b5.vis.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.Length = robot.mechanics.b5.vis.Length "Length of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.Width = robot.mechanics.b5.vis.Width "Width of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.Height = robot.mechanics.b5.vis.Height "Height of visual object.";
//   parameter Real robot.mechanics.b5.vis.vis.LengthDirection[1] = robot.mechanics.b5.vis.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.b5.vis.vis.LengthDirection[2] = robot.mechanics.b5.vis.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.b5.vis.vis.LengthDirection[3] = robot.mechanics.b5.vis.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.b5.vis.vis.WidthDirection[1] = robot.mechanics.b5.vis.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.b5.vis.vis.WidthDirection[2] = robot.mechanics.b5.vis.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.b5.vis.vis.WidthDirection[3] = robot.mechanics.b5.vis.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.b5.vis.vis.Shape = robot.mechanics.b5.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.b5.vis.vis.Material[1] = robot.mechanics.b5.vis.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b5.vis.vis.Material[2] = robot.mechanics.b5.vis.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b5.vis.vis.Material[3] = robot.mechanics.b5.vis.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b5.vis.vis.Material[4] = robot.mechanics.b5.vis.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.b5.vis.vis.Extra = robot.mechanics.b5.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b5.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.r[1] "Position of visual object.";
//   input Real robot.mechanics.b5.vis.vis.r[2] "Position of visual object.";
//   input Real robot.mechanics.b5.vis.vis.r[3] "Position of visual object.";
//   Real robot.mechanics.b5.vis.vis.nLength[1];
//   Real robot.mechanics.b5.vis.vis.nLength[2];
//   Real robot.mechanics.b5.vis.vis.nLength[3];
//   Real robot.mechanics.b5.vis.vis.nWidth[1];
//   Real robot.mechanics.b5.vis.vis.nWidth[2];
//   Real robot.mechanics.b5.vis.vis.nWidth[3];
//   Real robot.mechanics.b5.vis.vis.nHeight[1];
//   Real robot.mechanics.b5.vis.vis.nHeight[2];
//   Real robot.mechanics.b5.vis.vis.nHeight[3];
//   parameter String robot.mechanics.b5.vis.vis.mcShape.shapeType = robot.mechanics.b5.vis.vis.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.lengthDirection[1] = robot.mechanics.b5.vis.vis.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.lengthDirection[2] = robot.mechanics.b5.vis.vis.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.lengthDirection[3] = robot.mechanics.b5.vis.vis.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.widthDirection[1] = robot.mechanics.b5.vis.vis.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.widthDirection[2] = robot.mechanics.b5.vis.vis.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.widthDirection[3] = robot.mechanics.b5.vis.vis.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.b5.vis.vis.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.Length "Length of visual object";
//   input Real robot.mechanics.b5.vis.vis.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.Width "Width of visual object";
//   input Real robot.mechanics.b5.vis.vis.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.b5.vis.vis.Height "Height of visual object";
//   input Real robot.mechanics.b5.vis.vis.mcShape.extra = robot.mechanics.b5.vis.vis.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.b5.vis.vis.mcShape.color[1] = 255.0 * robot.mechanics.b5.vis.vis.Material[1] "Color of shape";
//   input Real robot.mechanics.b5.vis.vis.mcShape.color[2] = 255.0 * robot.mechanics.b5.vis.vis.Material[2] "Color of shape";
//   input Real robot.mechanics.b5.vis.vis.mcShape.color[3] = 255.0 * robot.mechanics.b5.vis.vis.Material[3] "Color of shape";
//   input Real robot.mechanics.b5.vis.vis.mcShape.specularCoefficient = robot.mechanics.b5.vis.vis.Material[4];
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[1,1] = robot.mechanics.b5.vis.vis.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[1,2] = robot.mechanics.b5.vis.vis.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[1,3] = robot.mechanics.b5.vis.vis.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[2,1] = robot.mechanics.b5.vis.vis.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[2,2] = robot.mechanics.b5.vis.vis.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[2,3] = robot.mechanics.b5.vis.vis.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[3,1] = robot.mechanics.b5.vis.vis.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[3,2] = robot.mechanics.b5.vis.vis.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.b5.vis.vis.mcShape.S[3,3] = robot.mechanics.b5.vis.vis.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b5.vis.vis.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b5.vis.vis.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b5.vis.vis.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b5.vis.vis.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b5.vis.vis.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b5.vis.vis.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b5.vis.vis.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b5.vis.vis.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.b5.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b5.vis.vis.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.b5.vis.vis.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.b5.vis.vis.mcShape.abs_n_x = sqrt(robot.mechanics.b5.vis.vis.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.b5.vis.vis.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.b5.vis.vis.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.b5.vis.vis.mcShape.e_x[1] = if noEvent(robot.mechanics.b5.vis.vis.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.b5.vis.vis.mcShape.lengthDirection[1] / robot.mechanics.b5.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b5.vis.vis.mcShape.e_x[2] = if noEvent(robot.mechanics.b5.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b5.vis.vis.mcShape.lengthDirection[2] / robot.mechanics.b5.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b5.vis.vis.mcShape.e_x[3] = if noEvent(robot.mechanics.b5.vis.vis.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.b5.vis.vis.mcShape.lengthDirection[3] / robot.mechanics.b5.vis.vis.mcShape.abs_n_x;
//   Real robot.mechanics.b5.vis.vis.mcShape.n_z_aux[1] = robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[3] - robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[2];
//   Real robot.mechanics.b5.vis.vis.mcShape.n_z_aux[2] = robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[1] - robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[3];
//   Real robot.mechanics.b5.vis.vis.mcShape.n_z_aux[3] = robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[2] - robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.widthDirection[1];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b5.vis.vis.mcShape.widthDirection[1],robot.mechanics.b5.vis.vis.mcShape.widthDirection[2],robot.mechanics.b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]})[1];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b5.vis.vis.mcShape.widthDirection[1],robot.mechanics.b5.vis.vis.mcShape.widthDirection[2],robot.mechanics.b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]})[2];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]},if noEvent(robot.mechanics.b5.vis.vis.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.b5.vis.vis.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.b5.vis.vis.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.b5.vis.vis.mcShape.widthDirection[1],robot.mechanics.b5.vis.vis.mcShape.widthDirection[2],robot.mechanics.b5.vis.vis.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.b5.vis.vis.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.b5.vis.vis.mcShape.e_x[1],robot.mechanics.b5.vis.vis.mcShape.e_x[2],robot.mechanics.b5.vis.vis.mcShape.e_x[3]})[3];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_z[1] = robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.e_y[3] - robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.e_y[2];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_z[2] = robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.e_y[1] - robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.e_y[3];
//   Real robot.mechanics.b5.vis.vis.mcShape.e_z[3] = robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.e_y[2] - robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.e_y[1];
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.Form;
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.Material;
//   protected output Real robot.mechanics.b5.vis.vis.mcShape.Extra;
//   constant Real robot.mechanics.load.pi = 3.14159265358979;
//   constant Real robot.mechanics.load.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.load.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.load.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.load.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.load.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.load.frame_a.S[1,1] = robot.mechanics.load.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[1,2] = robot.mechanics.load.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[1,3] = robot.mechanics.load.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[2,1] = robot.mechanics.load.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[2,2] = robot.mechanics.load.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[2,3] = robot.mechanics.load.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[3,1] = robot.mechanics.load.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[3,2] = robot.mechanics.load.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.S[3,3] = robot.mechanics.load.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.load.fa[1];
//   Real robot.mechanics.load.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.load.fa[2];
//   Real robot.mechanics.load.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.load.fa[3];
//   Real robot.mechanics.load.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.load.ta[1];
//   Real robot.mechanics.load.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.load.ta[2];
//   Real robot.mechanics.load.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.load.ta[3];
//   output Real robot.mechanics.load.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.load.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.load.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.load.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.load.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.load.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.load.frame_b.S[1,1] = robot.mechanics.load.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[1,2] = robot.mechanics.load.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[1,3] = robot.mechanics.load.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[2,1] = robot.mechanics.load.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[2,2] = robot.mechanics.load.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[2,3] = robot.mechanics.load.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[3,1] = robot.mechanics.load.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[3,2] = robot.mechanics.load.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.S[3,3] = robot.mechanics.load.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.load.fb[1];
//   Real robot.mechanics.load.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.load.fb[2];
//   Real robot.mechanics.load.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.load.fb[3];
//   Real robot.mechanics.load.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.tb[1];
//   Real robot.mechanics.load.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.tb[2];
//   Real robot.mechanics.load.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.tb[3];
//   protected Real robot.mechanics.load.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.load.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.load.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.load.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.load.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.load.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.load.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.load.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.load.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.load.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.load.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.load.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.load.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.load.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.load.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.load.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.load.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.load.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.load.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.load.r[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.load.r[2](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.load.r[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to frame_b, resolved in frame_a";
//   parameter Real robot.mechanics.load.r0[1](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left box plane, resolved in frame_a";
//   parameter Real robot.mechanics.load.r0[2](quantity = "Length", unit = "m") = 0.15 "Vector from frame_a to left box plane, resolved in frame_a";
//   parameter Real robot.mechanics.load.r0[3](quantity = "Length", unit = "m") = 0.0 "Vector from frame_a to left box plane, resolved in frame_a";
//   parameter Real robot.mechanics.load.LengthDirection[1](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.LengthDirection[2](quantity = "Length", unit = "m") = 1.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.LengthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in length direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.WidthDirection[1](quantity = "Length", unit = "m") = 1.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.WidthDirection[2](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.WidthDirection[3](quantity = "Length", unit = "m") = 0.0 "Vector in width direction, resolved in frame_a";
//   parameter Real robot.mechanics.load.Length(quantity = "Length", unit = "m") = robot.mechanics.loadSize[1] "Length of box";
//   parameter Real robot.mechanics.load.Width(quantity = "Length", unit = "m") = robot.mechanics.loadSize[2] "Width of box";
//   parameter Real robot.mechanics.load.Height(quantity = "Length", unit = "m") = robot.mechanics.loadSize[3] "Height of box";
//   parameter Real robot.mechanics.load.InnerWidth(quantity = "Length", unit = "m") = 0.0 "Width of inner box surface";
//   parameter Real robot.mechanics.load.InnerHeight(quantity = "Length", unit = "m") = 0.0 "Height of inner box surface";
//   parameter Real robot.mechanics.load.rho = 7.7 "Density of box material [g/cm^3]";
//   parameter Real robot.mechanics.load.Material[1] = 1.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.load.Material[2] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.load.Material[3] = 0.0 "Color and specular coefficient";
//   parameter Real robot.mechanics.load.Material[4] = 0.5 "Color and specular coefficient";
//   Real robot.mechanics.load.mo(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.load.mi(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.load.Sbox[1,1];
//   Real robot.mechanics.load.Sbox[1,2];
//   Real robot.mechanics.load.Sbox[1,3];
//   Real robot.mechanics.load.Sbox[2,1];
//   Real robot.mechanics.load.Sbox[2,2];
//   Real robot.mechanics.load.Sbox[2,3];
//   Real robot.mechanics.load.Sbox[3,1];
//   Real robot.mechanics.load.Sbox[3,2];
//   Real robot.mechanics.load.Sbox[3,3];
//   Real robot.mechanics.load.l(quantity = "Length", unit = "m");
//   Real robot.mechanics.load.w(quantity = "Length", unit = "m");
//   Real robot.mechanics.load.h(quantity = "Length", unit = "m");
//   Real robot.mechanics.load.wi(quantity = "Length", unit = "m");
//   Real robot.mechanics.load.hi(quantity = "Length", unit = "m");
//   parameter Real robot.mechanics.load.box.r0[1] = robot.mechanics.load.r0[1] "Origin of visual object.";
//   parameter Real robot.mechanics.load.box.r0[2] = robot.mechanics.load.r0[2] "Origin of visual object.";
//   parameter Real robot.mechanics.load.box.r0[3] = robot.mechanics.load.r0[3] "Origin of visual object.";
//   parameter Real robot.mechanics.load.box.Length = robot.mechanics.load.Length "Length of visual object.";
//   parameter Real robot.mechanics.load.box.Width = robot.mechanics.load.Width "Width of visual object.";
//   parameter Real robot.mechanics.load.box.Height = robot.mechanics.load.Height "Height of visual object.";
//   parameter Real robot.mechanics.load.box.LengthDirection[1] = robot.mechanics.load.LengthDirection[1] "Vector in length direction.";
//   parameter Real robot.mechanics.load.box.LengthDirection[2] = robot.mechanics.load.LengthDirection[2] "Vector in length direction.";
//   parameter Real robot.mechanics.load.box.LengthDirection[3] = robot.mechanics.load.LengthDirection[3] "Vector in length direction.";
//   parameter Real robot.mechanics.load.box.WidthDirection[1] = robot.mechanics.load.WidthDirection[1] "Vector in width direction.";
//   parameter Real robot.mechanics.load.box.WidthDirection[2] = robot.mechanics.load.WidthDirection[2] "Vector in width direction.";
//   parameter Real robot.mechanics.load.box.WidthDirection[3] = robot.mechanics.load.WidthDirection[3] "Vector in width direction.";
//   parameter String robot.mechanics.load.box.Shape = "box" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   parameter Real robot.mechanics.load.box.Material[1] = robot.mechanics.load.Material[1] "Color and specular coefficient.";
//   parameter Real robot.mechanics.load.box.Material[2] = robot.mechanics.load.Material[2] "Color and specular coefficient.";
//   parameter Real robot.mechanics.load.box.Material[3] = robot.mechanics.load.Material[3] "Color and specular coefficient.";
//   parameter Real robot.mechanics.load.box.Material[4] = robot.mechanics.load.Material[4] "Color and specular coefficient.";
//   parameter Real robot.mechanics.load.box.Extra = 0.0 "Additional size data for some of the shape types";
//   input Real robot.mechanics.load.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.r[1] "Position of visual object.";
//   input Real robot.mechanics.load.box.r[2] "Position of visual object.";
//   input Real robot.mechanics.load.box.r[3] "Position of visual object.";
//   Real robot.mechanics.load.box.nLength[1];
//   Real robot.mechanics.load.box.nLength[2];
//   Real robot.mechanics.load.box.nLength[3];
//   Real robot.mechanics.load.box.nWidth[1];
//   Real robot.mechanics.load.box.nWidth[2];
//   Real robot.mechanics.load.box.nWidth[3];
//   Real robot.mechanics.load.box.nHeight[1];
//   Real robot.mechanics.load.box.nHeight[2];
//   Real robot.mechanics.load.box.nHeight[3];
//   parameter String robot.mechanics.load.box.mcShape.shapeType = robot.mechanics.load.box.Shape "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
//   input Real robot.mechanics.load.box.mcShape.r[1](quantity = "Length", unit = "m") = robot.mechanics.load.box.r[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.load.box.mcShape.r[2](quantity = "Length", unit = "m") = robot.mechanics.load.box.r[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.load.box.mcShape.r[3](quantity = "Length", unit = "m") = robot.mechanics.load.box.r[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
//   input Real robot.mechanics.load.box.mcShape.r_shape[1](quantity = "Length", unit = "m") = robot.mechanics.load.box.r0[1] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.r_shape[2](quantity = "Length", unit = "m") = robot.mechanics.load.box.r0[2] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.r_shape[3](quantity = "Length", unit = "m") = robot.mechanics.load.box.r0[3] "Position vector from origin of object frame to shape origin, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.lengthDirection[1] = robot.mechanics.load.box.LengthDirection[1] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.lengthDirection[2] = robot.mechanics.load.box.LengthDirection[2] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.lengthDirection[3] = robot.mechanics.load.box.LengthDirection[3] "Vector in length direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.widthDirection[1] = robot.mechanics.load.box.WidthDirection[1] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.widthDirection[2] = robot.mechanics.load.box.WidthDirection[2] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.widthDirection[3] = robot.mechanics.load.box.WidthDirection[3] "Vector in width direction, resolved in object frame";
//   input Real robot.mechanics.load.box.mcShape.length(quantity = "Length", unit = "m") = robot.mechanics.load.box.Length "Length of visual object";
//   input Real robot.mechanics.load.box.mcShape.width(quantity = "Length", unit = "m") = robot.mechanics.load.box.Width "Width of visual object";
//   input Real robot.mechanics.load.box.mcShape.height(quantity = "Length", unit = "m") = robot.mechanics.load.box.Height "Height of visual object";
//   input Real robot.mechanics.load.box.mcShape.extra = robot.mechanics.load.box.Extra "Additional size data for some of the shape types";
//   input Real robot.mechanics.load.box.mcShape.color[1] = 255.0 * robot.mechanics.load.box.Material[1] "Color of shape";
//   input Real robot.mechanics.load.box.mcShape.color[2] = 255.0 * robot.mechanics.load.box.Material[2] "Color of shape";
//   input Real robot.mechanics.load.box.mcShape.color[3] = 255.0 * robot.mechanics.load.box.Material[3] "Color of shape";
//   input Real robot.mechanics.load.box.mcShape.specularCoefficient = robot.mechanics.load.box.Material[4];
//   input Real robot.mechanics.load.box.mcShape.S[1,1] = robot.mechanics.load.box.S[1,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[1,2] = robot.mechanics.load.box.S[1,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[1,3] = robot.mechanics.load.box.S[1,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[2,1] = robot.mechanics.load.box.S[2,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[2,2] = robot.mechanics.load.box.S[2,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[2,3] = robot.mechanics.load.box.S[2,3] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[3,1] = robot.mechanics.load.box.S[3,1] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[3,2] = robot.mechanics.load.box.S[3,2] "3 x 3 transformation matrix.";
//   input Real robot.mechanics.load.box.mcShape.S[3,3] = robot.mechanics.load.box.S[3,3] "3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[1,1] = robot.mechanics.load.box.Sshape[1,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[1,2] = robot.mechanics.load.box.Sshape[1,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[1,3] = robot.mechanics.load.box.Sshape[1,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[2,1] = robot.mechanics.load.box.Sshape[2,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[2,2] = robot.mechanics.load.box.Sshape[2,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[2,3] = robot.mechanics.load.box.Sshape[2,3] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[3,1] = robot.mechanics.load.box.Sshape[3,1] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[3,2] = robot.mechanics.load.box.Sshape[3,2] "local 3 x 3 transformation matrix.";
//   Real robot.mechanics.load.box.mcShape.Sshape[3,3] = robot.mechanics.load.box.Sshape[3,3] "local 3 x 3 transformation matrix.";
//   output Real robot.mechanics.load.box.mcShape.rxvisobj[1] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.rxvisobj[2] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.rxvisobj[3] "x-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.ryvisobj[1] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.ryvisobj[2] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.ryvisobj[3] "y-axis unit vector of shape, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   output Real robot.mechanics.load.box.mcShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
//   Real robot.mechanics.load.box.mcShape.abs_n_x = sqrt(robot.mechanics.load.box.mcShape.lengthDirection[1] ^ 2.0 + (robot.mechanics.load.box.mcShape.lengthDirection[2] ^ 2.0 + robot.mechanics.load.box.mcShape.lengthDirection[3] ^ 2.0));
//   Real robot.mechanics.load.box.mcShape.e_x[1] = if noEvent(robot.mechanics.load.box.mcShape.abs_n_x < 1e-10) then 1.0 else robot.mechanics.load.box.mcShape.lengthDirection[1] / robot.mechanics.load.box.mcShape.abs_n_x;
//   Real robot.mechanics.load.box.mcShape.e_x[2] = if noEvent(robot.mechanics.load.box.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.load.box.mcShape.lengthDirection[2] / robot.mechanics.load.box.mcShape.abs_n_x;
//   Real robot.mechanics.load.box.mcShape.e_x[3] = if noEvent(robot.mechanics.load.box.mcShape.abs_n_x < 1e-10) then 0.0 else robot.mechanics.load.box.mcShape.lengthDirection[3] / robot.mechanics.load.box.mcShape.abs_n_x;
//   Real robot.mechanics.load.box.mcShape.n_z_aux[1] = robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.widthDirection[3] - robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.widthDirection[2];
//   Real robot.mechanics.load.box.mcShape.n_z_aux[2] = robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.widthDirection[1] - robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.widthDirection[3];
//   Real robot.mechanics.load.box.mcShape.n_z_aux[3] = robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.widthDirection[2] - robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.widthDirection[1];
//   Real robot.mechanics.load.box.mcShape.e_y[1] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]},if noEvent(robot.mechanics.load.box.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.load.box.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.load.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.load.box.mcShape.widthDirection[1],robot.mechanics.load.box.mcShape.widthDirection[2],robot.mechanics.load.box.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.load.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]})[1];
//   Real robot.mechanics.load.box.mcShape.e_y[2] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]},if noEvent(robot.mechanics.load.box.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.load.box.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.load.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.load.box.mcShape.widthDirection[1],robot.mechanics.load.box.mcShape.widthDirection[2],robot.mechanics.load.box.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.load.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]})[2];
//   Real robot.mechanics.load.box.mcShape.e_y[3] = cross(MCVisualShape.local_normalize(cross({robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]},if noEvent(robot.mechanics.load.box.mcShape.n_z_aux[1] ^ 2.0 + (robot.mechanics.load.box.mcShape.n_z_aux[2] ^ 2.0 + robot.mechanics.load.box.mcShape.n_z_aux[3] ^ 2.0) > 1e-06) then {robot.mechanics.load.box.mcShape.widthDirection[1],robot.mechanics.load.box.mcShape.widthDirection[2],robot.mechanics.load.box.mcShape.widthDirection[3]} else if noEvent(abs(robot.mechanics.load.box.mcShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0})),{robot.mechanics.load.box.mcShape.e_x[1],robot.mechanics.load.box.mcShape.e_x[2],robot.mechanics.load.box.mcShape.e_x[3]})[3];
//   Real robot.mechanics.load.box.mcShape.e_z[1] = robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.e_y[3] - robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.e_y[2];
//   Real robot.mechanics.load.box.mcShape.e_z[2] = robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.e_y[1] - robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.e_y[3];
//   Real robot.mechanics.load.box.mcShape.e_z[3] = robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.e_y[2] - robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.e_y[1];
//   protected output Real robot.mechanics.load.box.mcShape.Form;
//   protected output Real robot.mechanics.load.box.mcShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.load.box.mcShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.load.box.mcShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
//   protected output Real robot.mechanics.load.box.mcShape.Material;
//   protected output Real robot.mechanics.load.box.mcShape.Extra;
//   constant Real robot.mechanics.load.frameTranslation.pi = 3.14159265358979;
//   constant Real robot.mechanics.load.frameTranslation.PI = 3.14159265358979 "Only for compatibility reasons";
//   input Real robot.mechanics.load.frameTranslation.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.frameTranslation.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.frameTranslation.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[1,1] = robot.mechanics.load.frameTranslation.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[1,2] = robot.mechanics.load.frameTranslation.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[1,3] = robot.mechanics.load.frameTranslation.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[2,1] = robot.mechanics.load.frameTranslation.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[2,2] = robot.mechanics.load.frameTranslation.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[2,3] = robot.mechanics.load.frameTranslation.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[3,1] = robot.mechanics.load.frameTranslation.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[3,2] = robot.mechanics.load.frameTranslation.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.S[3,3] = robot.mechanics.load.frameTranslation.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.load.frameTranslation.fa[1];
//   Real robot.mechanics.load.frameTranslation.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.load.frameTranslation.fa[2];
//   Real robot.mechanics.load.frameTranslation.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.load.frameTranslation.fa[3];
//   Real robot.mechanics.load.frameTranslation.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.load.frameTranslation.ta[1];
//   Real robot.mechanics.load.frameTranslation.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.load.frameTranslation.ta[2];
//   Real robot.mechanics.load.frameTranslation.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.load.frameTranslation.ta[3];
//   output Real robot.mechanics.load.frameTranslation.frame_b.r0[1](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0b[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.load.frameTranslation.frame_b.r0[2](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0b[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   output Real robot.mechanics.load.frameTranslation.frame_b.r0[3](quantity = "Length", unit = "m") = robot.mechanics.load.frameTranslation.r0b[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[1,1] = robot.mechanics.load.frameTranslation.Sb[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[1,2] = robot.mechanics.load.frameTranslation.Sb[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[1,3] = robot.mechanics.load.frameTranslation.Sb[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[2,1] = robot.mechanics.load.frameTranslation.Sb[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[2,2] = robot.mechanics.load.frameTranslation.Sb[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[2,3] = robot.mechanics.load.frameTranslation.Sb[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[3,1] = robot.mechanics.load.frameTranslation.Sb[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[3,2] = robot.mechanics.load.frameTranslation.Sb[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.S[3,3] = robot.mechanics.load.frameTranslation.Sb[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.frameTranslation.frame_b.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.vb[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.vb[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.frameTranslation.vb[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wb[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wb[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.frameTranslation.wb[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.ab[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.ab[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.frameTranslation.ab[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.zb[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.zb[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.frameTranslation.zb[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.frameTranslation.frame_b.f[1](quantity = "Force", unit = "N") = -robot.mechanics.load.frameTranslation.fb[1];
//   Real robot.mechanics.load.frameTranslation.frame_b.f[2](quantity = "Force", unit = "N") = -robot.mechanics.load.frameTranslation.fb[2];
//   Real robot.mechanics.load.frameTranslation.frame_b.f[3](quantity = "Force", unit = "N") = -robot.mechanics.load.frameTranslation.fb[3];
//   Real robot.mechanics.load.frameTranslation.frame_b.t[1](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.frameTranslation.tb[1];
//   Real robot.mechanics.load.frameTranslation.frame_b.t[2](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.frameTranslation.tb[2];
//   Real robot.mechanics.load.frameTranslation.frame_b.t[3](quantity = "Torque", unit = "N.m") = -robot.mechanics.load.frameTranslation.tb[3];
//   protected Real robot.mechanics.load.frameTranslation.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.frameTranslation.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.frameTranslation.ta[3](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.frameTranslation.Sb[1,1](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[1,2](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[1,3](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[2,1](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[2,2](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[2,3](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[3,1](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[3,2](start = 0.0);
//   protected Real robot.mechanics.load.frameTranslation.Sb[3,3](start = 1.0);
//   protected Real robot.mechanics.load.frameTranslation.r0b[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.r0b[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.r0b[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.frameTranslation.vb[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.vb[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.vb[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.wb[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.wb[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.wb[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.frameTranslation.ab[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.ab[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.ab[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.frameTranslation.zb[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.zb[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.zb[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.frameTranslation.fb[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.fb[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.fb[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.frameTranslation.tb[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.frameTranslation.tb[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.frameTranslation.tb[3](quantity = "Torque", unit = "N.m");
//   parameter Real robot.mechanics.load.frameTranslation.r[1](quantity = "Length", unit = "m") = robot.mechanics.load.r[1] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.load.frameTranslation.r[2](quantity = "Length", unit = "m") = robot.mechanics.load.r[2] "Vector from frame_a to frame_b resolved in frame_a";
//   parameter Real robot.mechanics.load.frameTranslation.r[3](quantity = "Length", unit = "m") = robot.mechanics.load.r[3] "Vector from frame_a to frame_b resolved in frame_a";
//   protected Real robot.mechanics.load.frameTranslation.vaux[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.vaux[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.frameTranslation.vaux[3](quantity = "Velocity", unit = "m/s");
//   input Real robot.mechanics.load.body.frame_a.r0[1](quantity = "Length", unit = "m") = robot.mechanics.load.body.r0a[1] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.body.frame_a.r0[2](quantity = "Length", unit = "m") = robot.mechanics.load.body.r0a[2] "Position vector from inertial system to frame origin, resolved in inertial system";
//   input Real robot.mechanics.load.body.frame_a.r0[3](quantity = "Length", unit = "m") = robot.mechanics.load.body.r0a[3] "Position vector from inertial system to frame origin, resolved in inertial system";
//   Real robot.mechanics.load.body.frame_a.S[1,1] = robot.mechanics.load.body.Sa[1,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[1,2] = robot.mechanics.load.body.Sa[1,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[1,3] = robot.mechanics.load.body.Sa[1,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[2,1] = robot.mechanics.load.body.Sa[2,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[2,2] = robot.mechanics.load.body.Sa[2,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[2,3] = robot.mechanics.load.body.Sa[2,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[3,1] = robot.mechanics.load.body.Sa[3,1] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[3,2] = robot.mechanics.load.body.Sa[3,2] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.S[3,3] = robot.mechanics.load.body.Sa[3,3] "Transformation matrix from frame_a to inertial system";
//   Real robot.mechanics.load.body.frame_a.v[1](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.body.va[1] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.v[2](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.body.va[2] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.v[3](quantity = "Velocity", unit = "m/s") = robot.mechanics.load.body.va[3] "Absolute velocity of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.w[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.body.wa[1] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.w[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.body.wa[2] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.w[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = robot.mechanics.load.body.wa[3] "Absolute angular velocity of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.a[1](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.body.aa[1] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.a[2](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.body.aa[2] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.a[3](quantity = "Acceleration", unit = "m/s2") = robot.mechanics.load.body.aa[3] "Absolute acceleration of frame origin, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.z[1](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.body.za[1] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.z[2](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.body.za[2] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.z[3](quantity = "AngularAcceleration", unit = "rad/s2") = robot.mechanics.load.body.za[3] "Absolute angular acceleration of frame_a, resolved in frame_a";
//   Real robot.mechanics.load.body.frame_a.f[1](quantity = "Force", unit = "N") = robot.mechanics.load.body.fa[1];
//   Real robot.mechanics.load.body.frame_a.f[2](quantity = "Force", unit = "N") = robot.mechanics.load.body.fa[2];
//   Real robot.mechanics.load.body.frame_a.f[3](quantity = "Force", unit = "N") = robot.mechanics.load.body.fa[3];
//   Real robot.mechanics.load.body.frame_a.t[1](quantity = "Torque", unit = "N.m") = robot.mechanics.load.body.ta[1];
//   Real robot.mechanics.load.body.frame_a.t[2](quantity = "Torque", unit = "N.m") = robot.mechanics.load.body.ta[2];
//   Real robot.mechanics.load.body.frame_a.t[3](quantity = "Torque", unit = "N.m") = robot.mechanics.load.body.ta[3];
//   protected Real robot.mechanics.load.body.Sa[1,1](start = 1.0);
//   protected Real robot.mechanics.load.body.Sa[1,2](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[1,3](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[2,1](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[2,2](start = 1.0);
//   protected Real robot.mechanics.load.body.Sa[2,3](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[3,1](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[3,2](start = 0.0);
//   protected Real robot.mechanics.load.body.Sa[3,3](start = 1.0);
//   protected Real robot.mechanics.load.body.r0a[1](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.body.r0a[2](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.body.r0a[3](quantity = "Length", unit = "m");
//   protected Real robot.mechanics.load.body.va[1](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.body.va[2](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.body.va[3](quantity = "Velocity", unit = "m/s");
//   protected Real robot.mechanics.load.body.wa[1](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.body.wa[2](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.body.wa[3](quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   protected Real robot.mechanics.load.body.aa[1](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.body.aa[2](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.body.aa[3](quantity = "Acceleration", unit = "m/s2");
//   protected Real robot.mechanics.load.body.za[1](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.body.za[2](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.body.za[3](quantity = "AngularAcceleration", unit = "rad/s2");
//   protected Real robot.mechanics.load.body.fa[1](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.body.fa[2](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.body.fa[3](quantity = "Force", unit = "N");
//   protected Real robot.mechanics.load.body.ta[1](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.body.ta[2](quantity = "Torque", unit = "N.m");
//   protected Real robot.mechanics.load.body.ta[3](quantity = "Torque", unit = "N.m");
//   Real robot.mechanics.load.body.m(quantity = "Mass", unit = "kg", min = 0.0);
//   Real robot.mechanics.load.body.rCM[1](quantity = "Length", unit = "m");
//   Real robot.mechanics.load.body.rCM[2](quantity = "Length", unit = "m");
//   Real robot.mechanics.load.body.rCM[3](quantity = "Length", unit = "m");
//   Real robot.mechanics.load.body.I[1,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[1,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[1,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[2,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[2,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[2,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[3,1](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[3,2](quantity = "MomentOfInertia", unit = "kg.m2");
//   Real robot.mechanics.load.body.I[3,3](quantity = "MomentOfInertia", unit = "kg.m2");
//   parameter Real robot.axis1.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[1] "initial value of reference and joint angle";
//   parameter Real robot.axis1.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis1.k = 1.1616 "gain of motor";
//   parameter Real robot.axis1.w = 4590.0 "time constant of motor";
//   parameter Real robot.axis1.D = 0.6 "damping constant of motor";
//   parameter Real robot.axis1.J = 0.0013 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis1.i = -105.0 "gear ratio";
//   parameter Real robot.axis1.c = 43.0 "spring constant";
//   parameter Real robot.axis1.cd = 0.005 "damper constant";
//   parameter Real robot.axis1.Rv0 = 0.4 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis1.Rv1 = 0.0008125 "viscous friction coefficient in [Nms/rad]";
//   parameter Real robot.axis1.peak = 1.0 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis1.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis1.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis1.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis1.inPort_a_ref;
//   Real robot.axis1.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis1.r3Gear1.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis1.J "moment of inertia of motor";
//   parameter Real robot.axis1.r3Gear1.i = robot.axis1.i "gear ratio";
//   parameter Real robot.axis1.r3Gear1.c = robot.axis1.c "spring constant";
//   parameter Real robot.axis1.r3Gear1.d = robot.axis1.cd "damper constant";
//   parameter Real robot.axis1.r3Gear1.Rv0(quantity = "Torque", unit = "N.m") = robot.axis1.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis1.r3Gear1.Rv1 = robot.axis1.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis1.r3Gear1.peak = robot.axis1.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis1.r3Gear1.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis1.r3Gear1.Jmotor.phi_start, StateSelect = StateSelect.avoid) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis1.r3Gear1.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis1.r3Gear1.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis1.r3Gear1.J "Moment of inertia";
//   parameter Integer robot.axis1.r3Gear1.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis1.r3Gear1.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis1.r3Gear1.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis1.r3Gear1.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis1.r3Gear1.Jmotor.stateSelection(min = 1, max = 5) = 2 "Priority to use phi and w as states";
//   Real robot.axis1.r3Gear1.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis1.r3Gear1.Jmotor.w_start, StateSelect = StateSelect.avoid) "Absolute angular velocity of component";
//   Real robot.axis1.r3Gear1.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis1.r3Gear1.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis1.r3Gear1.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis1.r3Gear1.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis1.r3Gear1.gear.ratio = robot.axis1.r3Gear1.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis1.r3Gear1.spring.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis1.r3Gear1.spring.phi_rel_start, StateSelect = StateSelect.avoid) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
//   Real robot.axis1.r3Gear1.spring.tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
//   Real robot.axis1.r3Gear1.spring.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.spring.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.spring.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.spring.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis1.r3Gear1.spring.c(unit = "N.m/rad", min = 0.0) = robot.axis1.r3Gear1.c "Spring constant";
//   parameter Real robot.axis1.r3Gear1.spring.phi_rel0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Unstretched spring angle";
//   parameter Real robot.axis1.r3Gear1.spring.d(unit = "N.m.s/rad", min = 0.0) = robot.axis1.r3Gear1.d "Damping constant";
//   parameter Integer robot.axis1.r3Gear1.spring.initType(min = 1, max = 5) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis1.r3Gear1.spring.phi_rel_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of relative rotation angle phi_rel";
//   parameter Real robot.axis1.r3Gear1.spring.w_rel_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of relative angular velocity w_rel = der(phi_rel)";
//   parameter Integer robot.axis1.r3Gear1.spring.stateSelection(min = 1, max = 5) = 2 "Priority to use phi_rel and w_rel as states";
//   Real robot.axis1.r3Gear1.spring.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis1.r3Gear1.spring.w_rel_start, StateSelect = StateSelect.avoid) "Relative angular velocity between flange_b and flange_a";
//   Real robot.axis1.r3Gear1.relativeStates.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.relativeStates.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.relativeStates.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.relativeStates.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.relativeStates.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", StateSelect = StateSelect.prefer) "relative rotation angle used as state variable";
//   Real robot.axis1.r3Gear1.relativeStates.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", StateSelect = StateSelect.prefer) "relative angular velocity used as state variable";
//   Real robot.axis1.r3Gear1.relativeStates.a_rel(quantity = "AngularAcceleration", unit = "rad/s2") "relative angular acceleration";
//   Real robot.axis1.r3Gear1.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis1.r3Gear1.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Gear1.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Gear1.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis1.r3Gear1.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis1.r3Gear1.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis1.r3Gear1.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis1.r3Gear1.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis1.r3Gear1.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis1.r3Gear1.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis1.r3Gear1.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis1.r3Gear1.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis1.r3Gear1.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis1.r3Gear1.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis1.r3Gear1.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis1.r3Gear1.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis1.r3Gear1.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis1.r3Gear1.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis1.r3Gear1.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis1.r3Gear1.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis1.r3Gear1.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis1.r3Gear1.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis1.r3Gear1.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis1.r3Gear1.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2] = robot.axis1.r3Gear1.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2] = robot.axis1.r3Gear1.Rv0 + robot.axis1.r3Gear1.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis1.r3Gear1.bearingFriction.peak(min = 1.0) = 1.0 "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis1.r3Gear1.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis1.r3Gear1.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis1.r3Gear1.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis1.r3Motor.k = robot.axis1.k "gain of motor";
//   parameter Real robot.axis1.r3Motor.wm = robot.axis1.w "time constant of motor";
//   parameter Real robot.axis1.r3Motor.D = robot.axis1.D "damping constant of motor";
//   input Real robot.axis1.r3Motor.i_ref;
//   Real robot.axis1.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis1.r3Motor.outPort_w;
//   output Real robot.axis1.r3Motor.outPort_phi;
//   Real robot.axis1.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis1.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis1.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis1.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis1.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis1.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis1.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis1.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis1.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis1.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis1.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.emf.k(unit = "N.m/A") = robot.axis1.r3Motor.k "Transformation coefficient";
//   Real robot.axis1.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis1.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis1.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis1.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis1.r3Motor.wm / robot.axis1.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis1.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis1.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis1.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis1.r3Motor.D / robot.axis1.r3Motor.wm "Capacitance";
//   Real robot.axis1.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis1.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis1.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis1.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis1.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis1.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis1.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis1.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis1.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis1.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis1.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis1.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis1.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis1.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis1.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis1.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis1.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis1.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis1.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis1.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis1.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis1.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis1.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis1.r3Control.phi_ref;
//   input Real robot.axis1.r3Control.w_ref;
//   input Real robot.axis1.r3Control.phi;
//   input Real robot.axis1.r3Control.w;
//   output Real robot.axis1.r3Control.i_ref;
//   input Real robot.axis1.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis1.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis1.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis1.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis1.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis1.r3Control.rate2.x[1](start = robot.axis1.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis1.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.rate2.nb(max = robot.axis1.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.rate2.nx = 1;
//   protected Real robot.axis1.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis1.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis1.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis1.r3Control.rate3.y(start = robot.axis1.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis1.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis1.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis1.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis1.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis1.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis1.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis1.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis1.r3Control.rate1.x[1](start = robot.axis1.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis1.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.rate1.nb(max = robot.axis1.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.rate1.nx = 1;
//   protected Real robot.axis1.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis1.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis1.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis1.r3Control.tacho1.y(start = robot.axis1.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis1.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis1.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis1.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis1.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis1.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis1.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis1.r3Control.wSum.u1;
//   output Real robot.axis1.r3Control.wSum.y;
//   input Real robot.axis1.r3Control.wSum.u2;
//   input Real robot.axis1.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis1.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis1.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis1.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis1.r3Control.pSum.u1;
//   output Real robot.axis1.r3Control.pSum.y;
//   input Real robot.axis1.r3Control.pSum.u2;
//   parameter Real robot.axis1.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis1.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis1.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis1.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis1.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis1.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis1.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis1.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis1.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis1.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis1.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis1.r3Control.tacho2.x[1](start = robot.axis1.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis1.r3Control.tacho2.x[2](start = robot.axis1.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis1.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.tacho2.nb(max = robot.axis1.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis1.r3Control.tacho2.nx = 2;
//   protected Real robot.axis1.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis1.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis1.integrator1.u "Connector of Real input signal";
//   output Real robot.axis1.integrator1.y(start = robot.axis1.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis1.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis1.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis1.integrator1.y_start = robot.axis1.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis1.integrator2.u "Connector of Real input signal";
//   output Real robot.axis1.integrator2.y(start = robot.axis1.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis1.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis1.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis1.integrator2.y_start = robot.axis1.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis1.k2.k = robot.axis1.i "Gain value multiplied with input signal";
//   input Real robot.axis1.k2.u "Input signal connector";
//   output Real robot.axis1.k2.y "Output signal connector";
//   parameter Real robot.axis1.k1.k = robot.axis1.i "Gain value multiplied with input signal";
//   input Real robot.axis1.k1.u "Input signal connector";
//   output Real robot.axis1.k1.y "Output signal connector";
//   Real robot.axis1.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis1.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis1.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis1.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis1.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis1.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis1.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis1.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis1.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis1.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis1.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis1.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis1.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis1.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   parameter Real robot.axis2.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[2] "initial value of reference and joint angle";
//   parameter Real robot.axis2.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis2.k = 1.1616 "gain of motor";
//   parameter Real robot.axis2.w = 5500.0 "time constant of motor";
//   parameter Real robot.axis2.D = 0.6 "damping constant of motor";
//   parameter Real robot.axis2.J = 0.0013 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis2.i = 210.0 "gear ratio";
//   parameter Real robot.axis2.c = 8.0 "spring constant";
//   parameter Real robot.axis2.cd = 0.01 "damper constant";
//   parameter Real robot.axis2.Rv0 = 0.5 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis2.Rv1 = 0.000769230769230769 "viscous friction coefficient in [Nms/rad]";
//   parameter Real robot.axis2.peak = 1.0 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis2.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis2.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis2.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis2.inPort_a_ref;
//   Real robot.axis2.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis2.r3Gear1.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis2.J "moment of inertia of motor";
//   parameter Real robot.axis2.r3Gear1.i = robot.axis2.i "gear ratio";
//   parameter Real robot.axis2.r3Gear1.c = robot.axis2.c "spring constant";
//   parameter Real robot.axis2.r3Gear1.d = robot.axis2.cd "damper constant";
//   parameter Real robot.axis2.r3Gear1.Rv0(quantity = "Torque", unit = "N.m") = robot.axis2.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis2.r3Gear1.Rv1 = robot.axis2.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis2.r3Gear1.peak = robot.axis2.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis2.r3Gear1.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis2.r3Gear1.Jmotor.phi_start, StateSelect = StateSelect.avoid) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis2.r3Gear1.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis2.r3Gear1.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis2.r3Gear1.J "Moment of inertia";
//   parameter Integer robot.axis2.r3Gear1.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis2.r3Gear1.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis2.r3Gear1.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis2.r3Gear1.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis2.r3Gear1.Jmotor.stateSelection(min = 1, max = 5) = 2 "Priority to use phi and w as states";
//   Real robot.axis2.r3Gear1.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis2.r3Gear1.Jmotor.w_start, StateSelect = StateSelect.avoid) "Absolute angular velocity of component";
//   Real robot.axis2.r3Gear1.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis2.r3Gear1.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis2.r3Gear1.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis2.r3Gear1.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis2.r3Gear1.gear.ratio = robot.axis2.r3Gear1.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis2.r3Gear1.spring.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis2.r3Gear1.spring.phi_rel_start, StateSelect = StateSelect.avoid) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
//   Real robot.axis2.r3Gear1.spring.tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
//   Real robot.axis2.r3Gear1.spring.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.spring.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.spring.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.spring.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis2.r3Gear1.spring.c(unit = "N.m/rad", min = 0.0) = robot.axis2.r3Gear1.c "Spring constant";
//   parameter Real robot.axis2.r3Gear1.spring.phi_rel0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Unstretched spring angle";
//   parameter Real robot.axis2.r3Gear1.spring.d(unit = "N.m.s/rad", min = 0.0) = robot.axis2.r3Gear1.d "Damping constant";
//   parameter Integer robot.axis2.r3Gear1.spring.initType(min = 1, max = 5) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis2.r3Gear1.spring.phi_rel_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of relative rotation angle phi_rel";
//   parameter Real robot.axis2.r3Gear1.spring.w_rel_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of relative angular velocity w_rel = der(phi_rel)";
//   parameter Integer robot.axis2.r3Gear1.spring.stateSelection(min = 1, max = 5) = 2 "Priority to use phi_rel and w_rel as states";
//   Real robot.axis2.r3Gear1.spring.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis2.r3Gear1.spring.w_rel_start, StateSelect = StateSelect.avoid) "Relative angular velocity between flange_b and flange_a";
//   Real robot.axis2.r3Gear1.relativeStates.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.relativeStates.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.relativeStates.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.relativeStates.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.relativeStates.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", StateSelect = StateSelect.prefer) "relative rotation angle used as state variable";
//   Real robot.axis2.r3Gear1.relativeStates.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", StateSelect = StateSelect.prefer) "relative angular velocity used as state variable";
//   Real robot.axis2.r3Gear1.relativeStates.a_rel(quantity = "AngularAcceleration", unit = "rad/s2") "relative angular acceleration";
//   Real robot.axis2.r3Gear1.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis2.r3Gear1.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Gear1.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Gear1.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis2.r3Gear1.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis2.r3Gear1.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis2.r3Gear1.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis2.r3Gear1.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis2.r3Gear1.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis2.r3Gear1.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis2.r3Gear1.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis2.r3Gear1.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis2.r3Gear1.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis2.r3Gear1.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis2.r3Gear1.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis2.r3Gear1.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis2.r3Gear1.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis2.r3Gear1.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis2.r3Gear1.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis2.r3Gear1.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis2.r3Gear1.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis2.r3Gear1.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis2.r3Gear1.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis2.r3Gear1.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2] = robot.axis2.r3Gear1.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2] = robot.axis2.r3Gear1.Rv0 + robot.axis2.r3Gear1.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis2.r3Gear1.bearingFriction.peak(min = 1.0) = 1.0 "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis2.r3Gear1.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis2.r3Gear1.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis2.r3Gear1.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis2.r3Motor.k = robot.axis2.k "gain of motor";
//   parameter Real robot.axis2.r3Motor.wm = robot.axis2.w "time constant of motor";
//   parameter Real robot.axis2.r3Motor.D = robot.axis2.D "damping constant of motor";
//   input Real robot.axis2.r3Motor.i_ref;
//   Real robot.axis2.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis2.r3Motor.outPort_w;
//   output Real robot.axis2.r3Motor.outPort_phi;
//   Real robot.axis2.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis2.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis2.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis2.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis2.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis2.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis2.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis2.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis2.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis2.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis2.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.emf.k(unit = "N.m/A") = robot.axis2.r3Motor.k "Transformation coefficient";
//   Real robot.axis2.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis2.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis2.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis2.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis2.r3Motor.wm / robot.axis2.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis2.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis2.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis2.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis2.r3Motor.D / robot.axis2.r3Motor.wm "Capacitance";
//   Real robot.axis2.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis2.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis2.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis2.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis2.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis2.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis2.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis2.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis2.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis2.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis2.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis2.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis2.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis2.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis2.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis2.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis2.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis2.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis2.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis2.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis2.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis2.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis2.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis2.r3Control.phi_ref;
//   input Real robot.axis2.r3Control.w_ref;
//   input Real robot.axis2.r3Control.phi;
//   input Real robot.axis2.r3Control.w;
//   output Real robot.axis2.r3Control.i_ref;
//   input Real robot.axis2.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis2.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis2.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis2.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis2.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis2.r3Control.rate2.x[1](start = robot.axis2.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis2.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.rate2.nb(max = robot.axis2.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.rate2.nx = 1;
//   protected Real robot.axis2.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis2.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis2.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis2.r3Control.rate3.y(start = robot.axis2.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis2.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis2.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis2.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis2.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis2.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis2.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis2.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis2.r3Control.rate1.x[1](start = robot.axis2.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis2.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.rate1.nb(max = robot.axis2.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.rate1.nx = 1;
//   protected Real robot.axis2.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis2.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis2.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis2.r3Control.tacho1.y(start = robot.axis2.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis2.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis2.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis2.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis2.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis2.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis2.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis2.r3Control.wSum.u1;
//   output Real robot.axis2.r3Control.wSum.y;
//   input Real robot.axis2.r3Control.wSum.u2;
//   input Real robot.axis2.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis2.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis2.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis2.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis2.r3Control.pSum.u1;
//   output Real robot.axis2.r3Control.pSum.y;
//   input Real robot.axis2.r3Control.pSum.u2;
//   parameter Real robot.axis2.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis2.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis2.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis2.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis2.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis2.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis2.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis2.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis2.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis2.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis2.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis2.r3Control.tacho2.x[1](start = robot.axis2.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis2.r3Control.tacho2.x[2](start = robot.axis2.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis2.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.tacho2.nb(max = robot.axis2.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis2.r3Control.tacho2.nx = 2;
//   protected Real robot.axis2.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis2.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis2.integrator1.u "Connector of Real input signal";
//   output Real robot.axis2.integrator1.y(start = robot.axis2.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis2.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis2.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis2.integrator1.y_start = robot.axis2.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis2.integrator2.u "Connector of Real input signal";
//   output Real robot.axis2.integrator2.y(start = robot.axis2.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis2.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis2.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis2.integrator2.y_start = robot.axis2.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis2.k2.k = robot.axis2.i "Gain value multiplied with input signal";
//   input Real robot.axis2.k2.u "Input signal connector";
//   output Real robot.axis2.k2.y "Output signal connector";
//   parameter Real robot.axis2.k1.k = robot.axis2.i "Gain value multiplied with input signal";
//   input Real robot.axis2.k1.u "Input signal connector";
//   output Real robot.axis2.k1.y "Output signal connector";
//   Real robot.axis2.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis2.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis2.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis2.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis2.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis2.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis2.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis2.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis2.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis2.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis2.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis2.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis2.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis2.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   parameter Real robot.axis3.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[3] "initial value of reference and joint angle";
//   parameter Real robot.axis3.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis3.k = 1.1616 "gain of motor";
//   parameter Real robot.axis3.w = 5500.0 "time constant of motor";
//   parameter Real robot.axis3.D = 0.6 "damping constant of motor";
//   parameter Real robot.axis3.J = 0.0013 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis3.i = 60.0 "gear ratio";
//   parameter Real robot.axis3.c = 58.0 "spring constant";
//   parameter Real robot.axis3.cd = 0.04 "damper constant";
//   parameter Real robot.axis3.Rv0 = 0.7 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis3.Rv1 = 0.00153846153846154 "viscous friction coefficient in [Nms/rad]";
//   parameter Real robot.axis3.peak = 1.0 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis3.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis3.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis3.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis3.inPort_a_ref;
//   Real robot.axis3.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis3.r3Gear1.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis3.J "moment of inertia of motor";
//   parameter Real robot.axis3.r3Gear1.i = robot.axis3.i "gear ratio";
//   parameter Real robot.axis3.r3Gear1.c = robot.axis3.c "spring constant";
//   parameter Real robot.axis3.r3Gear1.d = robot.axis3.cd "damper constant";
//   parameter Real robot.axis3.r3Gear1.Rv0(quantity = "Torque", unit = "N.m") = robot.axis3.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis3.r3Gear1.Rv1 = robot.axis3.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis3.r3Gear1.peak = robot.axis3.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis3.r3Gear1.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis3.r3Gear1.Jmotor.phi_start, StateSelect = StateSelect.avoid) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis3.r3Gear1.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis3.r3Gear1.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis3.r3Gear1.J "Moment of inertia";
//   parameter Integer robot.axis3.r3Gear1.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis3.r3Gear1.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis3.r3Gear1.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis3.r3Gear1.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis3.r3Gear1.Jmotor.stateSelection(min = 1, max = 5) = 2 "Priority to use phi and w as states";
//   Real robot.axis3.r3Gear1.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis3.r3Gear1.Jmotor.w_start, StateSelect = StateSelect.avoid) "Absolute angular velocity of component";
//   Real robot.axis3.r3Gear1.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis3.r3Gear1.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis3.r3Gear1.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis3.r3Gear1.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis3.r3Gear1.gear.ratio = robot.axis3.r3Gear1.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis3.r3Gear1.spring.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis3.r3Gear1.spring.phi_rel_start, StateSelect = StateSelect.avoid) "Relative rotation angle (= flange_b.phi - flange_a.phi)";
//   Real robot.axis3.r3Gear1.spring.tau(quantity = "Torque", unit = "N.m") "Torque between flanges (= flange_b.tau)";
//   Real robot.axis3.r3Gear1.spring.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.spring.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.spring.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.spring.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis3.r3Gear1.spring.c(unit = "N.m/rad", min = 0.0) = robot.axis3.r3Gear1.c "Spring constant";
//   parameter Real robot.axis3.r3Gear1.spring.phi_rel0(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Unstretched spring angle";
//   parameter Real robot.axis3.r3Gear1.spring.d(unit = "N.m.s/rad", min = 0.0) = robot.axis3.r3Gear1.d "Damping constant";
//   parameter Integer robot.axis3.r3Gear1.spring.initType(min = 1, max = 5) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis3.r3Gear1.spring.phi_rel_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of relative rotation angle phi_rel";
//   parameter Real robot.axis3.r3Gear1.spring.w_rel_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of relative angular velocity w_rel = der(phi_rel)";
//   parameter Integer robot.axis3.r3Gear1.spring.stateSelection(min = 1, max = 5) = 2 "Priority to use phi_rel and w_rel as states";
//   Real robot.axis3.r3Gear1.spring.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis3.r3Gear1.spring.w_rel_start, StateSelect = StateSelect.avoid) "Relative angular velocity between flange_b and flange_a";
//   Real robot.axis3.r3Gear1.relativeStates.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.relativeStates.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.relativeStates.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.relativeStates.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.relativeStates.phi_rel(quantity = "Angle", unit = "rad", displayUnit = "deg", StateSelect = StateSelect.prefer) "relative rotation angle used as state variable";
//   Real robot.axis3.r3Gear1.relativeStates.w_rel(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", StateSelect = StateSelect.prefer) "relative angular velocity used as state variable";
//   Real robot.axis3.r3Gear1.relativeStates.a_rel(quantity = "AngularAcceleration", unit = "rad/s2") "relative angular acceleration";
//   Real robot.axis3.r3Gear1.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis3.r3Gear1.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Gear1.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Gear1.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis3.r3Gear1.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis3.r3Gear1.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis3.r3Gear1.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis3.r3Gear1.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis3.r3Gear1.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis3.r3Gear1.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis3.r3Gear1.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis3.r3Gear1.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis3.r3Gear1.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis3.r3Gear1.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis3.r3Gear1.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis3.r3Gear1.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis3.r3Gear1.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis3.r3Gear1.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis3.r3Gear1.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis3.r3Gear1.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis3.r3Gear1.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis3.r3Gear1.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis3.r3Gear1.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis3.r3Gear1.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2] = robot.axis3.r3Gear1.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2] = robot.axis3.r3Gear1.Rv0 + robot.axis3.r3Gear1.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis3.r3Gear1.bearingFriction.peak(min = 1.0) = 1.0 "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis3.r3Gear1.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis3.r3Gear1.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis3.r3Gear1.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis3.r3Motor.k = robot.axis3.k "gain of motor";
//   parameter Real robot.axis3.r3Motor.wm = robot.axis3.w "time constant of motor";
//   parameter Real robot.axis3.r3Motor.D = robot.axis3.D "damping constant of motor";
//   input Real robot.axis3.r3Motor.i_ref;
//   Real robot.axis3.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis3.r3Motor.outPort_w;
//   output Real robot.axis3.r3Motor.outPort_phi;
//   Real robot.axis3.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis3.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis3.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis3.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis3.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis3.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis3.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis3.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis3.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis3.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis3.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.emf.k(unit = "N.m/A") = robot.axis3.r3Motor.k "Transformation coefficient";
//   Real robot.axis3.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis3.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis3.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis3.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis3.r3Motor.wm / robot.axis3.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis3.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis3.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis3.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis3.r3Motor.D / robot.axis3.r3Motor.wm "Capacitance";
//   Real robot.axis3.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis3.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis3.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis3.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis3.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis3.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis3.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis3.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis3.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis3.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis3.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis3.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis3.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis3.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis3.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis3.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis3.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis3.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis3.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis3.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis3.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis3.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis3.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis3.r3Control.phi_ref;
//   input Real robot.axis3.r3Control.w_ref;
//   input Real robot.axis3.r3Control.phi;
//   input Real robot.axis3.r3Control.w;
//   output Real robot.axis3.r3Control.i_ref;
//   input Real robot.axis3.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis3.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis3.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis3.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis3.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis3.r3Control.rate2.x[1](start = robot.axis3.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis3.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.rate2.nb(max = robot.axis3.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.rate2.nx = 1;
//   protected Real robot.axis3.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis3.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis3.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis3.r3Control.rate3.y(start = robot.axis3.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis3.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis3.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis3.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis3.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis3.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis3.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis3.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis3.r3Control.rate1.x[1](start = robot.axis3.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis3.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.rate1.nb(max = robot.axis3.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.rate1.nx = 1;
//   protected Real robot.axis3.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis3.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis3.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis3.r3Control.tacho1.y(start = robot.axis3.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis3.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis3.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis3.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis3.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis3.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis3.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis3.r3Control.wSum.u1;
//   output Real robot.axis3.r3Control.wSum.y;
//   input Real robot.axis3.r3Control.wSum.u2;
//   input Real robot.axis3.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis3.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis3.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis3.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis3.r3Control.pSum.u1;
//   output Real robot.axis3.r3Control.pSum.y;
//   input Real robot.axis3.r3Control.pSum.u2;
//   parameter Real robot.axis3.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis3.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis3.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis3.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis3.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis3.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis3.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis3.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis3.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis3.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis3.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis3.r3Control.tacho2.x[1](start = robot.axis3.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis3.r3Control.tacho2.x[2](start = robot.axis3.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis3.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.tacho2.nb(max = robot.axis3.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis3.r3Control.tacho2.nx = 2;
//   protected Real robot.axis3.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis3.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis3.integrator1.u "Connector of Real input signal";
//   output Real robot.axis3.integrator1.y(start = robot.axis3.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis3.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis3.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis3.integrator1.y_start = robot.axis3.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis3.integrator2.u "Connector of Real input signal";
//   output Real robot.axis3.integrator2.y(start = robot.axis3.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis3.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis3.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis3.integrator2.y_start = robot.axis3.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis3.k2.k = robot.axis3.i "Gain value multiplied with input signal";
//   input Real robot.axis3.k2.u "Input signal connector";
//   output Real robot.axis3.k2.y "Output signal connector";
//   parameter Real robot.axis3.k1.k = robot.axis3.i "Gain value multiplied with input signal";
//   input Real robot.axis3.k1.u "Input signal connector";
//   output Real robot.axis3.k1.y "Output signal connector";
//   Real robot.axis3.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis3.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis3.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis3.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis3.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis3.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis3.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis3.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis3.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis3.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis3.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis3.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis3.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis3.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   parameter Real robot.axis4.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[4] "initial value of reference and of joint angle";
//   parameter Real robot.axis4.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis4.k = 0.2365 "gain of motor";
//   parameter Real robot.axis4.w = 6250.0 "time constant of motor";
//   parameter Real robot.axis4.D = 0.55 "damping constant of motor";
//   parameter Real robot.axis4.J = 0.00016 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis4.i = -99.0 "gear ratio";
//   parameter Real robot.axis4.Rv0 = 21.8 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis4.Rv1 = 9.8 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis4.peak = 1.22477064220183 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis4.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis4.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis4.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis4.inPort_a_ref;
//   Real robot.axis4.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis4.r3Gear2.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis4.J "moment of inertia of motor";
//   parameter Real robot.axis4.r3Gear2.i = robot.axis4.i "gear ratio";
//   parameter Real robot.axis4.r3Gear2.Rv0(quantity = "Torque", unit = "N.m") = robot.axis4.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis4.r3Gear2.Rv1 = robot.axis4.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis4.r3Gear2.peak = robot.axis4.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis4.r3Gear2.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis4.r3Gear2.Jmotor.phi_start, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis4.r3Gear2.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis4.r3Gear2.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis4.r3Gear2.J "Moment of inertia";
//   parameter Integer robot.axis4.r3Gear2.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis4.r3Gear2.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis4.r3Gear2.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis4.r3Gear2.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis4.r3Gear2.Jmotor.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis4.r3Gear2.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis4.r3Gear2.Jmotor.w_start, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis4.r3Gear2.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis4.r3Gear2.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis4.r3Gear2.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis4.r3Gear2.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis4.r3Gear2.gear.ratio = robot.axis4.r3Gear2.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis4.r3Gear2.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis4.r3Gear2.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Gear2.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Gear2.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis4.r3Gear2.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis4.r3Gear2.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis4.r3Gear2.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis4.r3Gear2.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis4.r3Gear2.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis4.r3Gear2.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis4.r3Gear2.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis4.r3Gear2.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis4.r3Gear2.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis4.r3Gear2.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis4.r3Gear2.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis4.r3Gear2.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis4.r3Gear2.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis4.r3Gear2.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis4.r3Gear2.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis4.r3Gear2.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis4.r3Gear2.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis4.r3Gear2.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis4.r3Gear2.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis4.r3Gear2.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2] = robot.axis4.r3Gear2.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2] = robot.axis4.r3Gear2.Rv0 + robot.axis4.r3Gear2.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis4.r3Gear2.bearingFriction.peak(min = 1.0) = robot.axis4.r3Gear2.peak "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis4.r3Gear2.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis4.r3Gear2.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis4.r3Gear2.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis4.r3Motor.k = robot.axis4.k "gain of motor";
//   parameter Real robot.axis4.r3Motor.wm = robot.axis4.w "time constant of motor";
//   parameter Real robot.axis4.r3Motor.D = robot.axis4.D "damping constant of motor";
//   input Real robot.axis4.r3Motor.i_ref;
//   Real robot.axis4.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis4.r3Motor.outPort_w;
//   output Real robot.axis4.r3Motor.outPort_phi;
//   Real robot.axis4.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis4.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis4.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis4.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis4.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis4.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis4.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis4.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis4.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis4.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis4.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.emf.k(unit = "N.m/A") = robot.axis4.r3Motor.k "Transformation coefficient";
//   Real robot.axis4.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis4.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis4.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis4.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis4.r3Motor.wm / robot.axis4.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis4.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis4.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis4.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis4.r3Motor.D / robot.axis4.r3Motor.wm "Capacitance";
//   Real robot.axis4.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis4.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis4.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis4.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis4.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis4.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis4.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis4.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis4.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis4.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis4.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis4.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis4.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis4.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis4.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis4.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis4.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis4.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis4.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis4.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis4.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis4.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis4.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis4.r3Control.phi_ref;
//   input Real robot.axis4.r3Control.w_ref;
//   input Real robot.axis4.r3Control.phi;
//   input Real robot.axis4.r3Control.w;
//   output Real robot.axis4.r3Control.i_ref;
//   input Real robot.axis4.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis4.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis4.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis4.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis4.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis4.r3Control.rate2.x[1](start = robot.axis4.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis4.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.rate2.nb(max = robot.axis4.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.rate2.nx = 1;
//   protected Real robot.axis4.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis4.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis4.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis4.r3Control.rate3.y(start = robot.axis4.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis4.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis4.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis4.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis4.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis4.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis4.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis4.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis4.r3Control.rate1.x[1](start = robot.axis4.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis4.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.rate1.nb(max = robot.axis4.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.rate1.nx = 1;
//   protected Real robot.axis4.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis4.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis4.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis4.r3Control.tacho1.y(start = robot.axis4.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis4.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis4.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis4.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis4.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis4.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis4.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis4.r3Control.wSum.u1;
//   output Real robot.axis4.r3Control.wSum.y;
//   input Real robot.axis4.r3Control.wSum.u2;
//   input Real robot.axis4.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis4.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis4.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis4.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis4.r3Control.pSum.u1;
//   output Real robot.axis4.r3Control.pSum.y;
//   input Real robot.axis4.r3Control.pSum.u2;
//   parameter Real robot.axis4.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis4.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis4.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis4.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis4.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis4.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis4.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis4.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis4.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis4.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis4.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis4.r3Control.tacho2.x[1](start = robot.axis4.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis4.r3Control.tacho2.x[2](start = robot.axis4.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis4.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.tacho2.nb(max = robot.axis4.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis4.r3Control.tacho2.nx = 2;
//   protected Real robot.axis4.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis4.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis4.integrator1.u "Connector of Real input signal";
//   output Real robot.axis4.integrator1.y(start = robot.axis4.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis4.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis4.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis4.integrator1.y_start = robot.axis4.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis4.integrator2.u "Connector of Real input signal";
//   output Real robot.axis4.integrator2.y(start = robot.axis4.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis4.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis4.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis4.integrator2.y_start = robot.axis4.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis4.k2.k = robot.axis4.i "Gain value multiplied with input signal";
//   input Real robot.axis4.k2.u "Input signal connector";
//   output Real robot.axis4.k2.y "Output signal connector";
//   parameter Real robot.axis4.k1.k = robot.axis4.i "Gain value multiplied with input signal";
//   input Real robot.axis4.k1.u "Input signal connector";
//   output Real robot.axis4.k1.y "Output signal connector";
//   Real robot.axis4.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis4.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis4.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis4.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis4.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis4.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis4.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis4.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis4.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis4.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis4.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis4.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis4.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis4.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   parameter Real robot.axis5.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[5] "initial value of reference and of joint angle";
//   parameter Real robot.axis5.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis5.k = 0.2608 "gain of motor";
//   parameter Real robot.axis5.w = 6250.0 "time constant of motor";
//   parameter Real robot.axis5.D = 0.55 "damping constant of motor";
//   parameter Real robot.axis5.J = 0.00018 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis5.i = 79.2 "gear ratio";
//   parameter Real robot.axis5.Rv0 = 30.1 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis5.Rv1 = 0.03 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis5.peak = 1.3156146179402 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis5.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis5.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis5.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis5.inPort_a_ref;
//   Real robot.axis5.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis5.r3Gear2.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis5.J "moment of inertia of motor";
//   parameter Real robot.axis5.r3Gear2.i = robot.axis5.i "gear ratio";
//   parameter Real robot.axis5.r3Gear2.Rv0(quantity = "Torque", unit = "N.m") = robot.axis5.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis5.r3Gear2.Rv1 = robot.axis5.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis5.r3Gear2.peak = robot.axis5.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis5.r3Gear2.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis5.r3Gear2.Jmotor.phi_start, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis5.r3Gear2.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis5.r3Gear2.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis5.r3Gear2.J "Moment of inertia";
//   parameter Integer robot.axis5.r3Gear2.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis5.r3Gear2.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis5.r3Gear2.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis5.r3Gear2.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis5.r3Gear2.Jmotor.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis5.r3Gear2.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis5.r3Gear2.Jmotor.w_start, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis5.r3Gear2.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis5.r3Gear2.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis5.r3Gear2.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis5.r3Gear2.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis5.r3Gear2.gear.ratio = robot.axis5.r3Gear2.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis5.r3Gear2.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis5.r3Gear2.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Gear2.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Gear2.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis5.r3Gear2.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis5.r3Gear2.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis5.r3Gear2.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis5.r3Gear2.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis5.r3Gear2.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis5.r3Gear2.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis5.r3Gear2.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis5.r3Gear2.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis5.r3Gear2.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis5.r3Gear2.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis5.r3Gear2.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis5.r3Gear2.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis5.r3Gear2.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis5.r3Gear2.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis5.r3Gear2.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis5.r3Gear2.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis5.r3Gear2.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis5.r3Gear2.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis5.r3Gear2.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis5.r3Gear2.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2] = robot.axis5.r3Gear2.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2] = robot.axis5.r3Gear2.Rv0 + robot.axis5.r3Gear2.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis5.r3Gear2.bearingFriction.peak(min = 1.0) = robot.axis5.r3Gear2.peak "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis5.r3Gear2.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis5.r3Gear2.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis5.r3Gear2.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis5.r3Motor.k = robot.axis5.k "gain of motor";
//   parameter Real robot.axis5.r3Motor.wm = robot.axis5.w "time constant of motor";
//   parameter Real robot.axis5.r3Motor.D = robot.axis5.D "damping constant of motor";
//   input Real robot.axis5.r3Motor.i_ref;
//   Real robot.axis5.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis5.r3Motor.outPort_w;
//   output Real robot.axis5.r3Motor.outPort_phi;
//   Real robot.axis5.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis5.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis5.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis5.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis5.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis5.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis5.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis5.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis5.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis5.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis5.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.emf.k(unit = "N.m/A") = robot.axis5.r3Motor.k "Transformation coefficient";
//   Real robot.axis5.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis5.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis5.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis5.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis5.r3Motor.wm / robot.axis5.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis5.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis5.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis5.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis5.r3Motor.D / robot.axis5.r3Motor.wm "Capacitance";
//   Real robot.axis5.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis5.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis5.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis5.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis5.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis5.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis5.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis5.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis5.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis5.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis5.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis5.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis5.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis5.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis5.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis5.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis5.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis5.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis5.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis5.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis5.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis5.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis5.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis5.r3Control.phi_ref;
//   input Real robot.axis5.r3Control.w_ref;
//   input Real robot.axis5.r3Control.phi;
//   input Real robot.axis5.r3Control.w;
//   output Real robot.axis5.r3Control.i_ref;
//   input Real robot.axis5.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis5.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis5.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis5.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis5.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis5.r3Control.rate2.x[1](start = robot.axis5.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis5.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.rate2.nb(max = robot.axis5.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.rate2.nx = 1;
//   protected Real robot.axis5.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis5.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis5.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis5.r3Control.rate3.y(start = robot.axis5.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis5.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis5.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis5.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis5.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis5.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis5.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis5.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis5.r3Control.rate1.x[1](start = robot.axis5.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis5.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.rate1.nb(max = robot.axis5.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.rate1.nx = 1;
//   protected Real robot.axis5.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis5.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis5.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis5.r3Control.tacho1.y(start = robot.axis5.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis5.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis5.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis5.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis5.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis5.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis5.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis5.r3Control.wSum.u1;
//   output Real robot.axis5.r3Control.wSum.y;
//   input Real robot.axis5.r3Control.wSum.u2;
//   input Real robot.axis5.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis5.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis5.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis5.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis5.r3Control.pSum.u1;
//   output Real robot.axis5.r3Control.pSum.y;
//   input Real robot.axis5.r3Control.pSum.u2;
//   parameter Real robot.axis5.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis5.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis5.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis5.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis5.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis5.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis5.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis5.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis5.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis5.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis5.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis5.r3Control.tacho2.x[1](start = robot.axis5.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis5.r3Control.tacho2.x[2](start = robot.axis5.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis5.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.tacho2.nb(max = robot.axis5.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis5.r3Control.tacho2.nx = 2;
//   protected Real robot.axis5.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis5.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis5.integrator1.u "Connector of Real input signal";
//   output Real robot.axis5.integrator1.y(start = robot.axis5.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis5.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis5.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis5.integrator1.y_start = robot.axis5.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis5.integrator2.u "Connector of Real input signal";
//   output Real robot.axis5.integrator2.y(start = robot.axis5.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis5.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis5.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis5.integrator2.y_start = robot.axis5.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis5.k2.k = robot.axis5.i "Gain value multiplied with input signal";
//   input Real robot.axis5.k2.u "Input signal connector";
//   output Real robot.axis5.k2.y "Output signal connector";
//   parameter Real robot.axis5.k1.k = robot.axis5.i "Gain value multiplied with input signal";
//   input Real robot.axis5.k1.u "Input signal connector";
//   output Real robot.axis5.k1.y "Output signal connector";
//   Real robot.axis5.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis5.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis5.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis5.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis5.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis5.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis5.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis5.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis5.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis5.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis5.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis5.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis5.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis5.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   parameter Real robot.axis6.phi_ref0(quantity = "Angle", unit = "rad", displayUnit = "deg") = robot.q0[6] "initial value of reference and of joint angle";
//   parameter Real robot.axis6.w_ref0(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "initial value of reference and joint speed";
//   parameter Real robot.axis6.k = 0.0842 "gain of motor";
//   parameter Real robot.axis6.w = 7400.0 "time constant of motor";
//   parameter Real robot.axis6.D = 0.27 "damping constant of motor";
//   parameter Real robot.axis6.J = 4.3e-05 "moment of inertia of motor in [kgm^2]";
//   parameter Real robot.axis6.i = -99.0 "gear ratio";
//   parameter Real robot.axis6.Rv0 = 10.9 "viscous friction torque at zero velocity in [Nm]";
//   parameter Real robot.axis6.Rv1 = 3.92 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis6.peak = 1.54128440366972 "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis6.a_ref(quantity = "AngularAcceleration", unit = "rad/s2");
//   Real robot.axis6.w_ref(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min");
//   Real robot.axis6.phi_ref(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   input Real robot.axis6.inPort_a_ref;
//   Real robot.axis6.flange.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.flange.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis6.r3Gear2.J(quantity = "MomentOfInertia", unit = "kg.m2") = robot.axis6.J "moment of inertia of motor";
//   parameter Real robot.axis6.r3Gear2.i = robot.axis6.i "gear ratio";
//   parameter Real robot.axis6.r3Gear2.Rv0(quantity = "Torque", unit = "N.m") = robot.axis6.Rv0 "viscous friction torque at zero velocity";
//   parameter Real robot.axis6.r3Gear2.Rv1 = robot.axis6.Rv1 "viscous friction coefficient in [Nms/rad] (R=Rv0+Rv1*abs(qd))";
//   parameter Real robot.axis6.r3Gear2.peak = robot.axis6.peak "peak*Rv0 = maximum static friction torque (peak >= 1)";
//   Real robot.axis6.r3Gear2.Jmotor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis6.r3Gear2.Jmotor.phi_start, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis6.r3Gear2.Jmotor.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.Jmotor.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.Jmotor.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.Jmotor.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis6.r3Gear2.Jmotor.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = robot.axis6.r3Gear2.J "Moment of inertia";
//   parameter Integer robot.axis6.r3Gear2.Jmotor.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis6.r3Gear2.Jmotor.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis6.r3Gear2.Jmotor.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis6.r3Gear2.Jmotor.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis6.r3Gear2.Jmotor.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis6.r3Gear2.Jmotor.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis6.r3Gear2.Jmotor.w_start, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis6.r3Gear2.Jmotor.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   Real robot.axis6.r3Gear2.gear.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.gear.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.gear.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.gear.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.gear.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis6.r3Gear2.gear.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.gear.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.gear.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis6.r3Gear2.gear.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis6.r3Gear2.gear.ratio = robot.axis6.r3Gear2.i "Transmission ratio (flange_a.phi/flange_b.phi)";
//   Real robot.axis6.r3Gear2.bearingFriction.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.bearingFriction.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.bearingFriction.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.bearingFriction.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.bearingFriction.tau_support(quantity = "Torque", unit = "N.m");
//   Real robot.axis6.r3Gear2.bearingFriction.bearing.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Gear2.bearingFriction.bearing.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Gear2.bearingFriction.phi_a(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis6.r3Gear2.bearingFriction.phi_b(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   parameter Real robot.axis6.r3Gear2.bearingFriction.w_small(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 10000000000.0 "Relative angular velocity near to zero if jumps due to a reinit(..) of the velocity can occur (set to low value only if such impulses can occur)";
//   Real robot.axis6.r3Gear2.bearingFriction.w_relfric(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Relative angular velocity between frictional surfaces";
//   Real robot.axis6.r3Gear2.bearingFriction.a_relfric(quantity = "AngularAcceleration", unit = "rad/s2") "Relative angular acceleration between frictional surfaces";
//   Real robot.axis6.r3Gear2.bearingFriction.tau(quantity = "Torque", unit = "N.m") "Friction torque (positive, if directed in opposite direction of w_rel)";
//   Real robot.axis6.r3Gear2.bearingFriction.tau0(quantity = "Torque", unit = "N.m") "Friction torque for w=0 and forward sliding";
//   Real robot.axis6.r3Gear2.bearingFriction.tau0_max(quantity = "Torque", unit = "N.m") "Maximum friction torque for w=0 and locked";
//   Boolean robot.axis6.r3Gear2.bearingFriction.free "true, if frictional element is not active";
//   Real robot.axis6.r3Gear2.bearingFriction.sa "Path parameter of friction characteristic tau = f(a_relfric)";
//   Boolean robot.axis6.r3Gear2.bearingFriction.startForward(start = false, fixed = true) "true, if w_rel=0 and start of forward sliding or w_rel > w_small";
//   Boolean robot.axis6.r3Gear2.bearingFriction.startBackward(start = false, fixed = true) "true, if w_rel=0 and start of backward sliding or w_rel < -w_small";
//   Boolean robot.axis6.r3Gear2.bearingFriction.locked(start = false) "true, if w_rel=0 and not sliding";
//   constant Integer robot.axis6.r3Gear2.bearingFriction.Unknown = 3 "Value of mode is not known";
//   constant Integer robot.axis6.r3Gear2.bearingFriction.Free = 2 "Element is not active";
//   constant Integer robot.axis6.r3Gear2.bearingFriction.Forward = 1 "w_rel > 0 (forward sliding)";
//   constant Integer robot.axis6.r3Gear2.bearingFriction.Stuck = 0 "w_rel = 0 (forward sliding, locked or backward sliding)";
//   constant Integer robot.axis6.r3Gear2.bearingFriction.Backward = -1 "w_rel < 0 (backward sliding)";
//   Integer robot.axis6.r3Gear2.bearingFriction.mode(min = -1, max = 3, start = 3, fixed = true);
//   protected parameter Real robot.axis6.r3Gear2.bearingFriction.unitAngularAcceleration(quantity = "AngularAcceleration", unit = "rad/s2") = 1.0;
//   protected parameter Real robot.axis6.r3Gear2.bearingFriction.unitTorque(quantity = "Torque", unit = "N.m") = 1.0;
//   parameter Real robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1] = 0.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2] = robot.axis6.r3Gear2.Rv0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1] = 1.0 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2] = robot.axis6.r3Gear2.Rv0 + robot.axis6.r3Gear2.Rv1 "[w,tau] Positive sliding friction characteristic (w>=0)";
//   parameter Real robot.axis6.r3Gear2.bearingFriction.peak(min = 1.0) = robot.axis6.r3Gear2.peak "peak*tau_pos[1,2] = Maximum friction torque for w==0";
//   Real robot.axis6.r3Gear2.bearingFriction.phi(quantity = "Angle", unit = "rad", displayUnit = "deg");
//   Real robot.axis6.r3Gear2.bearingFriction.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange_a and flange_b";
//   Real robot.axis6.r3Gear2.bearingFriction.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of flange_a and flange_b";
//   parameter Real robot.axis6.r3Motor.k = robot.axis6.k "gain of motor";
//   parameter Real robot.axis6.r3Motor.wm = robot.axis6.w "time constant of motor";
//   parameter Real robot.axis6.r3Motor.D = robot.axis6.D "damping constant of motor";
//   input Real robot.axis6.r3Motor.i_ref;
//   Real robot.axis6.r3Motor.flange_motor.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Motor.flange_motor.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis6.r3Motor.outPort_w;
//   output Real robot.axis6.r3Motor.outPort_phi;
//   Real robot.axis6.r3Motor.Vs.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Vs.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Vs.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Vs.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Vs.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis6.r3Motor.Vs.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis6.r3Motor.diff.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis6.r3Motor.diff.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis6.r3Motor.diff.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis6.r3Motor.diff.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis6.r3Motor.diff.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.diff.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.diff.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.diff.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.diff.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.diff.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.diff.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.diff.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.power.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis6.r3Motor.power.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis6.r3Motor.power.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis6.r3Motor.power.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis6.r3Motor.power.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.power.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.power.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.power.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.power.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.power.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.power.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.power.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.emf.k(unit = "N.m/A") = robot.axis6.r3Motor.k "Transformation coefficient";
//   Real robot.axis6.r3Motor.emf.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins";
//   Real robot.axis6.r3Motor.emf.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from positive to negative pin";
//   Real robot.axis6.r3Motor.emf.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Angular velocity of flange_b";
//   Real robot.axis6.r3Motor.emf.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.emf.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.emf.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.emf.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.emf.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Motor.emf.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.r3Motor.La.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.La.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.La.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.La.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.La.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.La.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.La.L(quantity = "Inductance", unit = "H") = 250.0 * 1.0 / robot.axis6.r3Motor.wm / robot.axis6.r3Motor.D / 2.0 "Inductance";
//   Real robot.axis6.r3Motor.Ra.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Ra.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Ra.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Ra.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Ra.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Ra.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Ra.R(quantity = "Resistance", unit = "Ohm") = 250.0 "Resistance";
//   Real robot.axis6.r3Motor.Rd2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rd2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rd2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rd2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rd2.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis6.r3Motor.C.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.C.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.C.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.C.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.C.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.C.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.C.C(quantity = "Capacitance", unit = "F", min = 0.0) = 0.004 * robot.axis6.r3Motor.D / robot.axis6.r3Motor.wm "Capacitance";
//   Real robot.axis6.r3Motor.OpI.v1(quantity = "ElectricPotential", unit = "V") "Voltage drop over the left port";
//   Real robot.axis6.r3Motor.OpI.v2(quantity = "ElectricPotential", unit = "V") "Voltage drop over the right port";
//   Real robot.axis6.r3Motor.OpI.i1(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the left port";
//   Real robot.axis6.r3Motor.OpI.i2(quantity = "ElectricCurrent", unit = "A") "Current flowing from pos. to neg. pin of the right port";
//   Real robot.axis6.r3Motor.OpI.p1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.OpI.p1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.OpI.n1.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.OpI.n1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.OpI.p2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.OpI.p2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.OpI.n2.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.OpI.n2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rd1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rd1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rd1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rd1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rd1.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis6.r3Motor.Ri.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Ri.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Ri.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Ri.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Ri.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Ri.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Ri.R(quantity = "Resistance", unit = "Ohm") = 10.0 "Resistance";
//   Real robot.axis6.r3Motor.Rp1.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rp1.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rp1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rp1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rp1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rp1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rp1.R(quantity = "Resistance", unit = "Ohm") = 200.0 "Resistance";
//   Real robot.axis6.r3Motor.Rp2.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rp2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rp2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rp2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rp2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rp2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rp2.R(quantity = "Resistance", unit = "Ohm") = 50.0 "Resistance";
//   Real robot.axis6.r3Motor.Rd4.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rd4.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rd4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rd4.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd4.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rd4.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis6.r3Motor.hall2.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.hall2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.hall2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.hall2.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.hall2.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   input Real robot.axis6.r3Motor.hall2.v(quantity = "ElectricPotential", unit = "V") "Voltage between pin p and n (= p.v - n.v) as input signal";
//   Real robot.axis6.r3Motor.Rd3.v(quantity = "ElectricPotential", unit = "V") "Voltage drop between the two pins (= p.v - n.v)";
//   Real robot.axis6.r3Motor.Rd3.i(quantity = "ElectricCurrent", unit = "A") "Current flowing from pin p to pin n";
//   Real robot.axis6.r3Motor.Rd3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.Rd3.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.Rd3.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   parameter Real robot.axis6.r3Motor.Rd3.R(quantity = "Resistance", unit = "Ohm") = 100.0 "Resistance";
//   Real robot.axis6.r3Motor.g1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.g1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.g2.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.g2.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.g3.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.g3.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.hall1.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.hall1.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.hall1.n.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.hall1.n.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   output Real robot.axis6.r3Motor.hall1.i(quantity = "ElectricCurrent", unit = "A") "current in the branch from p to n as output signal";
//   Real robot.axis6.r3Motor.g4.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.g4.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.g5.p.v(quantity = "ElectricPotential", unit = "V") "Potential at the pin";
//   Real robot.axis6.r3Motor.g5.p.i(quantity = "ElectricCurrent", unit = "A") "Current flowing into the pin";
//   Real robot.axis6.r3Motor.phi.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Motor.phi.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis6.r3Motor.phi.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute angle of flange";
//   Real robot.axis6.r3Motor.w.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.r3Motor.w.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   output Real robot.axis6.r3Motor.w.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") "Absolute angular velocity of flange";
//   input Real robot.axis6.r3Control.phi_ref;
//   input Real robot.axis6.r3Control.w_ref;
//   input Real robot.axis6.r3Control.phi;
//   input Real robot.axis6.r3Control.w;
//   output Real robot.axis6.r3Control.i_ref;
//   input Real robot.axis6.r3Control.rate2.u "Connector of Real input signal";
//   output Real robot.axis6.r3Control.rate2.y "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.rate2.b[1] = 0.00995 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate2.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate2.a[1] = 0.00056 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate2.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis6.r3Control.rate2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis6.r3Control.rate2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis6.r3Control.rate2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis6.r3Control.rate2.x[1](start = robot.axis6.r3Control.rate2.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis6.r3Control.rate2.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.rate2.nb(max = robot.axis6.r3Control.rate2.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.rate2.nx = 1;
//   protected Real robot.axis6.r3Control.rate2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis6.r3Control.rate2.xn "Highest order state of TransferFcn";
//   input Real robot.axis6.r3Control.rate3.u "Connector of Real input signal";
//   output Real robot.axis6.r3Control.rate3.y(start = robot.axis6.r3Control.rate3.y_start) "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.rate3.k = 340.8 "Integrator gain";
//   parameter Integer robot.axis6.r3Control.rate3.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis6.r3Control.rate3.y_start = 0.0 "Initial or guess value of output (= state)";
//   input Real robot.axis6.r3Control.rate1.u "Connector of Real input signal";
//   output Real robot.axis6.r3Control.rate1.y "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.rate1.b[1] = 0.04 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate1.b[2] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate1.a[1] = 0.0202 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.rate1.a[2] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis6.r3Control.rate1.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis6.r3Control.rate1.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis6.r3Control.rate1.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis6.r3Control.rate1.x[1](start = robot.axis6.r3Control.rate1.x_start[1]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis6.r3Control.rate1.na = 2 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.rate1.nb(max = robot.axis6.r3Control.rate1.na) = 2 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.rate1.nx = 1;
//   protected Real robot.axis6.r3Control.rate1.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis6.r3Control.rate1.xn "Highest order state of TransferFcn";
//   input Real robot.axis6.r3Control.tacho1.u "Connector of Real input signal";
//   output Real robot.axis6.r3Control.tacho1.y(start = robot.axis6.r3Control.tacho1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.tacho1.k = 0.03 "Gain";
//   parameter Real robot.axis6.r3Control.tacho1.T(quantity = "Time", unit = "s") = 0.0008475 "Time Constant";
//   parameter Integer robot.axis6.r3Control.tacho1.initType(min = 1, max = 4) = 1 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis6.r3Control.tacho1.y_start = 0.0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis6.r3Control.Kd.k = 0.03 "Gain value multiplied with input signal";
//   input Real robot.axis6.r3Control.Kd.u "Input signal connector";
//   output Real robot.axis6.r3Control.Kd.y "Output signal connector";
//   input Real robot.axis6.r3Control.wSum.u1;
//   output Real robot.axis6.r3Control.wSum.y;
//   input Real robot.axis6.r3Control.wSum.u2;
//   input Real robot.axis6.r3Control.sum.u1 "Connector of Real input signal 1";
//   input Real robot.axis6.r3Control.sum.u2 "Connector of Real input signal 2";
//   output Real robot.axis6.r3Control.sum.y "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.sum.k1 = 1.0 "Gain of upper input";
//   parameter Real robot.axis6.r3Control.sum.k2 = 1.0 "Gain of lower input";
//   input Real robot.axis6.r3Control.pSum.u1;
//   output Real robot.axis6.r3Control.pSum.y;
//   input Real robot.axis6.r3Control.pSum.u2;
//   parameter Real robot.axis6.r3Control.Kv.k = 0.3 "Gain value multiplied with input signal";
//   input Real robot.axis6.r3Control.Kv.u "Input signal connector";
//   output Real robot.axis6.r3Control.Kv.y "Output signal connector";
//   input Real robot.axis6.r3Control.tacho2.u "Connector of Real input signal";
//   output Real robot.axis6.r3Control.tacho2.y "Connector of Real output signal";
//   parameter Real robot.axis6.r3Control.tacho2.b[1] = 1.0 "Numerator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.tacho2.a[1] = 2.46536409976244e-07 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.tacho2.a[2] = 0.000291956305858987 "Denominator coefficients of transfer function.";
//   parameter Real robot.axis6.r3Control.tacho2.a[3] = 1.0 "Denominator coefficients of transfer function.";
//   parameter Integer robot.axis6.r3Control.tacho2.initType(min = 1, max = 4) = 1 "Type of initialization";
//   parameter Real robot.axis6.r3Control.tacho2.x_start[1] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis6.r3Control.tacho2.x_start[2] = 0.0 "Initial or guess values of states";
//   parameter Real robot.axis6.r3Control.tacho2.y_start = 0.0 "Initial value of output (derivatives of y are zero upto nx-1-th derivative)";
//   output Real robot.axis6.r3Control.tacho2.x[1](start = robot.axis6.r3Control.tacho2.x_start[1]) "State of transfer function from controller canonical form";
//   output Real robot.axis6.r3Control.tacho2.x[2](start = robot.axis6.r3Control.tacho2.x_start[2]) "State of transfer function from controller canonical form";
//   protected parameter Integer robot.axis6.r3Control.tacho2.na = 3 "Size of Denominator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.tacho2.nb(max = robot.axis6.r3Control.tacho2.na) = 1 "Size of Numerator of transfer function.";
//   protected parameter Integer robot.axis6.r3Control.tacho2.nx = 2;
//   protected Real robot.axis6.r3Control.tacho2.x1dot "Derivative of first state of TransferFcn";
//   protected Real robot.axis6.r3Control.tacho2.xn "Highest order state of TransferFcn";
//   input Real robot.axis6.integrator1.u "Connector of Real input signal";
//   output Real robot.axis6.integrator1.y(start = robot.axis6.integrator1.y_start) "Connector of Real output signal";
//   parameter Real robot.axis6.integrator1.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis6.integrator1.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis6.integrator1.y_start = robot.axis6.w_ref0 "Initial or guess value of output (= state)";
//   input Real robot.axis6.integrator2.u "Connector of Real input signal";
//   output Real robot.axis6.integrator2.y(start = robot.axis6.integrator2.y_start) "Connector of Real output signal";
//   parameter Real robot.axis6.integrator2.k = 1.0 "Integrator gain";
//   parameter Integer robot.axis6.integrator2.initType(min = 1, max = 4) = 3 "Type of initialization (InitialState and InitialOutput are identical)";
//   parameter Real robot.axis6.integrator2.y_start = robot.axis6.phi_ref0 "Initial or guess value of output (= state)";
//   parameter Real robot.axis6.k2.k = robot.axis6.i "Gain value multiplied with input signal";
//   input Real robot.axis6.k2.u "Input signal connector";
//   output Real robot.axis6.k2.y "Output signal connector";
//   parameter Real robot.axis6.k1.k = robot.axis6.i "Gain value multiplied with input signal";
//   input Real robot.axis6.k1.u "Input signal connector";
//   output Real robot.axis6.k1.y "Output signal connector";
//   Real robot.axis6.states.phi(quantity = "Angle", unit = "rad", displayUnit = "deg", start = robot.axis6.phi_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute rotation angle of component (= flange_a.phi = flange_b.phi)";
//   Real robot.axis6.states.flange_a.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.states.flange_a.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   Real robot.axis6.states.flange_b.phi(quantity = "Angle", unit = "rad", displayUnit = "deg") "Absolute rotation angle of flange";
//   Real robot.axis6.states.flange_b.tau(quantity = "Torque", unit = "N.m") "Cut torque in the flange";
//   parameter Real robot.axis6.states.J(quantity = "MomentOfInertia", unit = "kg.m2", min = 0.0) = 0.0 "Moment of inertia";
//   parameter Integer robot.axis6.states.initType(min = 1, max = 9) = 1 "Type of initialization (defines usage of start values below)";
//   parameter Real robot.axis6.states.phi_start(quantity = "Angle", unit = "rad", displayUnit = "deg") = 0.0 "Initial or guess value of rotor rotation angle phi";
//   parameter Real robot.axis6.states.w_start(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min") = 0.0 "Initial or guess value of angular velocity w = der(phi)";
//   parameter Real robot.axis6.states.a_start(quantity = "AngularAcceleration", unit = "rad/s2") = 0.0 "Initial value of angular acceleration a = der(w)";
//   parameter Integer robot.axis6.states.stateSelection(min = 1, max = 5) = 3 "Priority to use phi and w as states";
//   Real robot.axis6.states.w(quantity = "AngularVelocity", unit = "rad/s", displayUnit = "rev/min", start = robot.axis6.w_ref0, fixed = true, StateSelect = StateSelect.default) "Absolute angular velocity of component";
//   Real robot.axis6.states.a(quantity = "AngularAcceleration", unit = "rad/s2") "Absolute angular acceleration of component";
//   input Real robot.a_ref1;
//   input Real robot.a_ref2;
//   input Real robot.a_ref3;
//   input Real robot.a_ref4;
//   input Real robot.a_ref5;
//   input Real robot.a_ref6;
//   parameter Integer a_ref1.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref1.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref1.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref1.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[1,2] = 30.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[2,1] = 0.1 "table matrix (time = first column)";
//   parameter Real a_ref1.table[2,2] = 30.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[3,1] = 0.1 "table matrix (time = first column)";
//   parameter Real a_ref1.table[3,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[4,1] = 0.74 "table matrix (time = first column)";
//   parameter Real a_ref1.table[4,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[5,1] = 0.74 "table matrix (time = first column)";
//   parameter Real a_ref1.table[5,2] = -13.96 "table matrix (time = first column)";
//   parameter Real a_ref1.table[6,1] = 1.12 "table matrix (time = first column)";
//   parameter Real a_ref1.table[6,2] = -13.96 "table matrix (time = first column)";
//   parameter Real a_ref1.table[7,1] = 1.12 "table matrix (time = first column)";
//   parameter Real a_ref1.table[7,2] = 28.75 "table matrix (time = first column)";
//   parameter Real a_ref1.table[8,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref1.table[8,2] = 28.75 "table matrix (time = first column)";
//   parameter Real a_ref1.table[9,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref1.table[9,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref1.table[10,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref1.table[10,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref1.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref1.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref1.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref1.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref1.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref1.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref1.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref1.t_min(fixed = false);
//   parameter Real a_ref1.t_max(fixed = false);
//   protected parameter Real a_ref1.p_offset[1] = a_ref1.offset[1];
//   protected Integer a_ref1.tableID;
//   parameter Integer a_ref2.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref2.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref2.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref2.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[1,2] = -15.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[2,1] = 0.1 "table matrix (time = first column)";
//   parameter Real a_ref2.table[2,2] = -15.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[3,1] = 0.1 "table matrix (time = first column)";
//   parameter Real a_ref2.table[3,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[4,1] = 1.1 "table matrix (time = first column)";
//   parameter Real a_ref2.table[4,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[5,1] = 1.1 "table matrix (time = first column)";
//   parameter Real a_ref2.table[5,2] = 15.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[6,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref2.table[6,2] = 15.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[7,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref2.table[7,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref2.table[8,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref2.table[8,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref2.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref2.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref2.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref2.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref2.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref2.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref2.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref2.t_min(fixed = false);
//   parameter Real a_ref2.t_max(fixed = false);
//   protected parameter Real a_ref2.p_offset[1] = a_ref2.offset[1];
//   protected Integer a_ref2.tableID;
//   parameter Integer a_ref3.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref3.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref3.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref3.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[1,2] = 30.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[2,1] = 0.15 "table matrix (time = first column)";
//   parameter Real a_ref3.table[2,2] = 30.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[3,1] = 0.15 "table matrix (time = first column)";
//   parameter Real a_ref3.table[3,2] = -21.56 "table matrix (time = first column)";
//   parameter Real a_ref3.table[4,1] = 0.6 "table matrix (time = first column)";
//   parameter Real a_ref3.table[4,2] = -21.56 "table matrix (time = first column)";
//   parameter Real a_ref3.table[5,1] = 0.6 "table matrix (time = first column)";
//   parameter Real a_ref3.table[5,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[6,1] = 0.9 "table matrix (time = first column)";
//   parameter Real a_ref3.table[6,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[7,1] = 0.9 "table matrix (time = first column)";
//   parameter Real a_ref3.table[7,2] = 17.33 "table matrix (time = first column)";
//   parameter Real a_ref3.table[8,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref3.table[8,2] = 17.33 "table matrix (time = first column)";
//   parameter Real a_ref3.table[9,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref3.table[9,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref3.table[10,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref3.table[10,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref3.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref3.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref3.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref3.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref3.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref3.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref3.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref3.t_min(fixed = false);
//   parameter Real a_ref3.t_max(fixed = false);
//   protected parameter Real a_ref3.p_offset[1] = a_ref3.offset[1];
//   protected Integer a_ref3.tableID;
//   parameter Integer a_ref4.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref4.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref4.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref4.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[1,2] = -80.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[2,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref4.table[2,2] = -80.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[3,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref4.table[3,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[4,1] = 0.54 "table matrix (time = first column)";
//   parameter Real a_ref4.table[4,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[5,1] = 0.54 "table matrix (time = first column)";
//   parameter Real a_ref4.table[5,2] = 71.11 "table matrix (time = first column)";
//   parameter Real a_ref4.table[6,1] = 0.63 "table matrix (time = first column)";
//   parameter Real a_ref4.table[6,2] = 71.11 "table matrix (time = first column)";
//   parameter Real a_ref4.table[7,1] = 0.63 "table matrix (time = first column)";
//   parameter Real a_ref4.table[7,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[8,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref4.table[8,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[9,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref4.table[9,2] = -53.33 "table matrix (time = first column)";
//   parameter Real a_ref4.table[10,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref4.table[10,2] = -53.33 "table matrix (time = first column)";
//   parameter Real a_ref4.table[11,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref4.table[11,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref4.table[12,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref4.table[12,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref4.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref4.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref4.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref4.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref4.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref4.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref4.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref4.t_min(fixed = false);
//   parameter Real a_ref4.t_max(fixed = false);
//   protected parameter Real a_ref4.p_offset[1] = a_ref4.offset[1];
//   protected Integer a_ref4.tableID;
//   parameter Integer a_ref5.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref5.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref5.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref5.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[1,2] = 105.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[2,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref5.table[2,2] = 105.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[3,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref5.table[3,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[4,1] = 1.02 "table matrix (time = first column)";
//   parameter Real a_ref5.table[4,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[5,1] = 1.02 "table matrix (time = first column)";
//   parameter Real a_ref5.table[5,2] = -68.33 "table matrix (time = first column)";
//   parameter Real a_ref5.table[6,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref5.table[6,2] = -68.33 "table matrix (time = first column)";
//   parameter Real a_ref5.table[7,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref5.table[7,2] = 66.67 "table matrix (time = first column)";
//   parameter Real a_ref5.table[8,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref5.table[8,2] = 66.67 "table matrix (time = first column)";
//   parameter Real a_ref5.table[9,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref5.table[9,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref5.table[10,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref5.table[10,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref5.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref5.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref5.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref5.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref5.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref5.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref5.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref5.t_min(fixed = false);
//   parameter Real a_ref5.t_max(fixed = false);
//   protected parameter Real a_ref5.p_offset[1] = a_ref5.offset[1];
//   protected Integer a_ref5.tableID;
//   parameter Integer a_ref6.nout(min = 1) = 1 "Number of outputs";
//   output Real a_ref6.y[1] "Connector of Real output signals";
//   parameter Boolean a_ref6.tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter Real a_ref6.table[1,1] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[1,2] = -95.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[2,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref6.table[2,2] = -95.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[3,1] = 0.04 "table matrix (time = first column)";
//   parameter Real a_ref6.table[3,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[4,1] = 0.54 "table matrix (time = first column)";
//   parameter Real a_ref6.table[4,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[5,1] = 0.54 "table matrix (time = first column)";
//   parameter Real a_ref6.table[5,2] = 84.44 "table matrix (time = first column)";
//   parameter Real a_ref6.table[6,1] = 0.63 "table matrix (time = first column)";
//   parameter Real a_ref6.table[6,2] = 84.44 "table matrix (time = first column)";
//   parameter Real a_ref6.table[7,1] = 0.63 "table matrix (time = first column)";
//   parameter Real a_ref6.table[7,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[8,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref6.table[8,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[9,1] = 1.14 "table matrix (time = first column)";
//   parameter Real a_ref6.table[9,2] = -63.33 "table matrix (time = first column)";
//   parameter Real a_ref6.table[10,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref6.table[10,2] = -63.33 "table matrix (time = first column)";
//   parameter Real a_ref6.table[11,1] = 1.2 "table matrix (time = first column)";
//   parameter Real a_ref6.table[11,2] = 0.0 "table matrix (time = first column)";
//   parameter Real a_ref6.table[12,1] = 1.3 "table matrix (time = first column)";
//   parameter Real a_ref6.table[12,2] = 0.0 "table matrix (time = first column)";
//   parameter String a_ref6.tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String a_ref6.fileName = "NoName" "file where matrix is stored";
//   parameter Integer a_ref6.columns[1] = 2 "columns of table to be interpolated";
//   parameter Integer a_ref6.smoothness = 0 "smoothness of table interpolation";
//   parameter Integer a_ref6.extrapolation = 1 "extrapolation of data outside the definition range";
//   parameter Real a_ref6.offset[1] = 0.0 "Offsets of output signals";
//   parameter Real a_ref6.startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real a_ref6.t_min(fixed = false);
//   parameter Real a_ref6.t_max(fixed = false);
//   protected parameter Real a_ref6.p_offset[1] = a_ref6.offset[1];
//   protected Integer a_ref6.tableID;
// initial equation
//   robot.axis1.r3Control.rate3.y = robot.axis1.r3Control.rate3.y_start;
//   robot.axis1.integrator1.y = robot.axis1.integrator1.y_start;
//   robot.axis1.integrator2.y = robot.axis1.integrator2.y_start;
//   robot.axis2.r3Control.rate3.y = robot.axis2.r3Control.rate3.y_start;
//   robot.axis2.integrator1.y = robot.axis2.integrator1.y_start;
//   robot.axis2.integrator2.y = robot.axis2.integrator2.y_start;
//   robot.axis3.r3Control.rate3.y = robot.axis3.r3Control.rate3.y_start;
//   robot.axis3.integrator1.y = robot.axis3.integrator1.y_start;
//   robot.axis3.integrator2.y = robot.axis3.integrator2.y_start;
//   robot.axis4.r3Control.rate3.y = robot.axis4.r3Control.rate3.y_start;
//   robot.axis4.integrator1.y = robot.axis4.integrator1.y_start;
//   robot.axis4.integrator2.y = robot.axis4.integrator2.y_start;
//   robot.axis5.r3Control.rate3.y = robot.axis5.r3Control.rate3.y_start;
//   robot.axis5.integrator1.y = robot.axis5.integrator1.y_start;
//   robot.axis5.integrator2.y = robot.axis5.integrator2.y_start;
//   robot.axis6.r3Control.rate3.y = robot.axis6.r3Control.rate3.y_start;
//   robot.axis6.integrator1.y = robot.axis6.integrator1.y_start;
//   robot.axis6.integrator2.y = robot.axis6.integrator2.y_start;
//   a_ref1.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref1.tableID);
//   a_ref1.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref1.tableID);
//   a_ref2.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref2.tableID);
//   a_ref2.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref2.tableID);
//   a_ref3.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref3.tableID);
//   a_ref3.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref3.tableID);
//   a_ref4.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref4.tableID);
//   a_ref4.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref4.tableID);
//   a_ref5.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref5.tableID);
//   a_ref5.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref5.tableID);
//   a_ref6.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(a_ref6.tableID);
//   a_ref6.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(a_ref6.tableID);
// equation
//   robot.mechanics.inertial.gravity[1] = robot.mechanics.inertial.g * robot.mechanics.inertial.ng[1];
//   robot.mechanics.inertial.gravity[2] = robot.mechanics.inertial.g * robot.mechanics.inertial.ng[2];
//   robot.mechanics.inertial.gravity[3] = robot.mechanics.inertial.g * robot.mechanics.inertial.ng[3];
//   robot.mechanics.inertial.frame_b.S[1,1] = 1.0;
//   robot.mechanics.inertial.frame_b.S[1,2] = 0.0;
//   robot.mechanics.inertial.frame_b.S[1,3] = 0.0;
//   robot.mechanics.inertial.frame_b.S[2,1] = 0.0;
//   robot.mechanics.inertial.frame_b.S[2,2] = 1.0;
//   robot.mechanics.inertial.frame_b.S[2,3] = 0.0;
//   robot.mechanics.inertial.frame_b.S[3,1] = 0.0;
//   robot.mechanics.inertial.frame_b.S[3,2] = 0.0;
//   robot.mechanics.inertial.frame_b.S[3,3] = 1.0;
//   robot.mechanics.inertial.frame_b.r0[1] = 0.0;
//   robot.mechanics.inertial.frame_b.r0[2] = 0.0;
//   robot.mechanics.inertial.frame_b.r0[3] = 0.0;
//   robot.mechanics.inertial.frame_b.v[1] = 0.0;
//   robot.mechanics.inertial.frame_b.v[2] = 0.0;
//   robot.mechanics.inertial.frame_b.v[3] = 0.0;
//   robot.mechanics.inertial.frame_b.w[1] = 0.0;
//   robot.mechanics.inertial.frame_b.w[2] = 0.0;
//   robot.mechanics.inertial.frame_b.w[3] = 0.0;
//   robot.mechanics.inertial.frame_b.a[1] = -robot.mechanics.inertial.gravity[1];
//   robot.mechanics.inertial.frame_b.a[2] = -robot.mechanics.inertial.gravity[2];
//   robot.mechanics.inertial.frame_b.a[3] = -robot.mechanics.inertial.gravity[3];
//   robot.mechanics.inertial.frame_b.z[1] = 0.0;
//   robot.mechanics.inertial.frame_b.z[2] = 0.0;
//   robot.mechanics.inertial.frame_b.z[3] = 0.0;
//   robot.mechanics.r1.axis.phi = robot.mechanics.r1.q;
//   robot.mechanics.r1.bearing.phi = 0.0;
//   robot.mechanics.r1.qd = der(robot.mechanics.r1.q);
//   robot.mechanics.r1.qdd = der(robot.mechanics.r1.qd);
//   robot.mechanics.r1.nn[1] = robot.mechanics.r1.n[1] / sqrt(robot.mechanics.r1.n[1] ^ 2.0 + (robot.mechanics.r1.n[2] ^ 2.0 + robot.mechanics.r1.n[3] ^ 2.0));
//   robot.mechanics.r1.nn[2] = robot.mechanics.r1.n[2] / sqrt(robot.mechanics.r1.n[1] ^ 2.0 + (robot.mechanics.r1.n[2] ^ 2.0 + robot.mechanics.r1.n[3] ^ 2.0));
//   robot.mechanics.r1.nn[3] = robot.mechanics.r1.n[3] / sqrt(robot.mechanics.r1.n[1] ^ 2.0 + (robot.mechanics.r1.n[2] ^ 2.0 + robot.mechanics.r1.n[3] ^ 2.0));
//   robot.mechanics.r1.qq = robot.mechanics.r1.q - 0.0174532925199433 * robot.mechanics.r1.q0;
//   robot.mechanics.r1.sinq = sin(robot.mechanics.r1.qq);
//   robot.mechanics.r1.cosq = cos(robot.mechanics.r1.qq);
//   robot.mechanics.r1.S_rel[1,1] = robot.mechanics.r1.nn[1] ^ 2.0 + robot.mechanics.r1.cosq * (1.0 - robot.mechanics.r1.nn[1] ^ 2.0);
//   robot.mechanics.r1.S_rel[1,2] = robot.mechanics.r1.nn[1] * robot.mechanics.r1.nn[2] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[1]) * robot.mechanics.r1.nn[2]) - (-robot.mechanics.r1.sinq) * robot.mechanics.r1.nn[3];
//   robot.mechanics.r1.S_rel[1,3] = robot.mechanics.r1.nn[1] * robot.mechanics.r1.nn[3] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[1]) * robot.mechanics.r1.nn[3]) - robot.mechanics.r1.sinq * robot.mechanics.r1.nn[2];
//   robot.mechanics.r1.S_rel[2,1] = robot.mechanics.r1.nn[2] * robot.mechanics.r1.nn[1] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[2]) * robot.mechanics.r1.nn[1]) - robot.mechanics.r1.sinq * robot.mechanics.r1.nn[3];
//   robot.mechanics.r1.S_rel[2,2] = robot.mechanics.r1.nn[2] ^ 2.0 + robot.mechanics.r1.cosq * (1.0 - robot.mechanics.r1.nn[2] ^ 2.0);
//   robot.mechanics.r1.S_rel[2,3] = robot.mechanics.r1.nn[2] * robot.mechanics.r1.nn[3] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[2]) * robot.mechanics.r1.nn[3]) - (-robot.mechanics.r1.sinq) * robot.mechanics.r1.nn[1];
//   robot.mechanics.r1.S_rel[3,1] = robot.mechanics.r1.nn[3] * robot.mechanics.r1.nn[1] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[3]) * robot.mechanics.r1.nn[1]) - (-robot.mechanics.r1.sinq) * robot.mechanics.r1.nn[2];
//   robot.mechanics.r1.S_rel[3,2] = robot.mechanics.r1.nn[3] * robot.mechanics.r1.nn[2] + robot.mechanics.r1.cosq * ((-robot.mechanics.r1.nn[3]) * robot.mechanics.r1.nn[2]) - robot.mechanics.r1.sinq * robot.mechanics.r1.nn[1];
//   robot.mechanics.r1.S_rel[3,3] = robot.mechanics.r1.nn[3] ^ 2.0 + robot.mechanics.r1.cosq * (1.0 - robot.mechanics.r1.nn[3] ^ 2.0);
//   robot.mechanics.r1.r_rela[1] = 0.0;
//   robot.mechanics.r1.r_rela[2] = 0.0;
//   robot.mechanics.r1.r_rela[3] = 0.0;
//   robot.mechanics.r1.v_rela[1] = 0.0;
//   robot.mechanics.r1.v_rela[2] = 0.0;
//   robot.mechanics.r1.v_rela[3] = 0.0;
//   robot.mechanics.r1.a_rela[1] = 0.0;
//   robot.mechanics.r1.a_rela[2] = 0.0;
//   robot.mechanics.r1.a_rela[3] = 0.0;
//   robot.mechanics.r1.w_rela[1] = robot.mechanics.r1.qd * robot.mechanics.r1.nn[1];
//   robot.mechanics.r1.w_rela[2] = robot.mechanics.r1.qd * robot.mechanics.r1.nn[2];
//   robot.mechanics.r1.w_rela[3] = robot.mechanics.r1.qd * robot.mechanics.r1.nn[3];
//   robot.mechanics.r1.z_rela[1] = robot.mechanics.r1.qdd * robot.mechanics.r1.nn[1];
//   robot.mechanics.r1.z_rela[2] = robot.mechanics.r1.qdd * robot.mechanics.r1.nn[2];
//   robot.mechanics.r1.z_rela[3] = robot.mechanics.r1.qdd * robot.mechanics.r1.nn[3];
//   robot.mechanics.r1.Sb[1,1] = robot.mechanics.r1.Sa[1,1] * robot.mechanics.r1.S_rel[1,1] + (robot.mechanics.r1.Sa[1,2] * robot.mechanics.r1.S_rel[1,2] + robot.mechanics.r1.Sa[1,3] * robot.mechanics.r1.S_rel[1,3]);
//   robot.mechanics.r1.Sb[1,2] = robot.mechanics.r1.Sa[1,1] * robot.mechanics.r1.S_rel[2,1] + (robot.mechanics.r1.Sa[1,2] * robot.mechanics.r1.S_rel[2,2] + robot.mechanics.r1.Sa[1,3] * robot.mechanics.r1.S_rel[2,3]);
//   robot.mechanics.r1.Sb[1,3] = robot.mechanics.r1.Sa[1,1] * robot.mechanics.r1.S_rel[3,1] + (robot.mechanics.r1.Sa[1,2] * robot.mechanics.r1.S_rel[3,2] + robot.mechanics.r1.Sa[1,3] * robot.mechanics.r1.S_rel[3,3]);
//   robot.mechanics.r1.Sb[2,1] = robot.mechanics.r1.Sa[2,1] * robot.mechanics.r1.S_rel[1,1] + (robot.mechanics.r1.Sa[2,2] * robot.mechanics.r1.S_rel[1,2] + robot.mechanics.r1.Sa[2,3] * robot.mechanics.r1.S_rel[1,3]);
//   robot.mechanics.r1.Sb[2,2] = robot.mechanics.r1.Sa[2,1] * robot.mechanics.r1.S_rel[2,1] + (robot.mechanics.r1.Sa[2,2] * robot.mechanics.r1.S_rel[2,2] + robot.mechanics.r1.Sa[2,3] * robot.mechanics.r1.S_rel[2,3]);
//   robot.mechanics.r1.Sb[2,3] = robot.mechanics.r1.Sa[2,1] * robot.mechanics.r1.S_rel[3,1] + (robot.mechanics.r1.Sa[2,2] * robot.mechanics.r1.S_rel[3,2] + robot.mechanics.r1.Sa[2,3] * robot.mechanics.r1.S_rel[3,3]);
//   robot.mechanics.r1.Sb[3,1] = robot.mechanics.r1.Sa[3,1] * robot.mechanics.r1.S_rel[1,1] + (robot.mechanics.r1.Sa[3,2] * robot.mechanics.r1.S_rel[1,2] + robot.mechanics.r1.Sa[3,3] * robot.mechanics.r1.S_rel[1,3]);
//   robot.mechanics.r1.Sb[3,2] = robot.mechanics.r1.Sa[3,1] * robot.mechanics.r1.S_rel[2,1] + (robot.mechanics.r1.Sa[3,2] * robot.mechanics.r1.S_rel[2,2] + robot.mechanics.r1.Sa[3,3] * robot.mechanics.r1.S_rel[2,3]);
//   robot.mechanics.r1.Sb[3,3] = robot.mechanics.r1.Sa[3,1] * robot.mechanics.r1.S_rel[3,1] + (robot.mechanics.r1.Sa[3,2] * robot.mechanics.r1.S_rel[3,2] + robot.mechanics.r1.Sa[3,3] * robot.mechanics.r1.S_rel[3,3]);
//   robot.mechanics.r1.r0b[1] = robot.mechanics.r1.r0a[1];
//   robot.mechanics.r1.r0b[2] = robot.mechanics.r1.r0a[2];
//   robot.mechanics.r1.r0b[3] = robot.mechanics.r1.r0a[3];
//   robot.mechanics.r1.vb[1] = robot.mechanics.r1.S_rel[1,1] * robot.mechanics.r1.va[1] + (robot.mechanics.r1.S_rel[1,2] * robot.mechanics.r1.va[2] + robot.mechanics.r1.S_rel[1,3] * robot.mechanics.r1.va[3]);
//   robot.mechanics.r1.vb[2] = robot.mechanics.r1.S_rel[2,1] * robot.mechanics.r1.va[1] + (robot.mechanics.r1.S_rel[2,2] * robot.mechanics.r1.va[2] + robot.mechanics.r1.S_rel[2,3] * robot.mechanics.r1.va[3]);
//   robot.mechanics.r1.vb[3] = robot.mechanics.r1.S_rel[3,1] * robot.mechanics.r1.va[1] + (robot.mechanics.r1.S_rel[3,2] * robot.mechanics.r1.va[2] + robot.mechanics.r1.S_rel[3,3] * robot.mechanics.r1.va[3]);
//   robot.mechanics.r1.wb[1] = robot.mechanics.r1.S_rel[1,1] * (robot.mechanics.r1.wa[1] + robot.mechanics.r1.w_rela[1]) + (robot.mechanics.r1.S_rel[1,2] * (robot.mechanics.r1.wa[2] + robot.mechanics.r1.w_rela[2]) + robot.mechanics.r1.S_rel[1,3] * (robot.mechanics.r1.wa[3] + robot.mechanics.r1.w_rela[3]));
//   robot.mechanics.r1.wb[2] = robot.mechanics.r1.S_rel[2,1] * (robot.mechanics.r1.wa[1] + robot.mechanics.r1.w_rela[1]) + (robot.mechanics.r1.S_rel[2,2] * (robot.mechanics.r1.wa[2] + robot.mechanics.r1.w_rela[2]) + robot.mechanics.r1.S_rel[2,3] * (robot.mechanics.r1.wa[3] + robot.mechanics.r1.w_rela[3]));
//   robot.mechanics.r1.wb[3] = robot.mechanics.r1.S_rel[3,1] * (robot.mechanics.r1.wa[1] + robot.mechanics.r1.w_rela[1]) + (robot.mechanics.r1.S_rel[3,2] * (robot.mechanics.r1.wa[2] + robot.mechanics.r1.w_rela[2]) + robot.mechanics.r1.S_rel[3,3] * (robot.mechanics.r1.wa[3] + robot.mechanics.r1.w_rela[3]));
//   robot.mechanics.r1.ab[1] = robot.mechanics.r1.S_rel[1,1] * robot.mechanics.r1.aa[1] + (robot.mechanics.r1.S_rel[1,2] * robot.mechanics.r1.aa[2] + robot.mechanics.r1.S_rel[1,3] * robot.mechanics.r1.aa[3]);
//   robot.mechanics.r1.ab[2] = robot.mechanics.r1.S_rel[2,1] * robot.mechanics.r1.aa[1] + (robot.mechanics.r1.S_rel[2,2] * robot.mechanics.r1.aa[2] + robot.mechanics.r1.S_rel[2,3] * robot.mechanics.r1.aa[3]);
//   robot.mechanics.r1.ab[3] = robot.mechanics.r1.S_rel[3,1] * robot.mechanics.r1.aa[1] + (robot.mechanics.r1.S_rel[3,2] * robot.mechanics.r1.aa[2] + robot.mechanics.r1.S_rel[3,3] * robot.mechanics.r1.aa[3]);
//   robot.mechanics.r1.zb[1] = robot.mechanics.r1.S_rel[1,1] * (robot.mechanics.r1.za[1] + (robot.mechanics.r1.z_rela[1] + (robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[3] + (-robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[2])))) + (robot.mechanics.r1.S_rel[1,2] * (robot.mechanics.r1.za[2] + (robot.mechanics.r1.z_rela[2] + (robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[1] + (-robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[3])))) + robot.mechanics.r1.S_rel[1,3] * (robot.mechanics.r1.za[3] + (robot.mechanics.r1.z_rela[3] + (robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[2] + (-robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[1])))));
//   robot.mechanics.r1.zb[2] = robot.mechanics.r1.S_rel[2,1] * (robot.mechanics.r1.za[1] + (robot.mechanics.r1.z_rela[1] + (robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[3] + (-robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[2])))) + (robot.mechanics.r1.S_rel[2,2] * (robot.mechanics.r1.za[2] + (robot.mechanics.r1.z_rela[2] + (robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[1] + (-robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[3])))) + robot.mechanics.r1.S_rel[2,3] * (robot.mechanics.r1.za[3] + (robot.mechanics.r1.z_rela[3] + (robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[2] + (-robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[1])))));
//   robot.mechanics.r1.zb[3] = robot.mechanics.r1.S_rel[3,1] * (robot.mechanics.r1.za[1] + (robot.mechanics.r1.z_rela[1] + (robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[3] + (-robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[2])))) + (robot.mechanics.r1.S_rel[3,2] * (robot.mechanics.r1.za[2] + (robot.mechanics.r1.z_rela[2] + (robot.mechanics.r1.wa[3] * robot.mechanics.r1.w_rela[1] + (-robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[3])))) + robot.mechanics.r1.S_rel[3,3] * (robot.mechanics.r1.za[3] + (robot.mechanics.r1.z_rela[3] + (robot.mechanics.r1.wa[1] * robot.mechanics.r1.w_rela[2] + (-robot.mechanics.r1.wa[2] * robot.mechanics.r1.w_rela[1])))));
//   robot.mechanics.r1.fa[1] = robot.mechanics.r1.S_rel[1,1] * robot.mechanics.r1.fb[1] + (robot.mechanics.r1.S_rel[2,1] * robot.mechanics.r1.fb[2] + robot.mechanics.r1.S_rel[3,1] * robot.mechanics.r1.fb[3]);
//   robot.mechanics.r1.fa[2] = robot.mechanics.r1.S_rel[1,2] * robot.mechanics.r1.fb[1] + (robot.mechanics.r1.S_rel[2,2] * robot.mechanics.r1.fb[2] + robot.mechanics.r1.S_rel[3,2] * robot.mechanics.r1.fb[3]);
//   robot.mechanics.r1.fa[3] = robot.mechanics.r1.S_rel[1,3] * robot.mechanics.r1.fb[1] + (robot.mechanics.r1.S_rel[2,3] * robot.mechanics.r1.fb[2] + robot.mechanics.r1.S_rel[3,3] * robot.mechanics.r1.fb[3]);
//   robot.mechanics.r1.ta[1] = robot.mechanics.r1.S_rel[1,1] * robot.mechanics.r1.tb[1] + (robot.mechanics.r1.S_rel[2,1] * robot.mechanics.r1.tb[2] + robot.mechanics.r1.S_rel[3,1] * robot.mechanics.r1.tb[3]);
//   robot.mechanics.r1.ta[2] = robot.mechanics.r1.S_rel[1,2] * robot.mechanics.r1.tb[1] + (robot.mechanics.r1.S_rel[2,2] * robot.mechanics.r1.tb[2] + robot.mechanics.r1.S_rel[3,2] * robot.mechanics.r1.tb[3]);
//   robot.mechanics.r1.ta[3] = robot.mechanics.r1.S_rel[1,3] * robot.mechanics.r1.tb[1] + (robot.mechanics.r1.S_rel[2,3] * robot.mechanics.r1.tb[2] + robot.mechanics.r1.S_rel[3,3] * robot.mechanics.r1.tb[3]);
//   robot.mechanics.r1.axis.tau = robot.mechanics.r1.nn[1] * robot.mechanics.r1.tb[1] + (robot.mechanics.r1.nn[2] * robot.mechanics.r1.tb[2] + robot.mechanics.r1.nn[3] * robot.mechanics.r1.tb[3]);
//   robot.mechanics.r2.axis.phi = robot.mechanics.r2.q;
//   robot.mechanics.r2.bearing.phi = 0.0;
//   robot.mechanics.r2.qd = der(robot.mechanics.r2.q);
//   robot.mechanics.r2.qdd = der(robot.mechanics.r2.qd);
//   robot.mechanics.r2.nn[1] = robot.mechanics.r2.n[1] / sqrt(robot.mechanics.r2.n[1] ^ 2.0 + (robot.mechanics.r2.n[2] ^ 2.0 + robot.mechanics.r2.n[3] ^ 2.0));
//   robot.mechanics.r2.nn[2] = robot.mechanics.r2.n[2] / sqrt(robot.mechanics.r2.n[1] ^ 2.0 + (robot.mechanics.r2.n[2] ^ 2.0 + robot.mechanics.r2.n[3] ^ 2.0));
//   robot.mechanics.r2.nn[3] = robot.mechanics.r2.n[3] / sqrt(robot.mechanics.r2.n[1] ^ 2.0 + (robot.mechanics.r2.n[2] ^ 2.0 + robot.mechanics.r2.n[3] ^ 2.0));
//   robot.mechanics.r2.qq = robot.mechanics.r2.q - 0.0174532925199433 * robot.mechanics.r2.q0;
//   robot.mechanics.r2.sinq = sin(robot.mechanics.r2.qq);
//   robot.mechanics.r2.cosq = cos(robot.mechanics.r2.qq);
//   robot.mechanics.r2.S_rel[1,1] = robot.mechanics.r2.nn[1] ^ 2.0 + robot.mechanics.r2.cosq * (1.0 - robot.mechanics.r2.nn[1] ^ 2.0);
//   robot.mechanics.r2.S_rel[1,2] = robot.mechanics.r2.nn[1] * robot.mechanics.r2.nn[2] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[1]) * robot.mechanics.r2.nn[2]) - (-robot.mechanics.r2.sinq) * robot.mechanics.r2.nn[3];
//   robot.mechanics.r2.S_rel[1,3] = robot.mechanics.r2.nn[1] * robot.mechanics.r2.nn[3] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[1]) * robot.mechanics.r2.nn[3]) - robot.mechanics.r2.sinq * robot.mechanics.r2.nn[2];
//   robot.mechanics.r2.S_rel[2,1] = robot.mechanics.r2.nn[2] * robot.mechanics.r2.nn[1] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[2]) * robot.mechanics.r2.nn[1]) - robot.mechanics.r2.sinq * robot.mechanics.r2.nn[3];
//   robot.mechanics.r2.S_rel[2,2] = robot.mechanics.r2.nn[2] ^ 2.0 + robot.mechanics.r2.cosq * (1.0 - robot.mechanics.r2.nn[2] ^ 2.0);
//   robot.mechanics.r2.S_rel[2,3] = robot.mechanics.r2.nn[2] * robot.mechanics.r2.nn[3] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[2]) * robot.mechanics.r2.nn[3]) - (-robot.mechanics.r2.sinq) * robot.mechanics.r2.nn[1];
//   robot.mechanics.r2.S_rel[3,1] = robot.mechanics.r2.nn[3] * robot.mechanics.r2.nn[1] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[3]) * robot.mechanics.r2.nn[1]) - (-robot.mechanics.r2.sinq) * robot.mechanics.r2.nn[2];
//   robot.mechanics.r2.S_rel[3,2] = robot.mechanics.r2.nn[3] * robot.mechanics.r2.nn[2] + robot.mechanics.r2.cosq * ((-robot.mechanics.r2.nn[3]) * robot.mechanics.r2.nn[2]) - robot.mechanics.r2.sinq * robot.mechanics.r2.nn[1];
//   robot.mechanics.r2.S_rel[3,3] = robot.mechanics.r2.nn[3] ^ 2.0 + robot.mechanics.r2.cosq * (1.0 - robot.mechanics.r2.nn[3] ^ 2.0);
//   robot.mechanics.r2.r_rela[1] = 0.0;
//   robot.mechanics.r2.r_rela[2] = 0.0;
//   robot.mechanics.r2.r_rela[3] = 0.0;
//   robot.mechanics.r2.v_rela[1] = 0.0;
//   robot.mechanics.r2.v_rela[2] = 0.0;
//   robot.mechanics.r2.v_rela[3] = 0.0;
//   robot.mechanics.r2.a_rela[1] = 0.0;
//   robot.mechanics.r2.a_rela[2] = 0.0;
//   robot.mechanics.r2.a_rela[3] = 0.0;
//   robot.mechanics.r2.w_rela[1] = robot.mechanics.r2.qd * robot.mechanics.r2.nn[1];
//   robot.mechanics.r2.w_rela[2] = robot.mechanics.r2.qd * robot.mechanics.r2.nn[2];
//   robot.mechanics.r2.w_rela[3] = robot.mechanics.r2.qd * robot.mechanics.r2.nn[3];
//   robot.mechanics.r2.z_rela[1] = robot.mechanics.r2.qdd * robot.mechanics.r2.nn[1];
//   robot.mechanics.r2.z_rela[2] = robot.mechanics.r2.qdd * robot.mechanics.r2.nn[2];
//   robot.mechanics.r2.z_rela[3] = robot.mechanics.r2.qdd * robot.mechanics.r2.nn[3];
//   robot.mechanics.r2.Sb[1,1] = robot.mechanics.r2.Sa[1,1] * robot.mechanics.r2.S_rel[1,1] + (robot.mechanics.r2.Sa[1,2] * robot.mechanics.r2.S_rel[1,2] + robot.mechanics.r2.Sa[1,3] * robot.mechanics.r2.S_rel[1,3]);
//   robot.mechanics.r2.Sb[1,2] = robot.mechanics.r2.Sa[1,1] * robot.mechanics.r2.S_rel[2,1] + (robot.mechanics.r2.Sa[1,2] * robot.mechanics.r2.S_rel[2,2] + robot.mechanics.r2.Sa[1,3] * robot.mechanics.r2.S_rel[2,3]);
//   robot.mechanics.r2.Sb[1,3] = robot.mechanics.r2.Sa[1,1] * robot.mechanics.r2.S_rel[3,1] + (robot.mechanics.r2.Sa[1,2] * robot.mechanics.r2.S_rel[3,2] + robot.mechanics.r2.Sa[1,3] * robot.mechanics.r2.S_rel[3,3]);
//   robot.mechanics.r2.Sb[2,1] = robot.mechanics.r2.Sa[2,1] * robot.mechanics.r2.S_rel[1,1] + (robot.mechanics.r2.Sa[2,2] * robot.mechanics.r2.S_rel[1,2] + robot.mechanics.r2.Sa[2,3] * robot.mechanics.r2.S_rel[1,3]);
//   robot.mechanics.r2.Sb[2,2] = robot.mechanics.r2.Sa[2,1] * robot.mechanics.r2.S_rel[2,1] + (robot.mechanics.r2.Sa[2,2] * robot.mechanics.r2.S_rel[2,2] + robot.mechanics.r2.Sa[2,3] * robot.mechanics.r2.S_rel[2,3]);
//   robot.mechanics.r2.Sb[2,3] = robot.mechanics.r2.Sa[2,1] * robot.mechanics.r2.S_rel[3,1] + (robot.mechanics.r2.Sa[2,2] * robot.mechanics.r2.S_rel[3,2] + robot.mechanics.r2.Sa[2,3] * robot.mechanics.r2.S_rel[3,3]);
//   robot.mechanics.r2.Sb[3,1] = robot.mechanics.r2.Sa[3,1] * robot.mechanics.r2.S_rel[1,1] + (robot.mechanics.r2.Sa[3,2] * robot.mechanics.r2.S_rel[1,2] + robot.mechanics.r2.Sa[3,3] * robot.mechanics.r2.S_rel[1,3]);
//   robot.mechanics.r2.Sb[3,2] = robot.mechanics.r2.Sa[3,1] * robot.mechanics.r2.S_rel[2,1] + (robot.mechanics.r2.Sa[3,2] * robot.mechanics.r2.S_rel[2,2] + robot.mechanics.r2.Sa[3,3] * robot.mechanics.r2.S_rel[2,3]);
//   robot.mechanics.r2.Sb[3,3] = robot.mechanics.r2.Sa[3,1] * robot.mechanics.r2.S_rel[3,1] + (robot.mechanics.r2.Sa[3,2] * robot.mechanics.r2.S_rel[3,2] + robot.mechanics.r2.Sa[3,3] * robot.mechanics.r2.S_rel[3,3]);
//   robot.mechanics.r2.r0b[1] = robot.mechanics.r2.r0a[1];
//   robot.mechanics.r2.r0b[2] = robot.mechanics.r2.r0a[2];
//   robot.mechanics.r2.r0b[3] = robot.mechanics.r2.r0a[3];
//   robot.mechanics.r2.vb[1] = robot.mechanics.r2.S_rel[1,1] * robot.mechanics.r2.va[1] + (robot.mechanics.r2.S_rel[1,2] * robot.mechanics.r2.va[2] + robot.mechanics.r2.S_rel[1,3] * robot.mechanics.r2.va[3]);
//   robot.mechanics.r2.vb[2] = robot.mechanics.r2.S_rel[2,1] * robot.mechanics.r2.va[1] + (robot.mechanics.r2.S_rel[2,2] * robot.mechanics.r2.va[2] + robot.mechanics.r2.S_rel[2,3] * robot.mechanics.r2.va[3]);
//   robot.mechanics.r2.vb[3] = robot.mechanics.r2.S_rel[3,1] * robot.mechanics.r2.va[1] + (robot.mechanics.r2.S_rel[3,2] * robot.mechanics.r2.va[2] + robot.mechanics.r2.S_rel[3,3] * robot.mechanics.r2.va[3]);
//   robot.mechanics.r2.wb[1] = robot.mechanics.r2.S_rel[1,1] * (robot.mechanics.r2.wa[1] + robot.mechanics.r2.w_rela[1]) + (robot.mechanics.r2.S_rel[1,2] * (robot.mechanics.r2.wa[2] + robot.mechanics.r2.w_rela[2]) + robot.mechanics.r2.S_rel[1,3] * (robot.mechanics.r2.wa[3] + robot.mechanics.r2.w_rela[3]));
//   robot.mechanics.r2.wb[2] = robot.mechanics.r2.S_rel[2,1] * (robot.mechanics.r2.wa[1] + robot.mechanics.r2.w_rela[1]) + (robot.mechanics.r2.S_rel[2,2] * (robot.mechanics.r2.wa[2] + robot.mechanics.r2.w_rela[2]) + robot.mechanics.r2.S_rel[2,3] * (robot.mechanics.r2.wa[3] + robot.mechanics.r2.w_rela[3]));
//   robot.mechanics.r2.wb[3] = robot.mechanics.r2.S_rel[3,1] * (robot.mechanics.r2.wa[1] + robot.mechanics.r2.w_rela[1]) + (robot.mechanics.r2.S_rel[3,2] * (robot.mechanics.r2.wa[2] + robot.mechanics.r2.w_rela[2]) + robot.mechanics.r2.S_rel[3,3] * (robot.mechanics.r2.wa[3] + robot.mechanics.r2.w_rela[3]));
//   robot.mechanics.r2.ab[1] = robot.mechanics.r2.S_rel[1,1] * robot.mechanics.r2.aa[1] + (robot.mechanics.r2.S_rel[1,2] * robot.mechanics.r2.aa[2] + robot.mechanics.r2.S_rel[1,3] * robot.mechanics.r2.aa[3]);
//   robot.mechanics.r2.ab[2] = robot.mechanics.r2.S_rel[2,1] * robot.mechanics.r2.aa[1] + (robot.mechanics.r2.S_rel[2,2] * robot.mechanics.r2.aa[2] + robot.mechanics.r2.S_rel[2,3] * robot.mechanics.r2.aa[3]);
//   robot.mechanics.r2.ab[3] = robot.mechanics.r2.S_rel[3,1] * robot.mechanics.r2.aa[1] + (robot.mechanics.r2.S_rel[3,2] * robot.mechanics.r2.aa[2] + robot.mechanics.r2.S_rel[3,3] * robot.mechanics.r2.aa[3]);
//   robot.mechanics.r2.zb[1] = robot.mechanics.r2.S_rel[1,1] * (robot.mechanics.r2.za[1] + (robot.mechanics.r2.z_rela[1] + (robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[3] + (-robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[2])))) + (robot.mechanics.r2.S_rel[1,2] * (robot.mechanics.r2.za[2] + (robot.mechanics.r2.z_rela[2] + (robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[1] + (-robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[3])))) + robot.mechanics.r2.S_rel[1,3] * (robot.mechanics.r2.za[3] + (robot.mechanics.r2.z_rela[3] + (robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[2] + (-robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[1])))));
//   robot.mechanics.r2.zb[2] = robot.mechanics.r2.S_rel[2,1] * (robot.mechanics.r2.za[1] + (robot.mechanics.r2.z_rela[1] + (robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[3] + (-robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[2])))) + (robot.mechanics.r2.S_rel[2,2] * (robot.mechanics.r2.za[2] + (robot.mechanics.r2.z_rela[2] + (robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[1] + (-robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[3])))) + robot.mechanics.r2.S_rel[2,3] * (robot.mechanics.r2.za[3] + (robot.mechanics.r2.z_rela[3] + (robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[2] + (-robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[1])))));
//   robot.mechanics.r2.zb[3] = robot.mechanics.r2.S_rel[3,1] * (robot.mechanics.r2.za[1] + (robot.mechanics.r2.z_rela[1] + (robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[3] + (-robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[2])))) + (robot.mechanics.r2.S_rel[3,2] * (robot.mechanics.r2.za[2] + (robot.mechanics.r2.z_rela[2] + (robot.mechanics.r2.wa[3] * robot.mechanics.r2.w_rela[1] + (-robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[3])))) + robot.mechanics.r2.S_rel[3,3] * (robot.mechanics.r2.za[3] + (robot.mechanics.r2.z_rela[3] + (robot.mechanics.r2.wa[1] * robot.mechanics.r2.w_rela[2] + (-robot.mechanics.r2.wa[2] * robot.mechanics.r2.w_rela[1])))));
//   robot.mechanics.r2.fa[1] = robot.mechanics.r2.S_rel[1,1] * robot.mechanics.r2.fb[1] + (robot.mechanics.r2.S_rel[2,1] * robot.mechanics.r2.fb[2] + robot.mechanics.r2.S_rel[3,1] * robot.mechanics.r2.fb[3]);
//   robot.mechanics.r2.fa[2] = robot.mechanics.r2.S_rel[1,2] * robot.mechanics.r2.fb[1] + (robot.mechanics.r2.S_rel[2,2] * robot.mechanics.r2.fb[2] + robot.mechanics.r2.S_rel[3,2] * robot.mechanics.r2.fb[3]);
//   robot.mechanics.r2.fa[3] = robot.mechanics.r2.S_rel[1,3] * robot.mechanics.r2.fb[1] + (robot.mechanics.r2.S_rel[2,3] * robot.mechanics.r2.fb[2] + robot.mechanics.r2.S_rel[3,3] * robot.mechanics.r2.fb[3]);
//   robot.mechanics.r2.ta[1] = robot.mechanics.r2.S_rel[1,1] * robot.mechanics.r2.tb[1] + (robot.mechanics.r2.S_rel[2,1] * robot.mechanics.r2.tb[2] + robot.mechanics.r2.S_rel[3,1] * robot.mechanics.r2.tb[3]);
//   robot.mechanics.r2.ta[2] = robot.mechanics.r2.S_rel[1,2] * robot.mechanics.r2.tb[1] + (robot.mechanics.r2.S_rel[2,2] * robot.mechanics.r2.tb[2] + robot.mechanics.r2.S_rel[3,2] * robot.mechanics.r2.tb[3]);
//   robot.mechanics.r2.ta[3] = robot.mechanics.r2.S_rel[1,3] * robot.mechanics.r2.tb[1] + (robot.mechanics.r2.S_rel[2,3] * robot.mechanics.r2.tb[2] + robot.mechanics.r2.S_rel[3,3] * robot.mechanics.r2.tb[3]);
//   robot.mechanics.r2.axis.tau = robot.mechanics.r2.nn[1] * robot.mechanics.r2.tb[1] + (robot.mechanics.r2.nn[2] * robot.mechanics.r2.tb[2] + robot.mechanics.r2.nn[3] * robot.mechanics.r2.tb[3]);
//   robot.mechanics.r3.axis.phi = robot.mechanics.r3.q;
//   robot.mechanics.r3.bearing.phi = 0.0;
//   robot.mechanics.r3.qd = der(robot.mechanics.r3.q);
//   robot.mechanics.r3.qdd = der(robot.mechanics.r3.qd);
//   robot.mechanics.r3.nn[1] = robot.mechanics.r3.n[1] / sqrt(robot.mechanics.r3.n[1] ^ 2.0 + (robot.mechanics.r3.n[2] ^ 2.0 + robot.mechanics.r3.n[3] ^ 2.0));
//   robot.mechanics.r3.nn[2] = robot.mechanics.r3.n[2] / sqrt(robot.mechanics.r3.n[1] ^ 2.0 + (robot.mechanics.r3.n[2] ^ 2.0 + robot.mechanics.r3.n[3] ^ 2.0));
//   robot.mechanics.r3.nn[3] = robot.mechanics.r3.n[3] / sqrt(robot.mechanics.r3.n[1] ^ 2.0 + (robot.mechanics.r3.n[2] ^ 2.0 + robot.mechanics.r3.n[3] ^ 2.0));
//   robot.mechanics.r3.qq = robot.mechanics.r3.q - 0.0174532925199433 * robot.mechanics.r3.q0;
//   robot.mechanics.r3.sinq = sin(robot.mechanics.r3.qq);
//   robot.mechanics.r3.cosq = cos(robot.mechanics.r3.qq);
//   robot.mechanics.r3.S_rel[1,1] = robot.mechanics.r3.nn[1] ^ 2.0 + robot.mechanics.r3.cosq * (1.0 - robot.mechanics.r3.nn[1] ^ 2.0);
//   robot.mechanics.r3.S_rel[1,2] = robot.mechanics.r3.nn[1] * robot.mechanics.r3.nn[2] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[1]) * robot.mechanics.r3.nn[2]) - (-robot.mechanics.r3.sinq) * robot.mechanics.r3.nn[3];
//   robot.mechanics.r3.S_rel[1,3] = robot.mechanics.r3.nn[1] * robot.mechanics.r3.nn[3] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[1]) * robot.mechanics.r3.nn[3]) - robot.mechanics.r3.sinq * robot.mechanics.r3.nn[2];
//   robot.mechanics.r3.S_rel[2,1] = robot.mechanics.r3.nn[2] * robot.mechanics.r3.nn[1] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[2]) * robot.mechanics.r3.nn[1]) - robot.mechanics.r3.sinq * robot.mechanics.r3.nn[3];
//   robot.mechanics.r3.S_rel[2,2] = robot.mechanics.r3.nn[2] ^ 2.0 + robot.mechanics.r3.cosq * (1.0 - robot.mechanics.r3.nn[2] ^ 2.0);
//   robot.mechanics.r3.S_rel[2,3] = robot.mechanics.r3.nn[2] * robot.mechanics.r3.nn[3] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[2]) * robot.mechanics.r3.nn[3]) - (-robot.mechanics.r3.sinq) * robot.mechanics.r3.nn[1];
//   robot.mechanics.r3.S_rel[3,1] = robot.mechanics.r3.nn[3] * robot.mechanics.r3.nn[1] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[3]) * robot.mechanics.r3.nn[1]) - (-robot.mechanics.r3.sinq) * robot.mechanics.r3.nn[2];
//   robot.mechanics.r3.S_rel[3,2] = robot.mechanics.r3.nn[3] * robot.mechanics.r3.nn[2] + robot.mechanics.r3.cosq * ((-robot.mechanics.r3.nn[3]) * robot.mechanics.r3.nn[2]) - robot.mechanics.r3.sinq * robot.mechanics.r3.nn[1];
//   robot.mechanics.r3.S_rel[3,3] = robot.mechanics.r3.nn[3] ^ 2.0 + robot.mechanics.r3.cosq * (1.0 - robot.mechanics.r3.nn[3] ^ 2.0);
//   robot.mechanics.r3.r_rela[1] = 0.0;
//   robot.mechanics.r3.r_rela[2] = 0.0;
//   robot.mechanics.r3.r_rela[3] = 0.0;
//   robot.mechanics.r3.v_rela[1] = 0.0;
//   robot.mechanics.r3.v_rela[2] = 0.0;
//   robot.mechanics.r3.v_rela[3] = 0.0;
//   robot.mechanics.r3.a_rela[1] = 0.0;
//   robot.mechanics.r3.a_rela[2] = 0.0;
//   robot.mechanics.r3.a_rela[3] = 0.0;
//   robot.mechanics.r3.w_rela[1] = robot.mechanics.r3.qd * robot.mechanics.r3.nn[1];
//   robot.mechanics.r3.w_rela[2] = robot.mechanics.r3.qd * robot.mechanics.r3.nn[2];
//   robot.mechanics.r3.w_rela[3] = robot.mechanics.r3.qd * robot.mechanics.r3.nn[3];
//   robot.mechanics.r3.z_rela[1] = robot.mechanics.r3.qdd * robot.mechanics.r3.nn[1];
//   robot.mechanics.r3.z_rela[2] = robot.mechanics.r3.qdd * robot.mechanics.r3.nn[2];
//   robot.mechanics.r3.z_rela[3] = robot.mechanics.r3.qdd * robot.mechanics.r3.nn[3];
//   robot.mechanics.r3.Sb[1,1] = robot.mechanics.r3.Sa[1,1] * robot.mechanics.r3.S_rel[1,1] + (robot.mechanics.r3.Sa[1,2] * robot.mechanics.r3.S_rel[1,2] + robot.mechanics.r3.Sa[1,3] * robot.mechanics.r3.S_rel[1,3]);
//   robot.mechanics.r3.Sb[1,2] = robot.mechanics.r3.Sa[1,1] * robot.mechanics.r3.S_rel[2,1] + (robot.mechanics.r3.Sa[1,2] * robot.mechanics.r3.S_rel[2,2] + robot.mechanics.r3.Sa[1,3] * robot.mechanics.r3.S_rel[2,3]);
//   robot.mechanics.r3.Sb[1,3] = robot.mechanics.r3.Sa[1,1] * robot.mechanics.r3.S_rel[3,1] + (robot.mechanics.r3.Sa[1,2] * robot.mechanics.r3.S_rel[3,2] + robot.mechanics.r3.Sa[1,3] * robot.mechanics.r3.S_rel[3,3]);
//   robot.mechanics.r3.Sb[2,1] = robot.mechanics.r3.Sa[2,1] * robot.mechanics.r3.S_rel[1,1] + (robot.mechanics.r3.Sa[2,2] * robot.mechanics.r3.S_rel[1,2] + robot.mechanics.r3.Sa[2,3] * robot.mechanics.r3.S_rel[1,3]);
//   robot.mechanics.r3.Sb[2,2] = robot.mechanics.r3.Sa[2,1] * robot.mechanics.r3.S_rel[2,1] + (robot.mechanics.r3.Sa[2,2] * robot.mechanics.r3.S_rel[2,2] + robot.mechanics.r3.Sa[2,3] * robot.mechanics.r3.S_rel[2,3]);
//   robot.mechanics.r3.Sb[2,3] = robot.mechanics.r3.Sa[2,1] * robot.mechanics.r3.S_rel[3,1] + (robot.mechanics.r3.Sa[2,2] * robot.mechanics.r3.S_rel[3,2] + robot.mechanics.r3.Sa[2,3] * robot.mechanics.r3.S_rel[3,3]);
//   robot.mechanics.r3.Sb[3,1] = robot.mechanics.r3.Sa[3,1] * robot.mechanics.r3.S_rel[1,1] + (robot.mechanics.r3.Sa[3,2] * robot.mechanics.r3.S_rel[1,2] + robot.mechanics.r3.Sa[3,3] * robot.mechanics.r3.S_rel[1,3]);
//   robot.mechanics.r3.Sb[3,2] = robot.mechanics.r3.Sa[3,1] * robot.mechanics.r3.S_rel[2,1] + (robot.mechanics.r3.Sa[3,2] * robot.mechanics.r3.S_rel[2,2] + robot.mechanics.r3.Sa[3,3] * robot.mechanics.r3.S_rel[2,3]);
//   robot.mechanics.r3.Sb[3,3] = robot.mechanics.r3.Sa[3,1] * robot.mechanics.r3.S_rel[3,1] + (robot.mechanics.r3.Sa[3,2] * robot.mechanics.r3.S_rel[3,2] + robot.mechanics.r3.Sa[3,3] * robot.mechanics.r3.S_rel[3,3]);
//   robot.mechanics.r3.r0b[1] = robot.mechanics.r3.r0a[1];
//   robot.mechanics.r3.r0b[2] = robot.mechanics.r3.r0a[2];
//   robot.mechanics.r3.r0b[3] = robot.mechanics.r3.r0a[3];
//   robot.mechanics.r3.vb[1] = robot.mechanics.r3.S_rel[1,1] * robot.mechanics.r3.va[1] + (robot.mechanics.r3.S_rel[1,2] * robot.mechanics.r3.va[2] + robot.mechanics.r3.S_rel[1,3] * robot.mechanics.r3.va[3]);
//   robot.mechanics.r3.vb[2] = robot.mechanics.r3.S_rel[2,1] * robot.mechanics.r3.va[1] + (robot.mechanics.r3.S_rel[2,2] * robot.mechanics.r3.va[2] + robot.mechanics.r3.S_rel[2,3] * robot.mechanics.r3.va[3]);
//   robot.mechanics.r3.vb[3] = robot.mechanics.r3.S_rel[3,1] * robot.mechanics.r3.va[1] + (robot.mechanics.r3.S_rel[3,2] * robot.mechanics.r3.va[2] + robot.mechanics.r3.S_rel[3,3] * robot.mechanics.r3.va[3]);
//   robot.mechanics.r3.wb[1] = robot.mechanics.r3.S_rel[1,1] * (robot.mechanics.r3.wa[1] + robot.mechanics.r3.w_rela[1]) + (robot.mechanics.r3.S_rel[1,2] * (robot.mechanics.r3.wa[2] + robot.mechanics.r3.w_rela[2]) + robot.mechanics.r3.S_rel[1,3] * (robot.mechanics.r3.wa[3] + robot.mechanics.r3.w_rela[3]));
//   robot.mechanics.r3.wb[2] = robot.mechanics.r3.S_rel[2,1] * (robot.mechanics.r3.wa[1] + robot.mechanics.r3.w_rela[1]) + (robot.mechanics.r3.S_rel[2,2] * (robot.mechanics.r3.wa[2] + robot.mechanics.r3.w_rela[2]) + robot.mechanics.r3.S_rel[2,3] * (robot.mechanics.r3.wa[3] + robot.mechanics.r3.w_rela[3]));
//   robot.mechanics.r3.wb[3] = robot.mechanics.r3.S_rel[3,1] * (robot.mechanics.r3.wa[1] + robot.mechanics.r3.w_rela[1]) + (robot.mechanics.r3.S_rel[3,2] * (robot.mechanics.r3.wa[2] + robot.mechanics.r3.w_rela[2]) + robot.mechanics.r3.S_rel[3,3] * (robot.mechanics.r3.wa[3] + robot.mechanics.r3.w_rela[3]));
//   robot.mechanics.r3.ab[1] = robot.mechanics.r3.S_rel[1,1] * robot.mechanics.r3.aa[1] + (robot.mechanics.r3.S_rel[1,2] * robot.mechanics.r3.aa[2] + robot.mechanics.r3.S_rel[1,3] * robot.mechanics.r3.aa[3]);
//   robot.mechanics.r3.ab[2] = robot.mechanics.r3.S_rel[2,1] * robot.mechanics.r3.aa[1] + (robot.mechanics.r3.S_rel[2,2] * robot.mechanics.r3.aa[2] + robot.mechanics.r3.S_rel[2,3] * robot.mechanics.r3.aa[3]);
//   robot.mechanics.r3.ab[3] = robot.mechanics.r3.S_rel[3,1] * robot.mechanics.r3.aa[1] + (robot.mechanics.r3.S_rel[3,2] * robot.mechanics.r3.aa[2] + robot.mechanics.r3.S_rel[3,3] * robot.mechanics.r3.aa[3]);
//   robot.mechanics.r3.zb[1] = robot.mechanics.r3.S_rel[1,1] * (robot.mechanics.r3.za[1] + (robot.mechanics.r3.z_rela[1] + (robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[3] + (-robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[2])))) + (robot.mechanics.r3.S_rel[1,2] * (robot.mechanics.r3.za[2] + (robot.mechanics.r3.z_rela[2] + (robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[1] + (-robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[3])))) + robot.mechanics.r3.S_rel[1,3] * (robot.mechanics.r3.za[3] + (robot.mechanics.r3.z_rela[3] + (robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[2] + (-robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[1])))));
//   robot.mechanics.r3.zb[2] = robot.mechanics.r3.S_rel[2,1] * (robot.mechanics.r3.za[1] + (robot.mechanics.r3.z_rela[1] + (robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[3] + (-robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[2])))) + (robot.mechanics.r3.S_rel[2,2] * (robot.mechanics.r3.za[2] + (robot.mechanics.r3.z_rela[2] + (robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[1] + (-robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[3])))) + robot.mechanics.r3.S_rel[2,3] * (robot.mechanics.r3.za[3] + (robot.mechanics.r3.z_rela[3] + (robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[2] + (-robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[1])))));
//   robot.mechanics.r3.zb[3] = robot.mechanics.r3.S_rel[3,1] * (robot.mechanics.r3.za[1] + (robot.mechanics.r3.z_rela[1] + (robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[3] + (-robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[2])))) + (robot.mechanics.r3.S_rel[3,2] * (robot.mechanics.r3.za[2] + (robot.mechanics.r3.z_rela[2] + (robot.mechanics.r3.wa[3] * robot.mechanics.r3.w_rela[1] + (-robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[3])))) + robot.mechanics.r3.S_rel[3,3] * (robot.mechanics.r3.za[3] + (robot.mechanics.r3.z_rela[3] + (robot.mechanics.r3.wa[1] * robot.mechanics.r3.w_rela[2] + (-robot.mechanics.r3.wa[2] * robot.mechanics.r3.w_rela[1])))));
//   robot.mechanics.r3.fa[1] = robot.mechanics.r3.S_rel[1,1] * robot.mechanics.r3.fb[1] + (robot.mechanics.r3.S_rel[2,1] * robot.mechanics.r3.fb[2] + robot.mechanics.r3.S_rel[3,1] * robot.mechanics.r3.fb[3]);
//   robot.mechanics.r3.fa[2] = robot.mechanics.r3.S_rel[1,2] * robot.mechanics.r3.fb[1] + (robot.mechanics.r3.S_rel[2,2] * robot.mechanics.r3.fb[2] + robot.mechanics.r3.S_rel[3,2] * robot.mechanics.r3.fb[3]);
//   robot.mechanics.r3.fa[3] = robot.mechanics.r3.S_rel[1,3] * robot.mechanics.r3.fb[1] + (robot.mechanics.r3.S_rel[2,3] * robot.mechanics.r3.fb[2] + robot.mechanics.r3.S_rel[3,3] * robot.mechanics.r3.fb[3]);
//   robot.mechanics.r3.ta[1] = robot.mechanics.r3.S_rel[1,1] * robot.mechanics.r3.tb[1] + (robot.mechanics.r3.S_rel[2,1] * robot.mechanics.r3.tb[2] + robot.mechanics.r3.S_rel[3,1] * robot.mechanics.r3.tb[3]);
//   robot.mechanics.r3.ta[2] = robot.mechanics.r3.S_rel[1,2] * robot.mechanics.r3.tb[1] + (robot.mechanics.r3.S_rel[2,2] * robot.mechanics.r3.tb[2] + robot.mechanics.r3.S_rel[3,2] * robot.mechanics.r3.tb[3]);
//   robot.mechanics.r3.ta[3] = robot.mechanics.r3.S_rel[1,3] * robot.mechanics.r3.tb[1] + (robot.mechanics.r3.S_rel[2,3] * robot.mechanics.r3.tb[2] + robot.mechanics.r3.S_rel[3,3] * robot.mechanics.r3.tb[3]);
//   robot.mechanics.r3.axis.tau = robot.mechanics.r3.nn[1] * robot.mechanics.r3.tb[1] + (robot.mechanics.r3.nn[2] * robot.mechanics.r3.tb[2] + robot.mechanics.r3.nn[3] * robot.mechanics.r3.tb[3]);
//   robot.mechanics.r4.axis.phi = robot.mechanics.r4.q;
//   robot.mechanics.r4.bearing.phi = 0.0;
//   robot.mechanics.r4.qd = der(robot.mechanics.r4.q);
//   robot.mechanics.r4.qdd = der(robot.mechanics.r4.qd);
//   robot.mechanics.r4.nn[1] = robot.mechanics.r4.n[1] / sqrt(robot.mechanics.r4.n[1] ^ 2.0 + (robot.mechanics.r4.n[2] ^ 2.0 + robot.mechanics.r4.n[3] ^ 2.0));
//   robot.mechanics.r4.nn[2] = robot.mechanics.r4.n[2] / sqrt(robot.mechanics.r4.n[1] ^ 2.0 + (robot.mechanics.r4.n[2] ^ 2.0 + robot.mechanics.r4.n[3] ^ 2.0));
//   robot.mechanics.r4.nn[3] = robot.mechanics.r4.n[3] / sqrt(robot.mechanics.r4.n[1] ^ 2.0 + (robot.mechanics.r4.n[2] ^ 2.0 + robot.mechanics.r4.n[3] ^ 2.0));
//   robot.mechanics.r4.qq = robot.mechanics.r4.q - 0.0174532925199433 * robot.mechanics.r4.q0;
//   robot.mechanics.r4.sinq = sin(robot.mechanics.r4.qq);
//   robot.mechanics.r4.cosq = cos(robot.mechanics.r4.qq);
//   robot.mechanics.r4.S_rel[1,1] = robot.mechanics.r4.nn[1] ^ 2.0 + robot.mechanics.r4.cosq * (1.0 - robot.mechanics.r4.nn[1] ^ 2.0);
//   robot.mechanics.r4.S_rel[1,2] = robot.mechanics.r4.nn[1] * robot.mechanics.r4.nn[2] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[1]) * robot.mechanics.r4.nn[2]) - (-robot.mechanics.r4.sinq) * robot.mechanics.r4.nn[3];
//   robot.mechanics.r4.S_rel[1,3] = robot.mechanics.r4.nn[1] * robot.mechanics.r4.nn[3] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[1]) * robot.mechanics.r4.nn[3]) - robot.mechanics.r4.sinq * robot.mechanics.r4.nn[2];
//   robot.mechanics.r4.S_rel[2,1] = robot.mechanics.r4.nn[2] * robot.mechanics.r4.nn[1] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[2]) * robot.mechanics.r4.nn[1]) - robot.mechanics.r4.sinq * robot.mechanics.r4.nn[3];
//   robot.mechanics.r4.S_rel[2,2] = robot.mechanics.r4.nn[2] ^ 2.0 + robot.mechanics.r4.cosq * (1.0 - robot.mechanics.r4.nn[2] ^ 2.0);
//   robot.mechanics.r4.S_rel[2,3] = robot.mechanics.r4.nn[2] * robot.mechanics.r4.nn[3] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[2]) * robot.mechanics.r4.nn[3]) - (-robot.mechanics.r4.sinq) * robot.mechanics.r4.nn[1];
//   robot.mechanics.r4.S_rel[3,1] = robot.mechanics.r4.nn[3] * robot.mechanics.r4.nn[1] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[3]) * robot.mechanics.r4.nn[1]) - (-robot.mechanics.r4.sinq) * robot.mechanics.r4.nn[2];
//   robot.mechanics.r4.S_rel[3,2] = robot.mechanics.r4.nn[3] * robot.mechanics.r4.nn[2] + robot.mechanics.r4.cosq * ((-robot.mechanics.r4.nn[3]) * robot.mechanics.r4.nn[2]) - robot.mechanics.r4.sinq * robot.mechanics.r4.nn[1];
//   robot.mechanics.r4.S_rel[3,3] = robot.mechanics.r4.nn[3] ^ 2.0 + robot.mechanics.r4.cosq * (1.0 - robot.mechanics.r4.nn[3] ^ 2.0);
//   robot.mechanics.r4.r_rela[1] = 0.0;
//   robot.mechanics.r4.r_rela[2] = 0.0;
//   robot.mechanics.r4.r_rela[3] = 0.0;
//   robot.mechanics.r4.v_rela[1] = 0.0;
//   robot.mechanics.r4.v_rela[2] = 0.0;
//   robot.mechanics.r4.v_rela[3] = 0.0;
//   robot.mechanics.r4.a_rela[1] = 0.0;
//   robot.mechanics.r4.a_rela[2] = 0.0;
//   robot.mechanics.r4.a_rela[3] = 0.0;
//   robot.mechanics.r4.w_rela[1] = robot.mechanics.r4.qd * robot.mechanics.r4.nn[1];
//   robot.mechanics.r4.w_rela[2] = robot.mechanics.r4.qd * robot.mechanics.r4.nn[2];
//   robot.mechanics.r4.w_rela[3] = robot.mechanics.r4.qd * robot.mechanics.r4.nn[3];
//   robot.mechanics.r4.z_rela[1] = robot.mechanics.r4.qdd * robot.mechanics.r4.nn[1];
//   robot.mechanics.r4.z_rela[2] = robot.mechanics.r4.qdd * robot.mechanics.r4.nn[2];
//   robot.mechanics.r4.z_rela[3] = robot.mechanics.r4.qdd * robot.mechanics.r4.nn[3];
//   robot.mechanics.r4.Sb[1,1] = robot.mechanics.r4.Sa[1,1] * robot.mechanics.r4.S_rel[1,1] + (robot.mechanics.r4.Sa[1,2] * robot.mechanics.r4.S_rel[1,2] + robot.mechanics.r4.Sa[1,3] * robot.mechanics.r4.S_rel[1,3]);
//   robot.mechanics.r4.Sb[1,2] = robot.mechanics.r4.Sa[1,1] * robot.mechanics.r4.S_rel[2,1] + (robot.mechanics.r4.Sa[1,2] * robot.mechanics.r4.S_rel[2,2] + robot.mechanics.r4.Sa[1,3] * robot.mechanics.r4.S_rel[2,3]);
//   robot.mechanics.r4.Sb[1,3] = robot.mechanics.r4.Sa[1,1] * robot.mechanics.r4.S_rel[3,1] + (robot.mechanics.r4.Sa[1,2] * robot.mechanics.r4.S_rel[3,2] + robot.mechanics.r4.Sa[1,3] * robot.mechanics.r4.S_rel[3,3]);
//   robot.mechanics.r4.Sb[2,1] = robot.mechanics.r4.Sa[2,1] * robot.mechanics.r4.S_rel[1,1] + (robot.mechanics.r4.Sa[2,2] * robot.mechanics.r4.S_rel[1,2] + robot.mechanics.r4.Sa[2,3] * robot.mechanics.r4.S_rel[1,3]);
//   robot.mechanics.r4.Sb[2,2] = robot.mechanics.r4.Sa[2,1] * robot.mechanics.r4.S_rel[2,1] + (robot.mechanics.r4.Sa[2,2] * robot.mechanics.r4.S_rel[2,2] + robot.mechanics.r4.Sa[2,3] * robot.mechanics.r4.S_rel[2,3]);
//   robot.mechanics.r4.Sb[2,3] = robot.mechanics.r4.Sa[2,1] * robot.mechanics.r4.S_rel[3,1] + (robot.mechanics.r4.Sa[2,2] * robot.mechanics.r4.S_rel[3,2] + robot.mechanics.r4.Sa[2,3] * robot.mechanics.r4.S_rel[3,3]);
//   robot.mechanics.r4.Sb[3,1] = robot.mechanics.r4.Sa[3,1] * robot.mechanics.r4.S_rel[1,1] + (robot.mechanics.r4.Sa[3,2] * robot.mechanics.r4.S_rel[1,2] + robot.mechanics.r4.Sa[3,3] * robot.mechanics.r4.S_rel[1,3]);
//   robot.mechanics.r4.Sb[3,2] = robot.mechanics.r4.Sa[3,1] * robot.mechanics.r4.S_rel[2,1] + (robot.mechanics.r4.Sa[3,2] * robot.mechanics.r4.S_rel[2,2] + robot.mechanics.r4.Sa[3,3] * robot.mechanics.r4.S_rel[2,3]);
//   robot.mechanics.r4.Sb[3,3] = robot.mechanics.r4.Sa[3,1] * robot.mechanics.r4.S_rel[3,1] + (robot.mechanics.r4.Sa[3,2] * robot.mechanics.r4.S_rel[3,2] + robot.mechanics.r4.Sa[3,3] * robot.mechanics.r4.S_rel[3,3]);
//   robot.mechanics.r4.r0b[1] = robot.mechanics.r4.r0a[1];
//   robot.mechanics.r4.r0b[2] = robot.mechanics.r4.r0a[2];
//   robot.mechanics.r4.r0b[3] = robot.mechanics.r4.r0a[3];
//   robot.mechanics.r4.vb[1] = robot.mechanics.r4.S_rel[1,1] * robot.mechanics.r4.va[1] + (robot.mechanics.r4.S_rel[1,2] * robot.mechanics.r4.va[2] + robot.mechanics.r4.S_rel[1,3] * robot.mechanics.r4.va[3]);
//   robot.mechanics.r4.vb[2] = robot.mechanics.r4.S_rel[2,1] * robot.mechanics.r4.va[1] + (robot.mechanics.r4.S_rel[2,2] * robot.mechanics.r4.va[2] + robot.mechanics.r4.S_rel[2,3] * robot.mechanics.r4.va[3]);
//   robot.mechanics.r4.vb[3] = robot.mechanics.r4.S_rel[3,1] * robot.mechanics.r4.va[1] + (robot.mechanics.r4.S_rel[3,2] * robot.mechanics.r4.va[2] + robot.mechanics.r4.S_rel[3,3] * robot.mechanics.r4.va[3]);
//   robot.mechanics.r4.wb[1] = robot.mechanics.r4.S_rel[1,1] * (robot.mechanics.r4.wa[1] + robot.mechanics.r4.w_rela[1]) + (robot.mechanics.r4.S_rel[1,2] * (robot.mechanics.r4.wa[2] + robot.mechanics.r4.w_rela[2]) + robot.mechanics.r4.S_rel[1,3] * (robot.mechanics.r4.wa[3] + robot.mechanics.r4.w_rela[3]));
//   robot.mechanics.r4.wb[2] = robot.mechanics.r4.S_rel[2,1] * (robot.mechanics.r4.wa[1] + robot.mechanics.r4.w_rela[1]) + (robot.mechanics.r4.S_rel[2,2] * (robot.mechanics.r4.wa[2] + robot.mechanics.r4.w_rela[2]) + robot.mechanics.r4.S_rel[2,3] * (robot.mechanics.r4.wa[3] + robot.mechanics.r4.w_rela[3]));
//   robot.mechanics.r4.wb[3] = robot.mechanics.r4.S_rel[3,1] * (robot.mechanics.r4.wa[1] + robot.mechanics.r4.w_rela[1]) + (robot.mechanics.r4.S_rel[3,2] * (robot.mechanics.r4.wa[2] + robot.mechanics.r4.w_rela[2]) + robot.mechanics.r4.S_rel[3,3] * (robot.mechanics.r4.wa[3] + robot.mechanics.r4.w_rela[3]));
//   robot.mechanics.r4.ab[1] = robot.mechanics.r4.S_rel[1,1] * robot.mechanics.r4.aa[1] + (robot.mechanics.r4.S_rel[1,2] * robot.mechanics.r4.aa[2] + robot.mechanics.r4.S_rel[1,3] * robot.mechanics.r4.aa[3]);
//   robot.mechanics.r4.ab[2] = robot.mechanics.r4.S_rel[2,1] * robot.mechanics.r4.aa[1] + (robot.mechanics.r4.S_rel[2,2] * robot.mechanics.r4.aa[2] + robot.mechanics.r4.S_rel[2,3] * robot.mechanics.r4.aa[3]);
//   robot.mechanics.r4.ab[3] = robot.mechanics.r4.S_rel[3,1] * robot.mechanics.r4.aa[1] + (robot.mechanics.r4.S_rel[3,2] * robot.mechanics.r4.aa[2] + robot.mechanics.r4.S_rel[3,3] * robot.mechanics.r4.aa[3]);
//   robot.mechanics.r4.zb[1] = robot.mechanics.r4.S_rel[1,1] * (robot.mechanics.r4.za[1] + (robot.mechanics.r4.z_rela[1] + (robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[3] + (-robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[2])))) + (robot.mechanics.r4.S_rel[1,2] * (robot.mechanics.r4.za[2] + (robot.mechanics.r4.z_rela[2] + (robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[1] + (-robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[3])))) + robot.mechanics.r4.S_rel[1,3] * (robot.mechanics.r4.za[3] + (robot.mechanics.r4.z_rela[3] + (robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[2] + (-robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[1])))));
//   robot.mechanics.r4.zb[2] = robot.mechanics.r4.S_rel[2,1] * (robot.mechanics.r4.za[1] + (robot.mechanics.r4.z_rela[1] + (robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[3] + (-robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[2])))) + (robot.mechanics.r4.S_rel[2,2] * (robot.mechanics.r4.za[2] + (robot.mechanics.r4.z_rela[2] + (robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[1] + (-robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[3])))) + robot.mechanics.r4.S_rel[2,3] * (robot.mechanics.r4.za[3] + (robot.mechanics.r4.z_rela[3] + (robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[2] + (-robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[1])))));
//   robot.mechanics.r4.zb[3] = robot.mechanics.r4.S_rel[3,1] * (robot.mechanics.r4.za[1] + (robot.mechanics.r4.z_rela[1] + (robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[3] + (-robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[2])))) + (robot.mechanics.r4.S_rel[3,2] * (robot.mechanics.r4.za[2] + (robot.mechanics.r4.z_rela[2] + (robot.mechanics.r4.wa[3] * robot.mechanics.r4.w_rela[1] + (-robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[3])))) + robot.mechanics.r4.S_rel[3,3] * (robot.mechanics.r4.za[3] + (robot.mechanics.r4.z_rela[3] + (robot.mechanics.r4.wa[1] * robot.mechanics.r4.w_rela[2] + (-robot.mechanics.r4.wa[2] * robot.mechanics.r4.w_rela[1])))));
//   robot.mechanics.r4.fa[1] = robot.mechanics.r4.S_rel[1,1] * robot.mechanics.r4.fb[1] + (robot.mechanics.r4.S_rel[2,1] * robot.mechanics.r4.fb[2] + robot.mechanics.r4.S_rel[3,1] * robot.mechanics.r4.fb[3]);
//   robot.mechanics.r4.fa[2] = robot.mechanics.r4.S_rel[1,2] * robot.mechanics.r4.fb[1] + (robot.mechanics.r4.S_rel[2,2] * robot.mechanics.r4.fb[2] + robot.mechanics.r4.S_rel[3,2] * robot.mechanics.r4.fb[3]);
//   robot.mechanics.r4.fa[3] = robot.mechanics.r4.S_rel[1,3] * robot.mechanics.r4.fb[1] + (robot.mechanics.r4.S_rel[2,3] * robot.mechanics.r4.fb[2] + robot.mechanics.r4.S_rel[3,3] * robot.mechanics.r4.fb[3]);
//   robot.mechanics.r4.ta[1] = robot.mechanics.r4.S_rel[1,1] * robot.mechanics.r4.tb[1] + (robot.mechanics.r4.S_rel[2,1] * robot.mechanics.r4.tb[2] + robot.mechanics.r4.S_rel[3,1] * robot.mechanics.r4.tb[3]);
//   robot.mechanics.r4.ta[2] = robot.mechanics.r4.S_rel[1,2] * robot.mechanics.r4.tb[1] + (robot.mechanics.r4.S_rel[2,2] * robot.mechanics.r4.tb[2] + robot.mechanics.r4.S_rel[3,2] * robot.mechanics.r4.tb[3]);
//   robot.mechanics.r4.ta[3] = robot.mechanics.r4.S_rel[1,3] * robot.mechanics.r4.tb[1] + (robot.mechanics.r4.S_rel[2,3] * robot.mechanics.r4.tb[2] + robot.mechanics.r4.S_rel[3,3] * robot.mechanics.r4.tb[3]);
//   robot.mechanics.r4.axis.tau = robot.mechanics.r4.nn[1] * robot.mechanics.r4.tb[1] + (robot.mechanics.r4.nn[2] * robot.mechanics.r4.tb[2] + robot.mechanics.r4.nn[3] * robot.mechanics.r4.tb[3]);
//   robot.mechanics.r5.axis.phi = robot.mechanics.r5.q;
//   robot.mechanics.r5.bearing.phi = 0.0;
//   robot.mechanics.r5.qd = der(robot.mechanics.r5.q);
//   robot.mechanics.r5.qdd = der(robot.mechanics.r5.qd);
//   robot.mechanics.r5.nn[1] = robot.mechanics.r5.n[1] / sqrt(robot.mechanics.r5.n[1] ^ 2.0 + (robot.mechanics.r5.n[2] ^ 2.0 + robot.mechanics.r5.n[3] ^ 2.0));
//   robot.mechanics.r5.nn[2] = robot.mechanics.r5.n[2] / sqrt(robot.mechanics.r5.n[1] ^ 2.0 + (robot.mechanics.r5.n[2] ^ 2.0 + robot.mechanics.r5.n[3] ^ 2.0));
//   robot.mechanics.r5.nn[3] = robot.mechanics.r5.n[3] / sqrt(robot.mechanics.r5.n[1] ^ 2.0 + (robot.mechanics.r5.n[2] ^ 2.0 + robot.mechanics.r5.n[3] ^ 2.0));
//   robot.mechanics.r5.qq = robot.mechanics.r5.q - 0.0174532925199433 * robot.mechanics.r5.q0;
//   robot.mechanics.r5.sinq = sin(robot.mechanics.r5.qq);
//   robot.mechanics.r5.cosq = cos(robot.mechanics.r5.qq);
//   robot.mechanics.r5.S_rel[1,1] = robot.mechanics.r5.nn[1] ^ 2.0 + robot.mechanics.r5.cosq * (1.0 - robot.mechanics.r5.nn[1] ^ 2.0);
//   robot.mechanics.r5.S_rel[1,2] = robot.mechanics.r5.nn[1] * robot.mechanics.r5.nn[2] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[1]) * robot.mechanics.r5.nn[2]) - (-robot.mechanics.r5.sinq) * robot.mechanics.r5.nn[3];
//   robot.mechanics.r5.S_rel[1,3] = robot.mechanics.r5.nn[1] * robot.mechanics.r5.nn[3] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[1]) * robot.mechanics.r5.nn[3]) - robot.mechanics.r5.sinq * robot.mechanics.r5.nn[2];
//   robot.mechanics.r5.S_rel[2,1] = robot.mechanics.r5.nn[2] * robot.mechanics.r5.nn[1] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[2]) * robot.mechanics.r5.nn[1]) - robot.mechanics.r5.sinq * robot.mechanics.r5.nn[3];
//   robot.mechanics.r5.S_rel[2,2] = robot.mechanics.r5.nn[2] ^ 2.0 + robot.mechanics.r5.cosq * (1.0 - robot.mechanics.r5.nn[2] ^ 2.0);
//   robot.mechanics.r5.S_rel[2,3] = robot.mechanics.r5.nn[2] * robot.mechanics.r5.nn[3] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[2]) * robot.mechanics.r5.nn[3]) - (-robot.mechanics.r5.sinq) * robot.mechanics.r5.nn[1];
//   robot.mechanics.r5.S_rel[3,1] = robot.mechanics.r5.nn[3] * robot.mechanics.r5.nn[1] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[3]) * robot.mechanics.r5.nn[1]) - (-robot.mechanics.r5.sinq) * robot.mechanics.r5.nn[2];
//   robot.mechanics.r5.S_rel[3,2] = robot.mechanics.r5.nn[3] * robot.mechanics.r5.nn[2] + robot.mechanics.r5.cosq * ((-robot.mechanics.r5.nn[3]) * robot.mechanics.r5.nn[2]) - robot.mechanics.r5.sinq * robot.mechanics.r5.nn[1];
//   robot.mechanics.r5.S_rel[3,3] = robot.mechanics.r5.nn[3] ^ 2.0 + robot.mechanics.r5.cosq * (1.0 - robot.mechanics.r5.nn[3] ^ 2.0);
//   robot.mechanics.r5.r_rela[1] = 0.0;
//   robot.mechanics.r5.r_rela[2] = 0.0;
//   robot.mechanics.r5.r_rela[3] = 0.0;
//   robot.mechanics.r5.v_rela[1] = 0.0;
//   robot.mechanics.r5.v_rela[2] = 0.0;
//   robot.mechanics.r5.v_rela[3] = 0.0;
//   robot.mechanics.r5.a_rela[1] = 0.0;
//   robot.mechanics.r5.a_rela[2] = 0.0;
//   robot.mechanics.r5.a_rela[3] = 0.0;
//   robot.mechanics.r5.w_rela[1] = robot.mechanics.r5.qd * robot.mechanics.r5.nn[1];
//   robot.mechanics.r5.w_rela[2] = robot.mechanics.r5.qd * robot.mechanics.r5.nn[2];
//   robot.mechanics.r5.w_rela[3] = robot.mechanics.r5.qd * robot.mechanics.r5.nn[3];
//   robot.mechanics.r5.z_rela[1] = robot.mechanics.r5.qdd * robot.mechanics.r5.nn[1];
//   robot.mechanics.r5.z_rela[2] = robot.mechanics.r5.qdd * robot.mechanics.r5.nn[2];
//   robot.mechanics.r5.z_rela[3] = robot.mechanics.r5.qdd * robot.mechanics.r5.nn[3];
//   robot.mechanics.r5.Sb[1,1] = robot.mechanics.r5.Sa[1,1] * robot.mechanics.r5.S_rel[1,1] + (robot.mechanics.r5.Sa[1,2] * robot.mechanics.r5.S_rel[1,2] + robot.mechanics.r5.Sa[1,3] * robot.mechanics.r5.S_rel[1,3]);
//   robot.mechanics.r5.Sb[1,2] = robot.mechanics.r5.Sa[1,1] * robot.mechanics.r5.S_rel[2,1] + (robot.mechanics.r5.Sa[1,2] * robot.mechanics.r5.S_rel[2,2] + robot.mechanics.r5.Sa[1,3] * robot.mechanics.r5.S_rel[2,3]);
//   robot.mechanics.r5.Sb[1,3] = robot.mechanics.r5.Sa[1,1] * robot.mechanics.r5.S_rel[3,1] + (robot.mechanics.r5.Sa[1,2] * robot.mechanics.r5.S_rel[3,2] + robot.mechanics.r5.Sa[1,3] * robot.mechanics.r5.S_rel[3,3]);
//   robot.mechanics.r5.Sb[2,1] = robot.mechanics.r5.Sa[2,1] * robot.mechanics.r5.S_rel[1,1] + (robot.mechanics.r5.Sa[2,2] * robot.mechanics.r5.S_rel[1,2] + robot.mechanics.r5.Sa[2,3] * robot.mechanics.r5.S_rel[1,3]);
//   robot.mechanics.r5.Sb[2,2] = robot.mechanics.r5.Sa[2,1] * robot.mechanics.r5.S_rel[2,1] + (robot.mechanics.r5.Sa[2,2] * robot.mechanics.r5.S_rel[2,2] + robot.mechanics.r5.Sa[2,3] * robot.mechanics.r5.S_rel[2,3]);
//   robot.mechanics.r5.Sb[2,3] = robot.mechanics.r5.Sa[2,1] * robot.mechanics.r5.S_rel[3,1] + (robot.mechanics.r5.Sa[2,2] * robot.mechanics.r5.S_rel[3,2] + robot.mechanics.r5.Sa[2,3] * robot.mechanics.r5.S_rel[3,3]);
//   robot.mechanics.r5.Sb[3,1] = robot.mechanics.r5.Sa[3,1] * robot.mechanics.r5.S_rel[1,1] + (robot.mechanics.r5.Sa[3,2] * robot.mechanics.r5.S_rel[1,2] + robot.mechanics.r5.Sa[3,3] * robot.mechanics.r5.S_rel[1,3]);
//   robot.mechanics.r5.Sb[3,2] = robot.mechanics.r5.Sa[3,1] * robot.mechanics.r5.S_rel[2,1] + (robot.mechanics.r5.Sa[3,2] * robot.mechanics.r5.S_rel[2,2] + robot.mechanics.r5.Sa[3,3] * robot.mechanics.r5.S_rel[2,3]);
//   robot.mechanics.r5.Sb[3,3] = robot.mechanics.r5.Sa[3,1] * robot.mechanics.r5.S_rel[3,1] + (robot.mechanics.r5.Sa[3,2] * robot.mechanics.r5.S_rel[3,2] + robot.mechanics.r5.Sa[3,3] * robot.mechanics.r5.S_rel[3,3]);
//   robot.mechanics.r5.r0b[1] = robot.mechanics.r5.r0a[1];
//   robot.mechanics.r5.r0b[2] = robot.mechanics.r5.r0a[2];
//   robot.mechanics.r5.r0b[3] = robot.mechanics.r5.r0a[3];
//   robot.mechanics.r5.vb[1] = robot.mechanics.r5.S_rel[1,1] * robot.mechanics.r5.va[1] + (robot.mechanics.r5.S_rel[1,2] * robot.mechanics.r5.va[2] + robot.mechanics.r5.S_rel[1,3] * robot.mechanics.r5.va[3]);
//   robot.mechanics.r5.vb[2] = robot.mechanics.r5.S_rel[2,1] * robot.mechanics.r5.va[1] + (robot.mechanics.r5.S_rel[2,2] * robot.mechanics.r5.va[2] + robot.mechanics.r5.S_rel[2,3] * robot.mechanics.r5.va[3]);
//   robot.mechanics.r5.vb[3] = robot.mechanics.r5.S_rel[3,1] * robot.mechanics.r5.va[1] + (robot.mechanics.r5.S_rel[3,2] * robot.mechanics.r5.va[2] + robot.mechanics.r5.S_rel[3,3] * robot.mechanics.r5.va[3]);
//   robot.mechanics.r5.wb[1] = robot.mechanics.r5.S_rel[1,1] * (robot.mechanics.r5.wa[1] + robot.mechanics.r5.w_rela[1]) + (robot.mechanics.r5.S_rel[1,2] * (robot.mechanics.r5.wa[2] + robot.mechanics.r5.w_rela[2]) + robot.mechanics.r5.S_rel[1,3] * (robot.mechanics.r5.wa[3] + robot.mechanics.r5.w_rela[3]));
//   robot.mechanics.r5.wb[2] = robot.mechanics.r5.S_rel[2,1] * (robot.mechanics.r5.wa[1] + robot.mechanics.r5.w_rela[1]) + (robot.mechanics.r5.S_rel[2,2] * (robot.mechanics.r5.wa[2] + robot.mechanics.r5.w_rela[2]) + robot.mechanics.r5.S_rel[2,3] * (robot.mechanics.r5.wa[3] + robot.mechanics.r5.w_rela[3]));
//   robot.mechanics.r5.wb[3] = robot.mechanics.r5.S_rel[3,1] * (robot.mechanics.r5.wa[1] + robot.mechanics.r5.w_rela[1]) + (robot.mechanics.r5.S_rel[3,2] * (robot.mechanics.r5.wa[2] + robot.mechanics.r5.w_rela[2]) + robot.mechanics.r5.S_rel[3,3] * (robot.mechanics.r5.wa[3] + robot.mechanics.r5.w_rela[3]));
//   robot.mechanics.r5.ab[1] = robot.mechanics.r5.S_rel[1,1] * robot.mechanics.r5.aa[1] + (robot.mechanics.r5.S_rel[1,2] * robot.mechanics.r5.aa[2] + robot.mechanics.r5.S_rel[1,3] * robot.mechanics.r5.aa[3]);
//   robot.mechanics.r5.ab[2] = robot.mechanics.r5.S_rel[2,1] * robot.mechanics.r5.aa[1] + (robot.mechanics.r5.S_rel[2,2] * robot.mechanics.r5.aa[2] + robot.mechanics.r5.S_rel[2,3] * robot.mechanics.r5.aa[3]);
//   robot.mechanics.r5.ab[3] = robot.mechanics.r5.S_rel[3,1] * robot.mechanics.r5.aa[1] + (robot.mechanics.r5.S_rel[3,2] * robot.mechanics.r5.aa[2] + robot.mechanics.r5.S_rel[3,3] * robot.mechanics.r5.aa[3]);
//   robot.mechanics.r5.zb[1] = robot.mechanics.r5.S_rel[1,1] * (robot.mechanics.r5.za[1] + (robot.mechanics.r5.z_rela[1] + (robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[3] + (-robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[2])))) + (robot.mechanics.r5.S_rel[1,2] * (robot.mechanics.r5.za[2] + (robot.mechanics.r5.z_rela[2] + (robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[1] + (-robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[3])))) + robot.mechanics.r5.S_rel[1,3] * (robot.mechanics.r5.za[3] + (robot.mechanics.r5.z_rela[3] + (robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[2] + (-robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[1])))));
//   robot.mechanics.r5.zb[2] = robot.mechanics.r5.S_rel[2,1] * (robot.mechanics.r5.za[1] + (robot.mechanics.r5.z_rela[1] + (robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[3] + (-robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[2])))) + (robot.mechanics.r5.S_rel[2,2] * (robot.mechanics.r5.za[2] + (robot.mechanics.r5.z_rela[2] + (robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[1] + (-robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[3])))) + robot.mechanics.r5.S_rel[2,3] * (robot.mechanics.r5.za[3] + (robot.mechanics.r5.z_rela[3] + (robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[2] + (-robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[1])))));
//   robot.mechanics.r5.zb[3] = robot.mechanics.r5.S_rel[3,1] * (robot.mechanics.r5.za[1] + (robot.mechanics.r5.z_rela[1] + (robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[3] + (-robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[2])))) + (robot.mechanics.r5.S_rel[3,2] * (robot.mechanics.r5.za[2] + (robot.mechanics.r5.z_rela[2] + (robot.mechanics.r5.wa[3] * robot.mechanics.r5.w_rela[1] + (-robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[3])))) + robot.mechanics.r5.S_rel[3,3] * (robot.mechanics.r5.za[3] + (robot.mechanics.r5.z_rela[3] + (robot.mechanics.r5.wa[1] * robot.mechanics.r5.w_rela[2] + (-robot.mechanics.r5.wa[2] * robot.mechanics.r5.w_rela[1])))));
//   robot.mechanics.r5.fa[1] = robot.mechanics.r5.S_rel[1,1] * robot.mechanics.r5.fb[1] + (robot.mechanics.r5.S_rel[2,1] * robot.mechanics.r5.fb[2] + robot.mechanics.r5.S_rel[3,1] * robot.mechanics.r5.fb[3]);
//   robot.mechanics.r5.fa[2] = robot.mechanics.r5.S_rel[1,2] * robot.mechanics.r5.fb[1] + (robot.mechanics.r5.S_rel[2,2] * robot.mechanics.r5.fb[2] + robot.mechanics.r5.S_rel[3,2] * robot.mechanics.r5.fb[3]);
//   robot.mechanics.r5.fa[3] = robot.mechanics.r5.S_rel[1,3] * robot.mechanics.r5.fb[1] + (robot.mechanics.r5.S_rel[2,3] * robot.mechanics.r5.fb[2] + robot.mechanics.r5.S_rel[3,3] * robot.mechanics.r5.fb[3]);
//   robot.mechanics.r5.ta[1] = robot.mechanics.r5.S_rel[1,1] * robot.mechanics.r5.tb[1] + (robot.mechanics.r5.S_rel[2,1] * robot.mechanics.r5.tb[2] + robot.mechanics.r5.S_rel[3,1] * robot.mechanics.r5.tb[3]);
//   robot.mechanics.r5.ta[2] = robot.mechanics.r5.S_rel[1,2] * robot.mechanics.r5.tb[1] + (robot.mechanics.r5.S_rel[2,2] * robot.mechanics.r5.tb[2] + robot.mechanics.r5.S_rel[3,2] * robot.mechanics.r5.tb[3]);
//   robot.mechanics.r5.ta[3] = robot.mechanics.r5.S_rel[1,3] * robot.mechanics.r5.tb[1] + (robot.mechanics.r5.S_rel[2,3] * robot.mechanics.r5.tb[2] + robot.mechanics.r5.S_rel[3,3] * robot.mechanics.r5.tb[3]);
//   robot.mechanics.r5.axis.tau = robot.mechanics.r5.nn[1] * robot.mechanics.r5.tb[1] + (robot.mechanics.r5.nn[2] * robot.mechanics.r5.tb[2] + robot.mechanics.r5.nn[3] * robot.mechanics.r5.tb[3]);
//   robot.mechanics.r6.axis.phi = robot.mechanics.r6.q;
//   robot.mechanics.r6.bearing.phi = 0.0;
//   robot.mechanics.r6.qd = der(robot.mechanics.r6.q);
//   robot.mechanics.r6.qdd = der(robot.mechanics.r6.qd);
//   robot.mechanics.r6.nn[1] = robot.mechanics.r6.n[1] / sqrt(robot.mechanics.r6.n[1] ^ 2.0 + (robot.mechanics.r6.n[2] ^ 2.0 + robot.mechanics.r6.n[3] ^ 2.0));
//   robot.mechanics.r6.nn[2] = robot.mechanics.r6.n[2] / sqrt(robot.mechanics.r6.n[1] ^ 2.0 + (robot.mechanics.r6.n[2] ^ 2.0 + robot.mechanics.r6.n[3] ^ 2.0));
//   robot.mechanics.r6.nn[3] = robot.mechanics.r6.n[3] / sqrt(robot.mechanics.r6.n[1] ^ 2.0 + (robot.mechanics.r6.n[2] ^ 2.0 + robot.mechanics.r6.n[3] ^ 2.0));
//   robot.mechanics.r6.qq = robot.mechanics.r6.q - 0.0174532925199433 * robot.mechanics.r6.q0;
//   robot.mechanics.r6.sinq = sin(robot.mechanics.r6.qq);
//   robot.mechanics.r6.cosq = cos(robot.mechanics.r6.qq);
//   robot.mechanics.r6.S_rel[1,1] = robot.mechanics.r6.nn[1] ^ 2.0 + robot.mechanics.r6.cosq * (1.0 - robot.mechanics.r6.nn[1] ^ 2.0);
//   robot.mechanics.r6.S_rel[1,2] = robot.mechanics.r6.nn[1] * robot.mechanics.r6.nn[2] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[1]) * robot.mechanics.r6.nn[2]) - (-robot.mechanics.r6.sinq) * robot.mechanics.r6.nn[3];
//   robot.mechanics.r6.S_rel[1,3] = robot.mechanics.r6.nn[1] * robot.mechanics.r6.nn[3] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[1]) * robot.mechanics.r6.nn[3]) - robot.mechanics.r6.sinq * robot.mechanics.r6.nn[2];
//   robot.mechanics.r6.S_rel[2,1] = robot.mechanics.r6.nn[2] * robot.mechanics.r6.nn[1] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[2]) * robot.mechanics.r6.nn[1]) - robot.mechanics.r6.sinq * robot.mechanics.r6.nn[3];
//   robot.mechanics.r6.S_rel[2,2] = robot.mechanics.r6.nn[2] ^ 2.0 + robot.mechanics.r6.cosq * (1.0 - robot.mechanics.r6.nn[2] ^ 2.0);
//   robot.mechanics.r6.S_rel[2,3] = robot.mechanics.r6.nn[2] * robot.mechanics.r6.nn[3] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[2]) * robot.mechanics.r6.nn[3]) - (-robot.mechanics.r6.sinq) * robot.mechanics.r6.nn[1];
//   robot.mechanics.r6.S_rel[3,1] = robot.mechanics.r6.nn[3] * robot.mechanics.r6.nn[1] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[3]) * robot.mechanics.r6.nn[1]) - (-robot.mechanics.r6.sinq) * robot.mechanics.r6.nn[2];
//   robot.mechanics.r6.S_rel[3,2] = robot.mechanics.r6.nn[3] * robot.mechanics.r6.nn[2] + robot.mechanics.r6.cosq * ((-robot.mechanics.r6.nn[3]) * robot.mechanics.r6.nn[2]) - robot.mechanics.r6.sinq * robot.mechanics.r6.nn[1];
//   robot.mechanics.r6.S_rel[3,3] = robot.mechanics.r6.nn[3] ^ 2.0 + robot.mechanics.r6.cosq * (1.0 - robot.mechanics.r6.nn[3] ^ 2.0);
//   robot.mechanics.r6.r_rela[1] = 0.0;
//   robot.mechanics.r6.r_rela[2] = 0.0;
//   robot.mechanics.r6.r_rela[3] = 0.0;
//   robot.mechanics.r6.v_rela[1] = 0.0;
//   robot.mechanics.r6.v_rela[2] = 0.0;
//   robot.mechanics.r6.v_rela[3] = 0.0;
//   robot.mechanics.r6.a_rela[1] = 0.0;
//   robot.mechanics.r6.a_rela[2] = 0.0;
//   robot.mechanics.r6.a_rela[3] = 0.0;
//   robot.mechanics.r6.w_rela[1] = robot.mechanics.r6.qd * robot.mechanics.r6.nn[1];
//   robot.mechanics.r6.w_rela[2] = robot.mechanics.r6.qd * robot.mechanics.r6.nn[2];
//   robot.mechanics.r6.w_rela[3] = robot.mechanics.r6.qd * robot.mechanics.r6.nn[3];
//   robot.mechanics.r6.z_rela[1] = robot.mechanics.r6.qdd * robot.mechanics.r6.nn[1];
//   robot.mechanics.r6.z_rela[2] = robot.mechanics.r6.qdd * robot.mechanics.r6.nn[2];
//   robot.mechanics.r6.z_rela[3] = robot.mechanics.r6.qdd * robot.mechanics.r6.nn[3];
//   robot.mechanics.r6.Sb[1,1] = robot.mechanics.r6.Sa[1,1] * robot.mechanics.r6.S_rel[1,1] + (robot.mechanics.r6.Sa[1,2] * robot.mechanics.r6.S_rel[1,2] + robot.mechanics.r6.Sa[1,3] * robot.mechanics.r6.S_rel[1,3]);
//   robot.mechanics.r6.Sb[1,2] = robot.mechanics.r6.Sa[1,1] * robot.mechanics.r6.S_rel[2,1] + (robot.mechanics.r6.Sa[1,2] * robot.mechanics.r6.S_rel[2,2] + robot.mechanics.r6.Sa[1,3] * robot.mechanics.r6.S_rel[2,3]);
//   robot.mechanics.r6.Sb[1,3] = robot.mechanics.r6.Sa[1,1] * robot.mechanics.r6.S_rel[3,1] + (robot.mechanics.r6.Sa[1,2] * robot.mechanics.r6.S_rel[3,2] + robot.mechanics.r6.Sa[1,3] * robot.mechanics.r6.S_rel[3,3]);
//   robot.mechanics.r6.Sb[2,1] = robot.mechanics.r6.Sa[2,1] * robot.mechanics.r6.S_rel[1,1] + (robot.mechanics.r6.Sa[2,2] * robot.mechanics.r6.S_rel[1,2] + robot.mechanics.r6.Sa[2,3] * robot.mechanics.r6.S_rel[1,3]);
//   robot.mechanics.r6.Sb[2,2] = robot.mechanics.r6.Sa[2,1] * robot.mechanics.r6.S_rel[2,1] + (robot.mechanics.r6.Sa[2,2] * robot.mechanics.r6.S_rel[2,2] + robot.mechanics.r6.Sa[2,3] * robot.mechanics.r6.S_rel[2,3]);
//   robot.mechanics.r6.Sb[2,3] = robot.mechanics.r6.Sa[2,1] * robot.mechanics.r6.S_rel[3,1] + (robot.mechanics.r6.Sa[2,2] * robot.mechanics.r6.S_rel[3,2] + robot.mechanics.r6.Sa[2,3] * robot.mechanics.r6.S_rel[3,3]);
//   robot.mechanics.r6.Sb[3,1] = robot.mechanics.r6.Sa[3,1] * robot.mechanics.r6.S_rel[1,1] + (robot.mechanics.r6.Sa[3,2] * robot.mechanics.r6.S_rel[1,2] + robot.mechanics.r6.Sa[3,3] * robot.mechanics.r6.S_rel[1,3]);
//   robot.mechanics.r6.Sb[3,2] = robot.mechanics.r6.Sa[3,1] * robot.mechanics.r6.S_rel[2,1] + (robot.mechanics.r6.Sa[3,2] * robot.mechanics.r6.S_rel[2,2] + robot.mechanics.r6.Sa[3,3] * robot.mechanics.r6.S_rel[2,3]);
//   robot.mechanics.r6.Sb[3,3] = robot.mechanics.r6.Sa[3,1] * robot.mechanics.r6.S_rel[3,1] + (robot.mechanics.r6.Sa[3,2] * robot.mechanics.r6.S_rel[3,2] + robot.mechanics.r6.Sa[3,3] * robot.mechanics.r6.S_rel[3,3]);
//   robot.mechanics.r6.r0b[1] = robot.mechanics.r6.r0a[1];
//   robot.mechanics.r6.r0b[2] = robot.mechanics.r6.r0a[2];
//   robot.mechanics.r6.r0b[3] = robot.mechanics.r6.r0a[3];
//   robot.mechanics.r6.vb[1] = robot.mechanics.r6.S_rel[1,1] * robot.mechanics.r6.va[1] + (robot.mechanics.r6.S_rel[1,2] * robot.mechanics.r6.va[2] + robot.mechanics.r6.S_rel[1,3] * robot.mechanics.r6.va[3]);
//   robot.mechanics.r6.vb[2] = robot.mechanics.r6.S_rel[2,1] * robot.mechanics.r6.va[1] + (robot.mechanics.r6.S_rel[2,2] * robot.mechanics.r6.va[2] + robot.mechanics.r6.S_rel[2,3] * robot.mechanics.r6.va[3]);
//   robot.mechanics.r6.vb[3] = robot.mechanics.r6.S_rel[3,1] * robot.mechanics.r6.va[1] + (robot.mechanics.r6.S_rel[3,2] * robot.mechanics.r6.va[2] + robot.mechanics.r6.S_rel[3,3] * robot.mechanics.r6.va[3]);
//   robot.mechanics.r6.wb[1] = robot.mechanics.r6.S_rel[1,1] * (robot.mechanics.r6.wa[1] + robot.mechanics.r6.w_rela[1]) + (robot.mechanics.r6.S_rel[1,2] * (robot.mechanics.r6.wa[2] + robot.mechanics.r6.w_rela[2]) + robot.mechanics.r6.S_rel[1,3] * (robot.mechanics.r6.wa[3] + robot.mechanics.r6.w_rela[3]));
//   robot.mechanics.r6.wb[2] = robot.mechanics.r6.S_rel[2,1] * (robot.mechanics.r6.wa[1] + robot.mechanics.r6.w_rela[1]) + (robot.mechanics.r6.S_rel[2,2] * (robot.mechanics.r6.wa[2] + robot.mechanics.r6.w_rela[2]) + robot.mechanics.r6.S_rel[2,3] * (robot.mechanics.r6.wa[3] + robot.mechanics.r6.w_rela[3]));
//   robot.mechanics.r6.wb[3] = robot.mechanics.r6.S_rel[3,1] * (robot.mechanics.r6.wa[1] + robot.mechanics.r6.w_rela[1]) + (robot.mechanics.r6.S_rel[3,2] * (robot.mechanics.r6.wa[2] + robot.mechanics.r6.w_rela[2]) + robot.mechanics.r6.S_rel[3,3] * (robot.mechanics.r6.wa[3] + robot.mechanics.r6.w_rela[3]));
//   robot.mechanics.r6.ab[1] = robot.mechanics.r6.S_rel[1,1] * robot.mechanics.r6.aa[1] + (robot.mechanics.r6.S_rel[1,2] * robot.mechanics.r6.aa[2] + robot.mechanics.r6.S_rel[1,3] * robot.mechanics.r6.aa[3]);
//   robot.mechanics.r6.ab[2] = robot.mechanics.r6.S_rel[2,1] * robot.mechanics.r6.aa[1] + (robot.mechanics.r6.S_rel[2,2] * robot.mechanics.r6.aa[2] + robot.mechanics.r6.S_rel[2,3] * robot.mechanics.r6.aa[3]);
//   robot.mechanics.r6.ab[3] = robot.mechanics.r6.S_rel[3,1] * robot.mechanics.r6.aa[1] + (robot.mechanics.r6.S_rel[3,2] * robot.mechanics.r6.aa[2] + robot.mechanics.r6.S_rel[3,3] * robot.mechanics.r6.aa[3]);
//   robot.mechanics.r6.zb[1] = robot.mechanics.r6.S_rel[1,1] * (robot.mechanics.r6.za[1] + (robot.mechanics.r6.z_rela[1] + (robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[3] + (-robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[2])))) + (robot.mechanics.r6.S_rel[1,2] * (robot.mechanics.r6.za[2] + (robot.mechanics.r6.z_rela[2] + (robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[1] + (-robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[3])))) + robot.mechanics.r6.S_rel[1,3] * (robot.mechanics.r6.za[3] + (robot.mechanics.r6.z_rela[3] + (robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[2] + (-robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[1])))));
//   robot.mechanics.r6.zb[2] = robot.mechanics.r6.S_rel[2,1] * (robot.mechanics.r6.za[1] + (robot.mechanics.r6.z_rela[1] + (robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[3] + (-robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[2])))) + (robot.mechanics.r6.S_rel[2,2] * (robot.mechanics.r6.za[2] + (robot.mechanics.r6.z_rela[2] + (robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[1] + (-robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[3])))) + robot.mechanics.r6.S_rel[2,3] * (robot.mechanics.r6.za[3] + (robot.mechanics.r6.z_rela[3] + (robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[2] + (-robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[1])))));
//   robot.mechanics.r6.zb[3] = robot.mechanics.r6.S_rel[3,1] * (robot.mechanics.r6.za[1] + (robot.mechanics.r6.z_rela[1] + (robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[3] + (-robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[2])))) + (robot.mechanics.r6.S_rel[3,2] * (robot.mechanics.r6.za[2] + (robot.mechanics.r6.z_rela[2] + (robot.mechanics.r6.wa[3] * robot.mechanics.r6.w_rela[1] + (-robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[3])))) + robot.mechanics.r6.S_rel[3,3] * (robot.mechanics.r6.za[3] + (robot.mechanics.r6.z_rela[3] + (robot.mechanics.r6.wa[1] * robot.mechanics.r6.w_rela[2] + (-robot.mechanics.r6.wa[2] * robot.mechanics.r6.w_rela[1])))));
//   robot.mechanics.r6.fa[1] = robot.mechanics.r6.S_rel[1,1] * robot.mechanics.r6.fb[1] + (robot.mechanics.r6.S_rel[2,1] * robot.mechanics.r6.fb[2] + robot.mechanics.r6.S_rel[3,1] * robot.mechanics.r6.fb[3]);
//   robot.mechanics.r6.fa[2] = robot.mechanics.r6.S_rel[1,2] * robot.mechanics.r6.fb[1] + (robot.mechanics.r6.S_rel[2,2] * robot.mechanics.r6.fb[2] + robot.mechanics.r6.S_rel[3,2] * robot.mechanics.r6.fb[3]);
//   robot.mechanics.r6.fa[3] = robot.mechanics.r6.S_rel[1,3] * robot.mechanics.r6.fb[1] + (robot.mechanics.r6.S_rel[2,3] * robot.mechanics.r6.fb[2] + robot.mechanics.r6.S_rel[3,3] * robot.mechanics.r6.fb[3]);
//   robot.mechanics.r6.ta[1] = robot.mechanics.r6.S_rel[1,1] * robot.mechanics.r6.tb[1] + (robot.mechanics.r6.S_rel[2,1] * robot.mechanics.r6.tb[2] + robot.mechanics.r6.S_rel[3,1] * robot.mechanics.r6.tb[3]);
//   robot.mechanics.r6.ta[2] = robot.mechanics.r6.S_rel[1,2] * robot.mechanics.r6.tb[1] + (robot.mechanics.r6.S_rel[2,2] * robot.mechanics.r6.tb[2] + robot.mechanics.r6.S_rel[3,2] * robot.mechanics.r6.tb[3]);
//   robot.mechanics.r6.ta[3] = robot.mechanics.r6.S_rel[1,3] * robot.mechanics.r6.tb[1] + (robot.mechanics.r6.S_rel[2,3] * robot.mechanics.r6.tb[2] + robot.mechanics.r6.S_rel[3,3] * robot.mechanics.r6.tb[3]);
//   robot.mechanics.r6.axis.tau = robot.mechanics.r6.nn[1] * robot.mechanics.r6.tb[1] + (robot.mechanics.r6.nn[2] * robot.mechanics.r6.tb[2] + robot.mechanics.r6.nn[3] * robot.mechanics.r6.tb[3]);
//   robot.mechanics.b0.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b0.vis.mcShape.shapeType);
//   robot.mechanics.b0.vis.mcShape.Material = PackMaterial(robot.mechanics.b0.vis.mcShape.color[1] / 255.0,robot.mechanics.b0.vis.mcShape.color[2] / 255.0,robot.mechanics.b0.vis.mcShape.color[3] / 255.0,robot.mechanics.b0.vis.mcShape.specularCoefficient);
//   robot.mechanics.b0.vis.mcShape.Extra = robot.mechanics.b0.vis.mcShape.extra;
//   robot.mechanics.b0.vis.mcShape.size[1] = robot.mechanics.b0.vis.mcShape.length;
//   robot.mechanics.b0.vis.mcShape.size[2] = robot.mechanics.b0.vis.mcShape.width;
//   robot.mechanics.b0.vis.mcShape.size[3] = robot.mechanics.b0.vis.mcShape.height;
//   robot.mechanics.b0.vis.mcShape.Sshape[1,1] = robot.mechanics.b0.vis.mcShape.e_x[1];
//   robot.mechanics.b0.vis.mcShape.Sshape[1,2] = robot.mechanics.b0.vis.mcShape.e_y[1];
//   robot.mechanics.b0.vis.mcShape.Sshape[1,3] = robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.e_y[3] - robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.e_y[2];
//   robot.mechanics.b0.vis.mcShape.Sshape[2,1] = robot.mechanics.b0.vis.mcShape.e_x[2];
//   robot.mechanics.b0.vis.mcShape.Sshape[2,2] = robot.mechanics.b0.vis.mcShape.e_y[2];
//   robot.mechanics.b0.vis.mcShape.Sshape[2,3] = robot.mechanics.b0.vis.mcShape.e_x[3] * robot.mechanics.b0.vis.mcShape.e_y[1] - robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.e_y[3];
//   robot.mechanics.b0.vis.mcShape.Sshape[3,1] = robot.mechanics.b0.vis.mcShape.e_x[3];
//   robot.mechanics.b0.vis.mcShape.Sshape[3,2] = robot.mechanics.b0.vis.mcShape.e_y[3];
//   robot.mechanics.b0.vis.mcShape.Sshape[3,3] = robot.mechanics.b0.vis.mcShape.e_x[1] * robot.mechanics.b0.vis.mcShape.e_y[2] - robot.mechanics.b0.vis.mcShape.e_x[2] * robot.mechanics.b0.vis.mcShape.e_y[1];
//   robot.mechanics.b0.vis.mcShape.rxvisobj[1] = robot.mechanics.b0.vis.mcShape.S[1,1] * robot.mechanics.b0.vis.mcShape.e_x[1] + (robot.mechanics.b0.vis.mcShape.S[1,2] * robot.mechanics.b0.vis.mcShape.e_x[2] + robot.mechanics.b0.vis.mcShape.S[1,3] * robot.mechanics.b0.vis.mcShape.e_x[3]);
//   robot.mechanics.b0.vis.mcShape.rxvisobj[2] = robot.mechanics.b0.vis.mcShape.S[2,1] * robot.mechanics.b0.vis.mcShape.e_x[1] + (robot.mechanics.b0.vis.mcShape.S[2,2] * robot.mechanics.b0.vis.mcShape.e_x[2] + robot.mechanics.b0.vis.mcShape.S[2,3] * robot.mechanics.b0.vis.mcShape.e_x[3]);
//   robot.mechanics.b0.vis.mcShape.rxvisobj[3] = robot.mechanics.b0.vis.mcShape.S[3,1] * robot.mechanics.b0.vis.mcShape.e_x[1] + (robot.mechanics.b0.vis.mcShape.S[3,2] * robot.mechanics.b0.vis.mcShape.e_x[2] + robot.mechanics.b0.vis.mcShape.S[3,3] * robot.mechanics.b0.vis.mcShape.e_x[3]);
//   robot.mechanics.b0.vis.mcShape.ryvisobj[1] = robot.mechanics.b0.vis.mcShape.S[1,1] * robot.mechanics.b0.vis.mcShape.e_y[1] + (robot.mechanics.b0.vis.mcShape.S[1,2] * robot.mechanics.b0.vis.mcShape.e_y[2] + robot.mechanics.b0.vis.mcShape.S[1,3] * robot.mechanics.b0.vis.mcShape.e_y[3]);
//   robot.mechanics.b0.vis.mcShape.ryvisobj[2] = robot.mechanics.b0.vis.mcShape.S[2,1] * robot.mechanics.b0.vis.mcShape.e_y[1] + (robot.mechanics.b0.vis.mcShape.S[2,2] * robot.mechanics.b0.vis.mcShape.e_y[2] + robot.mechanics.b0.vis.mcShape.S[2,3] * robot.mechanics.b0.vis.mcShape.e_y[3]);
//   robot.mechanics.b0.vis.mcShape.ryvisobj[3] = robot.mechanics.b0.vis.mcShape.S[3,1] * robot.mechanics.b0.vis.mcShape.e_y[1] + (robot.mechanics.b0.vis.mcShape.S[3,2] * robot.mechanics.b0.vis.mcShape.e_y[2] + robot.mechanics.b0.vis.mcShape.S[3,3] * robot.mechanics.b0.vis.mcShape.e_y[3]);
//   robot.mechanics.b0.vis.mcShape.rvisobj[1] = robot.mechanics.b0.vis.mcShape.r[1] + (robot.mechanics.b0.vis.mcShape.S[1,1] * robot.mechanics.b0.vis.mcShape.r_shape[1] + (robot.mechanics.b0.vis.mcShape.S[1,2] * robot.mechanics.b0.vis.mcShape.r_shape[2] + robot.mechanics.b0.vis.mcShape.S[1,3] * robot.mechanics.b0.vis.mcShape.r_shape[3]));
//   robot.mechanics.b0.vis.mcShape.rvisobj[2] = robot.mechanics.b0.vis.mcShape.r[2] + (robot.mechanics.b0.vis.mcShape.S[2,1] * robot.mechanics.b0.vis.mcShape.r_shape[1] + (robot.mechanics.b0.vis.mcShape.S[2,2] * robot.mechanics.b0.vis.mcShape.r_shape[2] + robot.mechanics.b0.vis.mcShape.S[2,3] * robot.mechanics.b0.vis.mcShape.r_shape[3]));
//   robot.mechanics.b0.vis.mcShape.rvisobj[3] = robot.mechanics.b0.vis.mcShape.r[3] + (robot.mechanics.b0.vis.mcShape.S[3,1] * robot.mechanics.b0.vis.mcShape.r_shape[1] + (robot.mechanics.b0.vis.mcShape.S[3,2] * robot.mechanics.b0.vis.mcShape.r_shape[2] + robot.mechanics.b0.vis.mcShape.S[3,3] * robot.mechanics.b0.vis.mcShape.r_shape[3]));
//   robot.mechanics.b0.vis.mcShape.e_x[1] = robot.mechanics.b0.vis.nLength[1];
//   robot.mechanics.b0.vis.mcShape.e_x[2] = robot.mechanics.b0.vis.nLength[2];
//   robot.mechanics.b0.vis.mcShape.e_x[3] = robot.mechanics.b0.vis.nLength[3];
//   robot.mechanics.b0.vis.mcShape.e_y[1] = robot.mechanics.b0.vis.nWidth[1];
//   robot.mechanics.b0.vis.mcShape.e_y[2] = robot.mechanics.b0.vis.nWidth[2];
//   robot.mechanics.b0.vis.mcShape.e_y[3] = robot.mechanics.b0.vis.nWidth[3];
//   robot.mechanics.b0.vis.mcShape.e_z[1] = robot.mechanics.b0.vis.nHeight[1];
//   robot.mechanics.b0.vis.mcShape.e_z[2] = robot.mechanics.b0.vis.nHeight[2];
//   robot.mechanics.b0.vis.mcShape.e_z[3] = robot.mechanics.b0.vis.nHeight[3];
//   robot.mechanics.b0.vis.S[1,1] = robot.mechanics.b0.Sa[1,1];
//   robot.mechanics.b0.vis.S[1,2] = robot.mechanics.b0.Sa[1,2];
//   robot.mechanics.b0.vis.S[1,3] = robot.mechanics.b0.Sa[1,3];
//   robot.mechanics.b0.vis.S[2,1] = robot.mechanics.b0.Sa[2,1];
//   robot.mechanics.b0.vis.S[2,2] = robot.mechanics.b0.Sa[2,2];
//   robot.mechanics.b0.vis.S[2,3] = robot.mechanics.b0.Sa[2,3];
//   robot.mechanics.b0.vis.S[3,1] = robot.mechanics.b0.Sa[3,1];
//   robot.mechanics.b0.vis.S[3,2] = robot.mechanics.b0.Sa[3,2];
//   robot.mechanics.b0.vis.S[3,3] = robot.mechanics.b0.Sa[3,3];
//   robot.mechanics.b0.vis.r[1] = robot.mechanics.b0.r0a[1];
//   robot.mechanics.b0.vis.r[2] = robot.mechanics.b0.r0a[2];
//   robot.mechanics.b0.vis.r[3] = robot.mechanics.b0.r0a[3];
//   robot.mechanics.b0.vis.nLength[1] = robot.mechanics.b0.nLength[1];
//   robot.mechanics.b0.vis.nLength[2] = robot.mechanics.b0.nLength[2];
//   robot.mechanics.b0.vis.nLength[3] = robot.mechanics.b0.nLength[3];
//   robot.mechanics.b0.vis.nWidth[1] = robot.mechanics.b0.nWidth[1];
//   robot.mechanics.b0.vis.nWidth[2] = robot.mechanics.b0.nWidth[2];
//   robot.mechanics.b0.vis.nWidth[3] = robot.mechanics.b0.nWidth[3];
//   robot.mechanics.b0.vis.nHeight[1] = robot.mechanics.b0.nHeight[1];
//   robot.mechanics.b0.vis.nHeight[2] = robot.mechanics.b0.nHeight[2];
//   robot.mechanics.b0.vis.nHeight[3] = robot.mechanics.b0.nHeight[3];
//   robot.mechanics.b0.fa[1] = 0.0;
//   robot.mechanics.b0.fa[2] = 0.0;
//   robot.mechanics.b0.fa[3] = 0.0;
//   robot.mechanics.b0.ta[1] = 0.0;
//   robot.mechanics.b0.ta[2] = 0.0;
//   robot.mechanics.b0.ta[3] = 0.0;
//   robot.mechanics.b1.body.frameTranslation.Sb[1,1] = robot.mechanics.b1.body.frameTranslation.Sa[1,1];
//   robot.mechanics.b1.body.frameTranslation.Sb[1,2] = robot.mechanics.b1.body.frameTranslation.Sa[1,2];
//   robot.mechanics.b1.body.frameTranslation.Sb[1,3] = robot.mechanics.b1.body.frameTranslation.Sa[1,3];
//   robot.mechanics.b1.body.frameTranslation.Sb[2,1] = robot.mechanics.b1.body.frameTranslation.Sa[2,1];
//   robot.mechanics.b1.body.frameTranslation.Sb[2,2] = robot.mechanics.b1.body.frameTranslation.Sa[2,2];
//   robot.mechanics.b1.body.frameTranslation.Sb[2,3] = robot.mechanics.b1.body.frameTranslation.Sa[2,3];
//   robot.mechanics.b1.body.frameTranslation.Sb[3,1] = robot.mechanics.b1.body.frameTranslation.Sa[3,1];
//   robot.mechanics.b1.body.frameTranslation.Sb[3,2] = robot.mechanics.b1.body.frameTranslation.Sa[3,2];
//   robot.mechanics.b1.body.frameTranslation.Sb[3,3] = robot.mechanics.b1.body.frameTranslation.Sa[3,3];
//   robot.mechanics.b1.body.frameTranslation.wb[1] = robot.mechanics.b1.body.frameTranslation.wa[1];
//   robot.mechanics.b1.body.frameTranslation.wb[2] = robot.mechanics.b1.body.frameTranslation.wa[2];
//   robot.mechanics.b1.body.frameTranslation.wb[3] = robot.mechanics.b1.body.frameTranslation.wa[3];
//   robot.mechanics.b1.body.frameTranslation.zb[1] = robot.mechanics.b1.body.frameTranslation.za[1];
//   robot.mechanics.b1.body.frameTranslation.zb[2] = robot.mechanics.b1.body.frameTranslation.za[2];
//   robot.mechanics.b1.body.frameTranslation.zb[3] = robot.mechanics.b1.body.frameTranslation.za[3];
//   robot.mechanics.b1.body.frameTranslation.r0b[1] = robot.mechanics.b1.body.frameTranslation.r0a[1] + (robot.mechanics.b1.body.frameTranslation.Sa[1,1] * robot.mechanics.b1.body.frameTranslation.r[1] + (robot.mechanics.b1.body.frameTranslation.Sa[1,2] * robot.mechanics.b1.body.frameTranslation.r[2] + robot.mechanics.b1.body.frameTranslation.Sa[1,3] * robot.mechanics.b1.body.frameTranslation.r[3]));
//   robot.mechanics.b1.body.frameTranslation.r0b[2] = robot.mechanics.b1.body.frameTranslation.r0a[2] + (robot.mechanics.b1.body.frameTranslation.Sa[2,1] * robot.mechanics.b1.body.frameTranslation.r[1] + (robot.mechanics.b1.body.frameTranslation.Sa[2,2] * robot.mechanics.b1.body.frameTranslation.r[2] + robot.mechanics.b1.body.frameTranslation.Sa[2,3] * robot.mechanics.b1.body.frameTranslation.r[3]));
//   robot.mechanics.b1.body.frameTranslation.r0b[3] = robot.mechanics.b1.body.frameTranslation.r0a[3] + (robot.mechanics.b1.body.frameTranslation.Sa[3,1] * robot.mechanics.b1.body.frameTranslation.r[1] + (robot.mechanics.b1.body.frameTranslation.Sa[3,2] * robot.mechanics.b1.body.frameTranslation.r[2] + robot.mechanics.b1.body.frameTranslation.Sa[3,3] * robot.mechanics.b1.body.frameTranslation.r[3]));
//   robot.mechanics.b1.body.frameTranslation.vaux[1] = robot.mechanics.b1.body.frameTranslation.wa[2] * robot.mechanics.b1.body.frameTranslation.r[3] - robot.mechanics.b1.body.frameTranslation.wa[3] * robot.mechanics.b1.body.frameTranslation.r[2];
//   robot.mechanics.b1.body.frameTranslation.vaux[2] = robot.mechanics.b1.body.frameTranslation.wa[3] * robot.mechanics.b1.body.frameTranslation.r[1] - robot.mechanics.b1.body.frameTranslation.wa[1] * robot.mechanics.b1.body.frameTranslation.r[3];
//   robot.mechanics.b1.body.frameTranslation.vaux[3] = robot.mechanics.b1.body.frameTranslation.wa[1] * robot.mechanics.b1.body.frameTranslation.r[2] - robot.mechanics.b1.body.frameTranslation.wa[2] * robot.mechanics.b1.body.frameTranslation.r[1];
//   robot.mechanics.b1.body.frameTranslation.vb[1] = robot.mechanics.b1.body.frameTranslation.va[1] + robot.mechanics.b1.body.frameTranslation.vaux[1];
//   robot.mechanics.b1.body.frameTranslation.vb[2] = robot.mechanics.b1.body.frameTranslation.va[2] + robot.mechanics.b1.body.frameTranslation.vaux[2];
//   robot.mechanics.b1.body.frameTranslation.vb[3] = robot.mechanics.b1.body.frameTranslation.va[3] + robot.mechanics.b1.body.frameTranslation.vaux[3];
//   robot.mechanics.b1.body.frameTranslation.ab[1] = robot.mechanics.b1.body.frameTranslation.aa[1] + (robot.mechanics.b1.body.frameTranslation.za[2] * robot.mechanics.b1.body.frameTranslation.r[3] + ((-robot.mechanics.b1.body.frameTranslation.za[3] * robot.mechanics.b1.body.frameTranslation.r[2]) + (robot.mechanics.b1.body.frameTranslation.wa[2] * robot.mechanics.b1.body.frameTranslation.vaux[3] + (-robot.mechanics.b1.body.frameTranslation.wa[3] * robot.mechanics.b1.body.frameTranslation.vaux[2]))));
//   robot.mechanics.b1.body.frameTranslation.ab[2] = robot.mechanics.b1.body.frameTranslation.aa[2] + (robot.mechanics.b1.body.frameTranslation.za[3] * robot.mechanics.b1.body.frameTranslation.r[1] + ((-robot.mechanics.b1.body.frameTranslation.za[1] * robot.mechanics.b1.body.frameTranslation.r[3]) + (robot.mechanics.b1.body.frameTranslation.wa[3] * robot.mechanics.b1.body.frameTranslation.vaux[1] + (-robot.mechanics.b1.body.frameTranslation.wa[1] * robot.mechanics.b1.body.frameTranslation.vaux[3]))));
//   robot.mechanics.b1.body.frameTranslation.ab[3] = robot.mechanics.b1.body.frameTranslation.aa[3] + (robot.mechanics.b1.body.frameTranslation.za[1] * robot.mechanics.b1.body.frameTranslation.r[2] + ((-robot.mechanics.b1.body.frameTranslation.za[2] * robot.mechanics.b1.body.frameTranslation.r[1]) + (robot.mechanics.b1.body.frameTranslation.wa[1] * robot.mechanics.b1.body.frameTranslation.vaux[2] + (-robot.mechanics.b1.body.frameTranslation.wa[2] * robot.mechanics.b1.body.frameTranslation.vaux[1]))));
//   robot.mechanics.b1.body.frameTranslation.fa[1] = robot.mechanics.b1.body.frameTranslation.fb[1];
//   robot.mechanics.b1.body.frameTranslation.fa[2] = robot.mechanics.b1.body.frameTranslation.fb[2];
//   robot.mechanics.b1.body.frameTranslation.fa[3] = robot.mechanics.b1.body.frameTranslation.fb[3];
//   robot.mechanics.b1.body.frameTranslation.ta[1] = robot.mechanics.b1.body.frameTranslation.tb[1] + (robot.mechanics.b1.body.frameTranslation.r[2] * robot.mechanics.b1.body.frameTranslation.fa[3] + (-robot.mechanics.b1.body.frameTranslation.r[3] * robot.mechanics.b1.body.frameTranslation.fa[2]));
//   robot.mechanics.b1.body.frameTranslation.ta[2] = robot.mechanics.b1.body.frameTranslation.tb[2] + (robot.mechanics.b1.body.frameTranslation.r[3] * robot.mechanics.b1.body.frameTranslation.fa[1] + (-robot.mechanics.b1.body.frameTranslation.r[1] * robot.mechanics.b1.body.frameTranslation.fa[3]));
//   robot.mechanics.b1.body.frameTranslation.ta[3] = robot.mechanics.b1.body.frameTranslation.tb[3] + (robot.mechanics.b1.body.frameTranslation.r[1] * robot.mechanics.b1.body.frameTranslation.fa[2] + (-robot.mechanics.b1.body.frameTranslation.r[2] * robot.mechanics.b1.body.frameTranslation.fa[1]));
//   robot.mechanics.b1.body.body.fa[1] = robot.mechanics.b1.body.body.m * (robot.mechanics.b1.body.body.aa[1] + (robot.mechanics.b1.body.body.za[2] * robot.mechanics.b1.body.body.rCM[3] + ((-robot.mechanics.b1.body.body.za[3] * robot.mechanics.b1.body.body.rCM[2]) + (robot.mechanics.b1.body.body.wa[2] * (robot.mechanics.b1.body.body.wa[1] * robot.mechanics.b1.body.body.rCM[2] - robot.mechanics.b1.body.body.wa[2] * robot.mechanics.b1.body.body.rCM[1]) + (-robot.mechanics.b1.body.body.wa[3] * (robot.mechanics.b1.body.body.wa[3] * robot.mechanics.b1.body.body.rCM[1] - robot.mechanics.b1.body.body.wa[1] * robot.mechanics.b1.body.body.rCM[3]))))));
//   robot.mechanics.b1.body.body.fa[2] = robot.mechanics.b1.body.body.m * (robot.mechanics.b1.body.body.aa[2] + (robot.mechanics.b1.body.body.za[3] * robot.mechanics.b1.body.body.rCM[1] + ((-robot.mechanics.b1.body.body.za[1] * robot.mechanics.b1.body.body.rCM[3]) + (robot.mechanics.b1.body.body.wa[3] * (robot.mechanics.b1.body.body.wa[2] * robot.mechanics.b1.body.body.rCM[3] - robot.mechanics.b1.body.body.wa[3] * robot.mechanics.b1.body.body.rCM[2]) + (-robot.mechanics.b1.body.body.wa[1] * (robot.mechanics.b1.body.body.wa[1] * robot.mechanics.b1.body.body.rCM[2] - robot.mechanics.b1.body.body.wa[2] * robot.mechanics.b1.body.body.rCM[1]))))));
//   robot.mechanics.b1.body.body.fa[3] = robot.mechanics.b1.body.body.m * (robot.mechanics.b1.body.body.aa[3] + (robot.mechanics.b1.body.body.za[1] * robot.mechanics.b1.body.body.rCM[2] + ((-robot.mechanics.b1.body.body.za[2] * robot.mechanics.b1.body.body.rCM[1]) + (robot.mechanics.b1.body.body.wa[1] * (robot.mechanics.b1.body.body.wa[3] * robot.mechanics.b1.body.body.rCM[1] - robot.mechanics.b1.body.body.wa[1] * robot.mechanics.b1.body.body.rCM[3]) + (-robot.mechanics.b1.body.body.wa[2] * (robot.mechanics.b1.body.body.wa[2] * robot.mechanics.b1.body.body.rCM[3] - robot.mechanics.b1.body.body.wa[3] * robot.mechanics.b1.body.body.rCM[2]))))));
//   robot.mechanics.b1.body.body.ta[1] = robot.mechanics.b1.body.body.I[1,1] * robot.mechanics.b1.body.body.za[1] + (robot.mechanics.b1.body.body.I[1,2] * robot.mechanics.b1.body.body.za[2] + (robot.mechanics.b1.body.body.I[1,3] * robot.mechanics.b1.body.body.za[3] + (robot.mechanics.b1.body.body.wa[2] * (robot.mechanics.b1.body.body.I[3,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[3,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[3,3] * robot.mechanics.b1.body.body.wa[3])) + ((-robot.mechanics.b1.body.body.wa[3] * (robot.mechanics.b1.body.body.I[2,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[2,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[2,3] * robot.mechanics.b1.body.body.wa[3]))) + (robot.mechanics.b1.body.body.rCM[2] * robot.mechanics.b1.body.body.fa[3] + (-robot.mechanics.b1.body.body.rCM[3] * robot.mechanics.b1.body.body.fa[2]))))));
//   robot.mechanics.b1.body.body.ta[2] = robot.mechanics.b1.body.body.I[2,1] * robot.mechanics.b1.body.body.za[1] + (robot.mechanics.b1.body.body.I[2,2] * robot.mechanics.b1.body.body.za[2] + (robot.mechanics.b1.body.body.I[2,3] * robot.mechanics.b1.body.body.za[3] + (robot.mechanics.b1.body.body.wa[3] * (robot.mechanics.b1.body.body.I[1,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[1,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[1,3] * robot.mechanics.b1.body.body.wa[3])) + ((-robot.mechanics.b1.body.body.wa[1] * (robot.mechanics.b1.body.body.I[3,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[3,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[3,3] * robot.mechanics.b1.body.body.wa[3]))) + (robot.mechanics.b1.body.body.rCM[3] * robot.mechanics.b1.body.body.fa[1] + (-robot.mechanics.b1.body.body.rCM[1] * robot.mechanics.b1.body.body.fa[3]))))));
//   robot.mechanics.b1.body.body.ta[3] = robot.mechanics.b1.body.body.I[3,1] * robot.mechanics.b1.body.body.za[1] + (robot.mechanics.b1.body.body.I[3,2] * robot.mechanics.b1.body.body.za[2] + (robot.mechanics.b1.body.body.I[3,3] * robot.mechanics.b1.body.body.za[3] + (robot.mechanics.b1.body.body.wa[1] * (robot.mechanics.b1.body.body.I[2,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[2,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[2,3] * robot.mechanics.b1.body.body.wa[3])) + ((-robot.mechanics.b1.body.body.wa[2] * (robot.mechanics.b1.body.body.I[1,1] * robot.mechanics.b1.body.body.wa[1] + (robot.mechanics.b1.body.body.I[1,2] * robot.mechanics.b1.body.body.wa[2] + robot.mechanics.b1.body.body.I[1,3] * robot.mechanics.b1.body.body.wa[3]))) + (robot.mechanics.b1.body.body.rCM[1] * robot.mechanics.b1.body.body.fa[2] + (-robot.mechanics.b1.body.body.rCM[2] * robot.mechanics.b1.body.body.fa[1]))))));
//   robot.mechanics.b1.body.body.m = robot.mechanics.b1.body.m;
//   robot.mechanics.b1.body.body.rCM[1] = robot.mechanics.b1.body.rCM[1];
//   robot.mechanics.b1.body.body.rCM[2] = robot.mechanics.b1.body.rCM[2];
//   robot.mechanics.b1.body.body.rCM[3] = robot.mechanics.b1.body.rCM[3];
//   robot.mechanics.b1.body.body.I[1,1] = robot.mechanics.b1.body.I11;
//   robot.mechanics.b1.body.body.I[1,2] = robot.mechanics.b1.body.I21;
//   robot.mechanics.b1.body.body.I[1,3] = robot.mechanics.b1.body.I31;
//   robot.mechanics.b1.body.body.I[2,1] = robot.mechanics.b1.body.I21;
//   robot.mechanics.b1.body.body.I[2,2] = robot.mechanics.b1.body.I22;
//   robot.mechanics.b1.body.body.I[2,3] = robot.mechanics.b1.body.I32;
//   robot.mechanics.b1.body.body.I[3,1] = robot.mechanics.b1.body.I31;
//   robot.mechanics.b1.body.body.I[3,2] = robot.mechanics.b1.body.I32;
//   robot.mechanics.b1.body.body.I[3,3] = robot.mechanics.b1.body.I33;
//   (-robot.mechanics.b1.body.frame_a.t[1]) + (robot.mechanics.b1.body.body.frame_a.t[1] + robot.mechanics.b1.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-robot.mechanics.b1.body.frame_a.t[2]) + (robot.mechanics.b1.body.body.frame_a.t[2] + robot.mechanics.b1.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-robot.mechanics.b1.body.frame_a.t[3]) + (robot.mechanics.b1.body.body.frame_a.t[3] + robot.mechanics.b1.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-robot.mechanics.b1.body.frame_a.f[1]) + (robot.mechanics.b1.body.body.frame_a.f[1] + robot.mechanics.b1.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-robot.mechanics.b1.body.frame_a.f[2]) + (robot.mechanics.b1.body.body.frame_a.f[2] + robot.mechanics.b1.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-robot.mechanics.b1.body.frame_a.f[3]) + (robot.mechanics.b1.body.body.frame_a.f[3] + robot.mechanics.b1.body.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.b1.body.frame_a.z[1] = robot.mechanics.b1.body.body.frame_a.z[1];
//   robot.mechanics.b1.body.body.frame_a.z[1] = robot.mechanics.b1.body.frameTranslation.frame_a.z[1];
//   robot.mechanics.b1.body.frame_a.z[2] = robot.mechanics.b1.body.body.frame_a.z[2];
//   robot.mechanics.b1.body.body.frame_a.z[2] = robot.mechanics.b1.body.frameTranslation.frame_a.z[2];
//   robot.mechanics.b1.body.frame_a.z[3] = robot.mechanics.b1.body.body.frame_a.z[3];
//   robot.mechanics.b1.body.body.frame_a.z[3] = robot.mechanics.b1.body.frameTranslation.frame_a.z[3];
//   robot.mechanics.b1.body.frame_a.a[1] = robot.mechanics.b1.body.body.frame_a.a[1];
//   robot.mechanics.b1.body.body.frame_a.a[1] = robot.mechanics.b1.body.frameTranslation.frame_a.a[1];
//   robot.mechanics.b1.body.frame_a.a[2] = robot.mechanics.b1.body.body.frame_a.a[2];
//   robot.mechanics.b1.body.body.frame_a.a[2] = robot.mechanics.b1.body.frameTranslation.frame_a.a[2];
//   robot.mechanics.b1.body.frame_a.a[3] = robot.mechanics.b1.body.body.frame_a.a[3];
//   robot.mechanics.b1.body.body.frame_a.a[3] = robot.mechanics.b1.body.frameTranslation.frame_a.a[3];
//   robot.mechanics.b1.body.frame_a.w[1] = robot.mechanics.b1.body.body.frame_a.w[1];
//   robot.mechanics.b1.body.body.frame_a.w[1] = robot.mechanics.b1.body.frameTranslation.frame_a.w[1];
//   robot.mechanics.b1.body.frame_a.w[2] = robot.mechanics.b1.body.body.frame_a.w[2];
//   robot.mechanics.b1.body.body.frame_a.w[2] = robot.mechanics.b1.body.frameTranslation.frame_a.w[2];
//   robot.mechanics.b1.body.frame_a.w[3] = robot.mechanics.b1.body.body.frame_a.w[3];
//   robot.mechanics.b1.body.body.frame_a.w[3] = robot.mechanics.b1.body.frameTranslation.frame_a.w[3];
//   robot.mechanics.b1.body.frame_a.v[1] = robot.mechanics.b1.body.body.frame_a.v[1];
//   robot.mechanics.b1.body.body.frame_a.v[1] = robot.mechanics.b1.body.frameTranslation.frame_a.v[1];
//   robot.mechanics.b1.body.frame_a.v[2] = robot.mechanics.b1.body.body.frame_a.v[2];
//   robot.mechanics.b1.body.body.frame_a.v[2] = robot.mechanics.b1.body.frameTranslation.frame_a.v[2];
//   robot.mechanics.b1.body.frame_a.v[3] = robot.mechanics.b1.body.body.frame_a.v[3];
//   robot.mechanics.b1.body.body.frame_a.v[3] = robot.mechanics.b1.body.frameTranslation.frame_a.v[3];
//   robot.mechanics.b1.body.frame_a.S[1,1] = robot.mechanics.b1.body.body.frame_a.S[1,1];
//   robot.mechanics.b1.body.body.frame_a.S[1,1] = robot.mechanics.b1.body.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.b1.body.frame_a.S[1,2] = robot.mechanics.b1.body.body.frame_a.S[1,2];
//   robot.mechanics.b1.body.body.frame_a.S[1,2] = robot.mechanics.b1.body.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.b1.body.frame_a.S[1,3] = robot.mechanics.b1.body.body.frame_a.S[1,3];
//   robot.mechanics.b1.body.body.frame_a.S[1,3] = robot.mechanics.b1.body.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.b1.body.frame_a.S[2,1] = robot.mechanics.b1.body.body.frame_a.S[2,1];
//   robot.mechanics.b1.body.body.frame_a.S[2,1] = robot.mechanics.b1.body.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.b1.body.frame_a.S[2,2] = robot.mechanics.b1.body.body.frame_a.S[2,2];
//   robot.mechanics.b1.body.body.frame_a.S[2,2] = robot.mechanics.b1.body.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.b1.body.frame_a.S[2,3] = robot.mechanics.b1.body.body.frame_a.S[2,3];
//   robot.mechanics.b1.body.body.frame_a.S[2,3] = robot.mechanics.b1.body.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.b1.body.frame_a.S[3,1] = robot.mechanics.b1.body.body.frame_a.S[3,1];
//   robot.mechanics.b1.body.body.frame_a.S[3,1] = robot.mechanics.b1.body.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.b1.body.frame_a.S[3,2] = robot.mechanics.b1.body.body.frame_a.S[3,2];
//   robot.mechanics.b1.body.body.frame_a.S[3,2] = robot.mechanics.b1.body.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.b1.body.frame_a.S[3,3] = robot.mechanics.b1.body.body.frame_a.S[3,3];
//   robot.mechanics.b1.body.body.frame_a.S[3,3] = robot.mechanics.b1.body.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.b1.body.frame_a.r0[1] = robot.mechanics.b1.body.body.frame_a.r0[1];
//   robot.mechanics.b1.body.body.frame_a.r0[1] = robot.mechanics.b1.body.frameTranslation.frame_a.r0[1];
//   robot.mechanics.b1.body.frame_a.r0[2] = robot.mechanics.b1.body.body.frame_a.r0[2];
//   robot.mechanics.b1.body.body.frame_a.r0[2] = robot.mechanics.b1.body.frameTranslation.frame_a.r0[2];
//   robot.mechanics.b1.body.frame_a.r0[3] = robot.mechanics.b1.body.body.frame_a.r0[3];
//   robot.mechanics.b1.body.body.frame_a.r0[3] = robot.mechanics.b1.body.frameTranslation.frame_a.r0[3];
//   (-robot.mechanics.b1.body.frame_b.t[1]) + robot.mechanics.b1.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b1.body.frame_b.t[2]) + robot.mechanics.b1.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b1.body.frame_b.t[3]) + robot.mechanics.b1.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b1.body.frame_b.f[1]) + robot.mechanics.b1.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b1.body.frame_b.f[2]) + robot.mechanics.b1.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b1.body.frame_b.f[3]) + robot.mechanics.b1.body.frameTranslation.frame_b.f[3] = 0.0;
//   robot.mechanics.b1.body.frame_b.z[1] = robot.mechanics.b1.body.frameTranslation.frame_b.z[1];
//   robot.mechanics.b1.body.frame_b.z[2] = robot.mechanics.b1.body.frameTranslation.frame_b.z[2];
//   robot.mechanics.b1.body.frame_b.z[3] = robot.mechanics.b1.body.frameTranslation.frame_b.z[3];
//   robot.mechanics.b1.body.frame_b.a[1] = robot.mechanics.b1.body.frameTranslation.frame_b.a[1];
//   robot.mechanics.b1.body.frame_b.a[2] = robot.mechanics.b1.body.frameTranslation.frame_b.a[2];
//   robot.mechanics.b1.body.frame_b.a[3] = robot.mechanics.b1.body.frameTranslation.frame_b.a[3];
//   robot.mechanics.b1.body.frame_b.w[1] = robot.mechanics.b1.body.frameTranslation.frame_b.w[1];
//   robot.mechanics.b1.body.frame_b.w[2] = robot.mechanics.b1.body.frameTranslation.frame_b.w[2];
//   robot.mechanics.b1.body.frame_b.w[3] = robot.mechanics.b1.body.frameTranslation.frame_b.w[3];
//   robot.mechanics.b1.body.frame_b.v[1] = robot.mechanics.b1.body.frameTranslation.frame_b.v[1];
//   robot.mechanics.b1.body.frame_b.v[2] = robot.mechanics.b1.body.frameTranslation.frame_b.v[2];
//   robot.mechanics.b1.body.frame_b.v[3] = robot.mechanics.b1.body.frameTranslation.frame_b.v[3];
//   robot.mechanics.b1.body.frame_b.S[1,1] = robot.mechanics.b1.body.frameTranslation.frame_b.S[1,1];
//   robot.mechanics.b1.body.frame_b.S[1,2] = robot.mechanics.b1.body.frameTranslation.frame_b.S[1,2];
//   robot.mechanics.b1.body.frame_b.S[1,3] = robot.mechanics.b1.body.frameTranslation.frame_b.S[1,3];
//   robot.mechanics.b1.body.frame_b.S[2,1] = robot.mechanics.b1.body.frameTranslation.frame_b.S[2,1];
//   robot.mechanics.b1.body.frame_b.S[2,2] = robot.mechanics.b1.body.frameTranslation.frame_b.S[2,2];
//   robot.mechanics.b1.body.frame_b.S[2,3] = robot.mechanics.b1.body.frameTranslation.frame_b.S[2,3];
//   robot.mechanics.b1.body.frame_b.S[3,1] = robot.mechanics.b1.body.frameTranslation.frame_b.S[3,1];
//   robot.mechanics.b1.body.frame_b.S[3,2] = robot.mechanics.b1.body.frameTranslation.frame_b.S[3,2];
//   robot.mechanics.b1.body.frame_b.S[3,3] = robot.mechanics.b1.body.frameTranslation.frame_b.S[3,3];
//   robot.mechanics.b1.body.frame_b.r0[1] = robot.mechanics.b1.body.frameTranslation.frame_b.r0[1];
//   robot.mechanics.b1.body.frame_b.r0[2] = robot.mechanics.b1.body.frameTranslation.frame_b.r0[2];
//   robot.mechanics.b1.body.frame_b.r0[3] = robot.mechanics.b1.body.frameTranslation.frame_b.r0[3];
//   robot.mechanics.b1.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b1.vis.vis.mcShape.shapeType);
//   robot.mechanics.b1.vis.vis.mcShape.Material = PackMaterial(robot.mechanics.b1.vis.vis.mcShape.color[1] / 255.0,robot.mechanics.b1.vis.vis.mcShape.color[2] / 255.0,robot.mechanics.b1.vis.vis.mcShape.color[3] / 255.0,robot.mechanics.b1.vis.vis.mcShape.specularCoefficient);
//   robot.mechanics.b1.vis.vis.mcShape.Extra = robot.mechanics.b1.vis.vis.mcShape.extra;
//   robot.mechanics.b1.vis.vis.mcShape.size[1] = robot.mechanics.b1.vis.vis.mcShape.length;
//   robot.mechanics.b1.vis.vis.mcShape.size[2] = robot.mechanics.b1.vis.vis.mcShape.width;
//   robot.mechanics.b1.vis.vis.mcShape.size[3] = robot.mechanics.b1.vis.vis.mcShape.height;
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b1.vis.vis.mcShape.e_x[1];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b1.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.e_y[3] - robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b1.vis.vis.mcShape.e_x[2];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b1.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b1.vis.vis.mcShape.e_x[3] * robot.mechanics.b1.vis.vis.mcShape.e_y[1] - robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b1.vis.vis.mcShape.e_x[3];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b1.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b1.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b1.vis.vis.mcShape.e_x[1] * robot.mechanics.b1.vis.vis.mcShape.e_y[2] - robot.mechanics.b1.vis.vis.mcShape.e_x[2] * robot.mechanics.b1.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b1.vis.vis.mcShape.rxvisobj[1] = robot.mechanics.b1.vis.vis.mcShape.S[1,1] * robot.mechanics.b1.vis.vis.mcShape.e_x[1] + (robot.mechanics.b1.vis.vis.mcShape.S[1,2] * robot.mechanics.b1.vis.vis.mcShape.e_x[2] + robot.mechanics.b1.vis.vis.mcShape.S[1,3] * robot.mechanics.b1.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b1.vis.vis.mcShape.rxvisobj[2] = robot.mechanics.b1.vis.vis.mcShape.S[2,1] * robot.mechanics.b1.vis.vis.mcShape.e_x[1] + (robot.mechanics.b1.vis.vis.mcShape.S[2,2] * robot.mechanics.b1.vis.vis.mcShape.e_x[2] + robot.mechanics.b1.vis.vis.mcShape.S[2,3] * robot.mechanics.b1.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b1.vis.vis.mcShape.rxvisobj[3] = robot.mechanics.b1.vis.vis.mcShape.S[3,1] * robot.mechanics.b1.vis.vis.mcShape.e_x[1] + (robot.mechanics.b1.vis.vis.mcShape.S[3,2] * robot.mechanics.b1.vis.vis.mcShape.e_x[2] + robot.mechanics.b1.vis.vis.mcShape.S[3,3] * robot.mechanics.b1.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b1.vis.vis.mcShape.ryvisobj[1] = robot.mechanics.b1.vis.vis.mcShape.S[1,1] * robot.mechanics.b1.vis.vis.mcShape.e_y[1] + (robot.mechanics.b1.vis.vis.mcShape.S[1,2] * robot.mechanics.b1.vis.vis.mcShape.e_y[2] + robot.mechanics.b1.vis.vis.mcShape.S[1,3] * robot.mechanics.b1.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b1.vis.vis.mcShape.ryvisobj[2] = robot.mechanics.b1.vis.vis.mcShape.S[2,1] * robot.mechanics.b1.vis.vis.mcShape.e_y[1] + (robot.mechanics.b1.vis.vis.mcShape.S[2,2] * robot.mechanics.b1.vis.vis.mcShape.e_y[2] + robot.mechanics.b1.vis.vis.mcShape.S[2,3] * robot.mechanics.b1.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b1.vis.vis.mcShape.ryvisobj[3] = robot.mechanics.b1.vis.vis.mcShape.S[3,1] * robot.mechanics.b1.vis.vis.mcShape.e_y[1] + (robot.mechanics.b1.vis.vis.mcShape.S[3,2] * robot.mechanics.b1.vis.vis.mcShape.e_y[2] + robot.mechanics.b1.vis.vis.mcShape.S[3,3] * robot.mechanics.b1.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b1.vis.vis.mcShape.rvisobj[1] = robot.mechanics.b1.vis.vis.mcShape.r[1] + (robot.mechanics.b1.vis.vis.mcShape.S[1,1] * robot.mechanics.b1.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b1.vis.vis.mcShape.S[1,2] * robot.mechanics.b1.vis.vis.mcShape.r_shape[2] + robot.mechanics.b1.vis.vis.mcShape.S[1,3] * robot.mechanics.b1.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b1.vis.vis.mcShape.rvisobj[2] = robot.mechanics.b1.vis.vis.mcShape.r[2] + (robot.mechanics.b1.vis.vis.mcShape.S[2,1] * robot.mechanics.b1.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b1.vis.vis.mcShape.S[2,2] * robot.mechanics.b1.vis.vis.mcShape.r_shape[2] + robot.mechanics.b1.vis.vis.mcShape.S[2,3] * robot.mechanics.b1.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b1.vis.vis.mcShape.rvisobj[3] = robot.mechanics.b1.vis.vis.mcShape.r[3] + (robot.mechanics.b1.vis.vis.mcShape.S[3,1] * robot.mechanics.b1.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b1.vis.vis.mcShape.S[3,2] * robot.mechanics.b1.vis.vis.mcShape.r_shape[2] + robot.mechanics.b1.vis.vis.mcShape.S[3,3] * robot.mechanics.b1.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b1.vis.vis.mcShape.e_x[1] = robot.mechanics.b1.vis.vis.nLength[1];
//   robot.mechanics.b1.vis.vis.mcShape.e_x[2] = robot.mechanics.b1.vis.vis.nLength[2];
//   robot.mechanics.b1.vis.vis.mcShape.e_x[3] = robot.mechanics.b1.vis.vis.nLength[3];
//   robot.mechanics.b1.vis.vis.mcShape.e_y[1] = robot.mechanics.b1.vis.vis.nWidth[1];
//   robot.mechanics.b1.vis.vis.mcShape.e_y[2] = robot.mechanics.b1.vis.vis.nWidth[2];
//   robot.mechanics.b1.vis.vis.mcShape.e_y[3] = robot.mechanics.b1.vis.vis.nWidth[3];
//   robot.mechanics.b1.vis.vis.mcShape.e_z[1] = robot.mechanics.b1.vis.vis.nHeight[1];
//   robot.mechanics.b1.vis.vis.mcShape.e_z[2] = robot.mechanics.b1.vis.vis.nHeight[2];
//   robot.mechanics.b1.vis.vis.mcShape.e_z[3] = robot.mechanics.b1.vis.vis.nHeight[3];
//   robot.mechanics.b1.vis.vis.S[1,1] = robot.mechanics.b1.vis.Sa[1,1];
//   robot.mechanics.b1.vis.vis.S[1,2] = robot.mechanics.b1.vis.Sa[1,2];
//   robot.mechanics.b1.vis.vis.S[1,3] = robot.mechanics.b1.vis.Sa[1,3];
//   robot.mechanics.b1.vis.vis.S[2,1] = robot.mechanics.b1.vis.Sa[2,1];
//   robot.mechanics.b1.vis.vis.S[2,2] = robot.mechanics.b1.vis.Sa[2,2];
//   robot.mechanics.b1.vis.vis.S[2,3] = robot.mechanics.b1.vis.Sa[2,3];
//   robot.mechanics.b1.vis.vis.S[3,1] = robot.mechanics.b1.vis.Sa[3,1];
//   robot.mechanics.b1.vis.vis.S[3,2] = robot.mechanics.b1.vis.Sa[3,2];
//   robot.mechanics.b1.vis.vis.S[3,3] = robot.mechanics.b1.vis.Sa[3,3];
//   robot.mechanics.b1.vis.vis.r[1] = robot.mechanics.b1.vis.r0a[1];
//   robot.mechanics.b1.vis.vis.r[2] = robot.mechanics.b1.vis.r0a[2];
//   robot.mechanics.b1.vis.vis.r[3] = robot.mechanics.b1.vis.r0a[3];
//   robot.mechanics.b1.vis.vis.nLength[1] = robot.mechanics.b1.vis.nLength[1];
//   robot.mechanics.b1.vis.vis.nLength[2] = robot.mechanics.b1.vis.nLength[2];
//   robot.mechanics.b1.vis.vis.nLength[3] = robot.mechanics.b1.vis.nLength[3];
//   robot.mechanics.b1.vis.vis.nWidth[1] = robot.mechanics.b1.vis.nWidth[1];
//   robot.mechanics.b1.vis.vis.nWidth[2] = robot.mechanics.b1.vis.nWidth[2];
//   robot.mechanics.b1.vis.vis.nWidth[3] = robot.mechanics.b1.vis.nWidth[3];
//   robot.mechanics.b1.vis.vis.nHeight[1] = robot.mechanics.b1.vis.nHeight[1];
//   robot.mechanics.b1.vis.vis.nHeight[2] = robot.mechanics.b1.vis.nHeight[2];
//   robot.mechanics.b1.vis.vis.nHeight[3] = robot.mechanics.b1.vis.nHeight[3];
//   robot.mechanics.b1.vis.fa[1] = 0.0;
//   robot.mechanics.b1.vis.fa[2] = 0.0;
//   robot.mechanics.b1.vis.fa[3] = 0.0;
//   robot.mechanics.b1.vis.ta[1] = 0.0;
//   robot.mechanics.b1.vis.ta[2] = 0.0;
//   robot.mechanics.b1.vis.ta[3] = 0.0;
//   robot.mechanics.b1.vis.frame_a.t[1] + ((-robot.mechanics.b1.frame_a.t[1]) + robot.mechanics.b1.body.frame_a.t[1]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.t[2] + ((-robot.mechanics.b1.frame_a.t[2]) + robot.mechanics.b1.body.frame_a.t[2]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.t[3] + ((-robot.mechanics.b1.frame_a.t[3]) + robot.mechanics.b1.body.frame_a.t[3]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.f[1] + ((-robot.mechanics.b1.frame_a.f[1]) + robot.mechanics.b1.body.frame_a.f[1]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.f[2] + ((-robot.mechanics.b1.frame_a.f[2]) + robot.mechanics.b1.body.frame_a.f[2]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.f[3] + ((-robot.mechanics.b1.frame_a.f[3]) + robot.mechanics.b1.body.frame_a.f[3]) = 0.0;
//   robot.mechanics.b1.vis.frame_a.z[1] = robot.mechanics.b1.frame_a.z[1];
//   robot.mechanics.b1.frame_a.z[1] = robot.mechanics.b1.body.frame_a.z[1];
//   robot.mechanics.b1.vis.frame_a.z[2] = robot.mechanics.b1.frame_a.z[2];
//   robot.mechanics.b1.frame_a.z[2] = robot.mechanics.b1.body.frame_a.z[2];
//   robot.mechanics.b1.vis.frame_a.z[3] = robot.mechanics.b1.frame_a.z[3];
//   robot.mechanics.b1.frame_a.z[3] = robot.mechanics.b1.body.frame_a.z[3];
//   robot.mechanics.b1.vis.frame_a.a[1] = robot.mechanics.b1.frame_a.a[1];
//   robot.mechanics.b1.frame_a.a[1] = robot.mechanics.b1.body.frame_a.a[1];
//   robot.mechanics.b1.vis.frame_a.a[2] = robot.mechanics.b1.frame_a.a[2];
//   robot.mechanics.b1.frame_a.a[2] = robot.mechanics.b1.body.frame_a.a[2];
//   robot.mechanics.b1.vis.frame_a.a[3] = robot.mechanics.b1.frame_a.a[3];
//   robot.mechanics.b1.frame_a.a[3] = robot.mechanics.b1.body.frame_a.a[3];
//   robot.mechanics.b1.vis.frame_a.w[1] = robot.mechanics.b1.frame_a.w[1];
//   robot.mechanics.b1.frame_a.w[1] = robot.mechanics.b1.body.frame_a.w[1];
//   robot.mechanics.b1.vis.frame_a.w[2] = robot.mechanics.b1.frame_a.w[2];
//   robot.mechanics.b1.frame_a.w[2] = robot.mechanics.b1.body.frame_a.w[2];
//   robot.mechanics.b1.vis.frame_a.w[3] = robot.mechanics.b1.frame_a.w[3];
//   robot.mechanics.b1.frame_a.w[3] = robot.mechanics.b1.body.frame_a.w[3];
//   robot.mechanics.b1.vis.frame_a.v[1] = robot.mechanics.b1.frame_a.v[1];
//   robot.mechanics.b1.frame_a.v[1] = robot.mechanics.b1.body.frame_a.v[1];
//   robot.mechanics.b1.vis.frame_a.v[2] = robot.mechanics.b1.frame_a.v[2];
//   robot.mechanics.b1.frame_a.v[2] = robot.mechanics.b1.body.frame_a.v[2];
//   robot.mechanics.b1.vis.frame_a.v[3] = robot.mechanics.b1.frame_a.v[3];
//   robot.mechanics.b1.frame_a.v[3] = robot.mechanics.b1.body.frame_a.v[3];
//   robot.mechanics.b1.vis.frame_a.S[1,1] = robot.mechanics.b1.frame_a.S[1,1];
//   robot.mechanics.b1.frame_a.S[1,1] = robot.mechanics.b1.body.frame_a.S[1,1];
//   robot.mechanics.b1.vis.frame_a.S[1,2] = robot.mechanics.b1.frame_a.S[1,2];
//   robot.mechanics.b1.frame_a.S[1,2] = robot.mechanics.b1.body.frame_a.S[1,2];
//   robot.mechanics.b1.vis.frame_a.S[1,3] = robot.mechanics.b1.frame_a.S[1,3];
//   robot.mechanics.b1.frame_a.S[1,3] = robot.mechanics.b1.body.frame_a.S[1,3];
//   robot.mechanics.b1.vis.frame_a.S[2,1] = robot.mechanics.b1.frame_a.S[2,1];
//   robot.mechanics.b1.frame_a.S[2,1] = robot.mechanics.b1.body.frame_a.S[2,1];
//   robot.mechanics.b1.vis.frame_a.S[2,2] = robot.mechanics.b1.frame_a.S[2,2];
//   robot.mechanics.b1.frame_a.S[2,2] = robot.mechanics.b1.body.frame_a.S[2,2];
//   robot.mechanics.b1.vis.frame_a.S[2,3] = robot.mechanics.b1.frame_a.S[2,3];
//   robot.mechanics.b1.frame_a.S[2,3] = robot.mechanics.b1.body.frame_a.S[2,3];
//   robot.mechanics.b1.vis.frame_a.S[3,1] = robot.mechanics.b1.frame_a.S[3,1];
//   robot.mechanics.b1.frame_a.S[3,1] = robot.mechanics.b1.body.frame_a.S[3,1];
//   robot.mechanics.b1.vis.frame_a.S[3,2] = robot.mechanics.b1.frame_a.S[3,2];
//   robot.mechanics.b1.frame_a.S[3,2] = robot.mechanics.b1.body.frame_a.S[3,2];
//   robot.mechanics.b1.vis.frame_a.S[3,3] = robot.mechanics.b1.frame_a.S[3,3];
//   robot.mechanics.b1.frame_a.S[3,3] = robot.mechanics.b1.body.frame_a.S[3,3];
//   robot.mechanics.b1.vis.frame_a.r0[1] = robot.mechanics.b1.frame_a.r0[1];
//   robot.mechanics.b1.frame_a.r0[1] = robot.mechanics.b1.body.frame_a.r0[1];
//   robot.mechanics.b1.vis.frame_a.r0[2] = robot.mechanics.b1.frame_a.r0[2];
//   robot.mechanics.b1.frame_a.r0[2] = robot.mechanics.b1.body.frame_a.r0[2];
//   robot.mechanics.b1.vis.frame_a.r0[3] = robot.mechanics.b1.frame_a.r0[3];
//   robot.mechanics.b1.frame_a.r0[3] = robot.mechanics.b1.body.frame_a.r0[3];
//   (-robot.mechanics.b1.frame_b.t[1]) + robot.mechanics.b1.body.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b1.frame_b.t[2]) + robot.mechanics.b1.body.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b1.frame_b.t[3]) + robot.mechanics.b1.body.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b1.frame_b.f[1]) + robot.mechanics.b1.body.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b1.frame_b.f[2]) + robot.mechanics.b1.body.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b1.frame_b.f[3]) + robot.mechanics.b1.body.frame_b.f[3] = 0.0;
//   robot.mechanics.b1.frame_b.z[1] = robot.mechanics.b1.body.frame_b.z[1];
//   robot.mechanics.b1.frame_b.z[2] = robot.mechanics.b1.body.frame_b.z[2];
//   robot.mechanics.b1.frame_b.z[3] = robot.mechanics.b1.body.frame_b.z[3];
//   robot.mechanics.b1.frame_b.a[1] = robot.mechanics.b1.body.frame_b.a[1];
//   robot.mechanics.b1.frame_b.a[2] = robot.mechanics.b1.body.frame_b.a[2];
//   robot.mechanics.b1.frame_b.a[3] = robot.mechanics.b1.body.frame_b.a[3];
//   robot.mechanics.b1.frame_b.w[1] = robot.mechanics.b1.body.frame_b.w[1];
//   robot.mechanics.b1.frame_b.w[2] = robot.mechanics.b1.body.frame_b.w[2];
//   robot.mechanics.b1.frame_b.w[3] = robot.mechanics.b1.body.frame_b.w[3];
//   robot.mechanics.b1.frame_b.v[1] = robot.mechanics.b1.body.frame_b.v[1];
//   robot.mechanics.b1.frame_b.v[2] = robot.mechanics.b1.body.frame_b.v[2];
//   robot.mechanics.b1.frame_b.v[3] = robot.mechanics.b1.body.frame_b.v[3];
//   robot.mechanics.b1.frame_b.S[1,1] = robot.mechanics.b1.body.frame_b.S[1,1];
//   robot.mechanics.b1.frame_b.S[1,2] = robot.mechanics.b1.body.frame_b.S[1,2];
//   robot.mechanics.b1.frame_b.S[1,3] = robot.mechanics.b1.body.frame_b.S[1,3];
//   robot.mechanics.b1.frame_b.S[2,1] = robot.mechanics.b1.body.frame_b.S[2,1];
//   robot.mechanics.b1.frame_b.S[2,2] = robot.mechanics.b1.body.frame_b.S[2,2];
//   robot.mechanics.b1.frame_b.S[2,3] = robot.mechanics.b1.body.frame_b.S[2,3];
//   robot.mechanics.b1.frame_b.S[3,1] = robot.mechanics.b1.body.frame_b.S[3,1];
//   robot.mechanics.b1.frame_b.S[3,2] = robot.mechanics.b1.body.frame_b.S[3,2];
//   robot.mechanics.b1.frame_b.S[3,3] = robot.mechanics.b1.body.frame_b.S[3,3];
//   robot.mechanics.b1.frame_b.r0[1] = robot.mechanics.b1.body.frame_b.r0[1];
//   robot.mechanics.b1.frame_b.r0[2] = robot.mechanics.b1.body.frame_b.r0[2];
//   robot.mechanics.b1.frame_b.r0[3] = robot.mechanics.b1.body.frame_b.r0[3];
//   robot.mechanics.b2.body.frameTranslation.Sb[1,1] = robot.mechanics.b2.body.frameTranslation.Sa[1,1];
//   robot.mechanics.b2.body.frameTranslation.Sb[1,2] = robot.mechanics.b2.body.frameTranslation.Sa[1,2];
//   robot.mechanics.b2.body.frameTranslation.Sb[1,3] = robot.mechanics.b2.body.frameTranslation.Sa[1,3];
//   robot.mechanics.b2.body.frameTranslation.Sb[2,1] = robot.mechanics.b2.body.frameTranslation.Sa[2,1];
//   robot.mechanics.b2.body.frameTranslation.Sb[2,2] = robot.mechanics.b2.body.frameTranslation.Sa[2,2];
//   robot.mechanics.b2.body.frameTranslation.Sb[2,3] = robot.mechanics.b2.body.frameTranslation.Sa[2,3];
//   robot.mechanics.b2.body.frameTranslation.Sb[3,1] = robot.mechanics.b2.body.frameTranslation.Sa[3,1];
//   robot.mechanics.b2.body.frameTranslation.Sb[3,2] = robot.mechanics.b2.body.frameTranslation.Sa[3,2];
//   robot.mechanics.b2.body.frameTranslation.Sb[3,3] = robot.mechanics.b2.body.frameTranslation.Sa[3,3];
//   robot.mechanics.b2.body.frameTranslation.wb[1] = robot.mechanics.b2.body.frameTranslation.wa[1];
//   robot.mechanics.b2.body.frameTranslation.wb[2] = robot.mechanics.b2.body.frameTranslation.wa[2];
//   robot.mechanics.b2.body.frameTranslation.wb[3] = robot.mechanics.b2.body.frameTranslation.wa[3];
//   robot.mechanics.b2.body.frameTranslation.zb[1] = robot.mechanics.b2.body.frameTranslation.za[1];
//   robot.mechanics.b2.body.frameTranslation.zb[2] = robot.mechanics.b2.body.frameTranslation.za[2];
//   robot.mechanics.b2.body.frameTranslation.zb[3] = robot.mechanics.b2.body.frameTranslation.za[3];
//   robot.mechanics.b2.body.frameTranslation.r0b[1] = robot.mechanics.b2.body.frameTranslation.r0a[1] + (robot.mechanics.b2.body.frameTranslation.Sa[1,1] * robot.mechanics.b2.body.frameTranslation.r[1] + (robot.mechanics.b2.body.frameTranslation.Sa[1,2] * robot.mechanics.b2.body.frameTranslation.r[2] + robot.mechanics.b2.body.frameTranslation.Sa[1,3] * robot.mechanics.b2.body.frameTranslation.r[3]));
//   robot.mechanics.b2.body.frameTranslation.r0b[2] = robot.mechanics.b2.body.frameTranslation.r0a[2] + (robot.mechanics.b2.body.frameTranslation.Sa[2,1] * robot.mechanics.b2.body.frameTranslation.r[1] + (robot.mechanics.b2.body.frameTranslation.Sa[2,2] * robot.mechanics.b2.body.frameTranslation.r[2] + robot.mechanics.b2.body.frameTranslation.Sa[2,3] * robot.mechanics.b2.body.frameTranslation.r[3]));
//   robot.mechanics.b2.body.frameTranslation.r0b[3] = robot.mechanics.b2.body.frameTranslation.r0a[3] + (robot.mechanics.b2.body.frameTranslation.Sa[3,1] * robot.mechanics.b2.body.frameTranslation.r[1] + (robot.mechanics.b2.body.frameTranslation.Sa[3,2] * robot.mechanics.b2.body.frameTranslation.r[2] + robot.mechanics.b2.body.frameTranslation.Sa[3,3] * robot.mechanics.b2.body.frameTranslation.r[3]));
//   robot.mechanics.b2.body.frameTranslation.vaux[1] = robot.mechanics.b2.body.frameTranslation.wa[2] * robot.mechanics.b2.body.frameTranslation.r[3] - robot.mechanics.b2.body.frameTranslation.wa[3] * robot.mechanics.b2.body.frameTranslation.r[2];
//   robot.mechanics.b2.body.frameTranslation.vaux[2] = robot.mechanics.b2.body.frameTranslation.wa[3] * robot.mechanics.b2.body.frameTranslation.r[1] - robot.mechanics.b2.body.frameTranslation.wa[1] * robot.mechanics.b2.body.frameTranslation.r[3];
//   robot.mechanics.b2.body.frameTranslation.vaux[3] = robot.mechanics.b2.body.frameTranslation.wa[1] * robot.mechanics.b2.body.frameTranslation.r[2] - robot.mechanics.b2.body.frameTranslation.wa[2] * robot.mechanics.b2.body.frameTranslation.r[1];
//   robot.mechanics.b2.body.frameTranslation.vb[1] = robot.mechanics.b2.body.frameTranslation.va[1] + robot.mechanics.b2.body.frameTranslation.vaux[1];
//   robot.mechanics.b2.body.frameTranslation.vb[2] = robot.mechanics.b2.body.frameTranslation.va[2] + robot.mechanics.b2.body.frameTranslation.vaux[2];
//   robot.mechanics.b2.body.frameTranslation.vb[3] = robot.mechanics.b2.body.frameTranslation.va[3] + robot.mechanics.b2.body.frameTranslation.vaux[3];
//   robot.mechanics.b2.body.frameTranslation.ab[1] = robot.mechanics.b2.body.frameTranslation.aa[1] + (robot.mechanics.b2.body.frameTranslation.za[2] * robot.mechanics.b2.body.frameTranslation.r[3] + ((-robot.mechanics.b2.body.frameTranslation.za[3] * robot.mechanics.b2.body.frameTranslation.r[2]) + (robot.mechanics.b2.body.frameTranslation.wa[2] * robot.mechanics.b2.body.frameTranslation.vaux[3] + (-robot.mechanics.b2.body.frameTranslation.wa[3] * robot.mechanics.b2.body.frameTranslation.vaux[2]))));
//   robot.mechanics.b2.body.frameTranslation.ab[2] = robot.mechanics.b2.body.frameTranslation.aa[2] + (robot.mechanics.b2.body.frameTranslation.za[3] * robot.mechanics.b2.body.frameTranslation.r[1] + ((-robot.mechanics.b2.body.frameTranslation.za[1] * robot.mechanics.b2.body.frameTranslation.r[3]) + (robot.mechanics.b2.body.frameTranslation.wa[3] * robot.mechanics.b2.body.frameTranslation.vaux[1] + (-robot.mechanics.b2.body.frameTranslation.wa[1] * robot.mechanics.b2.body.frameTranslation.vaux[3]))));
//   robot.mechanics.b2.body.frameTranslation.ab[3] = robot.mechanics.b2.body.frameTranslation.aa[3] + (robot.mechanics.b2.body.frameTranslation.za[1] * robot.mechanics.b2.body.frameTranslation.r[2] + ((-robot.mechanics.b2.body.frameTranslation.za[2] * robot.mechanics.b2.body.frameTranslation.r[1]) + (robot.mechanics.b2.body.frameTranslation.wa[1] * robot.mechanics.b2.body.frameTranslation.vaux[2] + (-robot.mechanics.b2.body.frameTranslation.wa[2] * robot.mechanics.b2.body.frameTranslation.vaux[1]))));
//   robot.mechanics.b2.body.frameTranslation.fa[1] = robot.mechanics.b2.body.frameTranslation.fb[1];
//   robot.mechanics.b2.body.frameTranslation.fa[2] = robot.mechanics.b2.body.frameTranslation.fb[2];
//   robot.mechanics.b2.body.frameTranslation.fa[3] = robot.mechanics.b2.body.frameTranslation.fb[3];
//   robot.mechanics.b2.body.frameTranslation.ta[1] = robot.mechanics.b2.body.frameTranslation.tb[1] + (robot.mechanics.b2.body.frameTranslation.r[2] * robot.mechanics.b2.body.frameTranslation.fa[3] + (-robot.mechanics.b2.body.frameTranslation.r[3] * robot.mechanics.b2.body.frameTranslation.fa[2]));
//   robot.mechanics.b2.body.frameTranslation.ta[2] = robot.mechanics.b2.body.frameTranslation.tb[2] + (robot.mechanics.b2.body.frameTranslation.r[3] * robot.mechanics.b2.body.frameTranslation.fa[1] + (-robot.mechanics.b2.body.frameTranslation.r[1] * robot.mechanics.b2.body.frameTranslation.fa[3]));
//   robot.mechanics.b2.body.frameTranslation.ta[3] = robot.mechanics.b2.body.frameTranslation.tb[3] + (robot.mechanics.b2.body.frameTranslation.r[1] * robot.mechanics.b2.body.frameTranslation.fa[2] + (-robot.mechanics.b2.body.frameTranslation.r[2] * robot.mechanics.b2.body.frameTranslation.fa[1]));
//   robot.mechanics.b2.body.body.fa[1] = robot.mechanics.b2.body.body.m * (robot.mechanics.b2.body.body.aa[1] + (robot.mechanics.b2.body.body.za[2] * robot.mechanics.b2.body.body.rCM[3] + ((-robot.mechanics.b2.body.body.za[3] * robot.mechanics.b2.body.body.rCM[2]) + (robot.mechanics.b2.body.body.wa[2] * (robot.mechanics.b2.body.body.wa[1] * robot.mechanics.b2.body.body.rCM[2] - robot.mechanics.b2.body.body.wa[2] * robot.mechanics.b2.body.body.rCM[1]) + (-robot.mechanics.b2.body.body.wa[3] * (robot.mechanics.b2.body.body.wa[3] * robot.mechanics.b2.body.body.rCM[1] - robot.mechanics.b2.body.body.wa[1] * robot.mechanics.b2.body.body.rCM[3]))))));
//   robot.mechanics.b2.body.body.fa[2] = robot.mechanics.b2.body.body.m * (robot.mechanics.b2.body.body.aa[2] + (robot.mechanics.b2.body.body.za[3] * robot.mechanics.b2.body.body.rCM[1] + ((-robot.mechanics.b2.body.body.za[1] * robot.mechanics.b2.body.body.rCM[3]) + (robot.mechanics.b2.body.body.wa[3] * (robot.mechanics.b2.body.body.wa[2] * robot.mechanics.b2.body.body.rCM[3] - robot.mechanics.b2.body.body.wa[3] * robot.mechanics.b2.body.body.rCM[2]) + (-robot.mechanics.b2.body.body.wa[1] * (robot.mechanics.b2.body.body.wa[1] * robot.mechanics.b2.body.body.rCM[2] - robot.mechanics.b2.body.body.wa[2] * robot.mechanics.b2.body.body.rCM[1]))))));
//   robot.mechanics.b2.body.body.fa[3] = robot.mechanics.b2.body.body.m * (robot.mechanics.b2.body.body.aa[3] + (robot.mechanics.b2.body.body.za[1] * robot.mechanics.b2.body.body.rCM[2] + ((-robot.mechanics.b2.body.body.za[2] * robot.mechanics.b2.body.body.rCM[1]) + (robot.mechanics.b2.body.body.wa[1] * (robot.mechanics.b2.body.body.wa[3] * robot.mechanics.b2.body.body.rCM[1] - robot.mechanics.b2.body.body.wa[1] * robot.mechanics.b2.body.body.rCM[3]) + (-robot.mechanics.b2.body.body.wa[2] * (robot.mechanics.b2.body.body.wa[2] * robot.mechanics.b2.body.body.rCM[3] - robot.mechanics.b2.body.body.wa[3] * robot.mechanics.b2.body.body.rCM[2]))))));
//   robot.mechanics.b2.body.body.ta[1] = robot.mechanics.b2.body.body.I[1,1] * robot.mechanics.b2.body.body.za[1] + (robot.mechanics.b2.body.body.I[1,2] * robot.mechanics.b2.body.body.za[2] + (robot.mechanics.b2.body.body.I[1,3] * robot.mechanics.b2.body.body.za[3] + (robot.mechanics.b2.body.body.wa[2] * (robot.mechanics.b2.body.body.I[3,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[3,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[3,3] * robot.mechanics.b2.body.body.wa[3])) + ((-robot.mechanics.b2.body.body.wa[3] * (robot.mechanics.b2.body.body.I[2,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[2,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[2,3] * robot.mechanics.b2.body.body.wa[3]))) + (robot.mechanics.b2.body.body.rCM[2] * robot.mechanics.b2.body.body.fa[3] + (-robot.mechanics.b2.body.body.rCM[3] * robot.mechanics.b2.body.body.fa[2]))))));
//   robot.mechanics.b2.body.body.ta[2] = robot.mechanics.b2.body.body.I[2,1] * robot.mechanics.b2.body.body.za[1] + (robot.mechanics.b2.body.body.I[2,2] * robot.mechanics.b2.body.body.za[2] + (robot.mechanics.b2.body.body.I[2,3] * robot.mechanics.b2.body.body.za[3] + (robot.mechanics.b2.body.body.wa[3] * (robot.mechanics.b2.body.body.I[1,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[1,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[1,3] * robot.mechanics.b2.body.body.wa[3])) + ((-robot.mechanics.b2.body.body.wa[1] * (robot.mechanics.b2.body.body.I[3,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[3,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[3,3] * robot.mechanics.b2.body.body.wa[3]))) + (robot.mechanics.b2.body.body.rCM[3] * robot.mechanics.b2.body.body.fa[1] + (-robot.mechanics.b2.body.body.rCM[1] * robot.mechanics.b2.body.body.fa[3]))))));
//   robot.mechanics.b2.body.body.ta[3] = robot.mechanics.b2.body.body.I[3,1] * robot.mechanics.b2.body.body.za[1] + (robot.mechanics.b2.body.body.I[3,2] * robot.mechanics.b2.body.body.za[2] + (robot.mechanics.b2.body.body.I[3,3] * robot.mechanics.b2.body.body.za[3] + (robot.mechanics.b2.body.body.wa[1] * (robot.mechanics.b2.body.body.I[2,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[2,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[2,3] * robot.mechanics.b2.body.body.wa[3])) + ((-robot.mechanics.b2.body.body.wa[2] * (robot.mechanics.b2.body.body.I[1,1] * robot.mechanics.b2.body.body.wa[1] + (robot.mechanics.b2.body.body.I[1,2] * robot.mechanics.b2.body.body.wa[2] + robot.mechanics.b2.body.body.I[1,3] * robot.mechanics.b2.body.body.wa[3]))) + (robot.mechanics.b2.body.body.rCM[1] * robot.mechanics.b2.body.body.fa[2] + (-robot.mechanics.b2.body.body.rCM[2] * robot.mechanics.b2.body.body.fa[1]))))));
//   robot.mechanics.b2.body.body.m = robot.mechanics.b2.body.m;
//   robot.mechanics.b2.body.body.rCM[1] = robot.mechanics.b2.body.rCM[1];
//   robot.mechanics.b2.body.body.rCM[2] = robot.mechanics.b2.body.rCM[2];
//   robot.mechanics.b2.body.body.rCM[3] = robot.mechanics.b2.body.rCM[3];
//   robot.mechanics.b2.body.body.I[1,1] = robot.mechanics.b2.body.I11;
//   robot.mechanics.b2.body.body.I[1,2] = robot.mechanics.b2.body.I21;
//   robot.mechanics.b2.body.body.I[1,3] = robot.mechanics.b2.body.I31;
//   robot.mechanics.b2.body.body.I[2,1] = robot.mechanics.b2.body.I21;
//   robot.mechanics.b2.body.body.I[2,2] = robot.mechanics.b2.body.I22;
//   robot.mechanics.b2.body.body.I[2,3] = robot.mechanics.b2.body.I32;
//   robot.mechanics.b2.body.body.I[3,1] = robot.mechanics.b2.body.I31;
//   robot.mechanics.b2.body.body.I[3,2] = robot.mechanics.b2.body.I32;
//   robot.mechanics.b2.body.body.I[3,3] = robot.mechanics.b2.body.I33;
//   (-robot.mechanics.b2.body.frame_a.t[1]) + (robot.mechanics.b2.body.body.frame_a.t[1] + robot.mechanics.b2.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-robot.mechanics.b2.body.frame_a.t[2]) + (robot.mechanics.b2.body.body.frame_a.t[2] + robot.mechanics.b2.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-robot.mechanics.b2.body.frame_a.t[3]) + (robot.mechanics.b2.body.body.frame_a.t[3] + robot.mechanics.b2.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-robot.mechanics.b2.body.frame_a.f[1]) + (robot.mechanics.b2.body.body.frame_a.f[1] + robot.mechanics.b2.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-robot.mechanics.b2.body.frame_a.f[2]) + (robot.mechanics.b2.body.body.frame_a.f[2] + robot.mechanics.b2.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-robot.mechanics.b2.body.frame_a.f[3]) + (robot.mechanics.b2.body.body.frame_a.f[3] + robot.mechanics.b2.body.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.b2.body.frame_a.z[1] = robot.mechanics.b2.body.body.frame_a.z[1];
//   robot.mechanics.b2.body.body.frame_a.z[1] = robot.mechanics.b2.body.frameTranslation.frame_a.z[1];
//   robot.mechanics.b2.body.frame_a.z[2] = robot.mechanics.b2.body.body.frame_a.z[2];
//   robot.mechanics.b2.body.body.frame_a.z[2] = robot.mechanics.b2.body.frameTranslation.frame_a.z[2];
//   robot.mechanics.b2.body.frame_a.z[3] = robot.mechanics.b2.body.body.frame_a.z[3];
//   robot.mechanics.b2.body.body.frame_a.z[3] = robot.mechanics.b2.body.frameTranslation.frame_a.z[3];
//   robot.mechanics.b2.body.frame_a.a[1] = robot.mechanics.b2.body.body.frame_a.a[1];
//   robot.mechanics.b2.body.body.frame_a.a[1] = robot.mechanics.b2.body.frameTranslation.frame_a.a[1];
//   robot.mechanics.b2.body.frame_a.a[2] = robot.mechanics.b2.body.body.frame_a.a[2];
//   robot.mechanics.b2.body.body.frame_a.a[2] = robot.mechanics.b2.body.frameTranslation.frame_a.a[2];
//   robot.mechanics.b2.body.frame_a.a[3] = robot.mechanics.b2.body.body.frame_a.a[3];
//   robot.mechanics.b2.body.body.frame_a.a[3] = robot.mechanics.b2.body.frameTranslation.frame_a.a[3];
//   robot.mechanics.b2.body.frame_a.w[1] = robot.mechanics.b2.body.body.frame_a.w[1];
//   robot.mechanics.b2.body.body.frame_a.w[1] = robot.mechanics.b2.body.frameTranslation.frame_a.w[1];
//   robot.mechanics.b2.body.frame_a.w[2] = robot.mechanics.b2.body.body.frame_a.w[2];
//   robot.mechanics.b2.body.body.frame_a.w[2] = robot.mechanics.b2.body.frameTranslation.frame_a.w[2];
//   robot.mechanics.b2.body.frame_a.w[3] = robot.mechanics.b2.body.body.frame_a.w[3];
//   robot.mechanics.b2.body.body.frame_a.w[3] = robot.mechanics.b2.body.frameTranslation.frame_a.w[3];
//   robot.mechanics.b2.body.frame_a.v[1] = robot.mechanics.b2.body.body.frame_a.v[1];
//   robot.mechanics.b2.body.body.frame_a.v[1] = robot.mechanics.b2.body.frameTranslation.frame_a.v[1];
//   robot.mechanics.b2.body.frame_a.v[2] = robot.mechanics.b2.body.body.frame_a.v[2];
//   robot.mechanics.b2.body.body.frame_a.v[2] = robot.mechanics.b2.body.frameTranslation.frame_a.v[2];
//   robot.mechanics.b2.body.frame_a.v[3] = robot.mechanics.b2.body.body.frame_a.v[3];
//   robot.mechanics.b2.body.body.frame_a.v[3] = robot.mechanics.b2.body.frameTranslation.frame_a.v[3];
//   robot.mechanics.b2.body.frame_a.S[1,1] = robot.mechanics.b2.body.body.frame_a.S[1,1];
//   robot.mechanics.b2.body.body.frame_a.S[1,1] = robot.mechanics.b2.body.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.b2.body.frame_a.S[1,2] = robot.mechanics.b2.body.body.frame_a.S[1,2];
//   robot.mechanics.b2.body.body.frame_a.S[1,2] = robot.mechanics.b2.body.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.b2.body.frame_a.S[1,3] = robot.mechanics.b2.body.body.frame_a.S[1,3];
//   robot.mechanics.b2.body.body.frame_a.S[1,3] = robot.mechanics.b2.body.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.b2.body.frame_a.S[2,1] = robot.mechanics.b2.body.body.frame_a.S[2,1];
//   robot.mechanics.b2.body.body.frame_a.S[2,1] = robot.mechanics.b2.body.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.b2.body.frame_a.S[2,2] = robot.mechanics.b2.body.body.frame_a.S[2,2];
//   robot.mechanics.b2.body.body.frame_a.S[2,2] = robot.mechanics.b2.body.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.b2.body.frame_a.S[2,3] = robot.mechanics.b2.body.body.frame_a.S[2,3];
//   robot.mechanics.b2.body.body.frame_a.S[2,3] = robot.mechanics.b2.body.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.b2.body.frame_a.S[3,1] = robot.mechanics.b2.body.body.frame_a.S[3,1];
//   robot.mechanics.b2.body.body.frame_a.S[3,1] = robot.mechanics.b2.body.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.b2.body.frame_a.S[3,2] = robot.mechanics.b2.body.body.frame_a.S[3,2];
//   robot.mechanics.b2.body.body.frame_a.S[3,2] = robot.mechanics.b2.body.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.b2.body.frame_a.S[3,3] = robot.mechanics.b2.body.body.frame_a.S[3,3];
//   robot.mechanics.b2.body.body.frame_a.S[3,3] = robot.mechanics.b2.body.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.b2.body.frame_a.r0[1] = robot.mechanics.b2.body.body.frame_a.r0[1];
//   robot.mechanics.b2.body.body.frame_a.r0[1] = robot.mechanics.b2.body.frameTranslation.frame_a.r0[1];
//   robot.mechanics.b2.body.frame_a.r0[2] = robot.mechanics.b2.body.body.frame_a.r0[2];
//   robot.mechanics.b2.body.body.frame_a.r0[2] = robot.mechanics.b2.body.frameTranslation.frame_a.r0[2];
//   robot.mechanics.b2.body.frame_a.r0[3] = robot.mechanics.b2.body.body.frame_a.r0[3];
//   robot.mechanics.b2.body.body.frame_a.r0[3] = robot.mechanics.b2.body.frameTranslation.frame_a.r0[3];
//   (-robot.mechanics.b2.body.frame_b.t[1]) + robot.mechanics.b2.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b2.body.frame_b.t[2]) + robot.mechanics.b2.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b2.body.frame_b.t[3]) + robot.mechanics.b2.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b2.body.frame_b.f[1]) + robot.mechanics.b2.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b2.body.frame_b.f[2]) + robot.mechanics.b2.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b2.body.frame_b.f[3]) + robot.mechanics.b2.body.frameTranslation.frame_b.f[3] = 0.0;
//   robot.mechanics.b2.body.frame_b.z[1] = robot.mechanics.b2.body.frameTranslation.frame_b.z[1];
//   robot.mechanics.b2.body.frame_b.z[2] = robot.mechanics.b2.body.frameTranslation.frame_b.z[2];
//   robot.mechanics.b2.body.frame_b.z[3] = robot.mechanics.b2.body.frameTranslation.frame_b.z[3];
//   robot.mechanics.b2.body.frame_b.a[1] = robot.mechanics.b2.body.frameTranslation.frame_b.a[1];
//   robot.mechanics.b2.body.frame_b.a[2] = robot.mechanics.b2.body.frameTranslation.frame_b.a[2];
//   robot.mechanics.b2.body.frame_b.a[3] = robot.mechanics.b2.body.frameTranslation.frame_b.a[3];
//   robot.mechanics.b2.body.frame_b.w[1] = robot.mechanics.b2.body.frameTranslation.frame_b.w[1];
//   robot.mechanics.b2.body.frame_b.w[2] = robot.mechanics.b2.body.frameTranslation.frame_b.w[2];
//   robot.mechanics.b2.body.frame_b.w[3] = robot.mechanics.b2.body.frameTranslation.frame_b.w[3];
//   robot.mechanics.b2.body.frame_b.v[1] = robot.mechanics.b2.body.frameTranslation.frame_b.v[1];
//   robot.mechanics.b2.body.frame_b.v[2] = robot.mechanics.b2.body.frameTranslation.frame_b.v[2];
//   robot.mechanics.b2.body.frame_b.v[3] = robot.mechanics.b2.body.frameTranslation.frame_b.v[3];
//   robot.mechanics.b2.body.frame_b.S[1,1] = robot.mechanics.b2.body.frameTranslation.frame_b.S[1,1];
//   robot.mechanics.b2.body.frame_b.S[1,2] = robot.mechanics.b2.body.frameTranslation.frame_b.S[1,2];
//   robot.mechanics.b2.body.frame_b.S[1,3] = robot.mechanics.b2.body.frameTranslation.frame_b.S[1,3];
//   robot.mechanics.b2.body.frame_b.S[2,1] = robot.mechanics.b2.body.frameTranslation.frame_b.S[2,1];
//   robot.mechanics.b2.body.frame_b.S[2,2] = robot.mechanics.b2.body.frameTranslation.frame_b.S[2,2];
//   robot.mechanics.b2.body.frame_b.S[2,3] = robot.mechanics.b2.body.frameTranslation.frame_b.S[2,3];
//   robot.mechanics.b2.body.frame_b.S[3,1] = robot.mechanics.b2.body.frameTranslation.frame_b.S[3,1];
//   robot.mechanics.b2.body.frame_b.S[3,2] = robot.mechanics.b2.body.frameTranslation.frame_b.S[3,2];
//   robot.mechanics.b2.body.frame_b.S[3,3] = robot.mechanics.b2.body.frameTranslation.frame_b.S[3,3];
//   robot.mechanics.b2.body.frame_b.r0[1] = robot.mechanics.b2.body.frameTranslation.frame_b.r0[1];
//   robot.mechanics.b2.body.frame_b.r0[2] = robot.mechanics.b2.body.frameTranslation.frame_b.r0[2];
//   robot.mechanics.b2.body.frame_b.r0[3] = robot.mechanics.b2.body.frameTranslation.frame_b.r0[3];
//   robot.mechanics.b2.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b2.vis.vis.mcShape.shapeType);
//   robot.mechanics.b2.vis.vis.mcShape.Material = PackMaterial(robot.mechanics.b2.vis.vis.mcShape.color[1] / 255.0,robot.mechanics.b2.vis.vis.mcShape.color[2] / 255.0,robot.mechanics.b2.vis.vis.mcShape.color[3] / 255.0,robot.mechanics.b2.vis.vis.mcShape.specularCoefficient);
//   robot.mechanics.b2.vis.vis.mcShape.Extra = robot.mechanics.b2.vis.vis.mcShape.extra;
//   robot.mechanics.b2.vis.vis.mcShape.size[1] = robot.mechanics.b2.vis.vis.mcShape.length;
//   robot.mechanics.b2.vis.vis.mcShape.size[2] = robot.mechanics.b2.vis.vis.mcShape.width;
//   robot.mechanics.b2.vis.vis.mcShape.size[3] = robot.mechanics.b2.vis.vis.mcShape.height;
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b2.vis.vis.mcShape.e_x[1];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b2.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.e_y[3] - robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b2.vis.vis.mcShape.e_x[2];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b2.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b2.vis.vis.mcShape.e_x[3] * robot.mechanics.b2.vis.vis.mcShape.e_y[1] - robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b2.vis.vis.mcShape.e_x[3];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b2.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b2.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b2.vis.vis.mcShape.e_x[1] * robot.mechanics.b2.vis.vis.mcShape.e_y[2] - robot.mechanics.b2.vis.vis.mcShape.e_x[2] * robot.mechanics.b2.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b2.vis.vis.mcShape.rxvisobj[1] = robot.mechanics.b2.vis.vis.mcShape.S[1,1] * robot.mechanics.b2.vis.vis.mcShape.e_x[1] + (robot.mechanics.b2.vis.vis.mcShape.S[1,2] * robot.mechanics.b2.vis.vis.mcShape.e_x[2] + robot.mechanics.b2.vis.vis.mcShape.S[1,3] * robot.mechanics.b2.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b2.vis.vis.mcShape.rxvisobj[2] = robot.mechanics.b2.vis.vis.mcShape.S[2,1] * robot.mechanics.b2.vis.vis.mcShape.e_x[1] + (robot.mechanics.b2.vis.vis.mcShape.S[2,2] * robot.mechanics.b2.vis.vis.mcShape.e_x[2] + robot.mechanics.b2.vis.vis.mcShape.S[2,3] * robot.mechanics.b2.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b2.vis.vis.mcShape.rxvisobj[3] = robot.mechanics.b2.vis.vis.mcShape.S[3,1] * robot.mechanics.b2.vis.vis.mcShape.e_x[1] + (robot.mechanics.b2.vis.vis.mcShape.S[3,2] * robot.mechanics.b2.vis.vis.mcShape.e_x[2] + robot.mechanics.b2.vis.vis.mcShape.S[3,3] * robot.mechanics.b2.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b2.vis.vis.mcShape.ryvisobj[1] = robot.mechanics.b2.vis.vis.mcShape.S[1,1] * robot.mechanics.b2.vis.vis.mcShape.e_y[1] + (robot.mechanics.b2.vis.vis.mcShape.S[1,2] * robot.mechanics.b2.vis.vis.mcShape.e_y[2] + robot.mechanics.b2.vis.vis.mcShape.S[1,3] * robot.mechanics.b2.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b2.vis.vis.mcShape.ryvisobj[2] = robot.mechanics.b2.vis.vis.mcShape.S[2,1] * robot.mechanics.b2.vis.vis.mcShape.e_y[1] + (robot.mechanics.b2.vis.vis.mcShape.S[2,2] * robot.mechanics.b2.vis.vis.mcShape.e_y[2] + robot.mechanics.b2.vis.vis.mcShape.S[2,3] * robot.mechanics.b2.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b2.vis.vis.mcShape.ryvisobj[3] = robot.mechanics.b2.vis.vis.mcShape.S[3,1] * robot.mechanics.b2.vis.vis.mcShape.e_y[1] + (robot.mechanics.b2.vis.vis.mcShape.S[3,2] * robot.mechanics.b2.vis.vis.mcShape.e_y[2] + robot.mechanics.b2.vis.vis.mcShape.S[3,3] * robot.mechanics.b2.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b2.vis.vis.mcShape.rvisobj[1] = robot.mechanics.b2.vis.vis.mcShape.r[1] + (robot.mechanics.b2.vis.vis.mcShape.S[1,1] * robot.mechanics.b2.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b2.vis.vis.mcShape.S[1,2] * robot.mechanics.b2.vis.vis.mcShape.r_shape[2] + robot.mechanics.b2.vis.vis.mcShape.S[1,3] * robot.mechanics.b2.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b2.vis.vis.mcShape.rvisobj[2] = robot.mechanics.b2.vis.vis.mcShape.r[2] + (robot.mechanics.b2.vis.vis.mcShape.S[2,1] * robot.mechanics.b2.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b2.vis.vis.mcShape.S[2,2] * robot.mechanics.b2.vis.vis.mcShape.r_shape[2] + robot.mechanics.b2.vis.vis.mcShape.S[2,3] * robot.mechanics.b2.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b2.vis.vis.mcShape.rvisobj[3] = robot.mechanics.b2.vis.vis.mcShape.r[3] + (robot.mechanics.b2.vis.vis.mcShape.S[3,1] * robot.mechanics.b2.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b2.vis.vis.mcShape.S[3,2] * robot.mechanics.b2.vis.vis.mcShape.r_shape[2] + robot.mechanics.b2.vis.vis.mcShape.S[3,3] * robot.mechanics.b2.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b2.vis.vis.mcShape.e_x[1] = robot.mechanics.b2.vis.vis.nLength[1];
//   robot.mechanics.b2.vis.vis.mcShape.e_x[2] = robot.mechanics.b2.vis.vis.nLength[2];
//   robot.mechanics.b2.vis.vis.mcShape.e_x[3] = robot.mechanics.b2.vis.vis.nLength[3];
//   robot.mechanics.b2.vis.vis.mcShape.e_y[1] = robot.mechanics.b2.vis.vis.nWidth[1];
//   robot.mechanics.b2.vis.vis.mcShape.e_y[2] = robot.mechanics.b2.vis.vis.nWidth[2];
//   robot.mechanics.b2.vis.vis.mcShape.e_y[3] = robot.mechanics.b2.vis.vis.nWidth[3];
//   robot.mechanics.b2.vis.vis.mcShape.e_z[1] = robot.mechanics.b2.vis.vis.nHeight[1];
//   robot.mechanics.b2.vis.vis.mcShape.e_z[2] = robot.mechanics.b2.vis.vis.nHeight[2];
//   robot.mechanics.b2.vis.vis.mcShape.e_z[3] = robot.mechanics.b2.vis.vis.nHeight[3];
//   robot.mechanics.b2.vis.vis.S[1,1] = robot.mechanics.b2.vis.Sa[1,1];
//   robot.mechanics.b2.vis.vis.S[1,2] = robot.mechanics.b2.vis.Sa[1,2];
//   robot.mechanics.b2.vis.vis.S[1,3] = robot.mechanics.b2.vis.Sa[1,3];
//   robot.mechanics.b2.vis.vis.S[2,1] = robot.mechanics.b2.vis.Sa[2,1];
//   robot.mechanics.b2.vis.vis.S[2,2] = robot.mechanics.b2.vis.Sa[2,2];
//   robot.mechanics.b2.vis.vis.S[2,3] = robot.mechanics.b2.vis.Sa[2,3];
//   robot.mechanics.b2.vis.vis.S[3,1] = robot.mechanics.b2.vis.Sa[3,1];
//   robot.mechanics.b2.vis.vis.S[3,2] = robot.mechanics.b2.vis.Sa[3,2];
//   robot.mechanics.b2.vis.vis.S[3,3] = robot.mechanics.b2.vis.Sa[3,3];
//   robot.mechanics.b2.vis.vis.r[1] = robot.mechanics.b2.vis.r0a[1];
//   robot.mechanics.b2.vis.vis.r[2] = robot.mechanics.b2.vis.r0a[2];
//   robot.mechanics.b2.vis.vis.r[3] = robot.mechanics.b2.vis.r0a[3];
//   robot.mechanics.b2.vis.vis.nLength[1] = robot.mechanics.b2.vis.nLength[1];
//   robot.mechanics.b2.vis.vis.nLength[2] = robot.mechanics.b2.vis.nLength[2];
//   robot.mechanics.b2.vis.vis.nLength[3] = robot.mechanics.b2.vis.nLength[3];
//   robot.mechanics.b2.vis.vis.nWidth[1] = robot.mechanics.b2.vis.nWidth[1];
//   robot.mechanics.b2.vis.vis.nWidth[2] = robot.mechanics.b2.vis.nWidth[2];
//   robot.mechanics.b2.vis.vis.nWidth[3] = robot.mechanics.b2.vis.nWidth[3];
//   robot.mechanics.b2.vis.vis.nHeight[1] = robot.mechanics.b2.vis.nHeight[1];
//   robot.mechanics.b2.vis.vis.nHeight[2] = robot.mechanics.b2.vis.nHeight[2];
//   robot.mechanics.b2.vis.vis.nHeight[3] = robot.mechanics.b2.vis.nHeight[3];
//   robot.mechanics.b2.vis.fa[1] = 0.0;
//   robot.mechanics.b2.vis.fa[2] = 0.0;
//   robot.mechanics.b2.vis.fa[3] = 0.0;
//   robot.mechanics.b2.vis.ta[1] = 0.0;
//   robot.mechanics.b2.vis.ta[2] = 0.0;
//   robot.mechanics.b2.vis.ta[3] = 0.0;
//   robot.mechanics.b2.vis.frame_a.t[1] + ((-robot.mechanics.b2.frame_a.t[1]) + robot.mechanics.b2.body.frame_a.t[1]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.t[2] + ((-robot.mechanics.b2.frame_a.t[2]) + robot.mechanics.b2.body.frame_a.t[2]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.t[3] + ((-robot.mechanics.b2.frame_a.t[3]) + robot.mechanics.b2.body.frame_a.t[3]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.f[1] + ((-robot.mechanics.b2.frame_a.f[1]) + robot.mechanics.b2.body.frame_a.f[1]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.f[2] + ((-robot.mechanics.b2.frame_a.f[2]) + robot.mechanics.b2.body.frame_a.f[2]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.f[3] + ((-robot.mechanics.b2.frame_a.f[3]) + robot.mechanics.b2.body.frame_a.f[3]) = 0.0;
//   robot.mechanics.b2.vis.frame_a.z[1] = robot.mechanics.b2.frame_a.z[1];
//   robot.mechanics.b2.frame_a.z[1] = robot.mechanics.b2.body.frame_a.z[1];
//   robot.mechanics.b2.vis.frame_a.z[2] = robot.mechanics.b2.frame_a.z[2];
//   robot.mechanics.b2.frame_a.z[2] = robot.mechanics.b2.body.frame_a.z[2];
//   robot.mechanics.b2.vis.frame_a.z[3] = robot.mechanics.b2.frame_a.z[3];
//   robot.mechanics.b2.frame_a.z[3] = robot.mechanics.b2.body.frame_a.z[3];
//   robot.mechanics.b2.vis.frame_a.a[1] = robot.mechanics.b2.frame_a.a[1];
//   robot.mechanics.b2.frame_a.a[1] = robot.mechanics.b2.body.frame_a.a[1];
//   robot.mechanics.b2.vis.frame_a.a[2] = robot.mechanics.b2.frame_a.a[2];
//   robot.mechanics.b2.frame_a.a[2] = robot.mechanics.b2.body.frame_a.a[2];
//   robot.mechanics.b2.vis.frame_a.a[3] = robot.mechanics.b2.frame_a.a[3];
//   robot.mechanics.b2.frame_a.a[3] = robot.mechanics.b2.body.frame_a.a[3];
//   robot.mechanics.b2.vis.frame_a.w[1] = robot.mechanics.b2.frame_a.w[1];
//   robot.mechanics.b2.frame_a.w[1] = robot.mechanics.b2.body.frame_a.w[1];
//   robot.mechanics.b2.vis.frame_a.w[2] = robot.mechanics.b2.frame_a.w[2];
//   robot.mechanics.b2.frame_a.w[2] = robot.mechanics.b2.body.frame_a.w[2];
//   robot.mechanics.b2.vis.frame_a.w[3] = robot.mechanics.b2.frame_a.w[3];
//   robot.mechanics.b2.frame_a.w[3] = robot.mechanics.b2.body.frame_a.w[3];
//   robot.mechanics.b2.vis.frame_a.v[1] = robot.mechanics.b2.frame_a.v[1];
//   robot.mechanics.b2.frame_a.v[1] = robot.mechanics.b2.body.frame_a.v[1];
//   robot.mechanics.b2.vis.frame_a.v[2] = robot.mechanics.b2.frame_a.v[2];
//   robot.mechanics.b2.frame_a.v[2] = robot.mechanics.b2.body.frame_a.v[2];
//   robot.mechanics.b2.vis.frame_a.v[3] = robot.mechanics.b2.frame_a.v[3];
//   robot.mechanics.b2.frame_a.v[3] = robot.mechanics.b2.body.frame_a.v[3];
//   robot.mechanics.b2.vis.frame_a.S[1,1] = robot.mechanics.b2.frame_a.S[1,1];
//   robot.mechanics.b2.frame_a.S[1,1] = robot.mechanics.b2.body.frame_a.S[1,1];
//   robot.mechanics.b2.vis.frame_a.S[1,2] = robot.mechanics.b2.frame_a.S[1,2];
//   robot.mechanics.b2.frame_a.S[1,2] = robot.mechanics.b2.body.frame_a.S[1,2];
//   robot.mechanics.b2.vis.frame_a.S[1,3] = robot.mechanics.b2.frame_a.S[1,3];
//   robot.mechanics.b2.frame_a.S[1,3] = robot.mechanics.b2.body.frame_a.S[1,3];
//   robot.mechanics.b2.vis.frame_a.S[2,1] = robot.mechanics.b2.frame_a.S[2,1];
//   robot.mechanics.b2.frame_a.S[2,1] = robot.mechanics.b2.body.frame_a.S[2,1];
//   robot.mechanics.b2.vis.frame_a.S[2,2] = robot.mechanics.b2.frame_a.S[2,2];
//   robot.mechanics.b2.frame_a.S[2,2] = robot.mechanics.b2.body.frame_a.S[2,2];
//   robot.mechanics.b2.vis.frame_a.S[2,3] = robot.mechanics.b2.frame_a.S[2,3];
//   robot.mechanics.b2.frame_a.S[2,3] = robot.mechanics.b2.body.frame_a.S[2,3];
//   robot.mechanics.b2.vis.frame_a.S[3,1] = robot.mechanics.b2.frame_a.S[3,1];
//   robot.mechanics.b2.frame_a.S[3,1] = robot.mechanics.b2.body.frame_a.S[3,1];
//   robot.mechanics.b2.vis.frame_a.S[3,2] = robot.mechanics.b2.frame_a.S[3,2];
//   robot.mechanics.b2.frame_a.S[3,2] = robot.mechanics.b2.body.frame_a.S[3,2];
//   robot.mechanics.b2.vis.frame_a.S[3,3] = robot.mechanics.b2.frame_a.S[3,3];
//   robot.mechanics.b2.frame_a.S[3,3] = robot.mechanics.b2.body.frame_a.S[3,3];
//   robot.mechanics.b2.vis.frame_a.r0[1] = robot.mechanics.b2.frame_a.r0[1];
//   robot.mechanics.b2.frame_a.r0[1] = robot.mechanics.b2.body.frame_a.r0[1];
//   robot.mechanics.b2.vis.frame_a.r0[2] = robot.mechanics.b2.frame_a.r0[2];
//   robot.mechanics.b2.frame_a.r0[2] = robot.mechanics.b2.body.frame_a.r0[2];
//   robot.mechanics.b2.vis.frame_a.r0[3] = robot.mechanics.b2.frame_a.r0[3];
//   robot.mechanics.b2.frame_a.r0[3] = robot.mechanics.b2.body.frame_a.r0[3];
//   (-robot.mechanics.b2.frame_b.t[1]) + robot.mechanics.b2.body.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b2.frame_b.t[2]) + robot.mechanics.b2.body.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b2.frame_b.t[3]) + robot.mechanics.b2.body.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b2.frame_b.f[1]) + robot.mechanics.b2.body.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b2.frame_b.f[2]) + robot.mechanics.b2.body.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b2.frame_b.f[3]) + robot.mechanics.b2.body.frame_b.f[3] = 0.0;
//   robot.mechanics.b2.frame_b.z[1] = robot.mechanics.b2.body.frame_b.z[1];
//   robot.mechanics.b2.frame_b.z[2] = robot.mechanics.b2.body.frame_b.z[2];
//   robot.mechanics.b2.frame_b.z[3] = robot.mechanics.b2.body.frame_b.z[3];
//   robot.mechanics.b2.frame_b.a[1] = robot.mechanics.b2.body.frame_b.a[1];
//   robot.mechanics.b2.frame_b.a[2] = robot.mechanics.b2.body.frame_b.a[2];
//   robot.mechanics.b2.frame_b.a[3] = robot.mechanics.b2.body.frame_b.a[3];
//   robot.mechanics.b2.frame_b.w[1] = robot.mechanics.b2.body.frame_b.w[1];
//   robot.mechanics.b2.frame_b.w[2] = robot.mechanics.b2.body.frame_b.w[2];
//   robot.mechanics.b2.frame_b.w[3] = robot.mechanics.b2.body.frame_b.w[3];
//   robot.mechanics.b2.frame_b.v[1] = robot.mechanics.b2.body.frame_b.v[1];
//   robot.mechanics.b2.frame_b.v[2] = robot.mechanics.b2.body.frame_b.v[2];
//   robot.mechanics.b2.frame_b.v[3] = robot.mechanics.b2.body.frame_b.v[3];
//   robot.mechanics.b2.frame_b.S[1,1] = robot.mechanics.b2.body.frame_b.S[1,1];
//   robot.mechanics.b2.frame_b.S[1,2] = robot.mechanics.b2.body.frame_b.S[1,2];
//   robot.mechanics.b2.frame_b.S[1,3] = robot.mechanics.b2.body.frame_b.S[1,3];
//   robot.mechanics.b2.frame_b.S[2,1] = robot.mechanics.b2.body.frame_b.S[2,1];
//   robot.mechanics.b2.frame_b.S[2,2] = robot.mechanics.b2.body.frame_b.S[2,2];
//   robot.mechanics.b2.frame_b.S[2,3] = robot.mechanics.b2.body.frame_b.S[2,3];
//   robot.mechanics.b2.frame_b.S[3,1] = robot.mechanics.b2.body.frame_b.S[3,1];
//   robot.mechanics.b2.frame_b.S[3,2] = robot.mechanics.b2.body.frame_b.S[3,2];
//   robot.mechanics.b2.frame_b.S[3,3] = robot.mechanics.b2.body.frame_b.S[3,3];
//   robot.mechanics.b2.frame_b.r0[1] = robot.mechanics.b2.body.frame_b.r0[1];
//   robot.mechanics.b2.frame_b.r0[2] = robot.mechanics.b2.body.frame_b.r0[2];
//   robot.mechanics.b2.frame_b.r0[3] = robot.mechanics.b2.body.frame_b.r0[3];
//   robot.mechanics.b3.body.frameTranslation.Sb[1,1] = robot.mechanics.b3.body.frameTranslation.Sa[1,1];
//   robot.mechanics.b3.body.frameTranslation.Sb[1,2] = robot.mechanics.b3.body.frameTranslation.Sa[1,2];
//   robot.mechanics.b3.body.frameTranslation.Sb[1,3] = robot.mechanics.b3.body.frameTranslation.Sa[1,3];
//   robot.mechanics.b3.body.frameTranslation.Sb[2,1] = robot.mechanics.b3.body.frameTranslation.Sa[2,1];
//   robot.mechanics.b3.body.frameTranslation.Sb[2,2] = robot.mechanics.b3.body.frameTranslation.Sa[2,2];
//   robot.mechanics.b3.body.frameTranslation.Sb[2,3] = robot.mechanics.b3.body.frameTranslation.Sa[2,3];
//   robot.mechanics.b3.body.frameTranslation.Sb[3,1] = robot.mechanics.b3.body.frameTranslation.Sa[3,1];
//   robot.mechanics.b3.body.frameTranslation.Sb[3,2] = robot.mechanics.b3.body.frameTranslation.Sa[3,2];
//   robot.mechanics.b3.body.frameTranslation.Sb[3,3] = robot.mechanics.b3.body.frameTranslation.Sa[3,3];
//   robot.mechanics.b3.body.frameTranslation.wb[1] = robot.mechanics.b3.body.frameTranslation.wa[1];
//   robot.mechanics.b3.body.frameTranslation.wb[2] = robot.mechanics.b3.body.frameTranslation.wa[2];
//   robot.mechanics.b3.body.frameTranslation.wb[3] = robot.mechanics.b3.body.frameTranslation.wa[3];
//   robot.mechanics.b3.body.frameTranslation.zb[1] = robot.mechanics.b3.body.frameTranslation.za[1];
//   robot.mechanics.b3.body.frameTranslation.zb[2] = robot.mechanics.b3.body.frameTranslation.za[2];
//   robot.mechanics.b3.body.frameTranslation.zb[3] = robot.mechanics.b3.body.frameTranslation.za[3];
//   robot.mechanics.b3.body.frameTranslation.r0b[1] = robot.mechanics.b3.body.frameTranslation.r0a[1] + (robot.mechanics.b3.body.frameTranslation.Sa[1,1] * robot.mechanics.b3.body.frameTranslation.r[1] + (robot.mechanics.b3.body.frameTranslation.Sa[1,2] * robot.mechanics.b3.body.frameTranslation.r[2] + robot.mechanics.b3.body.frameTranslation.Sa[1,3] * robot.mechanics.b3.body.frameTranslation.r[3]));
//   robot.mechanics.b3.body.frameTranslation.r0b[2] = robot.mechanics.b3.body.frameTranslation.r0a[2] + (robot.mechanics.b3.body.frameTranslation.Sa[2,1] * robot.mechanics.b3.body.frameTranslation.r[1] + (robot.mechanics.b3.body.frameTranslation.Sa[2,2] * robot.mechanics.b3.body.frameTranslation.r[2] + robot.mechanics.b3.body.frameTranslation.Sa[2,3] * robot.mechanics.b3.body.frameTranslation.r[3]));
//   robot.mechanics.b3.body.frameTranslation.r0b[3] = robot.mechanics.b3.body.frameTranslation.r0a[3] + (robot.mechanics.b3.body.frameTranslation.Sa[3,1] * robot.mechanics.b3.body.frameTranslation.r[1] + (robot.mechanics.b3.body.frameTranslation.Sa[3,2] * robot.mechanics.b3.body.frameTranslation.r[2] + robot.mechanics.b3.body.frameTranslation.Sa[3,3] * robot.mechanics.b3.body.frameTranslation.r[3]));
//   robot.mechanics.b3.body.frameTranslation.vaux[1] = robot.mechanics.b3.body.frameTranslation.wa[2] * robot.mechanics.b3.body.frameTranslation.r[3] - robot.mechanics.b3.body.frameTranslation.wa[3] * robot.mechanics.b3.body.frameTranslation.r[2];
//   robot.mechanics.b3.body.frameTranslation.vaux[2] = robot.mechanics.b3.body.frameTranslation.wa[3] * robot.mechanics.b3.body.frameTranslation.r[1] - robot.mechanics.b3.body.frameTranslation.wa[1] * robot.mechanics.b3.body.frameTranslation.r[3];
//   robot.mechanics.b3.body.frameTranslation.vaux[3] = robot.mechanics.b3.body.frameTranslation.wa[1] * robot.mechanics.b3.body.frameTranslation.r[2] - robot.mechanics.b3.body.frameTranslation.wa[2] * robot.mechanics.b3.body.frameTranslation.r[1];
//   robot.mechanics.b3.body.frameTranslation.vb[1] = robot.mechanics.b3.body.frameTranslation.va[1] + robot.mechanics.b3.body.frameTranslation.vaux[1];
//   robot.mechanics.b3.body.frameTranslation.vb[2] = robot.mechanics.b3.body.frameTranslation.va[2] + robot.mechanics.b3.body.frameTranslation.vaux[2];
//   robot.mechanics.b3.body.frameTranslation.vb[3] = robot.mechanics.b3.body.frameTranslation.va[3] + robot.mechanics.b3.body.frameTranslation.vaux[3];
//   robot.mechanics.b3.body.frameTranslation.ab[1] = robot.mechanics.b3.body.frameTranslation.aa[1] + (robot.mechanics.b3.body.frameTranslation.za[2] * robot.mechanics.b3.body.frameTranslation.r[3] + ((-robot.mechanics.b3.body.frameTranslation.za[3] * robot.mechanics.b3.body.frameTranslation.r[2]) + (robot.mechanics.b3.body.frameTranslation.wa[2] * robot.mechanics.b3.body.frameTranslation.vaux[3] + (-robot.mechanics.b3.body.frameTranslation.wa[3] * robot.mechanics.b3.body.frameTranslation.vaux[2]))));
//   robot.mechanics.b3.body.frameTranslation.ab[2] = robot.mechanics.b3.body.frameTranslation.aa[2] + (robot.mechanics.b3.body.frameTranslation.za[3] * robot.mechanics.b3.body.frameTranslation.r[1] + ((-robot.mechanics.b3.body.frameTranslation.za[1] * robot.mechanics.b3.body.frameTranslation.r[3]) + (robot.mechanics.b3.body.frameTranslation.wa[3] * robot.mechanics.b3.body.frameTranslation.vaux[1] + (-robot.mechanics.b3.body.frameTranslation.wa[1] * robot.mechanics.b3.body.frameTranslation.vaux[3]))));
//   robot.mechanics.b3.body.frameTranslation.ab[3] = robot.mechanics.b3.body.frameTranslation.aa[3] + (robot.mechanics.b3.body.frameTranslation.za[1] * robot.mechanics.b3.body.frameTranslation.r[2] + ((-robot.mechanics.b3.body.frameTranslation.za[2] * robot.mechanics.b3.body.frameTranslation.r[1]) + (robot.mechanics.b3.body.frameTranslation.wa[1] * robot.mechanics.b3.body.frameTranslation.vaux[2] + (-robot.mechanics.b3.body.frameTranslation.wa[2] * robot.mechanics.b3.body.frameTranslation.vaux[1]))));
//   robot.mechanics.b3.body.frameTranslation.fa[1] = robot.mechanics.b3.body.frameTranslation.fb[1];
//   robot.mechanics.b3.body.frameTranslation.fa[2] = robot.mechanics.b3.body.frameTranslation.fb[2];
//   robot.mechanics.b3.body.frameTranslation.fa[3] = robot.mechanics.b3.body.frameTranslation.fb[3];
//   robot.mechanics.b3.body.frameTranslation.ta[1] = robot.mechanics.b3.body.frameTranslation.tb[1] + (robot.mechanics.b3.body.frameTranslation.r[2] * robot.mechanics.b3.body.frameTranslation.fa[3] + (-robot.mechanics.b3.body.frameTranslation.r[3] * robot.mechanics.b3.body.frameTranslation.fa[2]));
//   robot.mechanics.b3.body.frameTranslation.ta[2] = robot.mechanics.b3.body.frameTranslation.tb[2] + (robot.mechanics.b3.body.frameTranslation.r[3] * robot.mechanics.b3.body.frameTranslation.fa[1] + (-robot.mechanics.b3.body.frameTranslation.r[1] * robot.mechanics.b3.body.frameTranslation.fa[3]));
//   robot.mechanics.b3.body.frameTranslation.ta[3] = robot.mechanics.b3.body.frameTranslation.tb[3] + (robot.mechanics.b3.body.frameTranslation.r[1] * robot.mechanics.b3.body.frameTranslation.fa[2] + (-robot.mechanics.b3.body.frameTranslation.r[2] * robot.mechanics.b3.body.frameTranslation.fa[1]));
//   robot.mechanics.b3.body.body.fa[1] = robot.mechanics.b3.body.body.m * (robot.mechanics.b3.body.body.aa[1] + (robot.mechanics.b3.body.body.za[2] * robot.mechanics.b3.body.body.rCM[3] + ((-robot.mechanics.b3.body.body.za[3] * robot.mechanics.b3.body.body.rCM[2]) + (robot.mechanics.b3.body.body.wa[2] * (robot.mechanics.b3.body.body.wa[1] * robot.mechanics.b3.body.body.rCM[2] - robot.mechanics.b3.body.body.wa[2] * robot.mechanics.b3.body.body.rCM[1]) + (-robot.mechanics.b3.body.body.wa[3] * (robot.mechanics.b3.body.body.wa[3] * robot.mechanics.b3.body.body.rCM[1] - robot.mechanics.b3.body.body.wa[1] * robot.mechanics.b3.body.body.rCM[3]))))));
//   robot.mechanics.b3.body.body.fa[2] = robot.mechanics.b3.body.body.m * (robot.mechanics.b3.body.body.aa[2] + (robot.mechanics.b3.body.body.za[3] * robot.mechanics.b3.body.body.rCM[1] + ((-robot.mechanics.b3.body.body.za[1] * robot.mechanics.b3.body.body.rCM[3]) + (robot.mechanics.b3.body.body.wa[3] * (robot.mechanics.b3.body.body.wa[2] * robot.mechanics.b3.body.body.rCM[3] - robot.mechanics.b3.body.body.wa[3] * robot.mechanics.b3.body.body.rCM[2]) + (-robot.mechanics.b3.body.body.wa[1] * (robot.mechanics.b3.body.body.wa[1] * robot.mechanics.b3.body.body.rCM[2] - robot.mechanics.b3.body.body.wa[2] * robot.mechanics.b3.body.body.rCM[1]))))));
//   robot.mechanics.b3.body.body.fa[3] = robot.mechanics.b3.body.body.m * (robot.mechanics.b3.body.body.aa[3] + (robot.mechanics.b3.body.body.za[1] * robot.mechanics.b3.body.body.rCM[2] + ((-robot.mechanics.b3.body.body.za[2] * robot.mechanics.b3.body.body.rCM[1]) + (robot.mechanics.b3.body.body.wa[1] * (robot.mechanics.b3.body.body.wa[3] * robot.mechanics.b3.body.body.rCM[1] - robot.mechanics.b3.body.body.wa[1] * robot.mechanics.b3.body.body.rCM[3]) + (-robot.mechanics.b3.body.body.wa[2] * (robot.mechanics.b3.body.body.wa[2] * robot.mechanics.b3.body.body.rCM[3] - robot.mechanics.b3.body.body.wa[3] * robot.mechanics.b3.body.body.rCM[2]))))));
//   robot.mechanics.b3.body.body.ta[1] = robot.mechanics.b3.body.body.I[1,1] * robot.mechanics.b3.body.body.za[1] + (robot.mechanics.b3.body.body.I[1,2] * robot.mechanics.b3.body.body.za[2] + (robot.mechanics.b3.body.body.I[1,3] * robot.mechanics.b3.body.body.za[3] + (robot.mechanics.b3.body.body.wa[2] * (robot.mechanics.b3.body.body.I[3,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[3,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[3,3] * robot.mechanics.b3.body.body.wa[3])) + ((-robot.mechanics.b3.body.body.wa[3] * (robot.mechanics.b3.body.body.I[2,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[2,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[2,3] * robot.mechanics.b3.body.body.wa[3]))) + (robot.mechanics.b3.body.body.rCM[2] * robot.mechanics.b3.body.body.fa[3] + (-robot.mechanics.b3.body.body.rCM[3] * robot.mechanics.b3.body.body.fa[2]))))));
//   robot.mechanics.b3.body.body.ta[2] = robot.mechanics.b3.body.body.I[2,1] * robot.mechanics.b3.body.body.za[1] + (robot.mechanics.b3.body.body.I[2,2] * robot.mechanics.b3.body.body.za[2] + (robot.mechanics.b3.body.body.I[2,3] * robot.mechanics.b3.body.body.za[3] + (robot.mechanics.b3.body.body.wa[3] * (robot.mechanics.b3.body.body.I[1,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[1,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[1,3] * robot.mechanics.b3.body.body.wa[3])) + ((-robot.mechanics.b3.body.body.wa[1] * (robot.mechanics.b3.body.body.I[3,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[3,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[3,3] * robot.mechanics.b3.body.body.wa[3]))) + (robot.mechanics.b3.body.body.rCM[3] * robot.mechanics.b3.body.body.fa[1] + (-robot.mechanics.b3.body.body.rCM[1] * robot.mechanics.b3.body.body.fa[3]))))));
//   robot.mechanics.b3.body.body.ta[3] = robot.mechanics.b3.body.body.I[3,1] * robot.mechanics.b3.body.body.za[1] + (robot.mechanics.b3.body.body.I[3,2] * robot.mechanics.b3.body.body.za[2] + (robot.mechanics.b3.body.body.I[3,3] * robot.mechanics.b3.body.body.za[3] + (robot.mechanics.b3.body.body.wa[1] * (robot.mechanics.b3.body.body.I[2,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[2,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[2,3] * robot.mechanics.b3.body.body.wa[3])) + ((-robot.mechanics.b3.body.body.wa[2] * (robot.mechanics.b3.body.body.I[1,1] * robot.mechanics.b3.body.body.wa[1] + (robot.mechanics.b3.body.body.I[1,2] * robot.mechanics.b3.body.body.wa[2] + robot.mechanics.b3.body.body.I[1,3] * robot.mechanics.b3.body.body.wa[3]))) + (robot.mechanics.b3.body.body.rCM[1] * robot.mechanics.b3.body.body.fa[2] + (-robot.mechanics.b3.body.body.rCM[2] * robot.mechanics.b3.body.body.fa[1]))))));
//   robot.mechanics.b3.body.body.m = robot.mechanics.b3.body.m;
//   robot.mechanics.b3.body.body.rCM[1] = robot.mechanics.b3.body.rCM[1];
//   robot.mechanics.b3.body.body.rCM[2] = robot.mechanics.b3.body.rCM[2];
//   robot.mechanics.b3.body.body.rCM[3] = robot.mechanics.b3.body.rCM[3];
//   robot.mechanics.b3.body.body.I[1,1] = robot.mechanics.b3.body.I11;
//   robot.mechanics.b3.body.body.I[1,2] = robot.mechanics.b3.body.I21;
//   robot.mechanics.b3.body.body.I[1,3] = robot.mechanics.b3.body.I31;
//   robot.mechanics.b3.body.body.I[2,1] = robot.mechanics.b3.body.I21;
//   robot.mechanics.b3.body.body.I[2,2] = robot.mechanics.b3.body.I22;
//   robot.mechanics.b3.body.body.I[2,3] = robot.mechanics.b3.body.I32;
//   robot.mechanics.b3.body.body.I[3,1] = robot.mechanics.b3.body.I31;
//   robot.mechanics.b3.body.body.I[3,2] = robot.mechanics.b3.body.I32;
//   robot.mechanics.b3.body.body.I[3,3] = robot.mechanics.b3.body.I33;
//   (-robot.mechanics.b3.body.frame_a.t[1]) + (robot.mechanics.b3.body.body.frame_a.t[1] + robot.mechanics.b3.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-robot.mechanics.b3.body.frame_a.t[2]) + (robot.mechanics.b3.body.body.frame_a.t[2] + robot.mechanics.b3.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-robot.mechanics.b3.body.frame_a.t[3]) + (robot.mechanics.b3.body.body.frame_a.t[3] + robot.mechanics.b3.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-robot.mechanics.b3.body.frame_a.f[1]) + (robot.mechanics.b3.body.body.frame_a.f[1] + robot.mechanics.b3.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-robot.mechanics.b3.body.frame_a.f[2]) + (robot.mechanics.b3.body.body.frame_a.f[2] + robot.mechanics.b3.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-robot.mechanics.b3.body.frame_a.f[3]) + (robot.mechanics.b3.body.body.frame_a.f[3] + robot.mechanics.b3.body.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.b3.body.frame_a.z[1] = robot.mechanics.b3.body.body.frame_a.z[1];
//   robot.mechanics.b3.body.body.frame_a.z[1] = robot.mechanics.b3.body.frameTranslation.frame_a.z[1];
//   robot.mechanics.b3.body.frame_a.z[2] = robot.mechanics.b3.body.body.frame_a.z[2];
//   robot.mechanics.b3.body.body.frame_a.z[2] = robot.mechanics.b3.body.frameTranslation.frame_a.z[2];
//   robot.mechanics.b3.body.frame_a.z[3] = robot.mechanics.b3.body.body.frame_a.z[3];
//   robot.mechanics.b3.body.body.frame_a.z[3] = robot.mechanics.b3.body.frameTranslation.frame_a.z[3];
//   robot.mechanics.b3.body.frame_a.a[1] = robot.mechanics.b3.body.body.frame_a.a[1];
//   robot.mechanics.b3.body.body.frame_a.a[1] = robot.mechanics.b3.body.frameTranslation.frame_a.a[1];
//   robot.mechanics.b3.body.frame_a.a[2] = robot.mechanics.b3.body.body.frame_a.a[2];
//   robot.mechanics.b3.body.body.frame_a.a[2] = robot.mechanics.b3.body.frameTranslation.frame_a.a[2];
//   robot.mechanics.b3.body.frame_a.a[3] = robot.mechanics.b3.body.body.frame_a.a[3];
//   robot.mechanics.b3.body.body.frame_a.a[3] = robot.mechanics.b3.body.frameTranslation.frame_a.a[3];
//   robot.mechanics.b3.body.frame_a.w[1] = robot.mechanics.b3.body.body.frame_a.w[1];
//   robot.mechanics.b3.body.body.frame_a.w[1] = robot.mechanics.b3.body.frameTranslation.frame_a.w[1];
//   robot.mechanics.b3.body.frame_a.w[2] = robot.mechanics.b3.body.body.frame_a.w[2];
//   robot.mechanics.b3.body.body.frame_a.w[2] = robot.mechanics.b3.body.frameTranslation.frame_a.w[2];
//   robot.mechanics.b3.body.frame_a.w[3] = robot.mechanics.b3.body.body.frame_a.w[3];
//   robot.mechanics.b3.body.body.frame_a.w[3] = robot.mechanics.b3.body.frameTranslation.frame_a.w[3];
//   robot.mechanics.b3.body.frame_a.v[1] = robot.mechanics.b3.body.body.frame_a.v[1];
//   robot.mechanics.b3.body.body.frame_a.v[1] = robot.mechanics.b3.body.frameTranslation.frame_a.v[1];
//   robot.mechanics.b3.body.frame_a.v[2] = robot.mechanics.b3.body.body.frame_a.v[2];
//   robot.mechanics.b3.body.body.frame_a.v[2] = robot.mechanics.b3.body.frameTranslation.frame_a.v[2];
//   robot.mechanics.b3.body.frame_a.v[3] = robot.mechanics.b3.body.body.frame_a.v[3];
//   robot.mechanics.b3.body.body.frame_a.v[3] = robot.mechanics.b3.body.frameTranslation.frame_a.v[3];
//   robot.mechanics.b3.body.frame_a.S[1,1] = robot.mechanics.b3.body.body.frame_a.S[1,1];
//   robot.mechanics.b3.body.body.frame_a.S[1,1] = robot.mechanics.b3.body.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.b3.body.frame_a.S[1,2] = robot.mechanics.b3.body.body.frame_a.S[1,2];
//   robot.mechanics.b3.body.body.frame_a.S[1,2] = robot.mechanics.b3.body.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.b3.body.frame_a.S[1,3] = robot.mechanics.b3.body.body.frame_a.S[1,3];
//   robot.mechanics.b3.body.body.frame_a.S[1,3] = robot.mechanics.b3.body.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.b3.body.frame_a.S[2,1] = robot.mechanics.b3.body.body.frame_a.S[2,1];
//   robot.mechanics.b3.body.body.frame_a.S[2,1] = robot.mechanics.b3.body.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.b3.body.frame_a.S[2,2] = robot.mechanics.b3.body.body.frame_a.S[2,2];
//   robot.mechanics.b3.body.body.frame_a.S[2,2] = robot.mechanics.b3.body.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.b3.body.frame_a.S[2,3] = robot.mechanics.b3.body.body.frame_a.S[2,3];
//   robot.mechanics.b3.body.body.frame_a.S[2,3] = robot.mechanics.b3.body.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.b3.body.frame_a.S[3,1] = robot.mechanics.b3.body.body.frame_a.S[3,1];
//   robot.mechanics.b3.body.body.frame_a.S[3,1] = robot.mechanics.b3.body.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.b3.body.frame_a.S[3,2] = robot.mechanics.b3.body.body.frame_a.S[3,2];
//   robot.mechanics.b3.body.body.frame_a.S[3,2] = robot.mechanics.b3.body.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.b3.body.frame_a.S[3,3] = robot.mechanics.b3.body.body.frame_a.S[3,3];
//   robot.mechanics.b3.body.body.frame_a.S[3,3] = robot.mechanics.b3.body.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.b3.body.frame_a.r0[1] = robot.mechanics.b3.body.body.frame_a.r0[1];
//   robot.mechanics.b3.body.body.frame_a.r0[1] = robot.mechanics.b3.body.frameTranslation.frame_a.r0[1];
//   robot.mechanics.b3.body.frame_a.r0[2] = robot.mechanics.b3.body.body.frame_a.r0[2];
//   robot.mechanics.b3.body.body.frame_a.r0[2] = robot.mechanics.b3.body.frameTranslation.frame_a.r0[2];
//   robot.mechanics.b3.body.frame_a.r0[3] = robot.mechanics.b3.body.body.frame_a.r0[3];
//   robot.mechanics.b3.body.body.frame_a.r0[3] = robot.mechanics.b3.body.frameTranslation.frame_a.r0[3];
//   (-robot.mechanics.b3.body.frame_b.t[1]) + robot.mechanics.b3.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b3.body.frame_b.t[2]) + robot.mechanics.b3.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b3.body.frame_b.t[3]) + robot.mechanics.b3.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b3.body.frame_b.f[1]) + robot.mechanics.b3.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b3.body.frame_b.f[2]) + robot.mechanics.b3.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b3.body.frame_b.f[3]) + robot.mechanics.b3.body.frameTranslation.frame_b.f[3] = 0.0;
//   robot.mechanics.b3.body.frame_b.z[1] = robot.mechanics.b3.body.frameTranslation.frame_b.z[1];
//   robot.mechanics.b3.body.frame_b.z[2] = robot.mechanics.b3.body.frameTranslation.frame_b.z[2];
//   robot.mechanics.b3.body.frame_b.z[3] = robot.mechanics.b3.body.frameTranslation.frame_b.z[3];
//   robot.mechanics.b3.body.frame_b.a[1] = robot.mechanics.b3.body.frameTranslation.frame_b.a[1];
//   robot.mechanics.b3.body.frame_b.a[2] = robot.mechanics.b3.body.frameTranslation.frame_b.a[2];
//   robot.mechanics.b3.body.frame_b.a[3] = robot.mechanics.b3.body.frameTranslation.frame_b.a[3];
//   robot.mechanics.b3.body.frame_b.w[1] = robot.mechanics.b3.body.frameTranslation.frame_b.w[1];
//   robot.mechanics.b3.body.frame_b.w[2] = robot.mechanics.b3.body.frameTranslation.frame_b.w[2];
//   robot.mechanics.b3.body.frame_b.w[3] = robot.mechanics.b3.body.frameTranslation.frame_b.w[3];
//   robot.mechanics.b3.body.frame_b.v[1] = robot.mechanics.b3.body.frameTranslation.frame_b.v[1];
//   robot.mechanics.b3.body.frame_b.v[2] = robot.mechanics.b3.body.frameTranslation.frame_b.v[2];
//   robot.mechanics.b3.body.frame_b.v[3] = robot.mechanics.b3.body.frameTranslation.frame_b.v[3];
//   robot.mechanics.b3.body.frame_b.S[1,1] = robot.mechanics.b3.body.frameTranslation.frame_b.S[1,1];
//   robot.mechanics.b3.body.frame_b.S[1,2] = robot.mechanics.b3.body.frameTranslation.frame_b.S[1,2];
//   robot.mechanics.b3.body.frame_b.S[1,3] = robot.mechanics.b3.body.frameTranslation.frame_b.S[1,3];
//   robot.mechanics.b3.body.frame_b.S[2,1] = robot.mechanics.b3.body.frameTranslation.frame_b.S[2,1];
//   robot.mechanics.b3.body.frame_b.S[2,2] = robot.mechanics.b3.body.frameTranslation.frame_b.S[2,2];
//   robot.mechanics.b3.body.frame_b.S[2,3] = robot.mechanics.b3.body.frameTranslation.frame_b.S[2,3];
//   robot.mechanics.b3.body.frame_b.S[3,1] = robot.mechanics.b3.body.frameTranslation.frame_b.S[3,1];
//   robot.mechanics.b3.body.frame_b.S[3,2] = robot.mechanics.b3.body.frameTranslation.frame_b.S[3,2];
//   robot.mechanics.b3.body.frame_b.S[3,3] = robot.mechanics.b3.body.frameTranslation.frame_b.S[3,3];
//   robot.mechanics.b3.body.frame_b.r0[1] = robot.mechanics.b3.body.frameTranslation.frame_b.r0[1];
//   robot.mechanics.b3.body.frame_b.r0[2] = robot.mechanics.b3.body.frameTranslation.frame_b.r0[2];
//   robot.mechanics.b3.body.frame_b.r0[3] = robot.mechanics.b3.body.frameTranslation.frame_b.r0[3];
//   robot.mechanics.b3.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b3.vis.vis.mcShape.shapeType);
//   robot.mechanics.b3.vis.vis.mcShape.Material = PackMaterial(robot.mechanics.b3.vis.vis.mcShape.color[1] / 255.0,robot.mechanics.b3.vis.vis.mcShape.color[2] / 255.0,robot.mechanics.b3.vis.vis.mcShape.color[3] / 255.0,robot.mechanics.b3.vis.vis.mcShape.specularCoefficient);
//   robot.mechanics.b3.vis.vis.mcShape.Extra = robot.mechanics.b3.vis.vis.mcShape.extra;
//   robot.mechanics.b3.vis.vis.mcShape.size[1] = robot.mechanics.b3.vis.vis.mcShape.length;
//   robot.mechanics.b3.vis.vis.mcShape.size[2] = robot.mechanics.b3.vis.vis.mcShape.width;
//   robot.mechanics.b3.vis.vis.mcShape.size[3] = robot.mechanics.b3.vis.vis.mcShape.height;
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b3.vis.vis.mcShape.e_x[1];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b3.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.e_y[3] - robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b3.vis.vis.mcShape.e_x[2];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b3.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b3.vis.vis.mcShape.e_x[3] * robot.mechanics.b3.vis.vis.mcShape.e_y[1] - robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b3.vis.vis.mcShape.e_x[3];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b3.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b3.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b3.vis.vis.mcShape.e_x[1] * robot.mechanics.b3.vis.vis.mcShape.e_y[2] - robot.mechanics.b3.vis.vis.mcShape.e_x[2] * robot.mechanics.b3.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b3.vis.vis.mcShape.rxvisobj[1] = robot.mechanics.b3.vis.vis.mcShape.S[1,1] * robot.mechanics.b3.vis.vis.mcShape.e_x[1] + (robot.mechanics.b3.vis.vis.mcShape.S[1,2] * robot.mechanics.b3.vis.vis.mcShape.e_x[2] + robot.mechanics.b3.vis.vis.mcShape.S[1,3] * robot.mechanics.b3.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b3.vis.vis.mcShape.rxvisobj[2] = robot.mechanics.b3.vis.vis.mcShape.S[2,1] * robot.mechanics.b3.vis.vis.mcShape.e_x[1] + (robot.mechanics.b3.vis.vis.mcShape.S[2,2] * robot.mechanics.b3.vis.vis.mcShape.e_x[2] + robot.mechanics.b3.vis.vis.mcShape.S[2,3] * robot.mechanics.b3.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b3.vis.vis.mcShape.rxvisobj[3] = robot.mechanics.b3.vis.vis.mcShape.S[3,1] * robot.mechanics.b3.vis.vis.mcShape.e_x[1] + (robot.mechanics.b3.vis.vis.mcShape.S[3,2] * robot.mechanics.b3.vis.vis.mcShape.e_x[2] + robot.mechanics.b3.vis.vis.mcShape.S[3,3] * robot.mechanics.b3.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b3.vis.vis.mcShape.ryvisobj[1] = robot.mechanics.b3.vis.vis.mcShape.S[1,1] * robot.mechanics.b3.vis.vis.mcShape.e_y[1] + (robot.mechanics.b3.vis.vis.mcShape.S[1,2] * robot.mechanics.b3.vis.vis.mcShape.e_y[2] + robot.mechanics.b3.vis.vis.mcShape.S[1,3] * robot.mechanics.b3.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b3.vis.vis.mcShape.ryvisobj[2] = robot.mechanics.b3.vis.vis.mcShape.S[2,1] * robot.mechanics.b3.vis.vis.mcShape.e_y[1] + (robot.mechanics.b3.vis.vis.mcShape.S[2,2] * robot.mechanics.b3.vis.vis.mcShape.e_y[2] + robot.mechanics.b3.vis.vis.mcShape.S[2,3] * robot.mechanics.b3.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b3.vis.vis.mcShape.ryvisobj[3] = robot.mechanics.b3.vis.vis.mcShape.S[3,1] * robot.mechanics.b3.vis.vis.mcShape.e_y[1] + (robot.mechanics.b3.vis.vis.mcShape.S[3,2] * robot.mechanics.b3.vis.vis.mcShape.e_y[2] + robot.mechanics.b3.vis.vis.mcShape.S[3,3] * robot.mechanics.b3.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b3.vis.vis.mcShape.rvisobj[1] = robot.mechanics.b3.vis.vis.mcShape.r[1] + (robot.mechanics.b3.vis.vis.mcShape.S[1,1] * robot.mechanics.b3.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b3.vis.vis.mcShape.S[1,2] * robot.mechanics.b3.vis.vis.mcShape.r_shape[2] + robot.mechanics.b3.vis.vis.mcShape.S[1,3] * robot.mechanics.b3.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b3.vis.vis.mcShape.rvisobj[2] = robot.mechanics.b3.vis.vis.mcShape.r[2] + (robot.mechanics.b3.vis.vis.mcShape.S[2,1] * robot.mechanics.b3.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b3.vis.vis.mcShape.S[2,2] * robot.mechanics.b3.vis.vis.mcShape.r_shape[2] + robot.mechanics.b3.vis.vis.mcShape.S[2,3] * robot.mechanics.b3.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b3.vis.vis.mcShape.rvisobj[3] = robot.mechanics.b3.vis.vis.mcShape.r[3] + (robot.mechanics.b3.vis.vis.mcShape.S[3,1] * robot.mechanics.b3.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b3.vis.vis.mcShape.S[3,2] * robot.mechanics.b3.vis.vis.mcShape.r_shape[2] + robot.mechanics.b3.vis.vis.mcShape.S[3,3] * robot.mechanics.b3.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b3.vis.vis.mcShape.e_x[1] = robot.mechanics.b3.vis.vis.nLength[1];
//   robot.mechanics.b3.vis.vis.mcShape.e_x[2] = robot.mechanics.b3.vis.vis.nLength[2];
//   robot.mechanics.b3.vis.vis.mcShape.e_x[3] = robot.mechanics.b3.vis.vis.nLength[3];
//   robot.mechanics.b3.vis.vis.mcShape.e_y[1] = robot.mechanics.b3.vis.vis.nWidth[1];
//   robot.mechanics.b3.vis.vis.mcShape.e_y[2] = robot.mechanics.b3.vis.vis.nWidth[2];
//   robot.mechanics.b3.vis.vis.mcShape.e_y[3] = robot.mechanics.b3.vis.vis.nWidth[3];
//   robot.mechanics.b3.vis.vis.mcShape.e_z[1] = robot.mechanics.b3.vis.vis.nHeight[1];
//   robot.mechanics.b3.vis.vis.mcShape.e_z[2] = robot.mechanics.b3.vis.vis.nHeight[2];
//   robot.mechanics.b3.vis.vis.mcShape.e_z[3] = robot.mechanics.b3.vis.vis.nHeight[3];
//   robot.mechanics.b3.vis.vis.S[1,1] = robot.mechanics.b3.vis.Sa[1,1];
//   robot.mechanics.b3.vis.vis.S[1,2] = robot.mechanics.b3.vis.Sa[1,2];
//   robot.mechanics.b3.vis.vis.S[1,3] = robot.mechanics.b3.vis.Sa[1,3];
//   robot.mechanics.b3.vis.vis.S[2,1] = robot.mechanics.b3.vis.Sa[2,1];
//   robot.mechanics.b3.vis.vis.S[2,2] = robot.mechanics.b3.vis.Sa[2,2];
//   robot.mechanics.b3.vis.vis.S[2,3] = robot.mechanics.b3.vis.Sa[2,3];
//   robot.mechanics.b3.vis.vis.S[3,1] = robot.mechanics.b3.vis.Sa[3,1];
//   robot.mechanics.b3.vis.vis.S[3,2] = robot.mechanics.b3.vis.Sa[3,2];
//   robot.mechanics.b3.vis.vis.S[3,3] = robot.mechanics.b3.vis.Sa[3,3];
//   robot.mechanics.b3.vis.vis.r[1] = robot.mechanics.b3.vis.r0a[1];
//   robot.mechanics.b3.vis.vis.r[2] = robot.mechanics.b3.vis.r0a[2];
//   robot.mechanics.b3.vis.vis.r[3] = robot.mechanics.b3.vis.r0a[3];
//   robot.mechanics.b3.vis.vis.nLength[1] = robot.mechanics.b3.vis.nLength[1];
//   robot.mechanics.b3.vis.vis.nLength[2] = robot.mechanics.b3.vis.nLength[2];
//   robot.mechanics.b3.vis.vis.nLength[3] = robot.mechanics.b3.vis.nLength[3];
//   robot.mechanics.b3.vis.vis.nWidth[1] = robot.mechanics.b3.vis.nWidth[1];
//   robot.mechanics.b3.vis.vis.nWidth[2] = robot.mechanics.b3.vis.nWidth[2];
//   robot.mechanics.b3.vis.vis.nWidth[3] = robot.mechanics.b3.vis.nWidth[3];
//   robot.mechanics.b3.vis.vis.nHeight[1] = robot.mechanics.b3.vis.nHeight[1];
//   robot.mechanics.b3.vis.vis.nHeight[2] = robot.mechanics.b3.vis.nHeight[2];
//   robot.mechanics.b3.vis.vis.nHeight[3] = robot.mechanics.b3.vis.nHeight[3];
//   robot.mechanics.b3.vis.fa[1] = 0.0;
//   robot.mechanics.b3.vis.fa[2] = 0.0;
//   robot.mechanics.b3.vis.fa[3] = 0.0;
//   robot.mechanics.b3.vis.ta[1] = 0.0;
//   robot.mechanics.b3.vis.ta[2] = 0.0;
//   robot.mechanics.b3.vis.ta[3] = 0.0;
//   robot.mechanics.b3.vis.frame_a.t[1] + ((-robot.mechanics.b3.frame_a.t[1]) + robot.mechanics.b3.body.frame_a.t[1]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.t[2] + ((-robot.mechanics.b3.frame_a.t[2]) + robot.mechanics.b3.body.frame_a.t[2]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.t[3] + ((-robot.mechanics.b3.frame_a.t[3]) + robot.mechanics.b3.body.frame_a.t[3]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.f[1] + ((-robot.mechanics.b3.frame_a.f[1]) + robot.mechanics.b3.body.frame_a.f[1]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.f[2] + ((-robot.mechanics.b3.frame_a.f[2]) + robot.mechanics.b3.body.frame_a.f[2]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.f[3] + ((-robot.mechanics.b3.frame_a.f[3]) + robot.mechanics.b3.body.frame_a.f[3]) = 0.0;
//   robot.mechanics.b3.vis.frame_a.z[1] = robot.mechanics.b3.frame_a.z[1];
//   robot.mechanics.b3.frame_a.z[1] = robot.mechanics.b3.body.frame_a.z[1];
//   robot.mechanics.b3.vis.frame_a.z[2] = robot.mechanics.b3.frame_a.z[2];
//   robot.mechanics.b3.frame_a.z[2] = robot.mechanics.b3.body.frame_a.z[2];
//   robot.mechanics.b3.vis.frame_a.z[3] = robot.mechanics.b3.frame_a.z[3];
//   robot.mechanics.b3.frame_a.z[3] = robot.mechanics.b3.body.frame_a.z[3];
//   robot.mechanics.b3.vis.frame_a.a[1] = robot.mechanics.b3.frame_a.a[1];
//   robot.mechanics.b3.frame_a.a[1] = robot.mechanics.b3.body.frame_a.a[1];
//   robot.mechanics.b3.vis.frame_a.a[2] = robot.mechanics.b3.frame_a.a[2];
//   robot.mechanics.b3.frame_a.a[2] = robot.mechanics.b3.body.frame_a.a[2];
//   robot.mechanics.b3.vis.frame_a.a[3] = robot.mechanics.b3.frame_a.a[3];
//   robot.mechanics.b3.frame_a.a[3] = robot.mechanics.b3.body.frame_a.a[3];
//   robot.mechanics.b3.vis.frame_a.w[1] = robot.mechanics.b3.frame_a.w[1];
//   robot.mechanics.b3.frame_a.w[1] = robot.mechanics.b3.body.frame_a.w[1];
//   robot.mechanics.b3.vis.frame_a.w[2] = robot.mechanics.b3.frame_a.w[2];
//   robot.mechanics.b3.frame_a.w[2] = robot.mechanics.b3.body.frame_a.w[2];
//   robot.mechanics.b3.vis.frame_a.w[3] = robot.mechanics.b3.frame_a.w[3];
//   robot.mechanics.b3.frame_a.w[3] = robot.mechanics.b3.body.frame_a.w[3];
//   robot.mechanics.b3.vis.frame_a.v[1] = robot.mechanics.b3.frame_a.v[1];
//   robot.mechanics.b3.frame_a.v[1] = robot.mechanics.b3.body.frame_a.v[1];
//   robot.mechanics.b3.vis.frame_a.v[2] = robot.mechanics.b3.frame_a.v[2];
//   robot.mechanics.b3.frame_a.v[2] = robot.mechanics.b3.body.frame_a.v[2];
//   robot.mechanics.b3.vis.frame_a.v[3] = robot.mechanics.b3.frame_a.v[3];
//   robot.mechanics.b3.frame_a.v[3] = robot.mechanics.b3.body.frame_a.v[3];
//   robot.mechanics.b3.vis.frame_a.S[1,1] = robot.mechanics.b3.frame_a.S[1,1];
//   robot.mechanics.b3.frame_a.S[1,1] = robot.mechanics.b3.body.frame_a.S[1,1];
//   robot.mechanics.b3.vis.frame_a.S[1,2] = robot.mechanics.b3.frame_a.S[1,2];
//   robot.mechanics.b3.frame_a.S[1,2] = robot.mechanics.b3.body.frame_a.S[1,2];
//   robot.mechanics.b3.vis.frame_a.S[1,3] = robot.mechanics.b3.frame_a.S[1,3];
//   robot.mechanics.b3.frame_a.S[1,3] = robot.mechanics.b3.body.frame_a.S[1,3];
//   robot.mechanics.b3.vis.frame_a.S[2,1] = robot.mechanics.b3.frame_a.S[2,1];
//   robot.mechanics.b3.frame_a.S[2,1] = robot.mechanics.b3.body.frame_a.S[2,1];
//   robot.mechanics.b3.vis.frame_a.S[2,2] = robot.mechanics.b3.frame_a.S[2,2];
//   robot.mechanics.b3.frame_a.S[2,2] = robot.mechanics.b3.body.frame_a.S[2,2];
//   robot.mechanics.b3.vis.frame_a.S[2,3] = robot.mechanics.b3.frame_a.S[2,3];
//   robot.mechanics.b3.frame_a.S[2,3] = robot.mechanics.b3.body.frame_a.S[2,3];
//   robot.mechanics.b3.vis.frame_a.S[3,1] = robot.mechanics.b3.frame_a.S[3,1];
//   robot.mechanics.b3.frame_a.S[3,1] = robot.mechanics.b3.body.frame_a.S[3,1];
//   robot.mechanics.b3.vis.frame_a.S[3,2] = robot.mechanics.b3.frame_a.S[3,2];
//   robot.mechanics.b3.frame_a.S[3,2] = robot.mechanics.b3.body.frame_a.S[3,2];
//   robot.mechanics.b3.vis.frame_a.S[3,3] = robot.mechanics.b3.frame_a.S[3,3];
//   robot.mechanics.b3.frame_a.S[3,3] = robot.mechanics.b3.body.frame_a.S[3,3];
//   robot.mechanics.b3.vis.frame_a.r0[1] = robot.mechanics.b3.frame_a.r0[1];
//   robot.mechanics.b3.frame_a.r0[1] = robot.mechanics.b3.body.frame_a.r0[1];
//   robot.mechanics.b3.vis.frame_a.r0[2] = robot.mechanics.b3.frame_a.r0[2];
//   robot.mechanics.b3.frame_a.r0[2] = robot.mechanics.b3.body.frame_a.r0[2];
//   robot.mechanics.b3.vis.frame_a.r0[3] = robot.mechanics.b3.frame_a.r0[3];
//   robot.mechanics.b3.frame_a.r0[3] = robot.mechanics.b3.body.frame_a.r0[3];
//   (-robot.mechanics.b3.frame_b.t[1]) + robot.mechanics.b3.body.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b3.frame_b.t[2]) + robot.mechanics.b3.body.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b3.frame_b.t[3]) + robot.mechanics.b3.body.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b3.frame_b.f[1]) + robot.mechanics.b3.body.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b3.frame_b.f[2]) + robot.mechanics.b3.body.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b3.frame_b.f[3]) + robot.mechanics.b3.body.frame_b.f[3] = 0.0;
//   robot.mechanics.b3.frame_b.z[1] = robot.mechanics.b3.body.frame_b.z[1];
//   robot.mechanics.b3.frame_b.z[2] = robot.mechanics.b3.body.frame_b.z[2];
//   robot.mechanics.b3.frame_b.z[3] = robot.mechanics.b3.body.frame_b.z[3];
//   robot.mechanics.b3.frame_b.a[1] = robot.mechanics.b3.body.frame_b.a[1];
//   robot.mechanics.b3.frame_b.a[2] = robot.mechanics.b3.body.frame_b.a[2];
//   robot.mechanics.b3.frame_b.a[3] = robot.mechanics.b3.body.frame_b.a[3];
//   robot.mechanics.b3.frame_b.w[1] = robot.mechanics.b3.body.frame_b.w[1];
//   robot.mechanics.b3.frame_b.w[2] = robot.mechanics.b3.body.frame_b.w[2];
//   robot.mechanics.b3.frame_b.w[3] = robot.mechanics.b3.body.frame_b.w[3];
//   robot.mechanics.b3.frame_b.v[1] = robot.mechanics.b3.body.frame_b.v[1];
//   robot.mechanics.b3.frame_b.v[2] = robot.mechanics.b3.body.frame_b.v[2];
//   robot.mechanics.b3.frame_b.v[3] = robot.mechanics.b3.body.frame_b.v[3];
//   robot.mechanics.b3.frame_b.S[1,1] = robot.mechanics.b3.body.frame_b.S[1,1];
//   robot.mechanics.b3.frame_b.S[1,2] = robot.mechanics.b3.body.frame_b.S[1,2];
//   robot.mechanics.b3.frame_b.S[1,3] = robot.mechanics.b3.body.frame_b.S[1,3];
//   robot.mechanics.b3.frame_b.S[2,1] = robot.mechanics.b3.body.frame_b.S[2,1];
//   robot.mechanics.b3.frame_b.S[2,2] = robot.mechanics.b3.body.frame_b.S[2,2];
//   robot.mechanics.b3.frame_b.S[2,3] = robot.mechanics.b3.body.frame_b.S[2,3];
//   robot.mechanics.b3.frame_b.S[3,1] = robot.mechanics.b3.body.frame_b.S[3,1];
//   robot.mechanics.b3.frame_b.S[3,2] = robot.mechanics.b3.body.frame_b.S[3,2];
//   robot.mechanics.b3.frame_b.S[3,3] = robot.mechanics.b3.body.frame_b.S[3,3];
//   robot.mechanics.b3.frame_b.r0[1] = robot.mechanics.b3.body.frame_b.r0[1];
//   robot.mechanics.b3.frame_b.r0[2] = robot.mechanics.b3.body.frame_b.r0[2];
//   robot.mechanics.b3.frame_b.r0[3] = robot.mechanics.b3.body.frame_b.r0[3];
//   robot.mechanics.b4.body.frameTranslation.Sb[1,1] = robot.mechanics.b4.body.frameTranslation.Sa[1,1];
//   robot.mechanics.b4.body.frameTranslation.Sb[1,2] = robot.mechanics.b4.body.frameTranslation.Sa[1,2];
//   robot.mechanics.b4.body.frameTranslation.Sb[1,3] = robot.mechanics.b4.body.frameTranslation.Sa[1,3];
//   robot.mechanics.b4.body.frameTranslation.Sb[2,1] = robot.mechanics.b4.body.frameTranslation.Sa[2,1];
//   robot.mechanics.b4.body.frameTranslation.Sb[2,2] = robot.mechanics.b4.body.frameTranslation.Sa[2,2];
//   robot.mechanics.b4.body.frameTranslation.Sb[2,3] = robot.mechanics.b4.body.frameTranslation.Sa[2,3];
//   robot.mechanics.b4.body.frameTranslation.Sb[3,1] = robot.mechanics.b4.body.frameTranslation.Sa[3,1];
//   robot.mechanics.b4.body.frameTranslation.Sb[3,2] = robot.mechanics.b4.body.frameTranslation.Sa[3,2];
//   robot.mechanics.b4.body.frameTranslation.Sb[3,3] = robot.mechanics.b4.body.frameTranslation.Sa[3,3];
//   robot.mechanics.b4.body.frameTranslation.wb[1] = robot.mechanics.b4.body.frameTranslation.wa[1];
//   robot.mechanics.b4.body.frameTranslation.wb[2] = robot.mechanics.b4.body.frameTranslation.wa[2];
//   robot.mechanics.b4.body.frameTranslation.wb[3] = robot.mechanics.b4.body.frameTranslation.wa[3];
//   robot.mechanics.b4.body.frameTranslation.zb[1] = robot.mechanics.b4.body.frameTranslation.za[1];
//   robot.mechanics.b4.body.frameTranslation.zb[2] = robot.mechanics.b4.body.frameTranslation.za[2];
//   robot.mechanics.b4.body.frameTranslation.zb[3] = robot.mechanics.b4.body.frameTranslation.za[3];
//   robot.mechanics.b4.body.frameTranslation.r0b[1] = robot.mechanics.b4.body.frameTranslation.r0a[1] + (robot.mechanics.b4.body.frameTranslation.Sa[1,1] * robot.mechanics.b4.body.frameTranslation.r[1] + (robot.mechanics.b4.body.frameTranslation.Sa[1,2] * robot.mechanics.b4.body.frameTranslation.r[2] + robot.mechanics.b4.body.frameTranslation.Sa[1,3] * robot.mechanics.b4.body.frameTranslation.r[3]));
//   robot.mechanics.b4.body.frameTranslation.r0b[2] = robot.mechanics.b4.body.frameTranslation.r0a[2] + (robot.mechanics.b4.body.frameTranslation.Sa[2,1] * robot.mechanics.b4.body.frameTranslation.r[1] + (robot.mechanics.b4.body.frameTranslation.Sa[2,2] * robot.mechanics.b4.body.frameTranslation.r[2] + robot.mechanics.b4.body.frameTranslation.Sa[2,3] * robot.mechanics.b4.body.frameTranslation.r[3]));
//   robot.mechanics.b4.body.frameTranslation.r0b[3] = robot.mechanics.b4.body.frameTranslation.r0a[3] + (robot.mechanics.b4.body.frameTranslation.Sa[3,1] * robot.mechanics.b4.body.frameTranslation.r[1] + (robot.mechanics.b4.body.frameTranslation.Sa[3,2] * robot.mechanics.b4.body.frameTranslation.r[2] + robot.mechanics.b4.body.frameTranslation.Sa[3,3] * robot.mechanics.b4.body.frameTranslation.r[3]));
//   robot.mechanics.b4.body.frameTranslation.vaux[1] = robot.mechanics.b4.body.frameTranslation.wa[2] * robot.mechanics.b4.body.frameTranslation.r[3] - robot.mechanics.b4.body.frameTranslation.wa[3] * robot.mechanics.b4.body.frameTranslation.r[2];
//   robot.mechanics.b4.body.frameTranslation.vaux[2] = robot.mechanics.b4.body.frameTranslation.wa[3] * robot.mechanics.b4.body.frameTranslation.r[1] - robot.mechanics.b4.body.frameTranslation.wa[1] * robot.mechanics.b4.body.frameTranslation.r[3];
//   robot.mechanics.b4.body.frameTranslation.vaux[3] = robot.mechanics.b4.body.frameTranslation.wa[1] * robot.mechanics.b4.body.frameTranslation.r[2] - robot.mechanics.b4.body.frameTranslation.wa[2] * robot.mechanics.b4.body.frameTranslation.r[1];
//   robot.mechanics.b4.body.frameTranslation.vb[1] = robot.mechanics.b4.body.frameTranslation.va[1] + robot.mechanics.b4.body.frameTranslation.vaux[1];
//   robot.mechanics.b4.body.frameTranslation.vb[2] = robot.mechanics.b4.body.frameTranslation.va[2] + robot.mechanics.b4.body.frameTranslation.vaux[2];
//   robot.mechanics.b4.body.frameTranslation.vb[3] = robot.mechanics.b4.body.frameTranslation.va[3] + robot.mechanics.b4.body.frameTranslation.vaux[3];
//   robot.mechanics.b4.body.frameTranslation.ab[1] = robot.mechanics.b4.body.frameTranslation.aa[1] + (robot.mechanics.b4.body.frameTranslation.za[2] * robot.mechanics.b4.body.frameTranslation.r[3] + ((-robot.mechanics.b4.body.frameTranslation.za[3] * robot.mechanics.b4.body.frameTranslation.r[2]) + (robot.mechanics.b4.body.frameTranslation.wa[2] * robot.mechanics.b4.body.frameTranslation.vaux[3] + (-robot.mechanics.b4.body.frameTranslation.wa[3] * robot.mechanics.b4.body.frameTranslation.vaux[2]))));
//   robot.mechanics.b4.body.frameTranslation.ab[2] = robot.mechanics.b4.body.frameTranslation.aa[2] + (robot.mechanics.b4.body.frameTranslation.za[3] * robot.mechanics.b4.body.frameTranslation.r[1] + ((-robot.mechanics.b4.body.frameTranslation.za[1] * robot.mechanics.b4.body.frameTranslation.r[3]) + (robot.mechanics.b4.body.frameTranslation.wa[3] * robot.mechanics.b4.body.frameTranslation.vaux[1] + (-robot.mechanics.b4.body.frameTranslation.wa[1] * robot.mechanics.b4.body.frameTranslation.vaux[3]))));
//   robot.mechanics.b4.body.frameTranslation.ab[3] = robot.mechanics.b4.body.frameTranslation.aa[3] + (robot.mechanics.b4.body.frameTranslation.za[1] * robot.mechanics.b4.body.frameTranslation.r[2] + ((-robot.mechanics.b4.body.frameTranslation.za[2] * robot.mechanics.b4.body.frameTranslation.r[1]) + (robot.mechanics.b4.body.frameTranslation.wa[1] * robot.mechanics.b4.body.frameTranslation.vaux[2] + (-robot.mechanics.b4.body.frameTranslation.wa[2] * robot.mechanics.b4.body.frameTranslation.vaux[1]))));
//   robot.mechanics.b4.body.frameTranslation.fa[1] = robot.mechanics.b4.body.frameTranslation.fb[1];
//   robot.mechanics.b4.body.frameTranslation.fa[2] = robot.mechanics.b4.body.frameTranslation.fb[2];
//   robot.mechanics.b4.body.frameTranslation.fa[3] = robot.mechanics.b4.body.frameTranslation.fb[3];
//   robot.mechanics.b4.body.frameTranslation.ta[1] = robot.mechanics.b4.body.frameTranslation.tb[1] + (robot.mechanics.b4.body.frameTranslation.r[2] * robot.mechanics.b4.body.frameTranslation.fa[3] + (-robot.mechanics.b4.body.frameTranslation.r[3] * robot.mechanics.b4.body.frameTranslation.fa[2]));
//   robot.mechanics.b4.body.frameTranslation.ta[2] = robot.mechanics.b4.body.frameTranslation.tb[2] + (robot.mechanics.b4.body.frameTranslation.r[3] * robot.mechanics.b4.body.frameTranslation.fa[1] + (-robot.mechanics.b4.body.frameTranslation.r[1] * robot.mechanics.b4.body.frameTranslation.fa[3]));
//   robot.mechanics.b4.body.frameTranslation.ta[3] = robot.mechanics.b4.body.frameTranslation.tb[3] + (robot.mechanics.b4.body.frameTranslation.r[1] * robot.mechanics.b4.body.frameTranslation.fa[2] + (-robot.mechanics.b4.body.frameTranslation.r[2] * robot.mechanics.b4.body.frameTranslation.fa[1]));
//   robot.mechanics.b4.body.body.fa[1] = robot.mechanics.b4.body.body.m * (robot.mechanics.b4.body.body.aa[1] + (robot.mechanics.b4.body.body.za[2] * robot.mechanics.b4.body.body.rCM[3] + ((-robot.mechanics.b4.body.body.za[3] * robot.mechanics.b4.body.body.rCM[2]) + (robot.mechanics.b4.body.body.wa[2] * (robot.mechanics.b4.body.body.wa[1] * robot.mechanics.b4.body.body.rCM[2] - robot.mechanics.b4.body.body.wa[2] * robot.mechanics.b4.body.body.rCM[1]) + (-robot.mechanics.b4.body.body.wa[3] * (robot.mechanics.b4.body.body.wa[3] * robot.mechanics.b4.body.body.rCM[1] - robot.mechanics.b4.body.body.wa[1] * robot.mechanics.b4.body.body.rCM[3]))))));
//   robot.mechanics.b4.body.body.fa[2] = robot.mechanics.b4.body.body.m * (robot.mechanics.b4.body.body.aa[2] + (robot.mechanics.b4.body.body.za[3] * robot.mechanics.b4.body.body.rCM[1] + ((-robot.mechanics.b4.body.body.za[1] * robot.mechanics.b4.body.body.rCM[3]) + (robot.mechanics.b4.body.body.wa[3] * (robot.mechanics.b4.body.body.wa[2] * robot.mechanics.b4.body.body.rCM[3] - robot.mechanics.b4.body.body.wa[3] * robot.mechanics.b4.body.body.rCM[2]) + (-robot.mechanics.b4.body.body.wa[1] * (robot.mechanics.b4.body.body.wa[1] * robot.mechanics.b4.body.body.rCM[2] - robot.mechanics.b4.body.body.wa[2] * robot.mechanics.b4.body.body.rCM[1]))))));
//   robot.mechanics.b4.body.body.fa[3] = robot.mechanics.b4.body.body.m * (robot.mechanics.b4.body.body.aa[3] + (robot.mechanics.b4.body.body.za[1] * robot.mechanics.b4.body.body.rCM[2] + ((-robot.mechanics.b4.body.body.za[2] * robot.mechanics.b4.body.body.rCM[1]) + (robot.mechanics.b4.body.body.wa[1] * (robot.mechanics.b4.body.body.wa[3] * robot.mechanics.b4.body.body.rCM[1] - robot.mechanics.b4.body.body.wa[1] * robot.mechanics.b4.body.body.rCM[3]) + (-robot.mechanics.b4.body.body.wa[2] * (robot.mechanics.b4.body.body.wa[2] * robot.mechanics.b4.body.body.rCM[3] - robot.mechanics.b4.body.body.wa[3] * robot.mechanics.b4.body.body.rCM[2]))))));
//   robot.mechanics.b4.body.body.ta[1] = robot.mechanics.b4.body.body.I[1,1] * robot.mechanics.b4.body.body.za[1] + (robot.mechanics.b4.body.body.I[1,2] * robot.mechanics.b4.body.body.za[2] + (robot.mechanics.b4.body.body.I[1,3] * robot.mechanics.b4.body.body.za[3] + (robot.mechanics.b4.body.body.wa[2] * (robot.mechanics.b4.body.body.I[3,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[3,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[3,3] * robot.mechanics.b4.body.body.wa[3])) + ((-robot.mechanics.b4.body.body.wa[3] * (robot.mechanics.b4.body.body.I[2,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[2,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[2,3] * robot.mechanics.b4.body.body.wa[3]))) + (robot.mechanics.b4.body.body.rCM[2] * robot.mechanics.b4.body.body.fa[3] + (-robot.mechanics.b4.body.body.rCM[3] * robot.mechanics.b4.body.body.fa[2]))))));
//   robot.mechanics.b4.body.body.ta[2] = robot.mechanics.b4.body.body.I[2,1] * robot.mechanics.b4.body.body.za[1] + (robot.mechanics.b4.body.body.I[2,2] * robot.mechanics.b4.body.body.za[2] + (robot.mechanics.b4.body.body.I[2,3] * robot.mechanics.b4.body.body.za[3] + (robot.mechanics.b4.body.body.wa[3] * (robot.mechanics.b4.body.body.I[1,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[1,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[1,3] * robot.mechanics.b4.body.body.wa[3])) + ((-robot.mechanics.b4.body.body.wa[1] * (robot.mechanics.b4.body.body.I[3,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[3,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[3,3] * robot.mechanics.b4.body.body.wa[3]))) + (robot.mechanics.b4.body.body.rCM[3] * robot.mechanics.b4.body.body.fa[1] + (-robot.mechanics.b4.body.body.rCM[1] * robot.mechanics.b4.body.body.fa[3]))))));
//   robot.mechanics.b4.body.body.ta[3] = robot.mechanics.b4.body.body.I[3,1] * robot.mechanics.b4.body.body.za[1] + (robot.mechanics.b4.body.body.I[3,2] * robot.mechanics.b4.body.body.za[2] + (robot.mechanics.b4.body.body.I[3,3] * robot.mechanics.b4.body.body.za[3] + (robot.mechanics.b4.body.body.wa[1] * (robot.mechanics.b4.body.body.I[2,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[2,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[2,3] * robot.mechanics.b4.body.body.wa[3])) + ((-robot.mechanics.b4.body.body.wa[2] * (robot.mechanics.b4.body.body.I[1,1] * robot.mechanics.b4.body.body.wa[1] + (robot.mechanics.b4.body.body.I[1,2] * robot.mechanics.b4.body.body.wa[2] + robot.mechanics.b4.body.body.I[1,3] * robot.mechanics.b4.body.body.wa[3]))) + (robot.mechanics.b4.body.body.rCM[1] * robot.mechanics.b4.body.body.fa[2] + (-robot.mechanics.b4.body.body.rCM[2] * robot.mechanics.b4.body.body.fa[1]))))));
//   robot.mechanics.b4.body.body.m = robot.mechanics.b4.body.m;
//   robot.mechanics.b4.body.body.rCM[1] = robot.mechanics.b4.body.rCM[1];
//   robot.mechanics.b4.body.body.rCM[2] = robot.mechanics.b4.body.rCM[2];
//   robot.mechanics.b4.body.body.rCM[3] = robot.mechanics.b4.body.rCM[3];
//   robot.mechanics.b4.body.body.I[1,1] = robot.mechanics.b4.body.I11;
//   robot.mechanics.b4.body.body.I[1,2] = robot.mechanics.b4.body.I21;
//   robot.mechanics.b4.body.body.I[1,3] = robot.mechanics.b4.body.I31;
//   robot.mechanics.b4.body.body.I[2,1] = robot.mechanics.b4.body.I21;
//   robot.mechanics.b4.body.body.I[2,2] = robot.mechanics.b4.body.I22;
//   robot.mechanics.b4.body.body.I[2,3] = robot.mechanics.b4.body.I32;
//   robot.mechanics.b4.body.body.I[3,1] = robot.mechanics.b4.body.I31;
//   robot.mechanics.b4.body.body.I[3,2] = robot.mechanics.b4.body.I32;
//   robot.mechanics.b4.body.body.I[3,3] = robot.mechanics.b4.body.I33;
//   (-robot.mechanics.b4.body.frame_a.t[1]) + (robot.mechanics.b4.body.body.frame_a.t[1] + robot.mechanics.b4.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-robot.mechanics.b4.body.frame_a.t[2]) + (robot.mechanics.b4.body.body.frame_a.t[2] + robot.mechanics.b4.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-robot.mechanics.b4.body.frame_a.t[3]) + (robot.mechanics.b4.body.body.frame_a.t[3] + robot.mechanics.b4.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-robot.mechanics.b4.body.frame_a.f[1]) + (robot.mechanics.b4.body.body.frame_a.f[1] + robot.mechanics.b4.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-robot.mechanics.b4.body.frame_a.f[2]) + (robot.mechanics.b4.body.body.frame_a.f[2] + robot.mechanics.b4.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-robot.mechanics.b4.body.frame_a.f[3]) + (robot.mechanics.b4.body.body.frame_a.f[3] + robot.mechanics.b4.body.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.b4.body.frame_a.z[1] = robot.mechanics.b4.body.body.frame_a.z[1];
//   robot.mechanics.b4.body.body.frame_a.z[1] = robot.mechanics.b4.body.frameTranslation.frame_a.z[1];
//   robot.mechanics.b4.body.frame_a.z[2] = robot.mechanics.b4.body.body.frame_a.z[2];
//   robot.mechanics.b4.body.body.frame_a.z[2] = robot.mechanics.b4.body.frameTranslation.frame_a.z[2];
//   robot.mechanics.b4.body.frame_a.z[3] = robot.mechanics.b4.body.body.frame_a.z[3];
//   robot.mechanics.b4.body.body.frame_a.z[3] = robot.mechanics.b4.body.frameTranslation.frame_a.z[3];
//   robot.mechanics.b4.body.frame_a.a[1] = robot.mechanics.b4.body.body.frame_a.a[1];
//   robot.mechanics.b4.body.body.frame_a.a[1] = robot.mechanics.b4.body.frameTranslation.frame_a.a[1];
//   robot.mechanics.b4.body.frame_a.a[2] = robot.mechanics.b4.body.body.frame_a.a[2];
//   robot.mechanics.b4.body.body.frame_a.a[2] = robot.mechanics.b4.body.frameTranslation.frame_a.a[2];
//   robot.mechanics.b4.body.frame_a.a[3] = robot.mechanics.b4.body.body.frame_a.a[3];
//   robot.mechanics.b4.body.body.frame_a.a[3] = robot.mechanics.b4.body.frameTranslation.frame_a.a[3];
//   robot.mechanics.b4.body.frame_a.w[1] = robot.mechanics.b4.body.body.frame_a.w[1];
//   robot.mechanics.b4.body.body.frame_a.w[1] = robot.mechanics.b4.body.frameTranslation.frame_a.w[1];
//   robot.mechanics.b4.body.frame_a.w[2] = robot.mechanics.b4.body.body.frame_a.w[2];
//   robot.mechanics.b4.body.body.frame_a.w[2] = robot.mechanics.b4.body.frameTranslation.frame_a.w[2];
//   robot.mechanics.b4.body.frame_a.w[3] = robot.mechanics.b4.body.body.frame_a.w[3];
//   robot.mechanics.b4.body.body.frame_a.w[3] = robot.mechanics.b4.body.frameTranslation.frame_a.w[3];
//   robot.mechanics.b4.body.frame_a.v[1] = robot.mechanics.b4.body.body.frame_a.v[1];
//   robot.mechanics.b4.body.body.frame_a.v[1] = robot.mechanics.b4.body.frameTranslation.frame_a.v[1];
//   robot.mechanics.b4.body.frame_a.v[2] = robot.mechanics.b4.body.body.frame_a.v[2];
//   robot.mechanics.b4.body.body.frame_a.v[2] = robot.mechanics.b4.body.frameTranslation.frame_a.v[2];
//   robot.mechanics.b4.body.frame_a.v[3] = robot.mechanics.b4.body.body.frame_a.v[3];
//   robot.mechanics.b4.body.body.frame_a.v[3] = robot.mechanics.b4.body.frameTranslation.frame_a.v[3];
//   robot.mechanics.b4.body.frame_a.S[1,1] = robot.mechanics.b4.body.body.frame_a.S[1,1];
//   robot.mechanics.b4.body.body.frame_a.S[1,1] = robot.mechanics.b4.body.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.b4.body.frame_a.S[1,2] = robot.mechanics.b4.body.body.frame_a.S[1,2];
//   robot.mechanics.b4.body.body.frame_a.S[1,2] = robot.mechanics.b4.body.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.b4.body.frame_a.S[1,3] = robot.mechanics.b4.body.body.frame_a.S[1,3];
//   robot.mechanics.b4.body.body.frame_a.S[1,3] = robot.mechanics.b4.body.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.b4.body.frame_a.S[2,1] = robot.mechanics.b4.body.body.frame_a.S[2,1];
//   robot.mechanics.b4.body.body.frame_a.S[2,1] = robot.mechanics.b4.body.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.b4.body.frame_a.S[2,2] = robot.mechanics.b4.body.body.frame_a.S[2,2];
//   robot.mechanics.b4.body.body.frame_a.S[2,2] = robot.mechanics.b4.body.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.b4.body.frame_a.S[2,3] = robot.mechanics.b4.body.body.frame_a.S[2,3];
//   robot.mechanics.b4.body.body.frame_a.S[2,3] = robot.mechanics.b4.body.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.b4.body.frame_a.S[3,1] = robot.mechanics.b4.body.body.frame_a.S[3,1];
//   robot.mechanics.b4.body.body.frame_a.S[3,1] = robot.mechanics.b4.body.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.b4.body.frame_a.S[3,2] = robot.mechanics.b4.body.body.frame_a.S[3,2];
//   robot.mechanics.b4.body.body.frame_a.S[3,2] = robot.mechanics.b4.body.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.b4.body.frame_a.S[3,3] = robot.mechanics.b4.body.body.frame_a.S[3,3];
//   robot.mechanics.b4.body.body.frame_a.S[3,3] = robot.mechanics.b4.body.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.b4.body.frame_a.r0[1] = robot.mechanics.b4.body.body.frame_a.r0[1];
//   robot.mechanics.b4.body.body.frame_a.r0[1] = robot.mechanics.b4.body.frameTranslation.frame_a.r0[1];
//   robot.mechanics.b4.body.frame_a.r0[2] = robot.mechanics.b4.body.body.frame_a.r0[2];
//   robot.mechanics.b4.body.body.frame_a.r0[2] = robot.mechanics.b4.body.frameTranslation.frame_a.r0[2];
//   robot.mechanics.b4.body.frame_a.r0[3] = robot.mechanics.b4.body.body.frame_a.r0[3];
//   robot.mechanics.b4.body.body.frame_a.r0[3] = robot.mechanics.b4.body.frameTranslation.frame_a.r0[3];
//   (-robot.mechanics.b4.body.frame_b.t[1]) + robot.mechanics.b4.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b4.body.frame_b.t[2]) + robot.mechanics.b4.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b4.body.frame_b.t[3]) + robot.mechanics.b4.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b4.body.frame_b.f[1]) + robot.mechanics.b4.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b4.body.frame_b.f[2]) + robot.mechanics.b4.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b4.body.frame_b.f[3]) + robot.mechanics.b4.body.frameTranslation.frame_b.f[3] = 0.0;
//   robot.mechanics.b4.body.frame_b.z[1] = robot.mechanics.b4.body.frameTranslation.frame_b.z[1];
//   robot.mechanics.b4.body.frame_b.z[2] = robot.mechanics.b4.body.frameTranslation.frame_b.z[2];
//   robot.mechanics.b4.body.frame_b.z[3] = robot.mechanics.b4.body.frameTranslation.frame_b.z[3];
//   robot.mechanics.b4.body.frame_b.a[1] = robot.mechanics.b4.body.frameTranslation.frame_b.a[1];
//   robot.mechanics.b4.body.frame_b.a[2] = robot.mechanics.b4.body.frameTranslation.frame_b.a[2];
//   robot.mechanics.b4.body.frame_b.a[3] = robot.mechanics.b4.body.frameTranslation.frame_b.a[3];
//   robot.mechanics.b4.body.frame_b.w[1] = robot.mechanics.b4.body.frameTranslation.frame_b.w[1];
//   robot.mechanics.b4.body.frame_b.w[2] = robot.mechanics.b4.body.frameTranslation.frame_b.w[2];
//   robot.mechanics.b4.body.frame_b.w[3] = robot.mechanics.b4.body.frameTranslation.frame_b.w[3];
//   robot.mechanics.b4.body.frame_b.v[1] = robot.mechanics.b4.body.frameTranslation.frame_b.v[1];
//   robot.mechanics.b4.body.frame_b.v[2] = robot.mechanics.b4.body.frameTranslation.frame_b.v[2];
//   robot.mechanics.b4.body.frame_b.v[3] = robot.mechanics.b4.body.frameTranslation.frame_b.v[3];
//   robot.mechanics.b4.body.frame_b.S[1,1] = robot.mechanics.b4.body.frameTranslation.frame_b.S[1,1];
//   robot.mechanics.b4.body.frame_b.S[1,2] = robot.mechanics.b4.body.frameTranslation.frame_b.S[1,2];
//   robot.mechanics.b4.body.frame_b.S[1,3] = robot.mechanics.b4.body.frameTranslation.frame_b.S[1,3];
//   robot.mechanics.b4.body.frame_b.S[2,1] = robot.mechanics.b4.body.frameTranslation.frame_b.S[2,1];
//   robot.mechanics.b4.body.frame_b.S[2,2] = robot.mechanics.b4.body.frameTranslation.frame_b.S[2,2];
//   robot.mechanics.b4.body.frame_b.S[2,3] = robot.mechanics.b4.body.frameTranslation.frame_b.S[2,3];
//   robot.mechanics.b4.body.frame_b.S[3,1] = robot.mechanics.b4.body.frameTranslation.frame_b.S[3,1];
//   robot.mechanics.b4.body.frame_b.S[3,2] = robot.mechanics.b4.body.frameTranslation.frame_b.S[3,2];
//   robot.mechanics.b4.body.frame_b.S[3,3] = robot.mechanics.b4.body.frameTranslation.frame_b.S[3,3];
//   robot.mechanics.b4.body.frame_b.r0[1] = robot.mechanics.b4.body.frameTranslation.frame_b.r0[1];
//   robot.mechanics.b4.body.frame_b.r0[2] = robot.mechanics.b4.body.frameTranslation.frame_b.r0[2];
//   robot.mechanics.b4.body.frame_b.r0[3] = robot.mechanics.b4.body.frameTranslation.frame_b.r0[3];
//   robot.mechanics.b4.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b4.vis.vis.mcShape.shapeType);
//   robot.mechanics.b4.vis.vis.mcShape.Material = PackMaterial(robot.mechanics.b4.vis.vis.mcShape.color[1] / 255.0,robot.mechanics.b4.vis.vis.mcShape.color[2] / 255.0,robot.mechanics.b4.vis.vis.mcShape.color[3] / 255.0,robot.mechanics.b4.vis.vis.mcShape.specularCoefficient);
//   robot.mechanics.b4.vis.vis.mcShape.Extra = robot.mechanics.b4.vis.vis.mcShape.extra;
//   robot.mechanics.b4.vis.vis.mcShape.size[1] = robot.mechanics.b4.vis.vis.mcShape.length;
//   robot.mechanics.b4.vis.vis.mcShape.size[2] = robot.mechanics.b4.vis.vis.mcShape.width;
//   robot.mechanics.b4.vis.vis.mcShape.size[3] = robot.mechanics.b4.vis.vis.mcShape.height;
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b4.vis.vis.mcShape.e_x[1];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b4.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.e_y[3] - robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b4.vis.vis.mcShape.e_x[2];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b4.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b4.vis.vis.mcShape.e_x[3] * robot.mechanics.b4.vis.vis.mcShape.e_y[1] - robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b4.vis.vis.mcShape.e_x[3];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b4.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b4.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b4.vis.vis.mcShape.e_x[1] * robot.mechanics.b4.vis.vis.mcShape.e_y[2] - robot.mechanics.b4.vis.vis.mcShape.e_x[2] * robot.mechanics.b4.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b4.vis.vis.mcShape.rxvisobj[1] = robot.mechanics.b4.vis.vis.mcShape.S[1,1] * robot.mechanics.b4.vis.vis.mcShape.e_x[1] + (robot.mechanics.b4.vis.vis.mcShape.S[1,2] * robot.mechanics.b4.vis.vis.mcShape.e_x[2] + robot.mechanics.b4.vis.vis.mcShape.S[1,3] * robot.mechanics.b4.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b4.vis.vis.mcShape.rxvisobj[2] = robot.mechanics.b4.vis.vis.mcShape.S[2,1] * robot.mechanics.b4.vis.vis.mcShape.e_x[1] + (robot.mechanics.b4.vis.vis.mcShape.S[2,2] * robot.mechanics.b4.vis.vis.mcShape.e_x[2] + robot.mechanics.b4.vis.vis.mcShape.S[2,3] * robot.mechanics.b4.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b4.vis.vis.mcShape.rxvisobj[3] = robot.mechanics.b4.vis.vis.mcShape.S[3,1] * robot.mechanics.b4.vis.vis.mcShape.e_x[1] + (robot.mechanics.b4.vis.vis.mcShape.S[3,2] * robot.mechanics.b4.vis.vis.mcShape.e_x[2] + robot.mechanics.b4.vis.vis.mcShape.S[3,3] * robot.mechanics.b4.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b4.vis.vis.mcShape.ryvisobj[1] = robot.mechanics.b4.vis.vis.mcShape.S[1,1] * robot.mechanics.b4.vis.vis.mcShape.e_y[1] + (robot.mechanics.b4.vis.vis.mcShape.S[1,2] * robot.mechanics.b4.vis.vis.mcShape.e_y[2] + robot.mechanics.b4.vis.vis.mcShape.S[1,3] * robot.mechanics.b4.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b4.vis.vis.mcShape.ryvisobj[2] = robot.mechanics.b4.vis.vis.mcShape.S[2,1] * robot.mechanics.b4.vis.vis.mcShape.e_y[1] + (robot.mechanics.b4.vis.vis.mcShape.S[2,2] * robot.mechanics.b4.vis.vis.mcShape.e_y[2] + robot.mechanics.b4.vis.vis.mcShape.S[2,3] * robot.mechanics.b4.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b4.vis.vis.mcShape.ryvisobj[3] = robot.mechanics.b4.vis.vis.mcShape.S[3,1] * robot.mechanics.b4.vis.vis.mcShape.e_y[1] + (robot.mechanics.b4.vis.vis.mcShape.S[3,2] * robot.mechanics.b4.vis.vis.mcShape.e_y[2] + robot.mechanics.b4.vis.vis.mcShape.S[3,3] * robot.mechanics.b4.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b4.vis.vis.mcShape.rvisobj[1] = robot.mechanics.b4.vis.vis.mcShape.r[1] + (robot.mechanics.b4.vis.vis.mcShape.S[1,1] * robot.mechanics.b4.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b4.vis.vis.mcShape.S[1,2] * robot.mechanics.b4.vis.vis.mcShape.r_shape[2] + robot.mechanics.b4.vis.vis.mcShape.S[1,3] * robot.mechanics.b4.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b4.vis.vis.mcShape.rvisobj[2] = robot.mechanics.b4.vis.vis.mcShape.r[2] + (robot.mechanics.b4.vis.vis.mcShape.S[2,1] * robot.mechanics.b4.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b4.vis.vis.mcShape.S[2,2] * robot.mechanics.b4.vis.vis.mcShape.r_shape[2] + robot.mechanics.b4.vis.vis.mcShape.S[2,3] * robot.mechanics.b4.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b4.vis.vis.mcShape.rvisobj[3] = robot.mechanics.b4.vis.vis.mcShape.r[3] + (robot.mechanics.b4.vis.vis.mcShape.S[3,1] * robot.mechanics.b4.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b4.vis.vis.mcShape.S[3,2] * robot.mechanics.b4.vis.vis.mcShape.r_shape[2] + robot.mechanics.b4.vis.vis.mcShape.S[3,3] * robot.mechanics.b4.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b4.vis.vis.mcShape.e_x[1] = robot.mechanics.b4.vis.vis.nLength[1];
//   robot.mechanics.b4.vis.vis.mcShape.e_x[2] = robot.mechanics.b4.vis.vis.nLength[2];
//   robot.mechanics.b4.vis.vis.mcShape.e_x[3] = robot.mechanics.b4.vis.vis.nLength[3];
//   robot.mechanics.b4.vis.vis.mcShape.e_y[1] = robot.mechanics.b4.vis.vis.nWidth[1];
//   robot.mechanics.b4.vis.vis.mcShape.e_y[2] = robot.mechanics.b4.vis.vis.nWidth[2];
//   robot.mechanics.b4.vis.vis.mcShape.e_y[3] = robot.mechanics.b4.vis.vis.nWidth[3];
//   robot.mechanics.b4.vis.vis.mcShape.e_z[1] = robot.mechanics.b4.vis.vis.nHeight[1];
//   robot.mechanics.b4.vis.vis.mcShape.e_z[2] = robot.mechanics.b4.vis.vis.nHeight[2];
//   robot.mechanics.b4.vis.vis.mcShape.e_z[3] = robot.mechanics.b4.vis.vis.nHeight[3];
//   robot.mechanics.b4.vis.vis.S[1,1] = robot.mechanics.b4.vis.Sa[1,1];
//   robot.mechanics.b4.vis.vis.S[1,2] = robot.mechanics.b4.vis.Sa[1,2];
//   robot.mechanics.b4.vis.vis.S[1,3] = robot.mechanics.b4.vis.Sa[1,3];
//   robot.mechanics.b4.vis.vis.S[2,1] = robot.mechanics.b4.vis.Sa[2,1];
//   robot.mechanics.b4.vis.vis.S[2,2] = robot.mechanics.b4.vis.Sa[2,2];
//   robot.mechanics.b4.vis.vis.S[2,3] = robot.mechanics.b4.vis.Sa[2,3];
//   robot.mechanics.b4.vis.vis.S[3,1] = robot.mechanics.b4.vis.Sa[3,1];
//   robot.mechanics.b4.vis.vis.S[3,2] = robot.mechanics.b4.vis.Sa[3,2];
//   robot.mechanics.b4.vis.vis.S[3,3] = robot.mechanics.b4.vis.Sa[3,3];
//   robot.mechanics.b4.vis.vis.r[1] = robot.mechanics.b4.vis.r0a[1];
//   robot.mechanics.b4.vis.vis.r[2] = robot.mechanics.b4.vis.r0a[2];
//   robot.mechanics.b4.vis.vis.r[3] = robot.mechanics.b4.vis.r0a[3];
//   robot.mechanics.b4.vis.vis.nLength[1] = robot.mechanics.b4.vis.nLength[1];
//   robot.mechanics.b4.vis.vis.nLength[2] = robot.mechanics.b4.vis.nLength[2];
//   robot.mechanics.b4.vis.vis.nLength[3] = robot.mechanics.b4.vis.nLength[3];
//   robot.mechanics.b4.vis.vis.nWidth[1] = robot.mechanics.b4.vis.nWidth[1];
//   robot.mechanics.b4.vis.vis.nWidth[2] = robot.mechanics.b4.vis.nWidth[2];
//   robot.mechanics.b4.vis.vis.nWidth[3] = robot.mechanics.b4.vis.nWidth[3];
//   robot.mechanics.b4.vis.vis.nHeight[1] = robot.mechanics.b4.vis.nHeight[1];
//   robot.mechanics.b4.vis.vis.nHeight[2] = robot.mechanics.b4.vis.nHeight[2];
//   robot.mechanics.b4.vis.vis.nHeight[3] = robot.mechanics.b4.vis.nHeight[3];
//   robot.mechanics.b4.vis.fa[1] = 0.0;
//   robot.mechanics.b4.vis.fa[2] = 0.0;
//   robot.mechanics.b4.vis.fa[3] = 0.0;
//   robot.mechanics.b4.vis.ta[1] = 0.0;
//   robot.mechanics.b4.vis.ta[2] = 0.0;
//   robot.mechanics.b4.vis.ta[3] = 0.0;
//   robot.mechanics.b4.vis.frame_a.t[1] + ((-robot.mechanics.b4.frame_a.t[1]) + robot.mechanics.b4.body.frame_a.t[1]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.t[2] + ((-robot.mechanics.b4.frame_a.t[2]) + robot.mechanics.b4.body.frame_a.t[2]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.t[3] + ((-robot.mechanics.b4.frame_a.t[3]) + robot.mechanics.b4.body.frame_a.t[3]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.f[1] + ((-robot.mechanics.b4.frame_a.f[1]) + robot.mechanics.b4.body.frame_a.f[1]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.f[2] + ((-robot.mechanics.b4.frame_a.f[2]) + robot.mechanics.b4.body.frame_a.f[2]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.f[3] + ((-robot.mechanics.b4.frame_a.f[3]) + robot.mechanics.b4.body.frame_a.f[3]) = 0.0;
//   robot.mechanics.b4.vis.frame_a.z[1] = robot.mechanics.b4.frame_a.z[1];
//   robot.mechanics.b4.frame_a.z[1] = robot.mechanics.b4.body.frame_a.z[1];
//   robot.mechanics.b4.vis.frame_a.z[2] = robot.mechanics.b4.frame_a.z[2];
//   robot.mechanics.b4.frame_a.z[2] = robot.mechanics.b4.body.frame_a.z[2];
//   robot.mechanics.b4.vis.frame_a.z[3] = robot.mechanics.b4.frame_a.z[3];
//   robot.mechanics.b4.frame_a.z[3] = robot.mechanics.b4.body.frame_a.z[3];
//   robot.mechanics.b4.vis.frame_a.a[1] = robot.mechanics.b4.frame_a.a[1];
//   robot.mechanics.b4.frame_a.a[1] = robot.mechanics.b4.body.frame_a.a[1];
//   robot.mechanics.b4.vis.frame_a.a[2] = robot.mechanics.b4.frame_a.a[2];
//   robot.mechanics.b4.frame_a.a[2] = robot.mechanics.b4.body.frame_a.a[2];
//   robot.mechanics.b4.vis.frame_a.a[3] = robot.mechanics.b4.frame_a.a[3];
//   robot.mechanics.b4.frame_a.a[3] = robot.mechanics.b4.body.frame_a.a[3];
//   robot.mechanics.b4.vis.frame_a.w[1] = robot.mechanics.b4.frame_a.w[1];
//   robot.mechanics.b4.frame_a.w[1] = robot.mechanics.b4.body.frame_a.w[1];
//   robot.mechanics.b4.vis.frame_a.w[2] = robot.mechanics.b4.frame_a.w[2];
//   robot.mechanics.b4.frame_a.w[2] = robot.mechanics.b4.body.frame_a.w[2];
//   robot.mechanics.b4.vis.frame_a.w[3] = robot.mechanics.b4.frame_a.w[3];
//   robot.mechanics.b4.frame_a.w[3] = robot.mechanics.b4.body.frame_a.w[3];
//   robot.mechanics.b4.vis.frame_a.v[1] = robot.mechanics.b4.frame_a.v[1];
//   robot.mechanics.b4.frame_a.v[1] = robot.mechanics.b4.body.frame_a.v[1];
//   robot.mechanics.b4.vis.frame_a.v[2] = robot.mechanics.b4.frame_a.v[2];
//   robot.mechanics.b4.frame_a.v[2] = robot.mechanics.b4.body.frame_a.v[2];
//   robot.mechanics.b4.vis.frame_a.v[3] = robot.mechanics.b4.frame_a.v[3];
//   robot.mechanics.b4.frame_a.v[3] = robot.mechanics.b4.body.frame_a.v[3];
//   robot.mechanics.b4.vis.frame_a.S[1,1] = robot.mechanics.b4.frame_a.S[1,1];
//   robot.mechanics.b4.frame_a.S[1,1] = robot.mechanics.b4.body.frame_a.S[1,1];
//   robot.mechanics.b4.vis.frame_a.S[1,2] = robot.mechanics.b4.frame_a.S[1,2];
//   robot.mechanics.b4.frame_a.S[1,2] = robot.mechanics.b4.body.frame_a.S[1,2];
//   robot.mechanics.b4.vis.frame_a.S[1,3] = robot.mechanics.b4.frame_a.S[1,3];
//   robot.mechanics.b4.frame_a.S[1,3] = robot.mechanics.b4.body.frame_a.S[1,3];
//   robot.mechanics.b4.vis.frame_a.S[2,1] = robot.mechanics.b4.frame_a.S[2,1];
//   robot.mechanics.b4.frame_a.S[2,1] = robot.mechanics.b4.body.frame_a.S[2,1];
//   robot.mechanics.b4.vis.frame_a.S[2,2] = robot.mechanics.b4.frame_a.S[2,2];
//   robot.mechanics.b4.frame_a.S[2,2] = robot.mechanics.b4.body.frame_a.S[2,2];
//   robot.mechanics.b4.vis.frame_a.S[2,3] = robot.mechanics.b4.frame_a.S[2,3];
//   robot.mechanics.b4.frame_a.S[2,3] = robot.mechanics.b4.body.frame_a.S[2,3];
//   robot.mechanics.b4.vis.frame_a.S[3,1] = robot.mechanics.b4.frame_a.S[3,1];
//   robot.mechanics.b4.frame_a.S[3,1] = robot.mechanics.b4.body.frame_a.S[3,1];
//   robot.mechanics.b4.vis.frame_a.S[3,2] = robot.mechanics.b4.frame_a.S[3,2];
//   robot.mechanics.b4.frame_a.S[3,2] = robot.mechanics.b4.body.frame_a.S[3,2];
//   robot.mechanics.b4.vis.frame_a.S[3,3] = robot.mechanics.b4.frame_a.S[3,3];
//   robot.mechanics.b4.frame_a.S[3,3] = robot.mechanics.b4.body.frame_a.S[3,3];
//   robot.mechanics.b4.vis.frame_a.r0[1] = robot.mechanics.b4.frame_a.r0[1];
//   robot.mechanics.b4.frame_a.r0[1] = robot.mechanics.b4.body.frame_a.r0[1];
//   robot.mechanics.b4.vis.frame_a.r0[2] = robot.mechanics.b4.frame_a.r0[2];
//   robot.mechanics.b4.frame_a.r0[2] = robot.mechanics.b4.body.frame_a.r0[2];
//   robot.mechanics.b4.vis.frame_a.r0[3] = robot.mechanics.b4.frame_a.r0[3];
//   robot.mechanics.b4.frame_a.r0[3] = robot.mechanics.b4.body.frame_a.r0[3];
//   (-robot.mechanics.b4.frame_b.t[1]) + robot.mechanics.b4.body.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b4.frame_b.t[2]) + robot.mechanics.b4.body.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b4.frame_b.t[3]) + robot.mechanics.b4.body.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b4.frame_b.f[1]) + robot.mechanics.b4.body.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b4.frame_b.f[2]) + robot.mechanics.b4.body.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b4.frame_b.f[3]) + robot.mechanics.b4.body.frame_b.f[3] = 0.0;
//   robot.mechanics.b4.frame_b.z[1] = robot.mechanics.b4.body.frame_b.z[1];
//   robot.mechanics.b4.frame_b.z[2] = robot.mechanics.b4.body.frame_b.z[2];
//   robot.mechanics.b4.frame_b.z[3] = robot.mechanics.b4.body.frame_b.z[3];
//   robot.mechanics.b4.frame_b.a[1] = robot.mechanics.b4.body.frame_b.a[1];
//   robot.mechanics.b4.frame_b.a[2] = robot.mechanics.b4.body.frame_b.a[2];
//   robot.mechanics.b4.frame_b.a[3] = robot.mechanics.b4.body.frame_b.a[3];
//   robot.mechanics.b4.frame_b.w[1] = robot.mechanics.b4.body.frame_b.w[1];
//   robot.mechanics.b4.frame_b.w[2] = robot.mechanics.b4.body.frame_b.w[2];
//   robot.mechanics.b4.frame_b.w[3] = robot.mechanics.b4.body.frame_b.w[3];
//   robot.mechanics.b4.frame_b.v[1] = robot.mechanics.b4.body.frame_b.v[1];
//   robot.mechanics.b4.frame_b.v[2] = robot.mechanics.b4.body.frame_b.v[2];
//   robot.mechanics.b4.frame_b.v[3] = robot.mechanics.b4.body.frame_b.v[3];
//   robot.mechanics.b4.frame_b.S[1,1] = robot.mechanics.b4.body.frame_b.S[1,1];
//   robot.mechanics.b4.frame_b.S[1,2] = robot.mechanics.b4.body.frame_b.S[1,2];
//   robot.mechanics.b4.frame_b.S[1,3] = robot.mechanics.b4.body.frame_b.S[1,3];
//   robot.mechanics.b4.frame_b.S[2,1] = robot.mechanics.b4.body.frame_b.S[2,1];
//   robot.mechanics.b4.frame_b.S[2,2] = robot.mechanics.b4.body.frame_b.S[2,2];
//   robot.mechanics.b4.frame_b.S[2,3] = robot.mechanics.b4.body.frame_b.S[2,3];
//   robot.mechanics.b4.frame_b.S[3,1] = robot.mechanics.b4.body.frame_b.S[3,1];
//   robot.mechanics.b4.frame_b.S[3,2] = robot.mechanics.b4.body.frame_b.S[3,2];
//   robot.mechanics.b4.frame_b.S[3,3] = robot.mechanics.b4.body.frame_b.S[3,3];
//   robot.mechanics.b4.frame_b.r0[1] = robot.mechanics.b4.body.frame_b.r0[1];
//   robot.mechanics.b4.frame_b.r0[2] = robot.mechanics.b4.body.frame_b.r0[2];
//   robot.mechanics.b4.frame_b.r0[3] = robot.mechanics.b4.body.frame_b.r0[3];
//   robot.mechanics.b5.body.frameTranslation.Sb[1,1] = robot.mechanics.b5.body.frameTranslation.Sa[1,1];
//   robot.mechanics.b5.body.frameTranslation.Sb[1,2] = robot.mechanics.b5.body.frameTranslation.Sa[1,2];
//   robot.mechanics.b5.body.frameTranslation.Sb[1,3] = robot.mechanics.b5.body.frameTranslation.Sa[1,3];
//   robot.mechanics.b5.body.frameTranslation.Sb[2,1] = robot.mechanics.b5.body.frameTranslation.Sa[2,1];
//   robot.mechanics.b5.body.frameTranslation.Sb[2,2] = robot.mechanics.b5.body.frameTranslation.Sa[2,2];
//   robot.mechanics.b5.body.frameTranslation.Sb[2,3] = robot.mechanics.b5.body.frameTranslation.Sa[2,3];
//   robot.mechanics.b5.body.frameTranslation.Sb[3,1] = robot.mechanics.b5.body.frameTranslation.Sa[3,1];
//   robot.mechanics.b5.body.frameTranslation.Sb[3,2] = robot.mechanics.b5.body.frameTranslation.Sa[3,2];
//   robot.mechanics.b5.body.frameTranslation.Sb[3,3] = robot.mechanics.b5.body.frameTranslation.Sa[3,3];
//   robot.mechanics.b5.body.frameTranslation.wb[1] = robot.mechanics.b5.body.frameTranslation.wa[1];
//   robot.mechanics.b5.body.frameTranslation.wb[2] = robot.mechanics.b5.body.frameTranslation.wa[2];
//   robot.mechanics.b5.body.frameTranslation.wb[3] = robot.mechanics.b5.body.frameTranslation.wa[3];
//   robot.mechanics.b5.body.frameTranslation.zb[1] = robot.mechanics.b5.body.frameTranslation.za[1];
//   robot.mechanics.b5.body.frameTranslation.zb[2] = robot.mechanics.b5.body.frameTranslation.za[2];
//   robot.mechanics.b5.body.frameTranslation.zb[3] = robot.mechanics.b5.body.frameTranslation.za[3];
//   robot.mechanics.b5.body.frameTranslation.r0b[1] = robot.mechanics.b5.body.frameTranslation.r0a[1] + (robot.mechanics.b5.body.frameTranslation.Sa[1,1] * robot.mechanics.b5.body.frameTranslation.r[1] + (robot.mechanics.b5.body.frameTranslation.Sa[1,2] * robot.mechanics.b5.body.frameTranslation.r[2] + robot.mechanics.b5.body.frameTranslation.Sa[1,3] * robot.mechanics.b5.body.frameTranslation.r[3]));
//   robot.mechanics.b5.body.frameTranslation.r0b[2] = robot.mechanics.b5.body.frameTranslation.r0a[2] + (robot.mechanics.b5.body.frameTranslation.Sa[2,1] * robot.mechanics.b5.body.frameTranslation.r[1] + (robot.mechanics.b5.body.frameTranslation.Sa[2,2] * robot.mechanics.b5.body.frameTranslation.r[2] + robot.mechanics.b5.body.frameTranslation.Sa[2,3] * robot.mechanics.b5.body.frameTranslation.r[3]));
//   robot.mechanics.b5.body.frameTranslation.r0b[3] = robot.mechanics.b5.body.frameTranslation.r0a[3] + (robot.mechanics.b5.body.frameTranslation.Sa[3,1] * robot.mechanics.b5.body.frameTranslation.r[1] + (robot.mechanics.b5.body.frameTranslation.Sa[3,2] * robot.mechanics.b5.body.frameTranslation.r[2] + robot.mechanics.b5.body.frameTranslation.Sa[3,3] * robot.mechanics.b5.body.frameTranslation.r[3]));
//   robot.mechanics.b5.body.frameTranslation.vaux[1] = robot.mechanics.b5.body.frameTranslation.wa[2] * robot.mechanics.b5.body.frameTranslation.r[3] - robot.mechanics.b5.body.frameTranslation.wa[3] * robot.mechanics.b5.body.frameTranslation.r[2];
//   robot.mechanics.b5.body.frameTranslation.vaux[2] = robot.mechanics.b5.body.frameTranslation.wa[3] * robot.mechanics.b5.body.frameTranslation.r[1] - robot.mechanics.b5.body.frameTranslation.wa[1] * robot.mechanics.b5.body.frameTranslation.r[3];
//   robot.mechanics.b5.body.frameTranslation.vaux[3] = robot.mechanics.b5.body.frameTranslation.wa[1] * robot.mechanics.b5.body.frameTranslation.r[2] - robot.mechanics.b5.body.frameTranslation.wa[2] * robot.mechanics.b5.body.frameTranslation.r[1];
//   robot.mechanics.b5.body.frameTranslation.vb[1] = robot.mechanics.b5.body.frameTranslation.va[1] + robot.mechanics.b5.body.frameTranslation.vaux[1];
//   robot.mechanics.b5.body.frameTranslation.vb[2] = robot.mechanics.b5.body.frameTranslation.va[2] + robot.mechanics.b5.body.frameTranslation.vaux[2];
//   robot.mechanics.b5.body.frameTranslation.vb[3] = robot.mechanics.b5.body.frameTranslation.va[3] + robot.mechanics.b5.body.frameTranslation.vaux[3];
//   robot.mechanics.b5.body.frameTranslation.ab[1] = robot.mechanics.b5.body.frameTranslation.aa[1] + (robot.mechanics.b5.body.frameTranslation.za[2] * robot.mechanics.b5.body.frameTranslation.r[3] + ((-robot.mechanics.b5.body.frameTranslation.za[3] * robot.mechanics.b5.body.frameTranslation.r[2]) + (robot.mechanics.b5.body.frameTranslation.wa[2] * robot.mechanics.b5.body.frameTranslation.vaux[3] + (-robot.mechanics.b5.body.frameTranslation.wa[3] * robot.mechanics.b5.body.frameTranslation.vaux[2]))));
//   robot.mechanics.b5.body.frameTranslation.ab[2] = robot.mechanics.b5.body.frameTranslation.aa[2] + (robot.mechanics.b5.body.frameTranslation.za[3] * robot.mechanics.b5.body.frameTranslation.r[1] + ((-robot.mechanics.b5.body.frameTranslation.za[1] * robot.mechanics.b5.body.frameTranslation.r[3]) + (robot.mechanics.b5.body.frameTranslation.wa[3] * robot.mechanics.b5.body.frameTranslation.vaux[1] + (-robot.mechanics.b5.body.frameTranslation.wa[1] * robot.mechanics.b5.body.frameTranslation.vaux[3]))));
//   robot.mechanics.b5.body.frameTranslation.ab[3] = robot.mechanics.b5.body.frameTranslation.aa[3] + (robot.mechanics.b5.body.frameTranslation.za[1] * robot.mechanics.b5.body.frameTranslation.r[2] + ((-robot.mechanics.b5.body.frameTranslation.za[2] * robot.mechanics.b5.body.frameTranslation.r[1]) + (robot.mechanics.b5.body.frameTranslation.wa[1] * robot.mechanics.b5.body.frameTranslation.vaux[2] + (-robot.mechanics.b5.body.frameTranslation.wa[2] * robot.mechanics.b5.body.frameTranslation.vaux[1]))));
//   robot.mechanics.b5.body.frameTranslation.fa[1] = robot.mechanics.b5.body.frameTranslation.fb[1];
//   robot.mechanics.b5.body.frameTranslation.fa[2] = robot.mechanics.b5.body.frameTranslation.fb[2];
//   robot.mechanics.b5.body.frameTranslation.fa[3] = robot.mechanics.b5.body.frameTranslation.fb[3];
//   robot.mechanics.b5.body.frameTranslation.ta[1] = robot.mechanics.b5.body.frameTranslation.tb[1] + (robot.mechanics.b5.body.frameTranslation.r[2] * robot.mechanics.b5.body.frameTranslation.fa[3] + (-robot.mechanics.b5.body.frameTranslation.r[3] * robot.mechanics.b5.body.frameTranslation.fa[2]));
//   robot.mechanics.b5.body.frameTranslation.ta[2] = robot.mechanics.b5.body.frameTranslation.tb[2] + (robot.mechanics.b5.body.frameTranslation.r[3] * robot.mechanics.b5.body.frameTranslation.fa[1] + (-robot.mechanics.b5.body.frameTranslation.r[1] * robot.mechanics.b5.body.frameTranslation.fa[3]));
//   robot.mechanics.b5.body.frameTranslation.ta[3] = robot.mechanics.b5.body.frameTranslation.tb[3] + (robot.mechanics.b5.body.frameTranslation.r[1] * robot.mechanics.b5.body.frameTranslation.fa[2] + (-robot.mechanics.b5.body.frameTranslation.r[2] * robot.mechanics.b5.body.frameTranslation.fa[1]));
//   robot.mechanics.b5.body.body.fa[1] = robot.mechanics.b5.body.body.m * (robot.mechanics.b5.body.body.aa[1] + (robot.mechanics.b5.body.body.za[2] * robot.mechanics.b5.body.body.rCM[3] + ((-robot.mechanics.b5.body.body.za[3] * robot.mechanics.b5.body.body.rCM[2]) + (robot.mechanics.b5.body.body.wa[2] * (robot.mechanics.b5.body.body.wa[1] * robot.mechanics.b5.body.body.rCM[2] - robot.mechanics.b5.body.body.wa[2] * robot.mechanics.b5.body.body.rCM[1]) + (-robot.mechanics.b5.body.body.wa[3] * (robot.mechanics.b5.body.body.wa[3] * robot.mechanics.b5.body.body.rCM[1] - robot.mechanics.b5.body.body.wa[1] * robot.mechanics.b5.body.body.rCM[3]))))));
//   robot.mechanics.b5.body.body.fa[2] = robot.mechanics.b5.body.body.m * (robot.mechanics.b5.body.body.aa[2] + (robot.mechanics.b5.body.body.za[3] * robot.mechanics.b5.body.body.rCM[1] + ((-robot.mechanics.b5.body.body.za[1] * robot.mechanics.b5.body.body.rCM[3]) + (robot.mechanics.b5.body.body.wa[3] * (robot.mechanics.b5.body.body.wa[2] * robot.mechanics.b5.body.body.rCM[3] - robot.mechanics.b5.body.body.wa[3] * robot.mechanics.b5.body.body.rCM[2]) + (-robot.mechanics.b5.body.body.wa[1] * (robot.mechanics.b5.body.body.wa[1] * robot.mechanics.b5.body.body.rCM[2] - robot.mechanics.b5.body.body.wa[2] * robot.mechanics.b5.body.body.rCM[1]))))));
//   robot.mechanics.b5.body.body.fa[3] = robot.mechanics.b5.body.body.m * (robot.mechanics.b5.body.body.aa[3] + (robot.mechanics.b5.body.body.za[1] * robot.mechanics.b5.body.body.rCM[2] + ((-robot.mechanics.b5.body.body.za[2] * robot.mechanics.b5.body.body.rCM[1]) + (robot.mechanics.b5.body.body.wa[1] * (robot.mechanics.b5.body.body.wa[3] * robot.mechanics.b5.body.body.rCM[1] - robot.mechanics.b5.body.body.wa[1] * robot.mechanics.b5.body.body.rCM[3]) + (-robot.mechanics.b5.body.body.wa[2] * (robot.mechanics.b5.body.body.wa[2] * robot.mechanics.b5.body.body.rCM[3] - robot.mechanics.b5.body.body.wa[3] * robot.mechanics.b5.body.body.rCM[2]))))));
//   robot.mechanics.b5.body.body.ta[1] = robot.mechanics.b5.body.body.I[1,1] * robot.mechanics.b5.body.body.za[1] + (robot.mechanics.b5.body.body.I[1,2] * robot.mechanics.b5.body.body.za[2] + (robot.mechanics.b5.body.body.I[1,3] * robot.mechanics.b5.body.body.za[3] + (robot.mechanics.b5.body.body.wa[2] * (robot.mechanics.b5.body.body.I[3,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[3,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[3,3] * robot.mechanics.b5.body.body.wa[3])) + ((-robot.mechanics.b5.body.body.wa[3] * (robot.mechanics.b5.body.body.I[2,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[2,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[2,3] * robot.mechanics.b5.body.body.wa[3]))) + (robot.mechanics.b5.body.body.rCM[2] * robot.mechanics.b5.body.body.fa[3] + (-robot.mechanics.b5.body.body.rCM[3] * robot.mechanics.b5.body.body.fa[2]))))));
//   robot.mechanics.b5.body.body.ta[2] = robot.mechanics.b5.body.body.I[2,1] * robot.mechanics.b5.body.body.za[1] + (robot.mechanics.b5.body.body.I[2,2] * robot.mechanics.b5.body.body.za[2] + (robot.mechanics.b5.body.body.I[2,3] * robot.mechanics.b5.body.body.za[3] + (robot.mechanics.b5.body.body.wa[3] * (robot.mechanics.b5.body.body.I[1,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[1,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[1,3] * robot.mechanics.b5.body.body.wa[3])) + ((-robot.mechanics.b5.body.body.wa[1] * (robot.mechanics.b5.body.body.I[3,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[3,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[3,3] * robot.mechanics.b5.body.body.wa[3]))) + (robot.mechanics.b5.body.body.rCM[3] * robot.mechanics.b5.body.body.fa[1] + (-robot.mechanics.b5.body.body.rCM[1] * robot.mechanics.b5.body.body.fa[3]))))));
//   robot.mechanics.b5.body.body.ta[3] = robot.mechanics.b5.body.body.I[3,1] * robot.mechanics.b5.body.body.za[1] + (robot.mechanics.b5.body.body.I[3,2] * robot.mechanics.b5.body.body.za[2] + (robot.mechanics.b5.body.body.I[3,3] * robot.mechanics.b5.body.body.za[3] + (robot.mechanics.b5.body.body.wa[1] * (robot.mechanics.b5.body.body.I[2,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[2,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[2,3] * robot.mechanics.b5.body.body.wa[3])) + ((-robot.mechanics.b5.body.body.wa[2] * (robot.mechanics.b5.body.body.I[1,1] * robot.mechanics.b5.body.body.wa[1] + (robot.mechanics.b5.body.body.I[1,2] * robot.mechanics.b5.body.body.wa[2] + robot.mechanics.b5.body.body.I[1,3] * robot.mechanics.b5.body.body.wa[3]))) + (robot.mechanics.b5.body.body.rCM[1] * robot.mechanics.b5.body.body.fa[2] + (-robot.mechanics.b5.body.body.rCM[2] * robot.mechanics.b5.body.body.fa[1]))))));
//   robot.mechanics.b5.body.body.m = robot.mechanics.b5.body.m;
//   robot.mechanics.b5.body.body.rCM[1] = robot.mechanics.b5.body.rCM[1];
//   robot.mechanics.b5.body.body.rCM[2] = robot.mechanics.b5.body.rCM[2];
//   robot.mechanics.b5.body.body.rCM[3] = robot.mechanics.b5.body.rCM[3];
//   robot.mechanics.b5.body.body.I[1,1] = robot.mechanics.b5.body.I11;
//   robot.mechanics.b5.body.body.I[1,2] = robot.mechanics.b5.body.I21;
//   robot.mechanics.b5.body.body.I[1,3] = robot.mechanics.b5.body.I31;
//   robot.mechanics.b5.body.body.I[2,1] = robot.mechanics.b5.body.I21;
//   robot.mechanics.b5.body.body.I[2,2] = robot.mechanics.b5.body.I22;
//   robot.mechanics.b5.body.body.I[2,3] = robot.mechanics.b5.body.I32;
//   robot.mechanics.b5.body.body.I[3,1] = robot.mechanics.b5.body.I31;
//   robot.mechanics.b5.body.body.I[3,2] = robot.mechanics.b5.body.I32;
//   robot.mechanics.b5.body.body.I[3,3] = robot.mechanics.b5.body.I33;
//   (-robot.mechanics.b5.body.frame_a.t[1]) + (robot.mechanics.b5.body.body.frame_a.t[1] + robot.mechanics.b5.body.frameTranslation.frame_a.t[1]) = 0.0;
//   (-robot.mechanics.b5.body.frame_a.t[2]) + (robot.mechanics.b5.body.body.frame_a.t[2] + robot.mechanics.b5.body.frameTranslation.frame_a.t[2]) = 0.0;
//   (-robot.mechanics.b5.body.frame_a.t[3]) + (robot.mechanics.b5.body.body.frame_a.t[3] + robot.mechanics.b5.body.frameTranslation.frame_a.t[3]) = 0.0;
//   (-robot.mechanics.b5.body.frame_a.f[1]) + (robot.mechanics.b5.body.body.frame_a.f[1] + robot.mechanics.b5.body.frameTranslation.frame_a.f[1]) = 0.0;
//   (-robot.mechanics.b5.body.frame_a.f[2]) + (robot.mechanics.b5.body.body.frame_a.f[2] + robot.mechanics.b5.body.frameTranslation.frame_a.f[2]) = 0.0;
//   (-robot.mechanics.b5.body.frame_a.f[3]) + (robot.mechanics.b5.body.body.frame_a.f[3] + robot.mechanics.b5.body.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.b5.body.frame_a.z[1] = robot.mechanics.b5.body.body.frame_a.z[1];
//   robot.mechanics.b5.body.body.frame_a.z[1] = robot.mechanics.b5.body.frameTranslation.frame_a.z[1];
//   robot.mechanics.b5.body.frame_a.z[2] = robot.mechanics.b5.body.body.frame_a.z[2];
//   robot.mechanics.b5.body.body.frame_a.z[2] = robot.mechanics.b5.body.frameTranslation.frame_a.z[2];
//   robot.mechanics.b5.body.frame_a.z[3] = robot.mechanics.b5.body.body.frame_a.z[3];
//   robot.mechanics.b5.body.body.frame_a.z[3] = robot.mechanics.b5.body.frameTranslation.frame_a.z[3];
//   robot.mechanics.b5.body.frame_a.a[1] = robot.mechanics.b5.body.body.frame_a.a[1];
//   robot.mechanics.b5.body.body.frame_a.a[1] = robot.mechanics.b5.body.frameTranslation.frame_a.a[1];
//   robot.mechanics.b5.body.frame_a.a[2] = robot.mechanics.b5.body.body.frame_a.a[2];
//   robot.mechanics.b5.body.body.frame_a.a[2] = robot.mechanics.b5.body.frameTranslation.frame_a.a[2];
//   robot.mechanics.b5.body.frame_a.a[3] = robot.mechanics.b5.body.body.frame_a.a[3];
//   robot.mechanics.b5.body.body.frame_a.a[3] = robot.mechanics.b5.body.frameTranslation.frame_a.a[3];
//   robot.mechanics.b5.body.frame_a.w[1] = robot.mechanics.b5.body.body.frame_a.w[1];
//   robot.mechanics.b5.body.body.frame_a.w[1] = robot.mechanics.b5.body.frameTranslation.frame_a.w[1];
//   robot.mechanics.b5.body.frame_a.w[2] = robot.mechanics.b5.body.body.frame_a.w[2];
//   robot.mechanics.b5.body.body.frame_a.w[2] = robot.mechanics.b5.body.frameTranslation.frame_a.w[2];
//   robot.mechanics.b5.body.frame_a.w[3] = robot.mechanics.b5.body.body.frame_a.w[3];
//   robot.mechanics.b5.body.body.frame_a.w[3] = robot.mechanics.b5.body.frameTranslation.frame_a.w[3];
//   robot.mechanics.b5.body.frame_a.v[1] = robot.mechanics.b5.body.body.frame_a.v[1];
//   robot.mechanics.b5.body.body.frame_a.v[1] = robot.mechanics.b5.body.frameTranslation.frame_a.v[1];
//   robot.mechanics.b5.body.frame_a.v[2] = robot.mechanics.b5.body.body.frame_a.v[2];
//   robot.mechanics.b5.body.body.frame_a.v[2] = robot.mechanics.b5.body.frameTranslation.frame_a.v[2];
//   robot.mechanics.b5.body.frame_a.v[3] = robot.mechanics.b5.body.body.frame_a.v[3];
//   robot.mechanics.b5.body.body.frame_a.v[3] = robot.mechanics.b5.body.frameTranslation.frame_a.v[3];
//   robot.mechanics.b5.body.frame_a.S[1,1] = robot.mechanics.b5.body.body.frame_a.S[1,1];
//   robot.mechanics.b5.body.body.frame_a.S[1,1] = robot.mechanics.b5.body.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.b5.body.frame_a.S[1,2] = robot.mechanics.b5.body.body.frame_a.S[1,2];
//   robot.mechanics.b5.body.body.frame_a.S[1,2] = robot.mechanics.b5.body.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.b5.body.frame_a.S[1,3] = robot.mechanics.b5.body.body.frame_a.S[1,3];
//   robot.mechanics.b5.body.body.frame_a.S[1,3] = robot.mechanics.b5.body.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.b5.body.frame_a.S[2,1] = robot.mechanics.b5.body.body.frame_a.S[2,1];
//   robot.mechanics.b5.body.body.frame_a.S[2,1] = robot.mechanics.b5.body.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.b5.body.frame_a.S[2,2] = robot.mechanics.b5.body.body.frame_a.S[2,2];
//   robot.mechanics.b5.body.body.frame_a.S[2,2] = robot.mechanics.b5.body.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.b5.body.frame_a.S[2,3] = robot.mechanics.b5.body.body.frame_a.S[2,3];
//   robot.mechanics.b5.body.body.frame_a.S[2,3] = robot.mechanics.b5.body.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.b5.body.frame_a.S[3,1] = robot.mechanics.b5.body.body.frame_a.S[3,1];
//   robot.mechanics.b5.body.body.frame_a.S[3,1] = robot.mechanics.b5.body.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.b5.body.frame_a.S[3,2] = robot.mechanics.b5.body.body.frame_a.S[3,2];
//   robot.mechanics.b5.body.body.frame_a.S[3,2] = robot.mechanics.b5.body.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.b5.body.frame_a.S[3,3] = robot.mechanics.b5.body.body.frame_a.S[3,3];
//   robot.mechanics.b5.body.body.frame_a.S[3,3] = robot.mechanics.b5.body.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.b5.body.frame_a.r0[1] = robot.mechanics.b5.body.body.frame_a.r0[1];
//   robot.mechanics.b5.body.body.frame_a.r0[1] = robot.mechanics.b5.body.frameTranslation.frame_a.r0[1];
//   robot.mechanics.b5.body.frame_a.r0[2] = robot.mechanics.b5.body.body.frame_a.r0[2];
//   robot.mechanics.b5.body.body.frame_a.r0[2] = robot.mechanics.b5.body.frameTranslation.frame_a.r0[2];
//   robot.mechanics.b5.body.frame_a.r0[3] = robot.mechanics.b5.body.body.frame_a.r0[3];
//   robot.mechanics.b5.body.body.frame_a.r0[3] = robot.mechanics.b5.body.frameTranslation.frame_a.r0[3];
//   (-robot.mechanics.b5.body.frame_b.t[1]) + robot.mechanics.b5.body.frameTranslation.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b5.body.frame_b.t[2]) + robot.mechanics.b5.body.frameTranslation.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b5.body.frame_b.t[3]) + robot.mechanics.b5.body.frameTranslation.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b5.body.frame_b.f[1]) + robot.mechanics.b5.body.frameTranslation.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b5.body.frame_b.f[2]) + robot.mechanics.b5.body.frameTranslation.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b5.body.frame_b.f[3]) + robot.mechanics.b5.body.frameTranslation.frame_b.f[3] = 0.0;
//   robot.mechanics.b5.body.frame_b.z[1] = robot.mechanics.b5.body.frameTranslation.frame_b.z[1];
//   robot.mechanics.b5.body.frame_b.z[2] = robot.mechanics.b5.body.frameTranslation.frame_b.z[2];
//   robot.mechanics.b5.body.frame_b.z[3] = robot.mechanics.b5.body.frameTranslation.frame_b.z[3];
//   robot.mechanics.b5.body.frame_b.a[1] = robot.mechanics.b5.body.frameTranslation.frame_b.a[1];
//   robot.mechanics.b5.body.frame_b.a[2] = robot.mechanics.b5.body.frameTranslation.frame_b.a[2];
//   robot.mechanics.b5.body.frame_b.a[3] = robot.mechanics.b5.body.frameTranslation.frame_b.a[3];
//   robot.mechanics.b5.body.frame_b.w[1] = robot.mechanics.b5.body.frameTranslation.frame_b.w[1];
//   robot.mechanics.b5.body.frame_b.w[2] = robot.mechanics.b5.body.frameTranslation.frame_b.w[2];
//   robot.mechanics.b5.body.frame_b.w[3] = robot.mechanics.b5.body.frameTranslation.frame_b.w[3];
//   robot.mechanics.b5.body.frame_b.v[1] = robot.mechanics.b5.body.frameTranslation.frame_b.v[1];
//   robot.mechanics.b5.body.frame_b.v[2] = robot.mechanics.b5.body.frameTranslation.frame_b.v[2];
//   robot.mechanics.b5.body.frame_b.v[3] = robot.mechanics.b5.body.frameTranslation.frame_b.v[3];
//   robot.mechanics.b5.body.frame_b.S[1,1] = robot.mechanics.b5.body.frameTranslation.frame_b.S[1,1];
//   robot.mechanics.b5.body.frame_b.S[1,2] = robot.mechanics.b5.body.frameTranslation.frame_b.S[1,2];
//   robot.mechanics.b5.body.frame_b.S[1,3] = robot.mechanics.b5.body.frameTranslation.frame_b.S[1,3];
//   robot.mechanics.b5.body.frame_b.S[2,1] = robot.mechanics.b5.body.frameTranslation.frame_b.S[2,1];
//   robot.mechanics.b5.body.frame_b.S[2,2] = robot.mechanics.b5.body.frameTranslation.frame_b.S[2,2];
//   robot.mechanics.b5.body.frame_b.S[2,3] = robot.mechanics.b5.body.frameTranslation.frame_b.S[2,3];
//   robot.mechanics.b5.body.frame_b.S[3,1] = robot.mechanics.b5.body.frameTranslation.frame_b.S[3,1];
//   robot.mechanics.b5.body.frame_b.S[3,2] = robot.mechanics.b5.body.frameTranslation.frame_b.S[3,2];
//   robot.mechanics.b5.body.frame_b.S[3,3] = robot.mechanics.b5.body.frameTranslation.frame_b.S[3,3];
//   robot.mechanics.b5.body.frame_b.r0[1] = robot.mechanics.b5.body.frameTranslation.frame_b.r0[1];
//   robot.mechanics.b5.body.frame_b.r0[2] = robot.mechanics.b5.body.frameTranslation.frame_b.r0[2];
//   robot.mechanics.b5.body.frame_b.r0[3] = robot.mechanics.b5.body.frameTranslation.frame_b.r0[3];
//   robot.mechanics.b5.vis.vis.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.b5.vis.vis.mcShape.shapeType);
//   robot.mechanics.b5.vis.vis.mcShape.Material = PackMaterial(robot.mechanics.b5.vis.vis.mcShape.color[1] / 255.0,robot.mechanics.b5.vis.vis.mcShape.color[2] / 255.0,robot.mechanics.b5.vis.vis.mcShape.color[3] / 255.0,robot.mechanics.b5.vis.vis.mcShape.specularCoefficient);
//   robot.mechanics.b5.vis.vis.mcShape.Extra = robot.mechanics.b5.vis.vis.mcShape.extra;
//   robot.mechanics.b5.vis.vis.mcShape.size[1] = robot.mechanics.b5.vis.vis.mcShape.length;
//   robot.mechanics.b5.vis.vis.mcShape.size[2] = robot.mechanics.b5.vis.vis.mcShape.width;
//   robot.mechanics.b5.vis.vis.mcShape.size[3] = robot.mechanics.b5.vis.vis.mcShape.height;
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[1,1] = robot.mechanics.b5.vis.vis.mcShape.e_x[1];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[1,2] = robot.mechanics.b5.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[1,3] = robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.e_y[3] - robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[2,1] = robot.mechanics.b5.vis.vis.mcShape.e_x[2];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[2,2] = robot.mechanics.b5.vis.vis.mcShape.e_y[2];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[2,3] = robot.mechanics.b5.vis.vis.mcShape.e_x[3] * robot.mechanics.b5.vis.vis.mcShape.e_y[1] - robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[3,1] = robot.mechanics.b5.vis.vis.mcShape.e_x[3];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[3,2] = robot.mechanics.b5.vis.vis.mcShape.e_y[3];
//   robot.mechanics.b5.vis.vis.mcShape.Sshape[3,3] = robot.mechanics.b5.vis.vis.mcShape.e_x[1] * robot.mechanics.b5.vis.vis.mcShape.e_y[2] - robot.mechanics.b5.vis.vis.mcShape.e_x[2] * robot.mechanics.b5.vis.vis.mcShape.e_y[1];
//   robot.mechanics.b5.vis.vis.mcShape.rxvisobj[1] = robot.mechanics.b5.vis.vis.mcShape.S[1,1] * robot.mechanics.b5.vis.vis.mcShape.e_x[1] + (robot.mechanics.b5.vis.vis.mcShape.S[1,2] * robot.mechanics.b5.vis.vis.mcShape.e_x[2] + robot.mechanics.b5.vis.vis.mcShape.S[1,3] * robot.mechanics.b5.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b5.vis.vis.mcShape.rxvisobj[2] = robot.mechanics.b5.vis.vis.mcShape.S[2,1] * robot.mechanics.b5.vis.vis.mcShape.e_x[1] + (robot.mechanics.b5.vis.vis.mcShape.S[2,2] * robot.mechanics.b5.vis.vis.mcShape.e_x[2] + robot.mechanics.b5.vis.vis.mcShape.S[2,3] * robot.mechanics.b5.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b5.vis.vis.mcShape.rxvisobj[3] = robot.mechanics.b5.vis.vis.mcShape.S[3,1] * robot.mechanics.b5.vis.vis.mcShape.e_x[1] + (robot.mechanics.b5.vis.vis.mcShape.S[3,2] * robot.mechanics.b5.vis.vis.mcShape.e_x[2] + robot.mechanics.b5.vis.vis.mcShape.S[3,3] * robot.mechanics.b5.vis.vis.mcShape.e_x[3]);
//   robot.mechanics.b5.vis.vis.mcShape.ryvisobj[1] = robot.mechanics.b5.vis.vis.mcShape.S[1,1] * robot.mechanics.b5.vis.vis.mcShape.e_y[1] + (robot.mechanics.b5.vis.vis.mcShape.S[1,2] * robot.mechanics.b5.vis.vis.mcShape.e_y[2] + robot.mechanics.b5.vis.vis.mcShape.S[1,3] * robot.mechanics.b5.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b5.vis.vis.mcShape.ryvisobj[2] = robot.mechanics.b5.vis.vis.mcShape.S[2,1] * robot.mechanics.b5.vis.vis.mcShape.e_y[1] + (robot.mechanics.b5.vis.vis.mcShape.S[2,2] * robot.mechanics.b5.vis.vis.mcShape.e_y[2] + robot.mechanics.b5.vis.vis.mcShape.S[2,3] * robot.mechanics.b5.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b5.vis.vis.mcShape.ryvisobj[3] = robot.mechanics.b5.vis.vis.mcShape.S[3,1] * robot.mechanics.b5.vis.vis.mcShape.e_y[1] + (robot.mechanics.b5.vis.vis.mcShape.S[3,2] * robot.mechanics.b5.vis.vis.mcShape.e_y[2] + robot.mechanics.b5.vis.vis.mcShape.S[3,3] * robot.mechanics.b5.vis.vis.mcShape.e_y[3]);
//   robot.mechanics.b5.vis.vis.mcShape.rvisobj[1] = robot.mechanics.b5.vis.vis.mcShape.r[1] + (robot.mechanics.b5.vis.vis.mcShape.S[1,1] * robot.mechanics.b5.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b5.vis.vis.mcShape.S[1,2] * robot.mechanics.b5.vis.vis.mcShape.r_shape[2] + robot.mechanics.b5.vis.vis.mcShape.S[1,3] * robot.mechanics.b5.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b5.vis.vis.mcShape.rvisobj[2] = robot.mechanics.b5.vis.vis.mcShape.r[2] + (robot.mechanics.b5.vis.vis.mcShape.S[2,1] * robot.mechanics.b5.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b5.vis.vis.mcShape.S[2,2] * robot.mechanics.b5.vis.vis.mcShape.r_shape[2] + robot.mechanics.b5.vis.vis.mcShape.S[2,3] * robot.mechanics.b5.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b5.vis.vis.mcShape.rvisobj[3] = robot.mechanics.b5.vis.vis.mcShape.r[3] + (robot.mechanics.b5.vis.vis.mcShape.S[3,1] * robot.mechanics.b5.vis.vis.mcShape.r_shape[1] + (robot.mechanics.b5.vis.vis.mcShape.S[3,2] * robot.mechanics.b5.vis.vis.mcShape.r_shape[2] + robot.mechanics.b5.vis.vis.mcShape.S[3,3] * robot.mechanics.b5.vis.vis.mcShape.r_shape[3]));
//   robot.mechanics.b5.vis.vis.mcShape.e_x[1] = robot.mechanics.b5.vis.vis.nLength[1];
//   robot.mechanics.b5.vis.vis.mcShape.e_x[2] = robot.mechanics.b5.vis.vis.nLength[2];
//   robot.mechanics.b5.vis.vis.mcShape.e_x[3] = robot.mechanics.b5.vis.vis.nLength[3];
//   robot.mechanics.b5.vis.vis.mcShape.e_y[1] = robot.mechanics.b5.vis.vis.nWidth[1];
//   robot.mechanics.b5.vis.vis.mcShape.e_y[2] = robot.mechanics.b5.vis.vis.nWidth[2];
//   robot.mechanics.b5.vis.vis.mcShape.e_y[3] = robot.mechanics.b5.vis.vis.nWidth[3];
//   robot.mechanics.b5.vis.vis.mcShape.e_z[1] = robot.mechanics.b5.vis.vis.nHeight[1];
//   robot.mechanics.b5.vis.vis.mcShape.e_z[2] = robot.mechanics.b5.vis.vis.nHeight[2];
//   robot.mechanics.b5.vis.vis.mcShape.e_z[3] = robot.mechanics.b5.vis.vis.nHeight[3];
//   robot.mechanics.b5.vis.vis.S[1,1] = robot.mechanics.b5.vis.Sa[1,1];
//   robot.mechanics.b5.vis.vis.S[1,2] = robot.mechanics.b5.vis.Sa[1,2];
//   robot.mechanics.b5.vis.vis.S[1,3] = robot.mechanics.b5.vis.Sa[1,3];
//   robot.mechanics.b5.vis.vis.S[2,1] = robot.mechanics.b5.vis.Sa[2,1];
//   robot.mechanics.b5.vis.vis.S[2,2] = robot.mechanics.b5.vis.Sa[2,2];
//   robot.mechanics.b5.vis.vis.S[2,3] = robot.mechanics.b5.vis.Sa[2,3];
//   robot.mechanics.b5.vis.vis.S[3,1] = robot.mechanics.b5.vis.Sa[3,1];
//   robot.mechanics.b5.vis.vis.S[3,2] = robot.mechanics.b5.vis.Sa[3,2];
//   robot.mechanics.b5.vis.vis.S[3,3] = robot.mechanics.b5.vis.Sa[3,3];
//   robot.mechanics.b5.vis.vis.r[1] = robot.mechanics.b5.vis.r0a[1];
//   robot.mechanics.b5.vis.vis.r[2] = robot.mechanics.b5.vis.r0a[2];
//   robot.mechanics.b5.vis.vis.r[3] = robot.mechanics.b5.vis.r0a[3];
//   robot.mechanics.b5.vis.vis.nLength[1] = robot.mechanics.b5.vis.nLength[1];
//   robot.mechanics.b5.vis.vis.nLength[2] = robot.mechanics.b5.vis.nLength[2];
//   robot.mechanics.b5.vis.vis.nLength[3] = robot.mechanics.b5.vis.nLength[3];
//   robot.mechanics.b5.vis.vis.nWidth[1] = robot.mechanics.b5.vis.nWidth[1];
//   robot.mechanics.b5.vis.vis.nWidth[2] = robot.mechanics.b5.vis.nWidth[2];
//   robot.mechanics.b5.vis.vis.nWidth[3] = robot.mechanics.b5.vis.nWidth[3];
//   robot.mechanics.b5.vis.vis.nHeight[1] = robot.mechanics.b5.vis.nHeight[1];
//   robot.mechanics.b5.vis.vis.nHeight[2] = robot.mechanics.b5.vis.nHeight[2];
//   robot.mechanics.b5.vis.vis.nHeight[3] = robot.mechanics.b5.vis.nHeight[3];
//   robot.mechanics.b5.vis.fa[1] = 0.0;
//   robot.mechanics.b5.vis.fa[2] = 0.0;
//   robot.mechanics.b5.vis.fa[3] = 0.0;
//   robot.mechanics.b5.vis.ta[1] = 0.0;
//   robot.mechanics.b5.vis.ta[2] = 0.0;
//   robot.mechanics.b5.vis.ta[3] = 0.0;
//   robot.mechanics.b5.vis.frame_a.t[1] + ((-robot.mechanics.b5.frame_a.t[1]) + robot.mechanics.b5.body.frame_a.t[1]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.t[2] + ((-robot.mechanics.b5.frame_a.t[2]) + robot.mechanics.b5.body.frame_a.t[2]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.t[3] + ((-robot.mechanics.b5.frame_a.t[3]) + robot.mechanics.b5.body.frame_a.t[3]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.f[1] + ((-robot.mechanics.b5.frame_a.f[1]) + robot.mechanics.b5.body.frame_a.f[1]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.f[2] + ((-robot.mechanics.b5.frame_a.f[2]) + robot.mechanics.b5.body.frame_a.f[2]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.f[3] + ((-robot.mechanics.b5.frame_a.f[3]) + robot.mechanics.b5.body.frame_a.f[3]) = 0.0;
//   robot.mechanics.b5.vis.frame_a.z[1] = robot.mechanics.b5.frame_a.z[1];
//   robot.mechanics.b5.frame_a.z[1] = robot.mechanics.b5.body.frame_a.z[1];
//   robot.mechanics.b5.vis.frame_a.z[2] = robot.mechanics.b5.frame_a.z[2];
//   robot.mechanics.b5.frame_a.z[2] = robot.mechanics.b5.body.frame_a.z[2];
//   robot.mechanics.b5.vis.frame_a.z[3] = robot.mechanics.b5.frame_a.z[3];
//   robot.mechanics.b5.frame_a.z[3] = robot.mechanics.b5.body.frame_a.z[3];
//   robot.mechanics.b5.vis.frame_a.a[1] = robot.mechanics.b5.frame_a.a[1];
//   robot.mechanics.b5.frame_a.a[1] = robot.mechanics.b5.body.frame_a.a[1];
//   robot.mechanics.b5.vis.frame_a.a[2] = robot.mechanics.b5.frame_a.a[2];
//   robot.mechanics.b5.frame_a.a[2] = robot.mechanics.b5.body.frame_a.a[2];
//   robot.mechanics.b5.vis.frame_a.a[3] = robot.mechanics.b5.frame_a.a[3];
//   robot.mechanics.b5.frame_a.a[3] = robot.mechanics.b5.body.frame_a.a[3];
//   robot.mechanics.b5.vis.frame_a.w[1] = robot.mechanics.b5.frame_a.w[1];
//   robot.mechanics.b5.frame_a.w[1] = robot.mechanics.b5.body.frame_a.w[1];
//   robot.mechanics.b5.vis.frame_a.w[2] = robot.mechanics.b5.frame_a.w[2];
//   robot.mechanics.b5.frame_a.w[2] = robot.mechanics.b5.body.frame_a.w[2];
//   robot.mechanics.b5.vis.frame_a.w[3] = robot.mechanics.b5.frame_a.w[3];
//   robot.mechanics.b5.frame_a.w[3] = robot.mechanics.b5.body.frame_a.w[3];
//   robot.mechanics.b5.vis.frame_a.v[1] = robot.mechanics.b5.frame_a.v[1];
//   robot.mechanics.b5.frame_a.v[1] = robot.mechanics.b5.body.frame_a.v[1];
//   robot.mechanics.b5.vis.frame_a.v[2] = robot.mechanics.b5.frame_a.v[2];
//   robot.mechanics.b5.frame_a.v[2] = robot.mechanics.b5.body.frame_a.v[2];
//   robot.mechanics.b5.vis.frame_a.v[3] = robot.mechanics.b5.frame_a.v[3];
//   robot.mechanics.b5.frame_a.v[3] = robot.mechanics.b5.body.frame_a.v[3];
//   robot.mechanics.b5.vis.frame_a.S[1,1] = robot.mechanics.b5.frame_a.S[1,1];
//   robot.mechanics.b5.frame_a.S[1,1] = robot.mechanics.b5.body.frame_a.S[1,1];
//   robot.mechanics.b5.vis.frame_a.S[1,2] = robot.mechanics.b5.frame_a.S[1,2];
//   robot.mechanics.b5.frame_a.S[1,2] = robot.mechanics.b5.body.frame_a.S[1,2];
//   robot.mechanics.b5.vis.frame_a.S[1,3] = robot.mechanics.b5.frame_a.S[1,3];
//   robot.mechanics.b5.frame_a.S[1,3] = robot.mechanics.b5.body.frame_a.S[1,3];
//   robot.mechanics.b5.vis.frame_a.S[2,1] = robot.mechanics.b5.frame_a.S[2,1];
//   robot.mechanics.b5.frame_a.S[2,1] = robot.mechanics.b5.body.frame_a.S[2,1];
//   robot.mechanics.b5.vis.frame_a.S[2,2] = robot.mechanics.b5.frame_a.S[2,2];
//   robot.mechanics.b5.frame_a.S[2,2] = robot.mechanics.b5.body.frame_a.S[2,2];
//   robot.mechanics.b5.vis.frame_a.S[2,3] = robot.mechanics.b5.frame_a.S[2,3];
//   robot.mechanics.b5.frame_a.S[2,3] = robot.mechanics.b5.body.frame_a.S[2,3];
//   robot.mechanics.b5.vis.frame_a.S[3,1] = robot.mechanics.b5.frame_a.S[3,1];
//   robot.mechanics.b5.frame_a.S[3,1] = robot.mechanics.b5.body.frame_a.S[3,1];
//   robot.mechanics.b5.vis.frame_a.S[3,2] = robot.mechanics.b5.frame_a.S[3,2];
//   robot.mechanics.b5.frame_a.S[3,2] = robot.mechanics.b5.body.frame_a.S[3,2];
//   robot.mechanics.b5.vis.frame_a.S[3,3] = robot.mechanics.b5.frame_a.S[3,3];
//   robot.mechanics.b5.frame_a.S[3,3] = robot.mechanics.b5.body.frame_a.S[3,3];
//   robot.mechanics.b5.vis.frame_a.r0[1] = robot.mechanics.b5.frame_a.r0[1];
//   robot.mechanics.b5.frame_a.r0[1] = robot.mechanics.b5.body.frame_a.r0[1];
//   robot.mechanics.b5.vis.frame_a.r0[2] = robot.mechanics.b5.frame_a.r0[2];
//   robot.mechanics.b5.frame_a.r0[2] = robot.mechanics.b5.body.frame_a.r0[2];
//   robot.mechanics.b5.vis.frame_a.r0[3] = robot.mechanics.b5.frame_a.r0[3];
//   robot.mechanics.b5.frame_a.r0[3] = robot.mechanics.b5.body.frame_a.r0[3];
//   (-robot.mechanics.b5.frame_b.t[1]) + robot.mechanics.b5.body.frame_b.t[1] = 0.0;
//   (-robot.mechanics.b5.frame_b.t[2]) + robot.mechanics.b5.body.frame_b.t[2] = 0.0;
//   (-robot.mechanics.b5.frame_b.t[3]) + robot.mechanics.b5.body.frame_b.t[3] = 0.0;
//   (-robot.mechanics.b5.frame_b.f[1]) + robot.mechanics.b5.body.frame_b.f[1] = 0.0;
//   (-robot.mechanics.b5.frame_b.f[2]) + robot.mechanics.b5.body.frame_b.f[2] = 0.0;
//   (-robot.mechanics.b5.frame_b.f[3]) + robot.mechanics.b5.body.frame_b.f[3] = 0.0;
//   robot.mechanics.b5.frame_b.z[1] = robot.mechanics.b5.body.frame_b.z[1];
//   robot.mechanics.b5.frame_b.z[2] = robot.mechanics.b5.body.frame_b.z[2];
//   robot.mechanics.b5.frame_b.z[3] = robot.mechanics.b5.body.frame_b.z[3];
//   robot.mechanics.b5.frame_b.a[1] = robot.mechanics.b5.body.frame_b.a[1];
//   robot.mechanics.b5.frame_b.a[2] = robot.mechanics.b5.body.frame_b.a[2];
//   robot.mechanics.b5.frame_b.a[3] = robot.mechanics.b5.body.frame_b.a[3];
//   robot.mechanics.b5.frame_b.w[1] = robot.mechanics.b5.body.frame_b.w[1];
//   robot.mechanics.b5.frame_b.w[2] = robot.mechanics.b5.body.frame_b.w[2];
//   robot.mechanics.b5.frame_b.w[3] = robot.mechanics.b5.body.frame_b.w[3];
//   robot.mechanics.b5.frame_b.v[1] = robot.mechanics.b5.body.frame_b.v[1];
//   robot.mechanics.b5.frame_b.v[2] = robot.mechanics.b5.body.frame_b.v[2];
//   robot.mechanics.b5.frame_b.v[3] = robot.mechanics.b5.body.frame_b.v[3];
//   robot.mechanics.b5.frame_b.S[1,1] = robot.mechanics.b5.body.frame_b.S[1,1];
//   robot.mechanics.b5.frame_b.S[1,2] = robot.mechanics.b5.body.frame_b.S[1,2];
//   robot.mechanics.b5.frame_b.S[1,3] = robot.mechanics.b5.body.frame_b.S[1,3];
//   robot.mechanics.b5.frame_b.S[2,1] = robot.mechanics.b5.body.frame_b.S[2,1];
//   robot.mechanics.b5.frame_b.S[2,2] = robot.mechanics.b5.body.frame_b.S[2,2];
//   robot.mechanics.b5.frame_b.S[2,3] = robot.mechanics.b5.body.frame_b.S[2,3];
//   robot.mechanics.b5.frame_b.S[3,1] = robot.mechanics.b5.body.frame_b.S[3,1];
//   robot.mechanics.b5.frame_b.S[3,2] = robot.mechanics.b5.body.frame_b.S[3,2];
//   robot.mechanics.b5.frame_b.S[3,3] = robot.mechanics.b5.body.frame_b.S[3,3];
//   robot.mechanics.b5.frame_b.r0[1] = robot.mechanics.b5.body.frame_b.r0[1];
//   robot.mechanics.b5.frame_b.r0[2] = robot.mechanics.b5.body.frame_b.r0[2];
//   robot.mechanics.b5.frame_b.r0[3] = robot.mechanics.b5.body.frame_b.r0[3];
//   robot.mechanics.load.box.mcShape.Form = 9.87e+25 + 1e+20 * PackShape(robot.mechanics.load.box.mcShape.shapeType);
//   robot.mechanics.load.box.mcShape.Material = PackMaterial(robot.mechanics.load.box.mcShape.color[1] / 255.0,robot.mechanics.load.box.mcShape.color[2] / 255.0,robot.mechanics.load.box.mcShape.color[3] / 255.0,robot.mechanics.load.box.mcShape.specularCoefficient);
//   robot.mechanics.load.box.mcShape.Extra = robot.mechanics.load.box.mcShape.extra;
//   robot.mechanics.load.box.mcShape.size[1] = robot.mechanics.load.box.mcShape.length;
//   robot.mechanics.load.box.mcShape.size[2] = robot.mechanics.load.box.mcShape.width;
//   robot.mechanics.load.box.mcShape.size[3] = robot.mechanics.load.box.mcShape.height;
//   robot.mechanics.load.box.mcShape.Sshape[1,1] = robot.mechanics.load.box.mcShape.e_x[1];
//   robot.mechanics.load.box.mcShape.Sshape[1,2] = robot.mechanics.load.box.mcShape.e_y[1];
//   robot.mechanics.load.box.mcShape.Sshape[1,3] = robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.e_y[3] - robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.e_y[2];
//   robot.mechanics.load.box.mcShape.Sshape[2,1] = robot.mechanics.load.box.mcShape.e_x[2];
//   robot.mechanics.load.box.mcShape.Sshape[2,2] = robot.mechanics.load.box.mcShape.e_y[2];
//   robot.mechanics.load.box.mcShape.Sshape[2,3] = robot.mechanics.load.box.mcShape.e_x[3] * robot.mechanics.load.box.mcShape.e_y[1] - robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.e_y[3];
//   robot.mechanics.load.box.mcShape.Sshape[3,1] = robot.mechanics.load.box.mcShape.e_x[3];
//   robot.mechanics.load.box.mcShape.Sshape[3,2] = robot.mechanics.load.box.mcShape.e_y[3];
//   robot.mechanics.load.box.mcShape.Sshape[3,3] = robot.mechanics.load.box.mcShape.e_x[1] * robot.mechanics.load.box.mcShape.e_y[2] - robot.mechanics.load.box.mcShape.e_x[2] * robot.mechanics.load.box.mcShape.e_y[1];
//   robot.mechanics.load.box.mcShape.rxvisobj[1] = robot.mechanics.load.box.mcShape.S[1,1] * robot.mechanics.load.box.mcShape.e_x[1] + (robot.mechanics.load.box.mcShape.S[1,2] * robot.mechanics.load.box.mcShape.e_x[2] + robot.mechanics.load.box.mcShape.S[1,3] * robot.mechanics.load.box.mcShape.e_x[3]);
//   robot.mechanics.load.box.mcShape.rxvisobj[2] = robot.mechanics.load.box.mcShape.S[2,1] * robot.mechanics.load.box.mcShape.e_x[1] + (robot.mechanics.load.box.mcShape.S[2,2] * robot.mechanics.load.box.mcShape.e_x[2] + robot.mechanics.load.box.mcShape.S[2,3] * robot.mechanics.load.box.mcShape.e_x[3]);
//   robot.mechanics.load.box.mcShape.rxvisobj[3] = robot.mechanics.load.box.mcShape.S[3,1] * robot.mechanics.load.box.mcShape.e_x[1] + (robot.mechanics.load.box.mcShape.S[3,2] * robot.mechanics.load.box.mcShape.e_x[2] + robot.mechanics.load.box.mcShape.S[3,3] * robot.mechanics.load.box.mcShape.e_x[3]);
//   robot.mechanics.load.box.mcShape.ryvisobj[1] = robot.mechanics.load.box.mcShape.S[1,1] * robot.mechanics.load.box.mcShape.e_y[1] + (robot.mechanics.load.box.mcShape.S[1,2] * robot.mechanics.load.box.mcShape.e_y[2] + robot.mechanics.load.box.mcShape.S[1,3] * robot.mechanics.load.box.mcShape.e_y[3]);
//   robot.mechanics.load.box.mcShape.ryvisobj[2] = robot.mechanics.load.box.mcShape.S[2,1] * robot.mechanics.load.box.mcShape.e_y[1] + (robot.mechanics.load.box.mcShape.S[2,2] * robot.mechanics.load.box.mcShape.e_y[2] + robot.mechanics.load.box.mcShape.S[2,3] * robot.mechanics.load.box.mcShape.e_y[3]);
//   robot.mechanics.load.box.mcShape.ryvisobj[3] = robot.mechanics.load.box.mcShape.S[3,1] * robot.mechanics.load.box.mcShape.e_y[1] + (robot.mechanics.load.box.mcShape.S[3,2] * robot.mechanics.load.box.mcShape.e_y[2] + robot.mechanics.load.box.mcShape.S[3,3] * robot.mechanics.load.box.mcShape.e_y[3]);
//   robot.mechanics.load.box.mcShape.rvisobj[1] = robot.mechanics.load.box.mcShape.r[1] + (robot.mechanics.load.box.mcShape.S[1,1] * robot.mechanics.load.box.mcShape.r_shape[1] + (robot.mechanics.load.box.mcShape.S[1,2] * robot.mechanics.load.box.mcShape.r_shape[2] + robot.mechanics.load.box.mcShape.S[1,3] * robot.mechanics.load.box.mcShape.r_shape[3]));
//   robot.mechanics.load.box.mcShape.rvisobj[2] = robot.mechanics.load.box.mcShape.r[2] + (robot.mechanics.load.box.mcShape.S[2,1] * robot.mechanics.load.box.mcShape.r_shape[1] + (robot.mechanics.load.box.mcShape.S[2,2] * robot.mechanics.load.box.mcShape.r_shape[2] + robot.mechanics.load.box.mcShape.S[2,3] * robot.mechanics.load.box.mcShape.r_shape[3]));
//   robot.mechanics.load.box.mcShape.rvisobj[3] = robot.mechanics.load.box.mcShape.r[3] + (robot.mechanics.load.box.mcShape.S[3,1] * robot.mechanics.load.box.mcShape.r_shape[1] + (robot.mechanics.load.box.mcShape.S[3,2] * robot.mechanics.load.box.mcShape.r_shape[2] + robot.mechanics.load.box.mcShape.S[3,3] * robot.mechanics.load.box.mcShape.r_shape[3]));
//   robot.mechanics.load.box.mcShape.e_x[1] = robot.mechanics.load.box.nLength[1];
//   robot.mechanics.load.box.mcShape.e_x[2] = robot.mechanics.load.box.nLength[2];
//   robot.mechanics.load.box.mcShape.e_x[3] = robot.mechanics.load.box.nLength[3];
//   robot.mechanics.load.box.mcShape.e_y[1] = robot.mechanics.load.box.nWidth[1];
//   robot.mechanics.load.box.mcShape.e_y[2] = robot.mechanics.load.box.nWidth[2];
//   robot.mechanics.load.box.mcShape.e_y[3] = robot.mechanics.load.box.nWidth[3];
//   robot.mechanics.load.box.mcShape.e_z[1] = robot.mechanics.load.box.nHeight[1];
//   robot.mechanics.load.box.mcShape.e_z[2] = robot.mechanics.load.box.nHeight[2];
//   robot.mechanics.load.box.mcShape.e_z[3] = robot.mechanics.load.box.nHeight[3];
//   robot.mechanics.load.frameTranslation.Sb[1,1] = robot.mechanics.load.frameTranslation.Sa[1,1];
//   robot.mechanics.load.frameTranslation.Sb[1,2] = robot.mechanics.load.frameTranslation.Sa[1,2];
//   robot.mechanics.load.frameTranslation.Sb[1,3] = robot.mechanics.load.frameTranslation.Sa[1,3];
//   robot.mechanics.load.frameTranslation.Sb[2,1] = robot.mechanics.load.frameTranslation.Sa[2,1];
//   robot.mechanics.load.frameTranslation.Sb[2,2] = robot.mechanics.load.frameTranslation.Sa[2,2];
//   robot.mechanics.load.frameTranslation.Sb[2,3] = robot.mechanics.load.frameTranslation.Sa[2,3];
//   robot.mechanics.load.frameTranslation.Sb[3,1] = robot.mechanics.load.frameTranslation.Sa[3,1];
//   robot.mechanics.load.frameTranslation.Sb[3,2] = robot.mechanics.load.frameTranslation.Sa[3,2];
//   robot.mechanics.load.frameTranslation.Sb[3,3] = robot.mechanics.load.frameTranslation.Sa[3,3];
//   robot.mechanics.load.frameTranslation.wb[1] = robot.mechanics.load.frameTranslation.wa[1];
//   robot.mechanics.load.frameTranslation.wb[2] = robot.mechanics.load.frameTranslation.wa[2];
//   robot.mechanics.load.frameTranslation.wb[3] = robot.mechanics.load.frameTranslation.wa[3];
//   robot.mechanics.load.frameTranslation.zb[1] = robot.mechanics.load.frameTranslation.za[1];
//   robot.mechanics.load.frameTranslation.zb[2] = robot.mechanics.load.frameTranslation.za[2];
//   robot.mechanics.load.frameTranslation.zb[3] = robot.mechanics.load.frameTranslation.za[3];
//   robot.mechanics.load.frameTranslation.r0b[1] = robot.mechanics.load.frameTranslation.r0a[1] + (robot.mechanics.load.frameTranslation.Sa[1,1] * robot.mechanics.load.frameTranslation.r[1] + (robot.mechanics.load.frameTranslation.Sa[1,2] * robot.mechanics.load.frameTranslation.r[2] + robot.mechanics.load.frameTranslation.Sa[1,3] * robot.mechanics.load.frameTranslation.r[3]));
//   robot.mechanics.load.frameTranslation.r0b[2] = robot.mechanics.load.frameTranslation.r0a[2] + (robot.mechanics.load.frameTranslation.Sa[2,1] * robot.mechanics.load.frameTranslation.r[1] + (robot.mechanics.load.frameTranslation.Sa[2,2] * robot.mechanics.load.frameTranslation.r[2] + robot.mechanics.load.frameTranslation.Sa[2,3] * robot.mechanics.load.frameTranslation.r[3]));
//   robot.mechanics.load.frameTranslation.r0b[3] = robot.mechanics.load.frameTranslation.r0a[3] + (robot.mechanics.load.frameTranslation.Sa[3,1] * robot.mechanics.load.frameTranslation.r[1] + (robot.mechanics.load.frameTranslation.Sa[3,2] * robot.mechanics.load.frameTranslation.r[2] + robot.mechanics.load.frameTranslation.Sa[3,3] * robot.mechanics.load.frameTranslation.r[3]));
//   robot.mechanics.load.frameTranslation.vaux[1] = robot.mechanics.load.frameTranslation.wa[2] * robot.mechanics.load.frameTranslation.r[3] - robot.mechanics.load.frameTranslation.wa[3] * robot.mechanics.load.frameTranslation.r[2];
//   robot.mechanics.load.frameTranslation.vaux[2] = robot.mechanics.load.frameTranslation.wa[3] * robot.mechanics.load.frameTranslation.r[1] - robot.mechanics.load.frameTranslation.wa[1] * robot.mechanics.load.frameTranslation.r[3];
//   robot.mechanics.load.frameTranslation.vaux[3] = robot.mechanics.load.frameTranslation.wa[1] * robot.mechanics.load.frameTranslation.r[2] - robot.mechanics.load.frameTranslation.wa[2] * robot.mechanics.load.frameTranslation.r[1];
//   robot.mechanics.load.frameTranslation.vb[1] = robot.mechanics.load.frameTranslation.va[1] + robot.mechanics.load.frameTranslation.vaux[1];
//   robot.mechanics.load.frameTranslation.vb[2] = robot.mechanics.load.frameTranslation.va[2] + robot.mechanics.load.frameTranslation.vaux[2];
//   robot.mechanics.load.frameTranslation.vb[3] = robot.mechanics.load.frameTranslation.va[3] + robot.mechanics.load.frameTranslation.vaux[3];
//   robot.mechanics.load.frameTranslation.ab[1] = robot.mechanics.load.frameTranslation.aa[1] + (robot.mechanics.load.frameTranslation.za[2] * robot.mechanics.load.frameTranslation.r[3] + ((-robot.mechanics.load.frameTranslation.za[3] * robot.mechanics.load.frameTranslation.r[2]) + (robot.mechanics.load.frameTranslation.wa[2] * robot.mechanics.load.frameTranslation.vaux[3] + (-robot.mechanics.load.frameTranslation.wa[3] * robot.mechanics.load.frameTranslation.vaux[2]))));
//   robot.mechanics.load.frameTranslation.ab[2] = robot.mechanics.load.frameTranslation.aa[2] + (robot.mechanics.load.frameTranslation.za[3] * robot.mechanics.load.frameTranslation.r[1] + ((-robot.mechanics.load.frameTranslation.za[1] * robot.mechanics.load.frameTranslation.r[3]) + (robot.mechanics.load.frameTranslation.wa[3] * robot.mechanics.load.frameTranslation.vaux[1] + (-robot.mechanics.load.frameTranslation.wa[1] * robot.mechanics.load.frameTranslation.vaux[3]))));
//   robot.mechanics.load.frameTranslation.ab[3] = robot.mechanics.load.frameTranslation.aa[3] + (robot.mechanics.load.frameTranslation.za[1] * robot.mechanics.load.frameTranslation.r[2] + ((-robot.mechanics.load.frameTranslation.za[2] * robot.mechanics.load.frameTranslation.r[1]) + (robot.mechanics.load.frameTranslation.wa[1] * robot.mechanics.load.frameTranslation.vaux[2] + (-robot.mechanics.load.frameTranslation.wa[2] * robot.mechanics.load.frameTranslation.vaux[1]))));
//   robot.mechanics.load.frameTranslation.fa[1] = robot.mechanics.load.frameTranslation.fb[1];
//   robot.mechanics.load.frameTranslation.fa[2] = robot.mechanics.load.frameTranslation.fb[2];
//   robot.mechanics.load.frameTranslation.fa[3] = robot.mechanics.load.frameTranslation.fb[3];
//   robot.mechanics.load.frameTranslation.ta[1] = robot.mechanics.load.frameTranslation.tb[1] + (robot.mechanics.load.frameTranslation.r[2] * robot.mechanics.load.frameTranslation.fa[3] + (-robot.mechanics.load.frameTranslation.r[3] * robot.mechanics.load.frameTranslation.fa[2]));
//   robot.mechanics.load.frameTranslation.ta[2] = robot.mechanics.load.frameTranslation.tb[2] + (robot.mechanics.load.frameTranslation.r[3] * robot.mechanics.load.frameTranslation.fa[1] + (-robot.mechanics.load.frameTranslation.r[1] * robot.mechanics.load.frameTranslation.fa[3]));
//   robot.mechanics.load.frameTranslation.ta[3] = robot.mechanics.load.frameTranslation.tb[3] + (robot.mechanics.load.frameTranslation.r[1] * robot.mechanics.load.frameTranslation.fa[2] + (-robot.mechanics.load.frameTranslation.r[2] * robot.mechanics.load.frameTranslation.fa[1]));
//   robot.mechanics.load.body.fa[1] = robot.mechanics.load.body.m * (robot.mechanics.load.body.aa[1] + (robot.mechanics.load.body.za[2] * robot.mechanics.load.body.rCM[3] + ((-robot.mechanics.load.body.za[3] * robot.mechanics.load.body.rCM[2]) + (robot.mechanics.load.body.wa[2] * (robot.mechanics.load.body.wa[1] * robot.mechanics.load.body.rCM[2] - robot.mechanics.load.body.wa[2] * robot.mechanics.load.body.rCM[1]) + (-robot.mechanics.load.body.wa[3] * (robot.mechanics.load.body.wa[3] * robot.mechanics.load.body.rCM[1] - robot.mechanics.load.body.wa[1] * robot.mechanics.load.body.rCM[3]))))));
//   robot.mechanics.load.body.fa[2] = robot.mechanics.load.body.m * (robot.mechanics.load.body.aa[2] + (robot.mechanics.load.body.za[3] * robot.mechanics.load.body.rCM[1] + ((-robot.mechanics.load.body.za[1] * robot.mechanics.load.body.rCM[3]) + (robot.mechanics.load.body.wa[3] * (robot.mechanics.load.body.wa[2] * robot.mechanics.load.body.rCM[3] - robot.mechanics.load.body.wa[3] * robot.mechanics.load.body.rCM[2]) + (-robot.mechanics.load.body.wa[1] * (robot.mechanics.load.body.wa[1] * robot.mechanics.load.body.rCM[2] - robot.mechanics.load.body.wa[2] * robot.mechanics.load.body.rCM[1]))))));
//   robot.mechanics.load.body.fa[3] = robot.mechanics.load.body.m * (robot.mechanics.load.body.aa[3] + (robot.mechanics.load.body.za[1] * robot.mechanics.load.body.rCM[2] + ((-robot.mechanics.load.body.za[2] * robot.mechanics.load.body.rCM[1]) + (robot.mechanics.load.body.wa[1] * (robot.mechanics.load.body.wa[3] * robot.mechanics.load.body.rCM[1] - robot.mechanics.load.body.wa[1] * robot.mechanics.load.body.rCM[3]) + (-robot.mechanics.load.body.wa[2] * (robot.mechanics.load.body.wa[2] * robot.mechanics.load.body.rCM[3] - robot.mechanics.load.body.wa[3] * robot.mechanics.load.body.rCM[2]))))));
//   robot.mechanics.load.body.ta[1] = robot.mechanics.load.body.I[1,1] * robot.mechanics.load.body.za[1] + (robot.mechanics.load.body.I[1,2] * robot.mechanics.load.body.za[2] + (robot.mechanics.load.body.I[1,3] * robot.mechanics.load.body.za[3] + (robot.mechanics.load.body.wa[2] * (robot.mechanics.load.body.I[3,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[3,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[3,3] * robot.mechanics.load.body.wa[3])) + ((-robot.mechanics.load.body.wa[3] * (robot.mechanics.load.body.I[2,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[2,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[2,3] * robot.mechanics.load.body.wa[3]))) + (robot.mechanics.load.body.rCM[2] * robot.mechanics.load.body.fa[3] + (-robot.mechanics.load.body.rCM[3] * robot.mechanics.load.body.fa[2]))))));
//   robot.mechanics.load.body.ta[2] = robot.mechanics.load.body.I[2,1] * robot.mechanics.load.body.za[1] + (robot.mechanics.load.body.I[2,2] * robot.mechanics.load.body.za[2] + (robot.mechanics.load.body.I[2,3] * robot.mechanics.load.body.za[3] + (robot.mechanics.load.body.wa[3] * (robot.mechanics.load.body.I[1,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[1,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[1,3] * robot.mechanics.load.body.wa[3])) + ((-robot.mechanics.load.body.wa[1] * (robot.mechanics.load.body.I[3,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[3,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[3,3] * robot.mechanics.load.body.wa[3]))) + (robot.mechanics.load.body.rCM[3] * robot.mechanics.load.body.fa[1] + (-robot.mechanics.load.body.rCM[1] * robot.mechanics.load.body.fa[3]))))));
//   robot.mechanics.load.body.ta[3] = robot.mechanics.load.body.I[3,1] * robot.mechanics.load.body.za[1] + (robot.mechanics.load.body.I[3,2] * robot.mechanics.load.body.za[2] + (robot.mechanics.load.body.I[3,3] * robot.mechanics.load.body.za[3] + (robot.mechanics.load.body.wa[1] * (robot.mechanics.load.body.I[2,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[2,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[2,3] * robot.mechanics.load.body.wa[3])) + ((-robot.mechanics.load.body.wa[2] * (robot.mechanics.load.body.I[1,1] * robot.mechanics.load.body.wa[1] + (robot.mechanics.load.body.I[1,2] * robot.mechanics.load.body.wa[2] + robot.mechanics.load.body.I[1,3] * robot.mechanics.load.body.wa[3]))) + (robot.mechanics.load.body.rCM[1] * robot.mechanics.load.body.fa[2] + (-robot.mechanics.load.body.rCM[2] * robot.mechanics.load.body.fa[1]))))));
//   robot.mechanics.load.box.S[1,1] = robot.mechanics.load.Sa[1,1];
//   robot.mechanics.load.box.S[1,2] = robot.mechanics.load.Sa[1,2];
//   robot.mechanics.load.box.S[1,3] = robot.mechanics.load.Sa[1,3];
//   robot.mechanics.load.box.S[2,1] = robot.mechanics.load.Sa[2,1];
//   robot.mechanics.load.box.S[2,2] = robot.mechanics.load.Sa[2,2];
//   robot.mechanics.load.box.S[2,3] = robot.mechanics.load.Sa[2,3];
//   robot.mechanics.load.box.S[3,1] = robot.mechanics.load.Sa[3,1];
//   robot.mechanics.load.box.S[3,2] = robot.mechanics.load.Sa[3,2];
//   robot.mechanics.load.box.S[3,3] = robot.mechanics.load.Sa[3,3];
//   robot.mechanics.load.box.r[1] = robot.mechanics.load.r0a[1];
//   robot.mechanics.load.box.r[2] = robot.mechanics.load.r0a[2];
//   robot.mechanics.load.box.r[3] = robot.mechanics.load.r0a[3];
//   robot.mechanics.load.box.Sshape[1,1] = robot.mechanics.load.Sbox[1,1];
//   robot.mechanics.load.box.Sshape[1,2] = robot.mechanics.load.Sbox[1,2];
//   robot.mechanics.load.box.Sshape[1,3] = robot.mechanics.load.Sbox[1,3];
//   robot.mechanics.load.box.Sshape[2,1] = robot.mechanics.load.Sbox[2,1];
//   robot.mechanics.load.box.Sshape[2,2] = robot.mechanics.load.Sbox[2,2];
//   robot.mechanics.load.box.Sshape[2,3] = robot.mechanics.load.Sbox[2,3];
//   robot.mechanics.load.box.Sshape[3,1] = robot.mechanics.load.Sbox[3,1];
//   robot.mechanics.load.box.Sshape[3,2] = robot.mechanics.load.Sbox[3,2];
//   robot.mechanics.load.box.Sshape[3,3] = robot.mechanics.load.Sbox[3,3];
//   robot.mechanics.load.l = robot.mechanics.load.Length;
//   robot.mechanics.load.w = robot.mechanics.load.Width;
//   robot.mechanics.load.h = robot.mechanics.load.Height;
//   robot.mechanics.load.wi = robot.mechanics.load.InnerWidth;
//   robot.mechanics.load.hi = robot.mechanics.load.InnerHeight;
//   robot.mechanics.load.mo = 1000.0 * (robot.mechanics.load.rho * (robot.mechanics.load.l * (robot.mechanics.load.w * robot.mechanics.load.h)));
//   robot.mechanics.load.mi = 1000.0 * (robot.mechanics.load.rho * (robot.mechanics.load.l * (robot.mechanics.load.wi * robot.mechanics.load.hi)));
//   robot.mechanics.load.body.m = robot.mechanics.load.mo - robot.mechanics.load.mi;
//   robot.mechanics.load.body.rCM[1] = robot.mechanics.load.r0[1] + 0.5 * (robot.mechanics.load.l * robot.mechanics.load.box.nLength[1]);
//   robot.mechanics.load.body.rCM[2] = robot.mechanics.load.r0[2] + 0.5 * (robot.mechanics.load.l * robot.mechanics.load.box.nLength[2]);
//   robot.mechanics.load.body.rCM[3] = robot.mechanics.load.r0[3] + 0.5 * (robot.mechanics.load.l * robot.mechanics.load.box.nLength[3]);
//   robot.mechanics.load.body.I[1,1] = robot.mechanics.load.Sbox[1,1] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + (robot.mechanics.load.Sbox[1,2] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + robot.mechanics.load.Sbox[1,3] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)));
//   robot.mechanics.load.body.I[1,2] = robot.mechanics.load.Sbox[1,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,1]) + (robot.mechanics.load.Sbox[1,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,2]) + robot.mechanics.load.Sbox[1,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,3]));
//   robot.mechanics.load.body.I[1,3] = robot.mechanics.load.Sbox[1,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,1]) + (robot.mechanics.load.Sbox[1,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,2]) + robot.mechanics.load.Sbox[1,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,3]));
//   robot.mechanics.load.body.I[2,1] = robot.mechanics.load.Sbox[2,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,1]) + (robot.mechanics.load.Sbox[2,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,2]) + robot.mechanics.load.Sbox[2,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,3]));
//   robot.mechanics.load.body.I[2,2] = robot.mechanics.load.Sbox[2,1] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + (robot.mechanics.load.Sbox[2,2] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + robot.mechanics.load.Sbox[2,3] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)));
//   robot.mechanics.load.body.I[2,3] = robot.mechanics.load.Sbox[2,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,1]) + (robot.mechanics.load.Sbox[2,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,2]) + robot.mechanics.load.Sbox[2,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[3,3]));
//   robot.mechanics.load.body.I[3,1] = robot.mechanics.load.Sbox[3,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,1]) + (robot.mechanics.load.Sbox[3,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,2]) + robot.mechanics.load.Sbox[3,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[1,3]));
//   robot.mechanics.load.body.I[3,2] = robot.mechanics.load.Sbox[3,1] * ((robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,1]) + (robot.mechanics.load.Sbox[3,2] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,2]) + robot.mechanics.load.Sbox[3,3] * ((robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)) * robot.mechanics.load.Sbox[2,3]));
//   robot.mechanics.load.body.I[3,3] = robot.mechanics.load.Sbox[3,1] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.w ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.wi ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + (robot.mechanics.load.Sbox[3,2] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.h ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.hi ^ 2.0 / 12.0)) + robot.mechanics.load.Sbox[3,3] ^ 2.0 * (robot.mechanics.load.mo * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.w ^ 2.0 / 12.0) - robot.mechanics.load.mi * (robot.mechanics.load.l ^ 2.0 / 12.0 + robot.mechanics.load.wi ^ 2.0 / 12.0)));
//   robot.mechanics.load.body.frame_a.t[1] + ((-robot.mechanics.load.frame_a.t[1]) + robot.mechanics.load.frameTranslation.frame_a.t[1]) = 0.0;
//   robot.mechanics.load.body.frame_a.t[2] + ((-robot.mechanics.load.frame_a.t[2]) + robot.mechanics.load.frameTranslation.frame_a.t[2]) = 0.0;
//   robot.mechanics.load.body.frame_a.t[3] + ((-robot.mechanics.load.frame_a.t[3]) + robot.mechanics.load.frameTranslation.frame_a.t[3]) = 0.0;
//   robot.mechanics.load.body.frame_a.f[1] + ((-robot.mechanics.load.frame_a.f[1]) + robot.mechanics.load.frameTranslation.frame_a.f[1]) = 0.0;
//   robot.mechanics.load.body.frame_a.f[2] + ((-robot.mechanics.load.frame_a.f[2]) + robot.mechanics.load.frameTranslation.frame_a.f[2]) = 0.0;
//   robot.mechanics.load.body.frame_a.f[3] + ((-robot.mechanics.load.frame_a.f[3]) + robot.mechanics.load.frameTranslation.frame_a.f[3]) = 0.0;
//   robot.mechanics.load.body.frame_a.z[1] = robot.mechanics.load.frame_a.z[1];
//   robot.mechanics.load.frame_a.z[1] = robot.mechanics.load.frameTranslation.frame_a.z[1];
//   robot.mechanics.load.body.frame_a.z[2] = robot.mechanics.load.frame_a.z[2];
//   robot.mechanics.load.frame_a.z[2] = robot.mechanics.load.frameTranslation.frame_a.z[2];
//   robot.mechanics.load.body.frame_a.z[3] = robot.mechanics.load.frame_a.z[3];
//   robot.mechanics.load.frame_a.z[3] = robot.mechanics.load.frameTranslation.frame_a.z[3];
//   robot.mechanics.load.body.frame_a.a[1] = robot.mechanics.load.frame_a.a[1];
//   robot.mechanics.load.frame_a.a[1] = robot.mechanics.load.frameTranslation.frame_a.a[1];
//   robot.mechanics.load.body.frame_a.a[2] = robot.mechanics.load.frame_a.a[2];
//   robot.mechanics.load.frame_a.a[2] = robot.mechanics.load.frameTranslation.frame_a.a[2];
//   robot.mechanics.load.body.frame_a.a[3] = robot.mechanics.load.frame_a.a[3];
//   robot.mechanics.load.frame_a.a[3] = robot.mechanics.load.frameTranslation.frame_a.a[3];
//   robot.mechanics.load.body.frame_a.w[1] = robot.mechanics.load.frame_a.w[1];
//   robot.mechanics.load.frame_a.w[1] = robot.mechanics.load.frameTranslation.frame_a.w[1];
//   robot.mechanics.load.body.frame_a.w[2] = robot.mechanics.load.frame_a.w[2];
//   robot.mechanics.load.frame_a.w[2] = robot.mechanics.load.frameTranslation.frame_a.w[2];
//   robot.mechanics.load.body.frame_a.w[3] = robot.mechanics.load.frame_a.w[3];
//   robot.mechanics.load.frame_a.w[3] = robot.mechanics.load.frameTranslation.frame_a.w[3];
//   robot.mechanics.load.body.frame_a.v[1] = robot.mechanics.load.frame_a.v[1];
//   robot.mechanics.load.frame_a.v[1] = robot.mechanics.load.frameTranslation.frame_a.v[1];
//   robot.mechanics.load.body.frame_a.v[2] = robot.mechanics.load.frame_a.v[2];
//   robot.mechanics.load.frame_a.v[2] = robot.mechanics.load.frameTranslation.frame_a.v[2];
//   robot.mechanics.load.body.frame_a.v[3] = robot.mechanics.load.frame_a.v[3];
//   robot.mechanics.load.frame_a.v[3] = robot.mechanics.load.frameTranslation.frame_a.v[3];
//   robot.mechanics.load.body.frame_a.S[1,1] = robot.mechanics.load.frame_a.S[1,1];
//   robot.mechanics.load.frame_a.S[1,1] = robot.mechanics.load.frameTranslation.frame_a.S[1,1];
//   robot.mechanics.load.body.frame_a.S[1,2] = robot.mechanics.load.frame_a.S[1,2];
//   robot.mechanics.load.frame_a.S[1,2] = robot.mechanics.load.frameTranslation.frame_a.S[1,2];
//   robot.mechanics.load.body.frame_a.S[1,3] = robot.mechanics.load.frame_a.S[1,3];
//   robot.mechanics.load.frame_a.S[1,3] = robot.mechanics.load.frameTranslation.frame_a.S[1,3];
//   robot.mechanics.load.body.frame_a.S[2,1] = robot.mechanics.load.frame_a.S[2,1];
//   robot.mechanics.load.frame_a.S[2,1] = robot.mechanics.load.frameTranslation.frame_a.S[2,1];
//   robot.mechanics.load.body.frame_a.S[2,2] = robot.mechanics.load.frame_a.S[2,2];
//   robot.mechanics.load.frame_a.S[2,2] = robot.mechanics.load.frameTranslation.frame_a.S[2,2];
//   robot.mechanics.load.body.frame_a.S[2,3] = robot.mechanics.load.frame_a.S[2,3];
//   robot.mechanics.load.frame_a.S[2,3] = robot.mechanics.load.frameTranslation.frame_a.S[2,3];
//   robot.mechanics.load.body.frame_a.S[3,1] = robot.mechanics.load.frame_a.S[3,1];
//   robot.mechanics.load.frame_a.S[3,1] = robot.mechanics.load.frameTranslation.frame_a.S[3,1];
//   robot.mechanics.load.body.frame_a.S[3,2] = robot.mechanics.load.frame_a.S[3,2];
//   robot.mechanics.load.frame_a.S[3,2] = robot.mechanics.load.frameTranslation.frame_a.S[3,2];
//   robot.mechanics.load.body.frame_a.S[3,3] = robot.mechanics.load.frame_a.S[3,3];
//   robot.mechanics.load.frame_a.S[3,3] = robot.mechanics.load.frameTranslation.frame_a.S[3,3];
//   robot.mechanics.load.body.frame_a.r0[1] = robot.mechanics.load.frame_a.r0[1];
//   robot.mechanics.load.frame_a.r0[1] = robot.mechanics.load.frameTranslation.frame_a.r0[1];
//   robot.mechanics.load.body.frame_a.r0[2] = robot.mechanics.load.frame_a.r0[2];
//   robot.mechanics.load.frame_a.r0[2] = robot.mechanics.load.frameTranslation.frame_a.r0[2];
//   robot.mechanics.load.body.frame_a.r0[3] = robot.mechanics.load.frame_a.r0[3];
//   robot.mechanics.load.frame_a.r0[3] = robot.mechanics.load.frameTranslation.frame_a.r0[3];
//   robot.mechanics.load.frameTranslation.frame_b.t[1] + (-robot.mechanics.load.frame_b.t[1]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.t[2] + (-robot.mechanics.load.frame_b.t[2]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.t[3] + (-robot.mechanics.load.frame_b.t[3]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.f[1] + (-robot.mechanics.load.frame_b.f[1]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.f[2] + (-robot.mechanics.load.frame_b.f[2]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.f[3] + (-robot.mechanics.load.frame_b.f[3]) = 0.0;
//   robot.mechanics.load.frameTranslation.frame_b.z[1] = robot.mechanics.load.frame_b.z[1];
//   robot.mechanics.load.frameTranslation.frame_b.z[2] = robot.mechanics.load.frame_b.z[2];
//   robot.mechanics.load.frameTranslation.frame_b.z[3] = robot.mechanics.load.frame_b.z[3];
//   robot.mechanics.load.frameTranslation.frame_b.a[1] = robot.mechanics.load.frame_b.a[1];
//   robot.mechanics.load.frameTranslation.frame_b.a[2] = robot.mechanics.load.frame_b.a[2];
//   robot.mechanics.load.frameTranslation.frame_b.a[3] = robot.mechanics.load.frame_b.a[3];
//   robot.mechanics.load.frameTranslation.frame_b.w[1] = robot.mechanics.load.frame_b.w[1];
//   robot.mechanics.load.frameTranslation.frame_b.w[2] = robot.mechanics.load.frame_b.w[2];
//   robot.mechanics.load.frameTranslation.frame_b.w[3] = robot.mechanics.load.frame_b.w[3];
//   robot.mechanics.load.frameTranslation.frame_b.v[1] = robot.mechanics.load.frame_b.v[1];
//   robot.mechanics.load.frameTranslation.frame_b.v[2] = robot.mechanics.load.frame_b.v[2];
//   robot.mechanics.load.frameTranslation.frame_b.v[3] = robot.mechanics.load.frame_b.v[3];
//   robot.mechanics.load.frameTranslation.frame_b.S[1,1] = robot.mechanics.load.frame_b.S[1,1];
//   robot.mechanics.load.frameTranslation.frame_b.S[1,2] = robot.mechanics.load.frame_b.S[1,2];
//   robot.mechanics.load.frameTranslation.frame_b.S[1,3] = robot.mechanics.load.frame_b.S[1,3];
//   robot.mechanics.load.frameTranslation.frame_b.S[2,1] = robot.mechanics.load.frame_b.S[2,1];
//   robot.mechanics.load.frameTranslation.frame_b.S[2,2] = robot.mechanics.load.frame_b.S[2,2];
//   robot.mechanics.load.frameTranslation.frame_b.S[2,3] = robot.mechanics.load.frame_b.S[2,3];
//   robot.mechanics.load.frameTranslation.frame_b.S[3,1] = robot.mechanics.load.frame_b.S[3,1];
//   robot.mechanics.load.frameTranslation.frame_b.S[3,2] = robot.mechanics.load.frame_b.S[3,2];
//   robot.mechanics.load.frameTranslation.frame_b.S[3,3] = robot.mechanics.load.frame_b.S[3,3];
//   robot.mechanics.load.frameTranslation.frame_b.r0[1] = robot.mechanics.load.frame_b.r0[1];
//   robot.mechanics.load.frameTranslation.frame_b.r0[2] = robot.mechanics.load.frame_b.r0[2];
//   robot.mechanics.load.frameTranslation.frame_b.r0[3] = robot.mechanics.load.frame_b.r0[3];
//   robot.mechanics.q[1] = robot.mechanics.r1.q;
//   robot.mechanics.q[2] = robot.mechanics.r2.q;
//   robot.mechanics.q[3] = robot.mechanics.r3.q;
//   robot.mechanics.q[4] = robot.mechanics.r4.q;
//   robot.mechanics.q[5] = robot.mechanics.r5.q;
//   robot.mechanics.q[6] = robot.mechanics.r6.q;
//   robot.mechanics.qd[1] = der(robot.mechanics.q[1]);
//   robot.mechanics.qd[2] = der(robot.mechanics.q[2]);
//   robot.mechanics.qd[3] = der(robot.mechanics.q[3]);
//   robot.mechanics.qd[4] = der(robot.mechanics.q[4]);
//   robot.mechanics.qd[5] = der(robot.mechanics.q[5]);
//   robot.mechanics.qd[6] = der(robot.mechanics.q[6]);
//   robot.mechanics.qdd[1] = der(robot.mechanics.qd[1]);
//   robot.mechanics.qdd[2] = der(robot.mechanics.qd[2]);
//   robot.mechanics.qdd[3] = der(robot.mechanics.qd[3]);
//   robot.mechanics.qdd[4] = der(robot.mechanics.qd[4]);
//   robot.mechanics.qdd[5] = der(robot.mechanics.qd[5]);
//   robot.mechanics.qdd[6] = der(robot.mechanics.qd[6]);
//   robot.mechanics.tau[1] = robot.mechanics.r1.axis.tau;
//   robot.mechanics.tau[2] = robot.mechanics.r2.axis.tau;
//   robot.mechanics.tau[3] = robot.mechanics.r3.axis.tau;
//   robot.mechanics.tau[4] = robot.mechanics.r4.axis.tau;
//   robot.mechanics.tau[5] = robot.mechanics.r5.axis.tau;
//   robot.mechanics.tau[6] = robot.mechanics.r6.axis.tau;
//   robot.mechanics.r2.axis.tau + (-robot.mechanics.axis2.tau) = 0.0;
//   robot.mechanics.r2.axis.phi = robot.mechanics.axis2.phi;
//   robot.mechanics.r5.axis.tau + (-robot.mechanics.axis5.tau) = 0.0;
//   robot.mechanics.r5.axis.phi = robot.mechanics.axis5.phi;
//   robot.mechanics.r3.axis.tau + (-robot.mechanics.axis3.tau) = 0.0;
//   robot.mechanics.r3.axis.phi = robot.mechanics.axis3.phi;
//   robot.mechanics.r6.axis.tau + (-robot.mechanics.axis6.tau) = 0.0;
//   robot.mechanics.r6.axis.phi = robot.mechanics.axis6.phi;
//   robot.mechanics.r5.frame_b.t[1] + (robot.mechanics.b5.frame_a.t[1] + robot.mechanics.r6.frame_a.t[1]) = 0.0;
//   robot.mechanics.r5.frame_b.t[2] + (robot.mechanics.b5.frame_a.t[2] + robot.mechanics.r6.frame_a.t[2]) = 0.0;
//   robot.mechanics.r5.frame_b.t[3] + (robot.mechanics.b5.frame_a.t[3] + robot.mechanics.r6.frame_a.t[3]) = 0.0;
//   robot.mechanics.r5.frame_b.f[1] + (robot.mechanics.b5.frame_a.f[1] + robot.mechanics.r6.frame_a.f[1]) = 0.0;
//   robot.mechanics.r5.frame_b.f[2] + (robot.mechanics.b5.frame_a.f[2] + robot.mechanics.r6.frame_a.f[2]) = 0.0;
//   robot.mechanics.r5.frame_b.f[3] + (robot.mechanics.b5.frame_a.f[3] + robot.mechanics.r6.frame_a.f[3]) = 0.0;
//   robot.mechanics.r5.frame_b.z[1] = robot.mechanics.b5.frame_a.z[1];
//   robot.mechanics.b5.frame_a.z[1] = robot.mechanics.r6.frame_a.z[1];
//   robot.mechanics.r5.frame_b.z[2] = robot.mechanics.b5.frame_a.z[2];
//   robot.mechanics.b5.frame_a.z[2] = robot.mechanics.r6.frame_a.z[2];
//   robot.mechanics.r5.frame_b.z[3] = robot.mechanics.b5.frame_a.z[3];
//   robot.mechanics.b5.frame_a.z[3] = robot.mechanics.r6.frame_a.z[3];
//   robot.mechanics.r5.frame_b.a[1] = robot.mechanics.b5.frame_a.a[1];
//   robot.mechanics.b5.frame_a.a[1] = robot.mechanics.r6.frame_a.a[1];
//   robot.mechanics.r5.frame_b.a[2] = robot.mechanics.b5.frame_a.a[2];
//   robot.mechanics.b5.frame_a.a[2] = robot.mechanics.r6.frame_a.a[2];
//   robot.mechanics.r5.frame_b.a[3] = robot.mechanics.b5.frame_a.a[3];
//   robot.mechanics.b5.frame_a.a[3] = robot.mechanics.r6.frame_a.a[3];
//   robot.mechanics.r5.frame_b.w[1] = robot.mechanics.b5.frame_a.w[1];
//   robot.mechanics.b5.frame_a.w[1] = robot.mechanics.r6.frame_a.w[1];
//   robot.mechanics.r5.frame_b.w[2] = robot.mechanics.b5.frame_a.w[2];
//   robot.mechanics.b5.frame_a.w[2] = robot.mechanics.r6.frame_a.w[2];
//   robot.mechanics.r5.frame_b.w[3] = robot.mechanics.b5.frame_a.w[3];
//   robot.mechanics.b5.frame_a.w[3] = robot.mechanics.r6.frame_a.w[3];
//   robot.mechanics.r5.frame_b.v[1] = robot.mechanics.b5.frame_a.v[1];
//   robot.mechanics.b5.frame_a.v[1] = robot.mechanics.r6.frame_a.v[1];
//   robot.mechanics.r5.frame_b.v[2] = robot.mechanics.b5.frame_a.v[2];
//   robot.mechanics.b5.frame_a.v[2] = robot.mechanics.r6.frame_a.v[2];
//   robot.mechanics.r5.frame_b.v[3] = robot.mechanics.b5.frame_a.v[3];
//   robot.mechanics.b5.frame_a.v[3] = robot.mechanics.r6.frame_a.v[3];
//   robot.mechanics.r5.frame_b.S[1,1] = robot.mechanics.b5.frame_a.S[1,1];
//   robot.mechanics.b5.frame_a.S[1,1] = robot.mechanics.r6.frame_a.S[1,1];
//   robot.mechanics.r5.frame_b.S[1,2] = robot.mechanics.b5.frame_a.S[1,2];
//   robot.mechanics.b5.frame_a.S[1,2] = robot.mechanics.r6.frame_a.S[1,2];
//   robot.mechanics.r5.frame_b.S[1,3] = robot.mechanics.b5.frame_a.S[1,3];
//   robot.mechanics.b5.frame_a.S[1,3] = robot.mechanics.r6.frame_a.S[1,3];
//   robot.mechanics.r5.frame_b.S[2,1] = robot.mechanics.b5.frame_a.S[2,1];
//   robot.mechanics.b5.frame_a.S[2,1] = robot.mechanics.r6.frame_a.S[2,1];
//   robot.mechanics.r5.frame_b.S[2,2] = robot.mechanics.b5.frame_a.S[2,2];
//   robot.mechanics.b5.frame_a.S[2,2] = robot.mechanics.r6.frame_a.S[2,2];
//   robot.mechanics.r5.frame_b.S[2,3] = robot.mechanics.b5.frame_a.S[2,3];
//   robot.mechanics.b5.frame_a.S[2,3] = robot.mechanics.r6.frame_a.S[2,3];
//   robot.mechanics.r5.frame_b.S[3,1] = robot.mechanics.b5.frame_a.S[3,1];
//   robot.mechanics.b5.frame_a.S[3,1] = robot.mechanics.r6.frame_a.S[3,1];
//   robot.mechanics.r5.frame_b.S[3,2] = robot.mechanics.b5.frame_a.S[3,2];
//   robot.mechanics.b5.frame_a.S[3,2] = robot.mechanics.r6.frame_a.S[3,2];
//   robot.mechanics.r5.frame_b.S[3,3] = robot.mechanics.b5.frame_a.S[3,3];
//   robot.mechanics.b5.frame_a.S[3,3] = robot.mechanics.r6.frame_a.S[3,3];
//   robot.mechanics.r5.frame_b.r0[1] = robot.mechanics.b5.frame_a.r0[1];
//   robot.mechanics.b5.frame_a.r0[1] = robot.mechanics.r6.frame_a.r0[1];
//   robot.mechanics.r5.frame_b.r0[2] = robot.mechanics.b5.frame_a.r0[2];
//   robot.mechanics.b5.frame_a.r0[2] = robot.mechanics.r6.frame_a.r0[2];
//   robot.mechanics.r5.frame_b.r0[3] = robot.mechanics.b5.frame_a.r0[3];
//   robot.mechanics.b5.frame_a.r0[3] = robot.mechanics.r6.frame_a.r0[3];
//   robot.mechanics.r6.frame_b.t[1] + robot.mechanics.load.frame_a.t[1] = 0.0;
//   robot.mechanics.r6.frame_b.t[2] + robot.mechanics.load.frame_a.t[2] = 0.0;
//   robot.mechanics.r6.frame_b.t[3] + robot.mechanics.load.frame_a.t[3] = 0.0;
//   robot.mechanics.r6.frame_b.f[1] + robot.mechanics.load.frame_a.f[1] = 0.0;
//   robot.mechanics.r6.frame_b.f[2] + robot.mechanics.load.frame_a.f[2] = 0.0;
//   robot.mechanics.r6.frame_b.f[3] + robot.mechanics.load.frame_a.f[3] = 0.0;
//   robot.mechanics.r6.frame_b.z[1] = robot.mechanics.load.frame_a.z[1];
//   robot.mechanics.r6.frame_b.z[2] = robot.mechanics.load.frame_a.z[2];
//   robot.mechanics.r6.frame_b.z[3] = robot.mechanics.load.frame_a.z[3];
//   robot.mechanics.r6.frame_b.a[1] = robot.mechanics.load.frame_a.a[1];
//   robot.mechanics.r6.frame_b.a[2] = robot.mechanics.load.frame_a.a[2];
//   robot.mechanics.r6.frame_b.a[3] = robot.mechanics.load.frame_a.a[3];
//   robot.mechanics.r6.frame_b.w[1] = robot.mechanics.load.frame_a.w[1];
//   robot.mechanics.r6.frame_b.w[2] = robot.mechanics.load.frame_a.w[2];
//   robot.mechanics.r6.frame_b.w[3] = robot.mechanics.load.frame_a.w[3];
//   robot.mechanics.r6.frame_b.v[1] = robot.mechanics.load.frame_a.v[1];
//   robot.mechanics.r6.frame_b.v[2] = robot.mechanics.load.frame_a.v[2];
//   robot.mechanics.r6.frame_b.v[3] = robot.mechanics.load.frame_a.v[3];
//   robot.mechanics.r6.frame_b.S[1,1] = robot.mechanics.load.frame_a.S[1,1];
//   robot.mechanics.r6.frame_b.S[1,2] = robot.mechanics.load.frame_a.S[1,2];
//   robot.mechanics.r6.frame_b.S[1,3] = robot.mechanics.load.frame_a.S[1,3];
//   robot.mechanics.r6.frame_b.S[2,1] = robot.mechanics.load.frame_a.S[2,1];
//   robot.mechanics.r6.frame_b.S[2,2] = robot.mechanics.load.frame_a.S[2,2];
//   robot.mechanics.r6.frame_b.S[2,3] = robot.mechanics.load.frame_a.S[2,3];
//   robot.mechanics.r6.frame_b.S[3,1] = robot.mechanics.load.frame_a.S[3,1];
//   robot.mechanics.r6.frame_b.S[3,2] = robot.mechanics.load.frame_a.S[3,2];
//   robot.mechanics.r6.frame_b.S[3,3] = robot.mechanics.load.frame_a.S[3,3];
//   robot.mechanics.r6.frame_b.r0[1] = robot.mechanics.load.frame_a.r0[1];
//   robot.mechanics.r6.frame_b.r0[2] = robot.mechanics.load.frame_a.r0[2];
//   robot.mechanics.r6.frame_b.r0[3] = robot.mechanics.load.frame_a.r0[3];
//   robot.mechanics.b4.frame_b.t[1] + robot.mechanics.r5.frame_a.t[1] = 0.0;
//   robot.mechanics.b4.frame_b.t[2] + robot.mechanics.r5.frame_a.t[2] = 0.0;
//   robot.mechanics.b4.frame_b.t[3] + robot.mechanics.r5.frame_a.t[3] = 0.0;
//   robot.mechanics.b4.frame_b.f[1] + robot.mechanics.r5.frame_a.f[1] = 0.0;
//   robot.mechanics.b4.frame_b.f[2] + robot.mechanics.r5.frame_a.f[2] = 0.0;
//   robot.mechanics.b4.frame_b.f[3] + robot.mechanics.r5.frame_a.f[3] = 0.0;
//   robot.mechanics.b4.frame_b.z[1] = robot.mechanics.r5.frame_a.z[1];
//   robot.mechanics.b4.frame_b.z[2] = robot.mechanics.r5.frame_a.z[2];
//   robot.mechanics.b4.frame_b.z[3] = robot.mechanics.r5.frame_a.z[3];
//   robot.mechanics.b4.frame_b.a[1] = robot.mechanics.r5.frame_a.a[1];
//   robot.mechanics.b4.frame_b.a[2] = robot.mechanics.r5.frame_a.a[2];
//   robot.mechanics.b4.frame_b.a[3] = robot.mechanics.r5.frame_a.a[3];
//   robot.mechanics.b4.frame_b.w[1] = robot.mechanics.r5.frame_a.w[1];
//   robot.mechanics.b4.frame_b.w[2] = robot.mechanics.r5.frame_a.w[2];
//   robot.mechanics.b4.frame_b.w[3] = robot.mechanics.r5.frame_a.w[3];
//   robot.mechanics.b4.frame_b.v[1] = robot.mechanics.r5.frame_a.v[1];
//   robot.mechanics.b4.frame_b.v[2] = robot.mechanics.r5.frame_a.v[2];
//   robot.mechanics.b4.frame_b.v[3] = robot.mechanics.r5.frame_a.v[3];
//   robot.mechanics.b4.frame_b.S[1,1] = robot.mechanics.r5.frame_a.S[1,1];
//   robot.mechanics.b4.frame_b.S[1,2] = robot.mechanics.r5.frame_a.S[1,2];
//   robot.mechanics.b4.frame_b.S[1,3] = robot.mechanics.r5.frame_a.S[1,3];
//   robot.mechanics.b4.frame_b.S[2,1] = robot.mechanics.r5.frame_a.S[2,1];
//   robot.mechanics.b4.frame_b.S[2,2] = robot.mechanics.r5.frame_a.S[2,2];
//   robot.mechanics.b4.frame_b.S[2,3] = robot.mechanics.r5.frame_a.S[2,3];
//   robot.mechanics.b4.frame_b.S[3,1] = robot.mechanics.r5.frame_a.S[3,1];
//   robot.mechanics.b4.frame_b.S[3,2] = robot.mechanics.r5.frame_a.S[3,2];
//   robot.mechanics.b4.frame_b.S[3,3] = robot.mechanics.r5.frame_a.S[3,3];
//   robot.mechanics.b4.frame_b.r0[1] = robot.mechanics.r5.frame_a.r0[1];
//   robot.mechanics.b4.frame_b.r0[2] = robot.mechanics.r5.frame_a.r0[2];
//   robot.mechanics.b4.frame_b.r0[3] = robot.mechanics.r5.frame_a.r0[3];
//   robot.mechanics.r4.axis.tau + (-robot.mechanics.axis4.tau) = 0.0;
//   robot.mechanics.r4.axis.phi = robot.mechanics.axis4.phi;
//   robot.mechanics.r3.frame_b.t[1] + (robot.mechanics.b3.frame_a.t[1] + robot.mechanics.r4.frame_a.t[1]) = 0.0;
//   robot.mechanics.r3.frame_b.t[2] + (robot.mechanics.b3.frame_a.t[2] + robot.mechanics.r4.frame_a.t[2]) = 0.0;
//   robot.mechanics.r3.frame_b.t[3] + (robot.mechanics.b3.frame_a.t[3] + robot.mechanics.r4.frame_a.t[3]) = 0.0;
//   robot.mechanics.r3.frame_b.f[1] + (robot.mechanics.b3.frame_a.f[1] + robot.mechanics.r4.frame_a.f[1]) = 0.0;
//   robot.mechanics.r3.frame_b.f[2] + (robot.mechanics.b3.frame_a.f[2] + robot.mechanics.r4.frame_a.f[2]) = 0.0;
//   robot.mechanics.r3.frame_b.f[3] + (robot.mechanics.b3.frame_a.f[3] + robot.mechanics.r4.frame_a.f[3]) = 0.0;
//   robot.mechanics.r3.frame_b.z[1] = robot.mechanics.b3.frame_a.z[1];
//   robot.mechanics.b3.frame_a.z[1] = robot.mechanics.r4.frame_a.z[1];
//   robot.mechanics.r3.frame_b.z[2] = robot.mechanics.b3.frame_a.z[2];
//   robot.mechanics.b3.frame_a.z[2] = robot.mechanics.r4.frame_a.z[2];
//   robot.mechanics.r3.frame_b.z[3] = robot.mechanics.b3.frame_a.z[3];
//   robot.mechanics.b3.frame_a.z[3] = robot.mechanics.r4.frame_a.z[3];
//   robot.mechanics.r3.frame_b.a[1] = robot.mechanics.b3.frame_a.a[1];
//   robot.mechanics.b3.frame_a.a[1] = robot.mechanics.r4.frame_a.a[1];
//   robot.mechanics.r3.frame_b.a[2] = robot.mechanics.b3.frame_a.a[2];
//   robot.mechanics.b3.frame_a.a[2] = robot.mechanics.r4.frame_a.a[2];
//   robot.mechanics.r3.frame_b.a[3] = robot.mechanics.b3.frame_a.a[3];
//   robot.mechanics.b3.frame_a.a[3] = robot.mechanics.r4.frame_a.a[3];
//   robot.mechanics.r3.frame_b.w[1] = robot.mechanics.b3.frame_a.w[1];
//   robot.mechanics.b3.frame_a.w[1] = robot.mechanics.r4.frame_a.w[1];
//   robot.mechanics.r3.frame_b.w[2] = robot.mechanics.b3.frame_a.w[2];
//   robot.mechanics.b3.frame_a.w[2] = robot.mechanics.r4.frame_a.w[2];
//   robot.mechanics.r3.frame_b.w[3] = robot.mechanics.b3.frame_a.w[3];
//   robot.mechanics.b3.frame_a.w[3] = robot.mechanics.r4.frame_a.w[3];
//   robot.mechanics.r3.frame_b.v[1] = robot.mechanics.b3.frame_a.v[1];
//   robot.mechanics.b3.frame_a.v[1] = robot.mechanics.r4.frame_a.v[1];
//   robot.mechanics.r3.frame_b.v[2] = robot.mechanics.b3.frame_a.v[2];
//   robot.mechanics.b3.frame_a.v[2] = robot.mechanics.r4.frame_a.v[2];
//   robot.mechanics.r3.frame_b.v[3] = robot.mechanics.b3.frame_a.v[3];
//   robot.mechanics.b3.frame_a.v[3] = robot.mechanics.r4.frame_a.v[3];
//   robot.mechanics.r3.frame_b.S[1,1] = robot.mechanics.b3.frame_a.S[1,1];
//   robot.mechanics.b3.frame_a.S[1,1] = robot.mechanics.r4.frame_a.S[1,1];
//   robot.mechanics.r3.frame_b.S[1,2] = robot.mechanics.b3.frame_a.S[1,2];
//   robot.mechanics.b3.frame_a.S[1,2] = robot.mechanics.r4.frame_a.S[1,2];
//   robot.mechanics.r3.frame_b.S[1,3] = robot.mechanics.b3.frame_a.S[1,3];
//   robot.mechanics.b3.frame_a.S[1,3] = robot.mechanics.r4.frame_a.S[1,3];
//   robot.mechanics.r3.frame_b.S[2,1] = robot.mechanics.b3.frame_a.S[2,1];
//   robot.mechanics.b3.frame_a.S[2,1] = robot.mechanics.r4.frame_a.S[2,1];
//   robot.mechanics.r3.frame_b.S[2,2] = robot.mechanics.b3.frame_a.S[2,2];
//   robot.mechanics.b3.frame_a.S[2,2] = robot.mechanics.r4.frame_a.S[2,2];
//   robot.mechanics.r3.frame_b.S[2,3] = robot.mechanics.b3.frame_a.S[2,3];
//   robot.mechanics.b3.frame_a.S[2,3] = robot.mechanics.r4.frame_a.S[2,3];
//   robot.mechanics.r3.frame_b.S[3,1] = robot.mechanics.b3.frame_a.S[3,1];
//   robot.mechanics.b3.frame_a.S[3,1] = robot.mechanics.r4.frame_a.S[3,1];
//   robot.mechanics.r3.frame_b.S[3,2] = robot.mechanics.b3.frame_a.S[3,2];
//   robot.mechanics.b3.frame_a.S[3,2] = robot.mechanics.r4.frame_a.S[3,2];
//   robot.mechanics.r3.frame_b.S[3,3] = robot.mechanics.b3.frame_a.S[3,3];
//   robot.mechanics.b3.frame_a.S[3,3] = robot.mechanics.r4.frame_a.S[3,3];
//   robot.mechanics.r3.frame_b.r0[1] = robot.mechanics.b3.frame_a.r0[1];
//   robot.mechanics.b3.frame_a.r0[1] = robot.mechanics.r4.frame_a.r0[1];
//   robot.mechanics.r3.frame_b.r0[2] = robot.mechanics.b3.frame_a.r0[2];
//   robot.mechanics.b3.frame_a.r0[2] = robot.mechanics.r4.frame_a.r0[2];
//   robot.mechanics.r3.frame_b.r0[3] = robot.mechanics.b3.frame_a.r0[3];
//   robot.mechanics.b3.frame_a.r0[3] = robot.mechanics.r4.frame_a.r0[3];
//   robot.mechanics.r4.frame_b.t[1] + robot.mechanics.b4.frame_a.t[1] = 0.0;
//   robot.mechanics.r4.frame_b.t[2] + robot.mechanics.b4.frame_a.t[2] = 0.0;
//   robot.mechanics.r4.frame_b.t[3] + robot.mechanics.b4.frame_a.t[3] = 0.0;
//   robot.mechanics.r4.frame_b.f[1] + robot.mechanics.b4.frame_a.f[1] = 0.0;
//   robot.mechanics.r4.frame_b.f[2] + robot.mechanics.b4.frame_a.f[2] = 0.0;
//   robot.mechanics.r4.frame_b.f[3] + robot.mechanics.b4.frame_a.f[3] = 0.0;
//   robot.mechanics.r4.frame_b.z[1] = robot.mechanics.b4.frame_a.z[1];
//   robot.mechanics.r4.frame_b.z[2] = robot.mechanics.b4.frame_a.z[2];
//   robot.mechanics.r4.frame_b.z[3] = robot.mechanics.b4.frame_a.z[3];
//   robot.mechanics.r4.frame_b.a[1] = robot.mechanics.b4.frame_a.a[1];
//   robot.mechanics.r4.frame_b.a[2] = robot.mechanics.b4.frame_a.a[2];
//   robot.mechanics.r4.frame_b.a[3] = robot.mechanics.b4.frame_a.a[3];
//   robot.mechanics.r4.frame_b.w[1] = robot.mechanics.b4.frame_a.w[1];
//   robot.mechanics.r4.frame_b.w[2] = robot.mechanics.b4.frame_a.w[2];
//   robot.mechanics.r4.frame_b.w[3] = robot.mechanics.b4.frame_a.w[3];
//   robot.mechanics.r4.frame_b.v[1] = robot.mechanics.b4.frame_a.v[1];
//   robot.mechanics.r4.frame_b.v[2] = robot.mechanics.b4.frame_a.v[2];
//   robot.mechanics.r4.frame_b.v[3] = robot.mechanics.b4.frame_a.v[3];
//   robot.mechanics.r4.frame_b.S[1,1] = robot.mechanics.b4.frame_a.S[1,1];
//   robot.mechanics.r4.frame_b.S[1,2] = robot.mechanics.b4.frame_a.S[1,2];
//   robot.mechanics.r4.frame_b.S[1,3] = robot.mechanics.b4.frame_a.S[1,3];
//   robot.mechanics.r4.frame_b.S[2,1] = robot.mechanics.b4.frame_a.S[2,1];
//   robot.mechanics.r4.frame_b.S[2,2] = robot.mechanics.b4.frame_a.S[2,2];
//   robot.mechanics.r4.frame_b.S[2,3] = robot.mechanics.b4.frame_a.S[2,3];
//   robot.mechanics.r4.frame_b.S[3,1] = robot.mechanics.b4.frame_a.S[3,1];
//   robot.mechanics.r4.frame_b.S[3,2] = robot.mechanics.b4.frame_a.S[3,2];
//   robot.mechanics.r4.frame_b.S[3,3] = robot.mechanics.b4.frame_a.S[3,3];
//   robot.mechanics.r4.frame_b.r0[1] = robot.mechanics.b4.frame_a.r0[1];
//   robot.mechanics.r4.frame_b.r0[2] = robot.mechanics.b4.frame_a.r0[2];
//   robot.mechanics.r4.frame_b.r0[3] = robot.mechanics.b4.frame_a.r0[3];
//   robot.mechanics.b2.frame_b.t[1] + robot.mechanics.r3.frame_a.t[1] = 0.0;
//   robot.mechanics.b2.frame_b.t[2] + robot.mechanics.r3.frame_a.t[2] = 0.0;
//   robot.mechanics.b2.frame_b.t[3] + robot.mechanics.r3.frame_a.t[3] = 0.0;
//   robot.mechanics.b2.frame_b.f[1] + robot.mechanics.r3.frame_a.f[1] = 0.0;
//   robot.mechanics.b2.frame_b.f[2] + robot.mechanics.r3.frame_a.f[2] = 0.0;
//   robot.mechanics.b2.frame_b.f[3] + robot.mechanics.r3.frame_a.f[3] = 0.0;
//   robot.mechanics.b2.frame_b.z[1] = robot.mechanics.r3.frame_a.z[1];
//   robot.mechanics.b2.frame_b.z[2] = robot.mechanics.r3.frame_a.z[2];
//   robot.mechanics.b2.frame_b.z[3] = robot.mechanics.r3.frame_a.z[3];
//   robot.mechanics.b2.frame_b.a[1] = robot.mechanics.r3.frame_a.a[1];
//   robot.mechanics.b2.frame_b.a[2] = robot.mechanics.r3.frame_a.a[2];
//   robot.mechanics.b2.frame_b.a[3] = robot.mechanics.r3.frame_a.a[3];
//   robot.mechanics.b2.frame_b.w[1] = robot.mechanics.r3.frame_a.w[1];
//   robot.mechanics.b2.frame_b.w[2] = robot.mechanics.r3.frame_a.w[2];
//   robot.mechanics.b2.frame_b.w[3] = robot.mechanics.r3.frame_a.w[3];
//   robot.mechanics.b2.frame_b.v[1] = robot.mechanics.r3.frame_a.v[1];
//   robot.mechanics.b2.frame_b.v[2] = robot.mechanics.r3.frame_a.v[2];
//   robot.mechanics.b2.frame_b.v[3] = robot.mechanics.r3.frame_a.v[3];
//   robot.mechanics.b2.frame_b.S[1,1] = robot.mechanics.r3.frame_a.S[1,1];
//   robot.mechanics.b2.frame_b.S[1,2] = robot.mechanics.r3.frame_a.S[1,2];
//   robot.mechanics.b2.frame_b.S[1,3] = robot.mechanics.r3.frame_a.S[1,3];
//   robot.mechanics.b2.frame_b.S[2,1] = robot.mechanics.r3.frame_a.S[2,1];
//   robot.mechanics.b2.frame_b.S[2,2] = robot.mechanics.r3.frame_a.S[2,2];
//   robot.mechanics.b2.frame_b.S[2,3] = robot.mechanics.r3.frame_a.S[2,3];
//   robot.mechanics.b2.frame_b.S[3,1] = robot.mechanics.r3.frame_a.S[3,1];
//   robot.mechanics.b2.frame_b.S[3,2] = robot.mechanics.r3.frame_a.S[3,2];
//   robot.mechanics.b2.frame_b.S[3,3] = robot.mechanics.r3.frame_a.S[3,3];
//   robot.mechanics.b2.frame_b.r0[1] = robot.mechanics.r3.frame_a.r0[1];
//   robot.mechanics.b2.frame_b.r0[2] = robot.mechanics.r3.frame_a.r0[2];
//   robot.mechanics.b2.frame_b.r0[3] = robot.mechanics.r3.frame_a.r0[3];
//   robot.mechanics.r2.frame_b.t[1] + robot.mechanics.b2.frame_a.t[1] = 0.0;
//   robot.mechanics.r2.frame_b.t[2] + robot.mechanics.b2.frame_a.t[2] = 0.0;
//   robot.mechanics.r2.frame_b.t[3] + robot.mechanics.b2.frame_a.t[3] = 0.0;
//   robot.mechanics.r2.frame_b.f[1] + robot.mechanics.b2.frame_a.f[1] = 0.0;
//   robot.mechanics.r2.frame_b.f[2] + robot.mechanics.b2.frame_a.f[2] = 0.0;
//   robot.mechanics.r2.frame_b.f[3] + robot.mechanics.b2.frame_a.f[3] = 0.0;
//   robot.mechanics.r2.frame_b.z[1] = robot.mechanics.b2.frame_a.z[1];
//   robot.mechanics.r2.frame_b.z[2] = robot.mechanics.b2.frame_a.z[2];
//   robot.mechanics.r2.frame_b.z[3] = robot.mechanics.b2.frame_a.z[3];
//   robot.mechanics.r2.frame_b.a[1] = robot.mechanics.b2.frame_a.a[1];
//   robot.mechanics.r2.frame_b.a[2] = robot.mechanics.b2.frame_a.a[2];
//   robot.mechanics.r2.frame_b.a[3] = robot.mechanics.b2.frame_a.a[3];
//   robot.mechanics.r2.frame_b.w[1] = robot.mechanics.b2.frame_a.w[1];
//   robot.mechanics.r2.frame_b.w[2] = robot.mechanics.b2.frame_a.w[2];
//   robot.mechanics.r2.frame_b.w[3] = robot.mechanics.b2.frame_a.w[3];
//   robot.mechanics.r2.frame_b.v[1] = robot.mechanics.b2.frame_a.v[1];
//   robot.mechanics.r2.frame_b.v[2] = robot.mechanics.b2.frame_a.v[2];
//   robot.mechanics.r2.frame_b.v[3] = robot.mechanics.b2.frame_a.v[3];
//   robot.mechanics.r2.frame_b.S[1,1] = robot.mechanics.b2.frame_a.S[1,1];
//   robot.mechanics.r2.frame_b.S[1,2] = robot.mechanics.b2.frame_a.S[1,2];
//   robot.mechanics.r2.frame_b.S[1,3] = robot.mechanics.b2.frame_a.S[1,3];
//   robot.mechanics.r2.frame_b.S[2,1] = robot.mechanics.b2.frame_a.S[2,1];
//   robot.mechanics.r2.frame_b.S[2,2] = robot.mechanics.b2.frame_a.S[2,2];
//   robot.mechanics.r2.frame_b.S[2,3] = robot.mechanics.b2.frame_a.S[2,3];
//   robot.mechanics.r2.frame_b.S[3,1] = robot.mechanics.b2.frame_a.S[3,1];
//   robot.mechanics.r2.frame_b.S[3,2] = robot.mechanics.b2.frame_a.S[3,2];
//   robot.mechanics.r2.frame_b.S[3,3] = robot.mechanics.b2.frame_a.S[3,3];
//   robot.mechanics.r2.frame_b.r0[1] = robot.mechanics.b2.frame_a.r0[1];
//   robot.mechanics.r2.frame_b.r0[2] = robot.mechanics.b2.frame_a.r0[2];
//   robot.mechanics.r2.frame_b.r0[3] = robot.mechanics.b2.frame_a.r0[3];
//   robot.mechanics.r1.frame_a.t[1] + (robot.mechanics.inertial.frame_b.t[1] + robot.mechanics.b0.frame_a.t[1]) = 0.0;
//   robot.mechanics.r1.frame_a.t[2] + (robot.mechanics.inertial.frame_b.t[2] + robot.mechanics.b0.frame_a.t[2]) = 0.0;
//   robot.mechanics.r1.frame_a.t[3] + (robot.mechanics.inertial.frame_b.t[3] + robot.mechanics.b0.frame_a.t[3]) = 0.0;
//   robot.mechanics.r1.frame_a.f[1] + (robot.mechanics.inertial.frame_b.f[1] + robot.mechanics.b0.frame_a.f[1]) = 0.0;
//   robot.mechanics.r1.frame_a.f[2] + (robot.mechanics.inertial.frame_b.f[2] + robot.mechanics.b0.frame_a.f[2]) = 0.0;
//   robot.mechanics.r1.frame_a.f[3] + (robot.mechanics.inertial.frame_b.f[3] + robot.mechanics.b0.frame_a.f[3]) = 0.0;
//   robot.mechanics.r1.frame_a.z[1] = robot.mechanics.inertial.frame_b.z[1];
//   robot.mechanics.inertial.frame_b.z[1] = robot.mechanics.b0.frame_a.z[1];
//   robot.mechanics.r1.frame_a.z[2] = robot.mechanics.inertial.frame_b.z[2];
//   robot.mechanics.inertial.frame_b.z[2] = robot.mechanics.b0.frame_a.z[2];
//   robot.mechanics.r1.frame_a.z[3] = robot.mechanics.inertial.frame_b.z[3];
//   robot.mechanics.inertial.frame_b.z[3] = robot.mechanics.b0.frame_a.z[3];
//   robot.mechanics.r1.frame_a.a[1] = robot.mechanics.inertial.frame_b.a[1];
//   robot.mechanics.inertial.frame_b.a[1] = robot.mechanics.b0.frame_a.a[1];
//   robot.mechanics.r1.frame_a.a[2] = robot.mechanics.inertial.frame_b.a[2];
//   robot.mechanics.inertial.frame_b.a[2] = robot.mechanics.b0.frame_a.a[2];
//   robot.mechanics.r1.frame_a.a[3] = robot.mechanics.inertial.frame_b.a[3];
//   robot.mechanics.inertial.frame_b.a[3] = robot.mechanics.b0.frame_a.a[3];
//   robot.mechanics.r1.frame_a.w[1] = robot.mechanics.inertial.frame_b.w[1];
//   robot.mechanics.inertial.frame_b.w[1] = robot.mechanics.b0.frame_a.w[1];
//   robot.mechanics.r1.frame_a.w[2] = robot.mechanics.inertial.frame_b.w[2];
//   robot.mechanics.inertial.frame_b.w[2] = robot.mechanics.b0.frame_a.w[2];
//   robot.mechanics.r1.frame_a.w[3] = robot.mechanics.inertial.frame_b.w[3];
//   robot.mechanics.inertial.frame_b.w[3] = robot.mechanics.b0.frame_a.w[3];
//   robot.mechanics.r1.frame_a.v[1] = robot.mechanics.inertial.frame_b.v[1];
//   robot.mechanics.inertial.frame_b.v[1] = robot.mechanics.b0.frame_a.v[1];
//   robot.mechanics.r1.frame_a.v[2] = robot.mechanics.inertial.frame_b.v[2];
//   robot.mechanics.inertial.frame_b.v[2] = robot.mechanics.b0.frame_a.v[2];
//   robot.mechanics.r1.frame_a.v[3] = robot.mechanics.inertial.frame_b.v[3];
//   robot.mechanics.inertial.frame_b.v[3] = robot.mechanics.b0.frame_a.v[3];
//   robot.mechanics.r1.frame_a.S[1,1] = robot.mechanics.inertial.frame_b.S[1,1];
//   robot.mechanics.inertial.frame_b.S[1,1] = robot.mechanics.b0.frame_a.S[1,1];
//   robot.mechanics.r1.frame_a.S[1,2] = robot.mechanics.inertial.frame_b.S[1,2];
//   robot.mechanics.inertial.frame_b.S[1,2] = robot.mechanics.b0.frame_a.S[1,2];
//   robot.mechanics.r1.frame_a.S[1,3] = robot.mechanics.inertial.frame_b.S[1,3];
//   robot.mechanics.inertial.frame_b.S[1,3] = robot.mechanics.b0.frame_a.S[1,3];
//   robot.mechanics.r1.frame_a.S[2,1] = robot.mechanics.inertial.frame_b.S[2,1];
//   robot.mechanics.inertial.frame_b.S[2,1] = robot.mechanics.b0.frame_a.S[2,1];
//   robot.mechanics.r1.frame_a.S[2,2] = robot.mechanics.inertial.frame_b.S[2,2];
//   robot.mechanics.inertial.frame_b.S[2,2] = robot.mechanics.b0.frame_a.S[2,2];
//   robot.mechanics.r1.frame_a.S[2,3] = robot.mechanics.inertial.frame_b.S[2,3];
//   robot.mechanics.inertial.frame_b.S[2,3] = robot.mechanics.b0.frame_a.S[2,3];
//   robot.mechanics.r1.frame_a.S[3,1] = robot.mechanics.inertial.frame_b.S[3,1];
//   robot.mechanics.inertial.frame_b.S[3,1] = robot.mechanics.b0.frame_a.S[3,1];
//   robot.mechanics.r1.frame_a.S[3,2] = robot.mechanics.inertial.frame_b.S[3,2];
//   robot.mechanics.inertial.frame_b.S[3,2] = robot.mechanics.b0.frame_a.S[3,2];
//   robot.mechanics.r1.frame_a.S[3,3] = robot.mechanics.inertial.frame_b.S[3,3];
//   robot.mechanics.inertial.frame_b.S[3,3] = robot.mechanics.b0.frame_a.S[3,3];
//   robot.mechanics.r1.frame_a.r0[1] = robot.mechanics.inertial.frame_b.r0[1];
//   robot.mechanics.inertial.frame_b.r0[1] = robot.mechanics.b0.frame_a.r0[1];
//   robot.mechanics.r1.frame_a.r0[2] = robot.mechanics.inertial.frame_b.r0[2];
//   robot.mechanics.inertial.frame_b.r0[2] = robot.mechanics.b0.frame_a.r0[2];
//   robot.mechanics.r1.frame_a.r0[3] = robot.mechanics.inertial.frame_b.r0[3];
//   robot.mechanics.inertial.frame_b.r0[3] = robot.mechanics.b0.frame_a.r0[3];
//   robot.mechanics.b1.frame_b.t[1] + robot.mechanics.r2.frame_a.t[1] = 0.0;
//   robot.mechanics.b1.frame_b.t[2] + robot.mechanics.r2.frame_a.t[2] = 0.0;
//   robot.mechanics.b1.frame_b.t[3] + robot.mechanics.r2.frame_a.t[3] = 0.0;
//   robot.mechanics.b1.frame_b.f[1] + robot.mechanics.r2.frame_a.f[1] = 0.0;
//   robot.mechanics.b1.frame_b.f[2] + robot.mechanics.r2.frame_a.f[2] = 0.0;
//   robot.mechanics.b1.frame_b.f[3] + robot.mechanics.r2.frame_a.f[3] = 0.0;
//   robot.mechanics.b1.frame_b.z[1] = robot.mechanics.r2.frame_a.z[1];
//   robot.mechanics.b1.frame_b.z[2] = robot.mechanics.r2.frame_a.z[2];
//   robot.mechanics.b1.frame_b.z[3] = robot.mechanics.r2.frame_a.z[3];
//   robot.mechanics.b1.frame_b.a[1] = robot.mechanics.r2.frame_a.a[1];
//   robot.mechanics.b1.frame_b.a[2] = robot.mechanics.r2.frame_a.a[2];
//   robot.mechanics.b1.frame_b.a[3] = robot.mechanics.r2.frame_a.a[3];
//   robot.mechanics.b1.frame_b.w[1] = robot.mechanics.r2.frame_a.w[1];
//   robot.mechanics.b1.frame_b.w[2] = robot.mechanics.r2.frame_a.w[2];
//   robot.mechanics.b1.frame_b.w[3] = robot.mechanics.r2.frame_a.w[3];
//   robot.mechanics.b1.frame_b.v[1] = robot.mechanics.r2.frame_a.v[1];
//   robot.mechanics.b1.frame_b.v[2] = robot.mechanics.r2.frame_a.v[2];
//   robot.mechanics.b1.frame_b.v[3] = robot.mechanics.r2.frame_a.v[3];
//   robot.mechanics.b1.frame_b.S[1,1] = robot.mechanics.r2.frame_a.S[1,1];
//   robot.mechanics.b1.frame_b.S[1,2] = robot.mechanics.r2.frame_a.S[1,2];
//   robot.mechanics.b1.frame_b.S[1,3] = robot.mechanics.r2.frame_a.S[1,3];
//   robot.mechanics.b1.frame_b.S[2,1] = robot.mechanics.r2.frame_a.S[2,1];
//   robot.mechanics.b1.frame_b.S[2,2] = robot.mechanics.r2.frame_a.S[2,2];
//   robot.mechanics.b1.frame_b.S[2,3] = robot.mechanics.r2.frame_a.S[2,3];
//   robot.mechanics.b1.frame_b.S[3,1] = robot.mechanics.r2.frame_a.S[3,1];
//   robot.mechanics.b1.frame_b.S[3,2] = robot.mechanics.r2.frame_a.S[3,2];
//   robot.mechanics.b1.frame_b.S[3,3] = robot.mechanics.r2.frame_a.S[3,3];
//   robot.mechanics.b1.frame_b.r0[1] = robot.mechanics.r2.frame_a.r0[1];
//   robot.mechanics.b1.frame_b.r0[2] = robot.mechanics.r2.frame_a.r0[2];
//   robot.mechanics.b1.frame_b.r0[3] = robot.mechanics.r2.frame_a.r0[3];
//   robot.mechanics.r1.axis.tau + (-robot.mechanics.axis1.tau) = 0.0;
//   robot.mechanics.r1.axis.phi = robot.mechanics.axis1.phi;
//   robot.mechanics.r1.frame_b.t[1] + robot.mechanics.b1.frame_a.t[1] = 0.0;
//   robot.mechanics.r1.frame_b.t[2] + robot.mechanics.b1.frame_a.t[2] = 0.0;
//   robot.mechanics.r1.frame_b.t[3] + robot.mechanics.b1.frame_a.t[3] = 0.0;
//   robot.mechanics.r1.frame_b.f[1] + robot.mechanics.b1.frame_a.f[1] = 0.0;
//   robot.mechanics.r1.frame_b.f[2] + robot.mechanics.b1.frame_a.f[2] = 0.0;
//   robot.mechanics.r1.frame_b.f[3] + robot.mechanics.b1.frame_a.f[3] = 0.0;
//   robot.mechanics.r1.frame_b.z[1] = robot.mechanics.b1.frame_a.z[1];
//   robot.mechanics.r1.frame_b.z[2] = robot.mechanics.b1.frame_a.z[2];
//   robot.mechanics.r1.frame_b.z[3] = robot.mechanics.b1.frame_a.z[3];
//   robot.mechanics.r1.frame_b.a[1] = robot.mechanics.b1.frame_a.a[1];
//   robot.mechanics.r1.frame_b.a[2] = robot.mechanics.b1.frame_a.a[2];
//   robot.mechanics.r1.frame_b.a[3] = robot.mechanics.b1.frame_a.a[3];
//   robot.mechanics.r1.frame_b.w[1] = robot.mechanics.b1.frame_a.w[1];
//   robot.mechanics.r1.frame_b.w[2] = robot.mechanics.b1.frame_a.w[2];
//   robot.mechanics.r1.frame_b.w[3] = robot.mechanics.b1.frame_a.w[3];
//   robot.mechanics.r1.frame_b.v[1] = robot.mechanics.b1.frame_a.v[1];
//   robot.mechanics.r1.frame_b.v[2] = robot.mechanics.b1.frame_a.v[2];
//   robot.mechanics.r1.frame_b.v[3] = robot.mechanics.b1.frame_a.v[3];
//   robot.mechanics.r1.frame_b.S[1,1] = robot.mechanics.b1.frame_a.S[1,1];
//   robot.mechanics.r1.frame_b.S[1,2] = robot.mechanics.b1.frame_a.S[1,2];
//   robot.mechanics.r1.frame_b.S[1,3] = robot.mechanics.b1.frame_a.S[1,3];
//   robot.mechanics.r1.frame_b.S[2,1] = robot.mechanics.b1.frame_a.S[2,1];
//   robot.mechanics.r1.frame_b.S[2,2] = robot.mechanics.b1.frame_a.S[2,2];
//   robot.mechanics.r1.frame_b.S[2,3] = robot.mechanics.b1.frame_a.S[2,3];
//   robot.mechanics.r1.frame_b.S[3,1] = robot.mechanics.b1.frame_a.S[3,1];
//   robot.mechanics.r1.frame_b.S[3,2] = robot.mechanics.b1.frame_a.S[3,2];
//   robot.mechanics.r1.frame_b.S[3,3] = robot.mechanics.b1.frame_a.S[3,3];
//   robot.mechanics.r1.frame_b.r0[1] = robot.mechanics.b1.frame_a.r0[1];
//   robot.mechanics.r1.frame_b.r0[2] = robot.mechanics.b1.frame_a.r0[2];
//   robot.mechanics.r1.frame_b.r0[3] = robot.mechanics.b1.frame_a.r0[3];
//   robot.mechanics.b3.frame_b.f[1] = 0.0;
//   robot.mechanics.b3.frame_b.f[2] = 0.0;
//   robot.mechanics.b3.frame_b.f[3] = 0.0;
//   robot.mechanics.b3.frame_b.t[1] = 0.0;
//   robot.mechanics.b3.frame_b.t[2] = 0.0;
//   robot.mechanics.b3.frame_b.t[3] = 0.0;
//   robot.mechanics.b5.frame_b.f[1] = 0.0;
//   robot.mechanics.b5.frame_b.f[2] = 0.0;
//   robot.mechanics.b5.frame_b.f[3] = 0.0;
//   robot.mechanics.b5.frame_b.t[1] = 0.0;
//   robot.mechanics.b5.frame_b.t[2] = 0.0;
//   robot.mechanics.b5.frame_b.t[3] = 0.0;
//   robot.mechanics.load.frame_b.f[1] = 0.0;
//   robot.mechanics.load.frame_b.f[2] = 0.0;
//   robot.mechanics.load.frame_b.f[3] = 0.0;
//   robot.mechanics.load.frame_b.t[1] = 0.0;
//   robot.mechanics.load.frame_b.t[2] = 0.0;
//   robot.mechanics.load.frame_b.t[3] = 0.0;
//   robot.mechanics.r2.bearing.tau = 0.0;
//   robot.mechanics.r1.bearing.tau = 0.0;
//   robot.mechanics.r4.bearing.tau = 0.0;
//   robot.mechanics.r3.bearing.tau = 0.0;
//   robot.mechanics.r6.bearing.tau = 0.0;
//   robot.mechanics.r5.bearing.tau = 0.0;
//   robot.axis1.r3Gear1.Jmotor.w = der(robot.axis1.r3Gear1.Jmotor.phi);
//   robot.axis1.r3Gear1.Jmotor.a = der(robot.axis1.r3Gear1.Jmotor.w);
//   robot.axis1.r3Gear1.Jmotor.J * robot.axis1.r3Gear1.Jmotor.a = robot.axis1.r3Gear1.Jmotor.flange_a.tau + robot.axis1.r3Gear1.Jmotor.flange_b.tau;
//   robot.axis1.r3Gear1.Jmotor.flange_a.phi = robot.axis1.r3Gear1.Jmotor.phi;
//   robot.axis1.r3Gear1.Jmotor.flange_b.phi = robot.axis1.r3Gear1.Jmotor.phi;
//   robot.axis1.r3Gear1.gear.phi_a = robot.axis1.r3Gear1.gear.ratio * robot.axis1.r3Gear1.gear.phi_b;
//   0.0 = robot.axis1.r3Gear1.gear.ratio * robot.axis1.r3Gear1.gear.flange_a.tau + robot.axis1.r3Gear1.gear.flange_b.tau;
//   robot.axis1.r3Gear1.gear.bearing.phi = 0.0;
//   0.0 = robot.axis1.r3Gear1.gear.flange_a.tau + (robot.axis1.r3Gear1.gear.flange_b.tau + robot.axis1.r3Gear1.gear.tau_support);
//   robot.axis1.r3Gear1.gear.phi_a = robot.axis1.r3Gear1.gear.flange_a.phi - robot.axis1.r3Gear1.gear.bearing.phi;
//   robot.axis1.r3Gear1.gear.phi_b = robot.axis1.r3Gear1.gear.flange_b.phi - robot.axis1.r3Gear1.gear.bearing.phi;
//   robot.axis1.r3Gear1.spring.w_rel = der(robot.axis1.r3Gear1.spring.phi_rel);
//   robot.axis1.r3Gear1.spring.tau = robot.axis1.r3Gear1.spring.c * (robot.axis1.r3Gear1.spring.phi_rel - robot.axis1.r3Gear1.spring.phi_rel0) + robot.axis1.r3Gear1.spring.d * robot.axis1.r3Gear1.spring.w_rel;
//   robot.axis1.r3Gear1.spring.phi_rel = robot.axis1.r3Gear1.spring.flange_b.phi - robot.axis1.r3Gear1.spring.flange_a.phi;
//   robot.axis1.r3Gear1.spring.flange_b.tau = robot.axis1.r3Gear1.spring.tau;
//   robot.axis1.r3Gear1.spring.flange_a.tau = -robot.axis1.r3Gear1.spring.tau;
//   robot.axis1.r3Gear1.relativeStates.phi_rel = robot.axis1.r3Gear1.relativeStates.flange_b.phi - robot.axis1.r3Gear1.relativeStates.flange_a.phi;
//   robot.axis1.r3Gear1.relativeStates.w_rel = der(robot.axis1.r3Gear1.relativeStates.phi_rel);
//   robot.axis1.r3Gear1.relativeStates.a_rel = der(robot.axis1.r3Gear1.relativeStates.w_rel);
//   robot.axis1.r3Gear1.relativeStates.flange_a.tau = 0.0;
//   robot.axis1.r3Gear1.relativeStates.flange_b.tau = 0.0;
//   robot.axis1.r3Gear1.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis1.r3Gear1.bearingFriction.tau0_max = robot.axis1.r3Gear1.bearingFriction.peak * robot.axis1.r3Gear1.bearingFriction.tau0;
//   robot.axis1.r3Gear1.bearingFriction.free = false;
//   robot.axis1.r3Gear1.bearingFriction.phi = robot.axis1.r3Gear1.bearingFriction.phi_a;
//   robot.axis1.r3Gear1.bearingFriction.phi = robot.axis1.r3Gear1.bearingFriction.phi_b;
//   robot.axis1.r3Gear1.bearingFriction.w = der(robot.axis1.r3Gear1.bearingFriction.phi);
//   robot.axis1.r3Gear1.bearingFriction.a = der(robot.axis1.r3Gear1.bearingFriction.w);
//   robot.axis1.r3Gear1.bearingFriction.w_relfric = robot.axis1.r3Gear1.bearingFriction.w;
//   robot.axis1.r3Gear1.bearingFriction.a_relfric = robot.axis1.r3Gear1.bearingFriction.a;
//   0.0 = robot.axis1.r3Gear1.bearingFriction.flange_a.tau + robot.axis1.r3Gear1.bearingFriction.flange_b.tau - robot.axis1.r3Gear1.bearingFriction.tau;
//   robot.axis1.r3Gear1.bearingFriction.tau = if robot.axis1.r3Gear1.bearingFriction.locked then robot.axis1.r3Gear1.bearingFriction.sa * robot.axis1.r3Gear1.bearingFriction.unitTorque else if robot.axis1.r3Gear1.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis1.r3Gear1.bearingFriction.w,{{robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if robot.axis1.r3Gear1.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis1.r3Gear1.bearingFriction.w,{{robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis1.r3Gear1.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis1.r3Gear1.bearingFriction.w,{{robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis1.r3Gear1.bearingFriction.w,{{robot.axis1.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis1.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis1.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis1.r3Gear1.bearingFriction.phi_b = robot.axis1.r3Gear1.bearingFriction.flange_b.phi - robot.axis1.r3Gear1.bearingFriction.bearing.phi;
//   robot.axis1.r3Gear1.bearingFriction.phi_a = robot.axis1.r3Gear1.bearingFriction.flange_a.phi - robot.axis1.r3Gear1.bearingFriction.bearing.phi;
//   0.0 = robot.axis1.r3Gear1.bearingFriction.flange_a.tau + (robot.axis1.r3Gear1.bearingFriction.flange_b.tau + robot.axis1.r3Gear1.bearingFriction.tau_support);
//   robot.axis1.r3Gear1.bearingFriction.bearing.phi = 0.0;
//   robot.axis1.r3Gear1.bearingFriction.startForward = pre(robot.axis1.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis1.r3Gear1.bearingFriction.sa > robot.axis1.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis1.r3Gear1.bearingFriction.startForward) AND robot.axis1.r3Gear1.bearingFriction.sa > robot.axis1.r3Gear1.bearingFriction.tau0) OR pre(robot.axis1.r3Gear1.bearingFriction.mode) == -1 AND robot.axis1.r3Gear1.bearingFriction.w_relfric > robot.axis1.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis1.r3Gear1.bearingFriction.w_relfric > 0.0;
//   robot.axis1.r3Gear1.bearingFriction.startBackward = pre(robot.axis1.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis1.r3Gear1.bearingFriction.sa < -robot.axis1.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis1.r3Gear1.bearingFriction.startBackward) AND robot.axis1.r3Gear1.bearingFriction.sa < -robot.axis1.r3Gear1.bearingFriction.tau0) OR pre(robot.axis1.r3Gear1.bearingFriction.mode) == 1 AND robot.axis1.r3Gear1.bearingFriction.w_relfric < -robot.axis1.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis1.r3Gear1.bearingFriction.w_relfric < 0.0;
//   robot.axis1.r3Gear1.bearingFriction.locked =  NOT robot.axis1.r3Gear1.bearingFriction.free AND  NOT (pre(robot.axis1.r3Gear1.bearingFriction.mode) == 1 OR robot.axis1.r3Gear1.bearingFriction.startForward OR pre(robot.axis1.r3Gear1.bearingFriction.mode) == -1 OR robot.axis1.r3Gear1.bearingFriction.startBackward);
//   robot.axis1.r3Gear1.bearingFriction.a_relfric = robot.axis1.r3Gear1.bearingFriction.unitAngularAcceleration * (if robot.axis1.r3Gear1.bearingFriction.locked then 0.0 else if robot.axis1.r3Gear1.bearingFriction.free then robot.axis1.r3Gear1.bearingFriction.sa else if robot.axis1.r3Gear1.bearingFriction.startForward then robot.axis1.r3Gear1.bearingFriction.sa - robot.axis1.r3Gear1.bearingFriction.tau0_max / robot.axis1.r3Gear1.bearingFriction.unitTorque else if robot.axis1.r3Gear1.bearingFriction.startBackward then robot.axis1.r3Gear1.bearingFriction.sa + robot.axis1.r3Gear1.bearingFriction.tau0_max / robot.axis1.r3Gear1.bearingFriction.unitTorque else if pre(robot.axis1.r3Gear1.bearingFriction.mode) == 1 then robot.axis1.r3Gear1.bearingFriction.sa - robot.axis1.r3Gear1.bearingFriction.tau0 / robot.axis1.r3Gear1.bearingFriction.unitTorque else robot.axis1.r3Gear1.bearingFriction.sa + robot.axis1.r3Gear1.bearingFriction.tau0 / robot.axis1.r3Gear1.bearingFriction.unitTorque);
//   robot.axis1.r3Gear1.bearingFriction.mode = if robot.axis1.r3Gear1.bearingFriction.free then 2 else if (pre(robot.axis1.r3Gear1.bearingFriction.mode) == 1 OR pre(robot.axis1.r3Gear1.bearingFriction.mode) == 2 OR robot.axis1.r3Gear1.bearingFriction.startForward) AND robot.axis1.r3Gear1.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis1.r3Gear1.bearingFriction.mode) == -1 OR pre(robot.axis1.r3Gear1.bearingFriction.mode) == 2 OR robot.axis1.r3Gear1.bearingFriction.startBackward) AND robot.axis1.r3Gear1.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis1.r3Gear1.relativeStates.flange_b.tau + (robot.axis1.r3Gear1.spring.flange_b.tau + robot.axis1.r3Gear1.gear.flange_a.tau) = 0.0;
//   robot.axis1.r3Gear1.relativeStates.flange_b.phi = robot.axis1.r3Gear1.spring.flange_b.phi;
//   robot.axis1.r3Gear1.spring.flange_b.phi = robot.axis1.r3Gear1.gear.flange_a.phi;
//   robot.axis1.r3Gear1.relativeStates.flange_a.tau + (robot.axis1.r3Gear1.bearingFriction.flange_b.tau + robot.axis1.r3Gear1.spring.flange_a.tau) = 0.0;
//   robot.axis1.r3Gear1.relativeStates.flange_a.phi = robot.axis1.r3Gear1.bearingFriction.flange_b.phi;
//   robot.axis1.r3Gear1.bearingFriction.flange_b.phi = robot.axis1.r3Gear1.spring.flange_a.phi;
//   robot.axis1.r3Gear1.Jmotor.flange_b.tau + robot.axis1.r3Gear1.bearingFriction.flange_a.tau = 0.0;
//   robot.axis1.r3Gear1.Jmotor.flange_b.phi = robot.axis1.r3Gear1.bearingFriction.flange_a.phi;
//   robot.axis1.r3Gear1.Jmotor.flange_a.tau + (-robot.axis1.r3Gear1.flange_a.tau) = 0.0;
//   robot.axis1.r3Gear1.Jmotor.flange_a.phi = robot.axis1.r3Gear1.flange_a.phi;
//   robot.axis1.r3Gear1.gear.flange_b.tau + (-robot.axis1.r3Gear1.flange_b.tau) = 0.0;
//   robot.axis1.r3Gear1.gear.flange_b.phi = robot.axis1.r3Gear1.flange_b.phi;
//   robot.axis1.r3Gear1.bearingFriction.bearing.tau = 0.0;
//   robot.axis1.r3Gear1.gear.bearing.tau = 0.0;
//   robot.axis1.r3Motor.Vs.v = robot.axis1.r3Motor.Vs.p.v - robot.axis1.r3Motor.Vs.n.v;
//   0.0 = robot.axis1.r3Motor.Vs.p.i + robot.axis1.r3Motor.Vs.n.i;
//   robot.axis1.r3Motor.Vs.i = robot.axis1.r3Motor.Vs.p.i;
//   robot.axis1.r3Motor.diff.v1 = robot.axis1.r3Motor.diff.p1.v - robot.axis1.r3Motor.diff.n1.v;
//   robot.axis1.r3Motor.diff.v2 = robot.axis1.r3Motor.diff.p2.v - robot.axis1.r3Motor.diff.n2.v;
//   0.0 = robot.axis1.r3Motor.diff.p1.i + robot.axis1.r3Motor.diff.n1.i;
//   0.0 = robot.axis1.r3Motor.diff.p2.i + robot.axis1.r3Motor.diff.n2.i;
//   robot.axis1.r3Motor.diff.i1 = robot.axis1.r3Motor.diff.p1.i;
//   robot.axis1.r3Motor.diff.i2 = robot.axis1.r3Motor.diff.p2.i;
//   robot.axis1.r3Motor.diff.v1 = 0.0;
//   robot.axis1.r3Motor.diff.i1 = 0.0;
//   robot.axis1.r3Motor.power.v1 = robot.axis1.r3Motor.power.p1.v - robot.axis1.r3Motor.power.n1.v;
//   robot.axis1.r3Motor.power.v2 = robot.axis1.r3Motor.power.p2.v - robot.axis1.r3Motor.power.n2.v;
//   0.0 = robot.axis1.r3Motor.power.p1.i + robot.axis1.r3Motor.power.n1.i;
//   0.0 = robot.axis1.r3Motor.power.p2.i + robot.axis1.r3Motor.power.n2.i;
//   robot.axis1.r3Motor.power.i1 = robot.axis1.r3Motor.power.p1.i;
//   robot.axis1.r3Motor.power.i2 = robot.axis1.r3Motor.power.p2.i;
//   robot.axis1.r3Motor.power.v1 = 0.0;
//   robot.axis1.r3Motor.power.i1 = 0.0;
//   robot.axis1.r3Motor.emf.v = robot.axis1.r3Motor.emf.p.v - robot.axis1.r3Motor.emf.n.v;
//   0.0 = robot.axis1.r3Motor.emf.p.i + robot.axis1.r3Motor.emf.n.i;
//   robot.axis1.r3Motor.emf.i = robot.axis1.r3Motor.emf.p.i;
//   robot.axis1.r3Motor.emf.w = der(robot.axis1.r3Motor.emf.flange_b.phi);
//   robot.axis1.r3Motor.emf.k * robot.axis1.r3Motor.emf.w = robot.axis1.r3Motor.emf.v;
//   robot.axis1.r3Motor.emf.flange_b.tau = (-robot.axis1.r3Motor.emf.k) * robot.axis1.r3Motor.emf.i;
//   robot.axis1.r3Motor.La.L * der(robot.axis1.r3Motor.La.i) = robot.axis1.r3Motor.La.v;
//   robot.axis1.r3Motor.La.v = robot.axis1.r3Motor.La.p.v - robot.axis1.r3Motor.La.n.v;
//   0.0 = robot.axis1.r3Motor.La.p.i + robot.axis1.r3Motor.La.n.i;
//   robot.axis1.r3Motor.La.i = robot.axis1.r3Motor.La.p.i;
//   robot.axis1.r3Motor.Ra.R * robot.axis1.r3Motor.Ra.i = robot.axis1.r3Motor.Ra.v;
//   robot.axis1.r3Motor.Ra.v = robot.axis1.r3Motor.Ra.p.v - robot.axis1.r3Motor.Ra.n.v;
//   0.0 = robot.axis1.r3Motor.Ra.p.i + robot.axis1.r3Motor.Ra.n.i;
//   robot.axis1.r3Motor.Ra.i = robot.axis1.r3Motor.Ra.p.i;
//   robot.axis1.r3Motor.Rd2.R * robot.axis1.r3Motor.Rd2.i = robot.axis1.r3Motor.Rd2.v;
//   robot.axis1.r3Motor.Rd2.v = robot.axis1.r3Motor.Rd2.p.v - robot.axis1.r3Motor.Rd2.n.v;
//   0.0 = robot.axis1.r3Motor.Rd2.p.i + robot.axis1.r3Motor.Rd2.n.i;
//   robot.axis1.r3Motor.Rd2.i = robot.axis1.r3Motor.Rd2.p.i;
//   robot.axis1.r3Motor.C.i = robot.axis1.r3Motor.C.C * der(robot.axis1.r3Motor.C.v);
//   robot.axis1.r3Motor.C.v = robot.axis1.r3Motor.C.p.v - robot.axis1.r3Motor.C.n.v;
//   0.0 = robot.axis1.r3Motor.C.p.i + robot.axis1.r3Motor.C.n.i;
//   robot.axis1.r3Motor.C.i = robot.axis1.r3Motor.C.p.i;
//   robot.axis1.r3Motor.OpI.v1 = robot.axis1.r3Motor.OpI.p1.v - robot.axis1.r3Motor.OpI.n1.v;
//   robot.axis1.r3Motor.OpI.v2 = robot.axis1.r3Motor.OpI.p2.v - robot.axis1.r3Motor.OpI.n2.v;
//   0.0 = robot.axis1.r3Motor.OpI.p1.i + robot.axis1.r3Motor.OpI.n1.i;
//   0.0 = robot.axis1.r3Motor.OpI.p2.i + robot.axis1.r3Motor.OpI.n2.i;
//   robot.axis1.r3Motor.OpI.i1 = robot.axis1.r3Motor.OpI.p1.i;
//   robot.axis1.r3Motor.OpI.i2 = robot.axis1.r3Motor.OpI.p2.i;
//   robot.axis1.r3Motor.OpI.v1 = 0.0;
//   robot.axis1.r3Motor.OpI.i1 = 0.0;
//   robot.axis1.r3Motor.Rd1.R * robot.axis1.r3Motor.Rd1.i = robot.axis1.r3Motor.Rd1.v;
//   robot.axis1.r3Motor.Rd1.v = robot.axis1.r3Motor.Rd1.p.v - robot.axis1.r3Motor.Rd1.n.v;
//   0.0 = robot.axis1.r3Motor.Rd1.p.i + robot.axis1.r3Motor.Rd1.n.i;
//   robot.axis1.r3Motor.Rd1.i = robot.axis1.r3Motor.Rd1.p.i;
//   robot.axis1.r3Motor.Ri.R * robot.axis1.r3Motor.Ri.i = robot.axis1.r3Motor.Ri.v;
//   robot.axis1.r3Motor.Ri.v = robot.axis1.r3Motor.Ri.p.v - robot.axis1.r3Motor.Ri.n.v;
//   0.0 = robot.axis1.r3Motor.Ri.p.i + robot.axis1.r3Motor.Ri.n.i;
//   robot.axis1.r3Motor.Ri.i = robot.axis1.r3Motor.Ri.p.i;
//   robot.axis1.r3Motor.Rp1.R * robot.axis1.r3Motor.Rp1.i = robot.axis1.r3Motor.Rp1.v;
//   robot.axis1.r3Motor.Rp1.v = robot.axis1.r3Motor.Rp1.p.v - robot.axis1.r3Motor.Rp1.n.v;
//   0.0 = robot.axis1.r3Motor.Rp1.p.i + robot.axis1.r3Motor.Rp1.n.i;
//   robot.axis1.r3Motor.Rp1.i = robot.axis1.r3Motor.Rp1.p.i;
//   robot.axis1.r3Motor.Rp2.R * robot.axis1.r3Motor.Rp2.i = robot.axis1.r3Motor.Rp2.v;
//   robot.axis1.r3Motor.Rp2.v = robot.axis1.r3Motor.Rp2.p.v - robot.axis1.r3Motor.Rp2.n.v;
//   0.0 = robot.axis1.r3Motor.Rp2.p.i + robot.axis1.r3Motor.Rp2.n.i;
//   robot.axis1.r3Motor.Rp2.i = robot.axis1.r3Motor.Rp2.p.i;
//   robot.axis1.r3Motor.Rd4.R * robot.axis1.r3Motor.Rd4.i = robot.axis1.r3Motor.Rd4.v;
//   robot.axis1.r3Motor.Rd4.v = robot.axis1.r3Motor.Rd4.p.v - robot.axis1.r3Motor.Rd4.n.v;
//   0.0 = robot.axis1.r3Motor.Rd4.p.i + robot.axis1.r3Motor.Rd4.n.i;
//   robot.axis1.r3Motor.Rd4.i = robot.axis1.r3Motor.Rd4.p.i;
//   robot.axis1.r3Motor.hall2.v = robot.axis1.r3Motor.hall2.p.v - robot.axis1.r3Motor.hall2.n.v;
//   0.0 = robot.axis1.r3Motor.hall2.p.i + robot.axis1.r3Motor.hall2.n.i;
//   robot.axis1.r3Motor.hall2.i = robot.axis1.r3Motor.hall2.p.i;
//   robot.axis1.r3Motor.Rd3.R * robot.axis1.r3Motor.Rd3.i = robot.axis1.r3Motor.Rd3.v;
//   robot.axis1.r3Motor.Rd3.v = robot.axis1.r3Motor.Rd3.p.v - robot.axis1.r3Motor.Rd3.n.v;
//   0.0 = robot.axis1.r3Motor.Rd3.p.i + robot.axis1.r3Motor.Rd3.n.i;
//   robot.axis1.r3Motor.Rd3.i = robot.axis1.r3Motor.Rd3.p.i;
//   robot.axis1.r3Motor.g1.p.v = 0.0;
//   robot.axis1.r3Motor.g2.p.v = 0.0;
//   robot.axis1.r3Motor.g3.p.v = 0.0;
//   robot.axis1.r3Motor.hall1.p.v = robot.axis1.r3Motor.hall1.n.v;
//   robot.axis1.r3Motor.hall1.p.i = robot.axis1.r3Motor.hall1.i;
//   robot.axis1.r3Motor.hall1.n.i = -robot.axis1.r3Motor.hall1.i;
//   robot.axis1.r3Motor.g4.p.v = 0.0;
//   robot.axis1.r3Motor.g5.p.v = 0.0;
//   robot.axis1.r3Motor.phi.phi = robot.axis1.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis1.r3Motor.phi.flange_a.tau;
//   robot.axis1.r3Motor.w.w = der(robot.axis1.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis1.r3Motor.w.flange_a.tau;
//   robot.axis1.r3Motor.Rd2.n.i + (robot.axis1.r3Motor.diff.n1.i + robot.axis1.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis1.r3Motor.Rd2.n.v = robot.axis1.r3Motor.diff.n1.v;
//   robot.axis1.r3Motor.diff.n1.v = robot.axis1.r3Motor.Rd1.p.v;
//   robot.axis1.r3Motor.C.n.i + (robot.axis1.r3Motor.OpI.p2.i + robot.axis1.r3Motor.power.p1.i) = 0.0;
//   robot.axis1.r3Motor.C.n.v = robot.axis1.r3Motor.OpI.p2.v;
//   robot.axis1.r3Motor.OpI.p2.v = robot.axis1.r3Motor.power.p1.v;
//   robot.axis1.r3Motor.Rd1.n.i + (robot.axis1.r3Motor.diff.p2.i + robot.axis1.r3Motor.Ri.p.i) = 0.0;
//   robot.axis1.r3Motor.Rd1.n.v = robot.axis1.r3Motor.diff.p2.v;
//   robot.axis1.r3Motor.diff.p2.v = robot.axis1.r3Motor.Ri.p.v;
//   robot.axis1.r3Motor.Ri.n.i + (robot.axis1.r3Motor.OpI.n1.i + robot.axis1.r3Motor.C.p.i) = 0.0;
//   robot.axis1.r3Motor.Ri.n.v = robot.axis1.r3Motor.OpI.n1.v;
//   robot.axis1.r3Motor.OpI.n1.v = robot.axis1.r3Motor.C.p.v;
//   robot.axis1.r3Motor.power.n1.i + (robot.axis1.r3Motor.Rp1.p.i + robot.axis1.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis1.r3Motor.power.n1.v = robot.axis1.r3Motor.Rp1.p.v;
//   robot.axis1.r3Motor.Rp1.p.v = robot.axis1.r3Motor.Rp2.p.v;
//   robot.axis1.r3Motor.power.p2.i + (robot.axis1.r3Motor.Ra.p.i + robot.axis1.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis1.r3Motor.power.p2.v = robot.axis1.r3Motor.Ra.p.v;
//   robot.axis1.r3Motor.Ra.p.v = robot.axis1.r3Motor.Rp1.n.v;
//   robot.axis1.r3Motor.Rd4.n.i + (robot.axis1.r3Motor.g3.p.i + (robot.axis1.r3Motor.OpI.p1.i + (robot.axis1.r3Motor.diff.n2.i + (robot.axis1.r3Motor.OpI.n2.i + robot.axis1.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis1.r3Motor.Rd4.n.v = robot.axis1.r3Motor.g3.p.v;
//   robot.axis1.r3Motor.g3.p.v = robot.axis1.r3Motor.OpI.p1.v;
//   robot.axis1.r3Motor.OpI.p1.v = robot.axis1.r3Motor.diff.n2.v;
//   robot.axis1.r3Motor.diff.n2.v = robot.axis1.r3Motor.OpI.n2.v;
//   robot.axis1.r3Motor.OpI.n2.v = robot.axis1.r3Motor.power.n2.v;
//   (-robot.axis1.r3Motor.flange_motor.tau) + (robot.axis1.r3Motor.emf.flange_b.tau + (robot.axis1.r3Motor.phi.flange_a.tau + robot.axis1.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis1.r3Motor.flange_motor.phi = robot.axis1.r3Motor.emf.flange_b.phi;
//   robot.axis1.r3Motor.emf.flange_b.phi = robot.axis1.r3Motor.phi.flange_a.phi;
//   robot.axis1.r3Motor.phi.flange_a.phi = robot.axis1.r3Motor.w.flange_a.phi;
//   robot.axis1.r3Motor.La.n.i + robot.axis1.r3Motor.emf.p.i = 0.0;
//   robot.axis1.r3Motor.La.n.v = robot.axis1.r3Motor.emf.p.v;
//   robot.axis1.r3Motor.Ra.n.i + robot.axis1.r3Motor.La.p.i = 0.0;
//   robot.axis1.r3Motor.Ra.n.v = robot.axis1.r3Motor.La.p.v;
//   robot.axis1.r3Motor.Vs.n.i + robot.axis1.r3Motor.g1.p.i = 0.0;
//   robot.axis1.r3Motor.Vs.n.v = robot.axis1.r3Motor.g1.p.v;
//   robot.axis1.r3Motor.Vs.p.i + robot.axis1.r3Motor.Rd2.p.i = 0.0;
//   robot.axis1.r3Motor.Vs.p.v = robot.axis1.r3Motor.Rd2.p.v;
//   robot.axis1.r3Motor.g2.p.i + robot.axis1.r3Motor.hall2.n.i = 0.0;
//   robot.axis1.r3Motor.g2.p.v = robot.axis1.r3Motor.hall2.n.v;
//   robot.axis1.r3Motor.hall1.n.i + robot.axis1.r3Motor.g4.p.i = 0.0;
//   robot.axis1.r3Motor.hall1.n.v = robot.axis1.r3Motor.g4.p.v;
//   robot.axis1.r3Motor.emf.n.i + robot.axis1.r3Motor.hall1.p.i = 0.0;
//   robot.axis1.r3Motor.emf.n.v = robot.axis1.r3Motor.hall1.p.v;
//   robot.axis1.r3Motor.hall1.i = robot.axis1.r3Motor.hall2.v;
//   robot.axis1.r3Motor.Rd3.n.i + (robot.axis1.r3Motor.diff.p1.i + robot.axis1.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis1.r3Motor.Rd3.n.v = robot.axis1.r3Motor.diff.p1.v;
//   robot.axis1.r3Motor.diff.p1.v = robot.axis1.r3Motor.Rd4.p.v;
//   robot.axis1.r3Motor.Rd3.p.i + robot.axis1.r3Motor.hall2.p.i = 0.0;
//   robot.axis1.r3Motor.Rd3.p.v = robot.axis1.r3Motor.hall2.p.v;
//   robot.axis1.r3Motor.Vs.v = robot.axis1.r3Motor.i_ref;
//   robot.axis1.r3Motor.g5.p.i + robot.axis1.r3Motor.Rp2.n.i = 0.0;
//   robot.axis1.r3Motor.g5.p.v = robot.axis1.r3Motor.Rp2.n.v;
//   robot.axis1.r3Motor.phi.phi = robot.axis1.r3Motor.outPort_phi;
//   robot.axis1.r3Motor.w.w = robot.axis1.r3Motor.outPort_w;
//   der(robot.axis1.r3Control.rate2.x[1]) = robot.axis1.r3Control.rate2.x1dot;
//   robot.axis1.r3Control.rate2.xn = robot.axis1.r3Control.rate2.x[1];
//   robot.axis1.r3Control.rate2.u = robot.axis1.r3Control.rate2.a[1] * robot.axis1.r3Control.rate2.x1dot + robot.axis1.r3Control.rate2.a[2] * robot.axis1.r3Control.rate2.x[1];
//   robot.axis1.r3Control.rate2.y = robot.axis1.r3Control.rate2.b[1] * robot.axis1.r3Control.rate2.x1dot + robot.axis1.r3Control.rate2.b[2] * robot.axis1.r3Control.rate2.x[1];
//   der(robot.axis1.r3Control.rate3.y) = robot.axis1.r3Control.rate3.k * robot.axis1.r3Control.rate3.u;
//   der(robot.axis1.r3Control.rate1.x[1]) = robot.axis1.r3Control.rate1.x1dot;
//   robot.axis1.r3Control.rate1.xn = robot.axis1.r3Control.rate1.x[1];
//   robot.axis1.r3Control.rate1.u = robot.axis1.r3Control.rate1.a[1] * robot.axis1.r3Control.rate1.x1dot + robot.axis1.r3Control.rate1.a[2] * robot.axis1.r3Control.rate1.x[1];
//   robot.axis1.r3Control.rate1.y = robot.axis1.r3Control.rate1.b[1] * robot.axis1.r3Control.rate1.x1dot + robot.axis1.r3Control.rate1.b[2] * robot.axis1.r3Control.rate1.x[1];
//   der(robot.axis1.r3Control.tacho1.y) = (robot.axis1.r3Control.tacho1.k * robot.axis1.r3Control.tacho1.u - robot.axis1.r3Control.tacho1.y) / robot.axis1.r3Control.tacho1.T;
//   robot.axis1.r3Control.Kd.y = robot.axis1.r3Control.Kd.k * robot.axis1.r3Control.Kd.u;
//   robot.axis1.r3Control.wSum.y = robot.axis1.r3Control.wSum.u1 - robot.axis1.r3Control.wSum.u2;
//   robot.axis1.r3Control.sum.y = robot.axis1.r3Control.sum.k1 * robot.axis1.r3Control.sum.u1 + robot.axis1.r3Control.sum.k2 * robot.axis1.r3Control.sum.u2;
//   robot.axis1.r3Control.pSum.y = robot.axis1.r3Control.pSum.u1 - robot.axis1.r3Control.pSum.u2;
//   robot.axis1.r3Control.Kv.y = robot.axis1.r3Control.Kv.k * robot.axis1.r3Control.Kv.u;
//   der(robot.axis1.r3Control.tacho2.x[1]) = robot.axis1.r3Control.tacho2.x1dot;
//   der(robot.axis1.r3Control.tacho2.x[2]) = robot.axis1.r3Control.tacho2.x[1];
//   robot.axis1.r3Control.tacho2.xn = robot.axis1.r3Control.tacho2.x[2];
//   robot.axis1.r3Control.tacho2.u = robot.axis1.r3Control.tacho2.a[1] * robot.axis1.r3Control.tacho2.x1dot + (robot.axis1.r3Control.tacho2.a[2] * robot.axis1.r3Control.tacho2.x[1] + robot.axis1.r3Control.tacho2.a[3] * robot.axis1.r3Control.tacho2.x[2]);
//   robot.axis1.r3Control.tacho2.y = robot.axis1.r3Control.tacho2.b[1] * robot.axis1.r3Control.tacho2.x[2];
//   robot.axis1.r3Control.rate2.y = robot.axis1.r3Control.rate3.u;
//   robot.axis1.r3Control.wSum.y = robot.axis1.r3Control.rate2.u;
//   robot.axis1.r3Control.sum.y = robot.axis1.r3Control.wSum.u1;
//   robot.axis1.r3Control.Kd.y = robot.axis1.r3Control.sum.u1;
//   robot.axis1.r3Control.rate3.y = robot.axis1.r3Control.i_ref;
//   robot.axis1.r3Control.rate1.y = robot.axis1.r3Control.wSum.u2;
//   robot.axis1.r3Control.Kv.u = robot.axis1.r3Control.pSum.y;
//   robot.axis1.r3Control.tacho1.y = robot.axis1.r3Control.tacho2.u;
//   robot.axis1.r3Control.tacho2.y = robot.axis1.r3Control.rate1.u;
//   robot.axis1.r3Control.Kv.y = robot.axis1.r3Control.sum.u2;
//   robot.axis1.r3Control.Kd.u = robot.axis1.r3Control.w_ref;
//   robot.axis1.r3Control.pSum.u1 = robot.axis1.r3Control.phi_ref;
//   robot.axis1.r3Control.pSum.u2 = robot.axis1.r3Control.phi;
//   robot.axis1.r3Control.tacho1.u = robot.axis1.r3Control.w;
//   der(robot.axis1.integrator1.y) = robot.axis1.integrator1.k * robot.axis1.integrator1.u;
//   der(robot.axis1.integrator2.y) = robot.axis1.integrator2.k * robot.axis1.integrator2.u;
//   robot.axis1.k2.y = robot.axis1.k2.k * robot.axis1.k2.u;
//   robot.axis1.k1.y = robot.axis1.k1.k * robot.axis1.k1.u;
//   robot.axis1.states.w = der(robot.axis1.states.phi);
//   robot.axis1.states.a = der(robot.axis1.states.w);
//   robot.axis1.states.J * robot.axis1.states.a = robot.axis1.states.flange_a.tau + robot.axis1.states.flange_b.tau;
//   robot.axis1.states.flange_a.phi = robot.axis1.states.phi;
//   robot.axis1.states.flange_b.phi = robot.axis1.states.phi;
//   robot.axis1.a_ref = robot.axis1.inPort_a_ref;
//   robot.axis1.w_ref = robot.axis1.integrator1.y;
//   robot.axis1.phi_ref = robot.axis1.integrator2.y;
//   robot.axis1.k1.y = robot.axis1.r3Control.phi_ref;
//   robot.axis1.r3Motor.outPort_w = robot.axis1.r3Control.w;
//   robot.axis1.r3Motor.outPort_phi = robot.axis1.r3Control.phi;
//   robot.axis1.integrator1.y = robot.axis1.k2.u;
//   robot.axis1.k2.u = robot.axis1.integrator2.u;
//   robot.axis1.r3Control.i_ref = robot.axis1.r3Motor.i_ref;
//   robot.axis1.integrator2.y = robot.axis1.k1.u;
//   robot.axis1.r3Motor.flange_motor.tau + robot.axis1.r3Gear1.flange_a.tau = 0.0;
//   robot.axis1.r3Motor.flange_motor.phi = robot.axis1.r3Gear1.flange_a.phi;
//   robot.axis1.integrator1.u = robot.axis1.inPort_a_ref;
//   robot.axis1.k2.y = robot.axis1.r3Control.w_ref;
//   robot.axis1.r3Gear1.flange_b.tau + robot.axis1.states.flange_a.tau = 0.0;
//   robot.axis1.r3Gear1.flange_b.phi = robot.axis1.states.flange_a.phi;
//   robot.axis1.states.flange_b.tau + (-robot.axis1.flange.tau) = 0.0;
//   robot.axis1.states.flange_b.phi = robot.axis1.flange.phi;
//   robot.axis2.r3Gear1.Jmotor.w = der(robot.axis2.r3Gear1.Jmotor.phi);
//   robot.axis2.r3Gear1.Jmotor.a = der(robot.axis2.r3Gear1.Jmotor.w);
//   robot.axis2.r3Gear1.Jmotor.J * robot.axis2.r3Gear1.Jmotor.a = robot.axis2.r3Gear1.Jmotor.flange_a.tau + robot.axis2.r3Gear1.Jmotor.flange_b.tau;
//   robot.axis2.r3Gear1.Jmotor.flange_a.phi = robot.axis2.r3Gear1.Jmotor.phi;
//   robot.axis2.r3Gear1.Jmotor.flange_b.phi = robot.axis2.r3Gear1.Jmotor.phi;
//   robot.axis2.r3Gear1.gear.phi_a = robot.axis2.r3Gear1.gear.ratio * robot.axis2.r3Gear1.gear.phi_b;
//   0.0 = robot.axis2.r3Gear1.gear.ratio * robot.axis2.r3Gear1.gear.flange_a.tau + robot.axis2.r3Gear1.gear.flange_b.tau;
//   robot.axis2.r3Gear1.gear.bearing.phi = 0.0;
//   0.0 = robot.axis2.r3Gear1.gear.flange_a.tau + (robot.axis2.r3Gear1.gear.flange_b.tau + robot.axis2.r3Gear1.gear.tau_support);
//   robot.axis2.r3Gear1.gear.phi_a = robot.axis2.r3Gear1.gear.flange_a.phi - robot.axis2.r3Gear1.gear.bearing.phi;
//   robot.axis2.r3Gear1.gear.phi_b = robot.axis2.r3Gear1.gear.flange_b.phi - robot.axis2.r3Gear1.gear.bearing.phi;
//   robot.axis2.r3Gear1.spring.w_rel = der(robot.axis2.r3Gear1.spring.phi_rel);
//   robot.axis2.r3Gear1.spring.tau = robot.axis2.r3Gear1.spring.c * (robot.axis2.r3Gear1.spring.phi_rel - robot.axis2.r3Gear1.spring.phi_rel0) + robot.axis2.r3Gear1.spring.d * robot.axis2.r3Gear1.spring.w_rel;
//   robot.axis2.r3Gear1.spring.phi_rel = robot.axis2.r3Gear1.spring.flange_b.phi - robot.axis2.r3Gear1.spring.flange_a.phi;
//   robot.axis2.r3Gear1.spring.flange_b.tau = robot.axis2.r3Gear1.spring.tau;
//   robot.axis2.r3Gear1.spring.flange_a.tau = -robot.axis2.r3Gear1.spring.tau;
//   robot.axis2.r3Gear1.relativeStates.phi_rel = robot.axis2.r3Gear1.relativeStates.flange_b.phi - robot.axis2.r3Gear1.relativeStates.flange_a.phi;
//   robot.axis2.r3Gear1.relativeStates.w_rel = der(robot.axis2.r3Gear1.relativeStates.phi_rel);
//   robot.axis2.r3Gear1.relativeStates.a_rel = der(robot.axis2.r3Gear1.relativeStates.w_rel);
//   robot.axis2.r3Gear1.relativeStates.flange_a.tau = 0.0;
//   robot.axis2.r3Gear1.relativeStates.flange_b.tau = 0.0;
//   robot.axis2.r3Gear1.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis2.r3Gear1.bearingFriction.tau0_max = robot.axis2.r3Gear1.bearingFriction.peak * robot.axis2.r3Gear1.bearingFriction.tau0;
//   robot.axis2.r3Gear1.bearingFriction.free = false;
//   robot.axis2.r3Gear1.bearingFriction.phi = robot.axis2.r3Gear1.bearingFriction.phi_a;
//   robot.axis2.r3Gear1.bearingFriction.phi = robot.axis2.r3Gear1.bearingFriction.phi_b;
//   robot.axis2.r3Gear1.bearingFriction.w = der(robot.axis2.r3Gear1.bearingFriction.phi);
//   robot.axis2.r3Gear1.bearingFriction.a = der(robot.axis2.r3Gear1.bearingFriction.w);
//   robot.axis2.r3Gear1.bearingFriction.w_relfric = robot.axis2.r3Gear1.bearingFriction.w;
//   robot.axis2.r3Gear1.bearingFriction.a_relfric = robot.axis2.r3Gear1.bearingFriction.a;
//   0.0 = robot.axis2.r3Gear1.bearingFriction.flange_a.tau + robot.axis2.r3Gear1.bearingFriction.flange_b.tau - robot.axis2.r3Gear1.bearingFriction.tau;
//   robot.axis2.r3Gear1.bearingFriction.tau = if robot.axis2.r3Gear1.bearingFriction.locked then robot.axis2.r3Gear1.bearingFriction.sa * robot.axis2.r3Gear1.bearingFriction.unitTorque else if robot.axis2.r3Gear1.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis2.r3Gear1.bearingFriction.w,{{robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if robot.axis2.r3Gear1.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis2.r3Gear1.bearingFriction.w,{{robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis2.r3Gear1.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis2.r3Gear1.bearingFriction.w,{{robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis2.r3Gear1.bearingFriction.w,{{robot.axis2.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis2.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis2.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis2.r3Gear1.bearingFriction.phi_b = robot.axis2.r3Gear1.bearingFriction.flange_b.phi - robot.axis2.r3Gear1.bearingFriction.bearing.phi;
//   robot.axis2.r3Gear1.bearingFriction.phi_a = robot.axis2.r3Gear1.bearingFriction.flange_a.phi - robot.axis2.r3Gear1.bearingFriction.bearing.phi;
//   0.0 = robot.axis2.r3Gear1.bearingFriction.flange_a.tau + (robot.axis2.r3Gear1.bearingFriction.flange_b.tau + robot.axis2.r3Gear1.bearingFriction.tau_support);
//   robot.axis2.r3Gear1.bearingFriction.bearing.phi = 0.0;
//   robot.axis2.r3Gear1.bearingFriction.startForward = pre(robot.axis2.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis2.r3Gear1.bearingFriction.sa > robot.axis2.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis2.r3Gear1.bearingFriction.startForward) AND robot.axis2.r3Gear1.bearingFriction.sa > robot.axis2.r3Gear1.bearingFriction.tau0) OR pre(robot.axis2.r3Gear1.bearingFriction.mode) == -1 AND robot.axis2.r3Gear1.bearingFriction.w_relfric > robot.axis2.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis2.r3Gear1.bearingFriction.w_relfric > 0.0;
//   robot.axis2.r3Gear1.bearingFriction.startBackward = pre(robot.axis2.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis2.r3Gear1.bearingFriction.sa < -robot.axis2.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis2.r3Gear1.bearingFriction.startBackward) AND robot.axis2.r3Gear1.bearingFriction.sa < -robot.axis2.r3Gear1.bearingFriction.tau0) OR pre(robot.axis2.r3Gear1.bearingFriction.mode) == 1 AND robot.axis2.r3Gear1.bearingFriction.w_relfric < -robot.axis2.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis2.r3Gear1.bearingFriction.w_relfric < 0.0;
//   robot.axis2.r3Gear1.bearingFriction.locked =  NOT robot.axis2.r3Gear1.bearingFriction.free AND  NOT (pre(robot.axis2.r3Gear1.bearingFriction.mode) == 1 OR robot.axis2.r3Gear1.bearingFriction.startForward OR pre(robot.axis2.r3Gear1.bearingFriction.mode) == -1 OR robot.axis2.r3Gear1.bearingFriction.startBackward);
//   robot.axis2.r3Gear1.bearingFriction.a_relfric = robot.axis2.r3Gear1.bearingFriction.unitAngularAcceleration * (if robot.axis2.r3Gear1.bearingFriction.locked then 0.0 else if robot.axis2.r3Gear1.bearingFriction.free then robot.axis2.r3Gear1.bearingFriction.sa else if robot.axis2.r3Gear1.bearingFriction.startForward then robot.axis2.r3Gear1.bearingFriction.sa - robot.axis2.r3Gear1.bearingFriction.tau0_max / robot.axis2.r3Gear1.bearingFriction.unitTorque else if robot.axis2.r3Gear1.bearingFriction.startBackward then robot.axis2.r3Gear1.bearingFriction.sa + robot.axis2.r3Gear1.bearingFriction.tau0_max / robot.axis2.r3Gear1.bearingFriction.unitTorque else if pre(robot.axis2.r3Gear1.bearingFriction.mode) == 1 then robot.axis2.r3Gear1.bearingFriction.sa - robot.axis2.r3Gear1.bearingFriction.tau0 / robot.axis2.r3Gear1.bearingFriction.unitTorque else robot.axis2.r3Gear1.bearingFriction.sa + robot.axis2.r3Gear1.bearingFriction.tau0 / robot.axis2.r3Gear1.bearingFriction.unitTorque);
//   robot.axis2.r3Gear1.bearingFriction.mode = if robot.axis2.r3Gear1.bearingFriction.free then 2 else if (pre(robot.axis2.r3Gear1.bearingFriction.mode) == 1 OR pre(robot.axis2.r3Gear1.bearingFriction.mode) == 2 OR robot.axis2.r3Gear1.bearingFriction.startForward) AND robot.axis2.r3Gear1.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis2.r3Gear1.bearingFriction.mode) == -1 OR pre(robot.axis2.r3Gear1.bearingFriction.mode) == 2 OR robot.axis2.r3Gear1.bearingFriction.startBackward) AND robot.axis2.r3Gear1.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis2.r3Gear1.relativeStates.flange_b.tau + (robot.axis2.r3Gear1.spring.flange_b.tau + robot.axis2.r3Gear1.gear.flange_a.tau) = 0.0;
//   robot.axis2.r3Gear1.relativeStates.flange_b.phi = robot.axis2.r3Gear1.spring.flange_b.phi;
//   robot.axis2.r3Gear1.spring.flange_b.phi = robot.axis2.r3Gear1.gear.flange_a.phi;
//   robot.axis2.r3Gear1.relativeStates.flange_a.tau + (robot.axis2.r3Gear1.bearingFriction.flange_b.tau + robot.axis2.r3Gear1.spring.flange_a.tau) = 0.0;
//   robot.axis2.r3Gear1.relativeStates.flange_a.phi = robot.axis2.r3Gear1.bearingFriction.flange_b.phi;
//   robot.axis2.r3Gear1.bearingFriction.flange_b.phi = robot.axis2.r3Gear1.spring.flange_a.phi;
//   robot.axis2.r3Gear1.Jmotor.flange_b.tau + robot.axis2.r3Gear1.bearingFriction.flange_a.tau = 0.0;
//   robot.axis2.r3Gear1.Jmotor.flange_b.phi = robot.axis2.r3Gear1.bearingFriction.flange_a.phi;
//   robot.axis2.r3Gear1.Jmotor.flange_a.tau + (-robot.axis2.r3Gear1.flange_a.tau) = 0.0;
//   robot.axis2.r3Gear1.Jmotor.flange_a.phi = robot.axis2.r3Gear1.flange_a.phi;
//   robot.axis2.r3Gear1.gear.flange_b.tau + (-robot.axis2.r3Gear1.flange_b.tau) = 0.0;
//   robot.axis2.r3Gear1.gear.flange_b.phi = robot.axis2.r3Gear1.flange_b.phi;
//   robot.axis2.r3Gear1.bearingFriction.bearing.tau = 0.0;
//   robot.axis2.r3Gear1.gear.bearing.tau = 0.0;
//   robot.axis2.r3Motor.Vs.v = robot.axis2.r3Motor.Vs.p.v - robot.axis2.r3Motor.Vs.n.v;
//   0.0 = robot.axis2.r3Motor.Vs.p.i + robot.axis2.r3Motor.Vs.n.i;
//   robot.axis2.r3Motor.Vs.i = robot.axis2.r3Motor.Vs.p.i;
//   robot.axis2.r3Motor.diff.v1 = robot.axis2.r3Motor.diff.p1.v - robot.axis2.r3Motor.diff.n1.v;
//   robot.axis2.r3Motor.diff.v2 = robot.axis2.r3Motor.diff.p2.v - robot.axis2.r3Motor.diff.n2.v;
//   0.0 = robot.axis2.r3Motor.diff.p1.i + robot.axis2.r3Motor.diff.n1.i;
//   0.0 = robot.axis2.r3Motor.diff.p2.i + robot.axis2.r3Motor.diff.n2.i;
//   robot.axis2.r3Motor.diff.i1 = robot.axis2.r3Motor.diff.p1.i;
//   robot.axis2.r3Motor.diff.i2 = robot.axis2.r3Motor.diff.p2.i;
//   robot.axis2.r3Motor.diff.v1 = 0.0;
//   robot.axis2.r3Motor.diff.i1 = 0.0;
//   robot.axis2.r3Motor.power.v1 = robot.axis2.r3Motor.power.p1.v - robot.axis2.r3Motor.power.n1.v;
//   robot.axis2.r3Motor.power.v2 = robot.axis2.r3Motor.power.p2.v - robot.axis2.r3Motor.power.n2.v;
//   0.0 = robot.axis2.r3Motor.power.p1.i + robot.axis2.r3Motor.power.n1.i;
//   0.0 = robot.axis2.r3Motor.power.p2.i + robot.axis2.r3Motor.power.n2.i;
//   robot.axis2.r3Motor.power.i1 = robot.axis2.r3Motor.power.p1.i;
//   robot.axis2.r3Motor.power.i2 = robot.axis2.r3Motor.power.p2.i;
//   robot.axis2.r3Motor.power.v1 = 0.0;
//   robot.axis2.r3Motor.power.i1 = 0.0;
//   robot.axis2.r3Motor.emf.v = robot.axis2.r3Motor.emf.p.v - robot.axis2.r3Motor.emf.n.v;
//   0.0 = robot.axis2.r3Motor.emf.p.i + robot.axis2.r3Motor.emf.n.i;
//   robot.axis2.r3Motor.emf.i = robot.axis2.r3Motor.emf.p.i;
//   robot.axis2.r3Motor.emf.w = der(robot.axis2.r3Motor.emf.flange_b.phi);
//   robot.axis2.r3Motor.emf.k * robot.axis2.r3Motor.emf.w = robot.axis2.r3Motor.emf.v;
//   robot.axis2.r3Motor.emf.flange_b.tau = (-robot.axis2.r3Motor.emf.k) * robot.axis2.r3Motor.emf.i;
//   robot.axis2.r3Motor.La.L * der(robot.axis2.r3Motor.La.i) = robot.axis2.r3Motor.La.v;
//   robot.axis2.r3Motor.La.v = robot.axis2.r3Motor.La.p.v - robot.axis2.r3Motor.La.n.v;
//   0.0 = robot.axis2.r3Motor.La.p.i + robot.axis2.r3Motor.La.n.i;
//   robot.axis2.r3Motor.La.i = robot.axis2.r3Motor.La.p.i;
//   robot.axis2.r3Motor.Ra.R * robot.axis2.r3Motor.Ra.i = robot.axis2.r3Motor.Ra.v;
//   robot.axis2.r3Motor.Ra.v = robot.axis2.r3Motor.Ra.p.v - robot.axis2.r3Motor.Ra.n.v;
//   0.0 = robot.axis2.r3Motor.Ra.p.i + robot.axis2.r3Motor.Ra.n.i;
//   robot.axis2.r3Motor.Ra.i = robot.axis2.r3Motor.Ra.p.i;
//   robot.axis2.r3Motor.Rd2.R * robot.axis2.r3Motor.Rd2.i = robot.axis2.r3Motor.Rd2.v;
//   robot.axis2.r3Motor.Rd2.v = robot.axis2.r3Motor.Rd2.p.v - robot.axis2.r3Motor.Rd2.n.v;
//   0.0 = robot.axis2.r3Motor.Rd2.p.i + robot.axis2.r3Motor.Rd2.n.i;
//   robot.axis2.r3Motor.Rd2.i = robot.axis2.r3Motor.Rd2.p.i;
//   robot.axis2.r3Motor.C.i = robot.axis2.r3Motor.C.C * der(robot.axis2.r3Motor.C.v);
//   robot.axis2.r3Motor.C.v = robot.axis2.r3Motor.C.p.v - robot.axis2.r3Motor.C.n.v;
//   0.0 = robot.axis2.r3Motor.C.p.i + robot.axis2.r3Motor.C.n.i;
//   robot.axis2.r3Motor.C.i = robot.axis2.r3Motor.C.p.i;
//   robot.axis2.r3Motor.OpI.v1 = robot.axis2.r3Motor.OpI.p1.v - robot.axis2.r3Motor.OpI.n1.v;
//   robot.axis2.r3Motor.OpI.v2 = robot.axis2.r3Motor.OpI.p2.v - robot.axis2.r3Motor.OpI.n2.v;
//   0.0 = robot.axis2.r3Motor.OpI.p1.i + robot.axis2.r3Motor.OpI.n1.i;
//   0.0 = robot.axis2.r3Motor.OpI.p2.i + robot.axis2.r3Motor.OpI.n2.i;
//   robot.axis2.r3Motor.OpI.i1 = robot.axis2.r3Motor.OpI.p1.i;
//   robot.axis2.r3Motor.OpI.i2 = robot.axis2.r3Motor.OpI.p2.i;
//   robot.axis2.r3Motor.OpI.v1 = 0.0;
//   robot.axis2.r3Motor.OpI.i1 = 0.0;
//   robot.axis2.r3Motor.Rd1.R * robot.axis2.r3Motor.Rd1.i = robot.axis2.r3Motor.Rd1.v;
//   robot.axis2.r3Motor.Rd1.v = robot.axis2.r3Motor.Rd1.p.v - robot.axis2.r3Motor.Rd1.n.v;
//   0.0 = robot.axis2.r3Motor.Rd1.p.i + robot.axis2.r3Motor.Rd1.n.i;
//   robot.axis2.r3Motor.Rd1.i = robot.axis2.r3Motor.Rd1.p.i;
//   robot.axis2.r3Motor.Ri.R * robot.axis2.r3Motor.Ri.i = robot.axis2.r3Motor.Ri.v;
//   robot.axis2.r3Motor.Ri.v = robot.axis2.r3Motor.Ri.p.v - robot.axis2.r3Motor.Ri.n.v;
//   0.0 = robot.axis2.r3Motor.Ri.p.i + robot.axis2.r3Motor.Ri.n.i;
//   robot.axis2.r3Motor.Ri.i = robot.axis2.r3Motor.Ri.p.i;
//   robot.axis2.r3Motor.Rp1.R * robot.axis2.r3Motor.Rp1.i = robot.axis2.r3Motor.Rp1.v;
//   robot.axis2.r3Motor.Rp1.v = robot.axis2.r3Motor.Rp1.p.v - robot.axis2.r3Motor.Rp1.n.v;
//   0.0 = robot.axis2.r3Motor.Rp1.p.i + robot.axis2.r3Motor.Rp1.n.i;
//   robot.axis2.r3Motor.Rp1.i = robot.axis2.r3Motor.Rp1.p.i;
//   robot.axis2.r3Motor.Rp2.R * robot.axis2.r3Motor.Rp2.i = robot.axis2.r3Motor.Rp2.v;
//   robot.axis2.r3Motor.Rp2.v = robot.axis2.r3Motor.Rp2.p.v - robot.axis2.r3Motor.Rp2.n.v;
//   0.0 = robot.axis2.r3Motor.Rp2.p.i + robot.axis2.r3Motor.Rp2.n.i;
//   robot.axis2.r3Motor.Rp2.i = robot.axis2.r3Motor.Rp2.p.i;
//   robot.axis2.r3Motor.Rd4.R * robot.axis2.r3Motor.Rd4.i = robot.axis2.r3Motor.Rd4.v;
//   robot.axis2.r3Motor.Rd4.v = robot.axis2.r3Motor.Rd4.p.v - robot.axis2.r3Motor.Rd4.n.v;
//   0.0 = robot.axis2.r3Motor.Rd4.p.i + robot.axis2.r3Motor.Rd4.n.i;
//   robot.axis2.r3Motor.Rd4.i = robot.axis2.r3Motor.Rd4.p.i;
//   robot.axis2.r3Motor.hall2.v = robot.axis2.r3Motor.hall2.p.v - robot.axis2.r3Motor.hall2.n.v;
//   0.0 = robot.axis2.r3Motor.hall2.p.i + robot.axis2.r3Motor.hall2.n.i;
//   robot.axis2.r3Motor.hall2.i = robot.axis2.r3Motor.hall2.p.i;
//   robot.axis2.r3Motor.Rd3.R * robot.axis2.r3Motor.Rd3.i = robot.axis2.r3Motor.Rd3.v;
//   robot.axis2.r3Motor.Rd3.v = robot.axis2.r3Motor.Rd3.p.v - robot.axis2.r3Motor.Rd3.n.v;
//   0.0 = robot.axis2.r3Motor.Rd3.p.i + robot.axis2.r3Motor.Rd3.n.i;
//   robot.axis2.r3Motor.Rd3.i = robot.axis2.r3Motor.Rd3.p.i;
//   robot.axis2.r3Motor.g1.p.v = 0.0;
//   robot.axis2.r3Motor.g2.p.v = 0.0;
//   robot.axis2.r3Motor.g3.p.v = 0.0;
//   robot.axis2.r3Motor.hall1.p.v = robot.axis2.r3Motor.hall1.n.v;
//   robot.axis2.r3Motor.hall1.p.i = robot.axis2.r3Motor.hall1.i;
//   robot.axis2.r3Motor.hall1.n.i = -robot.axis2.r3Motor.hall1.i;
//   robot.axis2.r3Motor.g4.p.v = 0.0;
//   robot.axis2.r3Motor.g5.p.v = 0.0;
//   robot.axis2.r3Motor.phi.phi = robot.axis2.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis2.r3Motor.phi.flange_a.tau;
//   robot.axis2.r3Motor.w.w = der(robot.axis2.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis2.r3Motor.w.flange_a.tau;
//   robot.axis2.r3Motor.Rd2.n.i + (robot.axis2.r3Motor.diff.n1.i + robot.axis2.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis2.r3Motor.Rd2.n.v = robot.axis2.r3Motor.diff.n1.v;
//   robot.axis2.r3Motor.diff.n1.v = robot.axis2.r3Motor.Rd1.p.v;
//   robot.axis2.r3Motor.C.n.i + (robot.axis2.r3Motor.OpI.p2.i + robot.axis2.r3Motor.power.p1.i) = 0.0;
//   robot.axis2.r3Motor.C.n.v = robot.axis2.r3Motor.OpI.p2.v;
//   robot.axis2.r3Motor.OpI.p2.v = robot.axis2.r3Motor.power.p1.v;
//   robot.axis2.r3Motor.Rd1.n.i + (robot.axis2.r3Motor.diff.p2.i + robot.axis2.r3Motor.Ri.p.i) = 0.0;
//   robot.axis2.r3Motor.Rd1.n.v = robot.axis2.r3Motor.diff.p2.v;
//   robot.axis2.r3Motor.diff.p2.v = robot.axis2.r3Motor.Ri.p.v;
//   robot.axis2.r3Motor.Ri.n.i + (robot.axis2.r3Motor.OpI.n1.i + robot.axis2.r3Motor.C.p.i) = 0.0;
//   robot.axis2.r3Motor.Ri.n.v = robot.axis2.r3Motor.OpI.n1.v;
//   robot.axis2.r3Motor.OpI.n1.v = robot.axis2.r3Motor.C.p.v;
//   robot.axis2.r3Motor.power.n1.i + (robot.axis2.r3Motor.Rp1.p.i + robot.axis2.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis2.r3Motor.power.n1.v = robot.axis2.r3Motor.Rp1.p.v;
//   robot.axis2.r3Motor.Rp1.p.v = robot.axis2.r3Motor.Rp2.p.v;
//   robot.axis2.r3Motor.power.p2.i + (robot.axis2.r3Motor.Ra.p.i + robot.axis2.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis2.r3Motor.power.p2.v = robot.axis2.r3Motor.Ra.p.v;
//   robot.axis2.r3Motor.Ra.p.v = robot.axis2.r3Motor.Rp1.n.v;
//   robot.axis2.r3Motor.Rd4.n.i + (robot.axis2.r3Motor.g3.p.i + (robot.axis2.r3Motor.OpI.p1.i + (robot.axis2.r3Motor.diff.n2.i + (robot.axis2.r3Motor.OpI.n2.i + robot.axis2.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis2.r3Motor.Rd4.n.v = robot.axis2.r3Motor.g3.p.v;
//   robot.axis2.r3Motor.g3.p.v = robot.axis2.r3Motor.OpI.p1.v;
//   robot.axis2.r3Motor.OpI.p1.v = robot.axis2.r3Motor.diff.n2.v;
//   robot.axis2.r3Motor.diff.n2.v = robot.axis2.r3Motor.OpI.n2.v;
//   robot.axis2.r3Motor.OpI.n2.v = robot.axis2.r3Motor.power.n2.v;
//   (-robot.axis2.r3Motor.flange_motor.tau) + (robot.axis2.r3Motor.emf.flange_b.tau + (robot.axis2.r3Motor.phi.flange_a.tau + robot.axis2.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis2.r3Motor.flange_motor.phi = robot.axis2.r3Motor.emf.flange_b.phi;
//   robot.axis2.r3Motor.emf.flange_b.phi = robot.axis2.r3Motor.phi.flange_a.phi;
//   robot.axis2.r3Motor.phi.flange_a.phi = robot.axis2.r3Motor.w.flange_a.phi;
//   robot.axis2.r3Motor.La.n.i + robot.axis2.r3Motor.emf.p.i = 0.0;
//   robot.axis2.r3Motor.La.n.v = robot.axis2.r3Motor.emf.p.v;
//   robot.axis2.r3Motor.Ra.n.i + robot.axis2.r3Motor.La.p.i = 0.0;
//   robot.axis2.r3Motor.Ra.n.v = robot.axis2.r3Motor.La.p.v;
//   robot.axis2.r3Motor.Vs.n.i + robot.axis2.r3Motor.g1.p.i = 0.0;
//   robot.axis2.r3Motor.Vs.n.v = robot.axis2.r3Motor.g1.p.v;
//   robot.axis2.r3Motor.Vs.p.i + robot.axis2.r3Motor.Rd2.p.i = 0.0;
//   robot.axis2.r3Motor.Vs.p.v = robot.axis2.r3Motor.Rd2.p.v;
//   robot.axis2.r3Motor.g2.p.i + robot.axis2.r3Motor.hall2.n.i = 0.0;
//   robot.axis2.r3Motor.g2.p.v = robot.axis2.r3Motor.hall2.n.v;
//   robot.axis2.r3Motor.hall1.n.i + robot.axis2.r3Motor.g4.p.i = 0.0;
//   robot.axis2.r3Motor.hall1.n.v = robot.axis2.r3Motor.g4.p.v;
//   robot.axis2.r3Motor.emf.n.i + robot.axis2.r3Motor.hall1.p.i = 0.0;
//   robot.axis2.r3Motor.emf.n.v = robot.axis2.r3Motor.hall1.p.v;
//   robot.axis2.r3Motor.hall1.i = robot.axis2.r3Motor.hall2.v;
//   robot.axis2.r3Motor.Rd3.n.i + (robot.axis2.r3Motor.diff.p1.i + robot.axis2.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis2.r3Motor.Rd3.n.v = robot.axis2.r3Motor.diff.p1.v;
//   robot.axis2.r3Motor.diff.p1.v = robot.axis2.r3Motor.Rd4.p.v;
//   robot.axis2.r3Motor.Rd3.p.i + robot.axis2.r3Motor.hall2.p.i = 0.0;
//   robot.axis2.r3Motor.Rd3.p.v = robot.axis2.r3Motor.hall2.p.v;
//   robot.axis2.r3Motor.Vs.v = robot.axis2.r3Motor.i_ref;
//   robot.axis2.r3Motor.g5.p.i + robot.axis2.r3Motor.Rp2.n.i = 0.0;
//   robot.axis2.r3Motor.g5.p.v = robot.axis2.r3Motor.Rp2.n.v;
//   robot.axis2.r3Motor.phi.phi = robot.axis2.r3Motor.outPort_phi;
//   robot.axis2.r3Motor.w.w = robot.axis2.r3Motor.outPort_w;
//   der(robot.axis2.r3Control.rate2.x[1]) = robot.axis2.r3Control.rate2.x1dot;
//   robot.axis2.r3Control.rate2.xn = robot.axis2.r3Control.rate2.x[1];
//   robot.axis2.r3Control.rate2.u = robot.axis2.r3Control.rate2.a[1] * robot.axis2.r3Control.rate2.x1dot + robot.axis2.r3Control.rate2.a[2] * robot.axis2.r3Control.rate2.x[1];
//   robot.axis2.r3Control.rate2.y = robot.axis2.r3Control.rate2.b[1] * robot.axis2.r3Control.rate2.x1dot + robot.axis2.r3Control.rate2.b[2] * robot.axis2.r3Control.rate2.x[1];
//   der(robot.axis2.r3Control.rate3.y) = robot.axis2.r3Control.rate3.k * robot.axis2.r3Control.rate3.u;
//   der(robot.axis2.r3Control.rate1.x[1]) = robot.axis2.r3Control.rate1.x1dot;
//   robot.axis2.r3Control.rate1.xn = robot.axis2.r3Control.rate1.x[1];
//   robot.axis2.r3Control.rate1.u = robot.axis2.r3Control.rate1.a[1] * robot.axis2.r3Control.rate1.x1dot + robot.axis2.r3Control.rate1.a[2] * robot.axis2.r3Control.rate1.x[1];
//   robot.axis2.r3Control.rate1.y = robot.axis2.r3Control.rate1.b[1] * robot.axis2.r3Control.rate1.x1dot + robot.axis2.r3Control.rate1.b[2] * robot.axis2.r3Control.rate1.x[1];
//   der(robot.axis2.r3Control.tacho1.y) = (robot.axis2.r3Control.tacho1.k * robot.axis2.r3Control.tacho1.u - robot.axis2.r3Control.tacho1.y) / robot.axis2.r3Control.tacho1.T;
//   robot.axis2.r3Control.Kd.y = robot.axis2.r3Control.Kd.k * robot.axis2.r3Control.Kd.u;
//   robot.axis2.r3Control.wSum.y = robot.axis2.r3Control.wSum.u1 - robot.axis2.r3Control.wSum.u2;
//   robot.axis2.r3Control.sum.y = robot.axis2.r3Control.sum.k1 * robot.axis2.r3Control.sum.u1 + robot.axis2.r3Control.sum.k2 * robot.axis2.r3Control.sum.u2;
//   robot.axis2.r3Control.pSum.y = robot.axis2.r3Control.pSum.u1 - robot.axis2.r3Control.pSum.u2;
//   robot.axis2.r3Control.Kv.y = robot.axis2.r3Control.Kv.k * robot.axis2.r3Control.Kv.u;
//   der(robot.axis2.r3Control.tacho2.x[1]) = robot.axis2.r3Control.tacho2.x1dot;
//   der(robot.axis2.r3Control.tacho2.x[2]) = robot.axis2.r3Control.tacho2.x[1];
//   robot.axis2.r3Control.tacho2.xn = robot.axis2.r3Control.tacho2.x[2];
//   robot.axis2.r3Control.tacho2.u = robot.axis2.r3Control.tacho2.a[1] * robot.axis2.r3Control.tacho2.x1dot + (robot.axis2.r3Control.tacho2.a[2] * robot.axis2.r3Control.tacho2.x[1] + robot.axis2.r3Control.tacho2.a[3] * robot.axis2.r3Control.tacho2.x[2]);
//   robot.axis2.r3Control.tacho2.y = robot.axis2.r3Control.tacho2.b[1] * robot.axis2.r3Control.tacho2.x[2];
//   robot.axis2.r3Control.rate2.y = robot.axis2.r3Control.rate3.u;
//   robot.axis2.r3Control.wSum.y = robot.axis2.r3Control.rate2.u;
//   robot.axis2.r3Control.sum.y = robot.axis2.r3Control.wSum.u1;
//   robot.axis2.r3Control.Kd.y = robot.axis2.r3Control.sum.u1;
//   robot.axis2.r3Control.rate3.y = robot.axis2.r3Control.i_ref;
//   robot.axis2.r3Control.rate1.y = robot.axis2.r3Control.wSum.u2;
//   robot.axis2.r3Control.Kv.u = robot.axis2.r3Control.pSum.y;
//   robot.axis2.r3Control.tacho1.y = robot.axis2.r3Control.tacho2.u;
//   robot.axis2.r3Control.tacho2.y = robot.axis2.r3Control.rate1.u;
//   robot.axis2.r3Control.Kv.y = robot.axis2.r3Control.sum.u2;
//   robot.axis2.r3Control.Kd.u = robot.axis2.r3Control.w_ref;
//   robot.axis2.r3Control.pSum.u1 = robot.axis2.r3Control.phi_ref;
//   robot.axis2.r3Control.pSum.u2 = robot.axis2.r3Control.phi;
//   robot.axis2.r3Control.tacho1.u = robot.axis2.r3Control.w;
//   der(robot.axis2.integrator1.y) = robot.axis2.integrator1.k * robot.axis2.integrator1.u;
//   der(robot.axis2.integrator2.y) = robot.axis2.integrator2.k * robot.axis2.integrator2.u;
//   robot.axis2.k2.y = robot.axis2.k2.k * robot.axis2.k2.u;
//   robot.axis2.k1.y = robot.axis2.k1.k * robot.axis2.k1.u;
//   robot.axis2.states.w = der(robot.axis2.states.phi);
//   robot.axis2.states.a = der(robot.axis2.states.w);
//   robot.axis2.states.J * robot.axis2.states.a = robot.axis2.states.flange_a.tau + robot.axis2.states.flange_b.tau;
//   robot.axis2.states.flange_a.phi = robot.axis2.states.phi;
//   robot.axis2.states.flange_b.phi = robot.axis2.states.phi;
//   robot.axis2.a_ref = robot.axis2.inPort_a_ref;
//   robot.axis2.w_ref = robot.axis2.integrator1.y;
//   robot.axis2.phi_ref = robot.axis2.integrator2.y;
//   robot.axis2.k1.y = robot.axis2.r3Control.phi_ref;
//   robot.axis2.r3Motor.outPort_w = robot.axis2.r3Control.w;
//   robot.axis2.r3Motor.outPort_phi = robot.axis2.r3Control.phi;
//   robot.axis2.integrator1.y = robot.axis2.k2.u;
//   robot.axis2.k2.u = robot.axis2.integrator2.u;
//   robot.axis2.r3Control.i_ref = robot.axis2.r3Motor.i_ref;
//   robot.axis2.integrator2.y = robot.axis2.k1.u;
//   robot.axis2.r3Motor.flange_motor.tau + robot.axis2.r3Gear1.flange_a.tau = 0.0;
//   robot.axis2.r3Motor.flange_motor.phi = robot.axis2.r3Gear1.flange_a.phi;
//   robot.axis2.integrator1.u = robot.axis2.inPort_a_ref;
//   robot.axis2.k2.y = robot.axis2.r3Control.w_ref;
//   robot.axis2.r3Gear1.flange_b.tau + robot.axis2.states.flange_a.tau = 0.0;
//   robot.axis2.r3Gear1.flange_b.phi = robot.axis2.states.flange_a.phi;
//   robot.axis2.states.flange_b.tau + (-robot.axis2.flange.tau) = 0.0;
//   robot.axis2.states.flange_b.phi = robot.axis2.flange.phi;
//   robot.axis3.r3Gear1.Jmotor.w = der(robot.axis3.r3Gear1.Jmotor.phi);
//   robot.axis3.r3Gear1.Jmotor.a = der(robot.axis3.r3Gear1.Jmotor.w);
//   robot.axis3.r3Gear1.Jmotor.J * robot.axis3.r3Gear1.Jmotor.a = robot.axis3.r3Gear1.Jmotor.flange_a.tau + robot.axis3.r3Gear1.Jmotor.flange_b.tau;
//   robot.axis3.r3Gear1.Jmotor.flange_a.phi = robot.axis3.r3Gear1.Jmotor.phi;
//   robot.axis3.r3Gear1.Jmotor.flange_b.phi = robot.axis3.r3Gear1.Jmotor.phi;
//   robot.axis3.r3Gear1.gear.phi_a = robot.axis3.r3Gear1.gear.ratio * robot.axis3.r3Gear1.gear.phi_b;
//   0.0 = robot.axis3.r3Gear1.gear.ratio * robot.axis3.r3Gear1.gear.flange_a.tau + robot.axis3.r3Gear1.gear.flange_b.tau;
//   robot.axis3.r3Gear1.gear.bearing.phi = 0.0;
//   0.0 = robot.axis3.r3Gear1.gear.flange_a.tau + (robot.axis3.r3Gear1.gear.flange_b.tau + robot.axis3.r3Gear1.gear.tau_support);
//   robot.axis3.r3Gear1.gear.phi_a = robot.axis3.r3Gear1.gear.flange_a.phi - robot.axis3.r3Gear1.gear.bearing.phi;
//   robot.axis3.r3Gear1.gear.phi_b = robot.axis3.r3Gear1.gear.flange_b.phi - robot.axis3.r3Gear1.gear.bearing.phi;
//   robot.axis3.r3Gear1.spring.w_rel = der(robot.axis3.r3Gear1.spring.phi_rel);
//   robot.axis3.r3Gear1.spring.tau = robot.axis3.r3Gear1.spring.c * (robot.axis3.r3Gear1.spring.phi_rel - robot.axis3.r3Gear1.spring.phi_rel0) + robot.axis3.r3Gear1.spring.d * robot.axis3.r3Gear1.spring.w_rel;
//   robot.axis3.r3Gear1.spring.phi_rel = robot.axis3.r3Gear1.spring.flange_b.phi - robot.axis3.r3Gear1.spring.flange_a.phi;
//   robot.axis3.r3Gear1.spring.flange_b.tau = robot.axis3.r3Gear1.spring.tau;
//   robot.axis3.r3Gear1.spring.flange_a.tau = -robot.axis3.r3Gear1.spring.tau;
//   robot.axis3.r3Gear1.relativeStates.phi_rel = robot.axis3.r3Gear1.relativeStates.flange_b.phi - robot.axis3.r3Gear1.relativeStates.flange_a.phi;
//   robot.axis3.r3Gear1.relativeStates.w_rel = der(robot.axis3.r3Gear1.relativeStates.phi_rel);
//   robot.axis3.r3Gear1.relativeStates.a_rel = der(robot.axis3.r3Gear1.relativeStates.w_rel);
//   robot.axis3.r3Gear1.relativeStates.flange_a.tau = 0.0;
//   robot.axis3.r3Gear1.relativeStates.flange_b.tau = 0.0;
//   robot.axis3.r3Gear1.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis3.r3Gear1.bearingFriction.tau0_max = robot.axis3.r3Gear1.bearingFriction.peak * robot.axis3.r3Gear1.bearingFriction.tau0;
//   robot.axis3.r3Gear1.bearingFriction.free = false;
//   robot.axis3.r3Gear1.bearingFriction.phi = robot.axis3.r3Gear1.bearingFriction.phi_a;
//   robot.axis3.r3Gear1.bearingFriction.phi = robot.axis3.r3Gear1.bearingFriction.phi_b;
//   robot.axis3.r3Gear1.bearingFriction.w = der(robot.axis3.r3Gear1.bearingFriction.phi);
//   robot.axis3.r3Gear1.bearingFriction.a = der(robot.axis3.r3Gear1.bearingFriction.w);
//   robot.axis3.r3Gear1.bearingFriction.w_relfric = robot.axis3.r3Gear1.bearingFriction.w;
//   robot.axis3.r3Gear1.bearingFriction.a_relfric = robot.axis3.r3Gear1.bearingFriction.a;
//   0.0 = robot.axis3.r3Gear1.bearingFriction.flange_a.tau + robot.axis3.r3Gear1.bearingFriction.flange_b.tau - robot.axis3.r3Gear1.bearingFriction.tau;
//   robot.axis3.r3Gear1.bearingFriction.tau = if robot.axis3.r3Gear1.bearingFriction.locked then robot.axis3.r3Gear1.bearingFriction.sa * robot.axis3.r3Gear1.bearingFriction.unitTorque else if robot.axis3.r3Gear1.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis3.r3Gear1.bearingFriction.w,{{robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if robot.axis3.r3Gear1.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis3.r3Gear1.bearingFriction.w,{{robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis3.r3Gear1.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis3.r3Gear1.bearingFriction.w,{{robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis3.r3Gear1.bearingFriction.w,{{robot.axis3.r3Gear1.bearingFriction.tau_pos[1,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[1,2]},{robot.axis3.r3Gear1.bearingFriction.tau_pos[2,1],robot.axis3.r3Gear1.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis3.r3Gear1.bearingFriction.phi_b = robot.axis3.r3Gear1.bearingFriction.flange_b.phi - robot.axis3.r3Gear1.bearingFriction.bearing.phi;
//   robot.axis3.r3Gear1.bearingFriction.phi_a = robot.axis3.r3Gear1.bearingFriction.flange_a.phi - robot.axis3.r3Gear1.bearingFriction.bearing.phi;
//   0.0 = robot.axis3.r3Gear1.bearingFriction.flange_a.tau + (robot.axis3.r3Gear1.bearingFriction.flange_b.tau + robot.axis3.r3Gear1.bearingFriction.tau_support);
//   robot.axis3.r3Gear1.bearingFriction.bearing.phi = 0.0;
//   robot.axis3.r3Gear1.bearingFriction.startForward = pre(robot.axis3.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis3.r3Gear1.bearingFriction.sa > robot.axis3.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis3.r3Gear1.bearingFriction.startForward) AND robot.axis3.r3Gear1.bearingFriction.sa > robot.axis3.r3Gear1.bearingFriction.tau0) OR pre(robot.axis3.r3Gear1.bearingFriction.mode) == -1 AND robot.axis3.r3Gear1.bearingFriction.w_relfric > robot.axis3.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis3.r3Gear1.bearingFriction.w_relfric > 0.0;
//   robot.axis3.r3Gear1.bearingFriction.startBackward = pre(robot.axis3.r3Gear1.bearingFriction.mode) == 0 AND (robot.axis3.r3Gear1.bearingFriction.sa < -robot.axis3.r3Gear1.bearingFriction.tau0_max OR pre(robot.axis3.r3Gear1.bearingFriction.startBackward) AND robot.axis3.r3Gear1.bearingFriction.sa < -robot.axis3.r3Gear1.bearingFriction.tau0) OR pre(robot.axis3.r3Gear1.bearingFriction.mode) == 1 AND robot.axis3.r3Gear1.bearingFriction.w_relfric < -robot.axis3.r3Gear1.bearingFriction.w_small OR initial() AND robot.axis3.r3Gear1.bearingFriction.w_relfric < 0.0;
//   robot.axis3.r3Gear1.bearingFriction.locked =  NOT robot.axis3.r3Gear1.bearingFriction.free AND  NOT (pre(robot.axis3.r3Gear1.bearingFriction.mode) == 1 OR robot.axis3.r3Gear1.bearingFriction.startForward OR pre(robot.axis3.r3Gear1.bearingFriction.mode) == -1 OR robot.axis3.r3Gear1.bearingFriction.startBackward);
//   robot.axis3.r3Gear1.bearingFriction.a_relfric = robot.axis3.r3Gear1.bearingFriction.unitAngularAcceleration * (if robot.axis3.r3Gear1.bearingFriction.locked then 0.0 else if robot.axis3.r3Gear1.bearingFriction.free then robot.axis3.r3Gear1.bearingFriction.sa else if robot.axis3.r3Gear1.bearingFriction.startForward then robot.axis3.r3Gear1.bearingFriction.sa - robot.axis3.r3Gear1.bearingFriction.tau0_max / robot.axis3.r3Gear1.bearingFriction.unitTorque else if robot.axis3.r3Gear1.bearingFriction.startBackward then robot.axis3.r3Gear1.bearingFriction.sa + robot.axis3.r3Gear1.bearingFriction.tau0_max / robot.axis3.r3Gear1.bearingFriction.unitTorque else if pre(robot.axis3.r3Gear1.bearingFriction.mode) == 1 then robot.axis3.r3Gear1.bearingFriction.sa - robot.axis3.r3Gear1.bearingFriction.tau0 / robot.axis3.r3Gear1.bearingFriction.unitTorque else robot.axis3.r3Gear1.bearingFriction.sa + robot.axis3.r3Gear1.bearingFriction.tau0 / robot.axis3.r3Gear1.bearingFriction.unitTorque);
//   robot.axis3.r3Gear1.bearingFriction.mode = if robot.axis3.r3Gear1.bearingFriction.free then 2 else if (pre(robot.axis3.r3Gear1.bearingFriction.mode) == 1 OR pre(robot.axis3.r3Gear1.bearingFriction.mode) == 2 OR robot.axis3.r3Gear1.bearingFriction.startForward) AND robot.axis3.r3Gear1.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis3.r3Gear1.bearingFriction.mode) == -1 OR pre(robot.axis3.r3Gear1.bearingFriction.mode) == 2 OR robot.axis3.r3Gear1.bearingFriction.startBackward) AND robot.axis3.r3Gear1.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis3.r3Gear1.relativeStates.flange_b.tau + (robot.axis3.r3Gear1.spring.flange_b.tau + robot.axis3.r3Gear1.gear.flange_a.tau) = 0.0;
//   robot.axis3.r3Gear1.relativeStates.flange_b.phi = robot.axis3.r3Gear1.spring.flange_b.phi;
//   robot.axis3.r3Gear1.spring.flange_b.phi = robot.axis3.r3Gear1.gear.flange_a.phi;
//   robot.axis3.r3Gear1.relativeStates.flange_a.tau + (robot.axis3.r3Gear1.bearingFriction.flange_b.tau + robot.axis3.r3Gear1.spring.flange_a.tau) = 0.0;
//   robot.axis3.r3Gear1.relativeStates.flange_a.phi = robot.axis3.r3Gear1.bearingFriction.flange_b.phi;
//   robot.axis3.r3Gear1.bearingFriction.flange_b.phi = robot.axis3.r3Gear1.spring.flange_a.phi;
//   robot.axis3.r3Gear1.Jmotor.flange_b.tau + robot.axis3.r3Gear1.bearingFriction.flange_a.tau = 0.0;
//   robot.axis3.r3Gear1.Jmotor.flange_b.phi = robot.axis3.r3Gear1.bearingFriction.flange_a.phi;
//   robot.axis3.r3Gear1.Jmotor.flange_a.tau + (-robot.axis3.r3Gear1.flange_a.tau) = 0.0;
//   robot.axis3.r3Gear1.Jmotor.flange_a.phi = robot.axis3.r3Gear1.flange_a.phi;
//   robot.axis3.r3Gear1.gear.flange_b.tau + (-robot.axis3.r3Gear1.flange_b.tau) = 0.0;
//   robot.axis3.r3Gear1.gear.flange_b.phi = robot.axis3.r3Gear1.flange_b.phi;
//   robot.axis3.r3Gear1.bearingFriction.bearing.tau = 0.0;
//   robot.axis3.r3Gear1.gear.bearing.tau = 0.0;
//   robot.axis3.r3Motor.Vs.v = robot.axis3.r3Motor.Vs.p.v - robot.axis3.r3Motor.Vs.n.v;
//   0.0 = robot.axis3.r3Motor.Vs.p.i + robot.axis3.r3Motor.Vs.n.i;
//   robot.axis3.r3Motor.Vs.i = robot.axis3.r3Motor.Vs.p.i;
//   robot.axis3.r3Motor.diff.v1 = robot.axis3.r3Motor.diff.p1.v - robot.axis3.r3Motor.diff.n1.v;
//   robot.axis3.r3Motor.diff.v2 = robot.axis3.r3Motor.diff.p2.v - robot.axis3.r3Motor.diff.n2.v;
//   0.0 = robot.axis3.r3Motor.diff.p1.i + robot.axis3.r3Motor.diff.n1.i;
//   0.0 = robot.axis3.r3Motor.diff.p2.i + robot.axis3.r3Motor.diff.n2.i;
//   robot.axis3.r3Motor.diff.i1 = robot.axis3.r3Motor.diff.p1.i;
//   robot.axis3.r3Motor.diff.i2 = robot.axis3.r3Motor.diff.p2.i;
//   robot.axis3.r3Motor.diff.v1 = 0.0;
//   robot.axis3.r3Motor.diff.i1 = 0.0;
//   robot.axis3.r3Motor.power.v1 = robot.axis3.r3Motor.power.p1.v - robot.axis3.r3Motor.power.n1.v;
//   robot.axis3.r3Motor.power.v2 = robot.axis3.r3Motor.power.p2.v - robot.axis3.r3Motor.power.n2.v;
//   0.0 = robot.axis3.r3Motor.power.p1.i + robot.axis3.r3Motor.power.n1.i;
//   0.0 = robot.axis3.r3Motor.power.p2.i + robot.axis3.r3Motor.power.n2.i;
//   robot.axis3.r3Motor.power.i1 = robot.axis3.r3Motor.power.p1.i;
//   robot.axis3.r3Motor.power.i2 = robot.axis3.r3Motor.power.p2.i;
//   robot.axis3.r3Motor.power.v1 = 0.0;
//   robot.axis3.r3Motor.power.i1 = 0.0;
//   robot.axis3.r3Motor.emf.v = robot.axis3.r3Motor.emf.p.v - robot.axis3.r3Motor.emf.n.v;
//   0.0 = robot.axis3.r3Motor.emf.p.i + robot.axis3.r3Motor.emf.n.i;
//   robot.axis3.r3Motor.emf.i = robot.axis3.r3Motor.emf.p.i;
//   robot.axis3.r3Motor.emf.w = der(robot.axis3.r3Motor.emf.flange_b.phi);
//   robot.axis3.r3Motor.emf.k * robot.axis3.r3Motor.emf.w = robot.axis3.r3Motor.emf.v;
//   robot.axis3.r3Motor.emf.flange_b.tau = (-robot.axis3.r3Motor.emf.k) * robot.axis3.r3Motor.emf.i;
//   robot.axis3.r3Motor.La.L * der(robot.axis3.r3Motor.La.i) = robot.axis3.r3Motor.La.v;
//   robot.axis3.r3Motor.La.v = robot.axis3.r3Motor.La.p.v - robot.axis3.r3Motor.La.n.v;
//   0.0 = robot.axis3.r3Motor.La.p.i + robot.axis3.r3Motor.La.n.i;
//   robot.axis3.r3Motor.La.i = robot.axis3.r3Motor.La.p.i;
//   robot.axis3.r3Motor.Ra.R * robot.axis3.r3Motor.Ra.i = robot.axis3.r3Motor.Ra.v;
//   robot.axis3.r3Motor.Ra.v = robot.axis3.r3Motor.Ra.p.v - robot.axis3.r3Motor.Ra.n.v;
//   0.0 = robot.axis3.r3Motor.Ra.p.i + robot.axis3.r3Motor.Ra.n.i;
//   robot.axis3.r3Motor.Ra.i = robot.axis3.r3Motor.Ra.p.i;
//   robot.axis3.r3Motor.Rd2.R * robot.axis3.r3Motor.Rd2.i = robot.axis3.r3Motor.Rd2.v;
//   robot.axis3.r3Motor.Rd2.v = robot.axis3.r3Motor.Rd2.p.v - robot.axis3.r3Motor.Rd2.n.v;
//   0.0 = robot.axis3.r3Motor.Rd2.p.i + robot.axis3.r3Motor.Rd2.n.i;
//   robot.axis3.r3Motor.Rd2.i = robot.axis3.r3Motor.Rd2.p.i;
//   robot.axis3.r3Motor.C.i = robot.axis3.r3Motor.C.C * der(robot.axis3.r3Motor.C.v);
//   robot.axis3.r3Motor.C.v = robot.axis3.r3Motor.C.p.v - robot.axis3.r3Motor.C.n.v;
//   0.0 = robot.axis3.r3Motor.C.p.i + robot.axis3.r3Motor.C.n.i;
//   robot.axis3.r3Motor.C.i = robot.axis3.r3Motor.C.p.i;
//   robot.axis3.r3Motor.OpI.v1 = robot.axis3.r3Motor.OpI.p1.v - robot.axis3.r3Motor.OpI.n1.v;
//   robot.axis3.r3Motor.OpI.v2 = robot.axis3.r3Motor.OpI.p2.v - robot.axis3.r3Motor.OpI.n2.v;
//   0.0 = robot.axis3.r3Motor.OpI.p1.i + robot.axis3.r3Motor.OpI.n1.i;
//   0.0 = robot.axis3.r3Motor.OpI.p2.i + robot.axis3.r3Motor.OpI.n2.i;
//   robot.axis3.r3Motor.OpI.i1 = robot.axis3.r3Motor.OpI.p1.i;
//   robot.axis3.r3Motor.OpI.i2 = robot.axis3.r3Motor.OpI.p2.i;
//   robot.axis3.r3Motor.OpI.v1 = 0.0;
//   robot.axis3.r3Motor.OpI.i1 = 0.0;
//   robot.axis3.r3Motor.Rd1.R * robot.axis3.r3Motor.Rd1.i = robot.axis3.r3Motor.Rd1.v;
//   robot.axis3.r3Motor.Rd1.v = robot.axis3.r3Motor.Rd1.p.v - robot.axis3.r3Motor.Rd1.n.v;
//   0.0 = robot.axis3.r3Motor.Rd1.p.i + robot.axis3.r3Motor.Rd1.n.i;
//   robot.axis3.r3Motor.Rd1.i = robot.axis3.r3Motor.Rd1.p.i;
//   robot.axis3.r3Motor.Ri.R * robot.axis3.r3Motor.Ri.i = robot.axis3.r3Motor.Ri.v;
//   robot.axis3.r3Motor.Ri.v = robot.axis3.r3Motor.Ri.p.v - robot.axis3.r3Motor.Ri.n.v;
//   0.0 = robot.axis3.r3Motor.Ri.p.i + robot.axis3.r3Motor.Ri.n.i;
//   robot.axis3.r3Motor.Ri.i = robot.axis3.r3Motor.Ri.p.i;
//   robot.axis3.r3Motor.Rp1.R * robot.axis3.r3Motor.Rp1.i = robot.axis3.r3Motor.Rp1.v;
//   robot.axis3.r3Motor.Rp1.v = robot.axis3.r3Motor.Rp1.p.v - robot.axis3.r3Motor.Rp1.n.v;
//   0.0 = robot.axis3.r3Motor.Rp1.p.i + robot.axis3.r3Motor.Rp1.n.i;
//   robot.axis3.r3Motor.Rp1.i = robot.axis3.r3Motor.Rp1.p.i;
//   robot.axis3.r3Motor.Rp2.R * robot.axis3.r3Motor.Rp2.i = robot.axis3.r3Motor.Rp2.v;
//   robot.axis3.r3Motor.Rp2.v = robot.axis3.r3Motor.Rp2.p.v - robot.axis3.r3Motor.Rp2.n.v;
//   0.0 = robot.axis3.r3Motor.Rp2.p.i + robot.axis3.r3Motor.Rp2.n.i;
//   robot.axis3.r3Motor.Rp2.i = robot.axis3.r3Motor.Rp2.p.i;
//   robot.axis3.r3Motor.Rd4.R * robot.axis3.r3Motor.Rd4.i = robot.axis3.r3Motor.Rd4.v;
//   robot.axis3.r3Motor.Rd4.v = robot.axis3.r3Motor.Rd4.p.v - robot.axis3.r3Motor.Rd4.n.v;
//   0.0 = robot.axis3.r3Motor.Rd4.p.i + robot.axis3.r3Motor.Rd4.n.i;
//   robot.axis3.r3Motor.Rd4.i = robot.axis3.r3Motor.Rd4.p.i;
//   robot.axis3.r3Motor.hall2.v = robot.axis3.r3Motor.hall2.p.v - robot.axis3.r3Motor.hall2.n.v;
//   0.0 = robot.axis3.r3Motor.hall2.p.i + robot.axis3.r3Motor.hall2.n.i;
//   robot.axis3.r3Motor.hall2.i = robot.axis3.r3Motor.hall2.p.i;
//   robot.axis3.r3Motor.Rd3.R * robot.axis3.r3Motor.Rd3.i = robot.axis3.r3Motor.Rd3.v;
//   robot.axis3.r3Motor.Rd3.v = robot.axis3.r3Motor.Rd3.p.v - robot.axis3.r3Motor.Rd3.n.v;
//   0.0 = robot.axis3.r3Motor.Rd3.p.i + robot.axis3.r3Motor.Rd3.n.i;
//   robot.axis3.r3Motor.Rd3.i = robot.axis3.r3Motor.Rd3.p.i;
//   robot.axis3.r3Motor.g1.p.v = 0.0;
//   robot.axis3.r3Motor.g2.p.v = 0.0;
//   robot.axis3.r3Motor.g3.p.v = 0.0;
//   robot.axis3.r3Motor.hall1.p.v = robot.axis3.r3Motor.hall1.n.v;
//   robot.axis3.r3Motor.hall1.p.i = robot.axis3.r3Motor.hall1.i;
//   robot.axis3.r3Motor.hall1.n.i = -robot.axis3.r3Motor.hall1.i;
//   robot.axis3.r3Motor.g4.p.v = 0.0;
//   robot.axis3.r3Motor.g5.p.v = 0.0;
//   robot.axis3.r3Motor.phi.phi = robot.axis3.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis3.r3Motor.phi.flange_a.tau;
//   robot.axis3.r3Motor.w.w = der(robot.axis3.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis3.r3Motor.w.flange_a.tau;
//   robot.axis3.r3Motor.Rd2.n.i + (robot.axis3.r3Motor.diff.n1.i + robot.axis3.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis3.r3Motor.Rd2.n.v = robot.axis3.r3Motor.diff.n1.v;
//   robot.axis3.r3Motor.diff.n1.v = robot.axis3.r3Motor.Rd1.p.v;
//   robot.axis3.r3Motor.C.n.i + (robot.axis3.r3Motor.OpI.p2.i + robot.axis3.r3Motor.power.p1.i) = 0.0;
//   robot.axis3.r3Motor.C.n.v = robot.axis3.r3Motor.OpI.p2.v;
//   robot.axis3.r3Motor.OpI.p2.v = robot.axis3.r3Motor.power.p1.v;
//   robot.axis3.r3Motor.Rd1.n.i + (robot.axis3.r3Motor.diff.p2.i + robot.axis3.r3Motor.Ri.p.i) = 0.0;
//   robot.axis3.r3Motor.Rd1.n.v = robot.axis3.r3Motor.diff.p2.v;
//   robot.axis3.r3Motor.diff.p2.v = robot.axis3.r3Motor.Ri.p.v;
//   robot.axis3.r3Motor.Ri.n.i + (robot.axis3.r3Motor.OpI.n1.i + robot.axis3.r3Motor.C.p.i) = 0.0;
//   robot.axis3.r3Motor.Ri.n.v = robot.axis3.r3Motor.OpI.n1.v;
//   robot.axis3.r3Motor.OpI.n1.v = robot.axis3.r3Motor.C.p.v;
//   robot.axis3.r3Motor.power.n1.i + (robot.axis3.r3Motor.Rp1.p.i + robot.axis3.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis3.r3Motor.power.n1.v = robot.axis3.r3Motor.Rp1.p.v;
//   robot.axis3.r3Motor.Rp1.p.v = robot.axis3.r3Motor.Rp2.p.v;
//   robot.axis3.r3Motor.power.p2.i + (robot.axis3.r3Motor.Ra.p.i + robot.axis3.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis3.r3Motor.power.p2.v = robot.axis3.r3Motor.Ra.p.v;
//   robot.axis3.r3Motor.Ra.p.v = robot.axis3.r3Motor.Rp1.n.v;
//   robot.axis3.r3Motor.Rd4.n.i + (robot.axis3.r3Motor.g3.p.i + (robot.axis3.r3Motor.OpI.p1.i + (robot.axis3.r3Motor.diff.n2.i + (robot.axis3.r3Motor.OpI.n2.i + robot.axis3.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis3.r3Motor.Rd4.n.v = robot.axis3.r3Motor.g3.p.v;
//   robot.axis3.r3Motor.g3.p.v = robot.axis3.r3Motor.OpI.p1.v;
//   robot.axis3.r3Motor.OpI.p1.v = robot.axis3.r3Motor.diff.n2.v;
//   robot.axis3.r3Motor.diff.n2.v = robot.axis3.r3Motor.OpI.n2.v;
//   robot.axis3.r3Motor.OpI.n2.v = robot.axis3.r3Motor.power.n2.v;
//   (-robot.axis3.r3Motor.flange_motor.tau) + (robot.axis3.r3Motor.emf.flange_b.tau + (robot.axis3.r3Motor.phi.flange_a.tau + robot.axis3.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis3.r3Motor.flange_motor.phi = robot.axis3.r3Motor.emf.flange_b.phi;
//   robot.axis3.r3Motor.emf.flange_b.phi = robot.axis3.r3Motor.phi.flange_a.phi;
//   robot.axis3.r3Motor.phi.flange_a.phi = robot.axis3.r3Motor.w.flange_a.phi;
//   robot.axis3.r3Motor.La.n.i + robot.axis3.r3Motor.emf.p.i = 0.0;
//   robot.axis3.r3Motor.La.n.v = robot.axis3.r3Motor.emf.p.v;
//   robot.axis3.r3Motor.Ra.n.i + robot.axis3.r3Motor.La.p.i = 0.0;
//   robot.axis3.r3Motor.Ra.n.v = robot.axis3.r3Motor.La.p.v;
//   robot.axis3.r3Motor.Vs.n.i + robot.axis3.r3Motor.g1.p.i = 0.0;
//   robot.axis3.r3Motor.Vs.n.v = robot.axis3.r3Motor.g1.p.v;
//   robot.axis3.r3Motor.Vs.p.i + robot.axis3.r3Motor.Rd2.p.i = 0.0;
//   robot.axis3.r3Motor.Vs.p.v = robot.axis3.r3Motor.Rd2.p.v;
//   robot.axis3.r3Motor.g2.p.i + robot.axis3.r3Motor.hall2.n.i = 0.0;
//   robot.axis3.r3Motor.g2.p.v = robot.axis3.r3Motor.hall2.n.v;
//   robot.axis3.r3Motor.hall1.n.i + robot.axis3.r3Motor.g4.p.i = 0.0;
//   robot.axis3.r3Motor.hall1.n.v = robot.axis3.r3Motor.g4.p.v;
//   robot.axis3.r3Motor.emf.n.i + robot.axis3.r3Motor.hall1.p.i = 0.0;
//   robot.axis3.r3Motor.emf.n.v = robot.axis3.r3Motor.hall1.p.v;
//   robot.axis3.r3Motor.hall1.i = robot.axis3.r3Motor.hall2.v;
//   robot.axis3.r3Motor.Rd3.n.i + (robot.axis3.r3Motor.diff.p1.i + robot.axis3.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis3.r3Motor.Rd3.n.v = robot.axis3.r3Motor.diff.p1.v;
//   robot.axis3.r3Motor.diff.p1.v = robot.axis3.r3Motor.Rd4.p.v;
//   robot.axis3.r3Motor.Rd3.p.i + robot.axis3.r3Motor.hall2.p.i = 0.0;
//   robot.axis3.r3Motor.Rd3.p.v = robot.axis3.r3Motor.hall2.p.v;
//   robot.axis3.r3Motor.Vs.v = robot.axis3.r3Motor.i_ref;
//   robot.axis3.r3Motor.g5.p.i + robot.axis3.r3Motor.Rp2.n.i = 0.0;
//   robot.axis3.r3Motor.g5.p.v = robot.axis3.r3Motor.Rp2.n.v;
//   robot.axis3.r3Motor.phi.phi = robot.axis3.r3Motor.outPort_phi;
//   robot.axis3.r3Motor.w.w = robot.axis3.r3Motor.outPort_w;
//   der(robot.axis3.r3Control.rate2.x[1]) = robot.axis3.r3Control.rate2.x1dot;
//   robot.axis3.r3Control.rate2.xn = robot.axis3.r3Control.rate2.x[1];
//   robot.axis3.r3Control.rate2.u = robot.axis3.r3Control.rate2.a[1] * robot.axis3.r3Control.rate2.x1dot + robot.axis3.r3Control.rate2.a[2] * robot.axis3.r3Control.rate2.x[1];
//   robot.axis3.r3Control.rate2.y = robot.axis3.r3Control.rate2.b[1] * robot.axis3.r3Control.rate2.x1dot + robot.axis3.r3Control.rate2.b[2] * robot.axis3.r3Control.rate2.x[1];
//   der(robot.axis3.r3Control.rate3.y) = robot.axis3.r3Control.rate3.k * robot.axis3.r3Control.rate3.u;
//   der(robot.axis3.r3Control.rate1.x[1]) = robot.axis3.r3Control.rate1.x1dot;
//   robot.axis3.r3Control.rate1.xn = robot.axis3.r3Control.rate1.x[1];
//   robot.axis3.r3Control.rate1.u = robot.axis3.r3Control.rate1.a[1] * robot.axis3.r3Control.rate1.x1dot + robot.axis3.r3Control.rate1.a[2] * robot.axis3.r3Control.rate1.x[1];
//   robot.axis3.r3Control.rate1.y = robot.axis3.r3Control.rate1.b[1] * robot.axis3.r3Control.rate1.x1dot + robot.axis3.r3Control.rate1.b[2] * robot.axis3.r3Control.rate1.x[1];
//   der(robot.axis3.r3Control.tacho1.y) = (robot.axis3.r3Control.tacho1.k * robot.axis3.r3Control.tacho1.u - robot.axis3.r3Control.tacho1.y) / robot.axis3.r3Control.tacho1.T;
//   robot.axis3.r3Control.Kd.y = robot.axis3.r3Control.Kd.k * robot.axis3.r3Control.Kd.u;
//   robot.axis3.r3Control.wSum.y = robot.axis3.r3Control.wSum.u1 - robot.axis3.r3Control.wSum.u2;
//   robot.axis3.r3Control.sum.y = robot.axis3.r3Control.sum.k1 * robot.axis3.r3Control.sum.u1 + robot.axis3.r3Control.sum.k2 * robot.axis3.r3Control.sum.u2;
//   robot.axis3.r3Control.pSum.y = robot.axis3.r3Control.pSum.u1 - robot.axis3.r3Control.pSum.u2;
//   robot.axis3.r3Control.Kv.y = robot.axis3.r3Control.Kv.k * robot.axis3.r3Control.Kv.u;
//   der(robot.axis3.r3Control.tacho2.x[1]) = robot.axis3.r3Control.tacho2.x1dot;
//   der(robot.axis3.r3Control.tacho2.x[2]) = robot.axis3.r3Control.tacho2.x[1];
//   robot.axis3.r3Control.tacho2.xn = robot.axis3.r3Control.tacho2.x[2];
//   robot.axis3.r3Control.tacho2.u = robot.axis3.r3Control.tacho2.a[1] * robot.axis3.r3Control.tacho2.x1dot + (robot.axis3.r3Control.tacho2.a[2] * robot.axis3.r3Control.tacho2.x[1] + robot.axis3.r3Control.tacho2.a[3] * robot.axis3.r3Control.tacho2.x[2]);
//   robot.axis3.r3Control.tacho2.y = robot.axis3.r3Control.tacho2.b[1] * robot.axis3.r3Control.tacho2.x[2];
//   robot.axis3.r3Control.rate2.y = robot.axis3.r3Control.rate3.u;
//   robot.axis3.r3Control.wSum.y = robot.axis3.r3Control.rate2.u;
//   robot.axis3.r3Control.sum.y = robot.axis3.r3Control.wSum.u1;
//   robot.axis3.r3Control.Kd.y = robot.axis3.r3Control.sum.u1;
//   robot.axis3.r3Control.rate3.y = robot.axis3.r3Control.i_ref;
//   robot.axis3.r3Control.rate1.y = robot.axis3.r3Control.wSum.u2;
//   robot.axis3.r3Control.Kv.u = robot.axis3.r3Control.pSum.y;
//   robot.axis3.r3Control.tacho1.y = robot.axis3.r3Control.tacho2.u;
//   robot.axis3.r3Control.tacho2.y = robot.axis3.r3Control.rate1.u;
//   robot.axis3.r3Control.Kv.y = robot.axis3.r3Control.sum.u2;
//   robot.axis3.r3Control.Kd.u = robot.axis3.r3Control.w_ref;
//   robot.axis3.r3Control.pSum.u1 = robot.axis3.r3Control.phi_ref;
//   robot.axis3.r3Control.pSum.u2 = robot.axis3.r3Control.phi;
//   robot.axis3.r3Control.tacho1.u = robot.axis3.r3Control.w;
//   der(robot.axis3.integrator1.y) = robot.axis3.integrator1.k * robot.axis3.integrator1.u;
//   der(robot.axis3.integrator2.y) = robot.axis3.integrator2.k * robot.axis3.integrator2.u;
//   robot.axis3.k2.y = robot.axis3.k2.k * robot.axis3.k2.u;
//   robot.axis3.k1.y = robot.axis3.k1.k * robot.axis3.k1.u;
//   robot.axis3.states.w = der(robot.axis3.states.phi);
//   robot.axis3.states.a = der(robot.axis3.states.w);
//   robot.axis3.states.J * robot.axis3.states.a = robot.axis3.states.flange_a.tau + robot.axis3.states.flange_b.tau;
//   robot.axis3.states.flange_a.phi = robot.axis3.states.phi;
//   robot.axis3.states.flange_b.phi = robot.axis3.states.phi;
//   robot.axis3.a_ref = robot.axis3.inPort_a_ref;
//   robot.axis3.w_ref = robot.axis3.integrator1.y;
//   robot.axis3.phi_ref = robot.axis3.integrator2.y;
//   robot.axis3.k1.y = robot.axis3.r3Control.phi_ref;
//   robot.axis3.r3Motor.outPort_w = robot.axis3.r3Control.w;
//   robot.axis3.r3Motor.outPort_phi = robot.axis3.r3Control.phi;
//   robot.axis3.integrator1.y = robot.axis3.k2.u;
//   robot.axis3.k2.u = robot.axis3.integrator2.u;
//   robot.axis3.r3Control.i_ref = robot.axis3.r3Motor.i_ref;
//   robot.axis3.integrator2.y = robot.axis3.k1.u;
//   robot.axis3.r3Motor.flange_motor.tau + robot.axis3.r3Gear1.flange_a.tau = 0.0;
//   robot.axis3.r3Motor.flange_motor.phi = robot.axis3.r3Gear1.flange_a.phi;
//   robot.axis3.integrator1.u = robot.axis3.inPort_a_ref;
//   robot.axis3.k2.y = robot.axis3.r3Control.w_ref;
//   robot.axis3.r3Gear1.flange_b.tau + robot.axis3.states.flange_a.tau = 0.0;
//   robot.axis3.r3Gear1.flange_b.phi = robot.axis3.states.flange_a.phi;
//   robot.axis3.states.flange_b.tau + (-robot.axis3.flange.tau) = 0.0;
//   robot.axis3.states.flange_b.phi = robot.axis3.flange.phi;
//   robot.axis4.r3Gear2.Jmotor.w = der(robot.axis4.r3Gear2.Jmotor.phi);
//   robot.axis4.r3Gear2.Jmotor.a = der(robot.axis4.r3Gear2.Jmotor.w);
//   robot.axis4.r3Gear2.Jmotor.J * robot.axis4.r3Gear2.Jmotor.a = robot.axis4.r3Gear2.Jmotor.flange_a.tau + robot.axis4.r3Gear2.Jmotor.flange_b.tau;
//   robot.axis4.r3Gear2.Jmotor.flange_a.phi = robot.axis4.r3Gear2.Jmotor.phi;
//   robot.axis4.r3Gear2.Jmotor.flange_b.phi = robot.axis4.r3Gear2.Jmotor.phi;
//   robot.axis4.r3Gear2.gear.phi_a = robot.axis4.r3Gear2.gear.ratio * robot.axis4.r3Gear2.gear.phi_b;
//   0.0 = robot.axis4.r3Gear2.gear.ratio * robot.axis4.r3Gear2.gear.flange_a.tau + robot.axis4.r3Gear2.gear.flange_b.tau;
//   robot.axis4.r3Gear2.gear.bearing.phi = 0.0;
//   0.0 = robot.axis4.r3Gear2.gear.flange_a.tau + (robot.axis4.r3Gear2.gear.flange_b.tau + robot.axis4.r3Gear2.gear.tau_support);
//   robot.axis4.r3Gear2.gear.phi_a = robot.axis4.r3Gear2.gear.flange_a.phi - robot.axis4.r3Gear2.gear.bearing.phi;
//   robot.axis4.r3Gear2.gear.phi_b = robot.axis4.r3Gear2.gear.flange_b.phi - robot.axis4.r3Gear2.gear.bearing.phi;
//   robot.axis4.r3Gear2.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis4.r3Gear2.bearingFriction.tau0_max = robot.axis4.r3Gear2.bearingFriction.peak * robot.axis4.r3Gear2.bearingFriction.tau0;
//   robot.axis4.r3Gear2.bearingFriction.free = false;
//   robot.axis4.r3Gear2.bearingFriction.phi = robot.axis4.r3Gear2.bearingFriction.phi_a;
//   robot.axis4.r3Gear2.bearingFriction.phi = robot.axis4.r3Gear2.bearingFriction.phi_b;
//   robot.axis4.r3Gear2.bearingFriction.w = der(robot.axis4.r3Gear2.bearingFriction.phi);
//   robot.axis4.r3Gear2.bearingFriction.a = der(robot.axis4.r3Gear2.bearingFriction.w);
//   robot.axis4.r3Gear2.bearingFriction.w_relfric = robot.axis4.r3Gear2.bearingFriction.w;
//   robot.axis4.r3Gear2.bearingFriction.a_relfric = robot.axis4.r3Gear2.bearingFriction.a;
//   0.0 = robot.axis4.r3Gear2.bearingFriction.flange_a.tau + robot.axis4.r3Gear2.bearingFriction.flange_b.tau - robot.axis4.r3Gear2.bearingFriction.tau;
//   robot.axis4.r3Gear2.bearingFriction.tau = if robot.axis4.r3Gear2.bearingFriction.locked then robot.axis4.r3Gear2.bearingFriction.sa * robot.axis4.r3Gear2.bearingFriction.unitTorque else if robot.axis4.r3Gear2.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis4.r3Gear2.bearingFriction.w,{{robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if robot.axis4.r3Gear2.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis4.r3Gear2.bearingFriction.w,{{robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis4.r3Gear2.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis4.r3Gear2.bearingFriction.w,{{robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis4.r3Gear2.bearingFriction.w,{{robot.axis4.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis4.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis4.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis4.r3Gear2.bearingFriction.phi_b = robot.axis4.r3Gear2.bearingFriction.flange_b.phi - robot.axis4.r3Gear2.bearingFriction.bearing.phi;
//   robot.axis4.r3Gear2.bearingFriction.phi_a = robot.axis4.r3Gear2.bearingFriction.flange_a.phi - robot.axis4.r3Gear2.bearingFriction.bearing.phi;
//   0.0 = robot.axis4.r3Gear2.bearingFriction.flange_a.tau + (robot.axis4.r3Gear2.bearingFriction.flange_b.tau + robot.axis4.r3Gear2.bearingFriction.tau_support);
//   robot.axis4.r3Gear2.bearingFriction.bearing.phi = 0.0;
//   robot.axis4.r3Gear2.bearingFriction.startForward = pre(robot.axis4.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis4.r3Gear2.bearingFriction.sa > robot.axis4.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis4.r3Gear2.bearingFriction.startForward) AND robot.axis4.r3Gear2.bearingFriction.sa > robot.axis4.r3Gear2.bearingFriction.tau0) OR pre(robot.axis4.r3Gear2.bearingFriction.mode) == -1 AND robot.axis4.r3Gear2.bearingFriction.w_relfric > robot.axis4.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis4.r3Gear2.bearingFriction.w_relfric > 0.0;
//   robot.axis4.r3Gear2.bearingFriction.startBackward = pre(robot.axis4.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis4.r3Gear2.bearingFriction.sa < -robot.axis4.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis4.r3Gear2.bearingFriction.startBackward) AND robot.axis4.r3Gear2.bearingFriction.sa < -robot.axis4.r3Gear2.bearingFriction.tau0) OR pre(robot.axis4.r3Gear2.bearingFriction.mode) == 1 AND robot.axis4.r3Gear2.bearingFriction.w_relfric < -robot.axis4.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis4.r3Gear2.bearingFriction.w_relfric < 0.0;
//   robot.axis4.r3Gear2.bearingFriction.locked =  NOT robot.axis4.r3Gear2.bearingFriction.free AND  NOT (pre(robot.axis4.r3Gear2.bearingFriction.mode) == 1 OR robot.axis4.r3Gear2.bearingFriction.startForward OR pre(robot.axis4.r3Gear2.bearingFriction.mode) == -1 OR robot.axis4.r3Gear2.bearingFriction.startBackward);
//   robot.axis4.r3Gear2.bearingFriction.a_relfric = robot.axis4.r3Gear2.bearingFriction.unitAngularAcceleration * (if robot.axis4.r3Gear2.bearingFriction.locked then 0.0 else if robot.axis4.r3Gear2.bearingFriction.free then robot.axis4.r3Gear2.bearingFriction.sa else if robot.axis4.r3Gear2.bearingFriction.startForward then robot.axis4.r3Gear2.bearingFriction.sa - robot.axis4.r3Gear2.bearingFriction.tau0_max / robot.axis4.r3Gear2.bearingFriction.unitTorque else if robot.axis4.r3Gear2.bearingFriction.startBackward then robot.axis4.r3Gear2.bearingFriction.sa + robot.axis4.r3Gear2.bearingFriction.tau0_max / robot.axis4.r3Gear2.bearingFriction.unitTorque else if pre(robot.axis4.r3Gear2.bearingFriction.mode) == 1 then robot.axis4.r3Gear2.bearingFriction.sa - robot.axis4.r3Gear2.bearingFriction.tau0 / robot.axis4.r3Gear2.bearingFriction.unitTorque else robot.axis4.r3Gear2.bearingFriction.sa + robot.axis4.r3Gear2.bearingFriction.tau0 / robot.axis4.r3Gear2.bearingFriction.unitTorque);
//   robot.axis4.r3Gear2.bearingFriction.mode = if robot.axis4.r3Gear2.bearingFriction.free then 2 else if (pre(robot.axis4.r3Gear2.bearingFriction.mode) == 1 OR pre(robot.axis4.r3Gear2.bearingFriction.mode) == 2 OR robot.axis4.r3Gear2.bearingFriction.startForward) AND robot.axis4.r3Gear2.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis4.r3Gear2.bearingFriction.mode) == -1 OR pre(robot.axis4.r3Gear2.bearingFriction.mode) == 2 OR robot.axis4.r3Gear2.bearingFriction.startBackward) AND robot.axis4.r3Gear2.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis4.r3Gear2.Jmotor.flange_a.tau + (-robot.axis4.r3Gear2.flange_a.tau) = 0.0;
//   robot.axis4.r3Gear2.Jmotor.flange_a.phi = robot.axis4.r3Gear2.flange_a.phi;
//   robot.axis4.r3Gear2.gear.flange_b.tau + robot.axis4.r3Gear2.bearingFriction.flange_a.tau = 0.0;
//   robot.axis4.r3Gear2.gear.flange_b.phi = robot.axis4.r3Gear2.bearingFriction.flange_a.phi;
//   robot.axis4.r3Gear2.bearingFriction.flange_b.tau + (-robot.axis4.r3Gear2.flange_b.tau) = 0.0;
//   robot.axis4.r3Gear2.bearingFriction.flange_b.phi = robot.axis4.r3Gear2.flange_b.phi;
//   robot.axis4.r3Gear2.Jmotor.flange_b.tau + robot.axis4.r3Gear2.gear.flange_a.tau = 0.0;
//   robot.axis4.r3Gear2.Jmotor.flange_b.phi = robot.axis4.r3Gear2.gear.flange_a.phi;
//   robot.axis4.r3Gear2.bearingFriction.bearing.tau = 0.0;
//   robot.axis4.r3Gear2.gear.bearing.tau = 0.0;
//   robot.axis4.r3Motor.Vs.v = robot.axis4.r3Motor.Vs.p.v - robot.axis4.r3Motor.Vs.n.v;
//   0.0 = robot.axis4.r3Motor.Vs.p.i + robot.axis4.r3Motor.Vs.n.i;
//   robot.axis4.r3Motor.Vs.i = robot.axis4.r3Motor.Vs.p.i;
//   robot.axis4.r3Motor.diff.v1 = robot.axis4.r3Motor.diff.p1.v - robot.axis4.r3Motor.diff.n1.v;
//   robot.axis4.r3Motor.diff.v2 = robot.axis4.r3Motor.diff.p2.v - robot.axis4.r3Motor.diff.n2.v;
//   0.0 = robot.axis4.r3Motor.diff.p1.i + robot.axis4.r3Motor.diff.n1.i;
//   0.0 = robot.axis4.r3Motor.diff.p2.i + robot.axis4.r3Motor.diff.n2.i;
//   robot.axis4.r3Motor.diff.i1 = robot.axis4.r3Motor.diff.p1.i;
//   robot.axis4.r3Motor.diff.i2 = robot.axis4.r3Motor.diff.p2.i;
//   robot.axis4.r3Motor.diff.v1 = 0.0;
//   robot.axis4.r3Motor.diff.i1 = 0.0;
//   robot.axis4.r3Motor.power.v1 = robot.axis4.r3Motor.power.p1.v - robot.axis4.r3Motor.power.n1.v;
//   robot.axis4.r3Motor.power.v2 = robot.axis4.r3Motor.power.p2.v - robot.axis4.r3Motor.power.n2.v;
//   0.0 = robot.axis4.r3Motor.power.p1.i + robot.axis4.r3Motor.power.n1.i;
//   0.0 = robot.axis4.r3Motor.power.p2.i + robot.axis4.r3Motor.power.n2.i;
//   robot.axis4.r3Motor.power.i1 = robot.axis4.r3Motor.power.p1.i;
//   robot.axis4.r3Motor.power.i2 = robot.axis4.r3Motor.power.p2.i;
//   robot.axis4.r3Motor.power.v1 = 0.0;
//   robot.axis4.r3Motor.power.i1 = 0.0;
//   robot.axis4.r3Motor.emf.v = robot.axis4.r3Motor.emf.p.v - robot.axis4.r3Motor.emf.n.v;
//   0.0 = robot.axis4.r3Motor.emf.p.i + robot.axis4.r3Motor.emf.n.i;
//   robot.axis4.r3Motor.emf.i = robot.axis4.r3Motor.emf.p.i;
//   robot.axis4.r3Motor.emf.w = der(robot.axis4.r3Motor.emf.flange_b.phi);
//   robot.axis4.r3Motor.emf.k * robot.axis4.r3Motor.emf.w = robot.axis4.r3Motor.emf.v;
//   robot.axis4.r3Motor.emf.flange_b.tau = (-robot.axis4.r3Motor.emf.k) * robot.axis4.r3Motor.emf.i;
//   robot.axis4.r3Motor.La.L * der(robot.axis4.r3Motor.La.i) = robot.axis4.r3Motor.La.v;
//   robot.axis4.r3Motor.La.v = robot.axis4.r3Motor.La.p.v - robot.axis4.r3Motor.La.n.v;
//   0.0 = robot.axis4.r3Motor.La.p.i + robot.axis4.r3Motor.La.n.i;
//   robot.axis4.r3Motor.La.i = robot.axis4.r3Motor.La.p.i;
//   robot.axis4.r3Motor.Ra.R * robot.axis4.r3Motor.Ra.i = robot.axis4.r3Motor.Ra.v;
//   robot.axis4.r3Motor.Ra.v = robot.axis4.r3Motor.Ra.p.v - robot.axis4.r3Motor.Ra.n.v;
//   0.0 = robot.axis4.r3Motor.Ra.p.i + robot.axis4.r3Motor.Ra.n.i;
//   robot.axis4.r3Motor.Ra.i = robot.axis4.r3Motor.Ra.p.i;
//   robot.axis4.r3Motor.Rd2.R * robot.axis4.r3Motor.Rd2.i = robot.axis4.r3Motor.Rd2.v;
//   robot.axis4.r3Motor.Rd2.v = robot.axis4.r3Motor.Rd2.p.v - robot.axis4.r3Motor.Rd2.n.v;
//   0.0 = robot.axis4.r3Motor.Rd2.p.i + robot.axis4.r3Motor.Rd2.n.i;
//   robot.axis4.r3Motor.Rd2.i = robot.axis4.r3Motor.Rd2.p.i;
//   robot.axis4.r3Motor.C.i = robot.axis4.r3Motor.C.C * der(robot.axis4.r3Motor.C.v);
//   robot.axis4.r3Motor.C.v = robot.axis4.r3Motor.C.p.v - robot.axis4.r3Motor.C.n.v;
//   0.0 = robot.axis4.r3Motor.C.p.i + robot.axis4.r3Motor.C.n.i;
//   robot.axis4.r3Motor.C.i = robot.axis4.r3Motor.C.p.i;
//   robot.axis4.r3Motor.OpI.v1 = robot.axis4.r3Motor.OpI.p1.v - robot.axis4.r3Motor.OpI.n1.v;
//   robot.axis4.r3Motor.OpI.v2 = robot.axis4.r3Motor.OpI.p2.v - robot.axis4.r3Motor.OpI.n2.v;
//   0.0 = robot.axis4.r3Motor.OpI.p1.i + robot.axis4.r3Motor.OpI.n1.i;
//   0.0 = robot.axis4.r3Motor.OpI.p2.i + robot.axis4.r3Motor.OpI.n2.i;
//   robot.axis4.r3Motor.OpI.i1 = robot.axis4.r3Motor.OpI.p1.i;
//   robot.axis4.r3Motor.OpI.i2 = robot.axis4.r3Motor.OpI.p2.i;
//   robot.axis4.r3Motor.OpI.v1 = 0.0;
//   robot.axis4.r3Motor.OpI.i1 = 0.0;
//   robot.axis4.r3Motor.Rd1.R * robot.axis4.r3Motor.Rd1.i = robot.axis4.r3Motor.Rd1.v;
//   robot.axis4.r3Motor.Rd1.v = robot.axis4.r3Motor.Rd1.p.v - robot.axis4.r3Motor.Rd1.n.v;
//   0.0 = robot.axis4.r3Motor.Rd1.p.i + robot.axis4.r3Motor.Rd1.n.i;
//   robot.axis4.r3Motor.Rd1.i = robot.axis4.r3Motor.Rd1.p.i;
//   robot.axis4.r3Motor.Ri.R * robot.axis4.r3Motor.Ri.i = robot.axis4.r3Motor.Ri.v;
//   robot.axis4.r3Motor.Ri.v = robot.axis4.r3Motor.Ri.p.v - robot.axis4.r3Motor.Ri.n.v;
//   0.0 = robot.axis4.r3Motor.Ri.p.i + robot.axis4.r3Motor.Ri.n.i;
//   robot.axis4.r3Motor.Ri.i = robot.axis4.r3Motor.Ri.p.i;
//   robot.axis4.r3Motor.Rp1.R * robot.axis4.r3Motor.Rp1.i = robot.axis4.r3Motor.Rp1.v;
//   robot.axis4.r3Motor.Rp1.v = robot.axis4.r3Motor.Rp1.p.v - robot.axis4.r3Motor.Rp1.n.v;
//   0.0 = robot.axis4.r3Motor.Rp1.p.i + robot.axis4.r3Motor.Rp1.n.i;
//   robot.axis4.r3Motor.Rp1.i = robot.axis4.r3Motor.Rp1.p.i;
//   robot.axis4.r3Motor.Rp2.R * robot.axis4.r3Motor.Rp2.i = robot.axis4.r3Motor.Rp2.v;
//   robot.axis4.r3Motor.Rp2.v = robot.axis4.r3Motor.Rp2.p.v - robot.axis4.r3Motor.Rp2.n.v;
//   0.0 = robot.axis4.r3Motor.Rp2.p.i + robot.axis4.r3Motor.Rp2.n.i;
//   robot.axis4.r3Motor.Rp2.i = robot.axis4.r3Motor.Rp2.p.i;
//   robot.axis4.r3Motor.Rd4.R * robot.axis4.r3Motor.Rd4.i = robot.axis4.r3Motor.Rd4.v;
//   robot.axis4.r3Motor.Rd4.v = robot.axis4.r3Motor.Rd4.p.v - robot.axis4.r3Motor.Rd4.n.v;
//   0.0 = robot.axis4.r3Motor.Rd4.p.i + robot.axis4.r3Motor.Rd4.n.i;
//   robot.axis4.r3Motor.Rd4.i = robot.axis4.r3Motor.Rd4.p.i;
//   robot.axis4.r3Motor.hall2.v = robot.axis4.r3Motor.hall2.p.v - robot.axis4.r3Motor.hall2.n.v;
//   0.0 = robot.axis4.r3Motor.hall2.p.i + robot.axis4.r3Motor.hall2.n.i;
//   robot.axis4.r3Motor.hall2.i = robot.axis4.r3Motor.hall2.p.i;
//   robot.axis4.r3Motor.Rd3.R * robot.axis4.r3Motor.Rd3.i = robot.axis4.r3Motor.Rd3.v;
//   robot.axis4.r3Motor.Rd3.v = robot.axis4.r3Motor.Rd3.p.v - robot.axis4.r3Motor.Rd3.n.v;
//   0.0 = robot.axis4.r3Motor.Rd3.p.i + robot.axis4.r3Motor.Rd3.n.i;
//   robot.axis4.r3Motor.Rd3.i = robot.axis4.r3Motor.Rd3.p.i;
//   robot.axis4.r3Motor.g1.p.v = 0.0;
//   robot.axis4.r3Motor.g2.p.v = 0.0;
//   robot.axis4.r3Motor.g3.p.v = 0.0;
//   robot.axis4.r3Motor.hall1.p.v = robot.axis4.r3Motor.hall1.n.v;
//   robot.axis4.r3Motor.hall1.p.i = robot.axis4.r3Motor.hall1.i;
//   robot.axis4.r3Motor.hall1.n.i = -robot.axis4.r3Motor.hall1.i;
//   robot.axis4.r3Motor.g4.p.v = 0.0;
//   robot.axis4.r3Motor.g5.p.v = 0.0;
//   robot.axis4.r3Motor.phi.phi = robot.axis4.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis4.r3Motor.phi.flange_a.tau;
//   robot.axis4.r3Motor.w.w = der(robot.axis4.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis4.r3Motor.w.flange_a.tau;
//   robot.axis4.r3Motor.Rd2.n.i + (robot.axis4.r3Motor.diff.n1.i + robot.axis4.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis4.r3Motor.Rd2.n.v = robot.axis4.r3Motor.diff.n1.v;
//   robot.axis4.r3Motor.diff.n1.v = robot.axis4.r3Motor.Rd1.p.v;
//   robot.axis4.r3Motor.C.n.i + (robot.axis4.r3Motor.OpI.p2.i + robot.axis4.r3Motor.power.p1.i) = 0.0;
//   robot.axis4.r3Motor.C.n.v = robot.axis4.r3Motor.OpI.p2.v;
//   robot.axis4.r3Motor.OpI.p2.v = robot.axis4.r3Motor.power.p1.v;
//   robot.axis4.r3Motor.Rd1.n.i + (robot.axis4.r3Motor.diff.p2.i + robot.axis4.r3Motor.Ri.p.i) = 0.0;
//   robot.axis4.r3Motor.Rd1.n.v = robot.axis4.r3Motor.diff.p2.v;
//   robot.axis4.r3Motor.diff.p2.v = robot.axis4.r3Motor.Ri.p.v;
//   robot.axis4.r3Motor.Ri.n.i + (robot.axis4.r3Motor.OpI.n1.i + robot.axis4.r3Motor.C.p.i) = 0.0;
//   robot.axis4.r3Motor.Ri.n.v = robot.axis4.r3Motor.OpI.n1.v;
//   robot.axis4.r3Motor.OpI.n1.v = robot.axis4.r3Motor.C.p.v;
//   robot.axis4.r3Motor.power.n1.i + (robot.axis4.r3Motor.Rp1.p.i + robot.axis4.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis4.r3Motor.power.n1.v = robot.axis4.r3Motor.Rp1.p.v;
//   robot.axis4.r3Motor.Rp1.p.v = robot.axis4.r3Motor.Rp2.p.v;
//   robot.axis4.r3Motor.power.p2.i + (robot.axis4.r3Motor.Ra.p.i + robot.axis4.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis4.r3Motor.power.p2.v = robot.axis4.r3Motor.Ra.p.v;
//   robot.axis4.r3Motor.Ra.p.v = robot.axis4.r3Motor.Rp1.n.v;
//   robot.axis4.r3Motor.Rd4.n.i + (robot.axis4.r3Motor.g3.p.i + (robot.axis4.r3Motor.OpI.p1.i + (robot.axis4.r3Motor.diff.n2.i + (robot.axis4.r3Motor.OpI.n2.i + robot.axis4.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis4.r3Motor.Rd4.n.v = robot.axis4.r3Motor.g3.p.v;
//   robot.axis4.r3Motor.g3.p.v = robot.axis4.r3Motor.OpI.p1.v;
//   robot.axis4.r3Motor.OpI.p1.v = robot.axis4.r3Motor.diff.n2.v;
//   robot.axis4.r3Motor.diff.n2.v = robot.axis4.r3Motor.OpI.n2.v;
//   robot.axis4.r3Motor.OpI.n2.v = robot.axis4.r3Motor.power.n2.v;
//   (-robot.axis4.r3Motor.flange_motor.tau) + (robot.axis4.r3Motor.emf.flange_b.tau + (robot.axis4.r3Motor.phi.flange_a.tau + robot.axis4.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis4.r3Motor.flange_motor.phi = robot.axis4.r3Motor.emf.flange_b.phi;
//   robot.axis4.r3Motor.emf.flange_b.phi = robot.axis4.r3Motor.phi.flange_a.phi;
//   robot.axis4.r3Motor.phi.flange_a.phi = robot.axis4.r3Motor.w.flange_a.phi;
//   robot.axis4.r3Motor.La.n.i + robot.axis4.r3Motor.emf.p.i = 0.0;
//   robot.axis4.r3Motor.La.n.v = robot.axis4.r3Motor.emf.p.v;
//   robot.axis4.r3Motor.Ra.n.i + robot.axis4.r3Motor.La.p.i = 0.0;
//   robot.axis4.r3Motor.Ra.n.v = robot.axis4.r3Motor.La.p.v;
//   robot.axis4.r3Motor.Vs.n.i + robot.axis4.r3Motor.g1.p.i = 0.0;
//   robot.axis4.r3Motor.Vs.n.v = robot.axis4.r3Motor.g1.p.v;
//   robot.axis4.r3Motor.Vs.p.i + robot.axis4.r3Motor.Rd2.p.i = 0.0;
//   robot.axis4.r3Motor.Vs.p.v = robot.axis4.r3Motor.Rd2.p.v;
//   robot.axis4.r3Motor.g2.p.i + robot.axis4.r3Motor.hall2.n.i = 0.0;
//   robot.axis4.r3Motor.g2.p.v = robot.axis4.r3Motor.hall2.n.v;
//   robot.axis4.r3Motor.hall1.n.i + robot.axis4.r3Motor.g4.p.i = 0.0;
//   robot.axis4.r3Motor.hall1.n.v = robot.axis4.r3Motor.g4.p.v;
//   robot.axis4.r3Motor.emf.n.i + robot.axis4.r3Motor.hall1.p.i = 0.0;
//   robot.axis4.r3Motor.emf.n.v = robot.axis4.r3Motor.hall1.p.v;
//   robot.axis4.r3Motor.hall1.i = robot.axis4.r3Motor.hall2.v;
//   robot.axis4.r3Motor.Rd3.n.i + (robot.axis4.r3Motor.diff.p1.i + robot.axis4.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis4.r3Motor.Rd3.n.v = robot.axis4.r3Motor.diff.p1.v;
//   robot.axis4.r3Motor.diff.p1.v = robot.axis4.r3Motor.Rd4.p.v;
//   robot.axis4.r3Motor.Rd3.p.i + robot.axis4.r3Motor.hall2.p.i = 0.0;
//   robot.axis4.r3Motor.Rd3.p.v = robot.axis4.r3Motor.hall2.p.v;
//   robot.axis4.r3Motor.Vs.v = robot.axis4.r3Motor.i_ref;
//   robot.axis4.r3Motor.g5.p.i + robot.axis4.r3Motor.Rp2.n.i = 0.0;
//   robot.axis4.r3Motor.g5.p.v = robot.axis4.r3Motor.Rp2.n.v;
//   robot.axis4.r3Motor.phi.phi = robot.axis4.r3Motor.outPort_phi;
//   robot.axis4.r3Motor.w.w = robot.axis4.r3Motor.outPort_w;
//   der(robot.axis4.r3Control.rate2.x[1]) = robot.axis4.r3Control.rate2.x1dot;
//   robot.axis4.r3Control.rate2.xn = robot.axis4.r3Control.rate2.x[1];
//   robot.axis4.r3Control.rate2.u = robot.axis4.r3Control.rate2.a[1] * robot.axis4.r3Control.rate2.x1dot + robot.axis4.r3Control.rate2.a[2] * robot.axis4.r3Control.rate2.x[1];
//   robot.axis4.r3Control.rate2.y = robot.axis4.r3Control.rate2.b[1] * robot.axis4.r3Control.rate2.x1dot + robot.axis4.r3Control.rate2.b[2] * robot.axis4.r3Control.rate2.x[1];
//   der(robot.axis4.r3Control.rate3.y) = robot.axis4.r3Control.rate3.k * robot.axis4.r3Control.rate3.u;
//   der(robot.axis4.r3Control.rate1.x[1]) = robot.axis4.r3Control.rate1.x1dot;
//   robot.axis4.r3Control.rate1.xn = robot.axis4.r3Control.rate1.x[1];
//   robot.axis4.r3Control.rate1.u = robot.axis4.r3Control.rate1.a[1] * robot.axis4.r3Control.rate1.x1dot + robot.axis4.r3Control.rate1.a[2] * robot.axis4.r3Control.rate1.x[1];
//   robot.axis4.r3Control.rate1.y = robot.axis4.r3Control.rate1.b[1] * robot.axis4.r3Control.rate1.x1dot + robot.axis4.r3Control.rate1.b[2] * robot.axis4.r3Control.rate1.x[1];
//   der(robot.axis4.r3Control.tacho1.y) = (robot.axis4.r3Control.tacho1.k * robot.axis4.r3Control.tacho1.u - robot.axis4.r3Control.tacho1.y) / robot.axis4.r3Control.tacho1.T;
//   robot.axis4.r3Control.Kd.y = robot.axis4.r3Control.Kd.k * robot.axis4.r3Control.Kd.u;
//   robot.axis4.r3Control.wSum.y = robot.axis4.r3Control.wSum.u1 - robot.axis4.r3Control.wSum.u2;
//   robot.axis4.r3Control.sum.y = robot.axis4.r3Control.sum.k1 * robot.axis4.r3Control.sum.u1 + robot.axis4.r3Control.sum.k2 * robot.axis4.r3Control.sum.u2;
//   robot.axis4.r3Control.pSum.y = robot.axis4.r3Control.pSum.u1 - robot.axis4.r3Control.pSum.u2;
//   robot.axis4.r3Control.Kv.y = robot.axis4.r3Control.Kv.k * robot.axis4.r3Control.Kv.u;
//   der(robot.axis4.r3Control.tacho2.x[1]) = robot.axis4.r3Control.tacho2.x1dot;
//   der(robot.axis4.r3Control.tacho2.x[2]) = robot.axis4.r3Control.tacho2.x[1];
//   robot.axis4.r3Control.tacho2.xn = robot.axis4.r3Control.tacho2.x[2];
//   robot.axis4.r3Control.tacho2.u = robot.axis4.r3Control.tacho2.a[1] * robot.axis4.r3Control.tacho2.x1dot + (robot.axis4.r3Control.tacho2.a[2] * robot.axis4.r3Control.tacho2.x[1] + robot.axis4.r3Control.tacho2.a[3] * robot.axis4.r3Control.tacho2.x[2]);
//   robot.axis4.r3Control.tacho2.y = robot.axis4.r3Control.tacho2.b[1] * robot.axis4.r3Control.tacho2.x[2];
//   robot.axis4.r3Control.rate2.y = robot.axis4.r3Control.rate3.u;
//   robot.axis4.r3Control.wSum.y = robot.axis4.r3Control.rate2.u;
//   robot.axis4.r3Control.sum.y = robot.axis4.r3Control.wSum.u1;
//   robot.axis4.r3Control.Kd.y = robot.axis4.r3Control.sum.u1;
//   robot.axis4.r3Control.rate3.y = robot.axis4.r3Control.i_ref;
//   robot.axis4.r3Control.rate1.y = robot.axis4.r3Control.wSum.u2;
//   robot.axis4.r3Control.Kv.u = robot.axis4.r3Control.pSum.y;
//   robot.axis4.r3Control.tacho1.y = robot.axis4.r3Control.tacho2.u;
//   robot.axis4.r3Control.tacho2.y = robot.axis4.r3Control.rate1.u;
//   robot.axis4.r3Control.Kv.y = robot.axis4.r3Control.sum.u2;
//   robot.axis4.r3Control.Kd.u = robot.axis4.r3Control.w_ref;
//   robot.axis4.r3Control.pSum.u1 = robot.axis4.r3Control.phi_ref;
//   robot.axis4.r3Control.pSum.u2 = robot.axis4.r3Control.phi;
//   robot.axis4.r3Control.tacho1.u = robot.axis4.r3Control.w;
//   der(robot.axis4.integrator1.y) = robot.axis4.integrator1.k * robot.axis4.integrator1.u;
//   der(robot.axis4.integrator2.y) = robot.axis4.integrator2.k * robot.axis4.integrator2.u;
//   robot.axis4.k2.y = robot.axis4.k2.k * robot.axis4.k2.u;
//   robot.axis4.k1.y = robot.axis4.k1.k * robot.axis4.k1.u;
//   robot.axis4.states.w = der(robot.axis4.states.phi);
//   robot.axis4.states.a = der(robot.axis4.states.w);
//   robot.axis4.states.J * robot.axis4.states.a = robot.axis4.states.flange_a.tau + robot.axis4.states.flange_b.tau;
//   robot.axis4.states.flange_a.phi = robot.axis4.states.phi;
//   robot.axis4.states.flange_b.phi = robot.axis4.states.phi;
//   robot.axis4.a_ref = robot.axis4.inPort_a_ref;
//   robot.axis4.w_ref = robot.axis4.integrator1.y;
//   robot.axis4.phi_ref = robot.axis4.integrator2.y;
//   robot.axis4.integrator1.y = robot.axis4.k2.u;
//   robot.axis4.k2.u = robot.axis4.integrator2.u;
//   robot.axis4.r3Control.i_ref = robot.axis4.r3Motor.i_ref;
//   robot.axis4.r3Motor.flange_motor.tau + robot.axis4.r3Gear2.flange_a.tau = 0.0;
//   robot.axis4.r3Motor.flange_motor.phi = robot.axis4.r3Gear2.flange_a.phi;
//   robot.axis4.k1.y = robot.axis4.r3Control.phi_ref;
//   robot.axis4.integrator2.y = robot.axis4.k1.u;
//   robot.axis4.r3Motor.outPort_w = robot.axis4.r3Control.w;
//   robot.axis4.r3Motor.outPort_phi = robot.axis4.r3Control.phi;
//   robot.axis4.k2.y = robot.axis4.r3Control.w_ref;
//   robot.axis4.integrator1.u = robot.axis4.inPort_a_ref;
//   robot.axis4.r3Gear2.flange_b.tau + robot.axis4.states.flange_a.tau = 0.0;
//   robot.axis4.r3Gear2.flange_b.phi = robot.axis4.states.flange_a.phi;
//   robot.axis4.states.flange_b.tau + (-robot.axis4.flange.tau) = 0.0;
//   robot.axis4.states.flange_b.phi = robot.axis4.flange.phi;
//   robot.axis5.r3Gear2.Jmotor.w = der(robot.axis5.r3Gear2.Jmotor.phi);
//   robot.axis5.r3Gear2.Jmotor.a = der(robot.axis5.r3Gear2.Jmotor.w);
//   robot.axis5.r3Gear2.Jmotor.J * robot.axis5.r3Gear2.Jmotor.a = robot.axis5.r3Gear2.Jmotor.flange_a.tau + robot.axis5.r3Gear2.Jmotor.flange_b.tau;
//   robot.axis5.r3Gear2.Jmotor.flange_a.phi = robot.axis5.r3Gear2.Jmotor.phi;
//   robot.axis5.r3Gear2.Jmotor.flange_b.phi = robot.axis5.r3Gear2.Jmotor.phi;
//   robot.axis5.r3Gear2.gear.phi_a = robot.axis5.r3Gear2.gear.ratio * robot.axis5.r3Gear2.gear.phi_b;
//   0.0 = robot.axis5.r3Gear2.gear.ratio * robot.axis5.r3Gear2.gear.flange_a.tau + robot.axis5.r3Gear2.gear.flange_b.tau;
//   robot.axis5.r3Gear2.gear.bearing.phi = 0.0;
//   0.0 = robot.axis5.r3Gear2.gear.flange_a.tau + (robot.axis5.r3Gear2.gear.flange_b.tau + robot.axis5.r3Gear2.gear.tau_support);
//   robot.axis5.r3Gear2.gear.phi_a = robot.axis5.r3Gear2.gear.flange_a.phi - robot.axis5.r3Gear2.gear.bearing.phi;
//   robot.axis5.r3Gear2.gear.phi_b = robot.axis5.r3Gear2.gear.flange_b.phi - robot.axis5.r3Gear2.gear.bearing.phi;
//   robot.axis5.r3Gear2.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis5.r3Gear2.bearingFriction.tau0_max = robot.axis5.r3Gear2.bearingFriction.peak * robot.axis5.r3Gear2.bearingFriction.tau0;
//   robot.axis5.r3Gear2.bearingFriction.free = false;
//   robot.axis5.r3Gear2.bearingFriction.phi = robot.axis5.r3Gear2.bearingFriction.phi_a;
//   robot.axis5.r3Gear2.bearingFriction.phi = robot.axis5.r3Gear2.bearingFriction.phi_b;
//   robot.axis5.r3Gear2.bearingFriction.w = der(robot.axis5.r3Gear2.bearingFriction.phi);
//   robot.axis5.r3Gear2.bearingFriction.a = der(robot.axis5.r3Gear2.bearingFriction.w);
//   robot.axis5.r3Gear2.bearingFriction.w_relfric = robot.axis5.r3Gear2.bearingFriction.w;
//   robot.axis5.r3Gear2.bearingFriction.a_relfric = robot.axis5.r3Gear2.bearingFriction.a;
//   0.0 = robot.axis5.r3Gear2.bearingFriction.flange_a.tau + robot.axis5.r3Gear2.bearingFriction.flange_b.tau - robot.axis5.r3Gear2.bearingFriction.tau;
//   robot.axis5.r3Gear2.bearingFriction.tau = if robot.axis5.r3Gear2.bearingFriction.locked then robot.axis5.r3Gear2.bearingFriction.sa * robot.axis5.r3Gear2.bearingFriction.unitTorque else if robot.axis5.r3Gear2.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis5.r3Gear2.bearingFriction.w,{{robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if robot.axis5.r3Gear2.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis5.r3Gear2.bearingFriction.w,{{robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis5.r3Gear2.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis5.r3Gear2.bearingFriction.w,{{robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis5.r3Gear2.bearingFriction.w,{{robot.axis5.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis5.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis5.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis5.r3Gear2.bearingFriction.phi_b = robot.axis5.r3Gear2.bearingFriction.flange_b.phi - robot.axis5.r3Gear2.bearingFriction.bearing.phi;
//   robot.axis5.r3Gear2.bearingFriction.phi_a = robot.axis5.r3Gear2.bearingFriction.flange_a.phi - robot.axis5.r3Gear2.bearingFriction.bearing.phi;
//   0.0 = robot.axis5.r3Gear2.bearingFriction.flange_a.tau + (robot.axis5.r3Gear2.bearingFriction.flange_b.tau + robot.axis5.r3Gear2.bearingFriction.tau_support);
//   robot.axis5.r3Gear2.bearingFriction.bearing.phi = 0.0;
//   robot.axis5.r3Gear2.bearingFriction.startForward = pre(robot.axis5.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis5.r3Gear2.bearingFriction.sa > robot.axis5.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis5.r3Gear2.bearingFriction.startForward) AND robot.axis5.r3Gear2.bearingFriction.sa > robot.axis5.r3Gear2.bearingFriction.tau0) OR pre(robot.axis5.r3Gear2.bearingFriction.mode) == -1 AND robot.axis5.r3Gear2.bearingFriction.w_relfric > robot.axis5.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis5.r3Gear2.bearingFriction.w_relfric > 0.0;
//   robot.axis5.r3Gear2.bearingFriction.startBackward = pre(robot.axis5.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis5.r3Gear2.bearingFriction.sa < -robot.axis5.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis5.r3Gear2.bearingFriction.startBackward) AND robot.axis5.r3Gear2.bearingFriction.sa < -robot.axis5.r3Gear2.bearingFriction.tau0) OR pre(robot.axis5.r3Gear2.bearingFriction.mode) == 1 AND robot.axis5.r3Gear2.bearingFriction.w_relfric < -robot.axis5.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis5.r3Gear2.bearingFriction.w_relfric < 0.0;
//   robot.axis5.r3Gear2.bearingFriction.locked =  NOT robot.axis5.r3Gear2.bearingFriction.free AND  NOT (pre(robot.axis5.r3Gear2.bearingFriction.mode) == 1 OR robot.axis5.r3Gear2.bearingFriction.startForward OR pre(robot.axis5.r3Gear2.bearingFriction.mode) == -1 OR robot.axis5.r3Gear2.bearingFriction.startBackward);
//   robot.axis5.r3Gear2.bearingFriction.a_relfric = robot.axis5.r3Gear2.bearingFriction.unitAngularAcceleration * (if robot.axis5.r3Gear2.bearingFriction.locked then 0.0 else if robot.axis5.r3Gear2.bearingFriction.free then robot.axis5.r3Gear2.bearingFriction.sa else if robot.axis5.r3Gear2.bearingFriction.startForward then robot.axis5.r3Gear2.bearingFriction.sa - robot.axis5.r3Gear2.bearingFriction.tau0_max / robot.axis5.r3Gear2.bearingFriction.unitTorque else if robot.axis5.r3Gear2.bearingFriction.startBackward then robot.axis5.r3Gear2.bearingFriction.sa + robot.axis5.r3Gear2.bearingFriction.tau0_max / robot.axis5.r3Gear2.bearingFriction.unitTorque else if pre(robot.axis5.r3Gear2.bearingFriction.mode) == 1 then robot.axis5.r3Gear2.bearingFriction.sa - robot.axis5.r3Gear2.bearingFriction.tau0 / robot.axis5.r3Gear2.bearingFriction.unitTorque else robot.axis5.r3Gear2.bearingFriction.sa + robot.axis5.r3Gear2.bearingFriction.tau0 / robot.axis5.r3Gear2.bearingFriction.unitTorque);
//   robot.axis5.r3Gear2.bearingFriction.mode = if robot.axis5.r3Gear2.bearingFriction.free then 2 else if (pre(robot.axis5.r3Gear2.bearingFriction.mode) == 1 OR pre(robot.axis5.r3Gear2.bearingFriction.mode) == 2 OR robot.axis5.r3Gear2.bearingFriction.startForward) AND robot.axis5.r3Gear2.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis5.r3Gear2.bearingFriction.mode) == -1 OR pre(robot.axis5.r3Gear2.bearingFriction.mode) == 2 OR robot.axis5.r3Gear2.bearingFriction.startBackward) AND robot.axis5.r3Gear2.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis5.r3Gear2.Jmotor.flange_a.tau + (-robot.axis5.r3Gear2.flange_a.tau) = 0.0;
//   robot.axis5.r3Gear2.Jmotor.flange_a.phi = robot.axis5.r3Gear2.flange_a.phi;
//   robot.axis5.r3Gear2.gear.flange_b.tau + robot.axis5.r3Gear2.bearingFriction.flange_a.tau = 0.0;
//   robot.axis5.r3Gear2.gear.flange_b.phi = robot.axis5.r3Gear2.bearingFriction.flange_a.phi;
//   robot.axis5.r3Gear2.bearingFriction.flange_b.tau + (-robot.axis5.r3Gear2.flange_b.tau) = 0.0;
//   robot.axis5.r3Gear2.bearingFriction.flange_b.phi = robot.axis5.r3Gear2.flange_b.phi;
//   robot.axis5.r3Gear2.Jmotor.flange_b.tau + robot.axis5.r3Gear2.gear.flange_a.tau = 0.0;
//   robot.axis5.r3Gear2.Jmotor.flange_b.phi = robot.axis5.r3Gear2.gear.flange_a.phi;
//   robot.axis5.r3Gear2.bearingFriction.bearing.tau = 0.0;
//   robot.axis5.r3Gear2.gear.bearing.tau = 0.0;
//   robot.axis5.r3Motor.Vs.v = robot.axis5.r3Motor.Vs.p.v - robot.axis5.r3Motor.Vs.n.v;
//   0.0 = robot.axis5.r3Motor.Vs.p.i + robot.axis5.r3Motor.Vs.n.i;
//   robot.axis5.r3Motor.Vs.i = robot.axis5.r3Motor.Vs.p.i;
//   robot.axis5.r3Motor.diff.v1 = robot.axis5.r3Motor.diff.p1.v - robot.axis5.r3Motor.diff.n1.v;
//   robot.axis5.r3Motor.diff.v2 = robot.axis5.r3Motor.diff.p2.v - robot.axis5.r3Motor.diff.n2.v;
//   0.0 = robot.axis5.r3Motor.diff.p1.i + robot.axis5.r3Motor.diff.n1.i;
//   0.0 = robot.axis5.r3Motor.diff.p2.i + robot.axis5.r3Motor.diff.n2.i;
//   robot.axis5.r3Motor.diff.i1 = robot.axis5.r3Motor.diff.p1.i;
//   robot.axis5.r3Motor.diff.i2 = robot.axis5.r3Motor.diff.p2.i;
//   robot.axis5.r3Motor.diff.v1 = 0.0;
//   robot.axis5.r3Motor.diff.i1 = 0.0;
//   robot.axis5.r3Motor.power.v1 = robot.axis5.r3Motor.power.p1.v - robot.axis5.r3Motor.power.n1.v;
//   robot.axis5.r3Motor.power.v2 = robot.axis5.r3Motor.power.p2.v - robot.axis5.r3Motor.power.n2.v;
//   0.0 = robot.axis5.r3Motor.power.p1.i + robot.axis5.r3Motor.power.n1.i;
//   0.0 = robot.axis5.r3Motor.power.p2.i + robot.axis5.r3Motor.power.n2.i;
//   robot.axis5.r3Motor.power.i1 = robot.axis5.r3Motor.power.p1.i;
//   robot.axis5.r3Motor.power.i2 = robot.axis5.r3Motor.power.p2.i;
//   robot.axis5.r3Motor.power.v1 = 0.0;
//   robot.axis5.r3Motor.power.i1 = 0.0;
//   robot.axis5.r3Motor.emf.v = robot.axis5.r3Motor.emf.p.v - robot.axis5.r3Motor.emf.n.v;
//   0.0 = robot.axis5.r3Motor.emf.p.i + robot.axis5.r3Motor.emf.n.i;
//   robot.axis5.r3Motor.emf.i = robot.axis5.r3Motor.emf.p.i;
//   robot.axis5.r3Motor.emf.w = der(robot.axis5.r3Motor.emf.flange_b.phi);
//   robot.axis5.r3Motor.emf.k * robot.axis5.r3Motor.emf.w = robot.axis5.r3Motor.emf.v;
//   robot.axis5.r3Motor.emf.flange_b.tau = (-robot.axis5.r3Motor.emf.k) * robot.axis5.r3Motor.emf.i;
//   robot.axis5.r3Motor.La.L * der(robot.axis5.r3Motor.La.i) = robot.axis5.r3Motor.La.v;
//   robot.axis5.r3Motor.La.v = robot.axis5.r3Motor.La.p.v - robot.axis5.r3Motor.La.n.v;
//   0.0 = robot.axis5.r3Motor.La.p.i + robot.axis5.r3Motor.La.n.i;
//   robot.axis5.r3Motor.La.i = robot.axis5.r3Motor.La.p.i;
//   robot.axis5.r3Motor.Ra.R * robot.axis5.r3Motor.Ra.i = robot.axis5.r3Motor.Ra.v;
//   robot.axis5.r3Motor.Ra.v = robot.axis5.r3Motor.Ra.p.v - robot.axis5.r3Motor.Ra.n.v;
//   0.0 = robot.axis5.r3Motor.Ra.p.i + robot.axis5.r3Motor.Ra.n.i;
//   robot.axis5.r3Motor.Ra.i = robot.axis5.r3Motor.Ra.p.i;
//   robot.axis5.r3Motor.Rd2.R * robot.axis5.r3Motor.Rd2.i = robot.axis5.r3Motor.Rd2.v;
//   robot.axis5.r3Motor.Rd2.v = robot.axis5.r3Motor.Rd2.p.v - robot.axis5.r3Motor.Rd2.n.v;
//   0.0 = robot.axis5.r3Motor.Rd2.p.i + robot.axis5.r3Motor.Rd2.n.i;
//   robot.axis5.r3Motor.Rd2.i = robot.axis5.r3Motor.Rd2.p.i;
//   robot.axis5.r3Motor.C.i = robot.axis5.r3Motor.C.C * der(robot.axis5.r3Motor.C.v);
//   robot.axis5.r3Motor.C.v = robot.axis5.r3Motor.C.p.v - robot.axis5.r3Motor.C.n.v;
//   0.0 = robot.axis5.r3Motor.C.p.i + robot.axis5.r3Motor.C.n.i;
//   robot.axis5.r3Motor.C.i = robot.axis5.r3Motor.C.p.i;
//   robot.axis5.r3Motor.OpI.v1 = robot.axis5.r3Motor.OpI.p1.v - robot.axis5.r3Motor.OpI.n1.v;
//   robot.axis5.r3Motor.OpI.v2 = robot.axis5.r3Motor.OpI.p2.v - robot.axis5.r3Motor.OpI.n2.v;
//   0.0 = robot.axis5.r3Motor.OpI.p1.i + robot.axis5.r3Motor.OpI.n1.i;
//   0.0 = robot.axis5.r3Motor.OpI.p2.i + robot.axis5.r3Motor.OpI.n2.i;
//   robot.axis5.r3Motor.OpI.i1 = robot.axis5.r3Motor.OpI.p1.i;
//   robot.axis5.r3Motor.OpI.i2 = robot.axis5.r3Motor.OpI.p2.i;
//   robot.axis5.r3Motor.OpI.v1 = 0.0;
//   robot.axis5.r3Motor.OpI.i1 = 0.0;
//   robot.axis5.r3Motor.Rd1.R * robot.axis5.r3Motor.Rd1.i = robot.axis5.r3Motor.Rd1.v;
//   robot.axis5.r3Motor.Rd1.v = robot.axis5.r3Motor.Rd1.p.v - robot.axis5.r3Motor.Rd1.n.v;
//   0.0 = robot.axis5.r3Motor.Rd1.p.i + robot.axis5.r3Motor.Rd1.n.i;
//   robot.axis5.r3Motor.Rd1.i = robot.axis5.r3Motor.Rd1.p.i;
//   robot.axis5.r3Motor.Ri.R * robot.axis5.r3Motor.Ri.i = robot.axis5.r3Motor.Ri.v;
//   robot.axis5.r3Motor.Ri.v = robot.axis5.r3Motor.Ri.p.v - robot.axis5.r3Motor.Ri.n.v;
//   0.0 = robot.axis5.r3Motor.Ri.p.i + robot.axis5.r3Motor.Ri.n.i;
//   robot.axis5.r3Motor.Ri.i = robot.axis5.r3Motor.Ri.p.i;
//   robot.axis5.r3Motor.Rp1.R * robot.axis5.r3Motor.Rp1.i = robot.axis5.r3Motor.Rp1.v;
//   robot.axis5.r3Motor.Rp1.v = robot.axis5.r3Motor.Rp1.p.v - robot.axis5.r3Motor.Rp1.n.v;
//   0.0 = robot.axis5.r3Motor.Rp1.p.i + robot.axis5.r3Motor.Rp1.n.i;
//   robot.axis5.r3Motor.Rp1.i = robot.axis5.r3Motor.Rp1.p.i;
//   robot.axis5.r3Motor.Rp2.R * robot.axis5.r3Motor.Rp2.i = robot.axis5.r3Motor.Rp2.v;
//   robot.axis5.r3Motor.Rp2.v = robot.axis5.r3Motor.Rp2.p.v - robot.axis5.r3Motor.Rp2.n.v;
//   0.0 = robot.axis5.r3Motor.Rp2.p.i + robot.axis5.r3Motor.Rp2.n.i;
//   robot.axis5.r3Motor.Rp2.i = robot.axis5.r3Motor.Rp2.p.i;
//   robot.axis5.r3Motor.Rd4.R * robot.axis5.r3Motor.Rd4.i = robot.axis5.r3Motor.Rd4.v;
//   robot.axis5.r3Motor.Rd4.v = robot.axis5.r3Motor.Rd4.p.v - robot.axis5.r3Motor.Rd4.n.v;
//   0.0 = robot.axis5.r3Motor.Rd4.p.i + robot.axis5.r3Motor.Rd4.n.i;
//   robot.axis5.r3Motor.Rd4.i = robot.axis5.r3Motor.Rd4.p.i;
//   robot.axis5.r3Motor.hall2.v = robot.axis5.r3Motor.hall2.p.v - robot.axis5.r3Motor.hall2.n.v;
//   0.0 = robot.axis5.r3Motor.hall2.p.i + robot.axis5.r3Motor.hall2.n.i;
//   robot.axis5.r3Motor.hall2.i = robot.axis5.r3Motor.hall2.p.i;
//   robot.axis5.r3Motor.Rd3.R * robot.axis5.r3Motor.Rd3.i = robot.axis5.r3Motor.Rd3.v;
//   robot.axis5.r3Motor.Rd3.v = robot.axis5.r3Motor.Rd3.p.v - robot.axis5.r3Motor.Rd3.n.v;
//   0.0 = robot.axis5.r3Motor.Rd3.p.i + robot.axis5.r3Motor.Rd3.n.i;
//   robot.axis5.r3Motor.Rd3.i = robot.axis5.r3Motor.Rd3.p.i;
//   robot.axis5.r3Motor.g1.p.v = 0.0;
//   robot.axis5.r3Motor.g2.p.v = 0.0;
//   robot.axis5.r3Motor.g3.p.v = 0.0;
//   robot.axis5.r3Motor.hall1.p.v = robot.axis5.r3Motor.hall1.n.v;
//   robot.axis5.r3Motor.hall1.p.i = robot.axis5.r3Motor.hall1.i;
//   robot.axis5.r3Motor.hall1.n.i = -robot.axis5.r3Motor.hall1.i;
//   robot.axis5.r3Motor.g4.p.v = 0.0;
//   robot.axis5.r3Motor.g5.p.v = 0.0;
//   robot.axis5.r3Motor.phi.phi = robot.axis5.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis5.r3Motor.phi.flange_a.tau;
//   robot.axis5.r3Motor.w.w = der(robot.axis5.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis5.r3Motor.w.flange_a.tau;
//   robot.axis5.r3Motor.Rd2.n.i + (robot.axis5.r3Motor.diff.n1.i + robot.axis5.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis5.r3Motor.Rd2.n.v = robot.axis5.r3Motor.diff.n1.v;
//   robot.axis5.r3Motor.diff.n1.v = robot.axis5.r3Motor.Rd1.p.v;
//   robot.axis5.r3Motor.C.n.i + (robot.axis5.r3Motor.OpI.p2.i + robot.axis5.r3Motor.power.p1.i) = 0.0;
//   robot.axis5.r3Motor.C.n.v = robot.axis5.r3Motor.OpI.p2.v;
//   robot.axis5.r3Motor.OpI.p2.v = robot.axis5.r3Motor.power.p1.v;
//   robot.axis5.r3Motor.Rd1.n.i + (robot.axis5.r3Motor.diff.p2.i + robot.axis5.r3Motor.Ri.p.i) = 0.0;
//   robot.axis5.r3Motor.Rd1.n.v = robot.axis5.r3Motor.diff.p2.v;
//   robot.axis5.r3Motor.diff.p2.v = robot.axis5.r3Motor.Ri.p.v;
//   robot.axis5.r3Motor.Ri.n.i + (robot.axis5.r3Motor.OpI.n1.i + robot.axis5.r3Motor.C.p.i) = 0.0;
//   robot.axis5.r3Motor.Ri.n.v = robot.axis5.r3Motor.OpI.n1.v;
//   robot.axis5.r3Motor.OpI.n1.v = robot.axis5.r3Motor.C.p.v;
//   robot.axis5.r3Motor.power.n1.i + (robot.axis5.r3Motor.Rp1.p.i + robot.axis5.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis5.r3Motor.power.n1.v = robot.axis5.r3Motor.Rp1.p.v;
//   robot.axis5.r3Motor.Rp1.p.v = robot.axis5.r3Motor.Rp2.p.v;
//   robot.axis5.r3Motor.power.p2.i + (robot.axis5.r3Motor.Ra.p.i + robot.axis5.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis5.r3Motor.power.p2.v = robot.axis5.r3Motor.Ra.p.v;
//   robot.axis5.r3Motor.Ra.p.v = robot.axis5.r3Motor.Rp1.n.v;
//   robot.axis5.r3Motor.Rd4.n.i + (robot.axis5.r3Motor.g3.p.i + (robot.axis5.r3Motor.OpI.p1.i + (robot.axis5.r3Motor.diff.n2.i + (robot.axis5.r3Motor.OpI.n2.i + robot.axis5.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis5.r3Motor.Rd4.n.v = robot.axis5.r3Motor.g3.p.v;
//   robot.axis5.r3Motor.g3.p.v = robot.axis5.r3Motor.OpI.p1.v;
//   robot.axis5.r3Motor.OpI.p1.v = robot.axis5.r3Motor.diff.n2.v;
//   robot.axis5.r3Motor.diff.n2.v = robot.axis5.r3Motor.OpI.n2.v;
//   robot.axis5.r3Motor.OpI.n2.v = robot.axis5.r3Motor.power.n2.v;
//   (-robot.axis5.r3Motor.flange_motor.tau) + (robot.axis5.r3Motor.emf.flange_b.tau + (robot.axis5.r3Motor.phi.flange_a.tau + robot.axis5.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis5.r3Motor.flange_motor.phi = robot.axis5.r3Motor.emf.flange_b.phi;
//   robot.axis5.r3Motor.emf.flange_b.phi = robot.axis5.r3Motor.phi.flange_a.phi;
//   robot.axis5.r3Motor.phi.flange_a.phi = robot.axis5.r3Motor.w.flange_a.phi;
//   robot.axis5.r3Motor.La.n.i + robot.axis5.r3Motor.emf.p.i = 0.0;
//   robot.axis5.r3Motor.La.n.v = robot.axis5.r3Motor.emf.p.v;
//   robot.axis5.r3Motor.Ra.n.i + robot.axis5.r3Motor.La.p.i = 0.0;
//   robot.axis5.r3Motor.Ra.n.v = robot.axis5.r3Motor.La.p.v;
//   robot.axis5.r3Motor.Vs.n.i + robot.axis5.r3Motor.g1.p.i = 0.0;
//   robot.axis5.r3Motor.Vs.n.v = robot.axis5.r3Motor.g1.p.v;
//   robot.axis5.r3Motor.Vs.p.i + robot.axis5.r3Motor.Rd2.p.i = 0.0;
//   robot.axis5.r3Motor.Vs.p.v = robot.axis5.r3Motor.Rd2.p.v;
//   robot.axis5.r3Motor.g2.p.i + robot.axis5.r3Motor.hall2.n.i = 0.0;
//   robot.axis5.r3Motor.g2.p.v = robot.axis5.r3Motor.hall2.n.v;
//   robot.axis5.r3Motor.hall1.n.i + robot.axis5.r3Motor.g4.p.i = 0.0;
//   robot.axis5.r3Motor.hall1.n.v = robot.axis5.r3Motor.g4.p.v;
//   robot.axis5.r3Motor.emf.n.i + robot.axis5.r3Motor.hall1.p.i = 0.0;
//   robot.axis5.r3Motor.emf.n.v = robot.axis5.r3Motor.hall1.p.v;
//   robot.axis5.r3Motor.hall1.i = robot.axis5.r3Motor.hall2.v;
//   robot.axis5.r3Motor.Rd3.n.i + (robot.axis5.r3Motor.diff.p1.i + robot.axis5.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis5.r3Motor.Rd3.n.v = robot.axis5.r3Motor.diff.p1.v;
//   robot.axis5.r3Motor.diff.p1.v = robot.axis5.r3Motor.Rd4.p.v;
//   robot.axis5.r3Motor.Rd3.p.i + robot.axis5.r3Motor.hall2.p.i = 0.0;
//   robot.axis5.r3Motor.Rd3.p.v = robot.axis5.r3Motor.hall2.p.v;
//   robot.axis5.r3Motor.Vs.v = robot.axis5.r3Motor.i_ref;
//   robot.axis5.r3Motor.g5.p.i + robot.axis5.r3Motor.Rp2.n.i = 0.0;
//   robot.axis5.r3Motor.g5.p.v = robot.axis5.r3Motor.Rp2.n.v;
//   robot.axis5.r3Motor.phi.phi = robot.axis5.r3Motor.outPort_phi;
//   robot.axis5.r3Motor.w.w = robot.axis5.r3Motor.outPort_w;
//   der(robot.axis5.r3Control.rate2.x[1]) = robot.axis5.r3Control.rate2.x1dot;
//   robot.axis5.r3Control.rate2.xn = robot.axis5.r3Control.rate2.x[1];
//   robot.axis5.r3Control.rate2.u = robot.axis5.r3Control.rate2.a[1] * robot.axis5.r3Control.rate2.x1dot + robot.axis5.r3Control.rate2.a[2] * robot.axis5.r3Control.rate2.x[1];
//   robot.axis5.r3Control.rate2.y = robot.axis5.r3Control.rate2.b[1] * robot.axis5.r3Control.rate2.x1dot + robot.axis5.r3Control.rate2.b[2] * robot.axis5.r3Control.rate2.x[1];
//   der(robot.axis5.r3Control.rate3.y) = robot.axis5.r3Control.rate3.k * robot.axis5.r3Control.rate3.u;
//   der(robot.axis5.r3Control.rate1.x[1]) = robot.axis5.r3Control.rate1.x1dot;
//   robot.axis5.r3Control.rate1.xn = robot.axis5.r3Control.rate1.x[1];
//   robot.axis5.r3Control.rate1.u = robot.axis5.r3Control.rate1.a[1] * robot.axis5.r3Control.rate1.x1dot + robot.axis5.r3Control.rate1.a[2] * robot.axis5.r3Control.rate1.x[1];
//   robot.axis5.r3Control.rate1.y = robot.axis5.r3Control.rate1.b[1] * robot.axis5.r3Control.rate1.x1dot + robot.axis5.r3Control.rate1.b[2] * robot.axis5.r3Control.rate1.x[1];
//   der(robot.axis5.r3Control.tacho1.y) = (robot.axis5.r3Control.tacho1.k * robot.axis5.r3Control.tacho1.u - robot.axis5.r3Control.tacho1.y) / robot.axis5.r3Control.tacho1.T;
//   robot.axis5.r3Control.Kd.y = robot.axis5.r3Control.Kd.k * robot.axis5.r3Control.Kd.u;
//   robot.axis5.r3Control.wSum.y = robot.axis5.r3Control.wSum.u1 - robot.axis5.r3Control.wSum.u2;
//   robot.axis5.r3Control.sum.y = robot.axis5.r3Control.sum.k1 * robot.axis5.r3Control.sum.u1 + robot.axis5.r3Control.sum.k2 * robot.axis5.r3Control.sum.u2;
//   robot.axis5.r3Control.pSum.y = robot.axis5.r3Control.pSum.u1 - robot.axis5.r3Control.pSum.u2;
//   robot.axis5.r3Control.Kv.y = robot.axis5.r3Control.Kv.k * robot.axis5.r3Control.Kv.u;
//   der(robot.axis5.r3Control.tacho2.x[1]) = robot.axis5.r3Control.tacho2.x1dot;
//   der(robot.axis5.r3Control.tacho2.x[2]) = robot.axis5.r3Control.tacho2.x[1];
//   robot.axis5.r3Control.tacho2.xn = robot.axis5.r3Control.tacho2.x[2];
//   robot.axis5.r3Control.tacho2.u = robot.axis5.r3Control.tacho2.a[1] * robot.axis5.r3Control.tacho2.x1dot + (robot.axis5.r3Control.tacho2.a[2] * robot.axis5.r3Control.tacho2.x[1] + robot.axis5.r3Control.tacho2.a[3] * robot.axis5.r3Control.tacho2.x[2]);
//   robot.axis5.r3Control.tacho2.y = robot.axis5.r3Control.tacho2.b[1] * robot.axis5.r3Control.tacho2.x[2];
//   robot.axis5.r3Control.rate2.y = robot.axis5.r3Control.rate3.u;
//   robot.axis5.r3Control.wSum.y = robot.axis5.r3Control.rate2.u;
//   robot.axis5.r3Control.sum.y = robot.axis5.r3Control.wSum.u1;
//   robot.axis5.r3Control.Kd.y = robot.axis5.r3Control.sum.u1;
//   robot.axis5.r3Control.rate3.y = robot.axis5.r3Control.i_ref;
//   robot.axis5.r3Control.rate1.y = robot.axis5.r3Control.wSum.u2;
//   robot.axis5.r3Control.Kv.u = robot.axis5.r3Control.pSum.y;
//   robot.axis5.r3Control.tacho1.y = robot.axis5.r3Control.tacho2.u;
//   robot.axis5.r3Control.tacho2.y = robot.axis5.r3Control.rate1.u;
//   robot.axis5.r3Control.Kv.y = robot.axis5.r3Control.sum.u2;
//   robot.axis5.r3Control.Kd.u = robot.axis5.r3Control.w_ref;
//   robot.axis5.r3Control.pSum.u1 = robot.axis5.r3Control.phi_ref;
//   robot.axis5.r3Control.pSum.u2 = robot.axis5.r3Control.phi;
//   robot.axis5.r3Control.tacho1.u = robot.axis5.r3Control.w;
//   der(robot.axis5.integrator1.y) = robot.axis5.integrator1.k * robot.axis5.integrator1.u;
//   der(robot.axis5.integrator2.y) = robot.axis5.integrator2.k * robot.axis5.integrator2.u;
//   robot.axis5.k2.y = robot.axis5.k2.k * robot.axis5.k2.u;
//   robot.axis5.k1.y = robot.axis5.k1.k * robot.axis5.k1.u;
//   robot.axis5.states.w = der(robot.axis5.states.phi);
//   robot.axis5.states.a = der(robot.axis5.states.w);
//   robot.axis5.states.J * robot.axis5.states.a = robot.axis5.states.flange_a.tau + robot.axis5.states.flange_b.tau;
//   robot.axis5.states.flange_a.phi = robot.axis5.states.phi;
//   robot.axis5.states.flange_b.phi = robot.axis5.states.phi;
//   robot.axis5.a_ref = robot.axis5.inPort_a_ref;
//   robot.axis5.w_ref = robot.axis5.integrator1.y;
//   robot.axis5.phi_ref = robot.axis5.integrator2.y;
//   robot.axis5.integrator1.y = robot.axis5.k2.u;
//   robot.axis5.k2.u = robot.axis5.integrator2.u;
//   robot.axis5.r3Control.i_ref = robot.axis5.r3Motor.i_ref;
//   robot.axis5.r3Motor.flange_motor.tau + robot.axis5.r3Gear2.flange_a.tau = 0.0;
//   robot.axis5.r3Motor.flange_motor.phi = robot.axis5.r3Gear2.flange_a.phi;
//   robot.axis5.k1.y = robot.axis5.r3Control.phi_ref;
//   robot.axis5.integrator2.y = robot.axis5.k1.u;
//   robot.axis5.r3Motor.outPort_w = robot.axis5.r3Control.w;
//   robot.axis5.r3Motor.outPort_phi = robot.axis5.r3Control.phi;
//   robot.axis5.k2.y = robot.axis5.r3Control.w_ref;
//   robot.axis5.integrator1.u = robot.axis5.inPort_a_ref;
//   robot.axis5.r3Gear2.flange_b.tau + robot.axis5.states.flange_a.tau = 0.0;
//   robot.axis5.r3Gear2.flange_b.phi = robot.axis5.states.flange_a.phi;
//   robot.axis5.states.flange_b.tau + (-robot.axis5.flange.tau) = 0.0;
//   robot.axis5.states.flange_b.phi = robot.axis5.flange.phi;
//   robot.axis6.r3Gear2.Jmotor.w = der(robot.axis6.r3Gear2.Jmotor.phi);
//   robot.axis6.r3Gear2.Jmotor.a = der(robot.axis6.r3Gear2.Jmotor.w);
//   robot.axis6.r3Gear2.Jmotor.J * robot.axis6.r3Gear2.Jmotor.a = robot.axis6.r3Gear2.Jmotor.flange_a.tau + robot.axis6.r3Gear2.Jmotor.flange_b.tau;
//   robot.axis6.r3Gear2.Jmotor.flange_a.phi = robot.axis6.r3Gear2.Jmotor.phi;
//   robot.axis6.r3Gear2.Jmotor.flange_b.phi = robot.axis6.r3Gear2.Jmotor.phi;
//   robot.axis6.r3Gear2.gear.phi_a = robot.axis6.r3Gear2.gear.ratio * robot.axis6.r3Gear2.gear.phi_b;
//   0.0 = robot.axis6.r3Gear2.gear.ratio * robot.axis6.r3Gear2.gear.flange_a.tau + robot.axis6.r3Gear2.gear.flange_b.tau;
//   robot.axis6.r3Gear2.gear.bearing.phi = 0.0;
//   0.0 = robot.axis6.r3Gear2.gear.flange_a.tau + (robot.axis6.r3Gear2.gear.flange_b.tau + robot.axis6.r3Gear2.gear.tau_support);
//   robot.axis6.r3Gear2.gear.phi_a = robot.axis6.r3Gear2.gear.flange_a.phi - robot.axis6.r3Gear2.gear.bearing.phi;
//   robot.axis6.r3Gear2.gear.phi_b = robot.axis6.r3Gear2.gear.flange_b.phi - robot.axis6.r3Gear2.gear.bearing.phi;
//   robot.axis6.r3Gear2.bearingFriction.tau0 = Modelica.Math.tempInterpol1(0.0,{{robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis6.r3Gear2.bearingFriction.tau0_max = robot.axis6.r3Gear2.bearingFriction.peak * robot.axis6.r3Gear2.bearingFriction.tau0;
//   robot.axis6.r3Gear2.bearingFriction.free = false;
//   robot.axis6.r3Gear2.bearingFriction.phi = robot.axis6.r3Gear2.bearingFriction.phi_a;
//   robot.axis6.r3Gear2.bearingFriction.phi = robot.axis6.r3Gear2.bearingFriction.phi_b;
//   robot.axis6.r3Gear2.bearingFriction.w = der(robot.axis6.r3Gear2.bearingFriction.phi);
//   robot.axis6.r3Gear2.bearingFriction.a = der(robot.axis6.r3Gear2.bearingFriction.w);
//   robot.axis6.r3Gear2.bearingFriction.w_relfric = robot.axis6.r3Gear2.bearingFriction.w;
//   robot.axis6.r3Gear2.bearingFriction.a_relfric = robot.axis6.r3Gear2.bearingFriction.a;
//   0.0 = robot.axis6.r3Gear2.bearingFriction.flange_a.tau + robot.axis6.r3Gear2.bearingFriction.flange_b.tau - robot.axis6.r3Gear2.bearingFriction.tau;
//   robot.axis6.r3Gear2.bearingFriction.tau = if robot.axis6.r3Gear2.bearingFriction.locked then robot.axis6.r3Gear2.bearingFriction.sa * robot.axis6.r3Gear2.bearingFriction.unitTorque else if robot.axis6.r3Gear2.bearingFriction.startForward then Modelica.Math.tempInterpol1(robot.axis6.r3Gear2.bearingFriction.w,{{robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if robot.axis6.r3Gear2.bearingFriction.startBackward then -Modelica.Math.tempInterpol1(-robot.axis6.r3Gear2.bearingFriction.w,{{robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else if pre(robot.axis6.r3Gear2.bearingFriction.mode) == 1 then Modelica.Math.tempInterpol1(robot.axis6.r3Gear2.bearingFriction.w,{{robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2]}},2) else -Modelica.Math.tempInterpol1(-robot.axis6.r3Gear2.bearingFriction.w,{{robot.axis6.r3Gear2.bearingFriction.tau_pos[1,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[1,2]},{robot.axis6.r3Gear2.bearingFriction.tau_pos[2,1],robot.axis6.r3Gear2.bearingFriction.tau_pos[2,2]}},2);
//   robot.axis6.r3Gear2.bearingFriction.phi_b = robot.axis6.r3Gear2.bearingFriction.flange_b.phi - robot.axis6.r3Gear2.bearingFriction.bearing.phi;
//   robot.axis6.r3Gear2.bearingFriction.phi_a = robot.axis6.r3Gear2.bearingFriction.flange_a.phi - robot.axis6.r3Gear2.bearingFriction.bearing.phi;
//   0.0 = robot.axis6.r3Gear2.bearingFriction.flange_a.tau + (robot.axis6.r3Gear2.bearingFriction.flange_b.tau + robot.axis6.r3Gear2.bearingFriction.tau_support);
//   robot.axis6.r3Gear2.bearingFriction.bearing.phi = 0.0;
//   robot.axis6.r3Gear2.bearingFriction.startForward = pre(robot.axis6.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis6.r3Gear2.bearingFriction.sa > robot.axis6.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis6.r3Gear2.bearingFriction.startForward) AND robot.axis6.r3Gear2.bearingFriction.sa > robot.axis6.r3Gear2.bearingFriction.tau0) OR pre(robot.axis6.r3Gear2.bearingFriction.mode) == -1 AND robot.axis6.r3Gear2.bearingFriction.w_relfric > robot.axis6.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis6.r3Gear2.bearingFriction.w_relfric > 0.0;
//   robot.axis6.r3Gear2.bearingFriction.startBackward = pre(robot.axis6.r3Gear2.bearingFriction.mode) == 0 AND (robot.axis6.r3Gear2.bearingFriction.sa < -robot.axis6.r3Gear2.bearingFriction.tau0_max OR pre(robot.axis6.r3Gear2.bearingFriction.startBackward) AND robot.axis6.r3Gear2.bearingFriction.sa < -robot.axis6.r3Gear2.bearingFriction.tau0) OR pre(robot.axis6.r3Gear2.bearingFriction.mode) == 1 AND robot.axis6.r3Gear2.bearingFriction.w_relfric < -robot.axis6.r3Gear2.bearingFriction.w_small OR initial() AND robot.axis6.r3Gear2.bearingFriction.w_relfric < 0.0;
//   robot.axis6.r3Gear2.bearingFriction.locked =  NOT robot.axis6.r3Gear2.bearingFriction.free AND  NOT (pre(robot.axis6.r3Gear2.bearingFriction.mode) == 1 OR robot.axis6.r3Gear2.bearingFriction.startForward OR pre(robot.axis6.r3Gear2.bearingFriction.mode) == -1 OR robot.axis6.r3Gear2.bearingFriction.startBackward);
//   robot.axis6.r3Gear2.bearingFriction.a_relfric = robot.axis6.r3Gear2.bearingFriction.unitAngularAcceleration * (if robot.axis6.r3Gear2.bearingFriction.locked then 0.0 else if robot.axis6.r3Gear2.bearingFriction.free then robot.axis6.r3Gear2.bearingFriction.sa else if robot.axis6.r3Gear2.bearingFriction.startForward then robot.axis6.r3Gear2.bearingFriction.sa - robot.axis6.r3Gear2.bearingFriction.tau0_max / robot.axis6.r3Gear2.bearingFriction.unitTorque else if robot.axis6.r3Gear2.bearingFriction.startBackward then robot.axis6.r3Gear2.bearingFriction.sa + robot.axis6.r3Gear2.bearingFriction.tau0_max / robot.axis6.r3Gear2.bearingFriction.unitTorque else if pre(robot.axis6.r3Gear2.bearingFriction.mode) == 1 then robot.axis6.r3Gear2.bearingFriction.sa - robot.axis6.r3Gear2.bearingFriction.tau0 / robot.axis6.r3Gear2.bearingFriction.unitTorque else robot.axis6.r3Gear2.bearingFriction.sa + robot.axis6.r3Gear2.bearingFriction.tau0 / robot.axis6.r3Gear2.bearingFriction.unitTorque);
//   robot.axis6.r3Gear2.bearingFriction.mode = if robot.axis6.r3Gear2.bearingFriction.free then 2 else if (pre(robot.axis6.r3Gear2.bearingFriction.mode) == 1 OR pre(robot.axis6.r3Gear2.bearingFriction.mode) == 2 OR robot.axis6.r3Gear2.bearingFriction.startForward) AND robot.axis6.r3Gear2.bearingFriction.w_relfric > 0.0 then 1 else if (pre(robot.axis6.r3Gear2.bearingFriction.mode) == -1 OR pre(robot.axis6.r3Gear2.bearingFriction.mode) == 2 OR robot.axis6.r3Gear2.bearingFriction.startBackward) AND robot.axis6.r3Gear2.bearingFriction.w_relfric < 0.0 then -1 else 0;
//   robot.axis6.r3Gear2.Jmotor.flange_a.tau + (-robot.axis6.r3Gear2.flange_a.tau) = 0.0;
//   robot.axis6.r3Gear2.Jmotor.flange_a.phi = robot.axis6.r3Gear2.flange_a.phi;
//   robot.axis6.r3Gear2.gear.flange_b.tau + robot.axis6.r3Gear2.bearingFriction.flange_a.tau = 0.0;
//   robot.axis6.r3Gear2.gear.flange_b.phi = robot.axis6.r3Gear2.bearingFriction.flange_a.phi;
//   robot.axis6.r3Gear2.bearingFriction.flange_b.tau + (-robot.axis6.r3Gear2.flange_b.tau) = 0.0;
//   robot.axis6.r3Gear2.bearingFriction.flange_b.phi = robot.axis6.r3Gear2.flange_b.phi;
//   robot.axis6.r3Gear2.Jmotor.flange_b.tau + robot.axis6.r3Gear2.gear.flange_a.tau = 0.0;
//   robot.axis6.r3Gear2.Jmotor.flange_b.phi = robot.axis6.r3Gear2.gear.flange_a.phi;
//   robot.axis6.r3Gear2.bearingFriction.bearing.tau = 0.0;
//   robot.axis6.r3Gear2.gear.bearing.tau = 0.0;
//   robot.axis6.r3Motor.Vs.v = robot.axis6.r3Motor.Vs.p.v - robot.axis6.r3Motor.Vs.n.v;
//   0.0 = robot.axis6.r3Motor.Vs.p.i + robot.axis6.r3Motor.Vs.n.i;
//   robot.axis6.r3Motor.Vs.i = robot.axis6.r3Motor.Vs.p.i;
//   robot.axis6.r3Motor.diff.v1 = robot.axis6.r3Motor.diff.p1.v - robot.axis6.r3Motor.diff.n1.v;
//   robot.axis6.r3Motor.diff.v2 = robot.axis6.r3Motor.diff.p2.v - robot.axis6.r3Motor.diff.n2.v;
//   0.0 = robot.axis6.r3Motor.diff.p1.i + robot.axis6.r3Motor.diff.n1.i;
//   0.0 = robot.axis6.r3Motor.diff.p2.i + robot.axis6.r3Motor.diff.n2.i;
//   robot.axis6.r3Motor.diff.i1 = robot.axis6.r3Motor.diff.p1.i;
//   robot.axis6.r3Motor.diff.i2 = robot.axis6.r3Motor.diff.p2.i;
//   robot.axis6.r3Motor.diff.v1 = 0.0;
//   robot.axis6.r3Motor.diff.i1 = 0.0;
//   robot.axis6.r3Motor.power.v1 = robot.axis6.r3Motor.power.p1.v - robot.axis6.r3Motor.power.n1.v;
//   robot.axis6.r3Motor.power.v2 = robot.axis6.r3Motor.power.p2.v - robot.axis6.r3Motor.power.n2.v;
//   0.0 = robot.axis6.r3Motor.power.p1.i + robot.axis6.r3Motor.power.n1.i;
//   0.0 = robot.axis6.r3Motor.power.p2.i + robot.axis6.r3Motor.power.n2.i;
//   robot.axis6.r3Motor.power.i1 = robot.axis6.r3Motor.power.p1.i;
//   robot.axis6.r3Motor.power.i2 = robot.axis6.r3Motor.power.p2.i;
//   robot.axis6.r3Motor.power.v1 = 0.0;
//   robot.axis6.r3Motor.power.i1 = 0.0;
//   robot.axis6.r3Motor.emf.v = robot.axis6.r3Motor.emf.p.v - robot.axis6.r3Motor.emf.n.v;
//   0.0 = robot.axis6.r3Motor.emf.p.i + robot.axis6.r3Motor.emf.n.i;
//   robot.axis6.r3Motor.emf.i = robot.axis6.r3Motor.emf.p.i;
//   robot.axis6.r3Motor.emf.w = der(robot.axis6.r3Motor.emf.flange_b.phi);
//   robot.axis6.r3Motor.emf.k * robot.axis6.r3Motor.emf.w = robot.axis6.r3Motor.emf.v;
//   robot.axis6.r3Motor.emf.flange_b.tau = (-robot.axis6.r3Motor.emf.k) * robot.axis6.r3Motor.emf.i;
//   robot.axis6.r3Motor.La.L * der(robot.axis6.r3Motor.La.i) = robot.axis6.r3Motor.La.v;
//   robot.axis6.r3Motor.La.v = robot.axis6.r3Motor.La.p.v - robot.axis6.r3Motor.La.n.v;
//   0.0 = robot.axis6.r3Motor.La.p.i + robot.axis6.r3Motor.La.n.i;
//   robot.axis6.r3Motor.La.i = robot.axis6.r3Motor.La.p.i;
//   robot.axis6.r3Motor.Ra.R * robot.axis6.r3Motor.Ra.i = robot.axis6.r3Motor.Ra.v;
//   robot.axis6.r3Motor.Ra.v = robot.axis6.r3Motor.Ra.p.v - robot.axis6.r3Motor.Ra.n.v;
//   0.0 = robot.axis6.r3Motor.Ra.p.i + robot.axis6.r3Motor.Ra.n.i;
//   robot.axis6.r3Motor.Ra.i = robot.axis6.r3Motor.Ra.p.i;
//   robot.axis6.r3Motor.Rd2.R * robot.axis6.r3Motor.Rd2.i = robot.axis6.r3Motor.Rd2.v;
//   robot.axis6.r3Motor.Rd2.v = robot.axis6.r3Motor.Rd2.p.v - robot.axis6.r3Motor.Rd2.n.v;
//   0.0 = robot.axis6.r3Motor.Rd2.p.i + robot.axis6.r3Motor.Rd2.n.i;
//   robot.axis6.r3Motor.Rd2.i = robot.axis6.r3Motor.Rd2.p.i;
//   robot.axis6.r3Motor.C.i = robot.axis6.r3Motor.C.C * der(robot.axis6.r3Motor.C.v);
//   robot.axis6.r3Motor.C.v = robot.axis6.r3Motor.C.p.v - robot.axis6.r3Motor.C.n.v;
//   0.0 = robot.axis6.r3Motor.C.p.i + robot.axis6.r3Motor.C.n.i;
//   robot.axis6.r3Motor.C.i = robot.axis6.r3Motor.C.p.i;
//   robot.axis6.r3Motor.OpI.v1 = robot.axis6.r3Motor.OpI.p1.v - robot.axis6.r3Motor.OpI.n1.v;
//   robot.axis6.r3Motor.OpI.v2 = robot.axis6.r3Motor.OpI.p2.v - robot.axis6.r3Motor.OpI.n2.v;
//   0.0 = robot.axis6.r3Motor.OpI.p1.i + robot.axis6.r3Motor.OpI.n1.i;
//   0.0 = robot.axis6.r3Motor.OpI.p2.i + robot.axis6.r3Motor.OpI.n2.i;
//   robot.axis6.r3Motor.OpI.i1 = robot.axis6.r3Motor.OpI.p1.i;
//   robot.axis6.r3Motor.OpI.i2 = robot.axis6.r3Motor.OpI.p2.i;
//   robot.axis6.r3Motor.OpI.v1 = 0.0;
//   robot.axis6.r3Motor.OpI.i1 = 0.0;
//   robot.axis6.r3Motor.Rd1.R * robot.axis6.r3Motor.Rd1.i = robot.axis6.r3Motor.Rd1.v;
//   robot.axis6.r3Motor.Rd1.v = robot.axis6.r3Motor.Rd1.p.v - robot.axis6.r3Motor.Rd1.n.v;
//   0.0 = robot.axis6.r3Motor.Rd1.p.i + robot.axis6.r3Motor.Rd1.n.i;
//   robot.axis6.r3Motor.Rd1.i = robot.axis6.r3Motor.Rd1.p.i;
//   robot.axis6.r3Motor.Ri.R * robot.axis6.r3Motor.Ri.i = robot.axis6.r3Motor.Ri.v;
//   robot.axis6.r3Motor.Ri.v = robot.axis6.r3Motor.Ri.p.v - robot.axis6.r3Motor.Ri.n.v;
//   0.0 = robot.axis6.r3Motor.Ri.p.i + robot.axis6.r3Motor.Ri.n.i;
//   robot.axis6.r3Motor.Ri.i = robot.axis6.r3Motor.Ri.p.i;
//   robot.axis6.r3Motor.Rp1.R * robot.axis6.r3Motor.Rp1.i = robot.axis6.r3Motor.Rp1.v;
//   robot.axis6.r3Motor.Rp1.v = robot.axis6.r3Motor.Rp1.p.v - robot.axis6.r3Motor.Rp1.n.v;
//   0.0 = robot.axis6.r3Motor.Rp1.p.i + robot.axis6.r3Motor.Rp1.n.i;
//   robot.axis6.r3Motor.Rp1.i = robot.axis6.r3Motor.Rp1.p.i;
//   robot.axis6.r3Motor.Rp2.R * robot.axis6.r3Motor.Rp2.i = robot.axis6.r3Motor.Rp2.v;
//   robot.axis6.r3Motor.Rp2.v = robot.axis6.r3Motor.Rp2.p.v - robot.axis6.r3Motor.Rp2.n.v;
//   0.0 = robot.axis6.r3Motor.Rp2.p.i + robot.axis6.r3Motor.Rp2.n.i;
//   robot.axis6.r3Motor.Rp2.i = robot.axis6.r3Motor.Rp2.p.i;
//   robot.axis6.r3Motor.Rd4.R * robot.axis6.r3Motor.Rd4.i = robot.axis6.r3Motor.Rd4.v;
//   robot.axis6.r3Motor.Rd4.v = robot.axis6.r3Motor.Rd4.p.v - robot.axis6.r3Motor.Rd4.n.v;
//   0.0 = robot.axis6.r3Motor.Rd4.p.i + robot.axis6.r3Motor.Rd4.n.i;
//   robot.axis6.r3Motor.Rd4.i = robot.axis6.r3Motor.Rd4.p.i;
//   robot.axis6.r3Motor.hall2.v = robot.axis6.r3Motor.hall2.p.v - robot.axis6.r3Motor.hall2.n.v;
//   0.0 = robot.axis6.r3Motor.hall2.p.i + robot.axis6.r3Motor.hall2.n.i;
//   robot.axis6.r3Motor.hall2.i = robot.axis6.r3Motor.hall2.p.i;
//   robot.axis6.r3Motor.Rd3.R * robot.axis6.r3Motor.Rd3.i = robot.axis6.r3Motor.Rd3.v;
//   robot.axis6.r3Motor.Rd3.v = robot.axis6.r3Motor.Rd3.p.v - robot.axis6.r3Motor.Rd3.n.v;
//   0.0 = robot.axis6.r3Motor.Rd3.p.i + robot.axis6.r3Motor.Rd3.n.i;
//   robot.axis6.r3Motor.Rd3.i = robot.axis6.r3Motor.Rd3.p.i;
//   robot.axis6.r3Motor.g1.p.v = 0.0;
//   robot.axis6.r3Motor.g2.p.v = 0.0;
//   robot.axis6.r3Motor.g3.p.v = 0.0;
//   robot.axis6.r3Motor.hall1.p.v = robot.axis6.r3Motor.hall1.n.v;
//   robot.axis6.r3Motor.hall1.p.i = robot.axis6.r3Motor.hall1.i;
//   robot.axis6.r3Motor.hall1.n.i = -robot.axis6.r3Motor.hall1.i;
//   robot.axis6.r3Motor.g4.p.v = 0.0;
//   robot.axis6.r3Motor.g5.p.v = 0.0;
//   robot.axis6.r3Motor.phi.phi = robot.axis6.r3Motor.phi.flange_a.phi;
//   0.0 = robot.axis6.r3Motor.phi.flange_a.tau;
//   robot.axis6.r3Motor.w.w = der(robot.axis6.r3Motor.w.flange_a.phi);
//   0.0 = robot.axis6.r3Motor.w.flange_a.tau;
//   robot.axis6.r3Motor.Rd2.n.i + (robot.axis6.r3Motor.diff.n1.i + robot.axis6.r3Motor.Rd1.p.i) = 0.0;
//   robot.axis6.r3Motor.Rd2.n.v = robot.axis6.r3Motor.diff.n1.v;
//   robot.axis6.r3Motor.diff.n1.v = robot.axis6.r3Motor.Rd1.p.v;
//   robot.axis6.r3Motor.C.n.i + (robot.axis6.r3Motor.OpI.p2.i + robot.axis6.r3Motor.power.p1.i) = 0.0;
//   robot.axis6.r3Motor.C.n.v = robot.axis6.r3Motor.OpI.p2.v;
//   robot.axis6.r3Motor.OpI.p2.v = robot.axis6.r3Motor.power.p1.v;
//   robot.axis6.r3Motor.Rd1.n.i + (robot.axis6.r3Motor.diff.p2.i + robot.axis6.r3Motor.Ri.p.i) = 0.0;
//   robot.axis6.r3Motor.Rd1.n.v = robot.axis6.r3Motor.diff.p2.v;
//   robot.axis6.r3Motor.diff.p2.v = robot.axis6.r3Motor.Ri.p.v;
//   robot.axis6.r3Motor.Ri.n.i + (robot.axis6.r3Motor.OpI.n1.i + robot.axis6.r3Motor.C.p.i) = 0.0;
//   robot.axis6.r3Motor.Ri.n.v = robot.axis6.r3Motor.OpI.n1.v;
//   robot.axis6.r3Motor.OpI.n1.v = robot.axis6.r3Motor.C.p.v;
//   robot.axis6.r3Motor.power.n1.i + (robot.axis6.r3Motor.Rp1.p.i + robot.axis6.r3Motor.Rp2.p.i) = 0.0;
//   robot.axis6.r3Motor.power.n1.v = robot.axis6.r3Motor.Rp1.p.v;
//   robot.axis6.r3Motor.Rp1.p.v = robot.axis6.r3Motor.Rp2.p.v;
//   robot.axis6.r3Motor.power.p2.i + (robot.axis6.r3Motor.Ra.p.i + robot.axis6.r3Motor.Rp1.n.i) = 0.0;
//   robot.axis6.r3Motor.power.p2.v = robot.axis6.r3Motor.Ra.p.v;
//   robot.axis6.r3Motor.Ra.p.v = robot.axis6.r3Motor.Rp1.n.v;
//   robot.axis6.r3Motor.Rd4.n.i + (robot.axis6.r3Motor.g3.p.i + (robot.axis6.r3Motor.OpI.p1.i + (robot.axis6.r3Motor.diff.n2.i + (robot.axis6.r3Motor.OpI.n2.i + robot.axis6.r3Motor.power.n2.i)))) = 0.0;
//   robot.axis6.r3Motor.Rd4.n.v = robot.axis6.r3Motor.g3.p.v;
//   robot.axis6.r3Motor.g3.p.v = robot.axis6.r3Motor.OpI.p1.v;
//   robot.axis6.r3Motor.OpI.p1.v = robot.axis6.r3Motor.diff.n2.v;
//   robot.axis6.r3Motor.diff.n2.v = robot.axis6.r3Motor.OpI.n2.v;
//   robot.axis6.r3Motor.OpI.n2.v = robot.axis6.r3Motor.power.n2.v;
//   (-robot.axis6.r3Motor.flange_motor.tau) + (robot.axis6.r3Motor.emf.flange_b.tau + (robot.axis6.r3Motor.phi.flange_a.tau + robot.axis6.r3Motor.w.flange_a.tau)) = 0.0;
//   robot.axis6.r3Motor.flange_motor.phi = robot.axis6.r3Motor.emf.flange_b.phi;
//   robot.axis6.r3Motor.emf.flange_b.phi = robot.axis6.r3Motor.phi.flange_a.phi;
//   robot.axis6.r3Motor.phi.flange_a.phi = robot.axis6.r3Motor.w.flange_a.phi;
//   robot.axis6.r3Motor.La.n.i + robot.axis6.r3Motor.emf.p.i = 0.0;
//   robot.axis6.r3Motor.La.n.v = robot.axis6.r3Motor.emf.p.v;
//   robot.axis6.r3Motor.Ra.n.i + robot.axis6.r3Motor.La.p.i = 0.0;
//   robot.axis6.r3Motor.Ra.n.v = robot.axis6.r3Motor.La.p.v;
//   robot.axis6.r3Motor.Vs.n.i + robot.axis6.r3Motor.g1.p.i = 0.0;
//   robot.axis6.r3Motor.Vs.n.v = robot.axis6.r3Motor.g1.p.v;
//   robot.axis6.r3Motor.Vs.p.i + robot.axis6.r3Motor.Rd2.p.i = 0.0;
//   robot.axis6.r3Motor.Vs.p.v = robot.axis6.r3Motor.Rd2.p.v;
//   robot.axis6.r3Motor.g2.p.i + robot.axis6.r3Motor.hall2.n.i = 0.0;
//   robot.axis6.r3Motor.g2.p.v = robot.axis6.r3Motor.hall2.n.v;
//   robot.axis6.r3Motor.hall1.n.i + robot.axis6.r3Motor.g4.p.i = 0.0;
//   robot.axis6.r3Motor.hall1.n.v = robot.axis6.r3Motor.g4.p.v;
//   robot.axis6.r3Motor.emf.n.i + robot.axis6.r3Motor.hall1.p.i = 0.0;
//   robot.axis6.r3Motor.emf.n.v = robot.axis6.r3Motor.hall1.p.v;
//   robot.axis6.r3Motor.hall1.i = robot.axis6.r3Motor.hall2.v;
//   robot.axis6.r3Motor.Rd3.n.i + (robot.axis6.r3Motor.diff.p1.i + robot.axis6.r3Motor.Rd4.p.i) = 0.0;
//   robot.axis6.r3Motor.Rd3.n.v = robot.axis6.r3Motor.diff.p1.v;
//   robot.axis6.r3Motor.diff.p1.v = robot.axis6.r3Motor.Rd4.p.v;
//   robot.axis6.r3Motor.Rd3.p.i + robot.axis6.r3Motor.hall2.p.i = 0.0;
//   robot.axis6.r3Motor.Rd3.p.v = robot.axis6.r3Motor.hall2.p.v;
//   robot.axis6.r3Motor.Vs.v = robot.axis6.r3Motor.i_ref;
//   robot.axis6.r3Motor.g5.p.i + robot.axis6.r3Motor.Rp2.n.i = 0.0;
//   robot.axis6.r3Motor.g5.p.v = robot.axis6.r3Motor.Rp2.n.v;
//   robot.axis6.r3Motor.phi.phi = robot.axis6.r3Motor.outPort_phi;
//   robot.axis6.r3Motor.w.w = robot.axis6.r3Motor.outPort_w;
//   der(robot.axis6.r3Control.rate2.x[1]) = robot.axis6.r3Control.rate2.x1dot;
//   robot.axis6.r3Control.rate2.xn = robot.axis6.r3Control.rate2.x[1];
//   robot.axis6.r3Control.rate2.u = robot.axis6.r3Control.rate2.a[1] * robot.axis6.r3Control.rate2.x1dot + robot.axis6.r3Control.rate2.a[2] * robot.axis6.r3Control.rate2.x[1];
//   robot.axis6.r3Control.rate2.y = robot.axis6.r3Control.rate2.b[1] * robot.axis6.r3Control.rate2.x1dot + robot.axis6.r3Control.rate2.b[2] * robot.axis6.r3Control.rate2.x[1];
//   der(robot.axis6.r3Control.rate3.y) = robot.axis6.r3Control.rate3.k * robot.axis6.r3Control.rate3.u;
//   der(robot.axis6.r3Control.rate1.x[1]) = robot.axis6.r3Control.rate1.x1dot;
//   robot.axis6.r3Control.rate1.xn = robot.axis6.r3Control.rate1.x[1];
//   robot.axis6.r3Control.rate1.u = robot.axis6.r3Control.rate1.a[1] * robot.axis6.r3Control.rate1.x1dot + robot.axis6.r3Control.rate1.a[2] * robot.axis6.r3Control.rate1.x[1];
//   robot.axis6.r3Control.rate1.y = robot.axis6.r3Control.rate1.b[1] * robot.axis6.r3Control.rate1.x1dot + robot.axis6.r3Control.rate1.b[2] * robot.axis6.r3Control.rate1.x[1];
//   der(robot.axis6.r3Control.tacho1.y) = (robot.axis6.r3Control.tacho1.k * robot.axis6.r3Control.tacho1.u - robot.axis6.r3Control.tacho1.y) / robot.axis6.r3Control.tacho1.T;
//   robot.axis6.r3Control.Kd.y = robot.axis6.r3Control.Kd.k * robot.axis6.r3Control.Kd.u;
//   robot.axis6.r3Control.wSum.y = robot.axis6.r3Control.wSum.u1 - robot.axis6.r3Control.wSum.u2;
//   robot.axis6.r3Control.sum.y = robot.axis6.r3Control.sum.k1 * robot.axis6.r3Control.sum.u1 + robot.axis6.r3Control.sum.k2 * robot.axis6.r3Control.sum.u2;
//   robot.axis6.r3Control.pSum.y = robot.axis6.r3Control.pSum.u1 - robot.axis6.r3Control.pSum.u2;
//   robot.axis6.r3Control.Kv.y = robot.axis6.r3Control.Kv.k * robot.axis6.r3Control.Kv.u;
//   der(robot.axis6.r3Control.tacho2.x[1]) = robot.axis6.r3Control.tacho2.x1dot;
//   der(robot.axis6.r3Control.tacho2.x[2]) = robot.axis6.r3Control.tacho2.x[1];
//   robot.axis6.r3Control.tacho2.xn = robot.axis6.r3Control.tacho2.x[2];
//   robot.axis6.r3Control.tacho2.u = robot.axis6.r3Control.tacho2.a[1] * robot.axis6.r3Control.tacho2.x1dot + (robot.axis6.r3Control.tacho2.a[2] * robot.axis6.r3Control.tacho2.x[1] + robot.axis6.r3Control.tacho2.a[3] * robot.axis6.r3Control.tacho2.x[2]);
//   robot.axis6.r3Control.tacho2.y = robot.axis6.r3Control.tacho2.b[1] * robot.axis6.r3Control.tacho2.x[2];
//   robot.axis6.r3Control.rate2.y = robot.axis6.r3Control.rate3.u;
//   robot.axis6.r3Control.wSum.y = robot.axis6.r3Control.rate2.u;
//   robot.axis6.r3Control.sum.y = robot.axis6.r3Control.wSum.u1;
//   robot.axis6.r3Control.Kd.y = robot.axis6.r3Control.sum.u1;
//   robot.axis6.r3Control.rate3.y = robot.axis6.r3Control.i_ref;
//   robot.axis6.r3Control.rate1.y = robot.axis6.r3Control.wSum.u2;
//   robot.axis6.r3Control.Kv.u = robot.axis6.r3Control.pSum.y;
//   robot.axis6.r3Control.tacho1.y = robot.axis6.r3Control.tacho2.u;
//   robot.axis6.r3Control.tacho2.y = robot.axis6.r3Control.rate1.u;
//   robot.axis6.r3Control.Kv.y = robot.axis6.r3Control.sum.u2;
//   robot.axis6.r3Control.Kd.u = robot.axis6.r3Control.w_ref;
//   robot.axis6.r3Control.pSum.u1 = robot.axis6.r3Control.phi_ref;
//   robot.axis6.r3Control.pSum.u2 = robot.axis6.r3Control.phi;
//   robot.axis6.r3Control.tacho1.u = robot.axis6.r3Control.w;
//   der(robot.axis6.integrator1.y) = robot.axis6.integrator1.k * robot.axis6.integrator1.u;
//   der(robot.axis6.integrator2.y) = robot.axis6.integrator2.k * robot.axis6.integrator2.u;
//   robot.axis6.k2.y = robot.axis6.k2.k * robot.axis6.k2.u;
//   robot.axis6.k1.y = robot.axis6.k1.k * robot.axis6.k1.u;
//   robot.axis6.states.w = der(robot.axis6.states.phi);
//   robot.axis6.states.a = der(robot.axis6.states.w);
//   robot.axis6.states.J * robot.axis6.states.a = robot.axis6.states.flange_a.tau + robot.axis6.states.flange_b.tau;
//   robot.axis6.states.flange_a.phi = robot.axis6.states.phi;
//   robot.axis6.states.flange_b.phi = robot.axis6.states.phi;
//   robot.axis6.a_ref = robot.axis6.inPort_a_ref;
//   robot.axis6.w_ref = robot.axis6.integrator1.y;
//   robot.axis6.phi_ref = robot.axis6.integrator2.y;
//   robot.axis6.integrator1.y = robot.axis6.k2.u;
//   robot.axis6.k2.u = robot.axis6.integrator2.u;
//   robot.axis6.r3Control.i_ref = robot.axis6.r3Motor.i_ref;
//   robot.axis6.r3Motor.flange_motor.tau + robot.axis6.r3Gear2.flange_a.tau = 0.0;
//   robot.axis6.r3Motor.flange_motor.phi = robot.axis6.r3Gear2.flange_a.phi;
//   robot.axis6.k1.y = robot.axis6.r3Control.phi_ref;
//   robot.axis6.integrator2.y = robot.axis6.k1.u;
//   robot.axis6.r3Motor.outPort_w = robot.axis6.r3Control.w;
//   robot.axis6.r3Motor.outPort_phi = robot.axis6.r3Control.phi;
//   robot.axis6.k2.y = robot.axis6.r3Control.w_ref;
//   robot.axis6.integrator1.u = robot.axis6.inPort_a_ref;
//   robot.axis6.r3Gear2.flange_b.tau + robot.axis6.states.flange_a.tau = 0.0;
//   robot.axis6.r3Gear2.flange_b.phi = robot.axis6.states.flange_a.phi;
//   robot.axis6.states.flange_b.tau + (-robot.axis6.flange.tau) = 0.0;
//   robot.axis6.states.flange_b.phi = robot.axis6.flange.phi;
//   robot.q_ref[1] = robot.axis1.phi_ref;
//   robot.q_ref[2] = robot.axis2.phi_ref;
//   robot.q_ref[3] = robot.axis3.phi_ref;
//   robot.q_ref[4] = robot.axis4.phi_ref;
//   robot.q_ref[5] = robot.axis5.phi_ref;
//   robot.q_ref[6] = robot.axis6.phi_ref;
//   robot.qd_ref[1] = robot.axis1.w_ref;
//   robot.qd_ref[2] = robot.axis2.w_ref;
//   robot.qd_ref[3] = robot.axis3.w_ref;
//   robot.qd_ref[4] = robot.axis4.w_ref;
//   robot.qd_ref[5] = robot.axis5.w_ref;
//   robot.qd_ref[6] = robot.axis6.w_ref;
//   robot.qdd_ref[1] = robot.a_ref1;
//   robot.qdd_ref[2] = robot.a_ref2;
//   robot.qdd_ref[3] = robot.a_ref3;
//   robot.qdd_ref[4] = robot.a_ref4;
//   robot.qdd_ref[5] = robot.a_ref5;
//   robot.qdd_ref[6] = robot.a_ref6;
//   robot.eq[1] = robot.q_ref[1] - robot.mechanics.q[1];
//   robot.eq[2] = robot.q_ref[2] - robot.mechanics.q[2];
//   robot.eq[3] = robot.q_ref[3] - robot.mechanics.q[3];
//   robot.eq[4] = robot.q_ref[4] - robot.mechanics.q[4];
//   robot.eq[5] = robot.q_ref[5] - robot.mechanics.q[5];
//   robot.eq[6] = robot.q_ref[6] - robot.mechanics.q[6];
//   robot.eqd[1] = robot.qd_ref[1] - robot.mechanics.qd[1];
//   robot.eqd[2] = robot.qd_ref[2] - robot.mechanics.qd[2];
//   robot.eqd[3] = robot.qd_ref[3] - robot.mechanics.qd[3];
//   robot.eqd[4] = robot.qd_ref[4] - robot.mechanics.qd[4];
//   robot.eqd[5] = robot.qd_ref[5] - robot.mechanics.qd[5];
//   robot.eqd[6] = robot.qd_ref[6] - robot.mechanics.qd[6];
//   robot.axis1.flange.tau + robot.mechanics.axis1.tau = 0.0;
//   robot.axis1.flange.phi = robot.mechanics.axis1.phi;
//   robot.axis2.flange.tau + robot.mechanics.axis2.tau = 0.0;
//   robot.axis2.flange.phi = robot.mechanics.axis2.phi;
//   robot.axis3.flange.tau + robot.mechanics.axis3.tau = 0.0;
//   robot.axis3.flange.phi = robot.mechanics.axis3.phi;
//   robot.axis4.flange.tau + robot.mechanics.axis4.tau = 0.0;
//   robot.axis4.flange.phi = robot.mechanics.axis4.phi;
//   robot.axis5.flange.tau + robot.mechanics.axis5.tau = 0.0;
//   robot.axis5.flange.phi = robot.mechanics.axis5.phi;
//   robot.axis6.flange.tau + robot.mechanics.axis6.tau = 0.0;
//   robot.axis6.flange.phi = robot.mechanics.axis6.phi;
//   robot.axis1.inPort_a_ref = robot.a_ref1;
//   robot.axis6.inPort_a_ref = robot.a_ref6;
//   robot.axis5.inPort_a_ref = robot.a_ref5;
//   robot.axis4.inPort_a_ref = robot.a_ref4;
//   robot.axis3.inPort_a_ref = robot.a_ref3;
//   robot.axis2.inPort_a_ref = robot.a_ref2;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref1.y[1] = a_ref1.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref1.tableID,a_ref1.columns[1],time);
//   when initial() then
//   a_ref1.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref1.startTime,a_ref1.smoothness,a_ref1.extrapolation,if  NOT a_ref1.tableOnFile then "NoName" else a_ref1.tableName,if  NOT a_ref1.tableOnFile then "NoName" else a_ref1.fileName,{{a_ref1.table[1,1],a_ref1.table[1,2]},{a_ref1.table[2,1],a_ref1.table[2,2]},{a_ref1.table[3,1],a_ref1.table[3,2]},{a_ref1.table[4,1],a_ref1.table[4,2]},{a_ref1.table[5,1],a_ref1.table[5,2]},{a_ref1.table[6,1],a_ref1.table[6,2]},{a_ref1.table[7,1],a_ref1.table[7,2]},{a_ref1.table[8,1],a_ref1.table[8,2]},{a_ref1.table[9,1],a_ref1.table[9,2]},{a_ref1.table[10,1],a_ref1.table[10,2]}},0);
//   end when;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref2.y[1] = a_ref2.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref2.tableID,a_ref2.columns[1],time);
//   when initial() then
//   a_ref2.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref2.startTime,a_ref2.smoothness,a_ref2.extrapolation,if  NOT a_ref2.tableOnFile then "NoName" else a_ref2.tableName,if  NOT a_ref2.tableOnFile then "NoName" else a_ref2.fileName,{{a_ref2.table[1,1],a_ref2.table[1,2]},{a_ref2.table[2,1],a_ref2.table[2,2]},{a_ref2.table[3,1],a_ref2.table[3,2]},{a_ref2.table[4,1],a_ref2.table[4,2]},{a_ref2.table[5,1],a_ref2.table[5,2]},{a_ref2.table[6,1],a_ref2.table[6,2]},{a_ref2.table[7,1],a_ref2.table[7,2]},{a_ref2.table[8,1],a_ref2.table[8,2]}},0);
//   end when;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref3.y[1] = a_ref3.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref3.tableID,a_ref3.columns[1],time);
//   when initial() then
//   a_ref3.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref3.startTime,a_ref3.smoothness,a_ref3.extrapolation,if  NOT a_ref3.tableOnFile then "NoName" else a_ref3.tableName,if  NOT a_ref3.tableOnFile then "NoName" else a_ref3.fileName,{{a_ref3.table[1,1],a_ref3.table[1,2]},{a_ref3.table[2,1],a_ref3.table[2,2]},{a_ref3.table[3,1],a_ref3.table[3,2]},{a_ref3.table[4,1],a_ref3.table[4,2]},{a_ref3.table[5,1],a_ref3.table[5,2]},{a_ref3.table[6,1],a_ref3.table[6,2]},{a_ref3.table[7,1],a_ref3.table[7,2]},{a_ref3.table[8,1],a_ref3.table[8,2]},{a_ref3.table[9,1],a_ref3.table[9,2]},{a_ref3.table[10,1],a_ref3.table[10,2]}},0);
//   end when;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref4.y[1] = a_ref4.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref4.tableID,a_ref4.columns[1],time);
//   when initial() then
//   a_ref4.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref4.startTime,a_ref4.smoothness,a_ref4.extrapolation,if  NOT a_ref4.tableOnFile then "NoName" else a_ref4.tableName,if  NOT a_ref4.tableOnFile then "NoName" else a_ref4.fileName,{{a_ref4.table[1,1],a_ref4.table[1,2]},{a_ref4.table[2,1],a_ref4.table[2,2]},{a_ref4.table[3,1],a_ref4.table[3,2]},{a_ref4.table[4,1],a_ref4.table[4,2]},{a_ref4.table[5,1],a_ref4.table[5,2]},{a_ref4.table[6,1],a_ref4.table[6,2]},{a_ref4.table[7,1],a_ref4.table[7,2]},{a_ref4.table[8,1],a_ref4.table[8,2]},{a_ref4.table[9,1],a_ref4.table[9,2]},{a_ref4.table[10,1],a_ref4.table[10,2]},{a_ref4.table[11,1],a_ref4.table[11,2]},{a_ref4.table[12,1],a_ref4.table[12,2]}},0);
//   end when;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref5.y[1] = a_ref5.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref5.tableID,a_ref5.columns[1],time);
//   when initial() then
//   a_ref5.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref5.startTime,a_ref5.smoothness,a_ref5.extrapolation,if  NOT a_ref5.tableOnFile then "NoName" else a_ref5.tableName,if  NOT a_ref5.tableOnFile then "NoName" else a_ref5.fileName,{{a_ref5.table[1,1],a_ref5.table[1,2]},{a_ref5.table[2,1],a_ref5.table[2,2]},{a_ref5.table[3,1],a_ref5.table[3,2]},{a_ref5.table[4,1],a_ref5.table[4,2]},{a_ref5.table[5,1],a_ref5.table[5,2]},{a_ref5.table[6,1],a_ref5.table[6,2]},{a_ref5.table[7,1],a_ref5.table[7,2]},{a_ref5.table[8,1],a_ref5.table[8,2]},{a_ref5.table[9,1],a_ref5.table[9,2]},{a_ref5.table[10,1],a_ref5.table[10,2]}},0);
//   end when;
//   assert(true,"tableOnFile = false and parameter table is an empty matrix");
//   a_ref6.y[1] = a_ref6.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(a_ref6.tableID,a_ref6.columns[1],time);
//   when initial() then
//   a_ref6.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(0.0,a_ref6.startTime,a_ref6.smoothness,a_ref6.extrapolation,if  NOT a_ref6.tableOnFile then "NoName" else a_ref6.tableName,if  NOT a_ref6.tableOnFile then "NoName" else a_ref6.fileName,{{a_ref6.table[1,1],a_ref6.table[1,2]},{a_ref6.table[2,1],a_ref6.table[2,2]},{a_ref6.table[3,1],a_ref6.table[3,2]},{a_ref6.table[4,1],a_ref6.table[4,2]},{a_ref6.table[5,1],a_ref6.table[5,2]},{a_ref6.table[6,1],a_ref6.table[6,2]},{a_ref6.table[7,1],a_ref6.table[7,2]},{a_ref6.table[8,1],a_ref6.table[8,2]},{a_ref6.table[9,1],a_ref6.table[9,2]},{a_ref6.table[10,1],a_ref6.table[10,2]},{a_ref6.table[11,1],a_ref6.table[11,2]},{a_ref6.table[12,1],a_ref6.table[12,2]}},0);
//   end when;
//   a_ref1.y[1] = robot.a_ref1;
//   a_ref2.y[1] = robot.a_ref2;
//   a_ref3.y[1] = robot.a_ref3;
//   a_ref4.y[1] = robot.a_ref4;
//   a_ref5.y[1] = robot.a_ref5;
//   a_ref6.y[1] = robot.a_ref6;
// end MultiBody.Examples.Robots.r3.robot;
// "
// "[robotTotal.mo:4190:7-4190:75:writable] Warning: Component Length has the same name as its type MultiBody.Parts.ShapeBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// [robotTotal.mo:4100:7-4100:73:writable] Warning: Component Length has the same name as its type MultiBody.Parts.BoxBody.SI.Length.
// 	This is forbidden by Modelica specifications and may lead to lookup errors.
// "
// endResult
