//name:        Modelica.Blocks [version 3.1]
//keyword:     instantiating MSL 3.1 Modelica.Blocks
//status:      correct
//
// instantiate/check model example
// Many of these models use parameters with unknown dimensions, so it's not
// possible to instantiate them.
//

loadFile("Modelica/package.mo"); getErrorString();

checkModel(Modelica.Blocks.Continuous.TransferFunction); getErrorString();

checkModel(Modelica.Blocks.Continuous.StateSpace); getErrorString();

//instantiateModel(Modelica.Blocks.Examples.BusUsage); getErrorString();
//checkModel(Modelica.Blocks.Examples.BusUsage); getErrorString();

//instantiateModel(Modelica.Blocks.Examples.BusUsage_Utilities.Part); getErrorString();
//checkModel(Modelica.Blocks.Examples.BusUsage_Utilities.Part); getErrorString();

checkModel(Modelica.Blocks.Tables.CombiTable1D); getErrorString();
checkModel(Modelica.Blocks.Tables.CombiTable1Ds); getErrorString();

instantiateModel(Modelica.Blocks.Tables.CombiTable2D); getErrorString();
checkModel(Modelica.Blocks.Tables.CombiTable2D); getErrorString();

checkModel(Modelica.Blocks.Sources.KinematicPTP); getErrorString();
checkModel(Modelica.Blocks.Sources.KinematicPTP2); getErrorString();

checkModel(Modelica.Blocks.Sources.TimeTable); getErrorString();

instantiateModel(Modelica.Blocks.Sources.CombiTimeTable); getErrorString();
checkModel(Modelica.Blocks.Sources.CombiTimeTable); getErrorString();

checkModel(Modelica.Blocks.Sources.BooleanTable); getErrorString();

// Result:
// true
// ""
// "Check of Modelica.Blocks.Continuous.TransferFunction completed successfully.
// 
// 
// Class Modelica.Blocks.Continuous.TransferFunction has 1 equation(s) and 3 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Continuous.StateSpace completed successfully.
// 
// 
// Class Modelica.Blocks.Continuous.StateSpace has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable1D completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable1D has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable1Ds completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable1Ds has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Tables.CombiTable2D.tableInit
//   input String tableName;
//   input String fileName;
//   input Real table;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   output Integer tableID;
// 
// external "C";
// end Modelica.Blocks.Tables.CombiTable2D.tableInit;
// 
// function Modelica.Blocks.Tables.CombiTable2D.tableIpo
//   input Integer tableID;
//   input Real u1;
//   input Real u2;
//   output Real value;
// 
// external "C";
// end Modelica.Blocks.Tables.CombiTable2D.tableIpo;
// 
// class Modelica.Blocks.Tables.CombiTable2D
//   input Real u1 "Connector of Real input signal 1";
//   input Real u2 "Connector of Real input signal 2";
//   output Real y "Connector of Real output signal";
//   parameter Boolean tableOnFile = false "true, if table is defined on file or in function usertab";
//   parameter String tableName = "NoName" "table name on file or in function usertab (see docu)";
//   parameter String fileName = "NoName" "file where matrix is stored";
//   parameter enumeration(LinearSegments, ContinuousDerivative) smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "smoothness of table interpolation";
//   protected Integer tableID;
// equation
//   assert(false,"tableOnFile = false and parameter table is an empty matrix");
//   y = Modelica.Blocks.Tables.CombiTable2D.tableIpo(tableID,u1,u2);
//   when initial() then
//   tableID = Modelica.Blocks.Tables.CombiTable2D.tableInit(if tableOnFile then tableName else "NoName",if tableOnFile then fileName else "NoName",{{}},smoothness);
//   end when;
// end Modelica.Blocks.Tables.CombiTable2D;
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable2D completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable2D has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.KinematicPTP completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.KinematicPTP has 11 equation(s) and 11 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.KinematicPTP2 completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.KinematicPTP2 has 31 equation(s) and 31 variable(s).
// 1 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.TimeTable completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.TimeTable has 5 equation(s) and 5 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit
//   input String tableName;
//   input String fileName;
//   input Real table;
//   input Real startTime;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   input enumeration(HoldLastPoint, LastTwoPoints, Periodic) extrapolation;
//   output Integer tableID;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real timeIn;
//   output Real value;
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax
//   input Integer tableID;
//   output Real Tmax "maximum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin
//   input Integer tableID;
//   output Real Tmin "minimum time value in table";
// 
// external "C";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin;
// 
// class Modelica.Blocks.Sources.CombiTimeTable
//   parameter Integer nout(min = 1) = 1 "Number of outputs";
//   output Real y[1] "Connector of Real output signals";
//   parameter Boolean tableOnFile = false "= true, if table is defined on file or in function usertab";
//   parameter String tableName = "NoName" "Table name on file or in function usertab (see docu)";
//   parameter String fileName = "NoName" "File where matrix is stored";
//   parameter Integer columns[1] = 2 "Columns of table to be interpolated";
//   parameter enumeration(LinearSegments, ContinuousDerivative) smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments "Smoothness of table interpolation";
//   parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic) extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints "Extrapolation of data outside the definition range";
//   parameter Real offset[1] = 0.0 "Offsets of output signals";
//   parameter Real startTime(quantity = "Time", unit = "s") = 0.0 "Output = offset for time < startTime";
//   parameter Real t_min(fixed = false) "Minimum abscissa value defined in table";
//   parameter Real t_max(fixed = false) "Maximum abscissa value defined in table";
//   protected parameter Real p_offset[1] = offset[1];
//   protected Integer tableID;
// initial equation
//   t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(tableID);
//   t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(tableID);
// equation
//   assert(false,"tableOnFile = false and parameter table is an empty matrix");
//   y[1] = p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(tableID,columns[1],time);
//   when initial() then
//   tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(if  NOT tableOnFile then "NoName" else tableName,if  NOT tableOnFile then "NoName" else fileName,{{}},startTime,smoothness,extrapolation);
//   end when;
// end Modelica.Blocks.Sources.CombiTimeTable;
// "
// ""
// "Check of Modelica.Blocks.Sources.CombiTimeTable completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.CombiTimeTable has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.BooleanTable completed successfully.
// 
// Error: The language feature initial algorithm is not supported. Suggested workaround: rewrite initial algorithms to initial equations
// 
// Class Modelica.Blocks.Sources.BooleanTable has 3 equation(s) and 3 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// endResult
