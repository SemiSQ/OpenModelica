//name:        Modelica.Blocks [version 3.1]
//keyword:     instantiating MSL 3.1 Modelica.Blocks
//status:      correct
//env: OPENMODELICALIBRARY=../../../libraries/msl31/
//
// instantiate/check model example
// Many of these models use parameters with unknown dimensions, so it's not
// possible to instantiate them.
//

loadModel(Modelica); getErrorString();

checkModel(Modelica.Blocks.Continuous.TransferFunction); getErrorString();

checkModel(Modelica.Blocks.Continuous.StateSpace); getErrorString();

instantiateModel(Modelica.Blocks.Examples.BusUsage); getErrorString();
checkModel(Modelica.Blocks.Examples.BusUsage); getErrorString();

instantiateModel(Modelica.Blocks.Examples.BusUsage_Utilities.Part); getErrorString();
checkModel(Modelica.Blocks.Examples.BusUsage_Utilities.Part); getErrorString();

checkModel(Modelica.Blocks.Tables.CombiTable1D); getErrorString();
checkModel(Modelica.Blocks.Tables.CombiTable1Ds); getErrorString();

instantiateModel(Modelica.Blocks.Tables.CombiTable2D); getErrorString();
checkModel(Modelica.Blocks.Tables.CombiTable2D); getErrorString();

checkModel(Modelica.Blocks.Sources.KinematicPTP); getErrorString();
checkModel(Modelica.Blocks.Sources.KinematicPTP2); getErrorString();

checkModel(Modelica.Blocks.Sources.TimeTable); getErrorString();

instantiateModel(Modelica.Blocks.Sources.CombiTimeTable); getErrorString();
checkModel(Modelica.Blocks.Sources.CombiTimeTable); getErrorString();

checkModel(Modelica.Blocks.Sources.BooleanTable); getErrorString();

// Result:
// true
// ""
// "Check of Modelica.Blocks.Continuous.TransferFunction completed successfully.
// 
// [Continuous.mo:1211:5-1213:50:writable] Warning: Failed to deduce dimensions of x_start due to unknown dimensions of modifier fill(0,nx).
// [Continuous.mo:1224:5-1224:61:writable] Warning: Failed to deduce dimensions of bb due to unknown dimensions of modifier vector(DAE.CAST(/tp:REAL[:, :]/, cat(1,fill(0,max(0,na - nb),1),{{b[1]}}))).
// [Continuous.mo:1211:5-1213:50:writable] Warning: Failed to deduce dimensions of x_start due to unknown dimensions of modifier fill(0,nx).
// 
// Class Modelica.Blocks.Continuous.TransferFunction has 1 equation(s) and 3 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Continuous.StateSpace completed successfully.
// 
// [Continuous.mo:1329:5-1330:50:writable] Warning: Failed to deduce dimensions of x_start due to unknown dimensions of modifier fill(0,nx).
// [Continuous.mo:1331:5-1334:31:writable] Warning: Failed to deduce dimensions of y_start due to unknown dimensions of modifier fill(0,ny).
// 
// Class Modelica.Blocks.Continuous.StateSpace has 2 equation(s) and 2 variable(s).
// 1 of these are trivial equation(s).
// "
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
// external \"C\";
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
// external \"C\";
// end Modelica.Math.sin;
// 
// class Modelica.Blocks.Examples.BusUsage
//   output Integer integerStep.y \"Connector of Integer output signal\";
//   parameter Integer integerStep.offset = 2 \"Offset of output signal y\";
//   parameter Real integerStep.startTime(quantity = \"Time\", unit = \"s\") = 0.5 \"Output y = offset for time < startTime\";
//   parameter Integer integerStep.height = 1 \"Height of step\";
//   output Boolean booleanStep.y \"Connector of Boolean output signal\";
//   parameter Real booleanStep.startTime(quantity = \"Time\", unit = \"s\") = 0.5 \"Time instant of step start\";
//   parameter Boolean booleanStep.startValue = false \"Output before startTime\";
//   output Real sine.y \"Connector of Real output signal\";
//   parameter Real sine.amplitude = 1.0 \"Amplitude of sine wave\";
//   parameter Real sine.freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 1.0 \"Frequency of sine wave\";
//   parameter Real sine.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Phase of sine wave\";
//   parameter Real sine.offset = 0.0 \"Offset of output signal\";
//   parameter Real sine.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   protected constant Real sine.pi = 3.14159265358979;
//   output Real part.realExpression.y = time \"Value of Real output\";
//   output Boolean part.booleanExpression.y = time > 0.5 \"Value of Boolean output\";
//   Real part.subControlBus.myRealSignal \"virtual variable in expandable connector\";
//   Boolean part.subControlBus.myBooleanSignal \"virtual variable in expandable connector\";
//   parameter Real gain.k(start = 1.0) = 1.0 \"Gain value multiplied with input signal\";
//   input Real gain.u \"Input signal connector\";
//   output Real gain.y \"Output signal connector\";
//   Real controlBus.realSignal1 \"virtual variable in expandable connector\";
//   Boolean controlBus.booleanSignal \"virtual variable in expandable connector\";
//   Integer controlBus.integerSignal \"virtual variable in expandable connector\";
//   Real controlBus.subControlBus.myRealSignal \"virtual variable in expandable connector\";
//   Boolean controlBus.subControlBus.myBooleanSignal \"virtual variable in expandable connector\";
// equation
//   integerStep.y = integerStep.offset + (if time < integerStep.startTime then 0 else integerStep.height);
//   booleanStep.y = if time >= booleanStep.startTime then  not booleanStep.startValue else booleanStep.startValue;
//   sine.y = sine.offset + (if time < sine.startTime then 0.0 else sine.amplitude * sin(6.28318530717959 * (sine.freqHz * (time - sine.startTime)) + sine.phase));
//   gain.y = gain.k * gain.u;
//   controlBus.realSignal1 = gain.u;
//   controlBus.realSignal1 = sine.y;
//   controlBus.subControlBus.myBooleanSignal = part.subControlBus.myBooleanSignal;
//   controlBus.subControlBus.myRealSignal = part.subControlBus.myRealSignal;
//   controlBus.integerSignal = integerStep.y;
//   booleanStep.y = controlBus.booleanSignal;
//   part.booleanExpression.y = part.subControlBus.myBooleanSignal;
//   part.realExpression.y = part.subControlBus.myRealSignal;
// end Modelica.Blocks.Examples.BusUsage;
// "
// ""
// "Check of Modelica.Blocks.Examples.BusUsage completed successfully.
// 
// 
// Class Modelica.Blocks.Examples.BusUsage has 14 equation(s) and 14 variable(s).
// 8 of these are trivial equation(s).
// "
// ""
// "class Modelica.Blocks.Examples.BusUsage_Utilities.Part
//   output Real realExpression.y = time \"Value of Real output\";
//   output Boolean booleanExpression.y = time > 0.5 \"Value of Boolean output\";
//   Real subControlBus.myRealSignal \"virtual variable in expandable connector\";
//   Boolean subControlBus.myBooleanSignal \"virtual variable in expandable connector\";
// equation
//   booleanExpression.y = subControlBus.myBooleanSignal;
//   realExpression.y = subControlBus.myRealSignal;
// end Modelica.Blocks.Examples.BusUsage_Utilities.Part;
// "
// ""
// "Check of Modelica.Blocks.Examples.BusUsage_Utilities.Part completed successfully.
// 
// 
// Class Modelica.Blocks.Examples.BusUsage_Utilities.Part has 4 equation(s) and 4 variable(s).
// 2 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable1D completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable1D has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable1Ds completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable1Ds has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Tables.CombiTable2D.tableInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   output Integer tableID;
// 
// external \"C\";
// end Modelica.Blocks.Tables.CombiTable2D.tableInit;
// 
// function Modelica.Blocks.Tables.CombiTable2D.tableIpo
//   input Integer tableID;
//   input Real u1;
//   input Real u2;
//   output Real value;
// 
// external \"C\";
// end Modelica.Blocks.Tables.CombiTable2D.tableIpo;
// 
// class Modelica.Blocks.Tables.CombiTable2D
//   input Real u1 \"Connector of Real input signal 1\";
//   input Real u2 \"Connector of Real input signal 2\";
//   output Real y \"Connector of Real output signal\";
//   parameter Boolean tableOnFile = false \"true, if table is defined on file or in function usertab\";
//   parameter String tableName = \"NoName\" \"table name on file or in function usertab (see docu)\";
//   parameter String fileName = \"NoName\" \"file where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"smoothness of table interpolation\";
//   protected Integer tableID;
// equation
//   assert(false,\"tableOnFile = false and parameter table is an empty matrix\");
//   y = Modelica.Blocks.Tables.CombiTable2D.tableIpo(tableID,u1,u2);
//   when initial() then
//   tableID = Modelica.Blocks.Tables.CombiTable2D.tableInit(if tableOnFile then tableName else \"NoName\",if tableOnFile then fileName else \"NoName\",{{}},smoothness);
//   end when;
// end Modelica.Blocks.Tables.CombiTable2D;
// "
// ""
// "Check of Modelica.Blocks.Tables.CombiTable2D completed successfully.
// 
// 
// Class Modelica.Blocks.Tables.CombiTable2D has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.KinematicPTP completed successfully.
// 
// [Sources.mo:1493:9-1494:35:writable] Warning: Failed to deduce dimensions of p_deltaq due to unknown dimensions of modifier if (size(deltaq,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * deltaq[1] else deltaq.
// [Sources.mo:1495:9-1496:35:writable] Warning: Failed to deduce dimensions of p_qd_max due to unknown dimensions of modifier if (size(qd_max,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * qd_max[1] else qd_max.
// [Sources.mo:1497:9-1498:38:writable] Warning: Failed to deduce dimensions of p_qdd_max due to unknown dimensions of modifier if (size(qdd_max,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * qdd_max[1] else qdd_max.
// 
// Class Modelica.Blocks.Sources.KinematicPTP has 11 equation(s) and 11 variable(s).
// 9 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.KinematicPTP2 completed successfully.
// 
// [Sources.mo:1682:5-1683:33:writable] Warning: Failed to deduce dimensions of p_q_begin due to unknown dimensions of modifier DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * q_begin[1].
// [Sources.mo:1684:5-1685:29:writable] Warning: Failed to deduce dimensions of p_q_end due to unknown dimensions of modifier if (size(q_end,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * q_end[1] else q_end.
// [Sources.mo:1686:5-1687:31:writable] Warning: Failed to deduce dimensions of p_qd_max due to unknown dimensions of modifier if (size(qd_max,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * qd_max[1] else qd_max.
// [Sources.mo:1688:5-1689:33:writable] Warning: Failed to deduce dimensions of p_qdd_max due to unknown dimensions of modifier if (size(qdd_max,1)) == (1) then DAE.CAST(/tp:REAL[:]/, fill(1,nout)) * qdd_max[1] else qdd_max.
// [Sources.mo:1690:5-1690:54:writable] Warning: Failed to deduce dimensions of p_deltaq due to unknown dimensions of modifier p_q_end - p_q_begin.
// 
// Class Modelica.Blocks.Sources.KinematicPTP2 has 31 equation(s) and 31 variable(s).
// 20 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.TimeTable completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.TimeTable has 5 equation(s) and 5 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input Real startTime;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   input enumeration(HoldLastPoint, LastTwoPoints, Periodic) extrapolation;
//   output Integer tableID;
// 
// external \"C\";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real timeIn;
//   output Real value;
// 
// external \"C\";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax
//   input Integer tableID;
//   output Real Tmax \"maximum time value in table\";
// 
// external \"C\";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin
//   input Integer tableID;
//   output Real Tmin \"minimum time value in table\";
// 
// external \"C\";
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin;
// 
// class Modelica.Blocks.Sources.CombiTimeTable
//   parameter Integer nout(min = 1) = 1 \"Number of outputs\";
//   output Real y[1] \"Connector of Real output signals\";
//   parameter Boolean tableOnFile = false \"= true, if table is defined on file or in function usertab\";
//   parameter String tableName = \"NoName\" \"Table name on file or in function usertab (see docu)\";
//   parameter String fileName = \"NoName\" \"File where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"Smoothness of table interpolation\";
//   parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic) extrapolation = Modelica.Blocks.Types.Extrapolation.LastTwoPoints \"Extrapolation of data outside the definition range\";
//   parameter Real offset[1] = 0.0 \"Offsets of output signals\";
//   parameter Real startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   final parameter Real t_min(fixed = false) \"Minimum abscissa value defined in table\";
//   final parameter Real t_max(fixed = false) \"Maximum abscissa value defined in table\";
//   protected Integer tableID;
//   parameter Integer columns[1] = 2 \"Columns of table to be interpolated\";
//   protected final parameter Real p_offset[1] = offset[1];
// initial equation
//   t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(tableID);
//   t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(tableID);
// equation
//   assert(false,\"tableOnFile = false and parameter table is an empty matrix\");
//   y[1] = p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(tableID,columns[1],time);
//   when initial() then
//   tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(if  not tableOnFile then \"NoName\" else tableName,if  not tableOnFile then \"NoName\" else fileName,{{}},startTime,smoothness,extrapolation);
//   end when;
// end Modelica.Blocks.Sources.CombiTimeTable;
// "
// ""
// "Check of Modelica.Blocks.Sources.CombiTimeTable completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.CombiTimeTable has 2 equation(s) and 2 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// "Check of Modelica.Blocks.Sources.BooleanTable completed successfully.
// 
// 
// Class Modelica.Blocks.Sources.BooleanTable has 3 equation(s) and 3 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// endResult
