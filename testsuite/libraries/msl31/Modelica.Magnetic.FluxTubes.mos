//name:        Modelica.Magnetic.FluxTubes [version 3.1]
//keyword:     instantiating MSL 3.1 Modelica.Magnetic.FluxTubes
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica,{"3.1"}); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper); getErrorString();

instantiateModel(Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign); getErrorString();
checkModel(Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign); getErrorString();

// Result:
// true
// ""
// "function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.0;
//   input Real c_a = 1.0;
//   input Real c_b = 1.0;
//   input Real n = 1.0;
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.ElectricSheet.M350_50A \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.ElectricSheet.M350_50A\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1210.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.16;
//   input Real c_a = 24630.0;
//   input Real c_b = 2.44;
//   input Real n = 14.0;
//   output M350_50A res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.ElectricSheet.M350_50A;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox \"Approximation of relative permeability mu_r as a function of flux density B for soft magnetic materials\"
//   input Real B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density in ferromagnetic flux tube element\";
//   input Real mu_i(quantity = \"RelativePermeability\", unit = \"1\") \"Initial relative permeability at B=0\";
//   input Real B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density at maximum relative permeability\";
//   input Real c_a \"Coefficient of approximation function\";
//   input Real c_b \"Coefficient of approximation function\";
//   input Real n \"Exponent of approximation function\";
//   output Real mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability of ferromagnetic flux tube element\";
//   protected Real B_N \"Flux density B normalized to flux density at maximum relative permeability B_myMax\";
// algorithm
//   B_N := abs(B / B_myMax);
//   mu_r := 1.0 + (-1.0 + mu_i + c_a * B_N) / (1.0 + c_b * B_N + B_N ^ n);
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = sin(u);
// end Modelica.Math.sin;
// 
// class Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor
//   Real ground_m.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real ground_m.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real source.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real source.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real source.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real source.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real source.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real source.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real source.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real source.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real source.signalSource.y \"Connector of Real output signal\";
//   parameter Real source.signalSource.amplitude = source.V \"Amplitude of sine wave\";
//   parameter Real source.signalSource.freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = source.freqHz \"Frequency of sine wave\";
//   parameter Real source.signalSource.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = source.phase \"Phase of sine wave\";
//   parameter Real source.signalSource.offset = source.offset \"Offset of output signal\";
//   parameter Real source.signalSource.startTime(quantity = \"Time\", unit = \"s\") = source.startTime \"Output = offset for time < startTime\";
//   protected constant Real source.signalSource.pi = 3.14159265358979;
//   parameter Real source.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = 325.269119345812 \"Amplitude of sine wave\";
//   parameter Real source.phase(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 1.5707963267949 \"Phase of sine wave\";
//   parameter Real source.freqHz(quantity = \"Frequency\", unit = \"Hz\", start = 1.0) = 50.0 \"Frequency of sine wave\";
//   Real r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = 7.5 \"Resistance at temperature T_ref\";
//   parameter Real r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real coil.N(start = 1.0) = 600.0 \"Number of turns\";
//   Real coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real coil.eps = 1e-13;
//   Real r_mLeak.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mLeak.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mLeak.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mLeak.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mLeak.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real r_mLeak.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Real r_mLeak.R_m(quantity = \"Reluctance\", unit = \"H-1\", start = 1.0) = 1200000.0 \"Magnetic reluctance\";
//   Real r_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real r_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean r_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real r_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real r_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real r_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real r_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real r_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real r_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real r_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real r_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real r_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real r_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real r_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real r_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real r_mAirPar.l(quantity = \"Length\", unit = \"m\") = 0.0001 \"Length in direction of flux\";
//   parameter Real r_mAirPar.a(quantity = \"Length\", unit = \"m\") = 0.025 \"Width of rectangular cross-section\";
//   parameter Real r_mAirPar.b(quantity = \"Length\", unit = \"m\") = 0.025 \"Height of rectangular cross-section\";
//   Real r_mFe.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mFe.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mFe.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real r_mFe.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real r_mFe.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real r_mFe.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean r_mFe.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real r_mFe.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1000.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real r_mFe.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1210.0 \"Initial relative permeability at B=0\";
//   parameter Real r_mFe.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.16 \"Flux density at maximum relative permeability\";
//   parameter Real r_mFe.material.c_a = 24630.0 \"Coefficient of approximation function\";
//   parameter Real r_mFe.material.c_b = 2.44 \"Coefficient of approximation function\";
//   parameter Real r_mFe.material.n = 14.0 \"Exponent of approximation function\";
//   Real r_mFe.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real r_mFe.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real r_mFe.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real r_mFe.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real r_mFe.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real r_mFe.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real r_mFe.l(quantity = \"Length\", unit = \"m\") = 0.26 \"Length in direction of flux\";
//   parameter Real r_mFe.a(quantity = \"Length\", unit = \"m\") = 0.025 \"Width of rectangular cross-section\";
//   parameter Real r_mFe.b(quantity = \"Length\", unit = \"m\") = 0.025 \"Height of rectangular cross-section\";
//   Real ground.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real ground.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
// equation
//   ground_m.port.V_m = 0.0;
//   source.signalSource.y = source.signalSource.offset + (if time < source.signalSource.startTime then 0.0 else source.signalSource.amplitude * sin(6.28318530717959 * (source.signalSource.freqHz * (time - source.signalSource.startTime)) + source.signalSource.phase));
//   source.v = source.signalSource.y;
//   source.v = source.p.v - source.n.v;
//   0.0 = source.p.i + source.n.i;
//   source.i = source.p.i;
//   assert(1.0 + r.alpha * (r.T_heatPort - r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r.R_actual = r.R * (1.0 + r.alpha * (r.T_heatPort - r.T_ref));
//   r.v = r.R_actual * r.i;
//   r.LossPower = r.v * r.i;
//   r.i = r.p.i;
//   0.0 = r.p.i + r.n.i;
//   r.v = r.p.v - r.n.v;
//   r.T_heatPort = r.T;
//   coil.v = coil.p.v - coil.n.v;
//   0.0 = coil.p.i + coil.n.i;
//   coil.i = coil.p.i;
//   coil.V_m = coil.port_p.V_m - coil.port_n.V_m;
//   0.0 = coil.port_p.Phi + coil.port_n.Phi;
//   coil.Phi = coil.port_p.Phi;
//   coil.V_m = coil.i * coil.N;
//   coil.N * der(coil.Phi) = -coil.v;
//   coil.Psi = coil.N * coil.Phi;
//   coil.L_stat = if noEvent(abs(coil.i) > coil.eps) then abs(coil.Psi / coil.i) else abs(coil.Psi / coil.eps);
//   r_mLeak.V_m = r_mLeak.Phi * r_mLeak.R_m;
//   r_mLeak.V_m = r_mLeak.port_p.V_m - r_mLeak.port_n.V_m;
//   r_mLeak.Phi = r_mLeak.port_p.Phi;
//   0.0 = r_mLeak.port_p.Phi + r_mLeak.port_n.Phi;
//   r_mAirPar.A = r_mAirPar.a * r_mAirPar.b;
//   r_mAirPar.G_m = (1.25663706143592e-06 * (r_mAirPar.mu_r * r_mAirPar.A)) / r_mAirPar.l;
//   r_mAirPar.H = r_mAirPar.B / (r_mAirPar.mu_r * 1.25663706143592e-06);
//   r_mAirPar.B = r_mAirPar.Phi / r_mAirPar.A;
//   r_mAirPar.V_m = r_mAirPar.Phi * r_mAirPar.R_m;
//   r_mAirPar.R_m = 1.0 / r_mAirPar.G_m;
//   r_mAirPar.mu_r = if r_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(r_mAirPar.B,r_mAirPar.material.mu_i,r_mAirPar.material.B_myMax,r_mAirPar.material.c_a,r_mAirPar.material.c_b,r_mAirPar.material.n) else r_mAirPar.mu_rConst;
//   r_mAirPar.V_m = r_mAirPar.port_p.V_m - r_mAirPar.port_n.V_m;
//   r_mAirPar.Phi = r_mAirPar.port_p.Phi;
//   0.0 = r_mAirPar.port_p.Phi + r_mAirPar.port_n.Phi;
//   r_mFe.A = r_mFe.a * r_mFe.b;
//   r_mFe.G_m = (1.25663706143592e-06 * (r_mFe.mu_r * r_mFe.A)) / r_mFe.l;
//   r_mFe.H = r_mFe.B / (r_mFe.mu_r * 1.25663706143592e-06);
//   r_mFe.B = r_mFe.Phi / r_mFe.A;
//   r_mFe.V_m = r_mFe.Phi * r_mFe.R_m;
//   r_mFe.R_m = 1.0 / r_mFe.G_m;
//   r_mFe.mu_r = if r_mFe.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(r_mFe.B,r_mFe.material.mu_i,r_mFe.material.B_myMax,r_mFe.material.c_a,r_mFe.material.c_b,r_mFe.material.n) else r_mFe.mu_rConst;
//   r_mFe.V_m = r_mFe.port_p.V_m - r_mFe.port_n.V_m;
//   r_mFe.Phi = r_mFe.port_p.Phi;
//   0.0 = r_mFe.port_p.Phi + r_mFe.port_n.Phi;
//   ground.p.v = 0.0;
//   ground_m.port.Phi + coil.port_n.Phi + r_mLeak.port_n.Phi + r_mFe.port_n.Phi = 0.0;
//   source.p.i + r.p.i = 0.0;
//   source.n.i + coil.n.i + ground.p.i = 0.0;
//   r.n.i + coil.p.i = 0.0;
//   coil.port_p.Phi + r_mLeak.port_p.Phi + r_mAirPar.port_p.Phi = 0.0;
//   r_mAirPar.port_n.Phi + r_mFe.port_p.Phi = 0.0;
//   r.p.v = source.p.v;
//   coil.p.v = r.n.v;
//   coil.n.v = ground.p.v;
//   coil.n.v = source.n.v;
//   coil.port_p.V_m = r_mAirPar.port_p.V_m;
//   coil.port_p.V_m = r_mLeak.port_p.V_m;
//   r_mAirPar.port_n.V_m = r_mFe.port_p.V_m;
//   coil.port_n.V_m = ground_m.port.V_m;
//   coil.port_n.V_m = r_mFe.port_n.V_m;
//   coil.port_n.V_m = r_mLeak.port_n.V_m;
// end Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.SaturatedInductor has 65 equation(s) and 65 variable(s).
// 35 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Tables.CombiTable1Ds.tableInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   output Integer tableID;
// 
//   external \"C\" tableID = ModelicaTables_CombiTable1D_init(tableName, fileName, table, size(table, 1), size(table, 2), smoothness);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableInit;
// 
// function Modelica.Blocks.Tables.CombiTable1Ds.tableIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real u;
//   output Real value;
// 
//   external \"C\" value = ModelicaTables_CombiTable1D_interpolate(tableID, icol, u);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableIpo;
// 
// function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 1.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = 0.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 400000.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 0.58;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = -0.001;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output PlasticNdFeB res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour
//   Real pmGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real pmActuator.N = 140.0 \"Number of turns\";
//   parameter Real pmActuator.R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real pmActuator.r_core(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0125 \"Radius of ferromagnetic stator core\";
//   parameter Real pmActuator.l_PM(quantity = \"Length\", unit = \"m\") = 0.0035 \"Radial thickness of permanent magnet ring\";
//   parameter Real pmActuator.t(quantity = \"Length\", unit = \"m\") = 0.02 \"Axial length of permanent magnet ring and air gap respectively\";
//   parameter Real pmActuator.l_air(quantity = \"Length\", unit = \"m\") = 0.003 \"Total radial length of armature air gap\";
//   parameter Real pmActuator.l_FeOut(quantity = \"Length\", unit = \"m\") = 0.004 \"Radial thickness of outer back iron (for estimation of leakage permeance)\";
//   parameter Real pmActuator.material.H_cBRef(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = 400000.0 \"Coercivity at reference temperature\";
//   parameter Real pmActuator.material.B_rRef(quantity = \"MagneticFluxDensity\", unit = \"T\") = 0.58 \"Remanence at reference temperature\";
//   parameter Real pmActuator.material.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real pmActuator.material.alpha_Br(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.001 \"Temperature coefficient of remanence at reference temperature\";
//   parameter Real pmActuator.material.T_op(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Operating temperature\";
//   final parameter Real pmActuator.material.B_r(quantity = \"MagneticFluxDensity\", unit = \"T\") = pmActuator.material.B_rRef * (1.0 + pmActuator.material.alpha_Br * (pmActuator.material.T_op - pmActuator.material.T_ref)) \"Remanence at operating temperature\";
//   final parameter Real pmActuator.material.H_cB(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = pmActuator.material.H_cBRef * (1.0 + pmActuator.material.alpha_Br * (pmActuator.material.T_op - pmActuator.material.T_ref)) \"Coercivity at operating temperature\";
//   final parameter Real pmActuator.material.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = pmActuator.material.B_r / (pmActuator.material.H_cB * 1.25663706143592e-06) \"Relative permeability\";
//   parameter Real pmActuator.m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Mass of armature\";
//   parameter Real pmActuator.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real pmActuator.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real pmActuator.x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Position of stopper at minimum armature position\";
//   parameter Real pmActuator.x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Position of stopper at maximum armature position\";
//   Real pmActuator.x(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real pmActuator.L(quantity = \"Inductance\", unit = \"H\") \"Coil inductance\";
//   Real pmActuator.mmf_PM.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.mmf_PM.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.mmf_PM.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.mmf_PM.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   parameter Real pmActuator.mmf_PM.V_m(quantity = \"MagneticPotential\", unit = \"A\") = pmActuator.material.H_cB * pmActuator.l_PM \"Magnetic potential differnce\";
//   Real pmActuator.mmf_PM.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Real pmActuator.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real pmActuator.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = pmActuator.m_a \"Armature mass\";
//   parameter Real pmActuator.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = pmActuator.c \"Spring stiffness between impact partners\";
//   parameter Real pmActuator.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = pmActuator.d \"Damping coefficient between impact partners\";
//   parameter Real pmActuator.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real pmActuator.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = pmActuator.x_max \"Position of stopper at maximum armature position\";
//   parameter Real pmActuator.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = pmActuator.x_min \"Position of stopper at minimum armature position\";
//   Real pmActuator.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real pmActuator.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real pmActuator.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real pmActuator.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real pmActuator.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = pmActuator.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = pmActuator.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real pmActuator.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real pmActuator.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real pmActuator.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = pmActuator.armature.x_min \"fixed offset position of housing\";
//   Real pmActuator.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = pmActuator.armature.x_max \"fixed offset position of housing\";
//   Real pmActuator.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real pmActuator.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real pmActuator.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = pmActuator.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real pmActuator.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real pmActuator.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = pmActuator.armature.c \"Spring constant\";
//   parameter Real pmActuator.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = pmActuator.armature.d \"Damping constant\";
//   parameter Real pmActuator.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real pmActuator.armature.stopper_xMax.n(min = 1.0) = pmActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean pmActuator.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real pmActuator.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real pmActuator.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real pmActuator.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real pmActuator.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real pmActuator.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = pmActuator.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real pmActuator.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real pmActuator.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = pmActuator.armature.c \"Spring constant\";
//   parameter Real pmActuator.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = pmActuator.armature.d \"Damping constant\";
//   parameter Real pmActuator.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real pmActuator.armature.stopper_xMin.n(min = 1.0) = pmActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean pmActuator.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real pmActuator.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real pmActuator.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real pmActuator.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real pmActuator.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real pmActuator.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real pmActuator.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean pmActuator.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real pmActuator.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = pmActuator.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real pmActuator.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real pmActuator.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real pmActuator.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = pmActuator.R \"Resistance at temperature T_ref\";
//   parameter Real pmActuator.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real pmActuator.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real pmActuator.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real pmActuator.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real pmActuator.coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, StateSelect = StateSelect.prefer) \"Current\";
//   Real pmActuator.coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real pmActuator.coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real pmActuator.coil.N(start = 1.0) = pmActuator.N \"Number of turns\";
//   Real pmActuator.coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real pmActuator.coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real pmActuator.coil.eps = 1e-13;
//   Real pmActuator.g_ma.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_ma.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_ma.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_ma.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_ma.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_ma.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean pmActuator.g_ma.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real pmActuator.g_ma.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real pmActuator.g_ma.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real pmActuator.g_ma.s(quantity = \"Length\", unit = \"m\") = pmActuator.g_ma.flange.s - pmActuator.g_ma.s_support \"Distance between flange and support\";
//   Real pmActuator.g_ma.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_ma.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real pmActuator.g_ma.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer pmActuator.g_ma.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real pmActuator.g_ma.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.g_ma.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real pmActuator.g_ma.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real pmActuator.g_ma.l(quantity = \"Length\", unit = \"m\") = pmActuator.t / 2.0 + pmActuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real pmActuator.g_ma.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real pmActuator.g_ma.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real pmActuator.g_ma.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real pmActuator.g_ma.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real pmActuator.g_mb.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mb.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mb.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mb.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mb.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mb.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean pmActuator.g_mb.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real pmActuator.g_mb.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real pmActuator.g_mb.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real pmActuator.g_mb.s(quantity = \"Length\", unit = \"m\") = pmActuator.g_mb.flange.s - pmActuator.g_mb.s_support \"Distance between flange and support\";
//   Real pmActuator.g_mb.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mb.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real pmActuator.g_mb.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer pmActuator.g_mb.dlBydx = -1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real pmActuator.g_mb.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.g_mb.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real pmActuator.g_mb.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real pmActuator.g_mb.l(quantity = \"Length\", unit = \"m\") = pmActuator.t / 2.0 - pmActuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real pmActuator.g_mb.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real pmActuator.g_mb.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real pmActuator.g_mb.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real pmActuator.g_mb.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real pmActuator.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real pmActuator.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real pmActuator.g_mLeak1.r_0(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Radius of inner solid cylinder\";
//   parameter Real pmActuator.g_mLeak1.r_1(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.017) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Inner radius of outer hollow cylinder\";
//   parameter Real pmActuator.g_mLeak1.r_2(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = pmActuator.r_core + (pmActuator.l_air + (pmActuator.l_PM + pmActuator.l_FeOut)) \"Outer radius of outer hollow cylinder\";
//   final parameter Real pmActuator.g_mLeak1.l_g(quantity = \"Length\", unit = \"m\", min = 0.0) = pmActuator.g_mLeak1.r_1 - pmActuator.g_mLeak1.r_0 \"Radial gap length between both cylinders\";
//   final parameter Real pmActuator.g_mLeak1.t(quantity = \"Length\", unit = \"m\") = pmActuator.g_mLeak1.r_2 - pmActuator.g_mLeak1.r_1 \"Radial thickness of outer hollow cylinder\";
//   Real pmActuator.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real pmActuator.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real pmActuator.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (pmActuator.r_core + (pmActuator.l_air / 2.0 + pmActuator.l_PM / 2.0)) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edges)\";
//   Real pmActuator.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmFixedPos.s0(quantity = \"Length\", unit = \"m\") = 0.0 \"fixed offset position of housing\";
//   Real pmFixedPos.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmFixedPos.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmRampCurrent.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real pmRampCurrent.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real pmRampCurrent.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmRampCurrent.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmRampCurrent.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmRampCurrent.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real pmRampCurrent.offset(quantity = \"ElectricCurrent\", unit = \"A\") = 3.0 \"Current offset\";
//   parameter Real pmRampCurrent.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real pmRampCurrent.signalSource.y \"Connector of Real output signal\";
//   parameter Real pmRampCurrent.signalSource.height = pmRampCurrent.I \"Height of ramps\";
//   parameter Real pmRampCurrent.signalSource.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = pmRampCurrent.duration \"Durations of ramp\";
//   parameter Real pmRampCurrent.signalSource.offset = pmRampCurrent.offset \"Offset of output signal\";
//   parameter Real pmRampCurrent.signalSource.startTime(quantity = \"Time\", unit = \"s\") = pmRampCurrent.startTime \"Output = offset for time < startTime\";
//   parameter Real pmRampCurrent.I(quantity = \"ElectricCurrent\", unit = \"A\", start = 1.0) = -6.0 \"Height of ramp\";
//   parameter Real pmRampCurrent.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = 6.0 \"Duration of ramp\";
//   Real cGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real cFixedPos.s0(quantity = \"Length\", unit = \"m\") = 0.0 \"fixed offset position of housing\";
//   Real cFixedPos.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cFixedPos.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cRampCurrent.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cRampCurrent.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real cRampCurrent.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cRampCurrent.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cRampCurrent.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cRampCurrent.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real cRampCurrent.offset(quantity = \"ElectricCurrent\", unit = \"A\") = 3.0 \"Current offset\";
//   parameter Real cRampCurrent.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real cRampCurrent.signalSource.y \"Connector of Real output signal\";
//   parameter Real cRampCurrent.signalSource.height = cRampCurrent.I \"Height of ramps\";
//   parameter Real cRampCurrent.signalSource.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = cRampCurrent.duration \"Durations of ramp\";
//   parameter Real cRampCurrent.signalSource.offset = cRampCurrent.offset \"Offset of output signal\";
//   parameter Real cRampCurrent.signalSource.startTime(quantity = \"Time\", unit = \"s\") = cRampCurrent.startTime \"Output = offset for time < startTime\";
//   parameter Real cRampCurrent.I(quantity = \"ElectricCurrent\", unit = \"A\", start = 1.0) = -6.0 \"Height of ramp\";
//   parameter Real cRampCurrent.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = 6.0 \"Duration of ramp\";
//   parameter Real cActuator.k(quantity = \"ElectricalForceConstant\", unit = \"N/A\") = 3.88 \"Converter constant\";
//   parameter Real cActuator.R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real cActuator.L(quantity = \"Inductance\", unit = \"H\") = 0.0051 \"Coil inductance at mid-stroke\";
//   parameter Real cActuator.m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Armature mass\";
//   parameter Real cActuator.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real cActuator.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real cActuator.x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Minimum armature position\";
//   parameter Real cActuator.x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Maximum armature position\";
//   Real cActuator.x(quantity = \"Length\", unit = \"m\", start = cActuator.x_min, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real cActuator.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cActuator.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real cActuator.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean cActuator.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real cActuator.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = cActuator.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real cActuator.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real cActuator.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real cActuator.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = cActuator.R \"Resistance at temperature T_ref\";
//   parameter Real cActuator.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real cActuator.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real cActuator.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   parameter Real cActuator.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real cActuator.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cActuator.m_a \"Armature mass\";
//   parameter Real cActuator.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = cActuator.c \"Spring stiffness between impact partners\";
//   parameter Real cActuator.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = cActuator.d \"Damping coefficient between impact partners\";
//   parameter Real cActuator.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real cActuator.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = cActuator.x_max \"Position of stopper at maximum armature position\";
//   parameter Real cActuator.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = cActuator.x_min \"Position of stopper at minimum armature position\";
//   Real cActuator.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real cActuator.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real cActuator.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real cActuator.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real cActuator.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = cActuator.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cActuator.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real cActuator.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real cActuator.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real cActuator.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = cActuator.armature.x_min \"fixed offset position of housing\";
//   Real cActuator.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = cActuator.armature.x_max \"fixed offset position of housing\";
//   Real cActuator.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real cActuator.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real cActuator.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = cActuator.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real cActuator.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real cActuator.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = cActuator.armature.c \"Spring constant\";
//   parameter Real cActuator.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = cActuator.armature.d \"Damping constant\";
//   parameter Real cActuator.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real cActuator.armature.stopper_xMax.n(min = 1.0) = cActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean cActuator.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real cActuator.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real cActuator.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real cActuator.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real cActuator.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real cActuator.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = cActuator.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real cActuator.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real cActuator.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = cActuator.armature.c \"Spring constant\";
//   parameter Real cActuator.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = cActuator.armature.d \"Damping constant\";
//   parameter Real cActuator.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real cActuator.armature.stopper_xMin.n(min = 1.0) = cActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean cActuator.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real cActuator.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real cActuator.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real cActuator.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real cActuator.l.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cActuator.l.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real cActuator.l.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.l.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.l.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.l.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real cActuator.l.L(quantity = \"Inductance\", unit = \"H\", start = 1.0) = cActuator.L \"Inductance\";
//   parameter Boolean cActuator.electroTranslationalConverter.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real cActuator.electroTranslationalConverter.k(quantity = \"ElectricalForceConstant\", unit = \"N/A\", start = 1.0) = cActuator.k \"Transformation coefficient\";
//   Real cActuator.electroTranslationalConverter.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins\";
//   Real cActuator.electroTranslationalConverter.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from positive to negative pin\";
//   Real cActuator.electroTranslationalConverter.s(quantity = \"Length\", unit = \"m\") \"Position of flange relative to support\";
//   Real cActuator.electroTranslationalConverter.vel(quantity = \"Velocity\", unit = \"m/s\") \"Velocity of flange relative to support\";
//   Real cActuator.electroTranslationalConverter.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.electroTranslationalConverter.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.electroTranslationalConverter.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.electroTranslationalConverter.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.electroTranslationalConverter.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   input Real cActuator.electroTranslationalConverter.internalSupport.f(quantity = \"Force\", unit = \"N\") = -cActuator.electroTranslationalConverter.flange.f \"External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)\";
//   Real cActuator.electroTranslationalConverter.internalSupport.s(quantity = \"Length\", unit = \"m\") \"External support position (= flange.s)\";
//   Real cActuator.electroTranslationalConverter.internalSupport.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.internalSupport.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.electroTranslationalConverter.fixed.s0(quantity = \"Length\", unit = \"m\") = 0.0 \"fixed offset position of housing\";
//   Real cActuator.electroTranslationalConverter.fixed.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.fixed.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Integer comparisonWithFEA.nout = 1 \"Number of outputs\";
//   input Real comparisonWithFEA.u \"Connector of Real input signal\";
//   output Real comparisonWithFEA.y[1] \"Connector of Real output signals\";
//   parameter Boolean comparisonWithFEA.tableOnFile = false \"true, if table is defined on file or in function usertab\";
//   parameter Real comparisonWithFEA.table[1,1] = -3.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,2] = -9.65653 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,1] = -2.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,2] = -8.28587 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,1] = -2.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,2] = -6.82002 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,1] = -1.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,2] = -5.25898 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,1] = -1.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,2] = -3.60274 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,1] = -0.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,2] = -1.85131 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,1] = 0.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,2] = -0.00468 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,1] = 0.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,2] = 1.93714 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,1] = 1.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,2] = 3.97415 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,1] = 1.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,2] = 6.10636 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,1] = 2.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,2] = 8.33376 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,1] = 2.5 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,2] = 10.65636 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,1] = 3.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,2] = 13.07415 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter String comparisonWithFEA.tableName = \"NoName\" \"table name on file or in function usertab (see docu)\";
//   parameter String comparisonWithFEA.fileName = \"NoName\" \"file where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) comparisonWithFEA.smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"smoothness of table interpolation\";
//   protected Integer comparisonWithFEA.tableID;
//   parameter Integer comparisonWithFEA.columns[1] = 2 \"columns of table to be interpolated\";
//   Real iSensor.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real iSensor.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real iSensor.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real iSensor.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   output Real iSensor.i \"current in the branch from p to n as output signal\";
// equation
//   pmGround.p.v = 0.0;
//   pmActuator.mmf_PM.V_m = pmActuator.mmf_PM.port_p.V_m - pmActuator.mmf_PM.port_n.V_m;
//   pmActuator.mmf_PM.Phi = pmActuator.mmf_PM.port_p.Phi;
//   0.0 = pmActuator.mmf_PM.port_p.Phi + pmActuator.mmf_PM.port_n.Phi;
//   pmActuator.armature.mass.v = der(pmActuator.armature.mass.s);
//   pmActuator.armature.mass.a = der(pmActuator.armature.mass.v);
//   pmActuator.armature.mass.m * pmActuator.armature.mass.a = pmActuator.armature.mass.flange_a.f + pmActuator.armature.mass.flange_b.f;
//   pmActuator.armature.mass.flange_a.s = pmActuator.armature.mass.s + (-pmActuator.armature.mass.L) / 2.0;
//   pmActuator.armature.mass.flange_b.s = pmActuator.armature.mass.s + pmActuator.armature.mass.L / 2.0;
//   pmActuator.armature.limit_xMin.flange.s = pmActuator.armature.limit_xMin.s0;
//   pmActuator.armature.limit_xMax.flange.s = pmActuator.armature.limit_xMax.s0;
//   pmActuator.armature.stopper_xMax.contact = pmActuator.armature.stopper_xMax.s_rel < pmActuator.armature.stopper_xMax.s_rel0;
//   pmActuator.armature.stopper_xMax.f_c = smooth(1,if pmActuator.armature.stopper_xMax.contact then (-pmActuator.armature.stopper_xMax.c) * abs(pmActuator.armature.stopper_xMax.s_rel - pmActuator.armature.stopper_xMax.s_rel0) ^ pmActuator.armature.stopper_xMax.n else 0.0);
//   pmActuator.armature.stopper_xMax.f_d2 = if pmActuator.armature.stopper_xMax.contact then pmActuator.armature.stopper_xMax.d * pmActuator.armature.stopper_xMax.v_rel else 0.0;
//   pmActuator.armature.stopper_xMax.f_d = if pmActuator.armature.stopper_xMax.contact then if noEvent(pmActuator.armature.stopper_xMax.f_d2 < pmActuator.armature.stopper_xMax.f_c) then pmActuator.armature.stopper_xMax.f_c else if noEvent(pmActuator.armature.stopper_xMax.f_d2 > -pmActuator.armature.stopper_xMax.f_c) then -pmActuator.armature.stopper_xMax.f_c else pmActuator.armature.stopper_xMax.f_d2 else 0.0;
//   pmActuator.armature.stopper_xMax.f = pmActuator.armature.stopper_xMax.f_c + pmActuator.armature.stopper_xMax.f_d;
//   pmActuator.armature.stopper_xMax.s_rel = pmActuator.armature.stopper_xMax.flange_b.s - pmActuator.armature.stopper_xMax.flange_a.s;
//   pmActuator.armature.stopper_xMax.v_rel = der(pmActuator.armature.stopper_xMax.s_rel);
//   pmActuator.armature.stopper_xMax.flange_b.f = pmActuator.armature.stopper_xMax.f;
//   pmActuator.armature.stopper_xMax.flange_a.f = -pmActuator.armature.stopper_xMax.f;
//   pmActuator.armature.stopper_xMin.contact = pmActuator.armature.stopper_xMin.s_rel < pmActuator.armature.stopper_xMin.s_rel0;
//   pmActuator.armature.stopper_xMin.f_c = smooth(1,if pmActuator.armature.stopper_xMin.contact then (-pmActuator.armature.stopper_xMin.c) * abs(pmActuator.armature.stopper_xMin.s_rel - pmActuator.armature.stopper_xMin.s_rel0) ^ pmActuator.armature.stopper_xMin.n else 0.0);
//   pmActuator.armature.stopper_xMin.f_d2 = if pmActuator.armature.stopper_xMin.contact then pmActuator.armature.stopper_xMin.d * pmActuator.armature.stopper_xMin.v_rel else 0.0;
//   pmActuator.armature.stopper_xMin.f_d = if pmActuator.armature.stopper_xMin.contact then if noEvent(pmActuator.armature.stopper_xMin.f_d2 < pmActuator.armature.stopper_xMin.f_c) then pmActuator.armature.stopper_xMin.f_c else if noEvent(pmActuator.armature.stopper_xMin.f_d2 > -pmActuator.armature.stopper_xMin.f_c) then -pmActuator.armature.stopper_xMin.f_c else pmActuator.armature.stopper_xMin.f_d2 else 0.0;
//   pmActuator.armature.stopper_xMin.f = pmActuator.armature.stopper_xMin.f_c + pmActuator.armature.stopper_xMin.f_d;
//   pmActuator.armature.stopper_xMin.s_rel = pmActuator.armature.stopper_xMin.flange_b.s - pmActuator.armature.stopper_xMin.flange_a.s;
//   pmActuator.armature.stopper_xMin.v_rel = der(pmActuator.armature.stopper_xMin.s_rel);
//   pmActuator.armature.stopper_xMin.flange_b.f = pmActuator.armature.stopper_xMin.f;
//   pmActuator.armature.stopper_xMin.flange_a.f = -pmActuator.armature.stopper_xMin.f;
//   pmActuator.armature.mass.s = pmActuator.armature.s;
//   pmActuator.armature.mass.v = pmActuator.armature.v;
//   pmActuator.armature.mass.a = pmActuator.armature.a;
//   assert(1.0 + pmActuator.r.alpha * (pmActuator.r.T_heatPort - pmActuator.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   pmActuator.r.R_actual = pmActuator.r.R * (1.0 + pmActuator.r.alpha * (pmActuator.r.T_heatPort - pmActuator.r.T_ref));
//   pmActuator.r.v = pmActuator.r.R_actual * pmActuator.r.i;
//   pmActuator.r.LossPower = pmActuator.r.v * pmActuator.r.i;
//   pmActuator.r.i = pmActuator.r.p.i;
//   0.0 = pmActuator.r.p.i + pmActuator.r.n.i;
//   pmActuator.r.v = pmActuator.r.p.v - pmActuator.r.n.v;
//   pmActuator.r.T_heatPort = pmActuator.r.T;
//   pmActuator.ground.port.V_m = 0.0;
//   pmActuator.coil.v = pmActuator.coil.p.v - pmActuator.coil.n.v;
//   0.0 = pmActuator.coil.p.i + pmActuator.coil.n.i;
//   pmActuator.coil.i = pmActuator.coil.p.i;
//   pmActuator.coil.V_m = pmActuator.coil.port_p.V_m - pmActuator.coil.port_n.V_m;
//   0.0 = pmActuator.coil.port_p.Phi + pmActuator.coil.port_n.Phi;
//   pmActuator.coil.Phi = pmActuator.coil.port_p.Phi;
//   pmActuator.coil.V_m = pmActuator.coil.i * pmActuator.coil.N;
//   pmActuator.coil.N * der(pmActuator.coil.Phi) = -pmActuator.coil.v;
//   pmActuator.coil.Psi = pmActuator.coil.N * pmActuator.coil.Phi;
//   pmActuator.coil.L_stat = if noEvent(abs(pmActuator.coil.i) > pmActuator.coil.eps) then abs(pmActuator.coil.Psi / pmActuator.coil.i) else abs(pmActuator.coil.Psi / pmActuator.coil.eps);
//   pmActuator.g_ma.G_m = (7.89568352087149e-06 * (pmActuator.g_ma.mu_r * pmActuator.g_ma.l)) / log(pmActuator.g_ma.r_o / pmActuator.g_ma.r_i);
//   pmActuator.g_ma.dGmBydx = (7.89568352087149e-06 * (Real(pmActuator.g_ma.dlBydx) * pmActuator.g_ma.mu_r)) / log(pmActuator.g_ma.r_o / pmActuator.g_ma.r_i);
//   pmActuator.g_ma.A_avg = 3.14159265358979 * ((pmActuator.g_ma.r_i + pmActuator.g_ma.r_o) * pmActuator.g_ma.l);
//   pmActuator.g_ma.B_avg = pmActuator.g_ma.Phi / pmActuator.g_ma.A_avg;
//   pmActuator.g_ma.flange.f = -pmActuator.g_ma.F_m;
//   pmActuator.g_ma.s_support = 0.0;
//   pmActuator.g_ma.F_m = 0.5 * (pmActuator.g_ma.V_m ^ 2.0 * pmActuator.g_ma.dGmBydx);
//   pmActuator.g_ma.R_m = 1.0 / pmActuator.g_ma.G_m;
//   pmActuator.g_ma.V_m = pmActuator.g_ma.Phi * pmActuator.g_ma.R_m;
//   pmActuator.g_ma.V_m = pmActuator.g_ma.port_p.V_m - pmActuator.g_ma.port_n.V_m;
//   pmActuator.g_ma.Phi = pmActuator.g_ma.port_p.Phi;
//   0.0 = pmActuator.g_ma.port_p.Phi + pmActuator.g_ma.port_n.Phi;
//   pmActuator.g_mb.G_m = (7.89568352087149e-06 * (pmActuator.g_mb.mu_r * pmActuator.g_mb.l)) / log(pmActuator.g_mb.r_o / pmActuator.g_mb.r_i);
//   pmActuator.g_mb.dGmBydx = (7.89568352087149e-06 * (Real(pmActuator.g_mb.dlBydx) * pmActuator.g_mb.mu_r)) / log(pmActuator.g_mb.r_o / pmActuator.g_mb.r_i);
//   pmActuator.g_mb.A_avg = 3.14159265358979 * ((pmActuator.g_mb.r_i + pmActuator.g_mb.r_o) * pmActuator.g_mb.l);
//   pmActuator.g_mb.B_avg = pmActuator.g_mb.Phi / pmActuator.g_mb.A_avg;
//   pmActuator.g_mb.flange.f = -pmActuator.g_mb.F_m;
//   pmActuator.g_mb.s_support = 0.0;
//   pmActuator.g_mb.F_m = 0.5 * (pmActuator.g_mb.V_m ^ 2.0 * pmActuator.g_mb.dGmBydx);
//   pmActuator.g_mb.R_m = 1.0 / pmActuator.g_mb.G_m;
//   pmActuator.g_mb.V_m = pmActuator.g_mb.Phi * pmActuator.g_mb.R_m;
//   pmActuator.g_mb.V_m = pmActuator.g_mb.port_p.V_m - pmActuator.g_mb.port_n.V_m;
//   pmActuator.g_mb.Phi = pmActuator.g_mb.port_p.Phi;
//   0.0 = pmActuator.g_mb.port_p.Phi + pmActuator.g_mb.port_n.Phi;
//   pmActuator.g_mLeak1.G_m = if pmActuator.g_mLeak1.t <= pmActuator.g_mLeak1.r_0 then 2.51327412287183e-06 * ((pmActuator.g_mLeak1.r_0 + pmActuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * pmActuator.g_mLeak1.t) / pmActuator.g_mLeak1.l_g)) else 2.51327412287183e-06 * ((pmActuator.g_mLeak1.r_0 + pmActuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * pmActuator.g_mLeak1.r_0) / pmActuator.g_mLeak1.l_g));
//   pmActuator.g_mLeak1.R_m = 1.0 / pmActuator.g_mLeak1.G_m;
//   pmActuator.g_mLeak1.V_m = pmActuator.g_mLeak1.Phi * pmActuator.g_mLeak1.R_m;
//   pmActuator.g_mLeak1.V_m = pmActuator.g_mLeak1.port_p.V_m - pmActuator.g_mLeak1.port_n.V_m;
//   pmActuator.g_mLeak1.Phi = pmActuator.g_mLeak1.port_p.Phi;
//   0.0 = pmActuator.g_mLeak1.port_p.Phi + pmActuator.g_mLeak1.port_n.Phi;
//   pmActuator.g_mLeak2.G_m = 3.26725635973338e-07 * pmActuator.g_mLeak2.l;
//   pmActuator.g_mLeak2.R_m = 1.0 / pmActuator.g_mLeak2.G_m;
//   pmActuator.g_mLeak2.V_m = pmActuator.g_mLeak2.Phi * pmActuator.g_mLeak2.R_m;
//   pmActuator.g_mLeak2.V_m = pmActuator.g_mLeak2.port_p.V_m - pmActuator.g_mLeak2.port_n.V_m;
//   pmActuator.g_mLeak2.Phi = pmActuator.g_mLeak2.port_p.Phi;
//   0.0 = pmActuator.g_mLeak2.port_p.Phi + pmActuator.g_mLeak2.port_n.Phi;
//   pmActuator.x = pmActuator.flange.s;
//   pmActuator.L = pmActuator.coil.N ^ 2.0 * (pmActuator.g_ma.G_m + (pmActuator.g_mLeak1.G_m + pmActuator.g_mLeak2.G_m));
//   pmFixedPos.flange.s = pmFixedPos.s0;
//   pmRampCurrent.signalSource.y = pmRampCurrent.signalSource.offset + (if time < pmRampCurrent.signalSource.startTime then 0.0 else if time < pmRampCurrent.signalSource.startTime + pmRampCurrent.signalSource.duration then ((time - pmRampCurrent.signalSource.startTime) * pmRampCurrent.signalSource.height) / pmRampCurrent.signalSource.duration else pmRampCurrent.signalSource.height);
//   pmRampCurrent.i = pmRampCurrent.signalSource.y;
//   pmRampCurrent.v = pmRampCurrent.p.v - pmRampCurrent.n.v;
//   0.0 = pmRampCurrent.p.i + pmRampCurrent.n.i;
//   pmRampCurrent.i = pmRampCurrent.p.i;
//   cGround.p.v = 0.0;
//   cFixedPos.flange.s = cFixedPos.s0;
//   cRampCurrent.signalSource.y = cRampCurrent.signalSource.offset + (if time < cRampCurrent.signalSource.startTime then 0.0 else if time < cRampCurrent.signalSource.startTime + cRampCurrent.signalSource.duration then ((time - cRampCurrent.signalSource.startTime) * cRampCurrent.signalSource.height) / cRampCurrent.signalSource.duration else cRampCurrent.signalSource.height);
//   cRampCurrent.i = cRampCurrent.signalSource.y;
//   cRampCurrent.v = cRampCurrent.p.v - cRampCurrent.n.v;
//   0.0 = cRampCurrent.p.i + cRampCurrent.n.i;
//   cRampCurrent.i = cRampCurrent.p.i;
//   assert(1.0 + cActuator.r.alpha * (cActuator.r.T_heatPort - cActuator.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   cActuator.r.R_actual = cActuator.r.R * (1.0 + cActuator.r.alpha * (cActuator.r.T_heatPort - cActuator.r.T_ref));
//   cActuator.r.v = cActuator.r.R_actual * cActuator.r.i;
//   cActuator.r.LossPower = cActuator.r.v * cActuator.r.i;
//   cActuator.r.i = cActuator.r.p.i;
//   0.0 = cActuator.r.p.i + cActuator.r.n.i;
//   cActuator.r.v = cActuator.r.p.v - cActuator.r.n.v;
//   cActuator.r.T_heatPort = cActuator.r.T;
//   cActuator.armature.mass.v = der(cActuator.armature.mass.s);
//   cActuator.armature.mass.a = der(cActuator.armature.mass.v);
//   cActuator.armature.mass.m * cActuator.armature.mass.a = cActuator.armature.mass.flange_a.f + cActuator.armature.mass.flange_b.f;
//   cActuator.armature.mass.flange_a.s = cActuator.armature.mass.s + (-cActuator.armature.mass.L) / 2.0;
//   cActuator.armature.mass.flange_b.s = cActuator.armature.mass.s + cActuator.armature.mass.L / 2.0;
//   cActuator.armature.limit_xMin.flange.s = cActuator.armature.limit_xMin.s0;
//   cActuator.armature.limit_xMax.flange.s = cActuator.armature.limit_xMax.s0;
//   cActuator.armature.stopper_xMax.contact = cActuator.armature.stopper_xMax.s_rel < cActuator.armature.stopper_xMax.s_rel0;
//   cActuator.armature.stopper_xMax.f_c = smooth(1,if cActuator.armature.stopper_xMax.contact then (-cActuator.armature.stopper_xMax.c) * abs(cActuator.armature.stopper_xMax.s_rel - cActuator.armature.stopper_xMax.s_rel0) ^ cActuator.armature.stopper_xMax.n else 0.0);
//   cActuator.armature.stopper_xMax.f_d2 = if cActuator.armature.stopper_xMax.contact then cActuator.armature.stopper_xMax.d * cActuator.armature.stopper_xMax.v_rel else 0.0;
//   cActuator.armature.stopper_xMax.f_d = if cActuator.armature.stopper_xMax.contact then if noEvent(cActuator.armature.stopper_xMax.f_d2 < cActuator.armature.stopper_xMax.f_c) then cActuator.armature.stopper_xMax.f_c else if noEvent(cActuator.armature.stopper_xMax.f_d2 > -cActuator.armature.stopper_xMax.f_c) then -cActuator.armature.stopper_xMax.f_c else cActuator.armature.stopper_xMax.f_d2 else 0.0;
//   cActuator.armature.stopper_xMax.f = cActuator.armature.stopper_xMax.f_c + cActuator.armature.stopper_xMax.f_d;
//   cActuator.armature.stopper_xMax.s_rel = cActuator.armature.stopper_xMax.flange_b.s - cActuator.armature.stopper_xMax.flange_a.s;
//   cActuator.armature.stopper_xMax.v_rel = der(cActuator.armature.stopper_xMax.s_rel);
//   cActuator.armature.stopper_xMax.flange_b.f = cActuator.armature.stopper_xMax.f;
//   cActuator.armature.stopper_xMax.flange_a.f = -cActuator.armature.stopper_xMax.f;
//   cActuator.armature.stopper_xMin.contact = cActuator.armature.stopper_xMin.s_rel < cActuator.armature.stopper_xMin.s_rel0;
//   cActuator.armature.stopper_xMin.f_c = smooth(1,if cActuator.armature.stopper_xMin.contact then (-cActuator.armature.stopper_xMin.c) * abs(cActuator.armature.stopper_xMin.s_rel - cActuator.armature.stopper_xMin.s_rel0) ^ cActuator.armature.stopper_xMin.n else 0.0);
//   cActuator.armature.stopper_xMin.f_d2 = if cActuator.armature.stopper_xMin.contact then cActuator.armature.stopper_xMin.d * cActuator.armature.stopper_xMin.v_rel else 0.0;
//   cActuator.armature.stopper_xMin.f_d = if cActuator.armature.stopper_xMin.contact then if noEvent(cActuator.armature.stopper_xMin.f_d2 < cActuator.armature.stopper_xMin.f_c) then cActuator.armature.stopper_xMin.f_c else if noEvent(cActuator.armature.stopper_xMin.f_d2 > -cActuator.armature.stopper_xMin.f_c) then -cActuator.armature.stopper_xMin.f_c else cActuator.armature.stopper_xMin.f_d2 else 0.0;
//   cActuator.armature.stopper_xMin.f = cActuator.armature.stopper_xMin.f_c + cActuator.armature.stopper_xMin.f_d;
//   cActuator.armature.stopper_xMin.s_rel = cActuator.armature.stopper_xMin.flange_b.s - cActuator.armature.stopper_xMin.flange_a.s;
//   cActuator.armature.stopper_xMin.v_rel = der(cActuator.armature.stopper_xMin.s_rel);
//   cActuator.armature.stopper_xMin.flange_b.f = cActuator.armature.stopper_xMin.f;
//   cActuator.armature.stopper_xMin.flange_a.f = -cActuator.armature.stopper_xMin.f;
//   cActuator.armature.mass.s = cActuator.armature.s;
//   cActuator.armature.mass.v = cActuator.armature.v;
//   cActuator.armature.mass.a = cActuator.armature.a;
//   cActuator.l.L * der(cActuator.l.i) = cActuator.l.v;
//   cActuator.l.v = cActuator.l.p.v - cActuator.l.n.v;
//   0.0 = cActuator.l.p.i + cActuator.l.n.i;
//   cActuator.l.i = cActuator.l.p.i;
//   cActuator.electroTranslationalConverter.internalSupport.flange.f = cActuator.electroTranslationalConverter.internalSupport.f;
//   cActuator.electroTranslationalConverter.internalSupport.flange.s = cActuator.electroTranslationalConverter.internalSupport.s;
//   cActuator.electroTranslationalConverter.fixed.flange.s = cActuator.electroTranslationalConverter.fixed.s0;
//   cActuator.electroTranslationalConverter.v = cActuator.electroTranslationalConverter.p.v - cActuator.electroTranslationalConverter.n.v;
//   0.0 = cActuator.electroTranslationalConverter.p.i + cActuator.electroTranslationalConverter.n.i;
//   cActuator.electroTranslationalConverter.i = cActuator.electroTranslationalConverter.p.i;
//   cActuator.electroTranslationalConverter.s = cActuator.electroTranslationalConverter.flange.s - cActuator.electroTranslationalConverter.internalSupport.s;
//   cActuator.electroTranslationalConverter.vel = der(cActuator.electroTranslationalConverter.s);
//   cActuator.electroTranslationalConverter.k * cActuator.electroTranslationalConverter.vel = cActuator.electroTranslationalConverter.v;
//   cActuator.electroTranslationalConverter.flange.f = (-cActuator.electroTranslationalConverter.k) * cActuator.electroTranslationalConverter.i;
//   cActuator.flange.s = cActuator.x;
//   assert(true,\"tableOnFile = false and parameter table is an empty matrix\");
//   comparisonWithFEA.y[1] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[1],comparisonWithFEA.u);
//   when initial() then
//   comparisonWithFEA.tableID = Modelica.Blocks.Tables.CombiTable1Ds.tableInit(if comparisonWithFEA.tableOnFile then comparisonWithFEA.tableName else \"NoName\",if comparisonWithFEA.tableOnFile then comparisonWithFEA.fileName else \"NoName\",{{comparisonWithFEA.table[1,1],comparisonWithFEA.table[1,2]},{comparisonWithFEA.table[2,1],comparisonWithFEA.table[2,2]},{comparisonWithFEA.table[3,1],comparisonWithFEA.table[3,2]},{comparisonWithFEA.table[4,1],comparisonWithFEA.table[4,2]},{comparisonWithFEA.table[5,1],comparisonWithFEA.table[5,2]},{comparisonWithFEA.table[6,1],comparisonWithFEA.table[6,2]},{comparisonWithFEA.table[7,1],comparisonWithFEA.table[7,2]},{comparisonWithFEA.table[8,1],comparisonWithFEA.table[8,2]},{comparisonWithFEA.table[9,1],comparisonWithFEA.table[9,2]},{comparisonWithFEA.table[10,1],comparisonWithFEA.table[10,2]},{comparisonWithFEA.table[11,1],comparisonWithFEA.table[11,2]},{comparisonWithFEA.table[12,1],comparisonWithFEA.table[12,2]},{comparisonWithFEA.table[13,1],comparisonWithFEA.table[13,2]}},comparisonWithFEA.smoothness);
//   end when;
//   iSensor.p.v = iSensor.n.v;
//   iSensor.p.i = iSensor.i;
//   iSensor.n.i = -iSensor.i;
//   pmGround.p.i + pmActuator.n.i + pmRampCurrent.n.i = 0.0;
//   pmActuator.mmf_PM.port_p.Phi + pmActuator.ground.port.Phi + pmActuator.coil.port_n.Phi + pmActuator.g_mb.port_n.Phi + pmActuator.g_mLeak1.port_p.Phi + pmActuator.g_mLeak2.port_p.Phi = 0.0;
//   pmActuator.mmf_PM.port_n.Phi + pmActuator.g_ma.port_p.Phi + pmActuator.g_mb.port_p.Phi = 0.0;
//   pmActuator.armature.mass.flange_a.f + (-pmActuator.armature.flange_a.f) + pmActuator.armature.stopper_xMin.flange_b.f = 0.0;
//   pmActuator.armature.mass.flange_b.f + (-pmActuator.armature.flange_b.f) + pmActuator.armature.stopper_xMax.flange_a.f = 0.0;
//   pmActuator.armature.flange_a.f + pmActuator.g_ma.flange.f + pmActuator.g_mb.flange.f = 0.0;
//   pmActuator.armature.flange_b.f + (-pmActuator.flange.f) = 0.0;
//   pmActuator.armature.limit_xMin.flange.f + pmActuator.armature.stopper_xMin.flange_a.f = 0.0;
//   pmActuator.armature.limit_xMax.flange.f + pmActuator.armature.stopper_xMax.flange_b.f = 0.0;
//   pmActuator.armature.flange_a.s = pmActuator.armature.mass.flange_a.s;
//   pmActuator.armature.flange_a.s = pmActuator.armature.stopper_xMin.flange_b.s;
//   pmActuator.armature.limit_xMax.flange.s = pmActuator.armature.stopper_xMax.flange_b.s;
//   pmActuator.armature.flange_b.s = pmActuator.armature.mass.flange_b.s;
//   pmActuator.armature.flange_b.s = pmActuator.armature.stopper_xMax.flange_a.s;
//   pmActuator.armature.limit_xMin.flange.s = pmActuator.armature.stopper_xMin.flange_a.s;
//   pmActuator.r.p.i + (-pmActuator.p.i) = 0.0;
//   pmActuator.r.n.i + pmActuator.coil.p.i = 0.0;
//   pmActuator.coil.port_p.Phi + pmActuator.g_ma.port_n.Phi + pmActuator.g_mLeak1.port_n.Phi + pmActuator.g_mLeak2.port_n.Phi = 0.0;
//   pmActuator.coil.n.i + (-pmActuator.n.i) = 0.0;
//   pmActuator.p.i + pmRampCurrent.p.i = 0.0;
//   pmActuator.flange.f + pmFixedPos.flange.f = 0.0;
//   pmActuator.armature.flange_b.s = pmActuator.flange.s;
//   pmActuator.p.v = pmActuator.r.p.v;
//   pmActuator.armature.flange_a.s = pmActuator.g_ma.flange.s;
//   pmActuator.armature.flange_a.s = pmActuator.g_mb.flange.s;
//   pmActuator.coil.port_p.V_m = pmActuator.g_mLeak1.port_n.V_m;
//   pmActuator.coil.port_p.V_m = pmActuator.g_mLeak2.port_n.V_m;
//   pmActuator.coil.port_p.V_m = pmActuator.g_ma.port_n.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mLeak1.port_p.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mLeak2.port_p.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mb.port_n.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.ground.port.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.mmf_PM.port_p.V_m;
//   pmActuator.g_ma.port_p.V_m = pmActuator.g_mb.port_p.V_m;
//   pmActuator.g_ma.port_p.V_m = pmActuator.mmf_PM.port_n.V_m;
//   pmActuator.coil.p.v = pmActuator.r.n.v;
//   pmActuator.coil.n.v = pmActuator.n.v;
//   cGround.p.i + cRampCurrent.n.i + cActuator.n.i = 0.0;
//   cFixedPos.flange.f + cActuator.flange.f = 0.0;
//   cRampCurrent.p.i + iSensor.p.i = 0.0;
//   cActuator.r.p.i + (-cActuator.p.i) = 0.0;
//   cActuator.r.n.i + cActuator.l.p.i = 0.0;
//   cActuator.armature.mass.flange_a.f + (-cActuator.armature.flange_a.f) + cActuator.armature.stopper_xMin.flange_b.f = 0.0;
//   cActuator.armature.mass.flange_b.f + (-cActuator.armature.flange_b.f) + cActuator.armature.stopper_xMax.flange_a.f = 0.0;
//   cActuator.armature.flange_a.f + cActuator.electroTranslationalConverter.flange.f = 0.0;
//   cActuator.armature.flange_b.f + (-cActuator.flange.f) = 0.0;
//   cActuator.armature.limit_xMin.flange.f + cActuator.armature.stopper_xMin.flange_a.f = 0.0;
//   cActuator.armature.limit_xMax.flange.f + cActuator.armature.stopper_xMax.flange_b.f = 0.0;
//   cActuator.armature.flange_a.s = cActuator.armature.mass.flange_a.s;
//   cActuator.armature.flange_a.s = cActuator.armature.stopper_xMin.flange_b.s;
//   cActuator.armature.limit_xMax.flange.s = cActuator.armature.stopper_xMax.flange_b.s;
//   cActuator.armature.flange_b.s = cActuator.armature.mass.flange_b.s;
//   cActuator.armature.flange_b.s = cActuator.armature.stopper_xMax.flange_a.s;
//   cActuator.armature.limit_xMin.flange.s = cActuator.armature.stopper_xMin.flange_a.s;
//   cActuator.l.n.i + cActuator.electroTranslationalConverter.p.i = 0.0;
//   cActuator.electroTranslationalConverter.n.i + (-cActuator.n.i) = 0.0;
//   cActuator.electroTranslationalConverter.internalSupport.flange.f + cActuator.electroTranslationalConverter.fixed.flange.f = 0.0;
//   cActuator.electroTranslationalConverter.fixed.flange.s = cActuator.electroTranslationalConverter.internalSupport.flange.s;
//   cActuator.p.i + iSensor.n.i = 0.0;
//   cActuator.p.v = cActuator.r.p.v;
//   cActuator.l.p.v = cActuator.r.n.v;
//   cActuator.armature.flange_b.s = cActuator.flange.s;
//   cActuator.electroTranslationalConverter.p.v = cActuator.l.n.v;
//   cActuator.electroTranslationalConverter.n.v = cActuator.n.v;
//   cActuator.armature.flange_a.s = cActuator.electroTranslationalConverter.flange.s;
//   pmActuator.flange.s = pmFixedPos.flange.s;
//   pmActuator.p.v = pmRampCurrent.p.v;
//   pmActuator.n.v = pmGround.p.v;
//   pmActuator.n.v = pmRampCurrent.n.v;
//   cActuator.n.v = cGround.p.v;
//   cActuator.n.v = cRampCurrent.n.v;
//   cActuator.flange.s = cFixedPos.flange.s;
//   cRampCurrent.p.v = iSensor.p.v;
//   cActuator.p.v = iSensor.n.v;
//   comparisonWithFEA.u = iSensor.i;
// end Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour has 237 equation(s) and 237 variable(s).
// 145 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Tables.CombiTable1Ds.tableInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   output Integer tableID;
// 
//   external \"C\" tableID = ModelicaTables_CombiTable1D_init(tableName, fileName, table, size(table, 1), size(table, 2), smoothness);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableInit;
// 
// function Modelica.Blocks.Tables.CombiTable1Ds.tableIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real u;
//   output Real value;
// 
//   external \"C\" value = ModelicaTables_CombiTable1D_interpolate(tableID, icol, u);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableIpo;
// 
// function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 1.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = 0.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 400000.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 0.58;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = -0.001;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output PlasticNdFeB res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour
//   Real ground.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real ground.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real actuator.N = 140.0 \"Number of turns\";
//   parameter Real actuator.R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real actuator.r_core(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0125 \"Radius of ferromagnetic stator core\";
//   parameter Real actuator.l_PM(quantity = \"Length\", unit = \"m\") = 0.0035 \"Radial thickness of permanent magnet ring\";
//   parameter Real actuator.t(quantity = \"Length\", unit = \"m\") = 0.02 \"Axial length of permanent magnet ring and air gap respectively\";
//   parameter Real actuator.l_air(quantity = \"Length\", unit = \"m\") = 0.003 \"Total radial length of armature air gap\";
//   parameter Real actuator.l_FeOut(quantity = \"Length\", unit = \"m\") = 0.004 \"Radial thickness of outer back iron (for estimation of leakage permeance)\";
//   parameter Real actuator.material.H_cBRef(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = 400000.0 \"Coercivity at reference temperature\";
//   parameter Real actuator.material.B_rRef(quantity = \"MagneticFluxDensity\", unit = \"T\") = 0.58 \"Remanence at reference temperature\";
//   parameter Real actuator.material.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real actuator.material.alpha_Br(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.001 \"Temperature coefficient of remanence at reference temperature\";
//   parameter Real actuator.material.T_op(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Operating temperature\";
//   final parameter Real actuator.material.B_r(quantity = \"MagneticFluxDensity\", unit = \"T\") = actuator.material.B_rRef * (1.0 + actuator.material.alpha_Br * (actuator.material.T_op - actuator.material.T_ref)) \"Remanence at operating temperature\";
//   final parameter Real actuator.material.H_cB(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = actuator.material.H_cBRef * (1.0 + actuator.material.alpha_Br * (actuator.material.T_op - actuator.material.T_ref)) \"Coercivity at operating temperature\";
//   final parameter Real actuator.material.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = actuator.material.B_r / (actuator.material.H_cB * 1.25663706143592e-06) \"Relative permeability\";
//   parameter Real actuator.m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Mass of armature\";
//   parameter Real actuator.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real actuator.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real actuator.x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Position of stopper at minimum armature position\";
//   parameter Real actuator.x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Position of stopper at maximum armature position\";
//   Real actuator.x(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real actuator.L(quantity = \"Inductance\", unit = \"H\") \"Coil inductance\";
//   Real actuator.mmf_PM.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.mmf_PM.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.mmf_PM.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.mmf_PM.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   parameter Real actuator.mmf_PM.V_m(quantity = \"MagneticPotential\", unit = \"A\") = actuator.material.H_cB * actuator.l_PM \"Magnetic potential differnce\";
//   Real actuator.mmf_PM.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Real actuator.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real actuator.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = actuator.m_a \"Armature mass\";
//   parameter Real actuator.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = actuator.c \"Spring stiffness between impact partners\";
//   parameter Real actuator.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = actuator.d \"Damping coefficient between impact partners\";
//   parameter Real actuator.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real actuator.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = actuator.x_max \"Position of stopper at maximum armature position\";
//   parameter Real actuator.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = actuator.x_min \"Position of stopper at minimum armature position\";
//   Real actuator.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real actuator.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real actuator.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real actuator.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real actuator.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = actuator.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real actuator.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real actuator.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real actuator.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = actuator.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) actuator.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real actuator.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real actuator.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real actuator.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real actuator.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real actuator.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = actuator.armature.x_min \"fixed offset position of housing\";
//   Real actuator.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real actuator.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = actuator.armature.x_max \"fixed offset position of housing\";
//   Real actuator.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) actuator.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real actuator.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real actuator.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = actuator.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real actuator.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real actuator.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real actuator.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real actuator.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real actuator.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = actuator.armature.c \"Spring constant\";
//   parameter Real actuator.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = actuator.armature.d \"Damping constant\";
//   parameter Real actuator.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real actuator.armature.stopper_xMax.n(min = 1.0) = actuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean actuator.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real actuator.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real actuator.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real actuator.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) actuator.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real actuator.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real actuator.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = actuator.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real actuator.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real actuator.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real actuator.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real actuator.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real actuator.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = actuator.armature.c \"Spring constant\";
//   parameter Real actuator.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = actuator.armature.d \"Damping constant\";
//   parameter Real actuator.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real actuator.armature.stopper_xMin.n(min = 1.0) = actuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean actuator.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real actuator.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real actuator.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real actuator.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real actuator.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real actuator.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real actuator.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real actuator.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean actuator.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real actuator.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = actuator.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real actuator.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real actuator.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real actuator.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = actuator.R \"Resistance at temperature T_ref\";
//   parameter Real actuator.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real actuator.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real actuator.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real actuator.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real actuator.coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real actuator.coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real actuator.coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, StateSelect = StateSelect.prefer) \"Current\";
//   Real actuator.coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real actuator.coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real actuator.coil.N(start = 1.0) = actuator.N \"Number of turns\";
//   Real actuator.coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real actuator.coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real actuator.coil.eps = 1e-13;
//   Real actuator.g_ma.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_ma.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_ma.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_ma.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_ma.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real actuator.g_ma.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean actuator.g_ma.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real actuator.g_ma.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real actuator.g_ma.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real actuator.g_ma.s(quantity = \"Length\", unit = \"m\") = actuator.g_ma.flange.s - actuator.g_ma.s_support \"Distance between flange and support\";
//   Real actuator.g_ma.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real actuator.g_ma.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real actuator.g_ma.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer actuator.g_ma.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real actuator.g_ma.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.g_ma.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real actuator.g_ma.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real actuator.g_ma.l(quantity = \"Length\", unit = \"m\") = actuator.t / 2.0 + actuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real actuator.g_ma.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = actuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real actuator.g_ma.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = actuator.r_core + (actuator.l_air + actuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real actuator.g_ma.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real actuator.g_ma.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real actuator.g_mb.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mb.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mb.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mb.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mb.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real actuator.g_mb.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean actuator.g_mb.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real actuator.g_mb.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real actuator.g_mb.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real actuator.g_mb.s(quantity = \"Length\", unit = \"m\") = actuator.g_mb.flange.s - actuator.g_mb.s_support \"Distance between flange and support\";
//   Real actuator.g_mb.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real actuator.g_mb.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real actuator.g_mb.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer actuator.g_mb.dlBydx = -1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real actuator.g_mb.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.g_mb.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real actuator.g_mb.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real actuator.g_mb.l(quantity = \"Length\", unit = \"m\") = actuator.t / 2.0 - actuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real actuator.g_mb.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = actuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real actuator.g_mb.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = actuator.r_core + (actuator.l_air + actuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real actuator.g_mb.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real actuator.g_mb.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real actuator.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real actuator.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real actuator.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real actuator.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real actuator.g_mLeak1.r_0(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = actuator.r_core \"Radius of inner solid cylinder\";
//   parameter Real actuator.g_mLeak1.r_1(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.017) = actuator.r_core + (actuator.l_air + actuator.l_PM) \"Inner radius of outer hollow cylinder\";
//   parameter Real actuator.g_mLeak1.r_2(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = actuator.r_core + (actuator.l_air + (actuator.l_PM + actuator.l_FeOut)) \"Outer radius of outer hollow cylinder\";
//   final parameter Real actuator.g_mLeak1.l_g(quantity = \"Length\", unit = \"m\", min = 0.0) = actuator.g_mLeak1.r_1 - actuator.g_mLeak1.r_0 \"Radial gap length between both cylinders\";
//   final parameter Real actuator.g_mLeak1.t(quantity = \"Length\", unit = \"m\") = actuator.g_mLeak1.r_2 - actuator.g_mLeak1.r_1 \"Radial thickness of outer hollow cylinder\";
//   Real actuator.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real actuator.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real actuator.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real actuator.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real actuator.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real actuator.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real actuator.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (actuator.r_core + (actuator.l_air / 2.0 + actuator.l_PM / 2.0)) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edges)\";
//   Real actuator.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real actuator.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real actuator.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real actuator.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real actuator.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real source.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real source.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real source.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real source.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real source.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real source.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real source.I(quantity = \"ElectricCurrent\", unit = \"A\", start = 1.0) = 3.0 \"Value of constant current\";
//   output Real sweepX.y \"Connector of Real output signal\";
//   parameter Real sweepX.height = 0.00799 \"Height of ramps\";
//   parameter Real sweepX.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = 8.0 \"Durations of ramp\";
//   parameter Real sweepX.offset = -0.003995 \"Offset of output signal\";
//   parameter Real sweepX.startTime(quantity = \"Time\", unit = \"s\") = -4.0 \"Output = offset for time < startTime\";
//   parameter Boolean feedX.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real feedX.s(quantity = \"Length\", unit = \"m\", StateSelect = StateSelect.default) = feedX.flange.s - feedX.s_support \"distance between flange and support (= flange.s - support.s)\";
//   Real feedX.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real feedX.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real feedX.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   parameter Boolean feedX.exact = true \"true/false exact treatment/filtering the input signal\";
//   parameter Real feedX.f_crit(quantity = \"Frequency\", unit = \"Hz\") = 50.0 \"if exact=false, critical frequency of filter to filter input signal\";
//   Real feedX.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"If exact=false, absolute velocity of flange_b else dummy\";
//   Real feedX.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"If exact=false, absolute acceleration of flange_b else dummy\";
//   input Real feedX.s_ref \"reference position of flange as input signal\";
//   protected constant Real feedX.af = 1.3617 \"s coefficient of Bessel filter\";
//   protected constant Real feedX.bf = 0.618 \"s*s coefficient of Bessel filter\";
//   protected parameter Real feedX.w_crit(quantity = \"AngularFrequency\", unit = \"rad/s\") = 6.28318530717959 * feedX.f_crit \"Critical frequency\";
//   parameter Integer comparisonWithFEA.nout = 3 \"Number of outputs\";
//   input Real comparisonWithFEA.u \"Connector of Real input signal\";
//   output Real comparisonWithFEA.y[1] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[2] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[3] \"Connector of Real output signals\";
//   parameter Boolean comparisonWithFEA.tableOnFile = false \"true, if table is defined on file or in function usertab\";
//   parameter Real comparisonWithFEA.table[1,1] = -0.004 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,2] = -8.8729 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,3] = -9.07503 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,4] = 0.00332 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,1] = -0.0035 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,2] = -9.05239 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,3] = -9.25042 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,4] = 0.00352 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,1] = -0.003 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,2] = -9.1915 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,3] = -9.38558 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,4] = 0.00371 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,1] = -0.0025 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,2] = -9.28247 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,3] = -9.47266 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,4] = 0.0039 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,1] = -0.002 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,2] = -9.3587 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,3] = -9.54503 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,4] = 0.00409 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,1] = -0.0015 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,2] = -9.41568 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,3] = -9.59782 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,4] = 0.00429 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,1] = -0.001 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,2] = -9.45496 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,3] = -9.6331 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,4] = 0.00448 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,1] = -0.0005 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,2] = -9.47427 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,3] = -9.64839 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,4] = 0.00467 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,1] = 0.0 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,2] = -9.48639 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,3] = -9.65616 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,4] = 0.00486 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,1] = 0.0005 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,2] = -9.48623 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,3] = -9.65174 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,4] = 0.00505 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,1] = 0.001 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,2] = -9.4732 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,3] = -9.63435 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,4] = 0.00524 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,1] = 0.0015 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,2] = -9.44143 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,3] = -9.59825 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,4] = 0.00543 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,1] = 0.002 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,2] = -9.39915 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,3] = -9.55226 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,4] = 0.00562 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,1] = 0.0025 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,2] = -9.33166 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,3] = -9.47988 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,4] = 0.00581 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,1] = 0.003 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,2] = -9.23707 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,3] = -9.38112 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,4] = 0.006 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,1] = 0.0035 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,2] = -9.09497 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,3] = -9.23417 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,4] = 0.00619 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,1] = 0.004 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,2] = -8.91839 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,3] = -9.05337 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,4] = 0.00638 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter String comparisonWithFEA.tableName = \"NoName\" \"table name on file or in function usertab (see docu)\";
//   parameter String comparisonWithFEA.fileName = \"NoName\" \"file where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) comparisonWithFEA.smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"smoothness of table interpolation\";
//   protected Integer comparisonWithFEA.tableID;
//   parameter Integer comparisonWithFEA.columns[1] = 2 \"columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[2] = 3 \"columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[3] = 4 \"columns of table to be interpolated\";
// equation
//   ground.p.v = 0.0;
//   actuator.mmf_PM.V_m = actuator.mmf_PM.port_p.V_m - actuator.mmf_PM.port_n.V_m;
//   actuator.mmf_PM.Phi = actuator.mmf_PM.port_p.Phi;
//   0.0 = actuator.mmf_PM.port_p.Phi + actuator.mmf_PM.port_n.Phi;
//   actuator.armature.mass.v = der(actuator.armature.mass.s);
//   actuator.armature.mass.a = der(actuator.armature.mass.v);
//   actuator.armature.mass.m * actuator.armature.mass.a = actuator.armature.mass.flange_a.f + actuator.armature.mass.flange_b.f;
//   actuator.armature.mass.flange_a.s = actuator.armature.mass.s + (-actuator.armature.mass.L) / 2.0;
//   actuator.armature.mass.flange_b.s = actuator.armature.mass.s + actuator.armature.mass.L / 2.0;
//   actuator.armature.limit_xMin.flange.s = actuator.armature.limit_xMin.s0;
//   actuator.armature.limit_xMax.flange.s = actuator.armature.limit_xMax.s0;
//   actuator.armature.stopper_xMax.contact = actuator.armature.stopper_xMax.s_rel < actuator.armature.stopper_xMax.s_rel0;
//   actuator.armature.stopper_xMax.f_c = smooth(1,if actuator.armature.stopper_xMax.contact then (-actuator.armature.stopper_xMax.c) * abs(actuator.armature.stopper_xMax.s_rel - actuator.armature.stopper_xMax.s_rel0) ^ actuator.armature.stopper_xMax.n else 0.0);
//   actuator.armature.stopper_xMax.f_d2 = if actuator.armature.stopper_xMax.contact then actuator.armature.stopper_xMax.d * actuator.armature.stopper_xMax.v_rel else 0.0;
//   actuator.armature.stopper_xMax.f_d = if actuator.armature.stopper_xMax.contact then if noEvent(actuator.armature.stopper_xMax.f_d2 < actuator.armature.stopper_xMax.f_c) then actuator.armature.stopper_xMax.f_c else if noEvent(actuator.armature.stopper_xMax.f_d2 > -actuator.armature.stopper_xMax.f_c) then -actuator.armature.stopper_xMax.f_c else actuator.armature.stopper_xMax.f_d2 else 0.0;
//   actuator.armature.stopper_xMax.f = actuator.armature.stopper_xMax.f_c + actuator.armature.stopper_xMax.f_d;
//   actuator.armature.stopper_xMax.s_rel = actuator.armature.stopper_xMax.flange_b.s - actuator.armature.stopper_xMax.flange_a.s;
//   actuator.armature.stopper_xMax.v_rel = der(actuator.armature.stopper_xMax.s_rel);
//   actuator.armature.stopper_xMax.flange_b.f = actuator.armature.stopper_xMax.f;
//   actuator.armature.stopper_xMax.flange_a.f = -actuator.armature.stopper_xMax.f;
//   actuator.armature.stopper_xMin.contact = actuator.armature.stopper_xMin.s_rel < actuator.armature.stopper_xMin.s_rel0;
//   actuator.armature.stopper_xMin.f_c = smooth(1,if actuator.armature.stopper_xMin.contact then (-actuator.armature.stopper_xMin.c) * abs(actuator.armature.stopper_xMin.s_rel - actuator.armature.stopper_xMin.s_rel0) ^ actuator.armature.stopper_xMin.n else 0.0);
//   actuator.armature.stopper_xMin.f_d2 = if actuator.armature.stopper_xMin.contact then actuator.armature.stopper_xMin.d * actuator.armature.stopper_xMin.v_rel else 0.0;
//   actuator.armature.stopper_xMin.f_d = if actuator.armature.stopper_xMin.contact then if noEvent(actuator.armature.stopper_xMin.f_d2 < actuator.armature.stopper_xMin.f_c) then actuator.armature.stopper_xMin.f_c else if noEvent(actuator.armature.stopper_xMin.f_d2 > -actuator.armature.stopper_xMin.f_c) then -actuator.armature.stopper_xMin.f_c else actuator.armature.stopper_xMin.f_d2 else 0.0;
//   actuator.armature.stopper_xMin.f = actuator.armature.stopper_xMin.f_c + actuator.armature.stopper_xMin.f_d;
//   actuator.armature.stopper_xMin.s_rel = actuator.armature.stopper_xMin.flange_b.s - actuator.armature.stopper_xMin.flange_a.s;
//   actuator.armature.stopper_xMin.v_rel = der(actuator.armature.stopper_xMin.s_rel);
//   actuator.armature.stopper_xMin.flange_b.f = actuator.armature.stopper_xMin.f;
//   actuator.armature.stopper_xMin.flange_a.f = -actuator.armature.stopper_xMin.f;
//   actuator.armature.mass.s = actuator.armature.s;
//   actuator.armature.mass.v = actuator.armature.v;
//   actuator.armature.mass.a = actuator.armature.a;
//   assert(1.0 + actuator.r.alpha * (actuator.r.T_heatPort - actuator.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   actuator.r.R_actual = actuator.r.R * (1.0 + actuator.r.alpha * (actuator.r.T_heatPort - actuator.r.T_ref));
//   actuator.r.v = actuator.r.R_actual * actuator.r.i;
//   actuator.r.LossPower = actuator.r.v * actuator.r.i;
//   actuator.r.i = actuator.r.p.i;
//   0.0 = actuator.r.p.i + actuator.r.n.i;
//   actuator.r.v = actuator.r.p.v - actuator.r.n.v;
//   actuator.r.T_heatPort = actuator.r.T;
//   actuator.ground.port.V_m = 0.0;
//   actuator.coil.v = actuator.coil.p.v - actuator.coil.n.v;
//   0.0 = actuator.coil.p.i + actuator.coil.n.i;
//   actuator.coil.i = actuator.coil.p.i;
//   actuator.coil.V_m = actuator.coil.port_p.V_m - actuator.coil.port_n.V_m;
//   0.0 = actuator.coil.port_p.Phi + actuator.coil.port_n.Phi;
//   actuator.coil.Phi = actuator.coil.port_p.Phi;
//   actuator.coil.V_m = actuator.coil.i * actuator.coil.N;
//   actuator.coil.N * der(actuator.coil.Phi) = -actuator.coil.v;
//   actuator.coil.Psi = actuator.coil.N * actuator.coil.Phi;
//   actuator.coil.L_stat = if noEvent(abs(actuator.coil.i) > actuator.coil.eps) then abs(actuator.coil.Psi / actuator.coil.i) else abs(actuator.coil.Psi / actuator.coil.eps);
//   actuator.g_ma.G_m = (7.89568352087149e-06 * (actuator.g_ma.mu_r * actuator.g_ma.l)) / log(actuator.g_ma.r_o / actuator.g_ma.r_i);
//   actuator.g_ma.dGmBydx = (7.89568352087149e-06 * (Real(actuator.g_ma.dlBydx) * actuator.g_ma.mu_r)) / log(actuator.g_ma.r_o / actuator.g_ma.r_i);
//   actuator.g_ma.A_avg = 3.14159265358979 * ((actuator.g_ma.r_i + actuator.g_ma.r_o) * actuator.g_ma.l);
//   actuator.g_ma.B_avg = actuator.g_ma.Phi / actuator.g_ma.A_avg;
//   actuator.g_ma.flange.f = -actuator.g_ma.F_m;
//   actuator.g_ma.s_support = 0.0;
//   actuator.g_ma.F_m = 0.5 * (actuator.g_ma.V_m ^ 2.0 * actuator.g_ma.dGmBydx);
//   actuator.g_ma.R_m = 1.0 / actuator.g_ma.G_m;
//   actuator.g_ma.V_m = actuator.g_ma.Phi * actuator.g_ma.R_m;
//   actuator.g_ma.V_m = actuator.g_ma.port_p.V_m - actuator.g_ma.port_n.V_m;
//   actuator.g_ma.Phi = actuator.g_ma.port_p.Phi;
//   0.0 = actuator.g_ma.port_p.Phi + actuator.g_ma.port_n.Phi;
//   actuator.g_mb.G_m = (7.89568352087149e-06 * (actuator.g_mb.mu_r * actuator.g_mb.l)) / log(actuator.g_mb.r_o / actuator.g_mb.r_i);
//   actuator.g_mb.dGmBydx = (7.89568352087149e-06 * (Real(actuator.g_mb.dlBydx) * actuator.g_mb.mu_r)) / log(actuator.g_mb.r_o / actuator.g_mb.r_i);
//   actuator.g_mb.A_avg = 3.14159265358979 * ((actuator.g_mb.r_i + actuator.g_mb.r_o) * actuator.g_mb.l);
//   actuator.g_mb.B_avg = actuator.g_mb.Phi / actuator.g_mb.A_avg;
//   actuator.g_mb.flange.f = -actuator.g_mb.F_m;
//   actuator.g_mb.s_support = 0.0;
//   actuator.g_mb.F_m = 0.5 * (actuator.g_mb.V_m ^ 2.0 * actuator.g_mb.dGmBydx);
//   actuator.g_mb.R_m = 1.0 / actuator.g_mb.G_m;
//   actuator.g_mb.V_m = actuator.g_mb.Phi * actuator.g_mb.R_m;
//   actuator.g_mb.V_m = actuator.g_mb.port_p.V_m - actuator.g_mb.port_n.V_m;
//   actuator.g_mb.Phi = actuator.g_mb.port_p.Phi;
//   0.0 = actuator.g_mb.port_p.Phi + actuator.g_mb.port_n.Phi;
//   actuator.g_mLeak1.G_m = if actuator.g_mLeak1.t <= actuator.g_mLeak1.r_0 then 2.51327412287183e-06 * ((actuator.g_mLeak1.r_0 + actuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * actuator.g_mLeak1.t) / actuator.g_mLeak1.l_g)) else 2.51327412287183e-06 * ((actuator.g_mLeak1.r_0 + actuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * actuator.g_mLeak1.r_0) / actuator.g_mLeak1.l_g));
//   actuator.g_mLeak1.R_m = 1.0 / actuator.g_mLeak1.G_m;
//   actuator.g_mLeak1.V_m = actuator.g_mLeak1.Phi * actuator.g_mLeak1.R_m;
//   actuator.g_mLeak1.V_m = actuator.g_mLeak1.port_p.V_m - actuator.g_mLeak1.port_n.V_m;
//   actuator.g_mLeak1.Phi = actuator.g_mLeak1.port_p.Phi;
//   0.0 = actuator.g_mLeak1.port_p.Phi + actuator.g_mLeak1.port_n.Phi;
//   actuator.g_mLeak2.G_m = 3.26725635973338e-07 * actuator.g_mLeak2.l;
//   actuator.g_mLeak2.R_m = 1.0 / actuator.g_mLeak2.G_m;
//   actuator.g_mLeak2.V_m = actuator.g_mLeak2.Phi * actuator.g_mLeak2.R_m;
//   actuator.g_mLeak2.V_m = actuator.g_mLeak2.port_p.V_m - actuator.g_mLeak2.port_n.V_m;
//   actuator.g_mLeak2.Phi = actuator.g_mLeak2.port_p.Phi;
//   0.0 = actuator.g_mLeak2.port_p.Phi + actuator.g_mLeak2.port_n.Phi;
//   actuator.x = actuator.flange.s;
//   actuator.L = actuator.coil.N ^ 2.0 * (actuator.g_ma.G_m + (actuator.g_mLeak1.G_m + actuator.g_mLeak2.G_m));
//   source.i = source.I;
//   source.v = source.p.v - source.n.v;
//   0.0 = source.p.i + source.n.i;
//   source.i = source.p.i;
//   sweepX.y = sweepX.offset + (if time < sweepX.startTime then 0.0 else if time < sweepX.startTime + sweepX.duration then ((time - sweepX.startTime) * sweepX.height) / sweepX.duration else sweepX.height);
//   feedX.s = feedX.s_ref;
//   feedX.v = 0.0;
//   feedX.a = 0.0;
//   feedX.s_support = 0.0;
//   assert(true,\"tableOnFile = false and parameter table is an empty matrix\");
//   comparisonWithFEA.y[1] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[1],comparisonWithFEA.u);
//   comparisonWithFEA.y[2] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[2],comparisonWithFEA.u);
//   comparisonWithFEA.y[3] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[3],comparisonWithFEA.u);
//   when initial() then
//   comparisonWithFEA.tableID = Modelica.Blocks.Tables.CombiTable1Ds.tableInit(if comparisonWithFEA.tableOnFile then comparisonWithFEA.tableName else \"NoName\",if comparisonWithFEA.tableOnFile then comparisonWithFEA.fileName else \"NoName\",{{comparisonWithFEA.table[1,1],comparisonWithFEA.table[1,2],comparisonWithFEA.table[1,3],comparisonWithFEA.table[1,4]},{comparisonWithFEA.table[2,1],comparisonWithFEA.table[2,2],comparisonWithFEA.table[2,3],comparisonWithFEA.table[2,4]},{comparisonWithFEA.table[3,1],comparisonWithFEA.table[3,2],comparisonWithFEA.table[3,3],comparisonWithFEA.table[3,4]},{comparisonWithFEA.table[4,1],comparisonWithFEA.table[4,2],comparisonWithFEA.table[4,3],comparisonWithFEA.table[4,4]},{comparisonWithFEA.table[5,1],comparisonWithFEA.table[5,2],comparisonWithFEA.table[5,3],comparisonWithFEA.table[5,4]},{comparisonWithFEA.table[6,1],comparisonWithFEA.table[6,2],comparisonWithFEA.table[6,3],comparisonWithFEA.table[6,4]},{comparisonWithFEA.table[7,1],comparisonWithFEA.table[7,2],comparisonWithFEA.table[7,3],comparisonWithFEA.table[7,4]},{comparisonWithFEA.table[8,1],comparisonWithFEA.table[8,2],comparisonWithFEA.table[8,3],comparisonWithFEA.table[8,4]},{comparisonWithFEA.table[9,1],comparisonWithFEA.table[9,2],comparisonWithFEA.table[9,3],comparisonWithFEA.table[9,4]},{comparisonWithFEA.table[10,1],comparisonWithFEA.table[10,2],comparisonWithFEA.table[10,3],comparisonWithFEA.table[10,4]},{comparisonWithFEA.table[11,1],comparisonWithFEA.table[11,2],comparisonWithFEA.table[11,3],comparisonWithFEA.table[11,4]},{comparisonWithFEA.table[12,1],comparisonWithFEA.table[12,2],comparisonWithFEA.table[12,3],comparisonWithFEA.table[12,4]},{comparisonWithFEA.table[13,1],comparisonWithFEA.table[13,2],comparisonWithFEA.table[13,3],comparisonWithFEA.table[13,4]},{comparisonWithFEA.table[14,1],comparisonWithFEA.table[14,2],comparisonWithFEA.table[14,3],comparisonWithFEA.table[14,4]},{comparisonWithFEA.table[15,1],comparisonWithFEA.table[15,2],comparisonWithFEA.table[15,3],comparisonWithFEA.table[15,4]},{comparisonWithFEA.table[16,1],comparisonWithFEA.table[16,2],comparisonWithFEA.table[16,3],comparisonWithFEA.table[16,4]},{comparisonWithFEA.table[17,1],comparisonWithFEA.table[17,2],comparisonWithFEA.table[17,3],comparisonWithFEA.table[17,4]}},comparisonWithFEA.smoothness);
//   end when;
//   ground.p.i + actuator.n.i + source.n.i = 0.0;
//   actuator.mmf_PM.port_p.Phi + actuator.ground.port.Phi + actuator.coil.port_n.Phi + actuator.g_mb.port_n.Phi + actuator.g_mLeak1.port_p.Phi + actuator.g_mLeak2.port_p.Phi = 0.0;
//   actuator.mmf_PM.port_n.Phi + actuator.g_ma.port_p.Phi + actuator.g_mb.port_p.Phi = 0.0;
//   actuator.armature.mass.flange_a.f + (-actuator.armature.flange_a.f) + actuator.armature.stopper_xMin.flange_b.f = 0.0;
//   actuator.armature.mass.flange_b.f + (-actuator.armature.flange_b.f) + actuator.armature.stopper_xMax.flange_a.f = 0.0;
//   actuator.armature.flange_a.f + actuator.g_ma.flange.f + actuator.g_mb.flange.f = 0.0;
//   actuator.armature.flange_b.f + (-actuator.flange.f) = 0.0;
//   actuator.armature.limit_xMin.flange.f + actuator.armature.stopper_xMin.flange_a.f = 0.0;
//   actuator.armature.limit_xMax.flange.f + actuator.armature.stopper_xMax.flange_b.f = 0.0;
//   actuator.armature.flange_a.s = actuator.armature.mass.flange_a.s;
//   actuator.armature.flange_a.s = actuator.armature.stopper_xMin.flange_b.s;
//   actuator.armature.limit_xMax.flange.s = actuator.armature.stopper_xMax.flange_b.s;
//   actuator.armature.flange_b.s = actuator.armature.mass.flange_b.s;
//   actuator.armature.flange_b.s = actuator.armature.stopper_xMax.flange_a.s;
//   actuator.armature.limit_xMin.flange.s = actuator.armature.stopper_xMin.flange_a.s;
//   actuator.r.p.i + (-actuator.p.i) = 0.0;
//   actuator.r.n.i + actuator.coil.p.i = 0.0;
//   actuator.coil.port_p.Phi + actuator.g_ma.port_n.Phi + actuator.g_mLeak1.port_n.Phi + actuator.g_mLeak2.port_n.Phi = 0.0;
//   actuator.coil.n.i + (-actuator.n.i) = 0.0;
//   actuator.p.i + source.p.i = 0.0;
//   actuator.flange.f + feedX.flange.f = 0.0;
//   actuator.armature.flange_b.s = actuator.flange.s;
//   actuator.p.v = actuator.r.p.v;
//   actuator.armature.flange_a.s = actuator.g_ma.flange.s;
//   actuator.armature.flange_a.s = actuator.g_mb.flange.s;
//   actuator.coil.port_p.V_m = actuator.g_mLeak1.port_n.V_m;
//   actuator.coil.port_p.V_m = actuator.g_mLeak2.port_n.V_m;
//   actuator.coil.port_p.V_m = actuator.g_ma.port_n.V_m;
//   actuator.coil.port_n.V_m = actuator.g_mLeak1.port_p.V_m;
//   actuator.coil.port_n.V_m = actuator.g_mLeak2.port_p.V_m;
//   actuator.coil.port_n.V_m = actuator.g_mb.port_n.V_m;
//   actuator.coil.port_n.V_m = actuator.ground.port.V_m;
//   actuator.coil.port_n.V_m = actuator.mmf_PM.port_p.V_m;
//   actuator.g_ma.port_p.V_m = actuator.g_mb.port_p.V_m;
//   actuator.g_ma.port_p.V_m = actuator.mmf_PM.port_n.V_m;
//   actuator.coil.p.v = actuator.r.n.v;
//   actuator.coil.n.v = actuator.n.v;
//   actuator.n.v = ground.p.v;
//   actuator.n.v = source.n.v;
//   actuator.p.v = source.p.v;
//   comparisonWithFEA.u = feedX.s_ref;
//   comparisonWithFEA.u = sweepX.y;
//   actuator.flange.s = feedX.flange.s;
// end Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceStrokeBehaviour has 150 equation(s) and 150 variable(s).
// 85 of these are trivial equation(s).
// "
// ""
// "function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 1.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = 0.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 400000.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 0.58;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = -0.001;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output PlasticNdFeB res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.PlasticNdFeB;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke
//   Real pmGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real pmSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real pmSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real pmSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real pmSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real pmSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real pmSource.signalSource.offset = pmSource.offset \"Offset of output signal y\";
//   parameter Real pmSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = pmSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real pmSource.signalSource.height = pmSource.V \"Height of step\";
//   parameter Real pmSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = 1.5 * pmActuator.R \"Height of step\";
//   parameter Real pmActuator.N = 140.0 \"Number of turns\";
//   parameter Real pmActuator.R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real pmActuator.r_core(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0125 \"Radius of ferromagnetic stator core\";
//   parameter Real pmActuator.l_PM(quantity = \"Length\", unit = \"m\") = 0.0035 \"Radial thickness of permanent magnet ring\";
//   parameter Real pmActuator.t(quantity = \"Length\", unit = \"m\") = 0.02 \"Axial length of permanent magnet ring and air gap respectively\";
//   parameter Real pmActuator.l_air(quantity = \"Length\", unit = \"m\") = 0.003 \"Total radial length of armature air gap\";
//   parameter Real pmActuator.l_FeOut(quantity = \"Length\", unit = \"m\") = 0.004 \"Radial thickness of outer back iron (for estimation of leakage permeance)\";
//   parameter Real pmActuator.material.H_cBRef(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = 400000.0 \"Coercivity at reference temperature\";
//   parameter Real pmActuator.material.B_rRef(quantity = \"MagneticFluxDensity\", unit = \"T\") = 0.58 \"Remanence at reference temperature\";
//   parameter Real pmActuator.material.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real pmActuator.material.alpha_Br(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = -0.001 \"Temperature coefficient of remanence at reference temperature\";
//   parameter Real pmActuator.material.T_op(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Operating temperature\";
//   final parameter Real pmActuator.material.B_r(quantity = \"MagneticFluxDensity\", unit = \"T\") = pmActuator.material.B_rRef * (1.0 + pmActuator.material.alpha_Br * (pmActuator.material.T_op - pmActuator.material.T_ref)) \"Remanence at operating temperature\";
//   final parameter Real pmActuator.material.H_cB(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = pmActuator.material.H_cBRef * (1.0 + pmActuator.material.alpha_Br * (pmActuator.material.T_op - pmActuator.material.T_ref)) \"Coercivity at operating temperature\";
//   final parameter Real pmActuator.material.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = pmActuator.material.B_r / (pmActuator.material.H_cB * 1.25663706143592e-06) \"Relative permeability\";
//   parameter Real pmActuator.m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Mass of armature\";
//   parameter Real pmActuator.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real pmActuator.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real pmActuator.x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Position of stopper at minimum armature position\";
//   parameter Real pmActuator.x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Position of stopper at maximum armature position\";
//   Real pmActuator.x(quantity = \"Length\", unit = \"m\", start = pmActuator.x_min, fixed = true, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real pmActuator.L(quantity = \"Inductance\", unit = \"H\") \"Coil inductance\";
//   Real pmActuator.mmf_PM.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.mmf_PM.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.mmf_PM.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.mmf_PM.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   parameter Real pmActuator.mmf_PM.V_m(quantity = \"MagneticPotential\", unit = \"A\") = pmActuator.material.H_cB * pmActuator.l_PM \"Magnetic potential differnce\";
//   Real pmActuator.mmf_PM.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Real pmActuator.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real pmActuator.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = pmActuator.m_a \"Armature mass\";
//   parameter Real pmActuator.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = pmActuator.c \"Spring stiffness between impact partners\";
//   parameter Real pmActuator.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = pmActuator.d \"Damping coefficient between impact partners\";
//   parameter Real pmActuator.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real pmActuator.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = pmActuator.x_max \"Position of stopper at maximum armature position\";
//   parameter Real pmActuator.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = pmActuator.x_min \"Position of stopper at minimum armature position\";
//   Real pmActuator.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real pmActuator.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real pmActuator.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real pmActuator.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real pmActuator.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = pmActuator.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = pmActuator.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real pmActuator.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real pmActuator.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real pmActuator.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = pmActuator.armature.x_min \"fixed offset position of housing\";
//   Real pmActuator.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = pmActuator.armature.x_max \"fixed offset position of housing\";
//   Real pmActuator.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real pmActuator.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real pmActuator.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = pmActuator.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real pmActuator.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real pmActuator.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = pmActuator.armature.c \"Spring constant\";
//   parameter Real pmActuator.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = pmActuator.armature.d \"Damping constant\";
//   parameter Real pmActuator.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real pmActuator.armature.stopper_xMax.n(min = 1.0) = pmActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean pmActuator.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real pmActuator.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real pmActuator.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real pmActuator.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) pmActuator.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real pmActuator.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real pmActuator.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = pmActuator.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real pmActuator.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real pmActuator.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real pmActuator.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmActuator.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmActuator.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = pmActuator.armature.c \"Spring constant\";
//   parameter Real pmActuator.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = pmActuator.armature.d \"Damping constant\";
//   parameter Real pmActuator.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real pmActuator.armature.stopper_xMin.n(min = 1.0) = pmActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean pmActuator.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real pmActuator.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real pmActuator.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real pmActuator.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real pmActuator.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real pmActuator.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real pmActuator.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean pmActuator.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real pmActuator.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = pmActuator.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real pmActuator.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real pmActuator.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real pmActuator.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = pmActuator.R \"Resistance at temperature T_ref\";
//   parameter Real pmActuator.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real pmActuator.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real pmActuator.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real pmActuator.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real pmActuator.coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real pmActuator.coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real pmActuator.coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real pmActuator.coil.N(start = 1.0) = pmActuator.N \"Number of turns\";
//   Real pmActuator.coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real pmActuator.coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real pmActuator.coil.eps = 1e-13;
//   Real pmActuator.g_ma.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_ma.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_ma.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_ma.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_ma.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_ma.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean pmActuator.g_ma.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real pmActuator.g_ma.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real pmActuator.g_ma.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real pmActuator.g_ma.s(quantity = \"Length\", unit = \"m\") = pmActuator.g_ma.flange.s - pmActuator.g_ma.s_support \"Distance between flange and support\";
//   Real pmActuator.g_ma.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_ma.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real pmActuator.g_ma.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer pmActuator.g_ma.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real pmActuator.g_ma.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.g_ma.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real pmActuator.g_ma.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real pmActuator.g_ma.l(quantity = \"Length\", unit = \"m\") = pmActuator.t / 2.0 + pmActuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real pmActuator.g_ma.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real pmActuator.g_ma.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real pmActuator.g_ma.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real pmActuator.g_ma.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real pmActuator.g_mb.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mb.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mb.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mb.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mb.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mb.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean pmActuator.g_mb.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real pmActuator.g_mb.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real pmActuator.g_mb.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real pmActuator.g_mb.s(quantity = \"Length\", unit = \"m\") = pmActuator.g_mb.flange.s - pmActuator.g_mb.s_support \"Distance between flange and support\";
//   Real pmActuator.g_mb.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mb.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real pmActuator.g_mb.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer pmActuator.g_mb.dlBydx = -1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real pmActuator.g_mb.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.g_mb.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real pmActuator.g_mb.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real pmActuator.g_mb.l(quantity = \"Length\", unit = \"m\") = pmActuator.t / 2.0 - pmActuator.x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real pmActuator.g_mb.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Inner radius of hollow cylinder\";
//   parameter Real pmActuator.g_mb.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Outer radius of hollow cylinder\";
//   Real pmActuator.g_mb.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real pmActuator.g_mb.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real pmActuator.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real pmActuator.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real pmActuator.g_mLeak1.r_0(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = pmActuator.r_core \"Radius of inner solid cylinder\";
//   parameter Real pmActuator.g_mLeak1.r_1(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.017) = pmActuator.r_core + (pmActuator.l_air + pmActuator.l_PM) \"Inner radius of outer hollow cylinder\";
//   parameter Real pmActuator.g_mLeak1.r_2(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = pmActuator.r_core + (pmActuator.l_air + (pmActuator.l_PM + pmActuator.l_FeOut)) \"Outer radius of outer hollow cylinder\";
//   final parameter Real pmActuator.g_mLeak1.l_g(quantity = \"Length\", unit = \"m\", min = 0.0) = pmActuator.g_mLeak1.r_1 - pmActuator.g_mLeak1.r_0 \"Radial gap length between both cylinders\";
//   final parameter Real pmActuator.g_mLeak1.t(quantity = \"Length\", unit = \"m\") = pmActuator.g_mLeak1.r_2 - pmActuator.g_mLeak1.r_1 \"Radial thickness of outer hollow cylinder\";
//   Real pmActuator.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real pmActuator.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real pmActuator.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real pmActuator.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real pmActuator.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real pmActuator.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real pmActuator.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (pmActuator.r_core + (pmActuator.l_air / 2.0 + pmActuator.l_PM / 2.0)) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edges)\";
//   Real pmActuator.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real pmActuator.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real pmActuator.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmActuator.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmLoad.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real pmLoad.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real pmLoad.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmLoad.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real pmLoad.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real pmLoad.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real pmLoad.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 0.05 \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) pmLoad.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real pmLoad.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real pmLoad.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real cGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real cSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real cSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real cSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real cSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real cSource.signalSource.offset = cSource.offset \"Offset of output signal y\";
//   parameter Real cSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = cSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real cSource.signalSource.height = cSource.V \"Height of step\";
//   parameter Real cSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = 1.5 * cActuator.R \"Height of step\";
//   parameter Real cActuator.k(quantity = \"ElectricalForceConstant\", unit = \"N/A\") = 3.88 \"Converter constant\";
//   parameter Real cActuator.R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real cActuator.L(quantity = \"Inductance\", unit = \"H\") = 0.0051 \"Coil inductance at mid-stroke\";
//   parameter Real cActuator.m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Armature mass\";
//   parameter Real cActuator.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real cActuator.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real cActuator.x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Minimum armature position\";
//   parameter Real cActuator.x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Maximum armature position\";
//   Real cActuator.x(quantity = \"Length\", unit = \"m\", start = cActuator.x_min, fixed = true, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real cActuator.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cActuator.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real cActuator.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean cActuator.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real cActuator.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = cActuator.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real cActuator.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real cActuator.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real cActuator.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = cActuator.R \"Resistance at temperature T_ref\";
//   parameter Real cActuator.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real cActuator.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real cActuator.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   parameter Real cActuator.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real cActuator.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cActuator.m_a \"Armature mass\";
//   parameter Real cActuator.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = cActuator.c \"Spring stiffness between impact partners\";
//   parameter Real cActuator.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = cActuator.d \"Damping coefficient between impact partners\";
//   parameter Real cActuator.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real cActuator.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = cActuator.x_max \"Position of stopper at maximum armature position\";
//   parameter Real cActuator.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = cActuator.x_min \"Position of stopper at minimum armature position\";
//   Real cActuator.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real cActuator.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real cActuator.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real cActuator.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real cActuator.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = cActuator.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = cActuator.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real cActuator.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real cActuator.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real cActuator.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = cActuator.armature.x_min \"fixed offset position of housing\";
//   Real cActuator.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = cActuator.armature.x_max \"fixed offset position of housing\";
//   Real cActuator.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real cActuator.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real cActuator.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = cActuator.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real cActuator.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real cActuator.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = cActuator.armature.c \"Spring constant\";
//   parameter Real cActuator.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = cActuator.armature.d \"Damping constant\";
//   parameter Real cActuator.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real cActuator.armature.stopper_xMax.n(min = 1.0) = cActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean cActuator.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real cActuator.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real cActuator.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real cActuator.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) cActuator.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real cActuator.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real cActuator.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = cActuator.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real cActuator.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real cActuator.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real cActuator.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = cActuator.armature.c \"Spring constant\";
//   parameter Real cActuator.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = cActuator.armature.d \"Damping constant\";
//   parameter Real cActuator.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real cActuator.armature.stopper_xMin.n(min = 1.0) = cActuator.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean cActuator.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real cActuator.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real cActuator.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real cActuator.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real cActuator.l.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real cActuator.l.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true) \"Current flowing from pin p to pin n\";
//   Real cActuator.l.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.l.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.l.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.l.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real cActuator.l.L(quantity = \"Inductance\", unit = \"H\", start = 1.0) = cActuator.L \"Inductance\";
//   parameter Boolean cActuator.electroTranslationalConverter.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real cActuator.electroTranslationalConverter.k(quantity = \"ElectricalForceConstant\", unit = \"N/A\", start = 1.0) = cActuator.k \"Transformation coefficient\";
//   Real cActuator.electroTranslationalConverter.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins\";
//   Real cActuator.electroTranslationalConverter.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from positive to negative pin\";
//   Real cActuator.electroTranslationalConverter.s(quantity = \"Length\", unit = \"m\") \"Position of flange relative to support\";
//   Real cActuator.electroTranslationalConverter.vel(quantity = \"Velocity\", unit = \"m/s\") \"Velocity of flange relative to support\";
//   Real cActuator.electroTranslationalConverter.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.electroTranslationalConverter.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.electroTranslationalConverter.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.electroTranslationalConverter.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.electroTranslationalConverter.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   input Real cActuator.electroTranslationalConverter.internalSupport.f(quantity = \"Force\", unit = \"N\") = -cActuator.electroTranslationalConverter.flange.f \"External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)\";
//   Real cActuator.electroTranslationalConverter.internalSupport.s(quantity = \"Length\", unit = \"m\") \"External support position (= flange.s)\";
//   Real cActuator.electroTranslationalConverter.internalSupport.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.internalSupport.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cActuator.electroTranslationalConverter.fixed.s0(quantity = \"Length\", unit = \"m\") = 0.0 \"fixed offset position of housing\";
//   Real cActuator.electroTranslationalConverter.fixed.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.electroTranslationalConverter.fixed.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cActuator.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real cActuator.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real cActuator.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cActuator.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cLoad.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real cLoad.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real cLoad.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cLoad.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real cLoad.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real cLoad.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real cLoad.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 0.05 \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) cLoad.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real cLoad.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real cLoad.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
// equation
//   pmGround.p.v = 0.0;
//   pmSource.signalSource.y = pmSource.signalSource.offset + (if time < pmSource.signalSource.startTime then 0.0 else pmSource.signalSource.height);
//   pmSource.v = pmSource.signalSource.y;
//   pmSource.v = pmSource.p.v - pmSource.n.v;
//   0.0 = pmSource.p.i + pmSource.n.i;
//   pmSource.i = pmSource.p.i;
//   pmActuator.mmf_PM.V_m = pmActuator.mmf_PM.port_p.V_m - pmActuator.mmf_PM.port_n.V_m;
//   pmActuator.mmf_PM.Phi = pmActuator.mmf_PM.port_p.Phi;
//   0.0 = pmActuator.mmf_PM.port_p.Phi + pmActuator.mmf_PM.port_n.Phi;
//   pmActuator.armature.mass.v = der(pmActuator.armature.mass.s);
//   pmActuator.armature.mass.a = der(pmActuator.armature.mass.v);
//   pmActuator.armature.mass.m * pmActuator.armature.mass.a = pmActuator.armature.mass.flange_a.f + pmActuator.armature.mass.flange_b.f;
//   pmActuator.armature.mass.flange_a.s = pmActuator.armature.mass.s + (-pmActuator.armature.mass.L) / 2.0;
//   pmActuator.armature.mass.flange_b.s = pmActuator.armature.mass.s + pmActuator.armature.mass.L / 2.0;
//   pmActuator.armature.limit_xMin.flange.s = pmActuator.armature.limit_xMin.s0;
//   pmActuator.armature.limit_xMax.flange.s = pmActuator.armature.limit_xMax.s0;
//   pmActuator.armature.stopper_xMax.contact = pmActuator.armature.stopper_xMax.s_rel < pmActuator.armature.stopper_xMax.s_rel0;
//   pmActuator.armature.stopper_xMax.f_c = smooth(1,if pmActuator.armature.stopper_xMax.contact then (-pmActuator.armature.stopper_xMax.c) * abs(pmActuator.armature.stopper_xMax.s_rel - pmActuator.armature.stopper_xMax.s_rel0) ^ pmActuator.armature.stopper_xMax.n else 0.0);
//   pmActuator.armature.stopper_xMax.f_d2 = if pmActuator.armature.stopper_xMax.contact then pmActuator.armature.stopper_xMax.d * pmActuator.armature.stopper_xMax.v_rel else 0.0;
//   pmActuator.armature.stopper_xMax.f_d = if pmActuator.armature.stopper_xMax.contact then if noEvent(pmActuator.armature.stopper_xMax.f_d2 < pmActuator.armature.stopper_xMax.f_c) then pmActuator.armature.stopper_xMax.f_c else if noEvent(pmActuator.armature.stopper_xMax.f_d2 > -pmActuator.armature.stopper_xMax.f_c) then -pmActuator.armature.stopper_xMax.f_c else pmActuator.armature.stopper_xMax.f_d2 else 0.0;
//   pmActuator.armature.stopper_xMax.f = pmActuator.armature.stopper_xMax.f_c + pmActuator.armature.stopper_xMax.f_d;
//   pmActuator.armature.stopper_xMax.s_rel = pmActuator.armature.stopper_xMax.flange_b.s - pmActuator.armature.stopper_xMax.flange_a.s;
//   pmActuator.armature.stopper_xMax.v_rel = der(pmActuator.armature.stopper_xMax.s_rel);
//   pmActuator.armature.stopper_xMax.flange_b.f = pmActuator.armature.stopper_xMax.f;
//   pmActuator.armature.stopper_xMax.flange_a.f = -pmActuator.armature.stopper_xMax.f;
//   pmActuator.armature.stopper_xMin.contact = pmActuator.armature.stopper_xMin.s_rel < pmActuator.armature.stopper_xMin.s_rel0;
//   pmActuator.armature.stopper_xMin.f_c = smooth(1,if pmActuator.armature.stopper_xMin.contact then (-pmActuator.armature.stopper_xMin.c) * abs(pmActuator.armature.stopper_xMin.s_rel - pmActuator.armature.stopper_xMin.s_rel0) ^ pmActuator.armature.stopper_xMin.n else 0.0);
//   pmActuator.armature.stopper_xMin.f_d2 = if pmActuator.armature.stopper_xMin.contact then pmActuator.armature.stopper_xMin.d * pmActuator.armature.stopper_xMin.v_rel else 0.0;
//   pmActuator.armature.stopper_xMin.f_d = if pmActuator.armature.stopper_xMin.contact then if noEvent(pmActuator.armature.stopper_xMin.f_d2 < pmActuator.armature.stopper_xMin.f_c) then pmActuator.armature.stopper_xMin.f_c else if noEvent(pmActuator.armature.stopper_xMin.f_d2 > -pmActuator.armature.stopper_xMin.f_c) then -pmActuator.armature.stopper_xMin.f_c else pmActuator.armature.stopper_xMin.f_d2 else 0.0;
//   pmActuator.armature.stopper_xMin.f = pmActuator.armature.stopper_xMin.f_c + pmActuator.armature.stopper_xMin.f_d;
//   pmActuator.armature.stopper_xMin.s_rel = pmActuator.armature.stopper_xMin.flange_b.s - pmActuator.armature.stopper_xMin.flange_a.s;
//   pmActuator.armature.stopper_xMin.v_rel = der(pmActuator.armature.stopper_xMin.s_rel);
//   pmActuator.armature.stopper_xMin.flange_b.f = pmActuator.armature.stopper_xMin.f;
//   pmActuator.armature.stopper_xMin.flange_a.f = -pmActuator.armature.stopper_xMin.f;
//   pmActuator.armature.mass.s = pmActuator.armature.s;
//   pmActuator.armature.mass.v = pmActuator.armature.v;
//   pmActuator.armature.mass.a = pmActuator.armature.a;
//   assert(1.0 + pmActuator.r.alpha * (pmActuator.r.T_heatPort - pmActuator.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   pmActuator.r.R_actual = pmActuator.r.R * (1.0 + pmActuator.r.alpha * (pmActuator.r.T_heatPort - pmActuator.r.T_ref));
//   pmActuator.r.v = pmActuator.r.R_actual * pmActuator.r.i;
//   pmActuator.r.LossPower = pmActuator.r.v * pmActuator.r.i;
//   pmActuator.r.i = pmActuator.r.p.i;
//   0.0 = pmActuator.r.p.i + pmActuator.r.n.i;
//   pmActuator.r.v = pmActuator.r.p.v - pmActuator.r.n.v;
//   pmActuator.r.T_heatPort = pmActuator.r.T;
//   pmActuator.ground.port.V_m = 0.0;
//   pmActuator.coil.v = pmActuator.coil.p.v - pmActuator.coil.n.v;
//   0.0 = pmActuator.coil.p.i + pmActuator.coil.n.i;
//   pmActuator.coil.i = pmActuator.coil.p.i;
//   pmActuator.coil.V_m = pmActuator.coil.port_p.V_m - pmActuator.coil.port_n.V_m;
//   0.0 = pmActuator.coil.port_p.Phi + pmActuator.coil.port_n.Phi;
//   pmActuator.coil.Phi = pmActuator.coil.port_p.Phi;
//   pmActuator.coil.V_m = pmActuator.coil.i * pmActuator.coil.N;
//   pmActuator.coil.N * der(pmActuator.coil.Phi) = -pmActuator.coil.v;
//   pmActuator.coil.Psi = pmActuator.coil.N * pmActuator.coil.Phi;
//   pmActuator.coil.L_stat = if noEvent(abs(pmActuator.coil.i) > pmActuator.coil.eps) then abs(pmActuator.coil.Psi / pmActuator.coil.i) else abs(pmActuator.coil.Psi / pmActuator.coil.eps);
//   pmActuator.g_ma.G_m = (7.89568352087149e-06 * (pmActuator.g_ma.mu_r * pmActuator.g_ma.l)) / log(pmActuator.g_ma.r_o / pmActuator.g_ma.r_i);
//   pmActuator.g_ma.dGmBydx = (7.89568352087149e-06 * (Real(pmActuator.g_ma.dlBydx) * pmActuator.g_ma.mu_r)) / log(pmActuator.g_ma.r_o / pmActuator.g_ma.r_i);
//   pmActuator.g_ma.A_avg = 3.14159265358979 * ((pmActuator.g_ma.r_i + pmActuator.g_ma.r_o) * pmActuator.g_ma.l);
//   pmActuator.g_ma.B_avg = pmActuator.g_ma.Phi / pmActuator.g_ma.A_avg;
//   pmActuator.g_ma.flange.f = -pmActuator.g_ma.F_m;
//   pmActuator.g_ma.s_support = 0.0;
//   pmActuator.g_ma.F_m = 0.5 * (pmActuator.g_ma.V_m ^ 2.0 * pmActuator.g_ma.dGmBydx);
//   pmActuator.g_ma.R_m = 1.0 / pmActuator.g_ma.G_m;
//   pmActuator.g_ma.V_m = pmActuator.g_ma.Phi * pmActuator.g_ma.R_m;
//   pmActuator.g_ma.V_m = pmActuator.g_ma.port_p.V_m - pmActuator.g_ma.port_n.V_m;
//   pmActuator.g_ma.Phi = pmActuator.g_ma.port_p.Phi;
//   0.0 = pmActuator.g_ma.port_p.Phi + pmActuator.g_ma.port_n.Phi;
//   pmActuator.g_mb.G_m = (7.89568352087149e-06 * (pmActuator.g_mb.mu_r * pmActuator.g_mb.l)) / log(pmActuator.g_mb.r_o / pmActuator.g_mb.r_i);
//   pmActuator.g_mb.dGmBydx = (7.89568352087149e-06 * (Real(pmActuator.g_mb.dlBydx) * pmActuator.g_mb.mu_r)) / log(pmActuator.g_mb.r_o / pmActuator.g_mb.r_i);
//   pmActuator.g_mb.A_avg = 3.14159265358979 * ((pmActuator.g_mb.r_i + pmActuator.g_mb.r_o) * pmActuator.g_mb.l);
//   pmActuator.g_mb.B_avg = pmActuator.g_mb.Phi / pmActuator.g_mb.A_avg;
//   pmActuator.g_mb.flange.f = -pmActuator.g_mb.F_m;
//   pmActuator.g_mb.s_support = 0.0;
//   pmActuator.g_mb.F_m = 0.5 * (pmActuator.g_mb.V_m ^ 2.0 * pmActuator.g_mb.dGmBydx);
//   pmActuator.g_mb.R_m = 1.0 / pmActuator.g_mb.G_m;
//   pmActuator.g_mb.V_m = pmActuator.g_mb.Phi * pmActuator.g_mb.R_m;
//   pmActuator.g_mb.V_m = pmActuator.g_mb.port_p.V_m - pmActuator.g_mb.port_n.V_m;
//   pmActuator.g_mb.Phi = pmActuator.g_mb.port_p.Phi;
//   0.0 = pmActuator.g_mb.port_p.Phi + pmActuator.g_mb.port_n.Phi;
//   pmActuator.g_mLeak1.G_m = if pmActuator.g_mLeak1.t <= pmActuator.g_mLeak1.r_0 then 2.51327412287183e-06 * ((pmActuator.g_mLeak1.r_0 + pmActuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * pmActuator.g_mLeak1.t) / pmActuator.g_mLeak1.l_g)) else 2.51327412287183e-06 * ((pmActuator.g_mLeak1.r_0 + pmActuator.g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * pmActuator.g_mLeak1.r_0) / pmActuator.g_mLeak1.l_g));
//   pmActuator.g_mLeak1.R_m = 1.0 / pmActuator.g_mLeak1.G_m;
//   pmActuator.g_mLeak1.V_m = pmActuator.g_mLeak1.Phi * pmActuator.g_mLeak1.R_m;
//   pmActuator.g_mLeak1.V_m = pmActuator.g_mLeak1.port_p.V_m - pmActuator.g_mLeak1.port_n.V_m;
//   pmActuator.g_mLeak1.Phi = pmActuator.g_mLeak1.port_p.Phi;
//   0.0 = pmActuator.g_mLeak1.port_p.Phi + pmActuator.g_mLeak1.port_n.Phi;
//   pmActuator.g_mLeak2.G_m = 3.26725635973338e-07 * pmActuator.g_mLeak2.l;
//   pmActuator.g_mLeak2.R_m = 1.0 / pmActuator.g_mLeak2.G_m;
//   pmActuator.g_mLeak2.V_m = pmActuator.g_mLeak2.Phi * pmActuator.g_mLeak2.R_m;
//   pmActuator.g_mLeak2.V_m = pmActuator.g_mLeak2.port_p.V_m - pmActuator.g_mLeak2.port_n.V_m;
//   pmActuator.g_mLeak2.Phi = pmActuator.g_mLeak2.port_p.Phi;
//   0.0 = pmActuator.g_mLeak2.port_p.Phi + pmActuator.g_mLeak2.port_n.Phi;
//   pmActuator.x = pmActuator.flange.s;
//   pmActuator.L = pmActuator.coil.N ^ 2.0 * (pmActuator.g_ma.G_m + (pmActuator.g_mLeak1.G_m + pmActuator.g_mLeak2.G_m));
//   pmLoad.v = der(pmLoad.s);
//   pmLoad.a = der(pmLoad.v);
//   pmLoad.m * pmLoad.a = pmLoad.flange_a.f + pmLoad.flange_b.f;
//   pmLoad.flange_a.s = pmLoad.s + (-pmLoad.L) / 2.0;
//   pmLoad.flange_b.s = pmLoad.s + pmLoad.L / 2.0;
//   cGround.p.v = 0.0;
//   cSource.signalSource.y = cSource.signalSource.offset + (if time < cSource.signalSource.startTime then 0.0 else cSource.signalSource.height);
//   cSource.v = cSource.signalSource.y;
//   cSource.v = cSource.p.v - cSource.n.v;
//   0.0 = cSource.p.i + cSource.n.i;
//   cSource.i = cSource.p.i;
//   assert(1.0 + cActuator.r.alpha * (cActuator.r.T_heatPort - cActuator.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   cActuator.r.R_actual = cActuator.r.R * (1.0 + cActuator.r.alpha * (cActuator.r.T_heatPort - cActuator.r.T_ref));
//   cActuator.r.v = cActuator.r.R_actual * cActuator.r.i;
//   cActuator.r.LossPower = cActuator.r.v * cActuator.r.i;
//   cActuator.r.i = cActuator.r.p.i;
//   0.0 = cActuator.r.p.i + cActuator.r.n.i;
//   cActuator.r.v = cActuator.r.p.v - cActuator.r.n.v;
//   cActuator.r.T_heatPort = cActuator.r.T;
//   cActuator.armature.mass.v = der(cActuator.armature.mass.s);
//   cActuator.armature.mass.a = der(cActuator.armature.mass.v);
//   cActuator.armature.mass.m * cActuator.armature.mass.a = cActuator.armature.mass.flange_a.f + cActuator.armature.mass.flange_b.f;
//   cActuator.armature.mass.flange_a.s = cActuator.armature.mass.s + (-cActuator.armature.mass.L) / 2.0;
//   cActuator.armature.mass.flange_b.s = cActuator.armature.mass.s + cActuator.armature.mass.L / 2.0;
//   cActuator.armature.limit_xMin.flange.s = cActuator.armature.limit_xMin.s0;
//   cActuator.armature.limit_xMax.flange.s = cActuator.armature.limit_xMax.s0;
//   cActuator.armature.stopper_xMax.contact = cActuator.armature.stopper_xMax.s_rel < cActuator.armature.stopper_xMax.s_rel0;
//   cActuator.armature.stopper_xMax.f_c = smooth(1,if cActuator.armature.stopper_xMax.contact then (-cActuator.armature.stopper_xMax.c) * abs(cActuator.armature.stopper_xMax.s_rel - cActuator.armature.stopper_xMax.s_rel0) ^ cActuator.armature.stopper_xMax.n else 0.0);
//   cActuator.armature.stopper_xMax.f_d2 = if cActuator.armature.stopper_xMax.contact then cActuator.armature.stopper_xMax.d * cActuator.armature.stopper_xMax.v_rel else 0.0;
//   cActuator.armature.stopper_xMax.f_d = if cActuator.armature.stopper_xMax.contact then if noEvent(cActuator.armature.stopper_xMax.f_d2 < cActuator.armature.stopper_xMax.f_c) then cActuator.armature.stopper_xMax.f_c else if noEvent(cActuator.armature.stopper_xMax.f_d2 > -cActuator.armature.stopper_xMax.f_c) then -cActuator.armature.stopper_xMax.f_c else cActuator.armature.stopper_xMax.f_d2 else 0.0;
//   cActuator.armature.stopper_xMax.f = cActuator.armature.stopper_xMax.f_c + cActuator.armature.stopper_xMax.f_d;
//   cActuator.armature.stopper_xMax.s_rel = cActuator.armature.stopper_xMax.flange_b.s - cActuator.armature.stopper_xMax.flange_a.s;
//   cActuator.armature.stopper_xMax.v_rel = der(cActuator.armature.stopper_xMax.s_rel);
//   cActuator.armature.stopper_xMax.flange_b.f = cActuator.armature.stopper_xMax.f;
//   cActuator.armature.stopper_xMax.flange_a.f = -cActuator.armature.stopper_xMax.f;
//   cActuator.armature.stopper_xMin.contact = cActuator.armature.stopper_xMin.s_rel < cActuator.armature.stopper_xMin.s_rel0;
//   cActuator.armature.stopper_xMin.f_c = smooth(1,if cActuator.armature.stopper_xMin.contact then (-cActuator.armature.stopper_xMin.c) * abs(cActuator.armature.stopper_xMin.s_rel - cActuator.armature.stopper_xMin.s_rel0) ^ cActuator.armature.stopper_xMin.n else 0.0);
//   cActuator.armature.stopper_xMin.f_d2 = if cActuator.armature.stopper_xMin.contact then cActuator.armature.stopper_xMin.d * cActuator.armature.stopper_xMin.v_rel else 0.0;
//   cActuator.armature.stopper_xMin.f_d = if cActuator.armature.stopper_xMin.contact then if noEvent(cActuator.armature.stopper_xMin.f_d2 < cActuator.armature.stopper_xMin.f_c) then cActuator.armature.stopper_xMin.f_c else if noEvent(cActuator.armature.stopper_xMin.f_d2 > -cActuator.armature.stopper_xMin.f_c) then -cActuator.armature.stopper_xMin.f_c else cActuator.armature.stopper_xMin.f_d2 else 0.0;
//   cActuator.armature.stopper_xMin.f = cActuator.armature.stopper_xMin.f_c + cActuator.armature.stopper_xMin.f_d;
//   cActuator.armature.stopper_xMin.s_rel = cActuator.armature.stopper_xMin.flange_b.s - cActuator.armature.stopper_xMin.flange_a.s;
//   cActuator.armature.stopper_xMin.v_rel = der(cActuator.armature.stopper_xMin.s_rel);
//   cActuator.armature.stopper_xMin.flange_b.f = cActuator.armature.stopper_xMin.f;
//   cActuator.armature.stopper_xMin.flange_a.f = -cActuator.armature.stopper_xMin.f;
//   cActuator.armature.mass.s = cActuator.armature.s;
//   cActuator.armature.mass.v = cActuator.armature.v;
//   cActuator.armature.mass.a = cActuator.armature.a;
//   cActuator.l.L * der(cActuator.l.i) = cActuator.l.v;
//   cActuator.l.v = cActuator.l.p.v - cActuator.l.n.v;
//   0.0 = cActuator.l.p.i + cActuator.l.n.i;
//   cActuator.l.i = cActuator.l.p.i;
//   cActuator.electroTranslationalConverter.internalSupport.flange.f = cActuator.electroTranslationalConverter.internalSupport.f;
//   cActuator.electroTranslationalConverter.internalSupport.flange.s = cActuator.electroTranslationalConverter.internalSupport.s;
//   cActuator.electroTranslationalConverter.fixed.flange.s = cActuator.electroTranslationalConverter.fixed.s0;
//   cActuator.electroTranslationalConverter.v = cActuator.electroTranslationalConverter.p.v - cActuator.electroTranslationalConverter.n.v;
//   0.0 = cActuator.electroTranslationalConverter.p.i + cActuator.electroTranslationalConverter.n.i;
//   cActuator.electroTranslationalConverter.i = cActuator.electroTranslationalConverter.p.i;
//   cActuator.electroTranslationalConverter.s = cActuator.electroTranslationalConverter.flange.s - cActuator.electroTranslationalConverter.internalSupport.s;
//   cActuator.electroTranslationalConverter.vel = der(cActuator.electroTranslationalConverter.s);
//   cActuator.electroTranslationalConverter.k * cActuator.electroTranslationalConverter.vel = cActuator.electroTranslationalConverter.v;
//   cActuator.electroTranslationalConverter.flange.f = (-cActuator.electroTranslationalConverter.k) * cActuator.electroTranslationalConverter.i;
//   cActuator.flange.s = cActuator.x;
//   cLoad.v = der(cLoad.s);
//   cLoad.a = der(cLoad.v);
//   cLoad.m * cLoad.a = cLoad.flange_a.f + cLoad.flange_b.f;
//   cLoad.flange_a.s = cLoad.s + (-cLoad.L) / 2.0;
//   cLoad.flange_b.s = cLoad.s + cLoad.L / 2.0;
//   pmGround.p.i + pmSource.n.i + pmActuator.n.i = 0.0;
//   pmSource.p.i + pmActuator.p.i = 0.0;
//   pmActuator.mmf_PM.port_p.Phi + pmActuator.ground.port.Phi + pmActuator.coil.port_n.Phi + pmActuator.g_mb.port_n.Phi + pmActuator.g_mLeak1.port_p.Phi + pmActuator.g_mLeak2.port_p.Phi = 0.0;
//   pmActuator.mmf_PM.port_n.Phi + pmActuator.g_ma.port_p.Phi + pmActuator.g_mb.port_p.Phi = 0.0;
//   pmActuator.armature.mass.flange_a.f + (-pmActuator.armature.flange_a.f) + pmActuator.armature.stopper_xMin.flange_b.f = 0.0;
//   pmActuator.armature.mass.flange_b.f + (-pmActuator.armature.flange_b.f) + pmActuator.armature.stopper_xMax.flange_a.f = 0.0;
//   pmActuator.armature.flange_a.f + pmActuator.g_ma.flange.f + pmActuator.g_mb.flange.f = 0.0;
//   pmActuator.armature.flange_b.f + (-pmActuator.flange.f) = 0.0;
//   pmActuator.armature.limit_xMin.flange.f + pmActuator.armature.stopper_xMin.flange_a.f = 0.0;
//   pmActuator.armature.limit_xMax.flange.f + pmActuator.armature.stopper_xMax.flange_b.f = 0.0;
//   pmActuator.armature.flange_a.s = pmActuator.armature.mass.flange_a.s;
//   pmActuator.armature.flange_a.s = pmActuator.armature.stopper_xMin.flange_b.s;
//   pmActuator.armature.limit_xMax.flange.s = pmActuator.armature.stopper_xMax.flange_b.s;
//   pmActuator.armature.flange_b.s = pmActuator.armature.mass.flange_b.s;
//   pmActuator.armature.flange_b.s = pmActuator.armature.stopper_xMax.flange_a.s;
//   pmActuator.armature.limit_xMin.flange.s = pmActuator.armature.stopper_xMin.flange_a.s;
//   pmActuator.r.p.i + (-pmActuator.p.i) = 0.0;
//   pmActuator.r.n.i + pmActuator.coil.p.i = 0.0;
//   pmActuator.coil.port_p.Phi + pmActuator.g_ma.port_n.Phi + pmActuator.g_mLeak1.port_n.Phi + pmActuator.g_mLeak2.port_n.Phi = 0.0;
//   pmActuator.coil.n.i + (-pmActuator.n.i) = 0.0;
//   pmActuator.flange.f + pmLoad.flange_a.f = 0.0;
//   pmActuator.armature.flange_b.s = pmActuator.flange.s;
//   pmActuator.p.v = pmActuator.r.p.v;
//   pmActuator.armature.flange_a.s = pmActuator.g_ma.flange.s;
//   pmActuator.armature.flange_a.s = pmActuator.g_mb.flange.s;
//   pmActuator.coil.port_p.V_m = pmActuator.g_mLeak1.port_n.V_m;
//   pmActuator.coil.port_p.V_m = pmActuator.g_mLeak2.port_n.V_m;
//   pmActuator.coil.port_p.V_m = pmActuator.g_ma.port_n.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mLeak1.port_p.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mLeak2.port_p.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.g_mb.port_n.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.ground.port.V_m;
//   pmActuator.coil.port_n.V_m = pmActuator.mmf_PM.port_p.V_m;
//   pmActuator.g_ma.port_p.V_m = pmActuator.g_mb.port_p.V_m;
//   pmActuator.g_ma.port_p.V_m = pmActuator.mmf_PM.port_n.V_m;
//   pmActuator.coil.p.v = pmActuator.r.n.v;
//   pmActuator.coil.n.v = pmActuator.n.v;
//   pmLoad.flange_b.f = 0.0;
//   cGround.p.i + cSource.n.i + cActuator.n.i = 0.0;
//   cSource.p.i + cActuator.p.i = 0.0;
//   cActuator.r.p.i + (-cActuator.p.i) = 0.0;
//   cActuator.r.n.i + cActuator.l.p.i = 0.0;
//   cActuator.armature.mass.flange_a.f + (-cActuator.armature.flange_a.f) + cActuator.armature.stopper_xMin.flange_b.f = 0.0;
//   cActuator.armature.mass.flange_b.f + (-cActuator.armature.flange_b.f) + cActuator.armature.stopper_xMax.flange_a.f = 0.0;
//   cActuator.armature.flange_a.f + cActuator.electroTranslationalConverter.flange.f = 0.0;
//   cActuator.armature.flange_b.f + (-cActuator.flange.f) = 0.0;
//   cActuator.armature.limit_xMin.flange.f + cActuator.armature.stopper_xMin.flange_a.f = 0.0;
//   cActuator.armature.limit_xMax.flange.f + cActuator.armature.stopper_xMax.flange_b.f = 0.0;
//   cActuator.armature.flange_a.s = cActuator.armature.mass.flange_a.s;
//   cActuator.armature.flange_a.s = cActuator.armature.stopper_xMin.flange_b.s;
//   cActuator.armature.limit_xMax.flange.s = cActuator.armature.stopper_xMax.flange_b.s;
//   cActuator.armature.flange_b.s = cActuator.armature.mass.flange_b.s;
//   cActuator.armature.flange_b.s = cActuator.armature.stopper_xMax.flange_a.s;
//   cActuator.armature.limit_xMin.flange.s = cActuator.armature.stopper_xMin.flange_a.s;
//   cActuator.l.n.i + cActuator.electroTranslationalConverter.p.i = 0.0;
//   cActuator.electroTranslationalConverter.n.i + (-cActuator.n.i) = 0.0;
//   cActuator.electroTranslationalConverter.internalSupport.flange.f + cActuator.electroTranslationalConverter.fixed.flange.f = 0.0;
//   cActuator.electroTranslationalConverter.fixed.flange.s = cActuator.electroTranslationalConverter.internalSupport.flange.s;
//   cActuator.flange.f + cLoad.flange_a.f = 0.0;
//   cActuator.p.v = cActuator.r.p.v;
//   cActuator.l.p.v = cActuator.r.n.v;
//   cActuator.armature.flange_b.s = cActuator.flange.s;
//   cActuator.electroTranslationalConverter.p.v = cActuator.l.n.v;
//   cActuator.electroTranslationalConverter.n.v = cActuator.n.v;
//   cActuator.armature.flange_a.s = cActuator.electroTranslationalConverter.flange.s;
//   cLoad.flange_b.f = 0.0;
//   pmActuator.flange.s = pmLoad.flange_a.s;
//   cActuator.n.v = cGround.p.v;
//   cActuator.n.v = cSource.n.v;
//   cActuator.flange.s = cLoad.flange_a.s;
//   cActuator.p.v = cSource.p.v;
//   pmActuator.n.v = pmGround.p.v;
//   pmActuator.n.v = pmSource.n.v;
//   pmActuator.p.v = pmSource.p.v;
// end Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ArmatureStroke has 239 equation(s) and 239 variable(s).
// 143 of these are trivial equation(s).
// "
// ""
// "function Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData\"
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cBRef = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_rRef = 1.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_ref = 293.15;
//   input Real(quantity=\"LinearTemperatureCoefficient\", unit=\"1/K\") alpha_Br = 0.0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T_op = 293.15;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_r = B_rRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"MagneticFieldStrength\", unit=\"A/m\") H_cB = H_cBRef * (1.0 + alpha_Br * (T_op - T_ref));
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_r = B_r / (H_cB * 1.25663706143592e-06);
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.HardMagnetic.BaseData;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator
//   parameter Real N = 140.0 \"Number of turns\";
//   parameter Real R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real r_core(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0125 \"Radius of ferromagnetic stator core\";
//   parameter Real l_PM(quantity = \"Length\", unit = \"m\") = 0.0035 \"Radial thickness of permanent magnet ring\";
//   parameter Real t(quantity = \"Length\", unit = \"m\") = 0.02 \"Axial length of permanent magnet ring and air gap respectively\";
//   parameter Real l_air(quantity = \"Length\", unit = \"m\") = 0.003 \"Total radial length of armature air gap\";
//   parameter Real l_FeOut(quantity = \"Length\", unit = \"m\") = 0.004 \"Radial thickness of outer back iron (for estimation of leakage permeance)\";
//   parameter Real material.H_cBRef(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = 1.0 \"Coercivity at reference temperature\";
//   parameter Real material.B_rRef(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Remanence at reference temperature\";
//   parameter Real material.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Reference temperature\";
//   parameter Real material.alpha_Br(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of remanence at reference temperature\";
//   parameter Real material.T_op(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Operating temperature\";
//   final parameter Real material.B_r(quantity = \"MagneticFluxDensity\", unit = \"T\") = material.B_rRef * (1.0 + material.alpha_Br * (material.T_op - material.T_ref)) \"Remanence at operating temperature\";
//   final parameter Real material.H_cB(quantity = \"MagneticFieldStrength\", unit = \"A/m\") = material.H_cBRef * (1.0 + material.alpha_Br * (material.T_op - material.T_ref)) \"Coercivity at operating temperature\";
//   final parameter Real material.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = material.B_r / (material.H_cB * 1.25663706143592e-06) \"Relative permeability\";
//   parameter Real m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Mass of armature\";
//   parameter Real c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Position of stopper at minimum armature position\";
//   parameter Real x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Position of stopper at maximum armature position\";
//   Real x(quantity = \"Length\", unit = \"m\", start = x_min, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real L(quantity = \"Inductance\", unit = \"H\") \"Coil inductance\";
//   Real mmf_PM.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real mmf_PM.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real mmf_PM.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real mmf_PM.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   parameter Real mmf_PM.V_m(quantity = \"MagneticPotential\", unit = \"A\") = material.H_cB * l_PM \"Magnetic potential differnce\";
//   Real mmf_PM.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Real armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = m_a \"Armature mass\";
//   parameter Real armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = c \"Spring stiffness between impact partners\";
//   parameter Real armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = d \"Damping coefficient between impact partners\";
//   parameter Real armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = x_max \"Position of stopper at maximum armature position\";
//   parameter Real armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = x_min \"Position of stopper at minimum armature position\";
//   Real armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = armature.x_min \"fixed offset position of housing\";
//   Real armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = armature.x_max \"fixed offset position of housing\";
//   Real armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMax.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMin.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R \"Resistance at temperature T_ref\";
//   parameter Real r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, StateSelect = StateSelect.prefer) \"Current\";
//   Real coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real coil.N(start = 1.0) = N \"Number of turns\";
//   Real coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real coil.eps = 1e-13;
//   Real g_ma.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_ma.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_ma.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_ma.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_ma.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_ma.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_ma.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_ma.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real g_ma.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_ma.s(quantity = \"Length\", unit = \"m\") = g_ma.flange.s - g_ma.s_support \"Distance between flange and support\";
//   Real g_ma.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_ma.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_ma.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_ma.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_ma.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_ma.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_ma.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_ma.l(quantity = \"Length\", unit = \"m\") = t / 2.0 + x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real g_ma.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_core \"Inner radius of hollow cylinder\";
//   parameter Real g_ma.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = r_core + (l_air + l_PM) \"Outer radius of hollow cylinder\";
//   Real g_ma.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real g_ma.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real g_mb.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mb.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mb.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mb.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mb.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mb.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mb.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_mb.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.05 \"Relative magnetic permeability\";
//   Real g_mb.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_mb.s(quantity = \"Length\", unit = \"m\") = g_mb.flange.s - g_mb.s_support \"Distance between flange and support\";
//   Real g_mb.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mb.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mb.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_mb.dlBydx = -1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_mb.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_mb.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_mb.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_mb.l(quantity = \"Length\", unit = \"m\") = t / 2.0 - x \"Axial length (orthogonal to direction of flux)\";
//   parameter Real g_mb.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_core \"Inner radius of hollow cylinder\";
//   parameter Real g_mb.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.015) = r_core + (l_air + l_PM) \"Outer radius of hollow cylinder\";
//   Real g_mb.B_avg(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Average flux density (at arithmetic mean radius)\";
//   protected Real g_mb.A_avg(quantity = \"Area\", unit = \"m2\") \"Average cross-sectional area orthogonal to direction of flux (at arithmetic mean radius)\";
//   Real g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak1.r_0(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_core \"Radius of inner solid cylinder\";
//   parameter Real g_mLeak1.r_1(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.017) = r_core + (l_air + l_PM) \"Inner radius of outer hollow cylinder\";
//   parameter Real g_mLeak1.r_2(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_core + (l_air + (l_PM + l_FeOut)) \"Outer radius of outer hollow cylinder\";
//   final parameter Real g_mLeak1.l_g(quantity = \"Length\", unit = \"m\", min = 0.0) = g_mLeak1.r_1 - g_mLeak1.r_0 \"Radial gap length between both cylinders\";
//   final parameter Real g_mLeak1.t(quantity = \"Length\", unit = \"m\") = g_mLeak1.r_2 - g_mLeak1.r_1 \"Radial thickness of outer hollow cylinder\";
//   Real g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (r_core + (l_air / 2.0 + l_PM / 2.0)) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edges)\";
//   Real p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
// equation
//   mmf_PM.V_m = mmf_PM.port_p.V_m - mmf_PM.port_n.V_m;
//   mmf_PM.Phi = mmf_PM.port_p.Phi;
//   0.0 = mmf_PM.port_p.Phi + mmf_PM.port_n.Phi;
//   armature.mass.v = der(armature.mass.s);
//   armature.mass.a = der(armature.mass.v);
//   armature.mass.m * armature.mass.a = armature.mass.flange_a.f + armature.mass.flange_b.f;
//   armature.mass.flange_a.s = armature.mass.s + (-armature.mass.L) / 2.0;
//   armature.mass.flange_b.s = armature.mass.s + armature.mass.L / 2.0;
//   armature.limit_xMin.flange.s = armature.limit_xMin.s0;
//   armature.limit_xMax.flange.s = armature.limit_xMax.s0;
//   armature.stopper_xMax.contact = armature.stopper_xMax.s_rel < armature.stopper_xMax.s_rel0;
//   armature.stopper_xMax.f_c = smooth(1,if armature.stopper_xMax.contact then (-armature.stopper_xMax.c) * abs(armature.stopper_xMax.s_rel - armature.stopper_xMax.s_rel0) ^ armature.stopper_xMax.n else 0.0);
//   armature.stopper_xMax.f_d2 = if armature.stopper_xMax.contact then armature.stopper_xMax.d * armature.stopper_xMax.v_rel else 0.0;
//   armature.stopper_xMax.f_d = if armature.stopper_xMax.contact then if noEvent(armature.stopper_xMax.f_d2 < armature.stopper_xMax.f_c) then armature.stopper_xMax.f_c else if noEvent(armature.stopper_xMax.f_d2 > -armature.stopper_xMax.f_c) then -armature.stopper_xMax.f_c else armature.stopper_xMax.f_d2 else 0.0;
//   armature.stopper_xMax.f = armature.stopper_xMax.f_c + armature.stopper_xMax.f_d;
//   armature.stopper_xMax.s_rel = armature.stopper_xMax.flange_b.s - armature.stopper_xMax.flange_a.s;
//   armature.stopper_xMax.v_rel = der(armature.stopper_xMax.s_rel);
//   armature.stopper_xMax.flange_b.f = armature.stopper_xMax.f;
//   armature.stopper_xMax.flange_a.f = -armature.stopper_xMax.f;
//   armature.stopper_xMin.contact = armature.stopper_xMin.s_rel < armature.stopper_xMin.s_rel0;
//   armature.stopper_xMin.f_c = smooth(1,if armature.stopper_xMin.contact then (-armature.stopper_xMin.c) * abs(armature.stopper_xMin.s_rel - armature.stopper_xMin.s_rel0) ^ armature.stopper_xMin.n else 0.0);
//   armature.stopper_xMin.f_d2 = if armature.stopper_xMin.contact then armature.stopper_xMin.d * armature.stopper_xMin.v_rel else 0.0;
//   armature.stopper_xMin.f_d = if armature.stopper_xMin.contact then if noEvent(armature.stopper_xMin.f_d2 < armature.stopper_xMin.f_c) then armature.stopper_xMin.f_c else if noEvent(armature.stopper_xMin.f_d2 > -armature.stopper_xMin.f_c) then -armature.stopper_xMin.f_c else armature.stopper_xMin.f_d2 else 0.0;
//   armature.stopper_xMin.f = armature.stopper_xMin.f_c + armature.stopper_xMin.f_d;
//   armature.stopper_xMin.s_rel = armature.stopper_xMin.flange_b.s - armature.stopper_xMin.flange_a.s;
//   armature.stopper_xMin.v_rel = der(armature.stopper_xMin.s_rel);
//   armature.stopper_xMin.flange_b.f = armature.stopper_xMin.f;
//   armature.stopper_xMin.flange_a.f = -armature.stopper_xMin.f;
//   armature.mass.s = armature.s;
//   armature.mass.v = armature.v;
//   armature.mass.a = armature.a;
//   assert(1.0 + r.alpha * (r.T_heatPort - r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r.R_actual = r.R * (1.0 + r.alpha * (r.T_heatPort - r.T_ref));
//   r.v = r.R_actual * r.i;
//   r.LossPower = r.v * r.i;
//   r.i = r.p.i;
//   0.0 = r.p.i + r.n.i;
//   r.v = r.p.v - r.n.v;
//   r.T_heatPort = r.T;
//   ground.port.V_m = 0.0;
//   coil.v = coil.p.v - coil.n.v;
//   0.0 = coil.p.i + coil.n.i;
//   coil.i = coil.p.i;
//   coil.V_m = coil.port_p.V_m - coil.port_n.V_m;
//   0.0 = coil.port_p.Phi + coil.port_n.Phi;
//   coil.Phi = coil.port_p.Phi;
//   coil.V_m = coil.i * coil.N;
//   coil.N * der(coil.Phi) = -coil.v;
//   coil.Psi = coil.N * coil.Phi;
//   coil.L_stat = if noEvent(abs(coil.i) > coil.eps) then abs(coil.Psi / coil.i) else abs(coil.Psi / coil.eps);
//   g_ma.G_m = (7.89568352087149e-06 * (g_ma.mu_r * g_ma.l)) / log(g_ma.r_o / g_ma.r_i);
//   g_ma.dGmBydx = (7.89568352087149e-06 * (Real(g_ma.dlBydx) * g_ma.mu_r)) / log(g_ma.r_o / g_ma.r_i);
//   g_ma.A_avg = 3.14159265358979 * ((g_ma.r_i + g_ma.r_o) * g_ma.l);
//   g_ma.B_avg = g_ma.Phi / g_ma.A_avg;
//   g_ma.flange.f = -g_ma.F_m;
//   g_ma.s_support = 0.0;
//   g_ma.F_m = 0.5 * (g_ma.V_m ^ 2.0 * g_ma.dGmBydx);
//   g_ma.R_m = 1.0 / g_ma.G_m;
//   g_ma.V_m = g_ma.Phi * g_ma.R_m;
//   g_ma.V_m = g_ma.port_p.V_m - g_ma.port_n.V_m;
//   g_ma.Phi = g_ma.port_p.Phi;
//   0.0 = g_ma.port_p.Phi + g_ma.port_n.Phi;
//   g_mb.G_m = (7.89568352087149e-06 * (g_mb.mu_r * g_mb.l)) / log(g_mb.r_o / g_mb.r_i);
//   g_mb.dGmBydx = (7.89568352087149e-06 * (Real(g_mb.dlBydx) * g_mb.mu_r)) / log(g_mb.r_o / g_mb.r_i);
//   g_mb.A_avg = 3.14159265358979 * ((g_mb.r_i + g_mb.r_o) * g_mb.l);
//   g_mb.B_avg = g_mb.Phi / g_mb.A_avg;
//   g_mb.flange.f = -g_mb.F_m;
//   g_mb.s_support = 0.0;
//   g_mb.F_m = 0.5 * (g_mb.V_m ^ 2.0 * g_mb.dGmBydx);
//   g_mb.R_m = 1.0 / g_mb.G_m;
//   g_mb.V_m = g_mb.Phi * g_mb.R_m;
//   g_mb.V_m = g_mb.port_p.V_m - g_mb.port_n.V_m;
//   g_mb.Phi = g_mb.port_p.Phi;
//   0.0 = g_mb.port_p.Phi + g_mb.port_n.Phi;
//   g_mLeak1.G_m = if g_mLeak1.t <= g_mLeak1.r_0 then 2.51327412287183e-06 * ((g_mLeak1.r_0 + g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * g_mLeak1.t) / g_mLeak1.l_g)) else 2.51327412287183e-06 * ((g_mLeak1.r_0 + g_mLeak1.l_g / 2.0) * log(1.0 + (2.0 * g_mLeak1.r_0) / g_mLeak1.l_g));
//   g_mLeak1.R_m = 1.0 / g_mLeak1.G_m;
//   g_mLeak1.V_m = g_mLeak1.Phi * g_mLeak1.R_m;
//   g_mLeak1.V_m = g_mLeak1.port_p.V_m - g_mLeak1.port_n.V_m;
//   g_mLeak1.Phi = g_mLeak1.port_p.Phi;
//   0.0 = g_mLeak1.port_p.Phi + g_mLeak1.port_n.Phi;
//   g_mLeak2.G_m = 3.26725635973338e-07 * g_mLeak2.l;
//   g_mLeak2.R_m = 1.0 / g_mLeak2.G_m;
//   g_mLeak2.V_m = g_mLeak2.Phi * g_mLeak2.R_m;
//   g_mLeak2.V_m = g_mLeak2.port_p.V_m - g_mLeak2.port_n.V_m;
//   g_mLeak2.Phi = g_mLeak2.port_p.Phi;
//   0.0 = g_mLeak2.port_p.Phi + g_mLeak2.port_n.Phi;
//   x = flange.s;
//   L = coil.N ^ 2.0 * (g_ma.G_m + (g_mLeak1.G_m + g_mLeak2.G_m));
//   mmf_PM.port_p.Phi + ground.port.Phi + coil.port_n.Phi + g_mb.port_n.Phi + g_mLeak1.port_p.Phi + g_mLeak2.port_p.Phi = 0.0;
//   mmf_PM.port_n.Phi + g_ma.port_p.Phi + g_mb.port_p.Phi = 0.0;
//   armature.mass.flange_a.f + (-armature.flange_a.f) + armature.stopper_xMin.flange_b.f = 0.0;
//   armature.mass.flange_b.f + (-armature.flange_b.f) + armature.stopper_xMax.flange_a.f = 0.0;
//   armature.flange_a.f + g_ma.flange.f + g_mb.flange.f = 0.0;
//   armature.flange_b.f + (-flange.f) = 0.0;
//   armature.limit_xMin.flange.f + armature.stopper_xMin.flange_a.f = 0.0;
//   armature.limit_xMax.flange.f + armature.stopper_xMax.flange_b.f = 0.0;
//   armature.flange_a.s = armature.mass.flange_a.s;
//   armature.flange_a.s = armature.stopper_xMin.flange_b.s;
//   armature.limit_xMax.flange.s = armature.stopper_xMax.flange_b.s;
//   armature.flange_b.s = armature.mass.flange_b.s;
//   armature.flange_b.s = armature.stopper_xMax.flange_a.s;
//   armature.limit_xMin.flange.s = armature.stopper_xMin.flange_a.s;
//   r.p.i + (-p.i) = 0.0;
//   r.n.i + coil.p.i = 0.0;
//   coil.port_p.Phi + g_ma.port_n.Phi + g_mLeak1.port_n.Phi + g_mLeak2.port_n.Phi = 0.0;
//   coil.n.i + (-n.i) = 0.0;
//   p.i = 0.0;
//   n.i = 0.0;
//   flange.f = 0.0;
//   armature.flange_b.s = flange.s;
//   p.v = r.p.v;
//   armature.flange_a.s = g_ma.flange.s;
//   armature.flange_a.s = g_mb.flange.s;
//   coil.port_p.V_m = g_mLeak1.port_n.V_m;
//   coil.port_p.V_m = g_mLeak2.port_n.V_m;
//   coil.port_p.V_m = g_ma.port_n.V_m;
//   coil.port_n.V_m = g_mLeak1.port_p.V_m;
//   coil.port_n.V_m = g_mLeak2.port_p.V_m;
//   coil.port_n.V_m = g_mb.port_n.V_m;
//   coil.port_n.V_m = ground.port.V_m;
//   coil.port_n.V_m = mmf_PM.port_p.V_m;
//   g_ma.port_p.V_m = g_mb.port_p.V_m;
//   g_ma.port_p.V_m = mmf_PM.port_n.V_m;
//   coil.p.v = r.n.v;
//   coil.n.v = n.v;
// end Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.PermeanceActuator has 129 equation(s) and 129 variable(s).
// 72 of these are trivial equation(s).
// "
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator
//   parameter Real k(quantity = \"ElectricalForceConstant\", unit = \"N/A\") = 3.88 \"Converter constant\";
//   parameter Real R(quantity = \"Resistance\", unit = \"Ohm\") = 2.86 \"Coil resistance\";
//   parameter Real L(quantity = \"Inductance\", unit = \"H\") = 0.0051 \"Coil inductance at mid-stroke\";
//   parameter Real m_a(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 0.012 \"Armature mass\";
//   parameter Real c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real x_min(quantity = \"Length\", unit = \"m\") = -0.004 \"Minimum armature position\";
//   parameter Real x_max(quantity = \"Length\", unit = \"m\") = 0.004 \"Maximum armature position\";
//   Real x(quantity = \"Length\", unit = \"m\", start = x_min, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position\";
//   Real r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R \"Resistance at temperature T_ref\";
//   parameter Real r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   parameter Real armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = m_a \"Armature mass\";
//   parameter Real armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = c \"Spring stiffness between impact partners\";
//   parameter Real armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = d \"Damping coefficient between impact partners\";
//   parameter Real armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = x_max \"Position of stopper at maximum armature position\";
//   parameter Real armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = x_min \"Position of stopper at minimum armature position\";
//   Real armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = armature.x_min \"fixed offset position of housing\";
//   Real armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = armature.x_max \"fixed offset position of housing\";
//   Real armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMax.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMin.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real l.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real l.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real l.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real l.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real l.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real l.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real l.L(quantity = \"Inductance\", unit = \"H\", start = 1.0) = L \"Inductance\";
//   parameter Boolean electroTranslationalConverter.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real electroTranslationalConverter.k(quantity = \"ElectricalForceConstant\", unit = \"N/A\", start = 1.0) = k \"Transformation coefficient\";
//   Real electroTranslationalConverter.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins\";
//   Real electroTranslationalConverter.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from positive to negative pin\";
//   Real electroTranslationalConverter.s(quantity = \"Length\", unit = \"m\") \"Position of flange relative to support\";
//   Real electroTranslationalConverter.vel(quantity = \"Velocity\", unit = \"m/s\") \"Velocity of flange relative to support\";
//   Real electroTranslationalConverter.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real electroTranslationalConverter.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real electroTranslationalConverter.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real electroTranslationalConverter.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real electroTranslationalConverter.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real electroTranslationalConverter.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   input Real electroTranslationalConverter.internalSupport.f(quantity = \"Force\", unit = \"N\") = -electroTranslationalConverter.flange.f \"External support force (must be computed via force balance in model where InternalSupport is used; = flange.f)\";
//   Real electroTranslationalConverter.internalSupport.s(quantity = \"Length\", unit = \"m\") \"External support position (= flange.s)\";
//   Real electroTranslationalConverter.internalSupport.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real electroTranslationalConverter.internalSupport.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real electroTranslationalConverter.fixed.s0(quantity = \"Length\", unit = \"m\") = 0.0 \"fixed offset position of housing\";
//   Real electroTranslationalConverter.fixed.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real electroTranslationalConverter.fixed.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
// equation
//   assert(1.0 + r.alpha * (r.T_heatPort - r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r.R_actual = r.R * (1.0 + r.alpha * (r.T_heatPort - r.T_ref));
//   r.v = r.R_actual * r.i;
//   r.LossPower = r.v * r.i;
//   r.i = r.p.i;
//   0.0 = r.p.i + r.n.i;
//   r.v = r.p.v - r.n.v;
//   r.T_heatPort = r.T;
//   armature.mass.v = der(armature.mass.s);
//   armature.mass.a = der(armature.mass.v);
//   armature.mass.m * armature.mass.a = armature.mass.flange_a.f + armature.mass.flange_b.f;
//   armature.mass.flange_a.s = armature.mass.s + (-armature.mass.L) / 2.0;
//   armature.mass.flange_b.s = armature.mass.s + armature.mass.L / 2.0;
//   armature.limit_xMin.flange.s = armature.limit_xMin.s0;
//   armature.limit_xMax.flange.s = armature.limit_xMax.s0;
//   armature.stopper_xMax.contact = armature.stopper_xMax.s_rel < armature.stopper_xMax.s_rel0;
//   armature.stopper_xMax.f_c = smooth(1,if armature.stopper_xMax.contact then (-armature.stopper_xMax.c) * abs(armature.stopper_xMax.s_rel - armature.stopper_xMax.s_rel0) ^ armature.stopper_xMax.n else 0.0);
//   armature.stopper_xMax.f_d2 = if armature.stopper_xMax.contact then armature.stopper_xMax.d * armature.stopper_xMax.v_rel else 0.0;
//   armature.stopper_xMax.f_d = if armature.stopper_xMax.contact then if noEvent(armature.stopper_xMax.f_d2 < armature.stopper_xMax.f_c) then armature.stopper_xMax.f_c else if noEvent(armature.stopper_xMax.f_d2 > -armature.stopper_xMax.f_c) then -armature.stopper_xMax.f_c else armature.stopper_xMax.f_d2 else 0.0;
//   armature.stopper_xMax.f = armature.stopper_xMax.f_c + armature.stopper_xMax.f_d;
//   armature.stopper_xMax.s_rel = armature.stopper_xMax.flange_b.s - armature.stopper_xMax.flange_a.s;
//   armature.stopper_xMax.v_rel = der(armature.stopper_xMax.s_rel);
//   armature.stopper_xMax.flange_b.f = armature.stopper_xMax.f;
//   armature.stopper_xMax.flange_a.f = -armature.stopper_xMax.f;
//   armature.stopper_xMin.contact = armature.stopper_xMin.s_rel < armature.stopper_xMin.s_rel0;
//   armature.stopper_xMin.f_c = smooth(1,if armature.stopper_xMin.contact then (-armature.stopper_xMin.c) * abs(armature.stopper_xMin.s_rel - armature.stopper_xMin.s_rel0) ^ armature.stopper_xMin.n else 0.0);
//   armature.stopper_xMin.f_d2 = if armature.stopper_xMin.contact then armature.stopper_xMin.d * armature.stopper_xMin.v_rel else 0.0;
//   armature.stopper_xMin.f_d = if armature.stopper_xMin.contact then if noEvent(armature.stopper_xMin.f_d2 < armature.stopper_xMin.f_c) then armature.stopper_xMin.f_c else if noEvent(armature.stopper_xMin.f_d2 > -armature.stopper_xMin.f_c) then -armature.stopper_xMin.f_c else armature.stopper_xMin.f_d2 else 0.0;
//   armature.stopper_xMin.f = armature.stopper_xMin.f_c + armature.stopper_xMin.f_d;
//   armature.stopper_xMin.s_rel = armature.stopper_xMin.flange_b.s - armature.stopper_xMin.flange_a.s;
//   armature.stopper_xMin.v_rel = der(armature.stopper_xMin.s_rel);
//   armature.stopper_xMin.flange_b.f = armature.stopper_xMin.f;
//   armature.stopper_xMin.flange_a.f = -armature.stopper_xMin.f;
//   armature.mass.s = armature.s;
//   armature.mass.v = armature.v;
//   armature.mass.a = armature.a;
//   l.L * der(l.i) = l.v;
//   l.v = l.p.v - l.n.v;
//   0.0 = l.p.i + l.n.i;
//   l.i = l.p.i;
//   electroTranslationalConverter.internalSupport.flange.f = electroTranslationalConverter.internalSupport.f;
//   electroTranslationalConverter.internalSupport.flange.s = electroTranslationalConverter.internalSupport.s;
//   electroTranslationalConverter.fixed.flange.s = electroTranslationalConverter.fixed.s0;
//   electroTranslationalConverter.v = electroTranslationalConverter.p.v - electroTranslationalConverter.n.v;
//   0.0 = electroTranslationalConverter.p.i + electroTranslationalConverter.n.i;
//   electroTranslationalConverter.i = electroTranslationalConverter.p.i;
//   electroTranslationalConverter.s = electroTranslationalConverter.flange.s - electroTranslationalConverter.internalSupport.s;
//   electroTranslationalConverter.vel = der(electroTranslationalConverter.s);
//   electroTranslationalConverter.k * electroTranslationalConverter.vel = electroTranslationalConverter.v;
//   electroTranslationalConverter.flange.f = (-electroTranslationalConverter.k) * electroTranslationalConverter.i;
//   flange.s = x;
//   r.p.i + (-p.i) = 0.0;
//   r.n.i + l.p.i = 0.0;
//   armature.mass.flange_a.f + (-armature.flange_a.f) + armature.stopper_xMin.flange_b.f = 0.0;
//   armature.mass.flange_b.f + (-armature.flange_b.f) + armature.stopper_xMax.flange_a.f = 0.0;
//   armature.flange_a.f + electroTranslationalConverter.flange.f = 0.0;
//   armature.flange_b.f + (-flange.f) = 0.0;
//   armature.limit_xMin.flange.f + armature.stopper_xMin.flange_a.f = 0.0;
//   armature.limit_xMax.flange.f + armature.stopper_xMax.flange_b.f = 0.0;
//   armature.flange_a.s = armature.mass.flange_a.s;
//   armature.flange_a.s = armature.stopper_xMin.flange_b.s;
//   armature.limit_xMax.flange.s = armature.stopper_xMax.flange_b.s;
//   armature.flange_b.s = armature.mass.flange_b.s;
//   armature.flange_b.s = armature.stopper_xMax.flange_a.s;
//   armature.limit_xMin.flange.s = armature.stopper_xMin.flange_a.s;
//   l.n.i + electroTranslationalConverter.p.i = 0.0;
//   electroTranslationalConverter.n.i + (-n.i) = 0.0;
//   electroTranslationalConverter.internalSupport.flange.f + electroTranslationalConverter.fixed.flange.f = 0.0;
//   electroTranslationalConverter.fixed.flange.s = electroTranslationalConverter.internalSupport.flange.s;
//   p.i = 0.0;
//   n.i = 0.0;
//   flange.f = 0.0;
//   p.v = r.p.v;
//   l.p.v = r.n.v;
//   armature.flange_b.s = flange.s;
//   electroTranslationalConverter.p.v = l.n.v;
//   electroTranslationalConverter.n.v = n.v;
//   armature.flange_a.s = electroTranslationalConverter.flange.s;
// end Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.Components.ConstantActuator has 78 equation(s) and 78 variable(s).
// 51 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Tables.CombiTable1Ds.tableInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   output Integer tableID;
// 
//   external \"C\" tableID = ModelicaTables_CombiTable1D_init(tableName, fileName, table, size(table, 1), size(table, 2), smoothness);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableInit;
// 
// function Modelica.Blocks.Tables.CombiTable1Ds.tableIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real u;
//   output Real value;
// 
//   external \"C\" value = ModelicaTables_CombiTable1D_interpolate(tableID, icol, u);
// end Modelica.Blocks.Tables.CombiTable1Ds.tableIpo;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.0;
//   input Real c_a = 1.0;
//   input Real c_b = 1.0;
//   input Real n = 1.0;
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28 \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 400.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.488;
//   input Real c_a = 1200.0;
//   input Real c_b = 3.0;
//   input Real n = 12.5;
//   output Steel_9SMnPb28 res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox \"Approximation of relative permeability mu_r as a function of flux density B for soft magnetic materials\"
//   input Real B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density in ferromagnetic flux tube element\";
//   input Real mu_i(quantity = \"RelativePermeability\", unit = \"1\") \"Initial relative permeability at B=0\";
//   input Real B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density at maximum relative permeability\";
//   input Real c_a \"Coefficient of approximation function\";
//   input Real c_b \"Coefficient of approximation function\";
//   input Real n \"Exponent of approximation function\";
//   output Real mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability of ferromagnetic flux tube element\";
//   protected Real B_N \"Flux density B normalized to flux density at maximum relative permeability B_myMax\";
// algorithm
//   B_N := abs(B / B_myMax);
//   mu_r := 1.0 + (-1.0 + mu_i + c_a * B_N) / (1.0 + c_b * B_N + B_N ^ n);
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary
//   parameter Real v_step(quantity = \"ElectricPotential\", unit = \"V\") = 12.0 \"Applied voltage\";
//   output Real x_set.y \"Connector of Real output signal\";
//   parameter Real x_set.height = advancedSolenoid.x_min - advancedSolenoid.x_max \"Height of ramps\";
//   parameter Real x_set.duration(quantity = \"Time\", unit = \"s\", min = 1e-60, start = 2.0) = 10.0 \"Durations of ramp\";
//   parameter Real x_set.offset = advancedSolenoid.x_max \"Offset of output signal\";
//   parameter Real x_set.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   Real advancedGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real advancedSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real advancedSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real advancedSource.signalSource.offset = advancedSource.offset \"Offset of output signal y\";
//   parameter Real advancedSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = advancedSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real advancedSource.signalSource.height = advancedSource.V \"Height of step\";
//   parameter Real advancedSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = v_step \"Height of step\";
//   parameter Real advancedSolenoid.N = 957.0 \"Number of turns\";
//   parameter Real advancedSolenoid.R(quantity = \"Resistance\", unit = \"Ohm\") = 5.0 \"Coil resistance\";
//   parameter Real advancedSolenoid.R_par(quantity = \"Resistance\", unit = \"Ohm\") = 100000.0 \"Resistance parallel to the coil, in series to C_par\";
//   parameter Real advancedSolenoid.C_par(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 1e-09 \"Capacitance parallel to the coil, in series to R_par\";
//   parameter Real advancedSolenoid.r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real advancedSolenoid.r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real advancedSolenoid.l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real advancedSolenoid.t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real advancedSolenoid.l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real advancedSolenoid.t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real advancedSolenoid.t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real advancedSolenoid.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real advancedSolenoid.r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real advancedSolenoid.l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real advancedSolenoid.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real advancedSolenoid.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real advancedSolenoid.x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real advancedSolenoid.x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real advancedSolenoid.x(quantity = \"Length\", unit = \"m\", start = advancedSolenoid.x_max, StateSelect = StateSelect.prefer) \"Armature position\";
//   Real advancedSolenoid.Psi_tot(quantity = \"MagneticFlux\", unit = \"Wb\") \"Total flux linkage for information only\";
//   Real advancedSolenoid.L_statTot(quantity = \"Inductance\", unit = \"H\") \"Total static inductance for information only\";
//   protected parameter Real advancedSolenoid.rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real advancedSolenoid.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real advancedSolenoid.coil1.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real advancedSolenoid.coil1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real advancedSolenoid.coil1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real advancedSolenoid.coil1.N(start = 1.0) = advancedSolenoid.N / 2.0 \"Number of turns\";
//   Real advancedSolenoid.coil1.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real advancedSolenoid.coil1.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real advancedSolenoid.coil1.eps = 1e-13;
//   Real advancedSolenoid.r_1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeSide1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeSide1.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeSide1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeSide1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeSide1.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeSide1.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeSide1.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeSide1.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 2.0 + (-advancedSolenoid.t_poleBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = advancedSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke + ((-advancedSolenoid.t_yokeBot) / 2.0 + ((-advancedSolenoid.t_poleBot) / 2.0 + ((-advancedSolenoid.x_max) / 2.0 + (-advancedSolenoid.x_min) / 2.0 - advancedSolenoid.l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real advancedSolenoid.g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real advancedSolenoid.g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real advancedSolenoid.g_mAirWork.s(quantity = \"Length\", unit = \"m\") = advancedSolenoid.g_mAirWork.flange.s - advancedSolenoid.g_mAirWork.s_support \"Distance between flange and support\";
//   Real advancedSolenoid.g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer advancedSolenoid.g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real advancedSolenoid.g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real advancedSolenoid.g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real advancedSolenoid.g_mAirWork.l(quantity = \"Length\", unit = \"m\") = advancedSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real advancedSolenoid.g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real advancedSolenoid.g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (advancedSolenoid.g_mAirWork.r_o ^ 2.0 - advancedSolenoid.g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real advancedSolenoid.g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm + advancedSolenoid.t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_arm + advancedSolenoid.t_airPar \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_pole \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real advancedSolenoid.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real advancedSolenoid.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (advancedSolenoid.rho_steel * (advancedSolenoid.l_arm * advancedSolenoid.r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real advancedSolenoid.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = advancedSolenoid.c \"Spring stiffness between impact partners\";
//   parameter Real advancedSolenoid.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = advancedSolenoid.d \"Damping coefficient between impact partners\";
//   parameter Real advancedSolenoid.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real advancedSolenoid.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.x_max \"Position of stopper at maximum armature position\";
//   parameter Real advancedSolenoid.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = advancedSolenoid.x_min \"Position of stopper at minimum armature position\";
//   Real advancedSolenoid.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real advancedSolenoid.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real advancedSolenoid.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real advancedSolenoid.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real advancedSolenoid.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = advancedSolenoid.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = advancedSolenoid.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real advancedSolenoid.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real advancedSolenoid.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real advancedSolenoid.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = advancedSolenoid.armature.x_min \"fixed offset position of housing\";
//   Real advancedSolenoid.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = advancedSolenoid.armature.x_max \"fixed offset position of housing\";
//   Real advancedSolenoid.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real advancedSolenoid.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = advancedSolenoid.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real advancedSolenoid.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = advancedSolenoid.armature.c \"Spring constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = advancedSolenoid.armature.d \"Damping constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.n(min = 1.0) = advancedSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean advancedSolenoid.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real advancedSolenoid.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = advancedSolenoid.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real advancedSolenoid.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = advancedSolenoid.armature.c \"Spring constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = advancedSolenoid.armature.d \"Damping constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.n(min = 1.0) = advancedSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean advancedSolenoid.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real advancedSolenoid.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (advancedSolenoid.r_arm + advancedSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real advancedSolenoid.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * advancedSolenoid.r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real advancedSolenoid.g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real advancedSolenoid.coil2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real advancedSolenoid.coil2.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real advancedSolenoid.coil2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real advancedSolenoid.coil2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real advancedSolenoid.coil2.N(start = 1.0) = advancedSolenoid.N / 2.0 \"Number of turns\";
//   Real advancedSolenoid.coil2.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real advancedSolenoid.coil2.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real advancedSolenoid.coil2.eps = 1e-13;
//   Real advancedSolenoid.c_par1.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.c_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.c_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.c_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSolenoid.c_par1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = advancedSolenoid.C_par \"Capacitance\";
//   Real advancedSolenoid.G_mLeakRad.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.G_mLeakRad.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.G_mLeakRad.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.G_mLeakRad.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.G_mLeakRad.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.G_mLeakRad.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.G_mLeakRad.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.n = 1.0 \"Exponent of approximation function\";
//   Real advancedSolenoid.G_mLeakRad.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.G_mLeakRad.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.G_mLeakRad.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.G_mLeakRad.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.G_mLeakRad.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.G_mLeakRad.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 4.0 \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.G_mLeakRad.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.G_mLeakRad.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeSide2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeSide2.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeSide2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeSide2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeSide2.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeSide2.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeSide2.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeSide2.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 2.0 + (-advancedSolenoid.t_yokeBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = advancedSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.c_par2.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.c_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.c_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.c_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSolenoid.c_par2.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = advancedSolenoid.C_par \"Capacitance\";
//   Real advancedSolenoid.r_par1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_par1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_par1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_par1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_par1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_par1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_par1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R_par \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_par1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_par1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_par2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_par2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_par2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_par2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_par2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_par2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R_par \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_par2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_par2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.g_mLeak3.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak3.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak3.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak3.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak3.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak3.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak3.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak3.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak3.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (advancedSolenoid.r_arm + advancedSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real advancedSolenoid.g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real advancedSolenoid.g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real advancedSolenoid.g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real advancedSolenoid.g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = advancedSolenoid.g_mLeakWork.flange.s - advancedSolenoid.g_mLeakWork.s_support \"Distance between flange and support\";
//   Real advancedSolenoid.g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer advancedSolenoid.g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real advancedSolenoid.g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real advancedSolenoid.g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real advancedSolenoid.g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = advancedSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * advancedSolenoid.r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real advancedSolenoid.g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real advancedSolenoid.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Boolean advancedFeed_x.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real advancedFeed_x.s(quantity = \"Length\", unit = \"m\", StateSelect = StateSelect.default) = advancedFeed_x.flange.s - advancedFeed_x.s_support \"distance between flange and support (= flange.s - support.s)\";
//   Real advancedFeed_x.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedFeed_x.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real advancedFeed_x.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   parameter Boolean advancedFeed_x.exact = true \"true/false exact treatment/filtering the input signal\";
//   parameter Real advancedFeed_x.f_crit(quantity = \"Frequency\", unit = \"Hz\") = 1000.0 \"if exact=false, critical frequency of filter to filter input signal\";
//   Real advancedFeed_x.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"If exact=false, absolute velocity of flange_b else dummy\";
//   Real advancedFeed_x.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"If exact=false, absolute acceleration of flange_b else dummy\";
//   input Real advancedFeed_x.s_ref \"reference position of flange as input signal\";
//   protected constant Real advancedFeed_x.af = 1.3617 \"s coefficient of Bessel filter\";
//   protected constant Real advancedFeed_x.bf = 0.618 \"s*s coefficient of Bessel filter\";
//   protected parameter Real advancedFeed_x.w_crit(quantity = \"AngularFrequency\", unit = \"rad/s\") = 6.28318530717959 * advancedFeed_x.f_crit \"Critical frequency\";
//   Real simpleGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real simpleSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real simpleSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real simpleSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real simpleSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real simpleSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real simpleSource.signalSource.offset = simpleSource.offset \"Offset of output signal y\";
//   parameter Real simpleSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = simpleSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real simpleSource.signalSource.height = simpleSource.V \"Height of step\";
//   parameter Real simpleSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = v_step \"Height of step\";
//   parameter Real simpleSolenoid.R(quantity = \"Resistance\", unit = \"Ohm\") = 10.0 \"Armature coil resistance\";
//   parameter Real simpleSolenoid.N = 957.0 \"Number of turns\";
//   parameter Real simpleSolenoid.r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real simpleSolenoid.r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real simpleSolenoid.l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real simpleSolenoid.t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real simpleSolenoid.l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real simpleSolenoid.t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real simpleSolenoid.t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real simpleSolenoid.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real simpleSolenoid.r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real simpleSolenoid.l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real simpleSolenoid.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real simpleSolenoid.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real simpleSolenoid.x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real simpleSolenoid.x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real simpleSolenoid.x(quantity = \"Length\", unit = \"m\", start = simpleSolenoid.x_max, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position (identical with length of working air gap)\";
//   protected parameter Real simpleSolenoid.rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real simpleSolenoid.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real simpleSolenoid.coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real simpleSolenoid.coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real simpleSolenoid.coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real simpleSolenoid.coil.N(start = 1.0) = simpleSolenoid.N \"Number of turns\";
//   Real simpleSolenoid.coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real simpleSolenoid.coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real simpleSolenoid.coil.eps = 1e-13;
//   Real simpleSolenoid.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real simpleSolenoid.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real simpleSolenoid.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean simpleSolenoid.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real simpleSolenoid.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = simpleSolenoid.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real simpleSolenoid.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real simpleSolenoid.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real simpleSolenoid.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = simpleSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real simpleSolenoid.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real simpleSolenoid.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real simpleSolenoid.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real simpleSolenoid.g_mFeYokeSide.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeSide.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeYokeSide.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeYokeSide.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeYokeSide.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeYokeSide.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeYokeSide.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeYokeSide.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeYokeSide.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeYokeSide.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_yoke + ((-simpleSolenoid.t_poleBot) / 2.0 + (-simpleSolenoid.t_yokeBot) / 2.0) \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = simpleSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_yoke + ((-simpleSolenoid.t_yokeBot) / 2.0 + ((-simpleSolenoid.t_poleBot) / 2.0 + ((-simpleSolenoid.x_max) / 2.0 + (-simpleSolenoid.x_min) / 2.0 - simpleSolenoid.l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real simpleSolenoid.g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real simpleSolenoid.g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real simpleSolenoid.g_mAirWork.s(quantity = \"Length\", unit = \"m\") = simpleSolenoid.g_mAirWork.flange.s - simpleSolenoid.g_mAirWork.s_support \"Distance between flange and support\";
//   Real simpleSolenoid.g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer simpleSolenoid.g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real simpleSolenoid.g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real simpleSolenoid.g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real simpleSolenoid.g_mAirWork.l(quantity = \"Length\", unit = \"m\") = simpleSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real simpleSolenoid.g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real simpleSolenoid.g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (simpleSolenoid.g_mAirWork.r_o ^ 2.0 - simpleSolenoid.g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real simpleSolenoid.g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm + simpleSolenoid.t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_arm + simpleSolenoid.t_airPar \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_pole \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real simpleSolenoid.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real simpleSolenoid.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (simpleSolenoid.rho_steel * (simpleSolenoid.l_arm * simpleSolenoid.r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real simpleSolenoid.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = simpleSolenoid.c \"Spring stiffness between impact partners\";
//   parameter Real simpleSolenoid.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = simpleSolenoid.d \"Damping coefficient between impact partners\";
//   parameter Real simpleSolenoid.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real simpleSolenoid.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.x_max \"Position of stopper at maximum armature position\";
//   parameter Real simpleSolenoid.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = simpleSolenoid.x_min \"Position of stopper at minimum armature position\";
//   Real simpleSolenoid.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real simpleSolenoid.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real simpleSolenoid.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real simpleSolenoid.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real simpleSolenoid.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = simpleSolenoid.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = simpleSolenoid.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real simpleSolenoid.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real simpleSolenoid.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real simpleSolenoid.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = simpleSolenoid.armature.x_min \"fixed offset position of housing\";
//   Real simpleSolenoid.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = simpleSolenoid.armature.x_max \"fixed offset position of housing\";
//   Real simpleSolenoid.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real simpleSolenoid.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = simpleSolenoid.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real simpleSolenoid.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = simpleSolenoid.armature.c \"Spring constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = simpleSolenoid.armature.d \"Damping constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.n(min = 1.0) = simpleSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean simpleSolenoid.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real simpleSolenoid.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = simpleSolenoid.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real simpleSolenoid.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = simpleSolenoid.armature.c \"Spring constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = simpleSolenoid.armature.d \"Damping constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.n(min = 1.0) = simpleSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean simpleSolenoid.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real simpleSolenoid.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real simpleSolenoid.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real simpleSolenoid.g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (simpleSolenoid.r_arm + simpleSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real simpleSolenoid.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real simpleSolenoid.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real simpleSolenoid.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * simpleSolenoid.r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real simpleSolenoid.g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real simpleSolenoid.g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real simpleSolenoid.g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real simpleSolenoid.g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real simpleSolenoid.g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = simpleSolenoid.g_mLeakWork.flange.s - simpleSolenoid.g_mLeakWork.s_support \"Distance between flange and support\";
//   Real simpleSolenoid.g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer simpleSolenoid.g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real simpleSolenoid.g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real simpleSolenoid.g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real simpleSolenoid.g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = simpleSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * simpleSolenoid.r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real simpleSolenoid.g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real simpleSolenoid.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Boolean simpleFeed_x.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   Real simpleFeed_x.s(quantity = \"Length\", unit = \"m\", StateSelect = StateSelect.prefer) = simpleFeed_x.flange.s - simpleFeed_x.s_support \"distance between flange and support (= flange.s - support.s)\";
//   Real simpleFeed_x.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleFeed_x.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real simpleFeed_x.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   parameter Boolean simpleFeed_x.exact = false \"true/false exact treatment/filtering the input signal\";
//   parameter Real simpleFeed_x.f_crit(quantity = \"Frequency\", unit = \"Hz\") = 1000.0 \"if exact=false, critical frequency of filter to filter input signal\";
//   Real simpleFeed_x.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"If exact=false, absolute velocity of flange_b else dummy\";
//   Real simpleFeed_x.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"If exact=false, absolute acceleration of flange_b else dummy\";
//   input Real simpleFeed_x.s_ref \"reference position of flange as input signal\";
//   protected constant Real simpleFeed_x.af = 1.3617 \"s coefficient of Bessel filter\";
//   protected constant Real simpleFeed_x.bf = 0.618 \"s*s coefficient of Bessel filter\";
//   protected parameter Real simpleFeed_x.w_crit(quantity = \"AngularFrequency\", unit = \"rad/s\") = 6.28318530717959 * simpleFeed_x.f_crit \"Critical frequency\";
//   parameter Integer comparisonWithFEA.nout = 3 \"Number of outputs\";
//   input Real comparisonWithFEA.u \"Connector of Real input signal\";
//   output Real comparisonWithFEA.y[1] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[2] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[3] \"Connector of Real output signals\";
//   parameter Boolean comparisonWithFEA.tableOnFile = false \"true, if table is defined on file or in function usertab\";
//   parameter Real comparisonWithFEA.table[1,1] = 0.00025 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,2] = -85.8619 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,3] = 0.00014821 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,4] = 0.11954 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,1] = 0.0005 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,2] = -59.9662 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,3] = 0.00013931 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,4] = 0.11004 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,1] = 0.00075 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,2] = -41.0806 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,3] = 0.0001277 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,4] = 0.098942 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,1] = 0.001 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,2] = -28.88 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,3] = 0.00011587 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,4] = 0.088425 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,1] = 0.00125 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,2] = -21.4113 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,3] = 0.00010643 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,4] = 0.08015 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,1] = 0.0015 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,2] = -16.8003 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,3] = 9.9406e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,4] = 0.073992 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,1] = 0.00175 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,2] = -13.6942 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,3] = 9.3416e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,4] = 0.068792 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,1] = 0.002 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,2] = -11.1188 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,3] = 8.8564e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,4] = 0.064492 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,1] = 0.00225 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,2] = -9.6603 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,3] = 8.4505e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,4] = 0.060917 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,1] = 0.0025 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,2] = -8.4835 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,3] = 8.1215e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,4] = 0.058017 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,1] = 0.00275 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,2] = -7.4658 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,3] = 7.7881e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,4] = 0.055125 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,1] = 0.003 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,2] = -6.5591 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,3] = 7.5197e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,4] = 0.052733 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,1] = 0.00325 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,2] = -5.9706 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,3] = 7.2447e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,4] = 0.05035 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,1] = 0.0035 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,2] = -5.5013 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,3] = 7.0342e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,4] = 0.048525 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,1] = 0.00375 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,2] = -5.0469 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,3] = 6.8527e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,4] = 0.046867 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,1] = 0.004 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,2] = -4.6573 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,3] = 6.6526e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,4] = 0.045158 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,1] = 0.00425 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,2] = -4.2977 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,3] = 6.4425e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,4] = 0.043442 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,1] = 0.0045 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,2] = -4.0912 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,3] = 6.2747e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,4] = 0.04205 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,1] = 0.00475 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,2] = -3.7456 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,3] = 6.1231e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,4] = 0.040733 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,1] = 0.005 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,2] = -3.5869 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,3] = 5.9691e-05 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,4] = 0.039467 \"table matrix (grid = first column; e.g., table=[0,2])\";
//   parameter String comparisonWithFEA.tableName = \"NoName\" \"table name on file or in function usertab (see docu)\";
//   parameter String comparisonWithFEA.fileName = \"NoName\" \"file where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) comparisonWithFEA.smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"smoothness of table interpolation\";
//   protected Integer comparisonWithFEA.tableID;
//   parameter Integer comparisonWithFEA.columns[1] = 2 \"columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[2] = 3 \"columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[3] = 4 \"columns of table to be interpolated\";
// initial equation
//   simpleFeed_x.s = simpleFeed_x.s_ref;
// equation
//   x_set.y = x_set.offset + (if time < x_set.startTime then 0.0 else if time < x_set.startTime + x_set.duration then ((time - x_set.startTime) * x_set.height) / x_set.duration else x_set.height);
//   advancedGround.p.v = 0.0;
//   advancedSource.signalSource.y = advancedSource.signalSource.offset + (if time < advancedSource.signalSource.startTime then 0.0 else advancedSource.signalSource.height);
//   advancedSource.v = advancedSource.signalSource.y;
//   advancedSource.v = advancedSource.p.v - advancedSource.n.v;
//   0.0 = advancedSource.p.i + advancedSource.n.i;
//   advancedSource.i = advancedSource.p.i;
//   advancedSolenoid.ground.port.V_m = 0.0;
//   advancedSolenoid.coil1.v = advancedSolenoid.coil1.p.v - advancedSolenoid.coil1.n.v;
//   0.0 = advancedSolenoid.coil1.p.i + advancedSolenoid.coil1.n.i;
//   advancedSolenoid.coil1.i = advancedSolenoid.coil1.p.i;
//   advancedSolenoid.coil1.V_m = advancedSolenoid.coil1.port_p.V_m - advancedSolenoid.coil1.port_n.V_m;
//   0.0 = advancedSolenoid.coil1.port_p.Phi + advancedSolenoid.coil1.port_n.Phi;
//   advancedSolenoid.coil1.Phi = advancedSolenoid.coil1.port_p.Phi;
//   advancedSolenoid.coil1.V_m = advancedSolenoid.coil1.i * advancedSolenoid.coil1.N;
//   advancedSolenoid.coil1.N * der(advancedSolenoid.coil1.Phi) = -advancedSolenoid.coil1.v;
//   advancedSolenoid.coil1.Psi = advancedSolenoid.coil1.N * advancedSolenoid.coil1.Phi;
//   advancedSolenoid.coil1.L_stat = if noEvent(abs(advancedSolenoid.coil1.i) > advancedSolenoid.coil1.eps) then abs(advancedSolenoid.coil1.Psi / advancedSolenoid.coil1.i) else abs(advancedSolenoid.coil1.Psi / advancedSolenoid.coil1.eps);
//   assert(1.0 + advancedSolenoid.r_1.alpha * (advancedSolenoid.r_1.T_heatPort - advancedSolenoid.r_1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_1.R_actual = advancedSolenoid.r_1.R * (1.0 + advancedSolenoid.r_1.alpha * (advancedSolenoid.r_1.T_heatPort - advancedSolenoid.r_1.T_ref));
//   advancedSolenoid.r_1.v = advancedSolenoid.r_1.R_actual * advancedSolenoid.r_1.i;
//   advancedSolenoid.r_1.LossPower = advancedSolenoid.r_1.v * advancedSolenoid.r_1.i;
//   advancedSolenoid.r_1.i = advancedSolenoid.r_1.p.i;
//   0.0 = advancedSolenoid.r_1.p.i + advancedSolenoid.r_1.n.i;
//   advancedSolenoid.r_1.v = advancedSolenoid.r_1.p.v - advancedSolenoid.r_1.n.v;
//   advancedSolenoid.r_1.T_heatPort = advancedSolenoid.r_1.T;
//   advancedSolenoid.g_mFeYokeSide1.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeSide1.r_o ^ 2.0 - advancedSolenoid.g_mFeYokeSide1.r_i ^ 2.0);
//   advancedSolenoid.g_mFeYokeSide1.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeYokeSide1.mu_r * advancedSolenoid.g_mFeYokeSide1.A)) / advancedSolenoid.g_mFeYokeSide1.l;
//   advancedSolenoid.g_mFeYokeSide1.H = advancedSolenoid.g_mFeYokeSide1.B / (advancedSolenoid.g_mFeYokeSide1.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeSide1.B = advancedSolenoid.g_mFeYokeSide1.Phi / advancedSolenoid.g_mFeYokeSide1.A;
//   advancedSolenoid.g_mFeYokeSide1.V_m = advancedSolenoid.g_mFeYokeSide1.Phi * advancedSolenoid.g_mFeYokeSide1.R_m;
//   advancedSolenoid.g_mFeYokeSide1.R_m = 1.0 / advancedSolenoid.g_mFeYokeSide1.G_m;
//   advancedSolenoid.g_mFeYokeSide1.mu_r = if advancedSolenoid.g_mFeYokeSide1.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeSide1.B,advancedSolenoid.g_mFeYokeSide1.material.mu_i,advancedSolenoid.g_mFeYokeSide1.material.B_myMax,advancedSolenoid.g_mFeYokeSide1.material.c_a,advancedSolenoid.g_mFeYokeSide1.material.c_b,advancedSolenoid.g_mFeYokeSide1.material.n) else advancedSolenoid.g_mFeYokeSide1.mu_rConst;
//   advancedSolenoid.g_mFeYokeSide1.V_m = advancedSolenoid.g_mFeYokeSide1.port_p.V_m - advancedSolenoid.g_mFeYokeSide1.port_n.V_m;
//   advancedSolenoid.g_mFeYokeSide1.Phi = advancedSolenoid.g_mFeYokeSide1.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeSide1.port_p.Phi + advancedSolenoid.g_mFeYokeSide1.port_n.Phi;
//   advancedSolenoid.g_mFeArm.A = 3.14159265358979 * (advancedSolenoid.g_mFeArm.r_o ^ 2.0 - advancedSolenoid.g_mFeArm.r_i ^ 2.0);
//   advancedSolenoid.g_mFeArm.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeArm.mu_r * advancedSolenoid.g_mFeArm.A)) / advancedSolenoid.g_mFeArm.l;
//   advancedSolenoid.g_mFeArm.H = advancedSolenoid.g_mFeArm.B / (advancedSolenoid.g_mFeArm.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeArm.B = advancedSolenoid.g_mFeArm.Phi / advancedSolenoid.g_mFeArm.A;
//   advancedSolenoid.g_mFeArm.V_m = advancedSolenoid.g_mFeArm.Phi * advancedSolenoid.g_mFeArm.R_m;
//   advancedSolenoid.g_mFeArm.R_m = 1.0 / advancedSolenoid.g_mFeArm.G_m;
//   advancedSolenoid.g_mFeArm.mu_r = if advancedSolenoid.g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeArm.B,advancedSolenoid.g_mFeArm.material.mu_i,advancedSolenoid.g_mFeArm.material.B_myMax,advancedSolenoid.g_mFeArm.material.c_a,advancedSolenoid.g_mFeArm.material.c_b,advancedSolenoid.g_mFeArm.material.n) else advancedSolenoid.g_mFeArm.mu_rConst;
//   advancedSolenoid.g_mFeArm.V_m = advancedSolenoid.g_mFeArm.port_p.V_m - advancedSolenoid.g_mFeArm.port_n.V_m;
//   advancedSolenoid.g_mFeArm.Phi = advancedSolenoid.g_mFeArm.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeArm.port_p.Phi + advancedSolenoid.g_mFeArm.port_n.Phi;
//   advancedSolenoid.g_mAirWork.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mAirWork.mu_r * advancedSolenoid.g_mAirWork.A)) / advancedSolenoid.g_mAirWork.l;
//   advancedSolenoid.g_mAirWork.dGmBydx = -1.25663706143592e-06 * (advancedSolenoid.g_mAirWork.mu_r * (advancedSolenoid.g_mAirWork.A * (advancedSolenoid.g_mAirWork.l ^ -2.0 * Real(advancedSolenoid.g_mAirWork.dlBydx))));
//   advancedSolenoid.g_mAirWork.B = advancedSolenoid.g_mAirWork.Phi / advancedSolenoid.g_mAirWork.A;
//   advancedSolenoid.g_mAirWork.flange.f = -advancedSolenoid.g_mAirWork.F_m;
//   advancedSolenoid.g_mAirWork.s_support = 0.0;
//   advancedSolenoid.g_mAirWork.F_m = 0.5 * (advancedSolenoid.g_mAirWork.V_m ^ 2.0 * advancedSolenoid.g_mAirWork.dGmBydx);
//   advancedSolenoid.g_mAirWork.R_m = 1.0 / advancedSolenoid.g_mAirWork.G_m;
//   advancedSolenoid.g_mAirWork.V_m = advancedSolenoid.g_mAirWork.Phi * advancedSolenoid.g_mAirWork.R_m;
//   advancedSolenoid.g_mAirWork.V_m = advancedSolenoid.g_mAirWork.port_p.V_m - advancedSolenoid.g_mAirWork.port_n.V_m;
//   advancedSolenoid.g_mAirWork.Phi = advancedSolenoid.g_mAirWork.port_p.Phi;
//   0.0 = advancedSolenoid.g_mAirWork.port_p.Phi + advancedSolenoid.g_mAirWork.port_n.Phi;
//   advancedSolenoid.g_mFeYokeBot.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeBot.l * (advancedSolenoid.g_mFeYokeBot.r_o + advancedSolenoid.g_mFeYokeBot.r_i));
//   advancedSolenoid.g_mFeYokeBot.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mFeYokeBot.mu_r * advancedSolenoid.g_mFeYokeBot.l)) / log(advancedSolenoid.g_mFeYokeBot.r_o / advancedSolenoid.g_mFeYokeBot.r_i);
//   advancedSolenoid.g_mFeYokeBot.H = advancedSolenoid.g_mFeYokeBot.B / (advancedSolenoid.g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeBot.B = advancedSolenoid.g_mFeYokeBot.Phi / advancedSolenoid.g_mFeYokeBot.A;
//   advancedSolenoid.g_mFeYokeBot.V_m = advancedSolenoid.g_mFeYokeBot.Phi * advancedSolenoid.g_mFeYokeBot.R_m;
//   advancedSolenoid.g_mFeYokeBot.R_m = 1.0 / advancedSolenoid.g_mFeYokeBot.G_m;
//   advancedSolenoid.g_mFeYokeBot.mu_r = if advancedSolenoid.g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeBot.B,advancedSolenoid.g_mFeYokeBot.material.mu_i,advancedSolenoid.g_mFeYokeBot.material.B_myMax,advancedSolenoid.g_mFeYokeBot.material.c_a,advancedSolenoid.g_mFeYokeBot.material.c_b,advancedSolenoid.g_mFeYokeBot.material.n) else advancedSolenoid.g_mFeYokeBot.mu_rConst;
//   advancedSolenoid.g_mFeYokeBot.V_m = advancedSolenoid.g_mFeYokeBot.port_p.V_m - advancedSolenoid.g_mFeYokeBot.port_n.V_m;
//   advancedSolenoid.g_mFeYokeBot.Phi = advancedSolenoid.g_mFeYokeBot.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeBot.port_p.Phi + advancedSolenoid.g_mFeYokeBot.port_n.Phi;
//   advancedSolenoid.g_mAirPar.A = 3.14159265358979 * (advancedSolenoid.g_mAirPar.l * (advancedSolenoid.g_mAirPar.r_o + advancedSolenoid.g_mAirPar.r_i));
//   advancedSolenoid.g_mAirPar.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mAirPar.mu_r * advancedSolenoid.g_mAirPar.l)) / log(advancedSolenoid.g_mAirPar.r_o / advancedSolenoid.g_mAirPar.r_i);
//   advancedSolenoid.g_mAirPar.H = advancedSolenoid.g_mAirPar.B / (advancedSolenoid.g_mAirPar.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mAirPar.B = advancedSolenoid.g_mAirPar.Phi / advancedSolenoid.g_mAirPar.A;
//   advancedSolenoid.g_mAirPar.V_m = advancedSolenoid.g_mAirPar.Phi * advancedSolenoid.g_mAirPar.R_m;
//   advancedSolenoid.g_mAirPar.R_m = 1.0 / advancedSolenoid.g_mAirPar.G_m;
//   advancedSolenoid.g_mAirPar.mu_r = if advancedSolenoid.g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mAirPar.B,advancedSolenoid.g_mAirPar.material.mu_i,advancedSolenoid.g_mAirPar.material.B_myMax,advancedSolenoid.g_mAirPar.material.c_a,advancedSolenoid.g_mAirPar.material.c_b,advancedSolenoid.g_mAirPar.material.n) else advancedSolenoid.g_mAirPar.mu_rConst;
//   advancedSolenoid.g_mAirPar.V_m = advancedSolenoid.g_mAirPar.port_p.V_m - advancedSolenoid.g_mAirPar.port_n.V_m;
//   advancedSolenoid.g_mAirPar.Phi = advancedSolenoid.g_mAirPar.port_p.Phi;
//   0.0 = advancedSolenoid.g_mAirPar.port_p.Phi + advancedSolenoid.g_mAirPar.port_n.Phi;
//   advancedSolenoid.g_mFePoleBot.A = 3.14159265358979 * (advancedSolenoid.g_mFePoleBot.l * (advancedSolenoid.g_mFePoleBot.r_o + advancedSolenoid.g_mFePoleBot.r_i));
//   advancedSolenoid.g_mFePoleBot.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mFePoleBot.mu_r * advancedSolenoid.g_mFePoleBot.l)) / log(advancedSolenoid.g_mFePoleBot.r_o / advancedSolenoid.g_mFePoleBot.r_i);
//   advancedSolenoid.g_mFePoleBot.H = advancedSolenoid.g_mFePoleBot.B / (advancedSolenoid.g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFePoleBot.B = advancedSolenoid.g_mFePoleBot.Phi / advancedSolenoid.g_mFePoleBot.A;
//   advancedSolenoid.g_mFePoleBot.V_m = advancedSolenoid.g_mFePoleBot.Phi * advancedSolenoid.g_mFePoleBot.R_m;
//   advancedSolenoid.g_mFePoleBot.R_m = 1.0 / advancedSolenoid.g_mFePoleBot.G_m;
//   advancedSolenoid.g_mFePoleBot.mu_r = if advancedSolenoid.g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFePoleBot.B,advancedSolenoid.g_mFePoleBot.material.mu_i,advancedSolenoid.g_mFePoleBot.material.B_myMax,advancedSolenoid.g_mFePoleBot.material.c_a,advancedSolenoid.g_mFePoleBot.material.c_b,advancedSolenoid.g_mFePoleBot.material.n) else advancedSolenoid.g_mFePoleBot.mu_rConst;
//   advancedSolenoid.g_mFePoleBot.V_m = advancedSolenoid.g_mFePoleBot.port_p.V_m - advancedSolenoid.g_mFePoleBot.port_n.V_m;
//   advancedSolenoid.g_mFePoleBot.Phi = advancedSolenoid.g_mFePoleBot.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFePoleBot.port_p.Phi + advancedSolenoid.g_mFePoleBot.port_n.Phi;
//   advancedSolenoid.g_mFePole.A = 3.14159265358979 * (advancedSolenoid.g_mFePole.r_o ^ 2.0 - advancedSolenoid.g_mFePole.r_i ^ 2.0);
//   advancedSolenoid.g_mFePole.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFePole.mu_r * advancedSolenoid.g_mFePole.A)) / advancedSolenoid.g_mFePole.l;
//   advancedSolenoid.g_mFePole.H = advancedSolenoid.g_mFePole.B / (advancedSolenoid.g_mFePole.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFePole.B = advancedSolenoid.g_mFePole.Phi / advancedSolenoid.g_mFePole.A;
//   advancedSolenoid.g_mFePole.V_m = advancedSolenoid.g_mFePole.Phi * advancedSolenoid.g_mFePole.R_m;
//   advancedSolenoid.g_mFePole.R_m = 1.0 / advancedSolenoid.g_mFePole.G_m;
//   advancedSolenoid.g_mFePole.mu_r = if advancedSolenoid.g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFePole.B,advancedSolenoid.g_mFePole.material.mu_i,advancedSolenoid.g_mFePole.material.B_myMax,advancedSolenoid.g_mFePole.material.c_a,advancedSolenoid.g_mFePole.material.c_b,advancedSolenoid.g_mFePole.material.n) else advancedSolenoid.g_mFePole.mu_rConst;
//   advancedSolenoid.g_mFePole.V_m = advancedSolenoid.g_mFePole.port_p.V_m - advancedSolenoid.g_mFePole.port_n.V_m;
//   advancedSolenoid.g_mFePole.Phi = advancedSolenoid.g_mFePole.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFePole.port_p.Phi + advancedSolenoid.g_mFePole.port_n.Phi;
//   advancedSolenoid.armature.mass.v = der(advancedSolenoid.armature.mass.s);
//   advancedSolenoid.armature.mass.a = der(advancedSolenoid.armature.mass.v);
//   advancedSolenoid.armature.mass.m * advancedSolenoid.armature.mass.a = advancedSolenoid.armature.mass.flange_a.f + advancedSolenoid.armature.mass.flange_b.f;
//   advancedSolenoid.armature.mass.flange_a.s = advancedSolenoid.armature.mass.s + (-advancedSolenoid.armature.mass.L) / 2.0;
//   advancedSolenoid.armature.mass.flange_b.s = advancedSolenoid.armature.mass.s + advancedSolenoid.armature.mass.L / 2.0;
//   advancedSolenoid.armature.limit_xMin.flange.s = advancedSolenoid.armature.limit_xMin.s0;
//   advancedSolenoid.armature.limit_xMax.flange.s = advancedSolenoid.armature.limit_xMax.s0;
//   advancedSolenoid.armature.stopper_xMax.contact = advancedSolenoid.armature.stopper_xMax.s_rel < advancedSolenoid.armature.stopper_xMax.s_rel0;
//   advancedSolenoid.armature.stopper_xMax.f_c = smooth(1,if advancedSolenoid.armature.stopper_xMax.contact then (-advancedSolenoid.armature.stopper_xMax.c) * abs(advancedSolenoid.armature.stopper_xMax.s_rel - advancedSolenoid.armature.stopper_xMax.s_rel0) ^ advancedSolenoid.armature.stopper_xMax.n else 0.0);
//   advancedSolenoid.armature.stopper_xMax.f_d2 = if advancedSolenoid.armature.stopper_xMax.contact then advancedSolenoid.armature.stopper_xMax.d * advancedSolenoid.armature.stopper_xMax.v_rel else 0.0;
//   advancedSolenoid.armature.stopper_xMax.f_d = if advancedSolenoid.armature.stopper_xMax.contact then if noEvent(advancedSolenoid.armature.stopper_xMax.f_d2 < advancedSolenoid.armature.stopper_xMax.f_c) then advancedSolenoid.armature.stopper_xMax.f_c else if noEvent(advancedSolenoid.armature.stopper_xMax.f_d2 > -advancedSolenoid.armature.stopper_xMax.f_c) then -advancedSolenoid.armature.stopper_xMax.f_c else advancedSolenoid.armature.stopper_xMax.f_d2 else 0.0;
//   advancedSolenoid.armature.stopper_xMax.f = advancedSolenoid.armature.stopper_xMax.f_c + advancedSolenoid.armature.stopper_xMax.f_d;
//   advancedSolenoid.armature.stopper_xMax.s_rel = advancedSolenoid.armature.stopper_xMax.flange_b.s - advancedSolenoid.armature.stopper_xMax.flange_a.s;
//   advancedSolenoid.armature.stopper_xMax.v_rel = der(advancedSolenoid.armature.stopper_xMax.s_rel);
//   advancedSolenoid.armature.stopper_xMax.flange_b.f = advancedSolenoid.armature.stopper_xMax.f;
//   advancedSolenoid.armature.stopper_xMax.flange_a.f = -advancedSolenoid.armature.stopper_xMax.f;
//   advancedSolenoid.armature.stopper_xMin.contact = advancedSolenoid.armature.stopper_xMin.s_rel < advancedSolenoid.armature.stopper_xMin.s_rel0;
//   advancedSolenoid.armature.stopper_xMin.f_c = smooth(1,if advancedSolenoid.armature.stopper_xMin.contact then (-advancedSolenoid.armature.stopper_xMin.c) * abs(advancedSolenoid.armature.stopper_xMin.s_rel - advancedSolenoid.armature.stopper_xMin.s_rel0) ^ advancedSolenoid.armature.stopper_xMin.n else 0.0);
//   advancedSolenoid.armature.stopper_xMin.f_d2 = if advancedSolenoid.armature.stopper_xMin.contact then advancedSolenoid.armature.stopper_xMin.d * advancedSolenoid.armature.stopper_xMin.v_rel else 0.0;
//   advancedSolenoid.armature.stopper_xMin.f_d = if advancedSolenoid.armature.stopper_xMin.contact then if noEvent(advancedSolenoid.armature.stopper_xMin.f_d2 < advancedSolenoid.armature.stopper_xMin.f_c) then advancedSolenoid.armature.stopper_xMin.f_c else if noEvent(advancedSolenoid.armature.stopper_xMin.f_d2 > -advancedSolenoid.armature.stopper_xMin.f_c) then -advancedSolenoid.armature.stopper_xMin.f_c else advancedSolenoid.armature.stopper_xMin.f_d2 else 0.0;
//   advancedSolenoid.armature.stopper_xMin.f = advancedSolenoid.armature.stopper_xMin.f_c + advancedSolenoid.armature.stopper_xMin.f_d;
//   advancedSolenoid.armature.stopper_xMin.s_rel = advancedSolenoid.armature.stopper_xMin.flange_b.s - advancedSolenoid.armature.stopper_xMin.flange_a.s;
//   advancedSolenoid.armature.stopper_xMin.v_rel = der(advancedSolenoid.armature.stopper_xMin.s_rel);
//   advancedSolenoid.armature.stopper_xMin.flange_b.f = advancedSolenoid.armature.stopper_xMin.f;
//   advancedSolenoid.armature.stopper_xMin.flange_a.f = -advancedSolenoid.armature.stopper_xMin.f;
//   advancedSolenoid.armature.mass.s = advancedSolenoid.armature.s;
//   advancedSolenoid.armature.mass.v = advancedSolenoid.armature.v;
//   advancedSolenoid.armature.mass.a = advancedSolenoid.armature.a;
//   advancedSolenoid.g_mLeak1.G_m = 6.53451271946677e-07 * advancedSolenoid.g_mLeak1.l;
//   advancedSolenoid.g_mLeak1.R_m = 1.0 / advancedSolenoid.g_mLeak1.G_m;
//   advancedSolenoid.g_mLeak1.V_m = advancedSolenoid.g_mLeak1.Phi * advancedSolenoid.g_mLeak1.R_m;
//   advancedSolenoid.g_mLeak1.V_m = advancedSolenoid.g_mLeak1.port_p.V_m - advancedSolenoid.g_mLeak1.port_n.V_m;
//   advancedSolenoid.g_mLeak1.Phi = advancedSolenoid.g_mLeak1.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak1.port_p.Phi + advancedSolenoid.g_mLeak1.port_n.Phi;
//   advancedSolenoid.g_mLeak2.G_m = 8e-07 * (advancedSolenoid.g_mLeak2.l * log(1.0 + advancedSolenoid.g_mLeak2.ratio));
//   advancedSolenoid.g_mLeak2.R_m = 1.0 / advancedSolenoid.g_mLeak2.G_m;
//   advancedSolenoid.g_mLeak2.V_m = advancedSolenoid.g_mLeak2.Phi * advancedSolenoid.g_mLeak2.R_m;
//   advancedSolenoid.g_mLeak2.V_m = advancedSolenoid.g_mLeak2.port_p.V_m - advancedSolenoid.g_mLeak2.port_n.V_m;
//   advancedSolenoid.g_mLeak2.Phi = advancedSolenoid.g_mLeak2.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak2.port_p.Phi + advancedSolenoid.g_mLeak2.port_n.Phi;
//   advancedSolenoid.coil2.v = advancedSolenoid.coil2.p.v - advancedSolenoid.coil2.n.v;
//   0.0 = advancedSolenoid.coil2.p.i + advancedSolenoid.coil2.n.i;
//   advancedSolenoid.coil2.i = advancedSolenoid.coil2.p.i;
//   advancedSolenoid.coil2.V_m = advancedSolenoid.coil2.port_p.V_m - advancedSolenoid.coil2.port_n.V_m;
//   0.0 = advancedSolenoid.coil2.port_p.Phi + advancedSolenoid.coil2.port_n.Phi;
//   advancedSolenoid.coil2.Phi = advancedSolenoid.coil2.port_p.Phi;
//   advancedSolenoid.coil2.V_m = advancedSolenoid.coil2.i * advancedSolenoid.coil2.N;
//   advancedSolenoid.coil2.N * der(advancedSolenoid.coil2.Phi) = -advancedSolenoid.coil2.v;
//   advancedSolenoid.coil2.Psi = advancedSolenoid.coil2.N * advancedSolenoid.coil2.Phi;
//   advancedSolenoid.coil2.L_stat = if noEvent(abs(advancedSolenoid.coil2.i) > advancedSolenoid.coil2.eps) then abs(advancedSolenoid.coil2.Psi / advancedSolenoid.coil2.i) else abs(advancedSolenoid.coil2.Psi / advancedSolenoid.coil2.eps);
//   advancedSolenoid.c_par1.i = advancedSolenoid.c_par1.C * der(advancedSolenoid.c_par1.v);
//   advancedSolenoid.c_par1.v = advancedSolenoid.c_par1.p.v - advancedSolenoid.c_par1.n.v;
//   0.0 = advancedSolenoid.c_par1.p.i + advancedSolenoid.c_par1.n.i;
//   advancedSolenoid.c_par1.i = advancedSolenoid.c_par1.p.i;
//   advancedSolenoid.G_mLeakRad.A = 3.14159265358979 * (advancedSolenoid.G_mLeakRad.l * (advancedSolenoid.G_mLeakRad.r_o + advancedSolenoid.G_mLeakRad.r_i));
//   advancedSolenoid.G_mLeakRad.G_m = (7.89568352087149e-06 * (advancedSolenoid.G_mLeakRad.mu_r * advancedSolenoid.G_mLeakRad.l)) / log(advancedSolenoid.G_mLeakRad.r_o / advancedSolenoid.G_mLeakRad.r_i);
//   advancedSolenoid.G_mLeakRad.H = advancedSolenoid.G_mLeakRad.B / (advancedSolenoid.G_mLeakRad.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.G_mLeakRad.B = advancedSolenoid.G_mLeakRad.Phi / advancedSolenoid.G_mLeakRad.A;
//   advancedSolenoid.G_mLeakRad.V_m = advancedSolenoid.G_mLeakRad.Phi * advancedSolenoid.G_mLeakRad.R_m;
//   advancedSolenoid.G_mLeakRad.R_m = 1.0 / advancedSolenoid.G_mLeakRad.G_m;
//   advancedSolenoid.G_mLeakRad.mu_r = if advancedSolenoid.G_mLeakRad.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.G_mLeakRad.B,advancedSolenoid.G_mLeakRad.material.mu_i,advancedSolenoid.G_mLeakRad.material.B_myMax,advancedSolenoid.G_mLeakRad.material.c_a,advancedSolenoid.G_mLeakRad.material.c_b,advancedSolenoid.G_mLeakRad.material.n) else advancedSolenoid.G_mLeakRad.mu_rConst;
//   advancedSolenoid.G_mLeakRad.V_m = advancedSolenoid.G_mLeakRad.port_p.V_m - advancedSolenoid.G_mLeakRad.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.Phi = advancedSolenoid.G_mLeakRad.port_p.Phi;
//   0.0 = advancedSolenoid.G_mLeakRad.port_p.Phi + advancedSolenoid.G_mLeakRad.port_n.Phi;
//   advancedSolenoid.g_mFeYokeSide2.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeSide2.r_o ^ 2.0 - advancedSolenoid.g_mFeYokeSide2.r_i ^ 2.0);
//   advancedSolenoid.g_mFeYokeSide2.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeYokeSide2.mu_r * advancedSolenoid.g_mFeYokeSide2.A)) / advancedSolenoid.g_mFeYokeSide2.l;
//   advancedSolenoid.g_mFeYokeSide2.H = advancedSolenoid.g_mFeYokeSide2.B / (advancedSolenoid.g_mFeYokeSide2.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeSide2.B = advancedSolenoid.g_mFeYokeSide2.Phi / advancedSolenoid.g_mFeYokeSide2.A;
//   advancedSolenoid.g_mFeYokeSide2.V_m = advancedSolenoid.g_mFeYokeSide2.Phi * advancedSolenoid.g_mFeYokeSide2.R_m;
//   advancedSolenoid.g_mFeYokeSide2.R_m = 1.0 / advancedSolenoid.g_mFeYokeSide2.G_m;
//   advancedSolenoid.g_mFeYokeSide2.mu_r = if advancedSolenoid.g_mFeYokeSide2.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeSide2.B,advancedSolenoid.g_mFeYokeSide2.material.mu_i,advancedSolenoid.g_mFeYokeSide2.material.B_myMax,advancedSolenoid.g_mFeYokeSide2.material.c_a,advancedSolenoid.g_mFeYokeSide2.material.c_b,advancedSolenoid.g_mFeYokeSide2.material.n) else advancedSolenoid.g_mFeYokeSide2.mu_rConst;
//   advancedSolenoid.g_mFeYokeSide2.V_m = advancedSolenoid.g_mFeYokeSide2.port_p.V_m - advancedSolenoid.g_mFeYokeSide2.port_n.V_m;
//   advancedSolenoid.g_mFeYokeSide2.Phi = advancedSolenoid.g_mFeYokeSide2.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeSide2.port_p.Phi + advancedSolenoid.g_mFeYokeSide2.port_n.Phi;
//   advancedSolenoid.c_par2.i = advancedSolenoid.c_par2.C * der(advancedSolenoid.c_par2.v);
//   advancedSolenoid.c_par2.v = advancedSolenoid.c_par2.p.v - advancedSolenoid.c_par2.n.v;
//   0.0 = advancedSolenoid.c_par2.p.i + advancedSolenoid.c_par2.n.i;
//   advancedSolenoid.c_par2.i = advancedSolenoid.c_par2.p.i;
//   assert(1.0 + advancedSolenoid.r_par1.alpha * (advancedSolenoid.r_par1.T_heatPort - advancedSolenoid.r_par1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_par1.R_actual = advancedSolenoid.r_par1.R * (1.0 + advancedSolenoid.r_par1.alpha * (advancedSolenoid.r_par1.T_heatPort - advancedSolenoid.r_par1.T_ref));
//   advancedSolenoid.r_par1.v = advancedSolenoid.r_par1.R_actual * advancedSolenoid.r_par1.i;
//   advancedSolenoid.r_par1.LossPower = advancedSolenoid.r_par1.v * advancedSolenoid.r_par1.i;
//   advancedSolenoid.r_par1.i = advancedSolenoid.r_par1.p.i;
//   0.0 = advancedSolenoid.r_par1.p.i + advancedSolenoid.r_par1.n.i;
//   advancedSolenoid.r_par1.v = advancedSolenoid.r_par1.p.v - advancedSolenoid.r_par1.n.v;
//   advancedSolenoid.r_par1.T_heatPort = advancedSolenoid.r_par1.T;
//   assert(1.0 + advancedSolenoid.r_par2.alpha * (advancedSolenoid.r_par2.T_heatPort - advancedSolenoid.r_par2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_par2.R_actual = advancedSolenoid.r_par2.R * (1.0 + advancedSolenoid.r_par2.alpha * (advancedSolenoid.r_par2.T_heatPort - advancedSolenoid.r_par2.T_ref));
//   advancedSolenoid.r_par2.v = advancedSolenoid.r_par2.R_actual * advancedSolenoid.r_par2.i;
//   advancedSolenoid.r_par2.LossPower = advancedSolenoid.r_par2.v * advancedSolenoid.r_par2.i;
//   advancedSolenoid.r_par2.i = advancedSolenoid.r_par2.p.i;
//   0.0 = advancedSolenoid.r_par2.p.i + advancedSolenoid.r_par2.n.i;
//   advancedSolenoid.r_par2.v = advancedSolenoid.r_par2.p.v - advancedSolenoid.r_par2.n.v;
//   advancedSolenoid.r_par2.T_heatPort = advancedSolenoid.r_par2.T;
//   assert(1.0 + advancedSolenoid.r_2.alpha * (advancedSolenoid.r_2.T_heatPort - advancedSolenoid.r_2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_2.R_actual = advancedSolenoid.r_2.R * (1.0 + advancedSolenoid.r_2.alpha * (advancedSolenoid.r_2.T_heatPort - advancedSolenoid.r_2.T_ref));
//   advancedSolenoid.r_2.v = advancedSolenoid.r_2.R_actual * advancedSolenoid.r_2.i;
//   advancedSolenoid.r_2.LossPower = advancedSolenoid.r_2.v * advancedSolenoid.r_2.i;
//   advancedSolenoid.r_2.i = advancedSolenoid.r_2.p.i;
//   0.0 = advancedSolenoid.r_2.p.i + advancedSolenoid.r_2.n.i;
//   advancedSolenoid.r_2.v = advancedSolenoid.r_2.p.v - advancedSolenoid.r_2.n.v;
//   advancedSolenoid.r_2.T_heatPort = advancedSolenoid.r_2.T;
//   advancedSolenoid.g_mLeak3.G_m = 6.53451271946677e-07 * advancedSolenoid.g_mLeak3.l;
//   advancedSolenoid.g_mLeak3.R_m = 1.0 / advancedSolenoid.g_mLeak3.G_m;
//   advancedSolenoid.g_mLeak3.V_m = advancedSolenoid.g_mLeak3.Phi * advancedSolenoid.g_mLeak3.R_m;
//   advancedSolenoid.g_mLeak3.V_m = advancedSolenoid.g_mLeak3.port_p.V_m - advancedSolenoid.g_mLeak3.port_n.V_m;
//   advancedSolenoid.g_mLeak3.Phi = advancedSolenoid.g_mLeak3.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak3.port_p.Phi + advancedSolenoid.g_mLeak3.port_n.Phi;
//   advancedSolenoid.g_mLeakWork.G_m = 4e-07 * (advancedSolenoid.g_mLeakWork.w * log(1.0 + (3.14159265358979 * advancedSolenoid.g_mLeakWork.r) / advancedSolenoid.g_mLeakWork.l));
//   advancedSolenoid.g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (advancedSolenoid.g_mLeakWork.w * (advancedSolenoid.g_mLeakWork.r * (Real(advancedSolenoid.g_mLeakWork.dlBydx) * advancedSolenoid.g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * advancedSolenoid.g_mLeakWork.r) / advancedSolenoid.g_mLeakWork.l);
//   advancedSolenoid.g_mLeakWork.flange.f = -advancedSolenoid.g_mLeakWork.F_m;
//   advancedSolenoid.g_mLeakWork.s_support = 0.0;
//   advancedSolenoid.g_mLeakWork.F_m = 0.5 * (advancedSolenoid.g_mLeakWork.V_m ^ 2.0 * advancedSolenoid.g_mLeakWork.dGmBydx);
//   advancedSolenoid.g_mLeakWork.R_m = 1.0 / advancedSolenoid.g_mLeakWork.G_m;
//   advancedSolenoid.g_mLeakWork.V_m = advancedSolenoid.g_mLeakWork.Phi * advancedSolenoid.g_mLeakWork.R_m;
//   advancedSolenoid.g_mLeakWork.V_m = advancedSolenoid.g_mLeakWork.port_p.V_m - advancedSolenoid.g_mLeakWork.port_n.V_m;
//   advancedSolenoid.g_mLeakWork.Phi = advancedSolenoid.g_mLeakWork.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeakWork.port_p.Phi + advancedSolenoid.g_mLeakWork.port_n.Phi;
//   advancedSolenoid.x = advancedSolenoid.flange.s;
//   advancedSolenoid.Psi_tot = advancedSolenoid.coil1.Psi + advancedSolenoid.coil2.Psi;
//   advancedSolenoid.L_statTot = advancedSolenoid.coil1.L_stat + advancedSolenoid.coil2.L_stat;
//   advancedFeed_x.s = advancedFeed_x.s_ref;
//   advancedFeed_x.v = 0.0;
//   advancedFeed_x.a = 0.0;
//   advancedFeed_x.s_support = 0.0;
//   simpleGround.p.v = 0.0;
//   simpleSource.signalSource.y = simpleSource.signalSource.offset + (if time < simpleSource.signalSource.startTime then 0.0 else simpleSource.signalSource.height);
//   simpleSource.v = simpleSource.signalSource.y;
//   simpleSource.v = simpleSource.p.v - simpleSource.n.v;
//   0.0 = simpleSource.p.i + simpleSource.n.i;
//   simpleSource.i = simpleSource.p.i;
//   simpleSolenoid.ground.port.V_m = 0.0;
//   simpleSolenoid.coil.v = simpleSolenoid.coil.p.v - simpleSolenoid.coil.n.v;
//   0.0 = simpleSolenoid.coil.p.i + simpleSolenoid.coil.n.i;
//   simpleSolenoid.coil.i = simpleSolenoid.coil.p.i;
//   simpleSolenoid.coil.V_m = simpleSolenoid.coil.port_p.V_m - simpleSolenoid.coil.port_n.V_m;
//   0.0 = simpleSolenoid.coil.port_p.Phi + simpleSolenoid.coil.port_n.Phi;
//   simpleSolenoid.coil.Phi = simpleSolenoid.coil.port_p.Phi;
//   simpleSolenoid.coil.V_m = simpleSolenoid.coil.i * simpleSolenoid.coil.N;
//   simpleSolenoid.coil.N * der(simpleSolenoid.coil.Phi) = -simpleSolenoid.coil.v;
//   simpleSolenoid.coil.Psi = simpleSolenoid.coil.N * simpleSolenoid.coil.Phi;
//   simpleSolenoid.coil.L_stat = if noEvent(abs(simpleSolenoid.coil.i) > simpleSolenoid.coil.eps) then abs(simpleSolenoid.coil.Psi / simpleSolenoid.coil.i) else abs(simpleSolenoid.coil.Psi / simpleSolenoid.coil.eps);
//   assert(1.0 + simpleSolenoid.r.alpha * (simpleSolenoid.r.T_heatPort - simpleSolenoid.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   simpleSolenoid.r.R_actual = simpleSolenoid.r.R * (1.0 + simpleSolenoid.r.alpha * (simpleSolenoid.r.T_heatPort - simpleSolenoid.r.T_ref));
//   simpleSolenoid.r.v = simpleSolenoid.r.R_actual * simpleSolenoid.r.i;
//   simpleSolenoid.r.LossPower = simpleSolenoid.r.v * simpleSolenoid.r.i;
//   simpleSolenoid.r.i = simpleSolenoid.r.p.i;
//   0.0 = simpleSolenoid.r.p.i + simpleSolenoid.r.n.i;
//   simpleSolenoid.r.v = simpleSolenoid.r.p.v - simpleSolenoid.r.n.v;
//   simpleSolenoid.r.T_heatPort = simpleSolenoid.r.T;
//   simpleSolenoid.g_mFeYokeSide.A = 3.14159265358979 * (simpleSolenoid.g_mFeYokeSide.r_o ^ 2.0 - simpleSolenoid.g_mFeYokeSide.r_i ^ 2.0);
//   simpleSolenoid.g_mFeYokeSide.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFeYokeSide.mu_r * simpleSolenoid.g_mFeYokeSide.A)) / simpleSolenoid.g_mFeYokeSide.l;
//   simpleSolenoid.g_mFeYokeSide.H = simpleSolenoid.g_mFeYokeSide.B / (simpleSolenoid.g_mFeYokeSide.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeYokeSide.B = simpleSolenoid.g_mFeYokeSide.Phi / simpleSolenoid.g_mFeYokeSide.A;
//   simpleSolenoid.g_mFeYokeSide.V_m = simpleSolenoid.g_mFeYokeSide.Phi * simpleSolenoid.g_mFeYokeSide.R_m;
//   simpleSolenoid.g_mFeYokeSide.R_m = 1.0 / simpleSolenoid.g_mFeYokeSide.G_m;
//   simpleSolenoid.g_mFeYokeSide.mu_r = if simpleSolenoid.g_mFeYokeSide.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeYokeSide.B,simpleSolenoid.g_mFeYokeSide.material.mu_i,simpleSolenoid.g_mFeYokeSide.material.B_myMax,simpleSolenoid.g_mFeYokeSide.material.c_a,simpleSolenoid.g_mFeYokeSide.material.c_b,simpleSolenoid.g_mFeYokeSide.material.n) else simpleSolenoid.g_mFeYokeSide.mu_rConst;
//   simpleSolenoid.g_mFeYokeSide.V_m = simpleSolenoid.g_mFeYokeSide.port_p.V_m - simpleSolenoid.g_mFeYokeSide.port_n.V_m;
//   simpleSolenoid.g_mFeYokeSide.Phi = simpleSolenoid.g_mFeYokeSide.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeYokeSide.port_p.Phi + simpleSolenoid.g_mFeYokeSide.port_n.Phi;
//   simpleSolenoid.g_mFeArm.A = 3.14159265358979 * (simpleSolenoid.g_mFeArm.r_o ^ 2.0 - simpleSolenoid.g_mFeArm.r_i ^ 2.0);
//   simpleSolenoid.g_mFeArm.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFeArm.mu_r * simpleSolenoid.g_mFeArm.A)) / simpleSolenoid.g_mFeArm.l;
//   simpleSolenoid.g_mFeArm.H = simpleSolenoid.g_mFeArm.B / (simpleSolenoid.g_mFeArm.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeArm.B = simpleSolenoid.g_mFeArm.Phi / simpleSolenoid.g_mFeArm.A;
//   simpleSolenoid.g_mFeArm.V_m = simpleSolenoid.g_mFeArm.Phi * simpleSolenoid.g_mFeArm.R_m;
//   simpleSolenoid.g_mFeArm.R_m = 1.0 / simpleSolenoid.g_mFeArm.G_m;
//   simpleSolenoid.g_mFeArm.mu_r = if simpleSolenoid.g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeArm.B,simpleSolenoid.g_mFeArm.material.mu_i,simpleSolenoid.g_mFeArm.material.B_myMax,simpleSolenoid.g_mFeArm.material.c_a,simpleSolenoid.g_mFeArm.material.c_b,simpleSolenoid.g_mFeArm.material.n) else simpleSolenoid.g_mFeArm.mu_rConst;
//   simpleSolenoid.g_mFeArm.V_m = simpleSolenoid.g_mFeArm.port_p.V_m - simpleSolenoid.g_mFeArm.port_n.V_m;
//   simpleSolenoid.g_mFeArm.Phi = simpleSolenoid.g_mFeArm.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeArm.port_p.Phi + simpleSolenoid.g_mFeArm.port_n.Phi;
//   simpleSolenoid.g_mAirWork.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mAirWork.mu_r * simpleSolenoid.g_mAirWork.A)) / simpleSolenoid.g_mAirWork.l;
//   simpleSolenoid.g_mAirWork.dGmBydx = -1.25663706143592e-06 * (simpleSolenoid.g_mAirWork.mu_r * (simpleSolenoid.g_mAirWork.A * (simpleSolenoid.g_mAirWork.l ^ -2.0 * Real(simpleSolenoid.g_mAirWork.dlBydx))));
//   simpleSolenoid.g_mAirWork.B = simpleSolenoid.g_mAirWork.Phi / simpleSolenoid.g_mAirWork.A;
//   simpleSolenoid.g_mAirWork.flange.f = -simpleSolenoid.g_mAirWork.F_m;
//   simpleSolenoid.g_mAirWork.s_support = 0.0;
//   simpleSolenoid.g_mAirWork.F_m = 0.5 * (simpleSolenoid.g_mAirWork.V_m ^ 2.0 * simpleSolenoid.g_mAirWork.dGmBydx);
//   simpleSolenoid.g_mAirWork.R_m = 1.0 / simpleSolenoid.g_mAirWork.G_m;
//   simpleSolenoid.g_mAirWork.V_m = simpleSolenoid.g_mAirWork.Phi * simpleSolenoid.g_mAirWork.R_m;
//   simpleSolenoid.g_mAirWork.V_m = simpleSolenoid.g_mAirWork.port_p.V_m - simpleSolenoid.g_mAirWork.port_n.V_m;
//   simpleSolenoid.g_mAirWork.Phi = simpleSolenoid.g_mAirWork.port_p.Phi;
//   0.0 = simpleSolenoid.g_mAirWork.port_p.Phi + simpleSolenoid.g_mAirWork.port_n.Phi;
//   simpleSolenoid.g_mFeYokeBot.A = 3.14159265358979 * (simpleSolenoid.g_mFeYokeBot.l * (simpleSolenoid.g_mFeYokeBot.r_o + simpleSolenoid.g_mFeYokeBot.r_i));
//   simpleSolenoid.g_mFeYokeBot.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mFeYokeBot.mu_r * simpleSolenoid.g_mFeYokeBot.l)) / log(simpleSolenoid.g_mFeYokeBot.r_o / simpleSolenoid.g_mFeYokeBot.r_i);
//   simpleSolenoid.g_mFeYokeBot.H = simpleSolenoid.g_mFeYokeBot.B / (simpleSolenoid.g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeYokeBot.B = simpleSolenoid.g_mFeYokeBot.Phi / simpleSolenoid.g_mFeYokeBot.A;
//   simpleSolenoid.g_mFeYokeBot.V_m = simpleSolenoid.g_mFeYokeBot.Phi * simpleSolenoid.g_mFeYokeBot.R_m;
//   simpleSolenoid.g_mFeYokeBot.R_m = 1.0 / simpleSolenoid.g_mFeYokeBot.G_m;
//   simpleSolenoid.g_mFeYokeBot.mu_r = if simpleSolenoid.g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeYokeBot.B,simpleSolenoid.g_mFeYokeBot.material.mu_i,simpleSolenoid.g_mFeYokeBot.material.B_myMax,simpleSolenoid.g_mFeYokeBot.material.c_a,simpleSolenoid.g_mFeYokeBot.material.c_b,simpleSolenoid.g_mFeYokeBot.material.n) else simpleSolenoid.g_mFeYokeBot.mu_rConst;
//   simpleSolenoid.g_mFeYokeBot.V_m = simpleSolenoid.g_mFeYokeBot.port_p.V_m - simpleSolenoid.g_mFeYokeBot.port_n.V_m;
//   simpleSolenoid.g_mFeYokeBot.Phi = simpleSolenoid.g_mFeYokeBot.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeYokeBot.port_p.Phi + simpleSolenoid.g_mFeYokeBot.port_n.Phi;
//   simpleSolenoid.g_mAirPar.A = 3.14159265358979 * (simpleSolenoid.g_mAirPar.l * (simpleSolenoid.g_mAirPar.r_o + simpleSolenoid.g_mAirPar.r_i));
//   simpleSolenoid.g_mAirPar.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mAirPar.mu_r * simpleSolenoid.g_mAirPar.l)) / log(simpleSolenoid.g_mAirPar.r_o / simpleSolenoid.g_mAirPar.r_i);
//   simpleSolenoid.g_mAirPar.H = simpleSolenoid.g_mAirPar.B / (simpleSolenoid.g_mAirPar.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mAirPar.B = simpleSolenoid.g_mAirPar.Phi / simpleSolenoid.g_mAirPar.A;
//   simpleSolenoid.g_mAirPar.V_m = simpleSolenoid.g_mAirPar.Phi * simpleSolenoid.g_mAirPar.R_m;
//   simpleSolenoid.g_mAirPar.R_m = 1.0 / simpleSolenoid.g_mAirPar.G_m;
//   simpleSolenoid.g_mAirPar.mu_r = if simpleSolenoid.g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mAirPar.B,simpleSolenoid.g_mAirPar.material.mu_i,simpleSolenoid.g_mAirPar.material.B_myMax,simpleSolenoid.g_mAirPar.material.c_a,simpleSolenoid.g_mAirPar.material.c_b,simpleSolenoid.g_mAirPar.material.n) else simpleSolenoid.g_mAirPar.mu_rConst;
//   simpleSolenoid.g_mAirPar.V_m = simpleSolenoid.g_mAirPar.port_p.V_m - simpleSolenoid.g_mAirPar.port_n.V_m;
//   simpleSolenoid.g_mAirPar.Phi = simpleSolenoid.g_mAirPar.port_p.Phi;
//   0.0 = simpleSolenoid.g_mAirPar.port_p.Phi + simpleSolenoid.g_mAirPar.port_n.Phi;
//   simpleSolenoid.g_mFePoleBot.A = 3.14159265358979 * (simpleSolenoid.g_mFePoleBot.l * (simpleSolenoid.g_mFePoleBot.r_o + simpleSolenoid.g_mFePoleBot.r_i));
//   simpleSolenoid.g_mFePoleBot.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mFePoleBot.mu_r * simpleSolenoid.g_mFePoleBot.l)) / log(simpleSolenoid.g_mFePoleBot.r_o / simpleSolenoid.g_mFePoleBot.r_i);
//   simpleSolenoid.g_mFePoleBot.H = simpleSolenoid.g_mFePoleBot.B / (simpleSolenoid.g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFePoleBot.B = simpleSolenoid.g_mFePoleBot.Phi / simpleSolenoid.g_mFePoleBot.A;
//   simpleSolenoid.g_mFePoleBot.V_m = simpleSolenoid.g_mFePoleBot.Phi * simpleSolenoid.g_mFePoleBot.R_m;
//   simpleSolenoid.g_mFePoleBot.R_m = 1.0 / simpleSolenoid.g_mFePoleBot.G_m;
//   simpleSolenoid.g_mFePoleBot.mu_r = if simpleSolenoid.g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFePoleBot.B,simpleSolenoid.g_mFePoleBot.material.mu_i,simpleSolenoid.g_mFePoleBot.material.B_myMax,simpleSolenoid.g_mFePoleBot.material.c_a,simpleSolenoid.g_mFePoleBot.material.c_b,simpleSolenoid.g_mFePoleBot.material.n) else simpleSolenoid.g_mFePoleBot.mu_rConst;
//   simpleSolenoid.g_mFePoleBot.V_m = simpleSolenoid.g_mFePoleBot.port_p.V_m - simpleSolenoid.g_mFePoleBot.port_n.V_m;
//   simpleSolenoid.g_mFePoleBot.Phi = simpleSolenoid.g_mFePoleBot.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFePoleBot.port_p.Phi + simpleSolenoid.g_mFePoleBot.port_n.Phi;
//   simpleSolenoid.g_mFePole.A = 3.14159265358979 * (simpleSolenoid.g_mFePole.r_o ^ 2.0 - simpleSolenoid.g_mFePole.r_i ^ 2.0);
//   simpleSolenoid.g_mFePole.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFePole.mu_r * simpleSolenoid.g_mFePole.A)) / simpleSolenoid.g_mFePole.l;
//   simpleSolenoid.g_mFePole.H = simpleSolenoid.g_mFePole.B / (simpleSolenoid.g_mFePole.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFePole.B = simpleSolenoid.g_mFePole.Phi / simpleSolenoid.g_mFePole.A;
//   simpleSolenoid.g_mFePole.V_m = simpleSolenoid.g_mFePole.Phi * simpleSolenoid.g_mFePole.R_m;
//   simpleSolenoid.g_mFePole.R_m = 1.0 / simpleSolenoid.g_mFePole.G_m;
//   simpleSolenoid.g_mFePole.mu_r = if simpleSolenoid.g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFePole.B,simpleSolenoid.g_mFePole.material.mu_i,simpleSolenoid.g_mFePole.material.B_myMax,simpleSolenoid.g_mFePole.material.c_a,simpleSolenoid.g_mFePole.material.c_b,simpleSolenoid.g_mFePole.material.n) else simpleSolenoid.g_mFePole.mu_rConst;
//   simpleSolenoid.g_mFePole.V_m = simpleSolenoid.g_mFePole.port_p.V_m - simpleSolenoid.g_mFePole.port_n.V_m;
//   simpleSolenoid.g_mFePole.Phi = simpleSolenoid.g_mFePole.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFePole.port_p.Phi + simpleSolenoid.g_mFePole.port_n.Phi;
//   simpleSolenoid.armature.mass.v = der(simpleSolenoid.armature.mass.s);
//   simpleSolenoid.armature.mass.a = der(simpleSolenoid.armature.mass.v);
//   simpleSolenoid.armature.mass.m * simpleSolenoid.armature.mass.a = simpleSolenoid.armature.mass.flange_a.f + simpleSolenoid.armature.mass.flange_b.f;
//   simpleSolenoid.armature.mass.flange_a.s = simpleSolenoid.armature.mass.s + (-simpleSolenoid.armature.mass.L) / 2.0;
//   simpleSolenoid.armature.mass.flange_b.s = simpleSolenoid.armature.mass.s + simpleSolenoid.armature.mass.L / 2.0;
//   simpleSolenoid.armature.limit_xMin.flange.s = simpleSolenoid.armature.limit_xMin.s0;
//   simpleSolenoid.armature.limit_xMax.flange.s = simpleSolenoid.armature.limit_xMax.s0;
//   simpleSolenoid.armature.stopper_xMax.contact = simpleSolenoid.armature.stopper_xMax.s_rel < simpleSolenoid.armature.stopper_xMax.s_rel0;
//   simpleSolenoid.armature.stopper_xMax.f_c = smooth(1,if simpleSolenoid.armature.stopper_xMax.contact then (-simpleSolenoid.armature.stopper_xMax.c) * abs(simpleSolenoid.armature.stopper_xMax.s_rel - simpleSolenoid.armature.stopper_xMax.s_rel0) ^ simpleSolenoid.armature.stopper_xMax.n else 0.0);
//   simpleSolenoid.armature.stopper_xMax.f_d2 = if simpleSolenoid.armature.stopper_xMax.contact then simpleSolenoid.armature.stopper_xMax.d * simpleSolenoid.armature.stopper_xMax.v_rel else 0.0;
//   simpleSolenoid.armature.stopper_xMax.f_d = if simpleSolenoid.armature.stopper_xMax.contact then if noEvent(simpleSolenoid.armature.stopper_xMax.f_d2 < simpleSolenoid.armature.stopper_xMax.f_c) then simpleSolenoid.armature.stopper_xMax.f_c else if noEvent(simpleSolenoid.armature.stopper_xMax.f_d2 > -simpleSolenoid.armature.stopper_xMax.f_c) then -simpleSolenoid.armature.stopper_xMax.f_c else simpleSolenoid.armature.stopper_xMax.f_d2 else 0.0;
//   simpleSolenoid.armature.stopper_xMax.f = simpleSolenoid.armature.stopper_xMax.f_c + simpleSolenoid.armature.stopper_xMax.f_d;
//   simpleSolenoid.armature.stopper_xMax.s_rel = simpleSolenoid.armature.stopper_xMax.flange_b.s - simpleSolenoid.armature.stopper_xMax.flange_a.s;
//   simpleSolenoid.armature.stopper_xMax.v_rel = der(simpleSolenoid.armature.stopper_xMax.s_rel);
//   simpleSolenoid.armature.stopper_xMax.flange_b.f = simpleSolenoid.armature.stopper_xMax.f;
//   simpleSolenoid.armature.stopper_xMax.flange_a.f = -simpleSolenoid.armature.stopper_xMax.f;
//   simpleSolenoid.armature.stopper_xMin.contact = simpleSolenoid.armature.stopper_xMin.s_rel < simpleSolenoid.armature.stopper_xMin.s_rel0;
//   simpleSolenoid.armature.stopper_xMin.f_c = smooth(1,if simpleSolenoid.armature.stopper_xMin.contact then (-simpleSolenoid.armature.stopper_xMin.c) * abs(simpleSolenoid.armature.stopper_xMin.s_rel - simpleSolenoid.armature.stopper_xMin.s_rel0) ^ simpleSolenoid.armature.stopper_xMin.n else 0.0);
//   simpleSolenoid.armature.stopper_xMin.f_d2 = if simpleSolenoid.armature.stopper_xMin.contact then simpleSolenoid.armature.stopper_xMin.d * simpleSolenoid.armature.stopper_xMin.v_rel else 0.0;
//   simpleSolenoid.armature.stopper_xMin.f_d = if simpleSolenoid.armature.stopper_xMin.contact then if noEvent(simpleSolenoid.armature.stopper_xMin.f_d2 < simpleSolenoid.armature.stopper_xMin.f_c) then simpleSolenoid.armature.stopper_xMin.f_c else if noEvent(simpleSolenoid.armature.stopper_xMin.f_d2 > -simpleSolenoid.armature.stopper_xMin.f_c) then -simpleSolenoid.armature.stopper_xMin.f_c else simpleSolenoid.armature.stopper_xMin.f_d2 else 0.0;
//   simpleSolenoid.armature.stopper_xMin.f = simpleSolenoid.armature.stopper_xMin.f_c + simpleSolenoid.armature.stopper_xMin.f_d;
//   simpleSolenoid.armature.stopper_xMin.s_rel = simpleSolenoid.armature.stopper_xMin.flange_b.s - simpleSolenoid.armature.stopper_xMin.flange_a.s;
//   simpleSolenoid.armature.stopper_xMin.v_rel = der(simpleSolenoid.armature.stopper_xMin.s_rel);
//   simpleSolenoid.armature.stopper_xMin.flange_b.f = simpleSolenoid.armature.stopper_xMin.f;
//   simpleSolenoid.armature.stopper_xMin.flange_a.f = -simpleSolenoid.armature.stopper_xMin.f;
//   simpleSolenoid.armature.mass.s = simpleSolenoid.armature.s;
//   simpleSolenoid.armature.mass.v = simpleSolenoid.armature.v;
//   simpleSolenoid.armature.mass.a = simpleSolenoid.armature.a;
//   simpleSolenoid.g_mLeak1.G_m = 6.53451271946677e-07 * simpleSolenoid.g_mLeak1.l;
//   simpleSolenoid.g_mLeak1.R_m = 1.0 / simpleSolenoid.g_mLeak1.G_m;
//   simpleSolenoid.g_mLeak1.V_m = simpleSolenoid.g_mLeak1.Phi * simpleSolenoid.g_mLeak1.R_m;
//   simpleSolenoid.g_mLeak1.V_m = simpleSolenoid.g_mLeak1.port_p.V_m - simpleSolenoid.g_mLeak1.port_n.V_m;
//   simpleSolenoid.g_mLeak1.Phi = simpleSolenoid.g_mLeak1.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeak1.port_p.Phi + simpleSolenoid.g_mLeak1.port_n.Phi;
//   simpleSolenoid.g_mLeak2.G_m = 8e-07 * (simpleSolenoid.g_mLeak2.l * log(1.0 + simpleSolenoid.g_mLeak2.ratio));
//   simpleSolenoid.g_mLeak2.R_m = 1.0 / simpleSolenoid.g_mLeak2.G_m;
//   simpleSolenoid.g_mLeak2.V_m = simpleSolenoid.g_mLeak2.Phi * simpleSolenoid.g_mLeak2.R_m;
//   simpleSolenoid.g_mLeak2.V_m = simpleSolenoid.g_mLeak2.port_p.V_m - simpleSolenoid.g_mLeak2.port_n.V_m;
//   simpleSolenoid.g_mLeak2.Phi = simpleSolenoid.g_mLeak2.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeak2.port_p.Phi + simpleSolenoid.g_mLeak2.port_n.Phi;
//   simpleSolenoid.g_mLeakWork.G_m = 4e-07 * (simpleSolenoid.g_mLeakWork.w * log(1.0 + (3.14159265358979 * simpleSolenoid.g_mLeakWork.r) / simpleSolenoid.g_mLeakWork.l));
//   simpleSolenoid.g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (simpleSolenoid.g_mLeakWork.w * (simpleSolenoid.g_mLeakWork.r * (Real(simpleSolenoid.g_mLeakWork.dlBydx) * simpleSolenoid.g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * simpleSolenoid.g_mLeakWork.r) / simpleSolenoid.g_mLeakWork.l);
//   simpleSolenoid.g_mLeakWork.flange.f = -simpleSolenoid.g_mLeakWork.F_m;
//   simpleSolenoid.g_mLeakWork.s_support = 0.0;
//   simpleSolenoid.g_mLeakWork.F_m = 0.5 * (simpleSolenoid.g_mLeakWork.V_m ^ 2.0 * simpleSolenoid.g_mLeakWork.dGmBydx);
//   simpleSolenoid.g_mLeakWork.R_m = 1.0 / simpleSolenoid.g_mLeakWork.G_m;
//   simpleSolenoid.g_mLeakWork.V_m = simpleSolenoid.g_mLeakWork.Phi * simpleSolenoid.g_mLeakWork.R_m;
//   simpleSolenoid.g_mLeakWork.V_m = simpleSolenoid.g_mLeakWork.port_p.V_m - simpleSolenoid.g_mLeakWork.port_n.V_m;
//   simpleSolenoid.g_mLeakWork.Phi = simpleSolenoid.g_mLeakWork.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeakWork.port_p.Phi + simpleSolenoid.g_mLeakWork.port_n.Phi;
//   simpleSolenoid.x = simpleSolenoid.flange.s;
//   simpleFeed_x.v = der(simpleFeed_x.s);
//   simpleFeed_x.a = der(simpleFeed_x.v);
//   simpleFeed_x.a = (((simpleFeed_x.s_ref - simpleFeed_x.s) * simpleFeed_x.w_crit + -1.3617 * simpleFeed_x.v) * simpleFeed_x.w_crit) / 0.618;
//   simpleFeed_x.s_support = 0.0;
//   assert(true,\"tableOnFile = false and parameter table is an empty matrix\");
//   comparisonWithFEA.y[1] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[1],comparisonWithFEA.u);
//   comparisonWithFEA.y[2] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[2],comparisonWithFEA.u);
//   comparisonWithFEA.y[3] = Modelica.Blocks.Tables.CombiTable1Ds.tableIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[3],comparisonWithFEA.u);
//   when initial() then
//   comparisonWithFEA.tableID = Modelica.Blocks.Tables.CombiTable1Ds.tableInit(if comparisonWithFEA.tableOnFile then comparisonWithFEA.tableName else \"NoName\",if comparisonWithFEA.tableOnFile then comparisonWithFEA.fileName else \"NoName\",comparisonWithFEA.table,comparisonWithFEA.smoothness);
//   end when;
//   advancedGround.p.i + advancedSource.n.i + advancedSolenoid.n.i = 0.0;
//   advancedSource.p.i + advancedSolenoid.p.i = 0.0;
//   advancedSolenoid.ground.port.Phi + advancedSolenoid.g_mAirPar.port_p.Phi + advancedSolenoid.g_mLeak1.port_p.Phi + advancedSolenoid.g_mLeak2.port_p.Phi + advancedSolenoid.coil2.port_n.Phi + advancedSolenoid.g_mLeak3.port_p.Phi = 0.0;
//   advancedSolenoid.coil1.port_p.Phi + advancedSolenoid.g_mFePole.port_p.Phi = 0.0;
//   advancedSolenoid.coil1.port_n.Phi + advancedSolenoid.g_mAirWork.port_n.Phi + advancedSolenoid.g_mLeakWork.port_n.Phi = 0.0;
//   advancedSolenoid.coil1.p.i + advancedSolenoid.r_1.n.i = 0.0;
//   advancedSolenoid.coil1.n.i + advancedSolenoid.c_par1.n.i + advancedSolenoid.r_par2.p.i + advancedSolenoid.r_2.p.i = 0.0;
//   advancedSolenoid.r_1.p.i + advancedSolenoid.r_par1.p.i + (-advancedSolenoid.p.i) = 0.0;
//   advancedSolenoid.g_mFeYokeSide1.port_p.Phi + advancedSolenoid.g_mFePoleBot.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFeYokeSide1.port_n.Phi + advancedSolenoid.G_mLeakRad.port_n.Phi + advancedSolenoid.g_mFeYokeSide2.port_p.Phi = 0.0;
//   advancedSolenoid.g_mFeArm.port_p.Phi + advancedSolenoid.coil2.port_p.Phi = 0.0;
//   advancedSolenoid.g_mFeArm.port_n.Phi + advancedSolenoid.g_mAirWork.port_p.Phi + advancedSolenoid.G_mLeakRad.port_p.Phi + advancedSolenoid.g_mLeakWork.port_p.Phi = 0.0;
//   advancedSolenoid.g_mAirWork.flange.f + advancedSolenoid.armature.flange_a.f + advancedSolenoid.g_mLeakWork.flange.f = 0.0;
//   advancedSolenoid.g_mFeYokeBot.port_p.Phi + advancedSolenoid.g_mAirPar.port_n.Phi + advancedSolenoid.g_mLeak1.port_n.Phi + advancedSolenoid.g_mLeak2.port_n.Phi + advancedSolenoid.g_mLeak3.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFeYokeBot.port_n.Phi + advancedSolenoid.g_mFeYokeSide2.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFePoleBot.port_p.Phi + advancedSolenoid.g_mFePole.port_n.Phi = 0.0;
//   advancedSolenoid.armature.mass.flange_a.f + (-advancedSolenoid.armature.flange_a.f) + advancedSolenoid.armature.stopper_xMin.flange_b.f = 0.0;
//   advancedSolenoid.armature.mass.flange_b.f + (-advancedSolenoid.armature.flange_b.f) + advancedSolenoid.armature.stopper_xMax.flange_a.f = 0.0;
//   advancedSolenoid.armature.flange_b.f + (-advancedSolenoid.flange.f) = 0.0;
//   advancedSolenoid.armature.limit_xMin.flange.f + advancedSolenoid.armature.stopper_xMin.flange_a.f = 0.0;
//   advancedSolenoid.armature.limit_xMax.flange.f + advancedSolenoid.armature.stopper_xMax.flange_b.f = 0.0;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.armature.mass.flange_a.s;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.armature.stopper_xMin.flange_b.s;
//   advancedSolenoid.armature.limit_xMax.flange.s = advancedSolenoid.armature.stopper_xMax.flange_b.s;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.armature.mass.flange_b.s;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.armature.stopper_xMax.flange_a.s;
//   advancedSolenoid.armature.limit_xMin.flange.s = advancedSolenoid.armature.stopper_xMin.flange_a.s;
//   advancedSolenoid.coil2.p.i + advancedSolenoid.r_2.n.i = 0.0;
//   advancedSolenoid.coil2.n.i + advancedSolenoid.c_par2.n.i + (-advancedSolenoid.n.i) = 0.0;
//   advancedSolenoid.c_par1.p.i + advancedSolenoid.r_par1.n.i = 0.0;
//   advancedSolenoid.c_par2.p.i + advancedSolenoid.r_par2.n.i = 0.0;
//   advancedSolenoid.flange.f + advancedFeed_x.flange.f = 0.0;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.flange.s;
//   advancedSolenoid.c_par1.p.v = advancedSolenoid.r_par1.n.v;
//   advancedSolenoid.p.v = advancedSolenoid.r_1.p.v;
//   advancedSolenoid.p.v = advancedSolenoid.r_par1.p.v;
//   advancedSolenoid.c_par2.p.v = advancedSolenoid.r_par2.n.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.coil1.n.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.r_2.p.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.r_par2.p.v;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.g_mAirWork.flange.s;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.g_mLeakWork.flange.s;
//   advancedSolenoid.c_par2.n.v = advancedSolenoid.coil2.n.v;
//   advancedSolenoid.c_par2.n.v = advancedSolenoid.n.v;
//   advancedSolenoid.coil2.port_p.V_m = advancedSolenoid.g_mFeArm.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mAirWork.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mFeArm.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mLeakWork.port_p.V_m;
//   advancedSolenoid.coil1.port_n.V_m = advancedSolenoid.g_mAirWork.port_n.V_m;
//   advancedSolenoid.coil1.port_n.V_m = advancedSolenoid.g_mLeakWork.port_n.V_m;
//   advancedSolenoid.coil1.port_p.V_m = advancedSolenoid.g_mFePole.port_p.V_m;
//   advancedSolenoid.g_mFePole.port_n.V_m = advancedSolenoid.g_mFePoleBot.port_p.V_m;
//   advancedSolenoid.g_mFePoleBot.port_n.V_m = advancedSolenoid.g_mFeYokeSide1.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_n.V_m = advancedSolenoid.g_mFeYokeSide1.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.port_n.V_m = advancedSolenoid.g_mFeYokeSide2.port_p.V_m;
//   advancedSolenoid.g_mFeYokeBot.port_n.V_m = advancedSolenoid.g_mFeYokeSide2.port_n.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mAirPar.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak1.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak2.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak3.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.ground.port.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mFeYokeBot.port_p.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak1.port_n.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak2.port_n.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak3.port_n.V_m;
//   advancedSolenoid.coil2.p.v = advancedSolenoid.r_2.n.v;
//   advancedSolenoid.coil1.p.v = advancedSolenoid.r_1.n.v;
//   simpleGround.p.i + simpleSource.n.i + simpleSolenoid.n.i = 0.0;
//   simpleSource.p.i + simpleSolenoid.p.i = 0.0;
//   simpleSolenoid.ground.port.Phi + simpleSolenoid.g_mFeArm.port_p.Phi + simpleSolenoid.g_mAirPar.port_p.Phi + simpleSolenoid.g_mLeak1.port_p.Phi + simpleSolenoid.g_mLeak2.port_p.Phi = 0.0;
//   simpleSolenoid.coil.port_p.Phi + simpleSolenoid.g_mAirWork.port_p.Phi + simpleSolenoid.g_mLeakWork.port_p.Phi = 0.0;
//   simpleSolenoid.coil.port_n.Phi + simpleSolenoid.g_mFeArm.port_n.Phi = 0.0;
//   simpleSolenoid.coil.p.i + simpleSolenoid.r.n.i = 0.0;
//   simpleSolenoid.coil.n.i + (-simpleSolenoid.n.i) = 0.0;
//   simpleSolenoid.r.p.i + (-simpleSolenoid.p.i) = 0.0;
//   simpleSolenoid.g_mFeYokeSide.port_p.Phi + simpleSolenoid.g_mFePoleBot.port_n.Phi = 0.0;
//   simpleSolenoid.g_mFeYokeSide.port_n.Phi + simpleSolenoid.g_mFeYokeBot.port_n.Phi = 0.0;
//   simpleSolenoid.g_mAirWork.port_n.Phi + simpleSolenoid.g_mFePole.port_p.Phi + simpleSolenoid.g_mLeakWork.port_n.Phi = 0.0;
//   simpleSolenoid.g_mAirWork.flange.f + simpleSolenoid.armature.flange_a.f + simpleSolenoid.g_mLeakWork.flange.f = 0.0;
//   simpleSolenoid.g_mFeYokeBot.port_p.Phi + simpleSolenoid.g_mAirPar.port_n.Phi + simpleSolenoid.g_mLeak1.port_n.Phi + simpleSolenoid.g_mLeak2.port_n.Phi = 0.0;
//   simpleSolenoid.g_mFePoleBot.port_p.Phi + simpleSolenoid.g_mFePole.port_n.Phi = 0.0;
//   simpleSolenoid.armature.mass.flange_a.f + (-simpleSolenoid.armature.flange_a.f) + simpleSolenoid.armature.stopper_xMin.flange_b.f = 0.0;
//   simpleSolenoid.armature.mass.flange_b.f + (-simpleSolenoid.armature.flange_b.f) + simpleSolenoid.armature.stopper_xMax.flange_a.f = 0.0;
//   simpleSolenoid.armature.flange_b.f + (-simpleSolenoid.flange.f) = 0.0;
//   simpleSolenoid.armature.limit_xMin.flange.f + simpleSolenoid.armature.stopper_xMin.flange_a.f = 0.0;
//   simpleSolenoid.armature.limit_xMax.flange.f + simpleSolenoid.armature.stopper_xMax.flange_b.f = 0.0;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.armature.mass.flange_a.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.armature.stopper_xMin.flange_b.s;
//   simpleSolenoid.armature.limit_xMax.flange.s = simpleSolenoid.armature.stopper_xMax.flange_b.s;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.armature.mass.flange_b.s;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.armature.stopper_xMax.flange_a.s;
//   simpleSolenoid.armature.limit_xMin.flange.s = simpleSolenoid.armature.stopper_xMin.flange_a.s;
//   simpleSolenoid.flange.f + simpleFeed_x.flange.f = 0.0;
//   simpleSolenoid.p.v = simpleSolenoid.r.p.v;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.flange.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.g_mAirWork.flange.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.g_mLeakWork.flange.s;
//   simpleSolenoid.coil.p.v = simpleSolenoid.r.n.v;
//   simpleSolenoid.coil.n.v = simpleSolenoid.n.v;
//   simpleSolenoid.coil.port_p.V_m = simpleSolenoid.g_mAirWork.port_p.V_m;
//   simpleSolenoid.coil.port_p.V_m = simpleSolenoid.g_mLeakWork.port_p.V_m;
//   simpleSolenoid.g_mAirWork.port_n.V_m = simpleSolenoid.g_mFePole.port_p.V_m;
//   simpleSolenoid.g_mAirWork.port_n.V_m = simpleSolenoid.g_mLeakWork.port_n.V_m;
//   simpleSolenoid.g_mFePole.port_n.V_m = simpleSolenoid.g_mFePoleBot.port_p.V_m;
//   simpleSolenoid.g_mFePoleBot.port_n.V_m = simpleSolenoid.g_mFeYokeSide.port_p.V_m;
//   simpleSolenoid.g_mFeYokeBot.port_n.V_m = simpleSolenoid.g_mFeYokeSide.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mFeYokeBot.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mLeak1.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mLeak2.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mFeArm.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mLeak1.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mLeak2.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.ground.port.V_m;
//   simpleSolenoid.coil.port_n.V_m = simpleSolenoid.g_mFeArm.port_n.V_m;
//   advancedGround.p.v = advancedSolenoid.n.v;
//   advancedGround.p.v = advancedSource.n.v;
//   advancedFeed_x.s_ref = comparisonWithFEA.u;
//   advancedFeed_x.s_ref = simpleFeed_x.s_ref;
//   advancedFeed_x.s_ref = x_set.y;
//   simpleSolenoid.p.v = simpleSource.p.v;
//   simpleGround.p.v = simpleSolenoid.n.v;
//   simpleGround.p.v = simpleSource.n.v;
//   simpleFeed_x.flange.s = simpleSolenoid.flange.s;
//   advancedFeed_x.flange.s = advancedSolenoid.flange.s;
//   advancedSolenoid.p.v = advancedSource.p.v;
// end Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonQuasiStationary has 510 equation(s) and 510 variable(s).
// 264 of these are trivial equation(s).
// "
// ""
// "function Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit
//   input String tableName;
//   input String fileName;
//   input Real[:, :] table;
//   input Real startTime;
//   input enumeration(LinearSegments, ContinuousDerivative) smoothness;
//   input enumeration(HoldLastPoint, LastTwoPoints, Periodic) extrapolation;
//   output Integer tableID;
// 
//   external \"C\" tableID = ModelicaTables_CombiTimeTable_init(tableName, fileName, table, size(table, 1), size(table, 2), startTime, smoothness, extrapolation);
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo
//   input Integer tableID;
//   input Integer icol;
//   input Real timeIn;
//   output Real value;
// 
//   external \"C\" value = ModelicaTables_CombiTimeTable_interpolate(tableID, icol, timeIn);
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax
//   input Integer tableID;
//   output Real Tmax \"maximum time value in table\";
// 
//   external \"C\" Tmax = ModelicaTables_CombiTimeTable_maximumTime(tableID);
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax;
// 
// function Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin
//   input Integer tableID;
//   output Real Tmin \"minimum time value in table\";
// 
//   external \"C\" Tmin = ModelicaTables_CombiTimeTable_minimumTime(tableID);
// end Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.0;
//   input Real c_a = 1.0;
//   input Real c_b = 1.0;
//   input Real n = 1.0;
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28 \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 400.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.488;
//   input Real c_a = 1200.0;
//   input Real c_b = 3.0;
//   input Real n = 12.5;
//   output Steel_9SMnPb28 res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox \"Approximation of relative permeability mu_r as a function of flux density B for soft magnetic materials\"
//   input Real B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density in ferromagnetic flux tube element\";
//   input Real mu_i(quantity = \"RelativePermeability\", unit = \"1\") \"Initial relative permeability at B=0\";
//   input Real B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density at maximum relative permeability\";
//   input Real c_a \"Coefficient of approximation function\";
//   input Real c_b \"Coefficient of approximation function\";
//   input Real n \"Exponent of approximation function\";
//   output Real mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability of ferromagnetic flux tube element\";
//   protected Real B_N \"Flux density B normalized to flux density at maximum relative permeability B_myMax\";
// algorithm
//   B_N := abs(B / B_myMax);
//   mu_r := 1.0 + (-1.0 + mu_i + c_a * B_N) / (1.0 + c_b * B_N + B_N ^ n);
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke
//   parameter Real v_step(quantity = \"ElectricPotential\", unit = \"V\") = 12.0 \"Applied voltage\";
//   Real advancedGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real advancedSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real advancedSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real advancedSource.signalSource.offset = advancedSource.offset \"Offset of output signal y\";
//   parameter Real advancedSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = advancedSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real advancedSource.signalSource.height = advancedSource.V \"Height of step\";
//   parameter Real advancedSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = v_step \"Height of step\";
//   parameter Real advancedSolenoid.N = 957.0 \"Number of turns\";
//   parameter Real advancedSolenoid.R(quantity = \"Resistance\", unit = \"Ohm\") = 5.0 \"Coil resistance\";
//   parameter Real advancedSolenoid.R_par(quantity = \"Resistance\", unit = \"Ohm\") = 100000.0 \"Resistance parallel to the coil, in series to C_par\";
//   parameter Real advancedSolenoid.C_par(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 1e-09 \"Capacitance parallel to the coil, in series to R_par\";
//   parameter Real advancedSolenoid.r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real advancedSolenoid.r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real advancedSolenoid.l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real advancedSolenoid.t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real advancedSolenoid.l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real advancedSolenoid.t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real advancedSolenoid.t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real advancedSolenoid.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real advancedSolenoid.r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real advancedSolenoid.l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real advancedSolenoid.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real advancedSolenoid.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real advancedSolenoid.x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real advancedSolenoid.x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real advancedSolenoid.x(quantity = \"Length\", unit = \"m\", start = advancedSolenoid.x_max, fixed = true, StateSelect = StateSelect.prefer) \"Armature position\";
//   Real advancedSolenoid.Psi_tot(quantity = \"MagneticFlux\", unit = \"Wb\") \"Total flux linkage for information only\";
//   Real advancedSolenoid.L_statTot(quantity = \"Inductance\", unit = \"H\") \"Total static inductance for information only\";
//   protected parameter Real advancedSolenoid.rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real advancedSolenoid.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real advancedSolenoid.coil1.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real advancedSolenoid.coil1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real advancedSolenoid.coil1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real advancedSolenoid.coil1.N(start = 1.0) = advancedSolenoid.N / 2.0 \"Number of turns\";
//   Real advancedSolenoid.coil1.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real advancedSolenoid.coil1.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real advancedSolenoid.coil1.eps = 1e-13;
//   Real advancedSolenoid.r_1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeSide1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeSide1.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeSide1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeSide1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeSide1.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeSide1.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeSide1.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeSide1.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 2.0 + (-advancedSolenoid.t_poleBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = advancedSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide1.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke + ((-advancedSolenoid.t_yokeBot) / 2.0 + ((-advancedSolenoid.t_poleBot) / 2.0 + ((-advancedSolenoid.x_max) / 2.0 + (-advancedSolenoid.x_min) / 2.0 - advancedSolenoid.l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real advancedSolenoid.g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real advancedSolenoid.g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real advancedSolenoid.g_mAirWork.s(quantity = \"Length\", unit = \"m\") = advancedSolenoid.g_mAirWork.flange.s - advancedSolenoid.g_mAirWork.s_support \"Distance between flange and support\";
//   Real advancedSolenoid.g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer advancedSolenoid.g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real advancedSolenoid.g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real advancedSolenoid.g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real advancedSolenoid.g_mAirWork.l(quantity = \"Length\", unit = \"m\") = advancedSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real advancedSolenoid.g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real advancedSolenoid.g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (advancedSolenoid.g_mAirWork.r_o ^ 2.0 - advancedSolenoid.g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real advancedSolenoid.g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm + advancedSolenoid.t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_arm + advancedSolenoid.t_airPar \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_pole \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real advancedSolenoid.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real advancedSolenoid.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (advancedSolenoid.rho_steel * (advancedSolenoid.l_arm * advancedSolenoid.r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real advancedSolenoid.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = advancedSolenoid.c \"Spring stiffness between impact partners\";
//   parameter Real advancedSolenoid.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = advancedSolenoid.d \"Damping coefficient between impact partners\";
//   parameter Real advancedSolenoid.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real advancedSolenoid.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.x_max \"Position of stopper at maximum armature position\";
//   parameter Real advancedSolenoid.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = advancedSolenoid.x_min \"Position of stopper at minimum armature position\";
//   Real advancedSolenoid.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real advancedSolenoid.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real advancedSolenoid.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real advancedSolenoid.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real advancedSolenoid.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = advancedSolenoid.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = advancedSolenoid.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real advancedSolenoid.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real advancedSolenoid.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real advancedSolenoid.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = advancedSolenoid.armature.x_min \"fixed offset position of housing\";
//   Real advancedSolenoid.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = advancedSolenoid.armature.x_max \"fixed offset position of housing\";
//   Real advancedSolenoid.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real advancedSolenoid.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = advancedSolenoid.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real advancedSolenoid.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = advancedSolenoid.armature.c \"Spring constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = advancedSolenoid.armature.d \"Damping constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real advancedSolenoid.armature.stopper_xMax.n(min = 1.0) = advancedSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean advancedSolenoid.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real advancedSolenoid.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedSolenoid.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real advancedSolenoid.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = advancedSolenoid.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real advancedSolenoid.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real advancedSolenoid.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = advancedSolenoid.armature.c \"Spring constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = advancedSolenoid.armature.d \"Damping constant\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real advancedSolenoid.armature.stopper_xMin.n(min = 1.0) = advancedSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean advancedSolenoid.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real advancedSolenoid.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real advancedSolenoid.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (advancedSolenoid.r_arm + advancedSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real advancedSolenoid.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * advancedSolenoid.r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real advancedSolenoid.g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real advancedSolenoid.coil2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.coil2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.coil2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.coil2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.coil2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real advancedSolenoid.coil2.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real advancedSolenoid.coil2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real advancedSolenoid.coil2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real advancedSolenoid.coil2.N(start = 1.0) = advancedSolenoid.N / 2.0 \"Number of turns\";
//   Real advancedSolenoid.coil2.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real advancedSolenoid.coil2.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real advancedSolenoid.coil2.eps = 1e-13;
//   Real advancedSolenoid.c_par1.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.c_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.c_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.c_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSolenoid.c_par1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = advancedSolenoid.C_par \"Capacitance\";
//   Real advancedSolenoid.G_mLeakRad.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.G_mLeakRad.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.G_mLeakRad.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.G_mLeakRad.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.G_mLeakRad.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.G_mLeakRad.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.G_mLeakRad.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.G_mLeakRad.material.n = 1.0 \"Exponent of approximation function\";
//   Real advancedSolenoid.G_mLeakRad.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.G_mLeakRad.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.G_mLeakRad.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.G_mLeakRad.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.G_mLeakRad.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.G_mLeakRad.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.G_mLeakRad.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 4.0 \"Width (orthogonal to flux direction)\";
//   parameter Real advancedSolenoid.G_mLeakRad.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real advancedSolenoid.G_mLeakRad.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = advancedSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mFeYokeSide2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mFeYokeSide2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mFeYokeSide2.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.material.n = 12.5 \"Exponent of approximation function\";
//   Real advancedSolenoid.g_mFeYokeSide2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mFeYokeSide2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mFeYokeSide2.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real advancedSolenoid.g_mFeYokeSide2.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real advancedSolenoid.g_mFeYokeSide2.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real advancedSolenoid.g_mFeYokeSide2.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.l(quantity = \"Length\", unit = \"m\", start = 0.01) = advancedSolenoid.l_yoke / 2.0 + (-advancedSolenoid.t_yokeBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = advancedSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real advancedSolenoid.g_mFeYokeSide2.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = advancedSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real advancedSolenoid.c_par2.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.c_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.c_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.c_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.c_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real advancedSolenoid.c_par2.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = advancedSolenoid.C_par \"Capacitance\";
//   Real advancedSolenoid.r_par1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_par1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_par1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_par1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_par1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_par1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_par1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R_par \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_par1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_par1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_par2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_par2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_par2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_par2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_par2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_par2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R_par \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_par2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_par2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_par2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real advancedSolenoid.r_2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real advancedSolenoid.r_2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.r_2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.r_2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean advancedSolenoid.r_2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real advancedSolenoid.r_2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = advancedSolenoid.r_2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real advancedSolenoid.r_2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real advancedSolenoid.r_2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real advancedSolenoid.r_2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = advancedSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real advancedSolenoid.r_2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real advancedSolenoid.r_2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.r_2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real advancedSolenoid.g_mLeak3.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak3.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak3.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeak3.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeak3.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeak3.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real advancedSolenoid.g_mLeak3.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeak3.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real advancedSolenoid.g_mLeak3.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (advancedSolenoid.r_arm + advancedSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real advancedSolenoid.g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real advancedSolenoid.g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real advancedSolenoid.g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real advancedSolenoid.g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean advancedSolenoid.g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real advancedSolenoid.g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real advancedSolenoid.g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real advancedSolenoid.g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = advancedSolenoid.g_mLeakWork.flange.s - advancedSolenoid.g_mLeakWork.s_support \"Distance between flange and support\";
//   Real advancedSolenoid.g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real advancedSolenoid.g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real advancedSolenoid.g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer advancedSolenoid.g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real advancedSolenoid.g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real advancedSolenoid.g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real advancedSolenoid.g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = advancedSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real advancedSolenoid.g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * advancedSolenoid.r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real advancedSolenoid.g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real advancedSolenoid.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real advancedSolenoid.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real advancedSolenoid.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedSolenoid.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedLoad.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real advancedLoad.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real advancedLoad.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedLoad.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real advancedLoad.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real advancedLoad.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real advancedLoad.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 0.01 \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) advancedLoad.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real advancedLoad.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real advancedLoad.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real simpleGround.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleGround.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSource.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real simpleSource.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real simpleSource.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSource.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSource.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSource.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real simpleSource.offset(quantity = \"ElectricPotential\", unit = \"V\") = 0.0 \"Voltage offset\";
//   parameter Real simpleSource.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Time offset\";
//   output Real simpleSource.signalSource.y \"Connector of Real output signal\";
//   parameter Real simpleSource.signalSource.offset = simpleSource.offset \"Offset of output signal y\";
//   parameter Real simpleSource.signalSource.startTime(quantity = \"Time\", unit = \"s\") = simpleSource.startTime \"Output y = offset for time < startTime\";
//   parameter Real simpleSource.signalSource.height = simpleSource.V \"Height of step\";
//   parameter Real simpleSource.V(quantity = \"ElectricPotential\", unit = \"V\", start = 1.0) = v_step \"Height of step\";
//   parameter Real simpleSolenoid.R(quantity = \"Resistance\", unit = \"Ohm\") = 10.0 \"Armature coil resistance\";
//   parameter Real simpleSolenoid.N = 957.0 \"Number of turns\";
//   parameter Real simpleSolenoid.r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real simpleSolenoid.r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real simpleSolenoid.l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real simpleSolenoid.t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real simpleSolenoid.l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real simpleSolenoid.t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real simpleSolenoid.t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real simpleSolenoid.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real simpleSolenoid.r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real simpleSolenoid.l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real simpleSolenoid.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real simpleSolenoid.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real simpleSolenoid.x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real simpleSolenoid.x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real simpleSolenoid.x(quantity = \"Length\", unit = \"m\", start = simpleSolenoid.x_max, fixed = true, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position (identical with length of working air gap)\";
//   protected parameter Real simpleSolenoid.rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real simpleSolenoid.ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real simpleSolenoid.coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real simpleSolenoid.coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real simpleSolenoid.coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real simpleSolenoid.coil.N(start = 1.0) = simpleSolenoid.N \"Number of turns\";
//   Real simpleSolenoid.coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real simpleSolenoid.coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real simpleSolenoid.coil.eps = 1e-13;
//   Real simpleSolenoid.r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real simpleSolenoid.r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real simpleSolenoid.r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean simpleSolenoid.r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real simpleSolenoid.r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = simpleSolenoid.r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real simpleSolenoid.r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real simpleSolenoid.r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real simpleSolenoid.r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = simpleSolenoid.R \"Resistance at temperature T_ref\";
//   parameter Real simpleSolenoid.r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real simpleSolenoid.r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real simpleSolenoid.r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real simpleSolenoid.g_mFeYokeSide.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeSide.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeSide.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeYokeSide.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeYokeSide.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeYokeSide.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeYokeSide.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeYokeSide.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeYokeSide.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeYokeSide.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeYokeSide.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_yoke + ((-simpleSolenoid.t_poleBot) / 2.0 + (-simpleSolenoid.t_yokeBot) / 2.0) \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = simpleSolenoid.r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFeYokeSide.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_yoke + ((-simpleSolenoid.t_yokeBot) / 2.0 + ((-simpleSolenoid.t_poleBot) / 2.0 + ((-simpleSolenoid.x_max) / 2.0 + (-simpleSolenoid.x_min) / 2.0 - simpleSolenoid.l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real simpleSolenoid.g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real simpleSolenoid.g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real simpleSolenoid.g_mAirWork.s(quantity = \"Length\", unit = \"m\") = simpleSolenoid.g_mAirWork.flange.s - simpleSolenoid.g_mAirWork.s_support \"Distance between flange and support\";
//   Real simpleSolenoid.g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer simpleSolenoid.g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real simpleSolenoid.g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real simpleSolenoid.g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real simpleSolenoid.g_mAirWork.l(quantity = \"Length\", unit = \"m\") = simpleSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real simpleSolenoid.g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   Real simpleSolenoid.g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real simpleSolenoid.g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (simpleSolenoid.g_mAirWork.r_o ^ 2.0 - simpleSolenoid.g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real simpleSolenoid.g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm + simpleSolenoid.t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_arm + simpleSolenoid.t_airPar \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real simpleSolenoid.g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Inner radius of hollow cylinder\";
//   parameter Real simpleSolenoid.g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = simpleSolenoid.r_yokeIn \"Outer radius of hollow cylinder\";
//   Real simpleSolenoid.g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real simpleSolenoid.g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real simpleSolenoid.g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real simpleSolenoid.g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real simpleSolenoid.g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real simpleSolenoid.g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real simpleSolenoid.g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real simpleSolenoid.g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real simpleSolenoid.g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real simpleSolenoid.g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real simpleSolenoid.g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.l_pole \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real simpleSolenoid.g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = simpleSolenoid.r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real simpleSolenoid.armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real simpleSolenoid.armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (simpleSolenoid.rho_steel * (simpleSolenoid.l_arm * simpleSolenoid.r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real simpleSolenoid.armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = simpleSolenoid.c \"Spring stiffness between impact partners\";
//   parameter Real simpleSolenoid.armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = simpleSolenoid.d \"Damping coefficient between impact partners\";
//   parameter Real simpleSolenoid.armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real simpleSolenoid.armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = simpleSolenoid.x_max \"Position of stopper at maximum armature position\";
//   parameter Real simpleSolenoid.armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = simpleSolenoid.x_min \"Position of stopper at minimum armature position\";
//   Real simpleSolenoid.armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real simpleSolenoid.armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real simpleSolenoid.armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real simpleSolenoid.armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real simpleSolenoid.armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = simpleSolenoid.armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = simpleSolenoid.armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real simpleSolenoid.armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real simpleSolenoid.armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real simpleSolenoid.armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = simpleSolenoid.armature.x_min \"fixed offset position of housing\";
//   Real simpleSolenoid.armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = simpleSolenoid.armature.x_max \"fixed offset position of housing\";
//   Real simpleSolenoid.armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real simpleSolenoid.armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = simpleSolenoid.armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real simpleSolenoid.armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = simpleSolenoid.armature.c \"Spring constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = simpleSolenoid.armature.d \"Damping constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real simpleSolenoid.armature.stopper_xMax.n(min = 1.0) = simpleSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean simpleSolenoid.armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real simpleSolenoid.armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleSolenoid.armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real simpleSolenoid.armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = simpleSolenoid.armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real simpleSolenoid.armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real simpleSolenoid.armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = simpleSolenoid.armature.c \"Spring constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = simpleSolenoid.armature.d \"Damping constant\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real simpleSolenoid.armature.stopper_xMin.n(min = 1.0) = simpleSolenoid.armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean simpleSolenoid.armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real simpleSolenoid.armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real simpleSolenoid.g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real simpleSolenoid.g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real simpleSolenoid.g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (simpleSolenoid.r_arm + simpleSolenoid.t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real simpleSolenoid.g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real simpleSolenoid.g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real simpleSolenoid.g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * simpleSolenoid.r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real simpleSolenoid.g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real simpleSolenoid.g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real simpleSolenoid.g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real simpleSolenoid.g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real simpleSolenoid.g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean simpleSolenoid.g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real simpleSolenoid.g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real simpleSolenoid.g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real simpleSolenoid.g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = simpleSolenoid.g_mLeakWork.flange.s - simpleSolenoid.g_mLeakWork.s_support \"Distance between flange and support\";
//   Real simpleSolenoid.g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real simpleSolenoid.g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real simpleSolenoid.g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer simpleSolenoid.g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real simpleSolenoid.g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real simpleSolenoid.g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real simpleSolenoid.g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = simpleSolenoid.flange.s \"Axial length (in direction of flux)\";
//   parameter Real simpleSolenoid.g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * simpleSolenoid.r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real simpleSolenoid.g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real simpleSolenoid.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real simpleSolenoid.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real simpleSolenoid.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleSolenoid.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleLoad.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real simpleLoad.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real simpleLoad.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleLoad.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real simpleLoad.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real simpleLoad.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real simpleLoad.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 0.01 \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) simpleLoad.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real simpleLoad.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real simpleLoad.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   parameter Integer comparisonWithFEA.nout(min = 1) = 3 \"Number of outputs\";
//   output Real comparisonWithFEA.y[1] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[2] \"Connector of Real output signals\";
//   output Real comparisonWithFEA.y[3] \"Connector of Real output signals\";
//   parameter Boolean comparisonWithFEA.tableOnFile = false \"= true, if table is defined on file or in function usertab\";
//   parameter Real comparisonWithFEA.table[1,1] = 0.0 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,2] = 0.0 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,3] = 0.0 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[1,4] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,1] = 2.61165e-07 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,2] = 7.93537e-05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,3] = -1.97914e-05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[2,4] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,1] = 2.61165e-07 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,2] = 7.93537e-05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,3] = -1.97914e-05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[3,4] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,1] = 0.0001 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,2] = 0.0300045 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,3] = -0.00748335 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[4,4] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,1] = 0.0002 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,2] = 0.05926 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,3] = -0.0147799 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[5,4] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,1] = 0.0003 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,2] = 0.0877841 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,3] = -0.021894 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[6,4] = 0.00499999 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,1] = 0.0004 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,2] = 0.115593 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,3] = -0.036608 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[7,4] = 0.00499997 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,1] = 0.0005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,2] = 0.142707 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,3] = -0.0568957 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[8,4] = 0.00499994 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,1] = 0.0006 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,2] = 0.169143 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,3] = -0.076676 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[9,4] = 0.00499988 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,1] = 0.0007 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,2] = 0.194915 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,3] = -0.0959614 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[10,4] = 0.0049998 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,1] = 0.0008 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,2] = 0.220042 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,3] = -0.124763 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[11,4] = 0.00499968 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,1] = 0.0009 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,2] = 0.244539 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,3] = -0.155317 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[12,4] = 0.00499951 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,1] = 0.001 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,2] = 0.26842 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,3] = -0.185107 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[13,4] = 0.00499928 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,1] = 0.0011 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,2] = 0.291701 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,3] = -0.214153 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[14,4] = 0.00499898 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,1] = 0.0012 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,2] = 0.314394 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,3] = -0.249655 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[15,4] = 0.0049986 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,1] = 0.0013 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,2] = 0.336514 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,3] = -0.288306 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[16,4] = 0.00499812 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,1] = 0.0014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,2] = 0.358074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,3] = -0.325991 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[17,4] = 0.00499754 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,1] = 0.0015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,2] = 0.379086 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,3] = -0.362735 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[18,4] = 0.00499682 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,1] = 0.0016 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,2] = 0.399562 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,3] = -0.398563 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[19,4] = 0.00499597 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,1] = 0.0017 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,2] = 0.419514 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,3] = -0.44324 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[20,4] = 0.00499496 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[21,1] = 0.0018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[21,2] = 0.438955 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[21,3] = -0.487015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[21,4] = 0.00499378 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[22,1] = 0.0019 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[22,2] = 0.457893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[22,3] = -0.529698 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[22,4] = 0.00499242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[23,1] = 0.002 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[23,2] = 0.47634 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[23,3] = -0.571317 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[23,4] = 0.00499085 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[24,1] = 0.0021 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[24,2] = 0.494305 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[24,3] = -0.611901 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[24,4] = 0.00498906 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[25,1] = 0.0022 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[25,2] = 0.511799 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[25,3] = -0.657374 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[25,4] = 0.00498704 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[26,1] = 0.0023 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[26,2] = 0.528832 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[26,3] = -0.704491 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[26,4] = 0.00498476 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[27,1] = 0.0024 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[27,2] = 0.545412 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[27,3] = -0.750434 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[27,4] = 0.00498221 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[28,1] = 0.0025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[28,2] = 0.561548 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[28,3] = -0.795237 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[28,4] = 0.00497937 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[29,1] = 0.0026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[29,2] = 0.577248 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[29,3] = -0.83893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[29,4] = 0.00497623 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[30,1] = 0.0027 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[30,2] = 0.592521 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[30,3] = -0.881543 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[30,4] = 0.00497277 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[31,1] = 0.0028 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[31,2] = 0.607375 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[31,3] = -0.926803 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[31,4] = 0.00496896 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[32,1] = 0.0029 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[32,2] = 0.62182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[32,3] = -0.974598 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[32,4] = 0.0049648 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[33,1] = 0.003 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[33,2] = 0.63586 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[33,3] = -1.02121 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[33,4] = 0.00496027 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[34,1] = 0.0031 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[34,2] = 0.649503 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[34,3] = -1.06667 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[34,4] = 0.00495534 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[35,1] = 0.0032 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[35,2] = 0.662756 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[35,3] = -1.11102 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[35,4] = 0.00495 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[36,1] = 0.0033 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[36,2] = 0.675625 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[36,3] = -1.15428 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[36,4] = 0.00494424 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[37,1] = 0.0034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[37,2] = 0.688119 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[37,3] = -1.19648 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[37,4] = 0.00493803 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[38,1] = 0.0035 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[38,2] = 0.700242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[38,3] = -1.23778 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[38,4] = 0.00493136 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[39,1] = 0.0036 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[39,2] = 0.712005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[39,3] = -1.28391 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[39,4] = 0.00492421 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[40,1] = 0.0037 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[40,2] = 0.72341 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[40,3] = -1.32891 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[40,4] = 0.00491657 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[41,1] = 0.0038 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[41,2] = 0.734463 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[41,3] = -1.3728 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[41,4] = 0.00490842 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[42,1] = 0.0039 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[42,2] = 0.74517 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[42,3] = -1.41563 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[42,4] = 0.00489974 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[43,1] = 0.004 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[43,2] = 0.755536 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[43,3] = -1.45743 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[43,4] = 0.00489052 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[44,1] = 0.0041 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[44,2] = 0.765568 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[44,3] = -1.49822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[44,4] = 0.00488074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[45,1] = 0.0042 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[45,2] = 0.775269 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[45,3] = -1.53803 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[45,4] = 0.00487038 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[46,1] = 0.0043 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[46,2] = 0.784646 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[46,3] = -1.57689 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[46,4] = 0.00485943 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[47,1] = 0.0044 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[47,2] = 0.793704 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[47,3] = -1.61483 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[47,4] = 0.00484787 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[48,1] = 0.0045 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[48,2] = 0.80245 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[48,3] = -1.65314 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[48,4] = 0.00483569 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[49,1] = 0.0046 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[49,2] = 0.810888 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[49,3] = -1.69366 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[49,4] = 0.00482288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[50,1] = 0.0047 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[50,2] = 0.81902 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[50,3] = -1.7332 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[50,4] = 0.00480941 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[51,1] = 0.0048 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[51,2] = 0.826851 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[51,3] = -1.77179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[51,4] = 0.00479528 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[52,1] = 0.0049 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[52,2] = 0.834387 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[52,3] = -1.80945 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[52,4] = 0.00478046 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[53,1] = 0.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[53,2] = 0.841631 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[53,3] = -1.84622 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[53,4] = 0.00476495 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[54,1] = 0.0051 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[54,2] = 0.84859 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[54,3] = -1.88259 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[54,4] = 0.00474873 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[55,1] = 0.0052 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[55,2] = 0.855304 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[55,3] = -1.92429 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[55,4] = 0.00473179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[56,1] = 0.0053 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[56,2] = 0.861739 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[56,3] = -1.96564 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[56,4] = 0.0047141 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[57,1] = 0.0054 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[57,2] = 0.8679 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[57,3] = -2.00668 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[57,4] = 0.00469566 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[58,1] = 0.0055 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[58,2] = 0.873791 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[58,3] = -2.04743 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[58,4] = 0.00467645 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[59,1] = 0.0056 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[59,2] = 0.879419 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[59,3] = -2.08794 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[59,4] = 0.00465645 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[60,1] = 0.0057 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[60,2] = 0.884782 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[60,3] = -2.1282 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[60,4] = 0.00463565 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[61,1] = 0.0058 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[61,2] = 0.889885 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[61,3] = -2.16824 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[61,4] = 0.00461403 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[62,1] = 0.0059 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[62,2] = 0.894731 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[62,3] = -2.20808 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[62,4] = 0.00459157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[63,1] = 0.006 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[63,2] = 0.899322 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[63,3] = -2.24774 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[63,4] = 0.00456827 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[64,1] = 0.0061 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[64,2] = 0.903661 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[64,3] = -2.28927 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[64,4] = 0.0045441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[65,1] = 0.0062 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[65,2] = 0.907752 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[65,3] = -2.33091 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[65,4] = 0.00451905 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[66,1] = 0.0063 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[66,2] = 0.911603 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[66,3] = -2.37014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[66,4] = 0.0044931 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[67,1] = 0.0064 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[67,2] = 0.915232 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[67,3] = -2.40274 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[67,4] = 0.00446624 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[68,1] = 0.0065 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[68,2] = 0.91862 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[68,3] = -2.43469 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[68,4] = 0.00443846 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[69,1] = 0.0066 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[69,2] = 0.92177 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[69,3] = -2.466 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[69,4] = 0.00440974 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[70,1] = 0.0067 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[70,2] = 0.924686 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[70,3] = -2.49668 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[70,4] = 0.00438007 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[71,1] = 0.0068 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[71,2] = 0.927368 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[71,3] = -2.52672 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[71,4] = 0.00434945 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[72,1] = 0.0069 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[72,2] = 0.929822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[72,3] = -2.55615 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[72,4] = 0.00431785 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[73,1] = 0.007 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[73,2] = 0.93205 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[73,3] = -2.58498 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[73,4] = 0.00428527 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[74,1] = 0.0071 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[74,2] = 0.934052 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[74,3] = -2.61318 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[74,4] = 0.00425169 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[75,1] = 0.0072 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[75,2] = 0.935241 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[75,3] = -2.64973 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[75,4] = 0.00421711 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[76,1] = 0.0073 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[76,2] = 0.936164 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[76,3] = -2.68643 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[76,4] = 0.00418151 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[77,1] = 0.0074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[77,2] = 0.936854 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[77,3] = -2.7228 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[77,4] = 0.00414488 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[78,1] = 0.0075 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[78,2] = 0.937309 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[78,3] = -2.7588 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[78,4] = 0.0041072 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[79,1] = 0.0076 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[79,2] = 0.937532 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[79,3] = -2.7944 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[79,4] = 0.00406845 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[80,1] = 0.0077 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[80,2] = 0.937522 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[80,3] = -2.82958 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[80,4] = 0.00402864 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[81,1] = 0.0078 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[81,2] = 0.937411 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[81,3] = -2.866 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[81,4] = 0.00398773 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[82,1] = 0.0079 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[82,2] = 0.937385 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[82,3] = -2.90613 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[82,4] = 0.00394572 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[83,1] = 0.008 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[83,2] = 0.937133 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[83,3] = -2.94589 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[83,4] = 0.0039026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[84,1] = 0.0081 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[84,2] = 0.936656 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[84,3] = -2.98525 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[84,4] = 0.00385834 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[85,1] = 0.0082 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[85,2] = 0.935953 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[85,3] = -3.02414 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[85,4] = 0.00381293 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[86,1] = 0.0083 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[86,2] = 0.935024 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[86,3] = -3.06251 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[86,4] = 0.00376636 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[87,1] = 0.0084 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[87,2] = 0.934308 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[87,3] = -3.10824 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[87,4] = 0.00371862 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[88,1] = 0.0085 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[88,2] = 0.933608 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[88,3] = -3.15783 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[88,4] = 0.00366967 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[89,1] = 0.0086 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[89,2] = 0.93269 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[89,3] = -3.20708 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[89,4] = 0.00361952 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[90,1] = 0.0087 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[90,2] = 0.931553 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[90,3] = -3.25592 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[90,4] = 0.00356812 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[91,1] = 0.0088 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[91,2] = 0.930194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[91,3] = -3.30427 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[91,4] = 0.00351548 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[92,1] = 0.0089 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[92,2] = 0.928473 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[92,3] = -3.35247 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[92,4] = 0.00346157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[93,1] = 0.009 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[93,2] = 0.926467 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[93,3] = -3.40014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[93,4] = 0.00340636 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[94,1] = 0.0091 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[94,2] = 0.924232 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[94,3] = -3.44698 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[94,4] = 0.00334985 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[95,1] = 0.0092 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[95,2] = 0.921766 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[95,3] = -3.49289 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[95,4] = 0.00329202 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[96,1] = 0.0093 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[96,2] = 0.918579 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[96,3] = -3.53879 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[96,4] = 0.00323283 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[97,1] = 0.0094 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[97,2] = 0.913925 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[97,3] = -3.5856 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[97,4] = 0.00317229 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[98,1] = 0.0095 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[98,2] = 0.909004 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[98,3] = -3.63034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[98,4] = 0.00311037 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[99,1] = 0.0096 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[99,2] = 0.903809 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[99,3] = -3.67275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[99,4] = 0.00304706 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[100,1] = 0.0097 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[100,2] = 0.89859 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[100,3] = -3.72881 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[100,4] = 0.00298233 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[101,1] = 0.0098 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[101,2] = 0.893783 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[101,3] = -3.82589 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[101,4] = 0.00291616 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[102,1] = 0.0099 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[102,2] = 0.888707 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[102,3] = -3.92096 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[102,4] = 0.00284852 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[103,1] = 0.01 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[103,2] = 0.883343 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[103,3] = -4.01357 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[103,4] = 0.00277938 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[104,1] = 0.0101 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[104,2] = 0.876979 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[104,3] = -4.10734 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[104,4] = 0.00270869 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[105,1] = 0.0102 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[105,2] = 0.869783 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[105,3] = -4.19987 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[105,4] = 0.00263642 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[106,1] = 0.0103 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[106,2] = 0.862246 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[106,3] = -4.28752 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[106,4] = 0.00256254 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[107,1] = 0.0104 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[107,2] = 0.854574 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[107,3] = -4.37627 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[107,4] = 0.00248701 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[108,1] = 0.0105 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[108,2] = 0.847614 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[108,3] = -4.49154 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[108,4] = 0.00240979 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[109,1] = 0.0106 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[109,2] = 0.840302 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[109,3] = -4.60102 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[109,4] = 0.00233085 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[110,1] = 0.0107 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[110,2] = 0.832625 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[110,3] = -4.70399 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[110,4] = 0.00225014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[111,1] = 0.0108 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[111,2] = 0.822938 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[111,3] = -4.82647 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[111,4] = 0.00216761 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[112,1] = 0.0109 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[112,2] = 0.812813 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[112,3] = -4.93752 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[112,4] = 0.00208323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[113,1] = 0.011 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[113,2] = 0.802204 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[113,3] = -5.04175 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[113,4] = 0.00199695 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[114,1] = 0.0111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[114,2] = 0.78997 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[114,3] = -5.30274 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[114,4] = 0.00190873 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[115,1] = 0.0112 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[115,2] = 0.777197 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[115,3] = -5.54515 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[115,4] = 0.00181846 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[116,1] = 0.0113 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[116,2] = 0.763521 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[116,3] = -5.78149 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[116,4] = 0.00172606 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[117,1] = 0.0114 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[117,2] = 0.748272 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[117,3] = -6.039 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[117,4] = 0.00163144 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[118,1] = 0.0115 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[118,2] = 0.73235 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[118,3] = -6.25778 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[118,4] = 0.0015345 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[119,1] = 0.0116 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[119,2] = 0.715211 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[119,3] = -6.57852 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[119,4] = 0.00143514 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[120,1] = 0.0117 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[120,2] = 0.696998 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[120,3] = -6.91971 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[120,4] = 0.00133326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[121,1] = 0.0118 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[121,2] = 0.677065 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[121,3] = -7.30735 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[121,4] = 0.00122872 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[122,1] = 0.0119 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[122,2] = 0.652791 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[122,3] = -7.88085 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[122,4] = 0.00112136 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[123,1] = 0.012 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[123,2] = 0.62734 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[123,3] = -8.29718 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[123,4] = 0.00101097 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[124,1] = 0.0121 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[124,2] = 0.597125 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[124,3] = -9.13179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[124,4] = 0.000897364 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[125,1] = 0.0122 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[125,2] = 0.564919 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[125,3] = -9.82427 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[125,4] = 0.000780251 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[126,1] = 0.0123 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[126,2] = 0.527838 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[126,3] = -11.1684 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[126,4] = 0.000659331 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[127,1] = 0.0124 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[127,2] = 0.487477 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[127,3] = -12.1609 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[127,4] = 0.000534142 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[128,1] = 0.0125 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[128,2] = 0.436631 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[128,3] = -14.9103 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[128,4] = 0.000404205 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[129,1] = 0.0126 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[129,2] = 0.379243 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[129,3] = -16.2449 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[129,4] = 0.000268616 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[130,1] = 0.0126134 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[130,2] = 0.371242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[130,3] = -16.2777 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[130,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[131,1] = 0.0126134 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[131,2] = 0.371242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[131,3] = -16.2777 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[131,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[132,1] = 0.0126868 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[132,2] = 0.350822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[132,3] = -16.2554 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[132,4] = 0.000198624 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[133,1] = 0.0126868 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[133,2] = 0.350822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[133,3] = -16.2554 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[133,4] = 0.000198624 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[134,1] = 0.0127 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[134,2] = 0.351869 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[134,3] = -16.3218 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[134,4] = 0.000199455 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[135,1] = 0.0128 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[135,2] = 0.37695 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[135,3] = -17.0338 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[135,4] = 0.000241587 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[136,1] = 0.0128157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[136,2] = 0.381787 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[136,3] = -17.1198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[136,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[137,1] = 0.0128157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[137,2] = 0.381787 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[137,3] = -17.1198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[137,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[138,1] = 0.0129 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[138,2] = 0.406591 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[138,3] = -17.48 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[138,4] = 0.000292352 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[139,1] = 0.013 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[139,2] = 0.433421 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[139,3] = -17.8191 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[139,4] = 0.000336402 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[140,1] = 0.0131 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[140,2] = 0.457261 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[140,3] = -17.8337 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[140,4] = 0.000373609 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[141,1] = 0.0132 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[141,2] = 0.477911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[141,3] = -17.6706 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[141,4] = 0.000403962 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[142,1] = 0.0133 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[142,2] = 0.495294 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[142,3] = -17.4605 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[142,4] = 0.00042752 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[143,1] = 0.0134 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[143,2] = 0.509353 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[143,3] = -17.3988 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[143,4] = 0.000444358 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[144,1] = 0.0135 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[144,2] = 0.520015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[144,3] = -17.4878 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[144,4] = 0.0004545 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[145,1] = 0.0136 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[145,2] = 0.527192 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[145,3] = -17.7433 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[145,4] = 0.000457911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[146,1] = 0.0136003 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[146,2] = 0.527207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[146,3] = -17.7443 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[146,4] = 0.000457911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[147,1] = 0.0136003 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[147,2] = 0.527207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[147,3] = -17.7443 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[147,4] = 0.000457911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[148,1] = 0.0137 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[148,2] = 0.530748 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[148,3] = -18.1997 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[148,4] = 0.000454491 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[149,1] = 0.0138 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[149,2] = 0.530517 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[149,3] = -18.8646 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[149,4] = 0.000444064 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[150,1] = 0.0139 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[150,2] = 0.526294 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[150,3] = -19.7142 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[150,4] = 0.000426376 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[151,1] = 0.014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[151,2] = 0.517828 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[151,3] = -20.6871 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[151,4] = 0.000401101 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[152,1] = 0.0141 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[152,2] = 0.504836 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[152,3] = -21.6765 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[152,4] = 0.000367869 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[153,1] = 0.0142 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[153,2] = 0.487037 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[153,3] = -22.6627 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[153,4] = 0.000326301 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[154,1] = 0.0143 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[154,2] = 0.464073 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[154,3] = -23.4017 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[154,4] = 0.000276025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[155,1] = 0.0143458 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[155,2] = 0.451744 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[155,3] = -23.5657 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[155,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[156,1] = 0.0143458 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[156,2] = 0.451744 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[156,3] = -23.5657 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[156,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[157,1] = 0.0144 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[157,2] = 0.439383 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[157,3] = -23.6302 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[157,4] = 0.000223375 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[158,1] = 0.0144518 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[158,2] = 0.438001 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[158,3] = -23.8106 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[158,4] = 0.00021654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[159,1] = 0.0144518 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[159,2] = 0.438001 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[159,3] = -23.8106 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[159,4] = 0.00021654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[160,1] = 0.0145 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[160,2] = 0.442437 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[160,3] = -24.0882 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[160,4] = 0.000220288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[161,1] = 0.0146 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[161,2] = 0.459291 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[161,3] = -24.7355 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[161,4] = 0.000241352 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[162,1] = 0.014643 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[162,2] = 0.466338 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[162,3] = -24.9736 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[162,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[163,1] = 0.014643 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[163,2] = 0.466338 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[163,3] = -24.9736 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[163,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[164,1] = 0.0147 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[164,2] = 0.47417 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[164,3] = -25.2545 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[164,4] = 0.000258795 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[165,1] = 0.0148 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[165,2] = 0.483493 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[165,3] = -25.7045 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[165,4] = 0.000266567 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[166,1] = 0.0148288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[166,2] = 0.485111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[166,3] = -25.8323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[166,4] = 0.00026698 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[167,1] = 0.0148288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[167,2] = 0.485111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[167,3] = -25.8323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[167,4] = 0.00026698 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[168,1] = 0.0149 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[168,2] = 0.486998 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[168,3] = -26.1506 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[168,4] = 0.000264454 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[169,1] = 0.015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[169,2] = 0.484444 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[169,3] = -26.5924 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[169,4] = 0.000252282 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[170,1] = 0.0150127 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[170,2] = 0.483671 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[170,3] = -26.6456 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[170,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[171,1] = 0.0150127 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[171,2] = 0.483671 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[171,3] = -26.6456 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[171,4] = 0.00025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[172,1] = 0.0151 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[172,2] = 0.477935 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[172,3] = -26.9803 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[172,4] = 0.000233764 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[173,1] = 0.0151954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[173,2] = 0.478678 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[173,3] = -27.3825 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[173,4] = 0.000227777 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[174,1] = 0.0151954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[174,2] = 0.478678 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[174,3] = -27.3825 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[174,4] = 0.000227777 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[175,1] = 0.0152 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[175,2] = 0.478896 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[175,3] = -27.404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[175,4] = 0.000227786 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[176,1] = 0.0153 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[176,2] = 0.486112 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[176,3] = -27.9096 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[176,4] = 0.000231723 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[177,1] = 0.0154 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[177,2] = 0.494618 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[177,3] = -28.4114 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[177,4] = 0.000237745 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[178,1] = 0.0154716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[178,2] = 0.499054 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[178,3] = -28.7526 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[178,4] = 0.000239402 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[179,1] = 0.0154716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[179,2] = 0.499054 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[179,3] = -28.7526 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[179,4] = 0.000239402 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[180,1] = 0.0155 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[180,2] = 0.500242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[180,3] = -28.8872 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[180,4] = 0.000239151 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[181,1] = 0.0156 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[181,2] = 0.502893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[181,3] = -29.3755 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[181,4] = 0.000235871 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[182,1] = 0.0157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[182,2] = 0.505639 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[182,3] = -29.8643 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[182,4] = 0.000232816 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[183,1] = 0.0158 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[183,2] = 0.509736 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[183,3] = -30.3772 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[183,4] = 0.000231912 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[184,1] = 0.0158118 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[184,2] = 0.51029 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[184,3] = -30.4396 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[184,4] = 0.000231905 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[185,1] = 0.0158118 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[185,2] = 0.51029 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[185,3] = -30.4396 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[185,4] = 0.000231905 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[186,1] = 0.0159 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[186,2] = 0.514622 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[186,3] = -30.9065 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[186,4] = 0.000232198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[187,1] = 0.016 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[187,2] = 0.519654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[187,3] = -31.4343 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[187,4] = 0.000232755 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[188,1] = 0.016048 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[188,2] = 0.521947 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[188,3] = -31.6846 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[188,4] = 0.000232849 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[189,1] = 0.016048 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[189,2] = 0.521947 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[189,3] = -31.6846 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[189,4] = 0.000232849 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[190,1] = 0.0161 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[190,2] = 0.524291 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[190,3] = -31.9527 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[190,4] = 0.000232753 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[191,1] = 0.0162 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[191,2] = 0.528618 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[191,3] = -32.4638 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[191,4] = 0.000232328 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[192,1] = 0.0163 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[192,2] = 0.53296 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[192,3] = -32.9726 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[192,4] = 0.000231976 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[193,1] = 0.0164 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[193,2] = 0.537374 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[193,3] = -33.4793 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[193,4] = 0.000231787 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[194,1] = 0.0165 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[194,2] = 0.541801 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[194,3] = -33.9827 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[194,4] = 0.000231672 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[195,1] = 0.0166 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[195,2] = 0.546199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[195,3] = -34.4828 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[195,4] = 0.000231561 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[196,1] = 0.0167 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[196,2] = 0.550555 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[196,3] = -34.9795 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[196,4] = 0.000231435 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[197,1] = 0.0168 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[197,2] = 0.554875 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[197,3] = -35.4729 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[197,4] = 0.0002313 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[198,1] = 0.0169 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[198,2] = 0.559164 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[198,3] = -35.9631 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[198,4] = 0.000231166 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[199,1] = 0.017 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[199,2] = 0.56344 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[199,3] = -36.4518 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[199,4] = 0.000231035 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[200,1] = 0.0171 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[200,2] = 0.567726 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[200,3] = -36.9417 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[200,4] = 0.000230906 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[201,1] = 0.0172 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[201,2] = 0.571982 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[201,3] = -37.4284 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[201,4] = 0.000230779 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[202,1] = 0.0173 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[202,2] = 0.576209 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[202,3] = -37.9119 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[202,4] = 0.000230653 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[203,1] = 0.0174 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[203,2] = 0.580407 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[203,3] = -38.3923 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[203,4] = 0.000230528 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[204,1] = 0.0175 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[204,2] = 0.584575 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[204,3] = -38.8695 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[204,4] = 0.000230405 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[205,1] = 0.0176 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[205,2] = 0.588716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[205,3] = -39.3436 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[205,4] = 0.000230284 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[206,1] = 0.0177 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[206,2] = 0.593137 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[206,3] = -39.8493 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[206,4] = 0.000230163 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[207,1] = 0.0178 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[207,2] = 0.59757 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[207,3] = -40.357 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[207,4] = 0.000230038 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[208,1] = 0.0179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[208,2] = 0.601967 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[208,3] = -40.8716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[208,4] = 0.000229911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[209,1] = 0.018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[209,2] = 0.60633 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[209,3] = -41.3953 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[209,4] = 0.000229783 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[210,1] = 0.0181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[210,2] = 0.610659 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[210,3] = -41.9153 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[210,4] = 0.000229654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[211,1] = 0.0182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[211,2] = 0.614955 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[211,3] = -42.4317 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[211,4] = 0.000229526 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[212,1] = 0.0183 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[212,2] = 0.619218 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[212,3] = -42.9441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[212,4] = 0.0002294 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[213,1] = 0.0184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[213,2] = 0.623441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[213,3] = -43.452 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[213,4] = 0.000229276 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[214,1] = 0.0185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[214,2] = 0.627634 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[214,3] = -43.9562 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[214,4] = 0.000229154 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[215,1] = 0.0186 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[215,2] = 0.631795 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[215,3] = -44.4569 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[215,4] = 0.000229034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[216,1] = 0.0187 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[216,2] = 0.635926 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[216,3] = -44.954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[216,4] = 0.000228915 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[217,1] = 0.0188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[217,2] = 0.640026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[217,3] = -45.4476 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[217,4] = 0.000228797 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[218,1] = 0.0189 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[218,2] = 0.644096 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[218,3] = -45.9377 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[218,4] = 0.000228681 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[219,1] = 0.019 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[219,2] = 0.648136 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[219,3] = -46.4242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[219,4] = 0.000228566 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[220,1] = 0.0191 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[220,2] = 0.652146 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[220,3] = -46.9074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[220,4] = 0.000228453 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[221,1] = 0.0192 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[221,2] = 0.656126 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[221,3] = -47.387 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[221,4] = 0.000228341 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[222,1] = 0.0193 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[222,2] = 0.660077 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[222,3] = -47.8633 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[222,4] = 0.000228231 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[223,1] = 0.0194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[223,2] = 0.663999 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[223,3] = -48.3362 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[223,4] = 0.000228122 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[224,1] = 0.0195 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[224,2] = 0.667892 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[224,3] = -48.8057 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[224,4] = 0.000228014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[225,1] = 0.0196 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[225,2] = 0.671756 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[225,3] = -49.2718 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[225,4] = 0.000227908 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[226,1] = 0.0197 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[226,2] = 0.675592 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[226,3] = -49.7347 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[226,4] = 0.000227802 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[227,1] = 0.0198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[227,2] = 0.67979 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[227,3] = -50.2404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[227,4] = 0.000227697 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[228,1] = 0.0199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[228,2] = 0.684118 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[228,3] = -50.7623 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[228,4] = 0.000227586 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[229,1] = 0.02 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[229,2] = 0.688404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[229,3] = -51.2799 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[229,4] = 0.000227471 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[230,1] = 0.0201 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[230,2] = 0.692654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[230,3] = -51.7933 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[230,4] = 0.000227355 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[231,1] = 0.0202 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[231,2] = 0.696868 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[231,3] = -52.3025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[231,4] = 0.000227241 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[232,1] = 0.0203 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[232,2] = 0.701047 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[232,3] = -52.8002 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[232,4] = 0.00022713 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[233,1] = 0.0204 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[233,2] = 0.705193 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[233,3] = -53.2717 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[233,4] = 0.000227022 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[234,1] = 0.0205 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[234,2] = 0.709307 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[234,3] = -53.7394 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[234,4] = 0.000226918 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[235,1] = 0.0206 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[235,2] = 0.713479 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[235,3] = -54.2135 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[235,4] = 0.000226817 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[236,1] = 0.0207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[236,2] = 0.717635 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[236,3] = -54.686 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[236,4] = 0.000226716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[237,1] = 0.0208 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[237,2] = 0.721755 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[237,3] = -55.1544 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[237,4] = 0.000226615 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[238,1] = 0.0209 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[238,2] = 0.725839 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[238,3] = -55.619 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[238,4] = 0.000226515 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[239,1] = 0.021 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[239,2] = 0.729888 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[239,3] = -56.0796 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[239,4] = 0.000226416 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[240,1] = 0.0211 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[240,2] = 0.733903 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[240,3] = -56.5364 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[240,4] = 0.000226319 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[241,1] = 0.0212 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[241,2] = 0.737883 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[241,3] = -56.9893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[241,4] = 0.000226222 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[242,1] = 0.0213 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[242,2] = 0.741829 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[242,3] = -57.4383 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[242,4] = 0.000226127 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[243,1] = 0.0214 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[243,2] = 0.745732 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[243,3] = -57.8827 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[243,4] = 0.000226033 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[244,1] = 0.0215 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[244,2] = 0.749587 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[244,3] = -58.3217 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[244,4] = 0.000225941 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[245,1] = 0.0216 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[245,2] = 0.75341 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[245,3] = -58.7569 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[245,4] = 0.00022585 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[246,1] = 0.0217 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[246,2] = 0.757199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[246,3] = -59.1885 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[246,4] = 0.00022576 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[247,1] = 0.0218 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[247,2] = 0.760956 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[247,3] = -59.6164 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[247,4] = 0.000225671 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[248,1] = 0.0219 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[248,2] = 0.764681 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[248,3] = -60.0407 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[248,4] = 0.000225583 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[249,1] = 0.022 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[249,2] = 0.768373 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[249,3] = -60.4614 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[249,4] = 0.000225497 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[250,1] = 0.0221 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[250,2] = 0.772034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[250,3] = -60.8786 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[250,4] = 0.000225411 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[251,1] = 0.0222 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[251,2] = 0.775663 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[251,3] = -61.2922 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[251,4] = 0.000225326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[252,1] = 0.0223 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[252,2] = 0.779579 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[252,3] = -61.7378 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[252,4] = 0.000225242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[253,1] = 0.0224 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[253,2] = 0.784355 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[253,3] = -62.2802 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[253,4] = 0.000225151 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[254,1] = 0.0225 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[254,2] = 0.789065 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[254,3] = -62.8168 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[254,4] = 0.000225046 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[255,1] = 0.0226 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[255,2] = 0.793716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[255,3] = -63.3474 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[255,4] = 0.000224938 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[256,1] = 0.0227 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[256,2] = 0.798315 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[256,3] = -63.8721 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[256,4] = 0.000224831 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[257,1] = 0.0228 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[257,2] = 0.802863 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[257,3] = -64.3256 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[257,4] = 0.000224728 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[258,1] = 0.0229 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[258,2] = 0.80737 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[258,3] = -64.7356 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[258,4] = 0.000224637 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[259,1] = 0.023 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[259,2] = 0.811833 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[259,3] = -65.1406 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[259,4] = 0.000224555 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[260,1] = 0.0231 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[260,2] = 0.816247 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[260,3] = -65.541 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[260,4] = 0.000224477 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[261,1] = 0.0232 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[261,2] = 0.820611 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[261,3] = -65.9369 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[261,4] = 0.000224399 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[262,1] = 0.0233 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[262,2] = 0.824909 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[262,3] = -66.3269 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[262,4] = 0.000224322 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[263,1] = 0.0234 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[263,2] = 0.829106 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[263,3] = -66.7079 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[263,4] = 0.000224246 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[264,1] = 0.0235 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[264,2] = 0.833258 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[264,3] = -67.0845 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[264,4] = 0.000224172 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[265,1] = 0.0236 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[265,2] = 0.837362 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[265,3] = -67.457 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[265,4] = 0.000224099 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[266,1] = 0.0237 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[266,2] = 0.84142 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[266,3] = -67.8252 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[266,4] = 0.000224027 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[267,1] = 0.0238 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[267,2] = 0.845433 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[267,3] = -68.1893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[267,4] = 0.000223957 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[268,1] = 0.0239 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[268,2] = 0.8494 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[268,3] = -68.5494 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[268,4] = 0.000223887 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[269,1] = 0.024 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[269,2] = 0.853323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[269,3] = -68.9053 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[269,4] = 0.000223818 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[270,1] = 0.0241 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[270,2] = 0.857201 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[270,3] = -69.2573 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[270,4] = 0.00022375 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[271,1] = 0.0242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[271,2] = 0.861036 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[271,3] = -69.6053 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[271,4] = 0.000223683 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[272,1] = 0.0243 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[272,2] = 0.864828 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[272,3] = -69.9494 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[272,4] = 0.000223617 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[273,1] = 0.0244 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[273,2] = 0.868577 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[273,3] = -70.2896 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[273,4] = 0.000223552 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[274,1] = 0.0245 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[274,2] = 0.873541 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[274,3] = -70.7381 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[274,4] = 0.000223484 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[275,1] = 0.0246 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[275,2] = 0.878506 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[275,3] = -71.1879 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[275,4] = 0.000223404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[276,1] = 0.0247 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[276,2] = 0.883389 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[276,3] = -71.6312 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[276,4] = 0.00022332 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[277,1] = 0.0248 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[277,2] = 0.888198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[277,3] = -72.0678 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[277,4] = 0.000223236 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[278,1] = 0.0249 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[278,2] = 0.892935 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[278,3] = -72.4978 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[278,4] = 0.000223154 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[279,1] = 0.025 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[279,2] = 0.8976 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[279,3] = -72.9212 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[279,4] = 0.000223074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[280,1] = 0.0251 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[280,2] = 0.902194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[280,3] = -73.2832 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[280,4] = 0.000222997 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[281,1] = 0.0252 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[281,2] = 0.906729 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[281,3] = -73.5797 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[281,4] = 0.00022293 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[282,1] = 0.0253 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[282,2] = 0.911203 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[282,3] = -73.8711 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[282,4] = 0.000222873 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[283,1] = 0.0254 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[283,2] = 0.915611 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[283,3] = -74.1579 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[283,4] = 0.00022282 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[284,1] = 0.0255 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[284,2] = 0.919953 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[284,3] = -74.4404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[284,4] = 0.000222768 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[285,1] = 0.0256 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[285,2] = 0.924227 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[285,3] = -74.7185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[285,4] = 0.000222716 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[286,1] = 0.0257 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[286,2] = 0.928436 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[286,3] = -74.9923 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[286,4] = 0.000222665 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[287,1] = 0.0258 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[287,2] = 0.932872 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[287,3] = -75.2805 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[287,4] = 0.000222615 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[288,1] = 0.0259 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[288,2] = 0.937419 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[288,3] = -75.5759 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[288,4] = 0.000222563 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[289,1] = 0.026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[289,2] = 0.941886 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[289,3] = -75.8664 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[289,4] = 0.000222509 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[290,1] = 0.0261 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[290,2] = 0.946276 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[290,3] = -76.1519 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[290,4] = 0.000222456 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[291,1] = 0.0262 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[291,2] = 0.950592 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[291,3] = -76.4326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[291,4] = 0.000222404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[292,1] = 0.0263 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[292,2] = 0.954834 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[292,3] = -76.7084 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[292,4] = 0.000222354 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[293,1] = 0.0264 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[293,2] = 0.959005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[293,3] = -76.9795 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[293,4] = 0.000222304 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[294,1] = 0.0265 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[294,2] = 0.963104 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[294,3] = -77.246 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[294,4] = 0.000222255 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[295,1] = 0.0266 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[295,2] = 0.967134 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[295,3] = -77.5079 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[295,4] = 0.000222207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[296,1] = 0.0267 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[296,2] = 0.971094 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[296,3] = -77.7654 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[296,4] = 0.00022216 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[297,1] = 0.0268 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[297,2] = 0.974988 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[297,3] = -78.0184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[297,4] = 0.000222114 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[298,1] = 0.0269 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[298,2] = 0.978815 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[298,3] = -78.2671 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[298,4] = 0.000222068 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[299,1] = 0.027 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[299,2] = 0.982577 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[299,3] = -78.5115 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[299,4] = 0.000222024 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[300,1] = 0.0271 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[300,2] = 0.986275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[300,3] = -78.7518 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[300,4] = 0.00022198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[301,1] = 0.0272 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[301,2] = 0.98991 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[301,3] = -78.9879 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[301,4] = 0.000221937 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[302,1] = 0.0273 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[302,2] = 0.993484 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[302,3] = -79.2201 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[302,4] = 0.000221895 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[303,1] = 0.0274 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[303,2] = 0.996996 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[303,3] = -79.4482 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[303,4] = 0.000221854 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[304,1] = 0.0275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[304,2] = 1.00082 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[304,3] = -79.6845 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[304,4] = 0.000221813 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[305,1] = 0.0276 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[305,2] = 1.00486 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[305,3] = -79.8903 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[305,4] = 0.000221773 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[306,1] = 0.0277 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[306,2] = 1.00883 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[306,3] = -80.0919 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[306,4] = 0.000221735 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[307,1] = 0.0278 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[307,2] = 1.01272 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[307,3] = -80.2892 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[307,4] = 0.000221699 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[308,1] = 0.0279 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[308,2] = 1.01653 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[308,3] = -80.4824 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[308,4] = 0.000221665 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[309,1] = 0.028 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[309,2] = 1.02026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[309,3] = -80.6717 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[309,4] = 0.000221631 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[310,1] = 0.0281 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[310,2] = 1.02392 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[310,3] = -80.8572 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[310,4] = 0.000221597 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[311,1] = 0.0282 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[311,2] = 1.0275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[311,3] = -81.0389 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[311,4] = 0.000221565 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[312,1] = 0.0283 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[312,2] = 1.03101 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[312,3] = -81.2168 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[312,4] = 0.000221533 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[313,1] = 0.0284 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[313,2] = 1.03445 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[313,3] = -81.3911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[313,4] = 0.000221501 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[314,1] = 0.0285 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[314,2] = 1.03781 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[314,3] = -81.5619 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[314,4] = 0.000221471 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[315,1] = 0.0286 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[315,2] = 1.04111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[315,3] = -81.7292 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[315,4] = 0.000221441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[316,1] = 0.0287 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[316,2] = 1.04434 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[316,3] = -81.893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[316,4] = 0.000221412 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[317,1] = 0.0288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[317,2] = 1.04751 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[317,3] = -82.0535 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[317,4] = 0.000221383 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[318,1] = 0.0289 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[318,2] = 1.05061 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[318,3] = -82.2107 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[318,4] = 0.000221355 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[319,1] = 0.029 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[319,2] = 1.05365 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[319,3] = -82.3647 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[319,4] = 0.000221328 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[320,1] = 0.0291 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[320,2] = 1.05663 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[320,3] = -82.5155 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[320,4] = 0.000221301 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[321,1] = 0.0292 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[321,2] = 1.05954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[321,3] = -82.6633 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[321,4] = 0.000221275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[322,1] = 0.0293 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[322,2] = 1.0624 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[322,3] = -82.808 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[322,4] = 0.000221249 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[323,1] = 0.0294 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[323,2] = 1.0652 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[323,3] = -82.9498 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[323,4] = 0.000221224 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[324,1] = 0.0295 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[324,2] = 1.06794 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[324,3] = -83.0887 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[324,4] = 0.000221199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[325,1] = 0.0296 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[325,2] = 1.07063 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[325,3] = -83.2248 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[325,4] = 0.000221175 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[326,1] = 0.0297 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[326,2] = 1.07326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[326,3] = -83.3581 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[326,4] = 0.000221151 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[327,1] = 0.0298 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[327,2] = 1.07584 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[327,3] = -83.4886 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[327,4] = 0.000221128 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[328,1] = 0.0299 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[328,2] = 1.07836 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[328,3] = -83.6165 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[328,4] = 0.000221106 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[329,1] = 0.03 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[329,2] = 1.08088 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[329,3] = -83.7439 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[329,4] = 0.000221083 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[330,1] = 0.0301 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[330,2] = 1.08376 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[330,3] = -83.8895 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[330,4] = 0.000221061 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[331,1] = 0.0302 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[331,2] = 1.08657 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[331,3] = -84.0316 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[331,4] = 0.000221037 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[332,1] = 0.0303 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[332,2] = 1.08931 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[332,3] = -84.1703 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[332,4] = 0.000221012 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[333,1] = 0.0304 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[333,2] = 1.09198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[333,3] = -84.3057 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[333,4] = 0.000220988 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[334,1] = 0.0305 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[334,2] = 1.09459 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[334,3] = -84.4378 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[334,4] = 0.000220965 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[335,1] = 0.0306 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[335,2] = 1.09714 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[335,3] = -84.5667 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[335,4] = 0.000220942 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[336,1] = 0.0307 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[336,2] = 1.09962 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[336,3] = -84.6924 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[336,4] = 0.00022092 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[337,1] = 0.0308 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[337,2] = 1.10205 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[337,3] = -84.7987 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[337,4] = 0.000220899 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[338,1] = 0.0309 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[338,2] = 1.10442 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[338,3] = -84.8994 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[338,4] = 0.00022088 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[339,1] = 0.031 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[339,2] = 1.10673 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[339,3] = -84.9975 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[339,4] = 0.000220862 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[340,1] = 0.0311 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[340,2] = 1.10898 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[340,3] = -85.0932 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[340,4] = 0.000220846 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[341,1] = 0.0312 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[341,2] = 1.11119 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[341,3] = -85.1866 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[341,4] = 0.000220829 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[342,1] = 0.0313 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[342,2] = 1.11333 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[342,3] = -85.2778 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[342,4] = 0.000220813 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[343,1] = 0.0314 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[343,2] = 1.11543 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[343,3] = -85.3668 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[343,4] = 0.000220798 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[344,1] = 0.0315 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[344,2] = 1.11748 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[344,3] = -85.4536 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[344,4] = 0.000220782 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[345,1] = 0.0316 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[345,2] = 1.11947 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[345,3] = -85.5382 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[345,4] = 0.000220768 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[346,1] = 0.0317 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[346,2] = 1.12142 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[346,3] = -85.6209 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[346,4] = 0.000220753 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[347,1] = 0.0318 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[347,2] = 1.12332 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[347,3] = -85.7015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[347,4] = 0.000220739 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[348,1] = 0.0319 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[348,2] = 1.12518 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[348,3] = -85.7802 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[348,4] = 0.000220725 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[349,1] = 0.032 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[349,2] = 1.12699 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[349,3] = -85.857 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[349,4] = 0.000220712 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[350,1] = 0.0321 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[350,2] = 1.12875 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[350,3] = -85.9319 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[350,4] = 0.000220699 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[351,1] = 0.0322 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[351,2] = 1.13048 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[351,3] = -86.005 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[351,4] = 0.000220686 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[352,1] = 0.0323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[352,2] = 1.13216 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[352,3] = -86.0763 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[352,4] = 0.000220673 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[353,1] = 0.0324 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[353,2] = 1.1338 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[353,3] = -86.1459 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[353,4] = 0.000220661 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[354,1] = 0.0325 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[354,2] = 1.1354 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[354,3] = -86.2138 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[354,4] = 0.000220649 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[355,1] = 0.0326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[355,2] = 1.13696 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[355,3] = -86.28 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[355,4] = 0.000220638 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[356,1] = 0.0327 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[356,2] = 1.13849 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[356,3] = -86.3447 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[356,4] = 0.000220627 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[357,1] = 0.0328 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[357,2] = 1.13997 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[357,3] = -86.4078 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[357,4] = 0.000220616 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[358,1] = 0.0329 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[358,2] = 1.14143 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[358,3] = -86.4693 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[358,4] = 0.000220605 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[359,1] = 0.033 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[359,2] = 1.14284 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[359,3] = -86.5294 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[359,4] = 0.000220594 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[360,1] = 0.0331 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[360,2] = 1.14423 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[360,3] = -86.588 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[360,4] = 0.000220584 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[361,1] = 0.0332 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[361,2] = 1.14558 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[361,3] = -86.6452 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[361,4] = 0.000220574 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[362,1] = 0.0333 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[362,2] = 1.14689 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[362,3] = -86.701 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[362,4] = 0.000220564 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[363,1] = 0.0334 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[363,2] = 1.14818 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[363,3] = -86.7555 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[363,4] = 0.000220555 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[364,1] = 0.0335 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[364,2] = 1.14943 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[364,3] = -86.8086 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[364,4] = 0.000220546 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[365,1] = 0.0336 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[365,2] = 1.15065 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[365,3] = -86.8605 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[365,4] = 0.000220537 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[366,1] = 0.0337 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[366,2] = 1.15185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[366,3] = -86.9111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[366,4] = 0.000220528 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[367,1] = 0.0338 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[367,2] = 1.15301 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[367,3] = -86.9605 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[367,4] = 0.000220519 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[368,1] = 0.0339 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[368,2] = 1.15415 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[368,3] = -87.0086 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[368,4] = 0.000220511 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[369,1] = 0.034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[369,2] = 1.15526 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[369,3] = -87.0556 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[369,4] = 0.000220503 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[370,1] = 0.0341 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[370,2] = 1.15634 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[370,3] = -87.1015 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[370,4] = 0.000220495 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[371,1] = 0.0342 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[371,2] = 1.1574 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[371,3] = -87.1463 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[371,4] = 0.000220487 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[372,1] = 0.0343 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[372,2] = 1.15843 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[372,3] = -87.19 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[372,4] = 0.000220479 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[373,1] = 0.0344 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[373,2] = 1.15943 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[373,3] = -87.2326 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[373,4] = 0.000220472 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[374,1] = 0.0345 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[374,2] = 1.16041 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[374,3] = -87.2742 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[374,4] = 0.000220465 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[375,1] = 0.0346 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[375,2] = 1.16137 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[375,3] = -87.3148 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[375,4] = 0.000220458 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[376,1] = 0.0347 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[376,2] = 1.16231 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[376,3] = -87.3544 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[376,4] = 0.000220451 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[377,1] = 0.0348 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[377,2] = 1.16322 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[377,3] = -87.3931 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[377,4] = 0.000220444 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[378,1] = 0.0349 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[378,2] = 1.16411 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[378,3] = -87.4308 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[378,4] = 0.000220438 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[379,1] = 0.035 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[379,2] = 1.16498 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[379,3] = -87.4676 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[379,4] = 0.000220431 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[380,1] = 0.0351 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[380,2] = 1.16582 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[380,3] = -87.5035 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[380,4] = 0.000220425 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[381,1] = 0.0352 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[381,2] = 1.16665 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[381,3] = -87.5385 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[381,4] = 0.000220419 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[382,1] = 0.0353 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[382,2] = 1.16746 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[382,3] = -87.5727 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[382,4] = 0.000220413 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[383,1] = 0.0354 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[383,2] = 1.16824 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[383,3] = -87.6061 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[383,4] = 0.000220407 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[384,1] = 0.0355 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[384,2] = 1.16901 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[384,3] = -87.6386 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[384,4] = 0.000220402 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[385,1] = 0.0356 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[385,2] = 1.16976 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[385,3] = -87.6704 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[385,4] = 0.000220396 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[386,1] = 0.0357 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[386,2] = 1.17049 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[386,3] = -87.7014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[386,4] = 0.000220391 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[387,1] = 0.0358 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[387,2] = 1.17121 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[387,3] = -87.7316 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[387,4] = 0.000220386 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[388,1] = 0.0359 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[388,2] = 1.1719 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[388,3] = -87.7612 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[388,4] = 0.00022038 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[389,1] = 0.036 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[389,2] = 1.17258 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[389,3] = -87.79 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[389,4] = 0.000220375 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[390,1] = 0.0361 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[390,2] = 1.17325 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[390,3] = -87.8181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[390,4] = 0.000220371 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[391,1] = 0.0362 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[391,2] = 1.1739 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[391,3] = -87.8455 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[391,4] = 0.000220366 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[392,1] = 0.0363 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[392,2] = 1.17453 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[392,3] = -87.8722 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[392,4] = 0.000220361 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[393,1] = 0.0364 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[393,2] = 1.17514 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[393,3] = -87.8984 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[393,4] = 0.000220357 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[394,1] = 0.0365 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[394,2] = 1.17574 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[394,3] = -87.9238 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[394,4] = 0.000220352 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[395,1] = 0.0366 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[395,2] = 1.17633 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[395,3] = -87.9487 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[395,4] = 0.000220348 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[396,1] = 0.0367 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[396,2] = 1.1769 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[396,3] = -87.9729 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[396,4] = 0.000220344 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[397,1] = 0.0368 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[397,2] = 1.17746 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[397,3] = -87.9966 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[397,4] = 0.00022034 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[398,1] = 0.0369 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[398,2] = 1.17801 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[398,3] = -88.0197 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[398,4] = 0.000220336 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[399,1] = 0.037 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[399,2] = 1.17858 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[399,3] = -88.0441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[399,4] = 0.000220332 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[400,1] = 0.0371 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[400,2] = 1.17922 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[400,3] = -88.0712 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[400,4] = 0.000220328 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[401,1] = 0.0372 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[401,2] = 1.17985 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[401,3] = -88.0975 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[401,4] = 0.000220323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[402,1] = 0.0373 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[402,2] = 1.18045 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[402,3] = -88.123 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[402,4] = 0.000220319 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[403,1] = 0.0374 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[403,2] = 1.18103 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[403,3] = -88.1477 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[403,4] = 0.000220314 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[404,1] = 0.0375 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[404,2] = 1.1816 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[404,3] = -88.1717 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[404,4] = 0.00022031 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[405,1] = 0.0376 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[405,2] = 1.18215 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[405,3] = -88.195 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[405,4] = 0.000220306 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[406,1] = 0.0377 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[406,2] = 1.18268 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[406,3] = -88.2176 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[406,4] = 0.000220302 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[407,1] = 0.0378 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[407,2] = 1.1832 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[407,3] = -88.2395 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[407,4] = 0.000220299 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[408,1] = 0.0379 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[408,2] = 1.1837 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[408,3] = -88.2607 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[408,4] = 0.000220295 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[409,1] = 0.038 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[409,2] = 1.18419 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[409,3] = -88.2814 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[409,4] = 0.000220291 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[410,1] = 0.0381 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[410,2] = 1.18466 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[410,3] = -88.3014 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[410,4] = 0.000220288 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[411,1] = 0.0382 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[411,2] = 1.18512 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[411,3] = -88.3208 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[411,4] = 0.000220284 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[412,1] = 0.0383 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[412,2] = 1.18556 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[412,3] = -88.3396 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[412,4] = 0.000220281 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[413,1] = 0.0384 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[413,2] = 1.18599 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[413,3] = -88.3578 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[413,4] = 0.000220278 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[414,1] = 0.0385 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[414,2] = 1.18641 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[414,3] = -88.3756 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[414,4] = 0.000220275 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[415,1] = 0.0386 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[415,2] = 1.18682 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[415,3] = -88.3928 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[415,4] = 0.000220272 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[416,1] = 0.0387 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[416,2] = 1.18721 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[416,3] = -88.4094 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[416,4] = 0.000220269 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[417,1] = 0.0388 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[417,2] = 1.18759 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[417,3] = -88.4256 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[417,4] = 0.000220266 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[418,1] = 0.0389 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[418,2] = 1.18796 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[418,3] = -88.4413 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[418,4] = 0.000220264 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[419,1] = 0.039 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[419,2] = 1.18832 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[419,3] = -88.4565 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[419,4] = 0.000220261 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[420,1] = 0.0391 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[420,2] = 1.18867 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[420,3] = -88.4713 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[420,4] = 0.000220258 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[421,1] = 0.0392 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[421,2] = 1.18901 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[421,3] = -88.4856 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[421,4] = 0.000220256 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[422,1] = 0.0393 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[422,2] = 1.18934 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[422,3] = -88.4995 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[422,4] = 0.000220253 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[423,1] = 0.0394 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[423,2] = 1.18965 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[423,3] = -88.513 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[423,4] = 0.000220251 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[424,1] = 0.0395 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[424,2] = 1.18996 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[424,3] = -88.5261 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[424,4] = 0.000220249 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[425,1] = 0.0396 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[425,2] = 1.19026 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[425,3] = -88.5388 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[425,4] = 0.000220247 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[426,1] = 0.0397 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[426,2] = 1.19055 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[426,3] = -88.5511 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[426,4] = 0.000220245 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[427,1] = 0.0398 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[427,2] = 1.19084 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[427,3] = -88.563 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[427,4] = 0.000220242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[428,1] = 0.0399 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[428,2] = 1.19111 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[428,3] = -88.5746 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[428,4] = 0.00022024 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[429,1] = 0.04 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[429,2] = 1.19137 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[429,3] = -88.5859 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[429,4] = 0.000220239 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[430,1] = 0.0401 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[430,2] = 1.19163 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[430,3] = -88.5968 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[430,4] = 0.000220237 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[431,1] = 0.0402 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[431,2] = 1.19188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[431,3] = -88.6074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[431,4] = 0.000220235 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[432,1] = 0.0403 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[432,2] = 1.19212 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[432,3] = -88.6176 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[432,4] = 0.000220233 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[433,1] = 0.0404 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[433,2] = 1.19236 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[433,3] = -88.6276 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[433,4] = 0.000220231 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[434,1] = 0.0405 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[434,2] = 1.19259 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[434,3] = -88.6373 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[434,4] = 0.00022023 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[435,1] = 0.0406 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[435,2] = 1.19281 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[435,3] = -88.6466 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[435,4] = 0.000220228 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[436,1] = 0.0407 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[436,2] = 1.19302 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[436,3] = -88.6557 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[436,4] = 0.000220226 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[437,1] = 0.0408 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[437,2] = 1.19323 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[437,3] = -88.6646 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[437,4] = 0.000220225 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[438,1] = 0.0409 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[438,2] = 1.19343 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[438,3] = -88.6731 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[438,4] = 0.000220223 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[439,1] = 0.041 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[439,2] = 1.19363 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[439,3] = -88.6814 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[439,4] = 0.000220222 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[440,1] = 0.0411 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[440,2] = 1.19382 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[440,3] = -88.6895 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[440,4] = 0.000220221 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[441,1] = 0.0412 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[441,2] = 1.19401 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[441,3] = -88.6973 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[441,4] = 0.000220219 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[442,1] = 0.0413 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[442,2] = 1.19418 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[442,3] = -88.7049 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[442,4] = 0.000220218 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[443,1] = 0.0414 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[443,2] = 1.19436 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[443,3] = -88.7122 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[443,4] = 0.000220217 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[444,1] = 0.0415 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[444,2] = 1.19453 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[444,3] = -88.7194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[444,4] = 0.000220215 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[445,1] = 0.0416 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[445,2] = 1.19469 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[445,3] = -88.7263 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[445,4] = 0.000220214 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[446,1] = 0.0417 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[446,2] = 1.19485 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[446,3] = -88.733 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[446,4] = 0.000220213 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[447,1] = 0.0418 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[447,2] = 1.195 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[447,3] = -88.7395 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[447,4] = 0.000220212 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[448,1] = 0.0419 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[448,2] = 1.19515 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[448,3] = -88.7459 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[448,4] = 0.000220211 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[449,1] = 0.042 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[449,2] = 1.1953 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[449,3] = -88.752 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[449,4] = 0.00022021 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[450,1] = 0.0421 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[450,2] = 1.19544 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[450,3] = -88.7579 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[450,4] = 0.000220209 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[451,1] = 0.0422 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[451,2] = 1.19557 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[451,3] = -88.7637 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[451,4] = 0.000220208 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[452,1] = 0.0423 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[452,2] = 1.19571 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[452,3] = -88.7693 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[452,4] = 0.000220207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[453,1] = 0.0424 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[453,2] = 1.19583 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[453,3] = -88.7747 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[453,4] = 0.000220206 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[454,1] = 0.0425 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[454,2] = 1.19596 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[454,3] = -88.78 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[454,4] = 0.000220205 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[455,1] = 0.0426 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[455,2] = 1.19608 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[455,3] = -88.7851 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[455,4] = 0.000220204 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[456,1] = 0.0427 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[456,2] = 1.1962 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[456,3] = -88.7901 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[456,4] = 0.000220203 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[457,1] = 0.0428 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[457,2] = 1.19631 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[457,3] = -88.7949 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[457,4] = 0.000220202 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[458,1] = 0.0429 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[458,2] = 1.19642 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[458,3] = -88.7996 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[458,4] = 0.000220202 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[459,1] = 0.043 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[459,2] = 1.19653 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[459,3] = -88.8041 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[459,4] = 0.000220201 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[460,1] = 0.0431 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[460,2] = 1.19663 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[460,3] = -88.8085 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[460,4] = 0.0002202 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[461,1] = 0.0432 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[461,2] = 1.19673 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[461,3] = -88.8127 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[461,4] = 0.000220199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[462,1] = 0.0433 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[462,2] = 1.19683 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[462,3] = -88.8169 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[462,4] = 0.000220199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[463,1] = 0.0434 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[463,2] = 1.19692 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[463,3] = -88.8209 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[463,4] = 0.000220198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[464,1] = 0.0435 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[464,2] = 1.19702 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[464,3] = -88.8248 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[464,4] = 0.000220197 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[465,1] = 0.0436 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[465,2] = 1.1971 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[465,3] = -88.8286 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[465,4] = 0.000220197 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[466,1] = 0.0437 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[466,2] = 1.19719 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[466,3] = -88.8322 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[466,4] = 0.000220196 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[467,1] = 0.0438 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[467,2] = 1.19728 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[467,3] = -88.8358 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[467,4] = 0.000220195 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[468,1] = 0.0439 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[468,2] = 1.19736 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[468,3] = -88.8392 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[468,4] = 0.000220195 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[469,1] = 0.044 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[469,2] = 1.19744 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[469,3] = -88.8426 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[469,4] = 0.000220194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[470,1] = 0.0441 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[470,2] = 1.19751 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[470,3] = -88.8458 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[470,4] = 0.000220194 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[471,1] = 0.0442 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[471,2] = 1.19759 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[471,3] = -88.8489 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[471,4] = 0.000220193 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[472,1] = 0.0443 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[472,2] = 1.19766 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[472,3] = -88.852 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[472,4] = 0.000220192 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[473,1] = 0.0444 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[473,2] = 1.19773 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[473,3] = -88.855 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[473,4] = 0.000220192 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[474,1] = 0.0445 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[474,2] = 1.1978 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[474,3] = -88.8578 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[474,4] = 0.000220191 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[475,1] = 0.0446 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[475,2] = 1.19786 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[475,3] = -88.8606 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[475,4] = 0.000220191 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[476,1] = 0.0447 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[476,2] = 1.19793 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[476,3] = -88.8633 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[476,4] = 0.000220191 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[477,1] = 0.0448 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[477,2] = 1.19799 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[477,3] = -88.8659 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[477,4] = 0.00022019 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[478,1] = 0.0449 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[478,2] = 1.19805 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[478,3] = -88.8685 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[478,4] = 0.00022019 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[479,1] = 0.045 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[479,2] = 1.19811 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[479,3] = -88.871 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[479,4] = 0.000220189 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[480,1] = 0.0451 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[480,2] = 1.19816 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[480,3] = -88.8734 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[480,4] = 0.000220189 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[481,1] = 0.0452 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[481,2] = 1.19822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[481,3] = -88.8757 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[481,4] = 0.000220188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[482,1] = 0.0453 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[482,2] = 1.19827 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[482,3] = -88.8779 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[482,4] = 0.000220188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[483,1] = 0.0454 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[483,2] = 1.19832 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[483,3] = -88.8801 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[483,4] = 0.000220188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[484,1] = 0.0455 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[484,2] = 1.19837 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[484,3] = -88.8822 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[484,4] = 0.000220187 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[485,1] = 0.0456 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[485,2] = 1.19842 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[485,3] = -88.8843 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[485,4] = 0.000220187 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[486,1] = 0.0457 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[486,2] = 1.19847 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[486,3] = -88.8863 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[486,4] = 0.000220187 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[487,1] = 0.0458 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[487,2] = 1.19851 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[487,3] = -88.8882 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[487,4] = 0.000220186 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[488,1] = 0.0459 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[488,2] = 1.19856 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[488,3] = -88.8901 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[488,4] = 0.000220186 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[489,1] = 0.046 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[489,2] = 1.1986 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[489,3] = -88.8919 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[489,4] = 0.000220186 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[490,1] = 0.0461 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[490,2] = 1.19864 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[490,3] = -88.8937 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[490,4] = 0.000220185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[491,1] = 0.0462 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[491,2] = 1.19868 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[491,3] = -88.8954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[491,4] = 0.000220185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[492,1] = 0.0463 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[492,2] = 1.19872 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[492,3] = -88.897 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[492,4] = 0.000220185 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[493,1] = 0.0464 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[493,2] = 1.19876 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[493,3] = -88.8987 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[493,4] = 0.000220184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[494,1] = 0.0465 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[494,2] = 1.1988 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[494,3] = -88.9002 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[494,4] = 0.000220184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[495,1] = 0.0466 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[495,2] = 1.19883 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[495,3] = -88.9017 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[495,4] = 0.000220184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[496,1] = 0.0467 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[496,2] = 1.19887 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[496,3] = -88.9032 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[496,4] = 0.000220184 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[497,1] = 0.0468 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[497,2] = 1.1989 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[497,3] = -88.9046 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[497,4] = 0.000220183 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[498,1] = 0.0469 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[498,2] = 1.19893 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[498,3] = -88.906 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[498,4] = 0.000220183 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[499,1] = 0.047 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[499,2] = 1.19897 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[499,3] = -88.9074 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[499,4] = 0.000220183 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[500,1] = 0.0471 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[500,2] = 1.199 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[500,3] = -88.9087 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[500,4] = 0.000220183 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[501,1] = 0.0472 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[501,2] = 1.19903 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[501,3] = -88.91 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[501,4] = 0.000220182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[502,1] = 0.0473 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[502,2] = 1.19906 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[502,3] = -88.9112 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[502,4] = 0.000220182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[503,1] = 0.0474 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[503,2] = 1.19908 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[503,3] = -88.9124 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[503,4] = 0.000220182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[504,1] = 0.0475 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[504,2] = 1.19911 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[504,3] = -88.9135 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[504,4] = 0.000220182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[505,1] = 0.0476 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[505,2] = 1.19914 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[505,3] = -88.9146 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[505,4] = 0.000220182 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[506,1] = 0.0477 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[506,2] = 1.19916 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[506,3] = -88.9157 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[506,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[507,1] = 0.0478 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[507,2] = 1.19919 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[507,3] = -88.9168 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[507,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[508,1] = 0.0479 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[508,2] = 1.19921 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[508,3] = -88.9178 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[508,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[509,1] = 0.048 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[509,2] = 1.19924 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[509,3] = -88.9188 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[509,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[510,1] = 0.0481 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[510,2] = 1.19926 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[510,3] = -88.9198 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[510,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[511,1] = 0.0482 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[511,2] = 1.19928 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[511,3] = -88.9207 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[511,4] = 0.000220181 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[512,1] = 0.0483 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[512,2] = 1.1993 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[512,3] = -88.9216 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[512,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[513,1] = 0.0484 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[513,2] = 1.19932 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[513,3] = -88.9225 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[513,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[514,1] = 0.0485 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[514,2] = 1.19934 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[514,3] = -88.9233 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[514,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[515,1] = 0.0486 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[515,2] = 1.19936 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[515,3] = -88.9242 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[515,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[516,1] = 0.0487 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[516,2] = 1.19938 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[516,3] = -88.925 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[516,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[517,1] = 0.0488 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[517,2] = 1.1994 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[517,3] = -88.9258 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[517,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[518,1] = 0.0489 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[518,2] = 1.19942 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[518,3] = -88.9265 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[518,4] = 0.00022018 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[519,1] = 0.049 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[519,2] = 1.19944 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[519,3] = -88.9273 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[519,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[520,1] = 0.0491 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[520,2] = 1.19945 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[520,3] = -88.928 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[520,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[521,1] = 0.0492 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[521,2] = 1.19947 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[521,3] = -88.9287 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[521,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[522,1] = 0.0493 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[522,2] = 1.19948 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[522,3] = -88.9293 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[522,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[523,1] = 0.0494 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[523,2] = 1.1995 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[523,3] = -88.93 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[523,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[524,1] = 0.0495 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[524,2] = 1.19951 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[524,3] = -88.9306 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[524,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[525,1] = 0.0496 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[525,2] = 1.19953 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[525,3] = -88.9312 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[525,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[526,1] = 0.0497 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[526,2] = 1.19954 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[526,3] = -88.9318 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[526,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[527,1] = 0.0498 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[527,2] = 1.19956 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[527,3] = -88.9324 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[527,4] = 0.000220179 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[528,1] = 0.0499 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[528,2] = 1.19957 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[528,3] = -88.933 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[528,4] = 0.000220178 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[529,1] = 0.05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[529,2] = 1.19958 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[529,3] = -88.9335 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[529,4] = 0.000220178 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[530,1] = 0.05 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[530,2] = 1.19958 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[530,3] = -88.9335 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter Real comparisonWithFEA.table[530,4] = 0.000220178 \"Table matrix (time = first column; e.g. table=[0,2])\";
//   parameter String comparisonWithFEA.tableName = \"NoName\" \"Table name on file or in function usertab (see docu)\";
//   parameter String comparisonWithFEA.fileName = \"NoName\" \"File where matrix is stored\";
//   parameter enumeration(LinearSegments, ContinuousDerivative) comparisonWithFEA.smoothness = Modelica.Blocks.Types.Smoothness.LinearSegments \"Smoothness of table interpolation\";
//   parameter enumeration(HoldLastPoint, LastTwoPoints, Periodic) comparisonWithFEA.extrapolation = Modelica.Blocks.Types.Extrapolation.HoldLastPoint \"Extrapolation of data outside the definition range\";
//   parameter Real comparisonWithFEA.offset[1] = 0.0 \"Offsets of output signals\";
//   parameter Real comparisonWithFEA.startTime(quantity = \"Time\", unit = \"s\") = 0.0 \"Output = offset for time < startTime\";
//   final parameter Real comparisonWithFEA.t_min(fixed = false) \"Minimum abscissa value defined in table\";
//   final parameter Real comparisonWithFEA.t_max(fixed = false) \"Maximum abscissa value defined in table\";
//   protected Integer comparisonWithFEA.tableID;
//   parameter Integer comparisonWithFEA.columns[1] = 2 \"Columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[2] = 3 \"Columns of table to be interpolated\";
//   parameter Integer comparisonWithFEA.columns[3] = 4 \"Columns of table to be interpolated\";
//   protected final parameter Real comparisonWithFEA.p_offset[1] = comparisonWithFEA.offset[1];
//   protected final parameter Real comparisonWithFEA.p_offset[2] = comparisonWithFEA.offset[1];
//   protected final parameter Real comparisonWithFEA.p_offset[3] = comparisonWithFEA.offset[1];
// initial equation
//   comparisonWithFEA.t_min = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmin(comparisonWithFEA.tableID);
//   comparisonWithFEA.t_max = Modelica.Blocks.Sources.CombiTimeTable.tableTimeTmax(comparisonWithFEA.tableID);
// equation
//   advancedGround.p.v = 0.0;
//   advancedSource.signalSource.y = advancedSource.signalSource.offset + (if time < advancedSource.signalSource.startTime then 0.0 else advancedSource.signalSource.height);
//   advancedSource.v = advancedSource.signalSource.y;
//   advancedSource.v = advancedSource.p.v - advancedSource.n.v;
//   0.0 = advancedSource.p.i + advancedSource.n.i;
//   advancedSource.i = advancedSource.p.i;
//   advancedSolenoid.ground.port.V_m = 0.0;
//   advancedSolenoid.coil1.v = advancedSolenoid.coil1.p.v - advancedSolenoid.coil1.n.v;
//   0.0 = advancedSolenoid.coil1.p.i + advancedSolenoid.coil1.n.i;
//   advancedSolenoid.coil1.i = advancedSolenoid.coil1.p.i;
//   advancedSolenoid.coil1.V_m = advancedSolenoid.coil1.port_p.V_m - advancedSolenoid.coil1.port_n.V_m;
//   0.0 = advancedSolenoid.coil1.port_p.Phi + advancedSolenoid.coil1.port_n.Phi;
//   advancedSolenoid.coil1.Phi = advancedSolenoid.coil1.port_p.Phi;
//   advancedSolenoid.coil1.V_m = advancedSolenoid.coil1.i * advancedSolenoid.coil1.N;
//   advancedSolenoid.coil1.N * der(advancedSolenoid.coil1.Phi) = -advancedSolenoid.coil1.v;
//   advancedSolenoid.coil1.Psi = advancedSolenoid.coil1.N * advancedSolenoid.coil1.Phi;
//   advancedSolenoid.coil1.L_stat = if noEvent(abs(advancedSolenoid.coil1.i) > advancedSolenoid.coil1.eps) then abs(advancedSolenoid.coil1.Psi / advancedSolenoid.coil1.i) else abs(advancedSolenoid.coil1.Psi / advancedSolenoid.coil1.eps);
//   assert(1.0 + advancedSolenoid.r_1.alpha * (advancedSolenoid.r_1.T_heatPort - advancedSolenoid.r_1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_1.R_actual = advancedSolenoid.r_1.R * (1.0 + advancedSolenoid.r_1.alpha * (advancedSolenoid.r_1.T_heatPort - advancedSolenoid.r_1.T_ref));
//   advancedSolenoid.r_1.v = advancedSolenoid.r_1.R_actual * advancedSolenoid.r_1.i;
//   advancedSolenoid.r_1.LossPower = advancedSolenoid.r_1.v * advancedSolenoid.r_1.i;
//   advancedSolenoid.r_1.i = advancedSolenoid.r_1.p.i;
//   0.0 = advancedSolenoid.r_1.p.i + advancedSolenoid.r_1.n.i;
//   advancedSolenoid.r_1.v = advancedSolenoid.r_1.p.v - advancedSolenoid.r_1.n.v;
//   advancedSolenoid.r_1.T_heatPort = advancedSolenoid.r_1.T;
//   advancedSolenoid.g_mFeYokeSide1.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeSide1.r_o ^ 2.0 - advancedSolenoid.g_mFeYokeSide1.r_i ^ 2.0);
//   advancedSolenoid.g_mFeYokeSide1.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeYokeSide1.mu_r * advancedSolenoid.g_mFeYokeSide1.A)) / advancedSolenoid.g_mFeYokeSide1.l;
//   advancedSolenoid.g_mFeYokeSide1.H = advancedSolenoid.g_mFeYokeSide1.B / (advancedSolenoid.g_mFeYokeSide1.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeSide1.B = advancedSolenoid.g_mFeYokeSide1.Phi / advancedSolenoid.g_mFeYokeSide1.A;
//   advancedSolenoid.g_mFeYokeSide1.V_m = advancedSolenoid.g_mFeYokeSide1.Phi * advancedSolenoid.g_mFeYokeSide1.R_m;
//   advancedSolenoid.g_mFeYokeSide1.R_m = 1.0 / advancedSolenoid.g_mFeYokeSide1.G_m;
//   advancedSolenoid.g_mFeYokeSide1.mu_r = if advancedSolenoid.g_mFeYokeSide1.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeSide1.B,advancedSolenoid.g_mFeYokeSide1.material.mu_i,advancedSolenoid.g_mFeYokeSide1.material.B_myMax,advancedSolenoid.g_mFeYokeSide1.material.c_a,advancedSolenoid.g_mFeYokeSide1.material.c_b,advancedSolenoid.g_mFeYokeSide1.material.n) else advancedSolenoid.g_mFeYokeSide1.mu_rConst;
//   advancedSolenoid.g_mFeYokeSide1.V_m = advancedSolenoid.g_mFeYokeSide1.port_p.V_m - advancedSolenoid.g_mFeYokeSide1.port_n.V_m;
//   advancedSolenoid.g_mFeYokeSide1.Phi = advancedSolenoid.g_mFeYokeSide1.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeSide1.port_p.Phi + advancedSolenoid.g_mFeYokeSide1.port_n.Phi;
//   advancedSolenoid.g_mFeArm.A = 3.14159265358979 * (advancedSolenoid.g_mFeArm.r_o ^ 2.0 - advancedSolenoid.g_mFeArm.r_i ^ 2.0);
//   advancedSolenoid.g_mFeArm.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeArm.mu_r * advancedSolenoid.g_mFeArm.A)) / advancedSolenoid.g_mFeArm.l;
//   advancedSolenoid.g_mFeArm.H = advancedSolenoid.g_mFeArm.B / (advancedSolenoid.g_mFeArm.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeArm.B = advancedSolenoid.g_mFeArm.Phi / advancedSolenoid.g_mFeArm.A;
//   advancedSolenoid.g_mFeArm.V_m = advancedSolenoid.g_mFeArm.Phi * advancedSolenoid.g_mFeArm.R_m;
//   advancedSolenoid.g_mFeArm.R_m = 1.0 / advancedSolenoid.g_mFeArm.G_m;
//   advancedSolenoid.g_mFeArm.mu_r = if advancedSolenoid.g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeArm.B,advancedSolenoid.g_mFeArm.material.mu_i,advancedSolenoid.g_mFeArm.material.B_myMax,advancedSolenoid.g_mFeArm.material.c_a,advancedSolenoid.g_mFeArm.material.c_b,advancedSolenoid.g_mFeArm.material.n) else advancedSolenoid.g_mFeArm.mu_rConst;
//   advancedSolenoid.g_mFeArm.V_m = advancedSolenoid.g_mFeArm.port_p.V_m - advancedSolenoid.g_mFeArm.port_n.V_m;
//   advancedSolenoid.g_mFeArm.Phi = advancedSolenoid.g_mFeArm.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeArm.port_p.Phi + advancedSolenoid.g_mFeArm.port_n.Phi;
//   advancedSolenoid.g_mAirWork.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mAirWork.mu_r * advancedSolenoid.g_mAirWork.A)) / advancedSolenoid.g_mAirWork.l;
//   advancedSolenoid.g_mAirWork.dGmBydx = -1.25663706143592e-06 * (advancedSolenoid.g_mAirWork.mu_r * (advancedSolenoid.g_mAirWork.A * (advancedSolenoid.g_mAirWork.l ^ -2.0 * Real(advancedSolenoid.g_mAirWork.dlBydx))));
//   advancedSolenoid.g_mAirWork.B = advancedSolenoid.g_mAirWork.Phi / advancedSolenoid.g_mAirWork.A;
//   advancedSolenoid.g_mAirWork.flange.f = -advancedSolenoid.g_mAirWork.F_m;
//   advancedSolenoid.g_mAirWork.s_support = 0.0;
//   advancedSolenoid.g_mAirWork.F_m = 0.5 * (advancedSolenoid.g_mAirWork.V_m ^ 2.0 * advancedSolenoid.g_mAirWork.dGmBydx);
//   advancedSolenoid.g_mAirWork.R_m = 1.0 / advancedSolenoid.g_mAirWork.G_m;
//   advancedSolenoid.g_mAirWork.V_m = advancedSolenoid.g_mAirWork.Phi * advancedSolenoid.g_mAirWork.R_m;
//   advancedSolenoid.g_mAirWork.V_m = advancedSolenoid.g_mAirWork.port_p.V_m - advancedSolenoid.g_mAirWork.port_n.V_m;
//   advancedSolenoid.g_mAirWork.Phi = advancedSolenoid.g_mAirWork.port_p.Phi;
//   0.0 = advancedSolenoid.g_mAirWork.port_p.Phi + advancedSolenoid.g_mAirWork.port_n.Phi;
//   advancedSolenoid.g_mFeYokeBot.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeBot.l * (advancedSolenoid.g_mFeYokeBot.r_o + advancedSolenoid.g_mFeYokeBot.r_i));
//   advancedSolenoid.g_mFeYokeBot.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mFeYokeBot.mu_r * advancedSolenoid.g_mFeYokeBot.l)) / log(advancedSolenoid.g_mFeYokeBot.r_o / advancedSolenoid.g_mFeYokeBot.r_i);
//   advancedSolenoid.g_mFeYokeBot.H = advancedSolenoid.g_mFeYokeBot.B / (advancedSolenoid.g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeBot.B = advancedSolenoid.g_mFeYokeBot.Phi / advancedSolenoid.g_mFeYokeBot.A;
//   advancedSolenoid.g_mFeYokeBot.V_m = advancedSolenoid.g_mFeYokeBot.Phi * advancedSolenoid.g_mFeYokeBot.R_m;
//   advancedSolenoid.g_mFeYokeBot.R_m = 1.0 / advancedSolenoid.g_mFeYokeBot.G_m;
//   advancedSolenoid.g_mFeYokeBot.mu_r = if advancedSolenoid.g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeBot.B,advancedSolenoid.g_mFeYokeBot.material.mu_i,advancedSolenoid.g_mFeYokeBot.material.B_myMax,advancedSolenoid.g_mFeYokeBot.material.c_a,advancedSolenoid.g_mFeYokeBot.material.c_b,advancedSolenoid.g_mFeYokeBot.material.n) else advancedSolenoid.g_mFeYokeBot.mu_rConst;
//   advancedSolenoid.g_mFeYokeBot.V_m = advancedSolenoid.g_mFeYokeBot.port_p.V_m - advancedSolenoid.g_mFeYokeBot.port_n.V_m;
//   advancedSolenoid.g_mFeYokeBot.Phi = advancedSolenoid.g_mFeYokeBot.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeBot.port_p.Phi + advancedSolenoid.g_mFeYokeBot.port_n.Phi;
//   advancedSolenoid.g_mAirPar.A = 3.14159265358979 * (advancedSolenoid.g_mAirPar.l * (advancedSolenoid.g_mAirPar.r_o + advancedSolenoid.g_mAirPar.r_i));
//   advancedSolenoid.g_mAirPar.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mAirPar.mu_r * advancedSolenoid.g_mAirPar.l)) / log(advancedSolenoid.g_mAirPar.r_o / advancedSolenoid.g_mAirPar.r_i);
//   advancedSolenoid.g_mAirPar.H = advancedSolenoid.g_mAirPar.B / (advancedSolenoid.g_mAirPar.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mAirPar.B = advancedSolenoid.g_mAirPar.Phi / advancedSolenoid.g_mAirPar.A;
//   advancedSolenoid.g_mAirPar.V_m = advancedSolenoid.g_mAirPar.Phi * advancedSolenoid.g_mAirPar.R_m;
//   advancedSolenoid.g_mAirPar.R_m = 1.0 / advancedSolenoid.g_mAirPar.G_m;
//   advancedSolenoid.g_mAirPar.mu_r = if advancedSolenoid.g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mAirPar.B,advancedSolenoid.g_mAirPar.material.mu_i,advancedSolenoid.g_mAirPar.material.B_myMax,advancedSolenoid.g_mAirPar.material.c_a,advancedSolenoid.g_mAirPar.material.c_b,advancedSolenoid.g_mAirPar.material.n) else advancedSolenoid.g_mAirPar.mu_rConst;
//   advancedSolenoid.g_mAirPar.V_m = advancedSolenoid.g_mAirPar.port_p.V_m - advancedSolenoid.g_mAirPar.port_n.V_m;
//   advancedSolenoid.g_mAirPar.Phi = advancedSolenoid.g_mAirPar.port_p.Phi;
//   0.0 = advancedSolenoid.g_mAirPar.port_p.Phi + advancedSolenoid.g_mAirPar.port_n.Phi;
//   advancedSolenoid.g_mFePoleBot.A = 3.14159265358979 * (advancedSolenoid.g_mFePoleBot.l * (advancedSolenoid.g_mFePoleBot.r_o + advancedSolenoid.g_mFePoleBot.r_i));
//   advancedSolenoid.g_mFePoleBot.G_m = (7.89568352087149e-06 * (advancedSolenoid.g_mFePoleBot.mu_r * advancedSolenoid.g_mFePoleBot.l)) / log(advancedSolenoid.g_mFePoleBot.r_o / advancedSolenoid.g_mFePoleBot.r_i);
//   advancedSolenoid.g_mFePoleBot.H = advancedSolenoid.g_mFePoleBot.B / (advancedSolenoid.g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFePoleBot.B = advancedSolenoid.g_mFePoleBot.Phi / advancedSolenoid.g_mFePoleBot.A;
//   advancedSolenoid.g_mFePoleBot.V_m = advancedSolenoid.g_mFePoleBot.Phi * advancedSolenoid.g_mFePoleBot.R_m;
//   advancedSolenoid.g_mFePoleBot.R_m = 1.0 / advancedSolenoid.g_mFePoleBot.G_m;
//   advancedSolenoid.g_mFePoleBot.mu_r = if advancedSolenoid.g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFePoleBot.B,advancedSolenoid.g_mFePoleBot.material.mu_i,advancedSolenoid.g_mFePoleBot.material.B_myMax,advancedSolenoid.g_mFePoleBot.material.c_a,advancedSolenoid.g_mFePoleBot.material.c_b,advancedSolenoid.g_mFePoleBot.material.n) else advancedSolenoid.g_mFePoleBot.mu_rConst;
//   advancedSolenoid.g_mFePoleBot.V_m = advancedSolenoid.g_mFePoleBot.port_p.V_m - advancedSolenoid.g_mFePoleBot.port_n.V_m;
//   advancedSolenoid.g_mFePoleBot.Phi = advancedSolenoid.g_mFePoleBot.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFePoleBot.port_p.Phi + advancedSolenoid.g_mFePoleBot.port_n.Phi;
//   advancedSolenoid.g_mFePole.A = 3.14159265358979 * (advancedSolenoid.g_mFePole.r_o ^ 2.0 - advancedSolenoid.g_mFePole.r_i ^ 2.0);
//   advancedSolenoid.g_mFePole.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFePole.mu_r * advancedSolenoid.g_mFePole.A)) / advancedSolenoid.g_mFePole.l;
//   advancedSolenoid.g_mFePole.H = advancedSolenoid.g_mFePole.B / (advancedSolenoid.g_mFePole.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFePole.B = advancedSolenoid.g_mFePole.Phi / advancedSolenoid.g_mFePole.A;
//   advancedSolenoid.g_mFePole.V_m = advancedSolenoid.g_mFePole.Phi * advancedSolenoid.g_mFePole.R_m;
//   advancedSolenoid.g_mFePole.R_m = 1.0 / advancedSolenoid.g_mFePole.G_m;
//   advancedSolenoid.g_mFePole.mu_r = if advancedSolenoid.g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFePole.B,advancedSolenoid.g_mFePole.material.mu_i,advancedSolenoid.g_mFePole.material.B_myMax,advancedSolenoid.g_mFePole.material.c_a,advancedSolenoid.g_mFePole.material.c_b,advancedSolenoid.g_mFePole.material.n) else advancedSolenoid.g_mFePole.mu_rConst;
//   advancedSolenoid.g_mFePole.V_m = advancedSolenoid.g_mFePole.port_p.V_m - advancedSolenoid.g_mFePole.port_n.V_m;
//   advancedSolenoid.g_mFePole.Phi = advancedSolenoid.g_mFePole.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFePole.port_p.Phi + advancedSolenoid.g_mFePole.port_n.Phi;
//   advancedSolenoid.armature.mass.v = der(advancedSolenoid.armature.mass.s);
//   advancedSolenoid.armature.mass.a = der(advancedSolenoid.armature.mass.v);
//   advancedSolenoid.armature.mass.m * advancedSolenoid.armature.mass.a = advancedSolenoid.armature.mass.flange_a.f + advancedSolenoid.armature.mass.flange_b.f;
//   advancedSolenoid.armature.mass.flange_a.s = advancedSolenoid.armature.mass.s + (-advancedSolenoid.armature.mass.L) / 2.0;
//   advancedSolenoid.armature.mass.flange_b.s = advancedSolenoid.armature.mass.s + advancedSolenoid.armature.mass.L / 2.0;
//   advancedSolenoid.armature.limit_xMin.flange.s = advancedSolenoid.armature.limit_xMin.s0;
//   advancedSolenoid.armature.limit_xMax.flange.s = advancedSolenoid.armature.limit_xMax.s0;
//   advancedSolenoid.armature.stopper_xMax.contact = advancedSolenoid.armature.stopper_xMax.s_rel < advancedSolenoid.armature.stopper_xMax.s_rel0;
//   advancedSolenoid.armature.stopper_xMax.f_c = smooth(1,if advancedSolenoid.armature.stopper_xMax.contact then (-advancedSolenoid.armature.stopper_xMax.c) * abs(advancedSolenoid.armature.stopper_xMax.s_rel - advancedSolenoid.armature.stopper_xMax.s_rel0) ^ advancedSolenoid.armature.stopper_xMax.n else 0.0);
//   advancedSolenoid.armature.stopper_xMax.f_d2 = if advancedSolenoid.armature.stopper_xMax.contact then advancedSolenoid.armature.stopper_xMax.d * advancedSolenoid.armature.stopper_xMax.v_rel else 0.0;
//   advancedSolenoid.armature.stopper_xMax.f_d = if advancedSolenoid.armature.stopper_xMax.contact then if noEvent(advancedSolenoid.armature.stopper_xMax.f_d2 < advancedSolenoid.armature.stopper_xMax.f_c) then advancedSolenoid.armature.stopper_xMax.f_c else if noEvent(advancedSolenoid.armature.stopper_xMax.f_d2 > -advancedSolenoid.armature.stopper_xMax.f_c) then -advancedSolenoid.armature.stopper_xMax.f_c else advancedSolenoid.armature.stopper_xMax.f_d2 else 0.0;
//   advancedSolenoid.armature.stopper_xMax.f = advancedSolenoid.armature.stopper_xMax.f_c + advancedSolenoid.armature.stopper_xMax.f_d;
//   advancedSolenoid.armature.stopper_xMax.s_rel = advancedSolenoid.armature.stopper_xMax.flange_b.s - advancedSolenoid.armature.stopper_xMax.flange_a.s;
//   advancedSolenoid.armature.stopper_xMax.v_rel = der(advancedSolenoid.armature.stopper_xMax.s_rel);
//   advancedSolenoid.armature.stopper_xMax.flange_b.f = advancedSolenoid.armature.stopper_xMax.f;
//   advancedSolenoid.armature.stopper_xMax.flange_a.f = -advancedSolenoid.armature.stopper_xMax.f;
//   advancedSolenoid.armature.stopper_xMin.contact = advancedSolenoid.armature.stopper_xMin.s_rel < advancedSolenoid.armature.stopper_xMin.s_rel0;
//   advancedSolenoid.armature.stopper_xMin.f_c = smooth(1,if advancedSolenoid.armature.stopper_xMin.contact then (-advancedSolenoid.armature.stopper_xMin.c) * abs(advancedSolenoid.armature.stopper_xMin.s_rel - advancedSolenoid.armature.stopper_xMin.s_rel0) ^ advancedSolenoid.armature.stopper_xMin.n else 0.0);
//   advancedSolenoid.armature.stopper_xMin.f_d2 = if advancedSolenoid.armature.stopper_xMin.contact then advancedSolenoid.armature.stopper_xMin.d * advancedSolenoid.armature.stopper_xMin.v_rel else 0.0;
//   advancedSolenoid.armature.stopper_xMin.f_d = if advancedSolenoid.armature.stopper_xMin.contact then if noEvent(advancedSolenoid.armature.stopper_xMin.f_d2 < advancedSolenoid.armature.stopper_xMin.f_c) then advancedSolenoid.armature.stopper_xMin.f_c else if noEvent(advancedSolenoid.armature.stopper_xMin.f_d2 > -advancedSolenoid.armature.stopper_xMin.f_c) then -advancedSolenoid.armature.stopper_xMin.f_c else advancedSolenoid.armature.stopper_xMin.f_d2 else 0.0;
//   advancedSolenoid.armature.stopper_xMin.f = advancedSolenoid.armature.stopper_xMin.f_c + advancedSolenoid.armature.stopper_xMin.f_d;
//   advancedSolenoid.armature.stopper_xMin.s_rel = advancedSolenoid.armature.stopper_xMin.flange_b.s - advancedSolenoid.armature.stopper_xMin.flange_a.s;
//   advancedSolenoid.armature.stopper_xMin.v_rel = der(advancedSolenoid.armature.stopper_xMin.s_rel);
//   advancedSolenoid.armature.stopper_xMin.flange_b.f = advancedSolenoid.armature.stopper_xMin.f;
//   advancedSolenoid.armature.stopper_xMin.flange_a.f = -advancedSolenoid.armature.stopper_xMin.f;
//   advancedSolenoid.armature.mass.s = advancedSolenoid.armature.s;
//   advancedSolenoid.armature.mass.v = advancedSolenoid.armature.v;
//   advancedSolenoid.armature.mass.a = advancedSolenoid.armature.a;
//   advancedSolenoid.g_mLeak1.G_m = 6.53451271946677e-07 * advancedSolenoid.g_mLeak1.l;
//   advancedSolenoid.g_mLeak1.R_m = 1.0 / advancedSolenoid.g_mLeak1.G_m;
//   advancedSolenoid.g_mLeak1.V_m = advancedSolenoid.g_mLeak1.Phi * advancedSolenoid.g_mLeak1.R_m;
//   advancedSolenoid.g_mLeak1.V_m = advancedSolenoid.g_mLeak1.port_p.V_m - advancedSolenoid.g_mLeak1.port_n.V_m;
//   advancedSolenoid.g_mLeak1.Phi = advancedSolenoid.g_mLeak1.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak1.port_p.Phi + advancedSolenoid.g_mLeak1.port_n.Phi;
//   advancedSolenoid.g_mLeak2.G_m = 8e-07 * (advancedSolenoid.g_mLeak2.l * log(1.0 + advancedSolenoid.g_mLeak2.ratio));
//   advancedSolenoid.g_mLeak2.R_m = 1.0 / advancedSolenoid.g_mLeak2.G_m;
//   advancedSolenoid.g_mLeak2.V_m = advancedSolenoid.g_mLeak2.Phi * advancedSolenoid.g_mLeak2.R_m;
//   advancedSolenoid.g_mLeak2.V_m = advancedSolenoid.g_mLeak2.port_p.V_m - advancedSolenoid.g_mLeak2.port_n.V_m;
//   advancedSolenoid.g_mLeak2.Phi = advancedSolenoid.g_mLeak2.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak2.port_p.Phi + advancedSolenoid.g_mLeak2.port_n.Phi;
//   advancedSolenoid.coil2.v = advancedSolenoid.coil2.p.v - advancedSolenoid.coil2.n.v;
//   0.0 = advancedSolenoid.coil2.p.i + advancedSolenoid.coil2.n.i;
//   advancedSolenoid.coil2.i = advancedSolenoid.coil2.p.i;
//   advancedSolenoid.coil2.V_m = advancedSolenoid.coil2.port_p.V_m - advancedSolenoid.coil2.port_n.V_m;
//   0.0 = advancedSolenoid.coil2.port_p.Phi + advancedSolenoid.coil2.port_n.Phi;
//   advancedSolenoid.coil2.Phi = advancedSolenoid.coil2.port_p.Phi;
//   advancedSolenoid.coil2.V_m = advancedSolenoid.coil2.i * advancedSolenoid.coil2.N;
//   advancedSolenoid.coil2.N * der(advancedSolenoid.coil2.Phi) = -advancedSolenoid.coil2.v;
//   advancedSolenoid.coil2.Psi = advancedSolenoid.coil2.N * advancedSolenoid.coil2.Phi;
//   advancedSolenoid.coil2.L_stat = if noEvent(abs(advancedSolenoid.coil2.i) > advancedSolenoid.coil2.eps) then abs(advancedSolenoid.coil2.Psi / advancedSolenoid.coil2.i) else abs(advancedSolenoid.coil2.Psi / advancedSolenoid.coil2.eps);
//   advancedSolenoid.c_par1.i = advancedSolenoid.c_par1.C * der(advancedSolenoid.c_par1.v);
//   advancedSolenoid.c_par1.v = advancedSolenoid.c_par1.p.v - advancedSolenoid.c_par1.n.v;
//   0.0 = advancedSolenoid.c_par1.p.i + advancedSolenoid.c_par1.n.i;
//   advancedSolenoid.c_par1.i = advancedSolenoid.c_par1.p.i;
//   advancedSolenoid.G_mLeakRad.A = 3.14159265358979 * (advancedSolenoid.G_mLeakRad.l * (advancedSolenoid.G_mLeakRad.r_o + advancedSolenoid.G_mLeakRad.r_i));
//   advancedSolenoid.G_mLeakRad.G_m = (7.89568352087149e-06 * (advancedSolenoid.G_mLeakRad.mu_r * advancedSolenoid.G_mLeakRad.l)) / log(advancedSolenoid.G_mLeakRad.r_o / advancedSolenoid.G_mLeakRad.r_i);
//   advancedSolenoid.G_mLeakRad.H = advancedSolenoid.G_mLeakRad.B / (advancedSolenoid.G_mLeakRad.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.G_mLeakRad.B = advancedSolenoid.G_mLeakRad.Phi / advancedSolenoid.G_mLeakRad.A;
//   advancedSolenoid.G_mLeakRad.V_m = advancedSolenoid.G_mLeakRad.Phi * advancedSolenoid.G_mLeakRad.R_m;
//   advancedSolenoid.G_mLeakRad.R_m = 1.0 / advancedSolenoid.G_mLeakRad.G_m;
//   advancedSolenoid.G_mLeakRad.mu_r = if advancedSolenoid.G_mLeakRad.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.G_mLeakRad.B,advancedSolenoid.G_mLeakRad.material.mu_i,advancedSolenoid.G_mLeakRad.material.B_myMax,advancedSolenoid.G_mLeakRad.material.c_a,advancedSolenoid.G_mLeakRad.material.c_b,advancedSolenoid.G_mLeakRad.material.n) else advancedSolenoid.G_mLeakRad.mu_rConst;
//   advancedSolenoid.G_mLeakRad.V_m = advancedSolenoid.G_mLeakRad.port_p.V_m - advancedSolenoid.G_mLeakRad.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.Phi = advancedSolenoid.G_mLeakRad.port_p.Phi;
//   0.0 = advancedSolenoid.G_mLeakRad.port_p.Phi + advancedSolenoid.G_mLeakRad.port_n.Phi;
//   advancedSolenoid.g_mFeYokeSide2.A = 3.14159265358979 * (advancedSolenoid.g_mFeYokeSide2.r_o ^ 2.0 - advancedSolenoid.g_mFeYokeSide2.r_i ^ 2.0);
//   advancedSolenoid.g_mFeYokeSide2.G_m = (1.25663706143592e-06 * (advancedSolenoid.g_mFeYokeSide2.mu_r * advancedSolenoid.g_mFeYokeSide2.A)) / advancedSolenoid.g_mFeYokeSide2.l;
//   advancedSolenoid.g_mFeYokeSide2.H = advancedSolenoid.g_mFeYokeSide2.B / (advancedSolenoid.g_mFeYokeSide2.mu_r * 1.25663706143592e-06);
//   advancedSolenoid.g_mFeYokeSide2.B = advancedSolenoid.g_mFeYokeSide2.Phi / advancedSolenoid.g_mFeYokeSide2.A;
//   advancedSolenoid.g_mFeYokeSide2.V_m = advancedSolenoid.g_mFeYokeSide2.Phi * advancedSolenoid.g_mFeYokeSide2.R_m;
//   advancedSolenoid.g_mFeYokeSide2.R_m = 1.0 / advancedSolenoid.g_mFeYokeSide2.G_m;
//   advancedSolenoid.g_mFeYokeSide2.mu_r = if advancedSolenoid.g_mFeYokeSide2.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(advancedSolenoid.g_mFeYokeSide2.B,advancedSolenoid.g_mFeYokeSide2.material.mu_i,advancedSolenoid.g_mFeYokeSide2.material.B_myMax,advancedSolenoid.g_mFeYokeSide2.material.c_a,advancedSolenoid.g_mFeYokeSide2.material.c_b,advancedSolenoid.g_mFeYokeSide2.material.n) else advancedSolenoid.g_mFeYokeSide2.mu_rConst;
//   advancedSolenoid.g_mFeYokeSide2.V_m = advancedSolenoid.g_mFeYokeSide2.port_p.V_m - advancedSolenoid.g_mFeYokeSide2.port_n.V_m;
//   advancedSolenoid.g_mFeYokeSide2.Phi = advancedSolenoid.g_mFeYokeSide2.port_p.Phi;
//   0.0 = advancedSolenoid.g_mFeYokeSide2.port_p.Phi + advancedSolenoid.g_mFeYokeSide2.port_n.Phi;
//   advancedSolenoid.c_par2.i = advancedSolenoid.c_par2.C * der(advancedSolenoid.c_par2.v);
//   advancedSolenoid.c_par2.v = advancedSolenoid.c_par2.p.v - advancedSolenoid.c_par2.n.v;
//   0.0 = advancedSolenoid.c_par2.p.i + advancedSolenoid.c_par2.n.i;
//   advancedSolenoid.c_par2.i = advancedSolenoid.c_par2.p.i;
//   assert(1.0 + advancedSolenoid.r_par1.alpha * (advancedSolenoid.r_par1.T_heatPort - advancedSolenoid.r_par1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_par1.R_actual = advancedSolenoid.r_par1.R * (1.0 + advancedSolenoid.r_par1.alpha * (advancedSolenoid.r_par1.T_heatPort - advancedSolenoid.r_par1.T_ref));
//   advancedSolenoid.r_par1.v = advancedSolenoid.r_par1.R_actual * advancedSolenoid.r_par1.i;
//   advancedSolenoid.r_par1.LossPower = advancedSolenoid.r_par1.v * advancedSolenoid.r_par1.i;
//   advancedSolenoid.r_par1.i = advancedSolenoid.r_par1.p.i;
//   0.0 = advancedSolenoid.r_par1.p.i + advancedSolenoid.r_par1.n.i;
//   advancedSolenoid.r_par1.v = advancedSolenoid.r_par1.p.v - advancedSolenoid.r_par1.n.v;
//   advancedSolenoid.r_par1.T_heatPort = advancedSolenoid.r_par1.T;
//   assert(1.0 + advancedSolenoid.r_par2.alpha * (advancedSolenoid.r_par2.T_heatPort - advancedSolenoid.r_par2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_par2.R_actual = advancedSolenoid.r_par2.R * (1.0 + advancedSolenoid.r_par2.alpha * (advancedSolenoid.r_par2.T_heatPort - advancedSolenoid.r_par2.T_ref));
//   advancedSolenoid.r_par2.v = advancedSolenoid.r_par2.R_actual * advancedSolenoid.r_par2.i;
//   advancedSolenoid.r_par2.LossPower = advancedSolenoid.r_par2.v * advancedSolenoid.r_par2.i;
//   advancedSolenoid.r_par2.i = advancedSolenoid.r_par2.p.i;
//   0.0 = advancedSolenoid.r_par2.p.i + advancedSolenoid.r_par2.n.i;
//   advancedSolenoid.r_par2.v = advancedSolenoid.r_par2.p.v - advancedSolenoid.r_par2.n.v;
//   advancedSolenoid.r_par2.T_heatPort = advancedSolenoid.r_par2.T;
//   assert(1.0 + advancedSolenoid.r_2.alpha * (advancedSolenoid.r_2.T_heatPort - advancedSolenoid.r_2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   advancedSolenoid.r_2.R_actual = advancedSolenoid.r_2.R * (1.0 + advancedSolenoid.r_2.alpha * (advancedSolenoid.r_2.T_heatPort - advancedSolenoid.r_2.T_ref));
//   advancedSolenoid.r_2.v = advancedSolenoid.r_2.R_actual * advancedSolenoid.r_2.i;
//   advancedSolenoid.r_2.LossPower = advancedSolenoid.r_2.v * advancedSolenoid.r_2.i;
//   advancedSolenoid.r_2.i = advancedSolenoid.r_2.p.i;
//   0.0 = advancedSolenoid.r_2.p.i + advancedSolenoid.r_2.n.i;
//   advancedSolenoid.r_2.v = advancedSolenoid.r_2.p.v - advancedSolenoid.r_2.n.v;
//   advancedSolenoid.r_2.T_heatPort = advancedSolenoid.r_2.T;
//   advancedSolenoid.g_mLeak3.G_m = 6.53451271946677e-07 * advancedSolenoid.g_mLeak3.l;
//   advancedSolenoid.g_mLeak3.R_m = 1.0 / advancedSolenoid.g_mLeak3.G_m;
//   advancedSolenoid.g_mLeak3.V_m = advancedSolenoid.g_mLeak3.Phi * advancedSolenoid.g_mLeak3.R_m;
//   advancedSolenoid.g_mLeak3.V_m = advancedSolenoid.g_mLeak3.port_p.V_m - advancedSolenoid.g_mLeak3.port_n.V_m;
//   advancedSolenoid.g_mLeak3.Phi = advancedSolenoid.g_mLeak3.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeak3.port_p.Phi + advancedSolenoid.g_mLeak3.port_n.Phi;
//   advancedSolenoid.g_mLeakWork.G_m = 4e-07 * (advancedSolenoid.g_mLeakWork.w * log(1.0 + (3.14159265358979 * advancedSolenoid.g_mLeakWork.r) / advancedSolenoid.g_mLeakWork.l));
//   advancedSolenoid.g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (advancedSolenoid.g_mLeakWork.w * (advancedSolenoid.g_mLeakWork.r * (Real(advancedSolenoid.g_mLeakWork.dlBydx) * advancedSolenoid.g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * advancedSolenoid.g_mLeakWork.r) / advancedSolenoid.g_mLeakWork.l);
//   advancedSolenoid.g_mLeakWork.flange.f = -advancedSolenoid.g_mLeakWork.F_m;
//   advancedSolenoid.g_mLeakWork.s_support = 0.0;
//   advancedSolenoid.g_mLeakWork.F_m = 0.5 * (advancedSolenoid.g_mLeakWork.V_m ^ 2.0 * advancedSolenoid.g_mLeakWork.dGmBydx);
//   advancedSolenoid.g_mLeakWork.R_m = 1.0 / advancedSolenoid.g_mLeakWork.G_m;
//   advancedSolenoid.g_mLeakWork.V_m = advancedSolenoid.g_mLeakWork.Phi * advancedSolenoid.g_mLeakWork.R_m;
//   advancedSolenoid.g_mLeakWork.V_m = advancedSolenoid.g_mLeakWork.port_p.V_m - advancedSolenoid.g_mLeakWork.port_n.V_m;
//   advancedSolenoid.g_mLeakWork.Phi = advancedSolenoid.g_mLeakWork.port_p.Phi;
//   0.0 = advancedSolenoid.g_mLeakWork.port_p.Phi + advancedSolenoid.g_mLeakWork.port_n.Phi;
//   advancedSolenoid.x = advancedSolenoid.flange.s;
//   advancedSolenoid.Psi_tot = advancedSolenoid.coil1.Psi + advancedSolenoid.coil2.Psi;
//   advancedSolenoid.L_statTot = advancedSolenoid.coil1.L_stat + advancedSolenoid.coil2.L_stat;
//   advancedLoad.v = der(advancedLoad.s);
//   advancedLoad.a = der(advancedLoad.v);
//   advancedLoad.m * advancedLoad.a = advancedLoad.flange_a.f + advancedLoad.flange_b.f;
//   advancedLoad.flange_a.s = advancedLoad.s + (-advancedLoad.L) / 2.0;
//   advancedLoad.flange_b.s = advancedLoad.s + advancedLoad.L / 2.0;
//   simpleGround.p.v = 0.0;
//   simpleSource.signalSource.y = simpleSource.signalSource.offset + (if time < simpleSource.signalSource.startTime then 0.0 else simpleSource.signalSource.height);
//   simpleSource.v = simpleSource.signalSource.y;
//   simpleSource.v = simpleSource.p.v - simpleSource.n.v;
//   0.0 = simpleSource.p.i + simpleSource.n.i;
//   simpleSource.i = simpleSource.p.i;
//   simpleSolenoid.ground.port.V_m = 0.0;
//   simpleSolenoid.coil.v = simpleSolenoid.coil.p.v - simpleSolenoid.coil.n.v;
//   0.0 = simpleSolenoid.coil.p.i + simpleSolenoid.coil.n.i;
//   simpleSolenoid.coil.i = simpleSolenoid.coil.p.i;
//   simpleSolenoid.coil.V_m = simpleSolenoid.coil.port_p.V_m - simpleSolenoid.coil.port_n.V_m;
//   0.0 = simpleSolenoid.coil.port_p.Phi + simpleSolenoid.coil.port_n.Phi;
//   simpleSolenoid.coil.Phi = simpleSolenoid.coil.port_p.Phi;
//   simpleSolenoid.coil.V_m = simpleSolenoid.coil.i * simpleSolenoid.coil.N;
//   simpleSolenoid.coil.N * der(simpleSolenoid.coil.Phi) = -simpleSolenoid.coil.v;
//   simpleSolenoid.coil.Psi = simpleSolenoid.coil.N * simpleSolenoid.coil.Phi;
//   simpleSolenoid.coil.L_stat = if noEvent(abs(simpleSolenoid.coil.i) > simpleSolenoid.coil.eps) then abs(simpleSolenoid.coil.Psi / simpleSolenoid.coil.i) else abs(simpleSolenoid.coil.Psi / simpleSolenoid.coil.eps);
//   assert(1.0 + simpleSolenoid.r.alpha * (simpleSolenoid.r.T_heatPort - simpleSolenoid.r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   simpleSolenoid.r.R_actual = simpleSolenoid.r.R * (1.0 + simpleSolenoid.r.alpha * (simpleSolenoid.r.T_heatPort - simpleSolenoid.r.T_ref));
//   simpleSolenoid.r.v = simpleSolenoid.r.R_actual * simpleSolenoid.r.i;
//   simpleSolenoid.r.LossPower = simpleSolenoid.r.v * simpleSolenoid.r.i;
//   simpleSolenoid.r.i = simpleSolenoid.r.p.i;
//   0.0 = simpleSolenoid.r.p.i + simpleSolenoid.r.n.i;
//   simpleSolenoid.r.v = simpleSolenoid.r.p.v - simpleSolenoid.r.n.v;
//   simpleSolenoid.r.T_heatPort = simpleSolenoid.r.T;
//   simpleSolenoid.g_mFeYokeSide.A = 3.14159265358979 * (simpleSolenoid.g_mFeYokeSide.r_o ^ 2.0 - simpleSolenoid.g_mFeYokeSide.r_i ^ 2.0);
//   simpleSolenoid.g_mFeYokeSide.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFeYokeSide.mu_r * simpleSolenoid.g_mFeYokeSide.A)) / simpleSolenoid.g_mFeYokeSide.l;
//   simpleSolenoid.g_mFeYokeSide.H = simpleSolenoid.g_mFeYokeSide.B / (simpleSolenoid.g_mFeYokeSide.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeYokeSide.B = simpleSolenoid.g_mFeYokeSide.Phi / simpleSolenoid.g_mFeYokeSide.A;
//   simpleSolenoid.g_mFeYokeSide.V_m = simpleSolenoid.g_mFeYokeSide.Phi * simpleSolenoid.g_mFeYokeSide.R_m;
//   simpleSolenoid.g_mFeYokeSide.R_m = 1.0 / simpleSolenoid.g_mFeYokeSide.G_m;
//   simpleSolenoid.g_mFeYokeSide.mu_r = if simpleSolenoid.g_mFeYokeSide.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeYokeSide.B,simpleSolenoid.g_mFeYokeSide.material.mu_i,simpleSolenoid.g_mFeYokeSide.material.B_myMax,simpleSolenoid.g_mFeYokeSide.material.c_a,simpleSolenoid.g_mFeYokeSide.material.c_b,simpleSolenoid.g_mFeYokeSide.material.n) else simpleSolenoid.g_mFeYokeSide.mu_rConst;
//   simpleSolenoid.g_mFeYokeSide.V_m = simpleSolenoid.g_mFeYokeSide.port_p.V_m - simpleSolenoid.g_mFeYokeSide.port_n.V_m;
//   simpleSolenoid.g_mFeYokeSide.Phi = simpleSolenoid.g_mFeYokeSide.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeYokeSide.port_p.Phi + simpleSolenoid.g_mFeYokeSide.port_n.Phi;
//   simpleSolenoid.g_mFeArm.A = 3.14159265358979 * (simpleSolenoid.g_mFeArm.r_o ^ 2.0 - simpleSolenoid.g_mFeArm.r_i ^ 2.0);
//   simpleSolenoid.g_mFeArm.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFeArm.mu_r * simpleSolenoid.g_mFeArm.A)) / simpleSolenoid.g_mFeArm.l;
//   simpleSolenoid.g_mFeArm.H = simpleSolenoid.g_mFeArm.B / (simpleSolenoid.g_mFeArm.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeArm.B = simpleSolenoid.g_mFeArm.Phi / simpleSolenoid.g_mFeArm.A;
//   simpleSolenoid.g_mFeArm.V_m = simpleSolenoid.g_mFeArm.Phi * simpleSolenoid.g_mFeArm.R_m;
//   simpleSolenoid.g_mFeArm.R_m = 1.0 / simpleSolenoid.g_mFeArm.G_m;
//   simpleSolenoid.g_mFeArm.mu_r = if simpleSolenoid.g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeArm.B,simpleSolenoid.g_mFeArm.material.mu_i,simpleSolenoid.g_mFeArm.material.B_myMax,simpleSolenoid.g_mFeArm.material.c_a,simpleSolenoid.g_mFeArm.material.c_b,simpleSolenoid.g_mFeArm.material.n) else simpleSolenoid.g_mFeArm.mu_rConst;
//   simpleSolenoid.g_mFeArm.V_m = simpleSolenoid.g_mFeArm.port_p.V_m - simpleSolenoid.g_mFeArm.port_n.V_m;
//   simpleSolenoid.g_mFeArm.Phi = simpleSolenoid.g_mFeArm.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeArm.port_p.Phi + simpleSolenoid.g_mFeArm.port_n.Phi;
//   simpleSolenoid.g_mAirWork.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mAirWork.mu_r * simpleSolenoid.g_mAirWork.A)) / simpleSolenoid.g_mAirWork.l;
//   simpleSolenoid.g_mAirWork.dGmBydx = -1.25663706143592e-06 * (simpleSolenoid.g_mAirWork.mu_r * (simpleSolenoid.g_mAirWork.A * (simpleSolenoid.g_mAirWork.l ^ -2.0 * Real(simpleSolenoid.g_mAirWork.dlBydx))));
//   simpleSolenoid.g_mAirWork.B = simpleSolenoid.g_mAirWork.Phi / simpleSolenoid.g_mAirWork.A;
//   simpleSolenoid.g_mAirWork.flange.f = -simpleSolenoid.g_mAirWork.F_m;
//   simpleSolenoid.g_mAirWork.s_support = 0.0;
//   simpleSolenoid.g_mAirWork.F_m = 0.5 * (simpleSolenoid.g_mAirWork.V_m ^ 2.0 * simpleSolenoid.g_mAirWork.dGmBydx);
//   simpleSolenoid.g_mAirWork.R_m = 1.0 / simpleSolenoid.g_mAirWork.G_m;
//   simpleSolenoid.g_mAirWork.V_m = simpleSolenoid.g_mAirWork.Phi * simpleSolenoid.g_mAirWork.R_m;
//   simpleSolenoid.g_mAirWork.V_m = simpleSolenoid.g_mAirWork.port_p.V_m - simpleSolenoid.g_mAirWork.port_n.V_m;
//   simpleSolenoid.g_mAirWork.Phi = simpleSolenoid.g_mAirWork.port_p.Phi;
//   0.0 = simpleSolenoid.g_mAirWork.port_p.Phi + simpleSolenoid.g_mAirWork.port_n.Phi;
//   simpleSolenoid.g_mFeYokeBot.A = 3.14159265358979 * (simpleSolenoid.g_mFeYokeBot.l * (simpleSolenoid.g_mFeYokeBot.r_o + simpleSolenoid.g_mFeYokeBot.r_i));
//   simpleSolenoid.g_mFeYokeBot.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mFeYokeBot.mu_r * simpleSolenoid.g_mFeYokeBot.l)) / log(simpleSolenoid.g_mFeYokeBot.r_o / simpleSolenoid.g_mFeYokeBot.r_i);
//   simpleSolenoid.g_mFeYokeBot.H = simpleSolenoid.g_mFeYokeBot.B / (simpleSolenoid.g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFeYokeBot.B = simpleSolenoid.g_mFeYokeBot.Phi / simpleSolenoid.g_mFeYokeBot.A;
//   simpleSolenoid.g_mFeYokeBot.V_m = simpleSolenoid.g_mFeYokeBot.Phi * simpleSolenoid.g_mFeYokeBot.R_m;
//   simpleSolenoid.g_mFeYokeBot.R_m = 1.0 / simpleSolenoid.g_mFeYokeBot.G_m;
//   simpleSolenoid.g_mFeYokeBot.mu_r = if simpleSolenoid.g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFeYokeBot.B,simpleSolenoid.g_mFeYokeBot.material.mu_i,simpleSolenoid.g_mFeYokeBot.material.B_myMax,simpleSolenoid.g_mFeYokeBot.material.c_a,simpleSolenoid.g_mFeYokeBot.material.c_b,simpleSolenoid.g_mFeYokeBot.material.n) else simpleSolenoid.g_mFeYokeBot.mu_rConst;
//   simpleSolenoid.g_mFeYokeBot.V_m = simpleSolenoid.g_mFeYokeBot.port_p.V_m - simpleSolenoid.g_mFeYokeBot.port_n.V_m;
//   simpleSolenoid.g_mFeYokeBot.Phi = simpleSolenoid.g_mFeYokeBot.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFeYokeBot.port_p.Phi + simpleSolenoid.g_mFeYokeBot.port_n.Phi;
//   simpleSolenoid.g_mAirPar.A = 3.14159265358979 * (simpleSolenoid.g_mAirPar.l * (simpleSolenoid.g_mAirPar.r_o + simpleSolenoid.g_mAirPar.r_i));
//   simpleSolenoid.g_mAirPar.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mAirPar.mu_r * simpleSolenoid.g_mAirPar.l)) / log(simpleSolenoid.g_mAirPar.r_o / simpleSolenoid.g_mAirPar.r_i);
//   simpleSolenoid.g_mAirPar.H = simpleSolenoid.g_mAirPar.B / (simpleSolenoid.g_mAirPar.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mAirPar.B = simpleSolenoid.g_mAirPar.Phi / simpleSolenoid.g_mAirPar.A;
//   simpleSolenoid.g_mAirPar.V_m = simpleSolenoid.g_mAirPar.Phi * simpleSolenoid.g_mAirPar.R_m;
//   simpleSolenoid.g_mAirPar.R_m = 1.0 / simpleSolenoid.g_mAirPar.G_m;
//   simpleSolenoid.g_mAirPar.mu_r = if simpleSolenoid.g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mAirPar.B,simpleSolenoid.g_mAirPar.material.mu_i,simpleSolenoid.g_mAirPar.material.B_myMax,simpleSolenoid.g_mAirPar.material.c_a,simpleSolenoid.g_mAirPar.material.c_b,simpleSolenoid.g_mAirPar.material.n) else simpleSolenoid.g_mAirPar.mu_rConst;
//   simpleSolenoid.g_mAirPar.V_m = simpleSolenoid.g_mAirPar.port_p.V_m - simpleSolenoid.g_mAirPar.port_n.V_m;
//   simpleSolenoid.g_mAirPar.Phi = simpleSolenoid.g_mAirPar.port_p.Phi;
//   0.0 = simpleSolenoid.g_mAirPar.port_p.Phi + simpleSolenoid.g_mAirPar.port_n.Phi;
//   simpleSolenoid.g_mFePoleBot.A = 3.14159265358979 * (simpleSolenoid.g_mFePoleBot.l * (simpleSolenoid.g_mFePoleBot.r_o + simpleSolenoid.g_mFePoleBot.r_i));
//   simpleSolenoid.g_mFePoleBot.G_m = (7.89568352087149e-06 * (simpleSolenoid.g_mFePoleBot.mu_r * simpleSolenoid.g_mFePoleBot.l)) / log(simpleSolenoid.g_mFePoleBot.r_o / simpleSolenoid.g_mFePoleBot.r_i);
//   simpleSolenoid.g_mFePoleBot.H = simpleSolenoid.g_mFePoleBot.B / (simpleSolenoid.g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFePoleBot.B = simpleSolenoid.g_mFePoleBot.Phi / simpleSolenoid.g_mFePoleBot.A;
//   simpleSolenoid.g_mFePoleBot.V_m = simpleSolenoid.g_mFePoleBot.Phi * simpleSolenoid.g_mFePoleBot.R_m;
//   simpleSolenoid.g_mFePoleBot.R_m = 1.0 / simpleSolenoid.g_mFePoleBot.G_m;
//   simpleSolenoid.g_mFePoleBot.mu_r = if simpleSolenoid.g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFePoleBot.B,simpleSolenoid.g_mFePoleBot.material.mu_i,simpleSolenoid.g_mFePoleBot.material.B_myMax,simpleSolenoid.g_mFePoleBot.material.c_a,simpleSolenoid.g_mFePoleBot.material.c_b,simpleSolenoid.g_mFePoleBot.material.n) else simpleSolenoid.g_mFePoleBot.mu_rConst;
//   simpleSolenoid.g_mFePoleBot.V_m = simpleSolenoid.g_mFePoleBot.port_p.V_m - simpleSolenoid.g_mFePoleBot.port_n.V_m;
//   simpleSolenoid.g_mFePoleBot.Phi = simpleSolenoid.g_mFePoleBot.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFePoleBot.port_p.Phi + simpleSolenoid.g_mFePoleBot.port_n.Phi;
//   simpleSolenoid.g_mFePole.A = 3.14159265358979 * (simpleSolenoid.g_mFePole.r_o ^ 2.0 - simpleSolenoid.g_mFePole.r_i ^ 2.0);
//   simpleSolenoid.g_mFePole.G_m = (1.25663706143592e-06 * (simpleSolenoid.g_mFePole.mu_r * simpleSolenoid.g_mFePole.A)) / simpleSolenoid.g_mFePole.l;
//   simpleSolenoid.g_mFePole.H = simpleSolenoid.g_mFePole.B / (simpleSolenoid.g_mFePole.mu_r * 1.25663706143592e-06);
//   simpleSolenoid.g_mFePole.B = simpleSolenoid.g_mFePole.Phi / simpleSolenoid.g_mFePole.A;
//   simpleSolenoid.g_mFePole.V_m = simpleSolenoid.g_mFePole.Phi * simpleSolenoid.g_mFePole.R_m;
//   simpleSolenoid.g_mFePole.R_m = 1.0 / simpleSolenoid.g_mFePole.G_m;
//   simpleSolenoid.g_mFePole.mu_r = if simpleSolenoid.g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(simpleSolenoid.g_mFePole.B,simpleSolenoid.g_mFePole.material.mu_i,simpleSolenoid.g_mFePole.material.B_myMax,simpleSolenoid.g_mFePole.material.c_a,simpleSolenoid.g_mFePole.material.c_b,simpleSolenoid.g_mFePole.material.n) else simpleSolenoid.g_mFePole.mu_rConst;
//   simpleSolenoid.g_mFePole.V_m = simpleSolenoid.g_mFePole.port_p.V_m - simpleSolenoid.g_mFePole.port_n.V_m;
//   simpleSolenoid.g_mFePole.Phi = simpleSolenoid.g_mFePole.port_p.Phi;
//   0.0 = simpleSolenoid.g_mFePole.port_p.Phi + simpleSolenoid.g_mFePole.port_n.Phi;
//   simpleSolenoid.armature.mass.v = der(simpleSolenoid.armature.mass.s);
//   simpleSolenoid.armature.mass.a = der(simpleSolenoid.armature.mass.v);
//   simpleSolenoid.armature.mass.m * simpleSolenoid.armature.mass.a = simpleSolenoid.armature.mass.flange_a.f + simpleSolenoid.armature.mass.flange_b.f;
//   simpleSolenoid.armature.mass.flange_a.s = simpleSolenoid.armature.mass.s + (-simpleSolenoid.armature.mass.L) / 2.0;
//   simpleSolenoid.armature.mass.flange_b.s = simpleSolenoid.armature.mass.s + simpleSolenoid.armature.mass.L / 2.0;
//   simpleSolenoid.armature.limit_xMin.flange.s = simpleSolenoid.armature.limit_xMin.s0;
//   simpleSolenoid.armature.limit_xMax.flange.s = simpleSolenoid.armature.limit_xMax.s0;
//   simpleSolenoid.armature.stopper_xMax.contact = simpleSolenoid.armature.stopper_xMax.s_rel < simpleSolenoid.armature.stopper_xMax.s_rel0;
//   simpleSolenoid.armature.stopper_xMax.f_c = smooth(1,if simpleSolenoid.armature.stopper_xMax.contact then (-simpleSolenoid.armature.stopper_xMax.c) * abs(simpleSolenoid.armature.stopper_xMax.s_rel - simpleSolenoid.armature.stopper_xMax.s_rel0) ^ simpleSolenoid.armature.stopper_xMax.n else 0.0);
//   simpleSolenoid.armature.stopper_xMax.f_d2 = if simpleSolenoid.armature.stopper_xMax.contact then simpleSolenoid.armature.stopper_xMax.d * simpleSolenoid.armature.stopper_xMax.v_rel else 0.0;
//   simpleSolenoid.armature.stopper_xMax.f_d = if simpleSolenoid.armature.stopper_xMax.contact then if noEvent(simpleSolenoid.armature.stopper_xMax.f_d2 < simpleSolenoid.armature.stopper_xMax.f_c) then simpleSolenoid.armature.stopper_xMax.f_c else if noEvent(simpleSolenoid.armature.stopper_xMax.f_d2 > -simpleSolenoid.armature.stopper_xMax.f_c) then -simpleSolenoid.armature.stopper_xMax.f_c else simpleSolenoid.armature.stopper_xMax.f_d2 else 0.0;
//   simpleSolenoid.armature.stopper_xMax.f = simpleSolenoid.armature.stopper_xMax.f_c + simpleSolenoid.armature.stopper_xMax.f_d;
//   simpleSolenoid.armature.stopper_xMax.s_rel = simpleSolenoid.armature.stopper_xMax.flange_b.s - simpleSolenoid.armature.stopper_xMax.flange_a.s;
//   simpleSolenoid.armature.stopper_xMax.v_rel = der(simpleSolenoid.armature.stopper_xMax.s_rel);
//   simpleSolenoid.armature.stopper_xMax.flange_b.f = simpleSolenoid.armature.stopper_xMax.f;
//   simpleSolenoid.armature.stopper_xMax.flange_a.f = -simpleSolenoid.armature.stopper_xMax.f;
//   simpleSolenoid.armature.stopper_xMin.contact = simpleSolenoid.armature.stopper_xMin.s_rel < simpleSolenoid.armature.stopper_xMin.s_rel0;
//   simpleSolenoid.armature.stopper_xMin.f_c = smooth(1,if simpleSolenoid.armature.stopper_xMin.contact then (-simpleSolenoid.armature.stopper_xMin.c) * abs(simpleSolenoid.armature.stopper_xMin.s_rel - simpleSolenoid.armature.stopper_xMin.s_rel0) ^ simpleSolenoid.armature.stopper_xMin.n else 0.0);
//   simpleSolenoid.armature.stopper_xMin.f_d2 = if simpleSolenoid.armature.stopper_xMin.contact then simpleSolenoid.armature.stopper_xMin.d * simpleSolenoid.armature.stopper_xMin.v_rel else 0.0;
//   simpleSolenoid.armature.stopper_xMin.f_d = if simpleSolenoid.armature.stopper_xMin.contact then if noEvent(simpleSolenoid.armature.stopper_xMin.f_d2 < simpleSolenoid.armature.stopper_xMin.f_c) then simpleSolenoid.armature.stopper_xMin.f_c else if noEvent(simpleSolenoid.armature.stopper_xMin.f_d2 > -simpleSolenoid.armature.stopper_xMin.f_c) then -simpleSolenoid.armature.stopper_xMin.f_c else simpleSolenoid.armature.stopper_xMin.f_d2 else 0.0;
//   simpleSolenoid.armature.stopper_xMin.f = simpleSolenoid.armature.stopper_xMin.f_c + simpleSolenoid.armature.stopper_xMin.f_d;
//   simpleSolenoid.armature.stopper_xMin.s_rel = simpleSolenoid.armature.stopper_xMin.flange_b.s - simpleSolenoid.armature.stopper_xMin.flange_a.s;
//   simpleSolenoid.armature.stopper_xMin.v_rel = der(simpleSolenoid.armature.stopper_xMin.s_rel);
//   simpleSolenoid.armature.stopper_xMin.flange_b.f = simpleSolenoid.armature.stopper_xMin.f;
//   simpleSolenoid.armature.stopper_xMin.flange_a.f = -simpleSolenoid.armature.stopper_xMin.f;
//   simpleSolenoid.armature.mass.s = simpleSolenoid.armature.s;
//   simpleSolenoid.armature.mass.v = simpleSolenoid.armature.v;
//   simpleSolenoid.armature.mass.a = simpleSolenoid.armature.a;
//   simpleSolenoid.g_mLeak1.G_m = 6.53451271946677e-07 * simpleSolenoid.g_mLeak1.l;
//   simpleSolenoid.g_mLeak1.R_m = 1.0 / simpleSolenoid.g_mLeak1.G_m;
//   simpleSolenoid.g_mLeak1.V_m = simpleSolenoid.g_mLeak1.Phi * simpleSolenoid.g_mLeak1.R_m;
//   simpleSolenoid.g_mLeak1.V_m = simpleSolenoid.g_mLeak1.port_p.V_m - simpleSolenoid.g_mLeak1.port_n.V_m;
//   simpleSolenoid.g_mLeak1.Phi = simpleSolenoid.g_mLeak1.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeak1.port_p.Phi + simpleSolenoid.g_mLeak1.port_n.Phi;
//   simpleSolenoid.g_mLeak2.G_m = 8e-07 * (simpleSolenoid.g_mLeak2.l * log(1.0 + simpleSolenoid.g_mLeak2.ratio));
//   simpleSolenoid.g_mLeak2.R_m = 1.0 / simpleSolenoid.g_mLeak2.G_m;
//   simpleSolenoid.g_mLeak2.V_m = simpleSolenoid.g_mLeak2.Phi * simpleSolenoid.g_mLeak2.R_m;
//   simpleSolenoid.g_mLeak2.V_m = simpleSolenoid.g_mLeak2.port_p.V_m - simpleSolenoid.g_mLeak2.port_n.V_m;
//   simpleSolenoid.g_mLeak2.Phi = simpleSolenoid.g_mLeak2.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeak2.port_p.Phi + simpleSolenoid.g_mLeak2.port_n.Phi;
//   simpleSolenoid.g_mLeakWork.G_m = 4e-07 * (simpleSolenoid.g_mLeakWork.w * log(1.0 + (3.14159265358979 * simpleSolenoid.g_mLeakWork.r) / simpleSolenoid.g_mLeakWork.l));
//   simpleSolenoid.g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (simpleSolenoid.g_mLeakWork.w * (simpleSolenoid.g_mLeakWork.r * (Real(simpleSolenoid.g_mLeakWork.dlBydx) * simpleSolenoid.g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * simpleSolenoid.g_mLeakWork.r) / simpleSolenoid.g_mLeakWork.l);
//   simpleSolenoid.g_mLeakWork.flange.f = -simpleSolenoid.g_mLeakWork.F_m;
//   simpleSolenoid.g_mLeakWork.s_support = 0.0;
//   simpleSolenoid.g_mLeakWork.F_m = 0.5 * (simpleSolenoid.g_mLeakWork.V_m ^ 2.0 * simpleSolenoid.g_mLeakWork.dGmBydx);
//   simpleSolenoid.g_mLeakWork.R_m = 1.0 / simpleSolenoid.g_mLeakWork.G_m;
//   simpleSolenoid.g_mLeakWork.V_m = simpleSolenoid.g_mLeakWork.Phi * simpleSolenoid.g_mLeakWork.R_m;
//   simpleSolenoid.g_mLeakWork.V_m = simpleSolenoid.g_mLeakWork.port_p.V_m - simpleSolenoid.g_mLeakWork.port_n.V_m;
//   simpleSolenoid.g_mLeakWork.Phi = simpleSolenoid.g_mLeakWork.port_p.Phi;
//   0.0 = simpleSolenoid.g_mLeakWork.port_p.Phi + simpleSolenoid.g_mLeakWork.port_n.Phi;
//   simpleSolenoid.x = simpleSolenoid.flange.s;
//   simpleLoad.v = der(simpleLoad.s);
//   simpleLoad.a = der(simpleLoad.v);
//   simpleLoad.m * simpleLoad.a = simpleLoad.flange_a.f + simpleLoad.flange_b.f;
//   simpleLoad.flange_a.s = simpleLoad.s + (-simpleLoad.L) / 2.0;
//   simpleLoad.flange_b.s = simpleLoad.s + simpleLoad.L / 2.0;
//   assert(true,\"tableOnFile = false and parameter table is an empty matrix\");
//   comparisonWithFEA.y[1] = comparisonWithFEA.p_offset[1] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[1],time);
//   comparisonWithFEA.y[2] = comparisonWithFEA.p_offset[2] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[2],time);
//   comparisonWithFEA.y[3] = comparisonWithFEA.p_offset[3] + Modelica.Blocks.Sources.CombiTimeTable.tableTimeIpo(comparisonWithFEA.tableID,comparisonWithFEA.columns[3],time);
//   when initial() then
//   comparisonWithFEA.tableID = Modelica.Blocks.Sources.CombiTimeTable.tableTimeInit(if not comparisonWithFEA.tableOnFile then \"NoName\" else comparisonWithFEA.tableName,if not comparisonWithFEA.tableOnFile then \"NoName\" else comparisonWithFEA.fileName,comparisonWithFEA.table,comparisonWithFEA.startTime,comparisonWithFEA.smoothness,comparisonWithFEA.extrapolation);
//   end when;
//   advancedGround.p.i + advancedSource.n.i + advancedSolenoid.n.i = 0.0;
//   advancedSource.p.i + advancedSolenoid.p.i = 0.0;
//   advancedSolenoid.ground.port.Phi + advancedSolenoid.g_mAirPar.port_p.Phi + advancedSolenoid.g_mLeak1.port_p.Phi + advancedSolenoid.g_mLeak2.port_p.Phi + advancedSolenoid.coil2.port_n.Phi + advancedSolenoid.g_mLeak3.port_p.Phi = 0.0;
//   advancedSolenoid.coil1.port_p.Phi + advancedSolenoid.g_mFePole.port_p.Phi = 0.0;
//   advancedSolenoid.coil1.port_n.Phi + advancedSolenoid.g_mAirWork.port_n.Phi + advancedSolenoid.g_mLeakWork.port_n.Phi = 0.0;
//   advancedSolenoid.coil1.p.i + advancedSolenoid.r_1.n.i = 0.0;
//   advancedSolenoid.coil1.n.i + advancedSolenoid.c_par1.n.i + advancedSolenoid.r_par2.p.i + advancedSolenoid.r_2.p.i = 0.0;
//   advancedSolenoid.r_1.p.i + advancedSolenoid.r_par1.p.i + (-advancedSolenoid.p.i) = 0.0;
//   advancedSolenoid.g_mFeYokeSide1.port_p.Phi + advancedSolenoid.g_mFePoleBot.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFeYokeSide1.port_n.Phi + advancedSolenoid.G_mLeakRad.port_n.Phi + advancedSolenoid.g_mFeYokeSide2.port_p.Phi = 0.0;
//   advancedSolenoid.g_mFeArm.port_p.Phi + advancedSolenoid.coil2.port_p.Phi = 0.0;
//   advancedSolenoid.g_mFeArm.port_n.Phi + advancedSolenoid.g_mAirWork.port_p.Phi + advancedSolenoid.G_mLeakRad.port_p.Phi + advancedSolenoid.g_mLeakWork.port_p.Phi = 0.0;
//   advancedSolenoid.g_mAirWork.flange.f + advancedSolenoid.armature.flange_a.f + advancedSolenoid.g_mLeakWork.flange.f = 0.0;
//   advancedSolenoid.g_mFeYokeBot.port_p.Phi + advancedSolenoid.g_mAirPar.port_n.Phi + advancedSolenoid.g_mLeak1.port_n.Phi + advancedSolenoid.g_mLeak2.port_n.Phi + advancedSolenoid.g_mLeak3.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFeYokeBot.port_n.Phi + advancedSolenoid.g_mFeYokeSide2.port_n.Phi = 0.0;
//   advancedSolenoid.g_mFePoleBot.port_p.Phi + advancedSolenoid.g_mFePole.port_n.Phi = 0.0;
//   advancedSolenoid.armature.mass.flange_a.f + (-advancedSolenoid.armature.flange_a.f) + advancedSolenoid.armature.stopper_xMin.flange_b.f = 0.0;
//   advancedSolenoid.armature.mass.flange_b.f + (-advancedSolenoid.armature.flange_b.f) + advancedSolenoid.armature.stopper_xMax.flange_a.f = 0.0;
//   advancedSolenoid.armature.flange_b.f + (-advancedSolenoid.flange.f) = 0.0;
//   advancedSolenoid.armature.limit_xMin.flange.f + advancedSolenoid.armature.stopper_xMin.flange_a.f = 0.0;
//   advancedSolenoid.armature.limit_xMax.flange.f + advancedSolenoid.armature.stopper_xMax.flange_b.f = 0.0;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.armature.mass.flange_a.s;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.armature.stopper_xMin.flange_b.s;
//   advancedSolenoid.armature.limit_xMax.flange.s = advancedSolenoid.armature.stopper_xMax.flange_b.s;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.armature.mass.flange_b.s;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.armature.stopper_xMax.flange_a.s;
//   advancedSolenoid.armature.limit_xMin.flange.s = advancedSolenoid.armature.stopper_xMin.flange_a.s;
//   advancedSolenoid.coil2.p.i + advancedSolenoid.r_2.n.i = 0.0;
//   advancedSolenoid.coil2.n.i + advancedSolenoid.c_par2.n.i + (-advancedSolenoid.n.i) = 0.0;
//   advancedSolenoid.c_par1.p.i + advancedSolenoid.r_par1.n.i = 0.0;
//   advancedSolenoid.c_par2.p.i + advancedSolenoid.r_par2.n.i = 0.0;
//   advancedSolenoid.flange.f + advancedLoad.flange_a.f = 0.0;
//   advancedSolenoid.armature.flange_b.s = advancedSolenoid.flange.s;
//   advancedSolenoid.c_par1.p.v = advancedSolenoid.r_par1.n.v;
//   advancedSolenoid.p.v = advancedSolenoid.r_1.p.v;
//   advancedSolenoid.p.v = advancedSolenoid.r_par1.p.v;
//   advancedSolenoid.c_par2.p.v = advancedSolenoid.r_par2.n.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.coil1.n.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.r_2.p.v;
//   advancedSolenoid.c_par1.n.v = advancedSolenoid.r_par2.p.v;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.g_mAirWork.flange.s;
//   advancedSolenoid.armature.flange_a.s = advancedSolenoid.g_mLeakWork.flange.s;
//   advancedSolenoid.c_par2.n.v = advancedSolenoid.coil2.n.v;
//   advancedSolenoid.c_par2.n.v = advancedSolenoid.n.v;
//   advancedSolenoid.coil2.port_p.V_m = advancedSolenoid.g_mFeArm.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mAirWork.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mFeArm.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.port_p.V_m = advancedSolenoid.g_mLeakWork.port_p.V_m;
//   advancedSolenoid.coil1.port_n.V_m = advancedSolenoid.g_mAirWork.port_n.V_m;
//   advancedSolenoid.coil1.port_n.V_m = advancedSolenoid.g_mLeakWork.port_n.V_m;
//   advancedSolenoid.coil1.port_p.V_m = advancedSolenoid.g_mFePole.port_p.V_m;
//   advancedSolenoid.g_mFePole.port_n.V_m = advancedSolenoid.g_mFePoleBot.port_p.V_m;
//   advancedSolenoid.g_mFePoleBot.port_n.V_m = advancedSolenoid.g_mFeYokeSide1.port_p.V_m;
//   advancedSolenoid.G_mLeakRad.port_n.V_m = advancedSolenoid.g_mFeYokeSide1.port_n.V_m;
//   advancedSolenoid.G_mLeakRad.port_n.V_m = advancedSolenoid.g_mFeYokeSide2.port_p.V_m;
//   advancedSolenoid.g_mFeYokeBot.port_n.V_m = advancedSolenoid.g_mFeYokeSide2.port_n.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mAirPar.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak1.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak2.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.g_mLeak3.port_p.V_m;
//   advancedSolenoid.coil2.port_n.V_m = advancedSolenoid.ground.port.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mFeYokeBot.port_p.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak1.port_n.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak2.port_n.V_m;
//   advancedSolenoid.g_mAirPar.port_n.V_m = advancedSolenoid.g_mLeak3.port_n.V_m;
//   advancedSolenoid.coil2.p.v = advancedSolenoid.r_2.n.v;
//   advancedSolenoid.coil1.p.v = advancedSolenoid.r_1.n.v;
//   advancedLoad.flange_b.f = 0.0;
//   simpleGround.p.i + simpleSource.n.i + simpleSolenoid.n.i = 0.0;
//   simpleSource.p.i + simpleSolenoid.p.i = 0.0;
//   simpleSolenoid.ground.port.Phi + simpleSolenoid.g_mFeArm.port_p.Phi + simpleSolenoid.g_mAirPar.port_p.Phi + simpleSolenoid.g_mLeak1.port_p.Phi + simpleSolenoid.g_mLeak2.port_p.Phi = 0.0;
//   simpleSolenoid.coil.port_p.Phi + simpleSolenoid.g_mAirWork.port_p.Phi + simpleSolenoid.g_mLeakWork.port_p.Phi = 0.0;
//   simpleSolenoid.coil.port_n.Phi + simpleSolenoid.g_mFeArm.port_n.Phi = 0.0;
//   simpleSolenoid.coil.p.i + simpleSolenoid.r.n.i = 0.0;
//   simpleSolenoid.coil.n.i + (-simpleSolenoid.n.i) = 0.0;
//   simpleSolenoid.r.p.i + (-simpleSolenoid.p.i) = 0.0;
//   simpleSolenoid.g_mFeYokeSide.port_p.Phi + simpleSolenoid.g_mFePoleBot.port_n.Phi = 0.0;
//   simpleSolenoid.g_mFeYokeSide.port_n.Phi + simpleSolenoid.g_mFeYokeBot.port_n.Phi = 0.0;
//   simpleSolenoid.g_mAirWork.port_n.Phi + simpleSolenoid.g_mFePole.port_p.Phi + simpleSolenoid.g_mLeakWork.port_n.Phi = 0.0;
//   simpleSolenoid.g_mAirWork.flange.f + simpleSolenoid.armature.flange_a.f + simpleSolenoid.g_mLeakWork.flange.f = 0.0;
//   simpleSolenoid.g_mFeYokeBot.port_p.Phi + simpleSolenoid.g_mAirPar.port_n.Phi + simpleSolenoid.g_mLeak1.port_n.Phi + simpleSolenoid.g_mLeak2.port_n.Phi = 0.0;
//   simpleSolenoid.g_mFePoleBot.port_p.Phi + simpleSolenoid.g_mFePole.port_n.Phi = 0.0;
//   simpleSolenoid.armature.mass.flange_a.f + (-simpleSolenoid.armature.flange_a.f) + simpleSolenoid.armature.stopper_xMin.flange_b.f = 0.0;
//   simpleSolenoid.armature.mass.flange_b.f + (-simpleSolenoid.armature.flange_b.f) + simpleSolenoid.armature.stopper_xMax.flange_a.f = 0.0;
//   simpleSolenoid.armature.flange_b.f + (-simpleSolenoid.flange.f) = 0.0;
//   simpleSolenoid.armature.limit_xMin.flange.f + simpleSolenoid.armature.stopper_xMin.flange_a.f = 0.0;
//   simpleSolenoid.armature.limit_xMax.flange.f + simpleSolenoid.armature.stopper_xMax.flange_b.f = 0.0;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.armature.mass.flange_a.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.armature.stopper_xMin.flange_b.s;
//   simpleSolenoid.armature.limit_xMax.flange.s = simpleSolenoid.armature.stopper_xMax.flange_b.s;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.armature.mass.flange_b.s;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.armature.stopper_xMax.flange_a.s;
//   simpleSolenoid.armature.limit_xMin.flange.s = simpleSolenoid.armature.stopper_xMin.flange_a.s;
//   simpleSolenoid.flange.f + simpleLoad.flange_a.f = 0.0;
//   simpleSolenoid.p.v = simpleSolenoid.r.p.v;
//   simpleSolenoid.armature.flange_b.s = simpleSolenoid.flange.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.g_mAirWork.flange.s;
//   simpleSolenoid.armature.flange_a.s = simpleSolenoid.g_mLeakWork.flange.s;
//   simpleSolenoid.coil.p.v = simpleSolenoid.r.n.v;
//   simpleSolenoid.coil.n.v = simpleSolenoid.n.v;
//   simpleSolenoid.coil.port_p.V_m = simpleSolenoid.g_mAirWork.port_p.V_m;
//   simpleSolenoid.coil.port_p.V_m = simpleSolenoid.g_mLeakWork.port_p.V_m;
//   simpleSolenoid.g_mAirWork.port_n.V_m = simpleSolenoid.g_mFePole.port_p.V_m;
//   simpleSolenoid.g_mAirWork.port_n.V_m = simpleSolenoid.g_mLeakWork.port_n.V_m;
//   simpleSolenoid.g_mFePole.port_n.V_m = simpleSolenoid.g_mFePoleBot.port_p.V_m;
//   simpleSolenoid.g_mFePoleBot.port_n.V_m = simpleSolenoid.g_mFeYokeSide.port_p.V_m;
//   simpleSolenoid.g_mFeYokeBot.port_n.V_m = simpleSolenoid.g_mFeYokeSide.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mFeYokeBot.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mLeak1.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_n.V_m = simpleSolenoid.g_mLeak2.port_n.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mFeArm.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mLeak1.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.g_mLeak2.port_p.V_m;
//   simpleSolenoid.g_mAirPar.port_p.V_m = simpleSolenoid.ground.port.V_m;
//   simpleSolenoid.coil.port_n.V_m = simpleSolenoid.g_mFeArm.port_n.V_m;
//   simpleLoad.flange_b.f = 0.0;
//   advancedGround.p.v = advancedSolenoid.n.v;
//   advancedGround.p.v = advancedSource.n.v;
//   advancedSolenoid.p.v = advancedSource.p.v;
//   advancedLoad.flange_a.s = advancedSolenoid.flange.s;
//   simpleGround.p.v = simpleSolenoid.n.v;
//   simpleGround.p.v = simpleSource.n.v;
//   simpleSolenoid.p.v = simpleSource.p.v;
//   simpleLoad.flange_a.s = simpleSolenoid.flange.s;
// end Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.ComparisonPullInStroke has 508 equation(s) and 508 variable(s).
// 260 of these are trivial equation(s).
// "
// ""
// "function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.0;
//   input Real c_a = 1.0;
//   input Real c_b = 1.0;
//   input Real n = 1.0;
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28 \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 400.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.488;
//   input Real c_a = 1200.0;
//   input Real c_b = 3.0;
//   input Real n = 12.5;
//   output Steel_9SMnPb28 res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox \"Approximation of relative permeability mu_r as a function of flux density B for soft magnetic materials\"
//   input Real B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density in ferromagnetic flux tube element\";
//   input Real mu_i(quantity = \"RelativePermeability\", unit = \"1\") \"Initial relative permeability at B=0\";
//   input Real B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density at maximum relative permeability\";
//   input Real c_a \"Coefficient of approximation function\";
//   input Real c_b \"Coefficient of approximation function\";
//   input Real n \"Exponent of approximation function\";
//   output Real mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability of ferromagnetic flux tube element\";
//   protected Real B_N \"Flux density B normalized to flux density at maximum relative permeability B_myMax\";
// algorithm
//   B_N := abs(B / B_myMax);
//   mu_r := 1.0 + (-1.0 + mu_i + c_a * B_N) / (1.0 + c_b * B_N + B_N ^ n);
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid
//   parameter Real R(quantity = \"Resistance\", unit = \"Ohm\") = 10.0 \"Armature coil resistance\";
//   parameter Real N = 957.0 \"Number of turns\";
//   parameter Real r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real x(quantity = \"Length\", unit = \"m\", start = x_max, StateSelect = StateSelect.prefer) \"Armature position, alias for flange position (identical with length of working air gap)\";
//   protected parameter Real rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real coil.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real coil.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real coil.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real coil.N(start = 1.0) = N \"Number of turns\";
//   Real coil.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real coil.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real coil.eps = 1e-13;
//   Real r.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R \"Resistance at temperature T_ref\";
//   parameter Real r.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real g_mFeYokeSide.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeYokeSide.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeYokeSide.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeYokeSide.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeYokeSide.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeYokeSide.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeYokeSide.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeYokeSide.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeYokeSide.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeYokeSide.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeYokeSide.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeYokeSide.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeYokeSide.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeYokeSide.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke + ((-t_poleBot) / 2.0 + (-t_yokeBot) / 2.0) \"Axial length (in direction of flux)\";
//   parameter Real g_mFeYokeSide.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFeYokeSide.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke + ((-t_yokeBot) / 2.0 + ((-t_poleBot) / 2.0 + ((-x_max) / 2.0 + (-x_min) / 2.0 - l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   Real g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_mAirWork.s(quantity = \"Length\", unit = \"m\") = g_mAirWork.flange.s - g_mAirWork.s_support \"Distance between flange and support\";
//   Real g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_mAirWork.l(quantity = \"Length\", unit = \"m\") = flange.s \"Axial length (in direction of flux)\";
//   parameter Real g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   Real g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (g_mAirWork.r_o ^ 2.0 - g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm + t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_yokeIn \"Outer radius of hollow cylinder\";
//   Real g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Inner radius of hollow cylinder\";
//   parameter Real g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_arm + t_airPar \"Outer radius of hollow cylinder\";
//   Real g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Inner radius of hollow cylinder\";
//   parameter Real g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_yokeIn \"Outer radius of hollow cylinder\";
//   Real g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_pole \"Axial length (in direction of flux)\";
//   parameter Real g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (rho_steel * (l_arm * r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = c \"Spring stiffness between impact partners\";
//   parameter Real armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = d \"Damping coefficient between impact partners\";
//   parameter Real armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = x_max \"Position of stopper at maximum armature position\";
//   parameter Real armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = x_min \"Position of stopper at minimum armature position\";
//   Real armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = armature.x_min \"fixed offset position of housing\";
//   Real armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = armature.x_max \"fixed offset position of housing\";
//   Real armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMax.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMin.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (r_arm + t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = g_mLeakWork.flange.s - g_mLeakWork.s_support \"Distance between flange and support\";
//   Real g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = flange.s \"Axial length (in direction of flux)\";
//   parameter Real g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
// equation
//   ground.port.V_m = 0.0;
//   coil.v = coil.p.v - coil.n.v;
//   0.0 = coil.p.i + coil.n.i;
//   coil.i = coil.p.i;
//   coil.V_m = coil.port_p.V_m - coil.port_n.V_m;
//   0.0 = coil.port_p.Phi + coil.port_n.Phi;
//   coil.Phi = coil.port_p.Phi;
//   coil.V_m = coil.i * coil.N;
//   coil.N * der(coil.Phi) = -coil.v;
//   coil.Psi = coil.N * coil.Phi;
//   coil.L_stat = if noEvent(abs(coil.i) > coil.eps) then abs(coil.Psi / coil.i) else abs(coil.Psi / coil.eps);
//   assert(1.0 + r.alpha * (r.T_heatPort - r.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r.R_actual = r.R * (1.0 + r.alpha * (r.T_heatPort - r.T_ref));
//   r.v = r.R_actual * r.i;
//   r.LossPower = r.v * r.i;
//   r.i = r.p.i;
//   0.0 = r.p.i + r.n.i;
//   r.v = r.p.v - r.n.v;
//   r.T_heatPort = r.T;
//   g_mFeYokeSide.A = 3.14159265358979 * (g_mFeYokeSide.r_o ^ 2.0 - g_mFeYokeSide.r_i ^ 2.0);
//   g_mFeYokeSide.G_m = (1.25663706143592e-06 * (g_mFeYokeSide.mu_r * g_mFeYokeSide.A)) / g_mFeYokeSide.l;
//   g_mFeYokeSide.H = g_mFeYokeSide.B / (g_mFeYokeSide.mu_r * 1.25663706143592e-06);
//   g_mFeYokeSide.B = g_mFeYokeSide.Phi / g_mFeYokeSide.A;
//   g_mFeYokeSide.V_m = g_mFeYokeSide.Phi * g_mFeYokeSide.R_m;
//   g_mFeYokeSide.R_m = 1.0 / g_mFeYokeSide.G_m;
//   g_mFeYokeSide.mu_r = if g_mFeYokeSide.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeYokeSide.B,g_mFeYokeSide.material.mu_i,g_mFeYokeSide.material.B_myMax,g_mFeYokeSide.material.c_a,g_mFeYokeSide.material.c_b,g_mFeYokeSide.material.n) else g_mFeYokeSide.mu_rConst;
//   g_mFeYokeSide.V_m = g_mFeYokeSide.port_p.V_m - g_mFeYokeSide.port_n.V_m;
//   g_mFeYokeSide.Phi = g_mFeYokeSide.port_p.Phi;
//   0.0 = g_mFeYokeSide.port_p.Phi + g_mFeYokeSide.port_n.Phi;
//   g_mFeArm.A = 3.14159265358979 * (g_mFeArm.r_o ^ 2.0 - g_mFeArm.r_i ^ 2.0);
//   g_mFeArm.G_m = (1.25663706143592e-06 * (g_mFeArm.mu_r * g_mFeArm.A)) / g_mFeArm.l;
//   g_mFeArm.H = g_mFeArm.B / (g_mFeArm.mu_r * 1.25663706143592e-06);
//   g_mFeArm.B = g_mFeArm.Phi / g_mFeArm.A;
//   g_mFeArm.V_m = g_mFeArm.Phi * g_mFeArm.R_m;
//   g_mFeArm.R_m = 1.0 / g_mFeArm.G_m;
//   g_mFeArm.mu_r = if g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeArm.B,g_mFeArm.material.mu_i,g_mFeArm.material.B_myMax,g_mFeArm.material.c_a,g_mFeArm.material.c_b,g_mFeArm.material.n) else g_mFeArm.mu_rConst;
//   g_mFeArm.V_m = g_mFeArm.port_p.V_m - g_mFeArm.port_n.V_m;
//   g_mFeArm.Phi = g_mFeArm.port_p.Phi;
//   0.0 = g_mFeArm.port_p.Phi + g_mFeArm.port_n.Phi;
//   g_mAirWork.G_m = (1.25663706143592e-06 * (g_mAirWork.mu_r * g_mAirWork.A)) / g_mAirWork.l;
//   g_mAirWork.dGmBydx = -1.25663706143592e-06 * (g_mAirWork.mu_r * (g_mAirWork.A * (g_mAirWork.l ^ -2.0 * Real(g_mAirWork.dlBydx))));
//   g_mAirWork.B = g_mAirWork.Phi / g_mAirWork.A;
//   g_mAirWork.flange.f = -g_mAirWork.F_m;
//   g_mAirWork.s_support = 0.0;
//   g_mAirWork.F_m = 0.5 * (g_mAirWork.V_m ^ 2.0 * g_mAirWork.dGmBydx);
//   g_mAirWork.R_m = 1.0 / g_mAirWork.G_m;
//   g_mAirWork.V_m = g_mAirWork.Phi * g_mAirWork.R_m;
//   g_mAirWork.V_m = g_mAirWork.port_p.V_m - g_mAirWork.port_n.V_m;
//   g_mAirWork.Phi = g_mAirWork.port_p.Phi;
//   0.0 = g_mAirWork.port_p.Phi + g_mAirWork.port_n.Phi;
//   g_mFeYokeBot.A = 3.14159265358979 * (g_mFeYokeBot.l * (g_mFeYokeBot.r_o + g_mFeYokeBot.r_i));
//   g_mFeYokeBot.G_m = (7.89568352087149e-06 * (g_mFeYokeBot.mu_r * g_mFeYokeBot.l)) / log(g_mFeYokeBot.r_o / g_mFeYokeBot.r_i);
//   g_mFeYokeBot.H = g_mFeYokeBot.B / (g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   g_mFeYokeBot.B = g_mFeYokeBot.Phi / g_mFeYokeBot.A;
//   g_mFeYokeBot.V_m = g_mFeYokeBot.Phi * g_mFeYokeBot.R_m;
//   g_mFeYokeBot.R_m = 1.0 / g_mFeYokeBot.G_m;
//   g_mFeYokeBot.mu_r = if g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeYokeBot.B,g_mFeYokeBot.material.mu_i,g_mFeYokeBot.material.B_myMax,g_mFeYokeBot.material.c_a,g_mFeYokeBot.material.c_b,g_mFeYokeBot.material.n) else g_mFeYokeBot.mu_rConst;
//   g_mFeYokeBot.V_m = g_mFeYokeBot.port_p.V_m - g_mFeYokeBot.port_n.V_m;
//   g_mFeYokeBot.Phi = g_mFeYokeBot.port_p.Phi;
//   0.0 = g_mFeYokeBot.port_p.Phi + g_mFeYokeBot.port_n.Phi;
//   g_mAirPar.A = 3.14159265358979 * (g_mAirPar.l * (g_mAirPar.r_o + g_mAirPar.r_i));
//   g_mAirPar.G_m = (7.89568352087149e-06 * (g_mAirPar.mu_r * g_mAirPar.l)) / log(g_mAirPar.r_o / g_mAirPar.r_i);
//   g_mAirPar.H = g_mAirPar.B / (g_mAirPar.mu_r * 1.25663706143592e-06);
//   g_mAirPar.B = g_mAirPar.Phi / g_mAirPar.A;
//   g_mAirPar.V_m = g_mAirPar.Phi * g_mAirPar.R_m;
//   g_mAirPar.R_m = 1.0 / g_mAirPar.G_m;
//   g_mAirPar.mu_r = if g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mAirPar.B,g_mAirPar.material.mu_i,g_mAirPar.material.B_myMax,g_mAirPar.material.c_a,g_mAirPar.material.c_b,g_mAirPar.material.n) else g_mAirPar.mu_rConst;
//   g_mAirPar.V_m = g_mAirPar.port_p.V_m - g_mAirPar.port_n.V_m;
//   g_mAirPar.Phi = g_mAirPar.port_p.Phi;
//   0.0 = g_mAirPar.port_p.Phi + g_mAirPar.port_n.Phi;
//   g_mFePoleBot.A = 3.14159265358979 * (g_mFePoleBot.l * (g_mFePoleBot.r_o + g_mFePoleBot.r_i));
//   g_mFePoleBot.G_m = (7.89568352087149e-06 * (g_mFePoleBot.mu_r * g_mFePoleBot.l)) / log(g_mFePoleBot.r_o / g_mFePoleBot.r_i);
//   g_mFePoleBot.H = g_mFePoleBot.B / (g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   g_mFePoleBot.B = g_mFePoleBot.Phi / g_mFePoleBot.A;
//   g_mFePoleBot.V_m = g_mFePoleBot.Phi * g_mFePoleBot.R_m;
//   g_mFePoleBot.R_m = 1.0 / g_mFePoleBot.G_m;
//   g_mFePoleBot.mu_r = if g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFePoleBot.B,g_mFePoleBot.material.mu_i,g_mFePoleBot.material.B_myMax,g_mFePoleBot.material.c_a,g_mFePoleBot.material.c_b,g_mFePoleBot.material.n) else g_mFePoleBot.mu_rConst;
//   g_mFePoleBot.V_m = g_mFePoleBot.port_p.V_m - g_mFePoleBot.port_n.V_m;
//   g_mFePoleBot.Phi = g_mFePoleBot.port_p.Phi;
//   0.0 = g_mFePoleBot.port_p.Phi + g_mFePoleBot.port_n.Phi;
//   g_mFePole.A = 3.14159265358979 * (g_mFePole.r_o ^ 2.0 - g_mFePole.r_i ^ 2.0);
//   g_mFePole.G_m = (1.25663706143592e-06 * (g_mFePole.mu_r * g_mFePole.A)) / g_mFePole.l;
//   g_mFePole.H = g_mFePole.B / (g_mFePole.mu_r * 1.25663706143592e-06);
//   g_mFePole.B = g_mFePole.Phi / g_mFePole.A;
//   g_mFePole.V_m = g_mFePole.Phi * g_mFePole.R_m;
//   g_mFePole.R_m = 1.0 / g_mFePole.G_m;
//   g_mFePole.mu_r = if g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFePole.B,g_mFePole.material.mu_i,g_mFePole.material.B_myMax,g_mFePole.material.c_a,g_mFePole.material.c_b,g_mFePole.material.n) else g_mFePole.mu_rConst;
//   g_mFePole.V_m = g_mFePole.port_p.V_m - g_mFePole.port_n.V_m;
//   g_mFePole.Phi = g_mFePole.port_p.Phi;
//   0.0 = g_mFePole.port_p.Phi + g_mFePole.port_n.Phi;
//   armature.mass.v = der(armature.mass.s);
//   armature.mass.a = der(armature.mass.v);
//   armature.mass.m * armature.mass.a = armature.mass.flange_a.f + armature.mass.flange_b.f;
//   armature.mass.flange_a.s = armature.mass.s + (-armature.mass.L) / 2.0;
//   armature.mass.flange_b.s = armature.mass.s + armature.mass.L / 2.0;
//   armature.limit_xMin.flange.s = armature.limit_xMin.s0;
//   armature.limit_xMax.flange.s = armature.limit_xMax.s0;
//   armature.stopper_xMax.contact = armature.stopper_xMax.s_rel < armature.stopper_xMax.s_rel0;
//   armature.stopper_xMax.f_c = smooth(1,if armature.stopper_xMax.contact then (-armature.stopper_xMax.c) * abs(armature.stopper_xMax.s_rel - armature.stopper_xMax.s_rel0) ^ armature.stopper_xMax.n else 0.0);
//   armature.stopper_xMax.f_d2 = if armature.stopper_xMax.contact then armature.stopper_xMax.d * armature.stopper_xMax.v_rel else 0.0;
//   armature.stopper_xMax.f_d = if armature.stopper_xMax.contact then if noEvent(armature.stopper_xMax.f_d2 < armature.stopper_xMax.f_c) then armature.stopper_xMax.f_c else if noEvent(armature.stopper_xMax.f_d2 > -armature.stopper_xMax.f_c) then -armature.stopper_xMax.f_c else armature.stopper_xMax.f_d2 else 0.0;
//   armature.stopper_xMax.f = armature.stopper_xMax.f_c + armature.stopper_xMax.f_d;
//   armature.stopper_xMax.s_rel = armature.stopper_xMax.flange_b.s - armature.stopper_xMax.flange_a.s;
//   armature.stopper_xMax.v_rel = der(armature.stopper_xMax.s_rel);
//   armature.stopper_xMax.flange_b.f = armature.stopper_xMax.f;
//   armature.stopper_xMax.flange_a.f = -armature.stopper_xMax.f;
//   armature.stopper_xMin.contact = armature.stopper_xMin.s_rel < armature.stopper_xMin.s_rel0;
//   armature.stopper_xMin.f_c = smooth(1,if armature.stopper_xMin.contact then (-armature.stopper_xMin.c) * abs(armature.stopper_xMin.s_rel - armature.stopper_xMin.s_rel0) ^ armature.stopper_xMin.n else 0.0);
//   armature.stopper_xMin.f_d2 = if armature.stopper_xMin.contact then armature.stopper_xMin.d * armature.stopper_xMin.v_rel else 0.0;
//   armature.stopper_xMin.f_d = if armature.stopper_xMin.contact then if noEvent(armature.stopper_xMin.f_d2 < armature.stopper_xMin.f_c) then armature.stopper_xMin.f_c else if noEvent(armature.stopper_xMin.f_d2 > -armature.stopper_xMin.f_c) then -armature.stopper_xMin.f_c else armature.stopper_xMin.f_d2 else 0.0;
//   armature.stopper_xMin.f = armature.stopper_xMin.f_c + armature.stopper_xMin.f_d;
//   armature.stopper_xMin.s_rel = armature.stopper_xMin.flange_b.s - armature.stopper_xMin.flange_a.s;
//   armature.stopper_xMin.v_rel = der(armature.stopper_xMin.s_rel);
//   armature.stopper_xMin.flange_b.f = armature.stopper_xMin.f;
//   armature.stopper_xMin.flange_a.f = -armature.stopper_xMin.f;
//   armature.mass.s = armature.s;
//   armature.mass.v = armature.v;
//   armature.mass.a = armature.a;
//   g_mLeak1.G_m = 6.53451271946677e-07 * g_mLeak1.l;
//   g_mLeak1.R_m = 1.0 / g_mLeak1.G_m;
//   g_mLeak1.V_m = g_mLeak1.Phi * g_mLeak1.R_m;
//   g_mLeak1.V_m = g_mLeak1.port_p.V_m - g_mLeak1.port_n.V_m;
//   g_mLeak1.Phi = g_mLeak1.port_p.Phi;
//   0.0 = g_mLeak1.port_p.Phi + g_mLeak1.port_n.Phi;
//   g_mLeak2.G_m = 8e-07 * (g_mLeak2.l * log(1.0 + g_mLeak2.ratio));
//   g_mLeak2.R_m = 1.0 / g_mLeak2.G_m;
//   g_mLeak2.V_m = g_mLeak2.Phi * g_mLeak2.R_m;
//   g_mLeak2.V_m = g_mLeak2.port_p.V_m - g_mLeak2.port_n.V_m;
//   g_mLeak2.Phi = g_mLeak2.port_p.Phi;
//   0.0 = g_mLeak2.port_p.Phi + g_mLeak2.port_n.Phi;
//   g_mLeakWork.G_m = 4e-07 * (g_mLeakWork.w * log(1.0 + (3.14159265358979 * g_mLeakWork.r) / g_mLeakWork.l));
//   g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (g_mLeakWork.w * (g_mLeakWork.r * (Real(g_mLeakWork.dlBydx) * g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * g_mLeakWork.r) / g_mLeakWork.l);
//   g_mLeakWork.flange.f = -g_mLeakWork.F_m;
//   g_mLeakWork.s_support = 0.0;
//   g_mLeakWork.F_m = 0.5 * (g_mLeakWork.V_m ^ 2.0 * g_mLeakWork.dGmBydx);
//   g_mLeakWork.R_m = 1.0 / g_mLeakWork.G_m;
//   g_mLeakWork.V_m = g_mLeakWork.Phi * g_mLeakWork.R_m;
//   g_mLeakWork.V_m = g_mLeakWork.port_p.V_m - g_mLeakWork.port_n.V_m;
//   g_mLeakWork.Phi = g_mLeakWork.port_p.Phi;
//   0.0 = g_mLeakWork.port_p.Phi + g_mLeakWork.port_n.Phi;
//   x = flange.s;
//   ground.port.Phi + g_mFeArm.port_p.Phi + g_mAirPar.port_p.Phi + g_mLeak1.port_p.Phi + g_mLeak2.port_p.Phi = 0.0;
//   coil.port_p.Phi + g_mAirWork.port_p.Phi + g_mLeakWork.port_p.Phi = 0.0;
//   coil.port_n.Phi + g_mFeArm.port_n.Phi = 0.0;
//   coil.p.i + r.n.i = 0.0;
//   coil.n.i + (-n.i) = 0.0;
//   r.p.i + (-p.i) = 0.0;
//   g_mFeYokeSide.port_p.Phi + g_mFePoleBot.port_n.Phi = 0.0;
//   g_mFeYokeSide.port_n.Phi + g_mFeYokeBot.port_n.Phi = 0.0;
//   g_mAirWork.port_n.Phi + g_mFePole.port_p.Phi + g_mLeakWork.port_n.Phi = 0.0;
//   g_mAirWork.flange.f + armature.flange_a.f + g_mLeakWork.flange.f = 0.0;
//   g_mFeYokeBot.port_p.Phi + g_mAirPar.port_n.Phi + g_mLeak1.port_n.Phi + g_mLeak2.port_n.Phi = 0.0;
//   g_mFePoleBot.port_p.Phi + g_mFePole.port_n.Phi = 0.0;
//   armature.mass.flange_a.f + (-armature.flange_a.f) + armature.stopper_xMin.flange_b.f = 0.0;
//   armature.mass.flange_b.f + (-armature.flange_b.f) + armature.stopper_xMax.flange_a.f = 0.0;
//   armature.flange_b.f + (-flange.f) = 0.0;
//   armature.limit_xMin.flange.f + armature.stopper_xMin.flange_a.f = 0.0;
//   armature.limit_xMax.flange.f + armature.stopper_xMax.flange_b.f = 0.0;
//   armature.flange_a.s = armature.mass.flange_a.s;
//   armature.flange_a.s = armature.stopper_xMin.flange_b.s;
//   armature.limit_xMax.flange.s = armature.stopper_xMax.flange_b.s;
//   armature.flange_b.s = armature.mass.flange_b.s;
//   armature.flange_b.s = armature.stopper_xMax.flange_a.s;
//   armature.limit_xMin.flange.s = armature.stopper_xMin.flange_a.s;
//   p.i = 0.0;
//   n.i = 0.0;
//   flange.f = 0.0;
//   p.v = r.p.v;
//   armature.flange_b.s = flange.s;
//   armature.flange_a.s = g_mAirWork.flange.s;
//   armature.flange_a.s = g_mLeakWork.flange.s;
//   coil.p.v = r.n.v;
//   coil.n.v = n.v;
//   coil.port_p.V_m = g_mAirWork.port_p.V_m;
//   coil.port_p.V_m = g_mLeakWork.port_p.V_m;
//   g_mAirWork.port_n.V_m = g_mFePole.port_p.V_m;
//   g_mAirWork.port_n.V_m = g_mLeakWork.port_n.V_m;
//   g_mFePole.port_n.V_m = g_mFePoleBot.port_p.V_m;
//   g_mFePoleBot.port_n.V_m = g_mFeYokeSide.port_p.V_m;
//   g_mFeYokeBot.port_n.V_m = g_mFeYokeSide.port_n.V_m;
//   g_mAirPar.port_n.V_m = g_mFeYokeBot.port_p.V_m;
//   g_mAirPar.port_n.V_m = g_mLeak1.port_n.V_m;
//   g_mAirPar.port_n.V_m = g_mLeak2.port_n.V_m;
//   g_mAirPar.port_p.V_m = g_mFeArm.port_p.V_m;
//   g_mAirPar.port_p.V_m = g_mLeak1.port_p.V_m;
//   g_mAirPar.port_p.V_m = g_mLeak2.port_p.V_m;
//   g_mAirPar.port_p.V_m = ground.port.V_m;
//   coil.port_n.V_m = g_mFeArm.port_n.V_m;
// end Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.SimpleSolenoid has 192 equation(s) and 192 variable(s).
// 98 of these are trivial equation(s).
// "
// ""
// "function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 1.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.0;
//   input Real c_a = 1.0;
//   input Real c_b = 1.0;
//   input Real n = 1.0;
//   output BaseData res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.BaseData;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28 \"Automatically generated record constructor for Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28\"
//   input Real(quantity=\"RelativePermeability\", unit=\"1\") mu_i = 400.0;
//   input Real(quantity=\"MagneticFluxDensity\", unit=\"T\") B_myMax = 1.488;
//   input Real c_a = 1200.0;
//   input Real c_b = 3.0;
//   input Real n = 12.5;
//   output Steel_9SMnPb28 res;
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.Steel.Steel_9SMnPb28;
// 
// function Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox \"Approximation of relative permeability mu_r as a function of flux density B for soft magnetic materials\"
//   input Real B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density in ferromagnetic flux tube element\";
//   input Real mu_i(quantity = \"RelativePermeability\", unit = \"1\") \"Initial relative permeability at B=0\";
//   input Real B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Flux density at maximum relative permeability\";
//   input Real c_a \"Coefficient of approximation function\";
//   input Real c_b \"Coefficient of approximation function\";
//   input Real n \"Exponent of approximation function\";
//   output Real mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability of ferromagnetic flux tube element\";
//   protected Real B_N \"Flux density B normalized to flux density at maximum relative permeability B_myMax\";
// algorithm
//   B_N := abs(B / B_myMax);
//   mu_r := 1.0 + (-1.0 + mu_i + c_a * B_N) / (1.0 + c_b * B_N + B_N ^ n);
// end Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid
//   parameter Real N = 957.0 \"Number of turns\";
//   parameter Real R(quantity = \"Resistance\", unit = \"Ohm\") = 5.0 \"Coil resistance\";
//   parameter Real R_par(quantity = \"Resistance\", unit = \"Ohm\") = 100000.0 \"Resistance parallel to the coil, in series to C_par\";
//   parameter Real C_par(quantity = \"Capacitance\", unit = \"F\", min = 0.0) = 1e-09 \"Capacitance parallel to the coil, in series to R_par\";
//   parameter Real r_yokeOut(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.015 \"Outer yoke radius\";
//   parameter Real r_yokeIn(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0135 \"Inner yoke radius\";
//   parameter Real l_yoke(quantity = \"Length\", unit = \"m\") = 0.035 \"Axial yoke length\";
//   parameter Real t_yokeBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of yoke bottom\";
//   parameter Real l_pole(quantity = \"Length\", unit = \"m\") = 0.0065 \"Axial length of pole\";
//   parameter Real t_poleBot(quantity = \"Length\", unit = \"m\") = 0.0035 \"Axial thickness of bottom at pole side\";
//   parameter Real t_airPar(quantity = \"Length\", unit = \"m\") = 0.00065 \"Radial thickness of parasitic air gap due to slide guiding\";
//   parameter Real material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real material.n = 12.5 \"Exponent of approximation function\";
//   parameter Real r_arm(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.005 \"Armature radius = pole radius\";
//   parameter Real l_arm(quantity = \"Length\", unit = \"m\") = 0.026 \"Armature length\";
//   parameter Real c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\") = 100000000000.0 \"Spring stiffness between impact partners\";
//   parameter Real d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\") = 400.0 \"Damping coefficient between impact partners\";
//   parameter Real x_min(quantity = \"Length\", unit = \"m\") = 0.00025 \"Stopper at minimum armature position\";
//   parameter Real x_max(quantity = \"Length\", unit = \"m\") = 0.005 \"Stopper at maximum armature position\";
//   Real x(quantity = \"Length\", unit = \"m\", start = x_max, StateSelect = StateSelect.prefer) \"Armature position\";
//   Real Psi_tot(quantity = \"MagneticFlux\", unit = \"Wb\") \"Total flux linkage for information only\";
//   Real L_statTot(quantity = \"Inductance\", unit = \"H\") \"Total static inductance for information only\";
//   protected parameter Real rho_steel(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7853.0 \"Density for calculation of armature mass from geometry\";
//   Real ground.port.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real ground.port.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real coil1.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real coil1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real coil1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real coil1.N(start = 1.0) = N / 2.0 \"Number of turns\";
//   Real coil1.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real coil1.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real coil1.eps = 1e-13;
//   Real r_1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r_1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r_1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r_1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r_1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r_1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r_1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r_1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r_1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r_1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R \"Resistance at temperature T_ref\";
//   parameter Real r_1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r_1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real g_mFeYokeSide1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeYokeSide1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeYokeSide1.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeYokeSide1.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeYokeSide1.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeYokeSide1.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeYokeSide1.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide1.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide1.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeYokeSide1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeYokeSide1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeYokeSide1.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeYokeSide1.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeYokeSide1.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeYokeSide1.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeYokeSide1.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke / 2.0 + (-t_poleBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real g_mFeYokeSide1.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFeYokeSide1.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real g_mFeArm.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeArm.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeArm.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeArm.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeArm.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeArm.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeArm.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeArm.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeArm.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeArm.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeArm.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeArm.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeArm.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeArm.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeArm.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeArm.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeArm.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeArm.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeArm.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeArm.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke + ((-t_yokeBot) / 2.0 + ((-t_poleBot) / 2.0 + ((-x_max) / 2.0 + (-x_min) / 2.0 - l_pole))) \"Axial length (in direction of flux)\";
//   parameter Real g_mFeArm.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFeArm.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   Real g_mAirWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mAirWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mAirWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_mAirWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real g_mAirWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_mAirWork.s(quantity = \"Length\", unit = \"m\") = g_mAirWork.flange.s - g_mAirWork.s_support \"Distance between flange and support\";
//   Real g_mAirWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mAirWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mAirWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_mAirWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_mAirWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_mAirWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_mAirWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_mAirWork.l(quantity = \"Length\", unit = \"m\") = flange.s \"Axial length (in direction of flux)\";
//   parameter Real g_mAirWork.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = 0.0 \"Inner radius of (hollow) cylinder\";
//   parameter Real g_mAirWork.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   Real g_mAirWork.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Homogeneous flux density\";
//   protected parameter Real g_mAirWork.A(quantity = \"Area\", unit = \"m2\") = 3.14159265358979 * (g_mAirWork.r_o ^ 2.0 - g_mAirWork.r_i ^ 2.0) \"Cross-sectional area orthogonal to direction of flux\";
//   Real g_mFeYokeBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeYokeBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeYokeBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeYokeBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeYokeBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeYokeBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeYokeBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeYokeBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeYokeBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeYokeBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeYokeBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeYokeBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeYokeBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeYokeBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mFeYokeBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm + t_airPar \"Inner radius of hollow cylinder\";
//   parameter Real g_mFeYokeBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_yokeIn \"Outer radius of hollow cylinder\";
//   Real g_mAirPar.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirPar.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirPar.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mAirPar.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mAirPar.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mAirPar.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mAirPar.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mAirPar.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mAirPar.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mAirPar.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real g_mAirPar.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real g_mAirPar.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real g_mAirPar.material.n = 1.0 \"Exponent of approximation function\";
//   Real g_mAirPar.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mAirPar.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mAirPar.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mAirPar.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mAirPar.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mAirPar.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mAirPar.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_yokeBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mAirPar.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Inner radius of hollow cylinder\";
//   parameter Real g_mAirPar.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_arm + t_airPar \"Outer radius of hollow cylinder\";
//   Real g_mFePoleBot.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePoleBot.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePoleBot.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePoleBot.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePoleBot.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFePoleBot.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFePoleBot.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFePoleBot.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFePoleBot.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFePoleBot.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFePoleBot.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePoleBot.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePoleBot.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFePoleBot.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFePoleBot.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFePoleBot.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFePoleBot.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFePoleBot.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFePoleBot.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFePoleBot.l(quantity = \"Length\", unit = \"m\", start = 0.01) = t_poleBot \"Width (orthogonal to flux direction)\";
//   parameter Real g_mFePoleBot.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Inner radius of hollow cylinder\";
//   parameter Real g_mFePoleBot.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_yokeIn \"Outer radius of hollow cylinder\";
//   Real g_mFePole.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePole.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePole.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFePole.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFePole.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFePole.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFePole.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFePole.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFePole.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFePole.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFePole.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePole.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFePole.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFePole.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFePole.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFePole.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFePole.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFePole.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFePole.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFePole.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_pole \"Axial length (in direction of flux)\";
//   parameter Real g_mFePole.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFePole.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Outer radius of (hollow) cylinder\";
//   parameter Real armature.L(quantity = \"Length\", unit = \"m\", start = 0.0) = 0.0 \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real armature.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = 3.14159265358979 * (rho_steel * (l_arm * r_arm ^ 2.0)) \"Armature mass\";
//   parameter Real armature.c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) = c \"Spring stiffness between impact partners\";
//   parameter Real armature.d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) = d \"Damping coefficient between impact partners\";
//   parameter Real armature.n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real armature.x_max(quantity = \"Length\", unit = \"m\", start = 0.01) = x_max \"Position of stopper at maximum armature position\";
//   parameter Real armature.x_min(quantity = \"Length\", unit = \"m\", start = 0.0) = x_min \"Position of stopper at minimum armature position\";
//   Real armature.s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real armature.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, fixed = true) \"Absolute velocity of components (= der(s))\";
//   Real armature.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real armature.mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real armature.mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = armature.L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real armature.mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = armature.m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real armature.mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real armature.mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real armature.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMin.s0(quantity = \"Length\", unit = \"m\") = armature.x_min \"fixed offset position of housing\";
//   Real armature.limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.limit_xMax.s0(quantity = \"Length\", unit = \"m\") = armature.x_max \"fixed offset position of housing\";
//   Real armature.limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMax.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) armature.stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real armature.stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real armature.stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = armature.stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real armature.stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real armature.stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real armature.stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real armature.stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real armature.stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real armature.stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = armature.c \"Spring constant\";
//   parameter Real armature.stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = armature.d \"Damping constant\";
//   parameter Real armature.stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real armature.stopper_xMin.n(min = 1.0) = armature.n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean armature.stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real armature.stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real armature.stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real armature.stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   Real g_mLeak1.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak1.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak1.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak1.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak1.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak1.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak1.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (r_arm + t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real g_mLeak2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak2.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * r_arm \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>r_i)\";
//   parameter Real g_mLeak2.ratio(start = 1.0) = 8.0 \"Constant ratio t/r_i\";
//   Real coil2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real coil2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real coil2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real coil2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real coil2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage\";
//   Real coil2.i(quantity = \"ElectricCurrent\", unit = \"A\", start = 0.0, fixed = true, StateSelect = StateSelect.prefer) \"Current\";
//   Real coil2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference\";
//   Real coil2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux coupled into magnetic circuit\";
//   parameter Real coil2.N(start = 1.0) = N / 2.0 \"Number of turns\";
//   Real coil2.Psi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Flux linkage for information only\";
//   Real coil2.L_stat(quantity = \"Inductance\", unit = \"H\") \"Static inductance abs(Psi/i) for information only\";
//   protected Real coil2.eps = 1e-13;
//   Real c_par1.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real c_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real c_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real c_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real c_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real c_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real c_par1.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = C_par \"Capacitance\";
//   Real G_mLeakRad.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real G_mLeakRad.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real G_mLeakRad.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real G_mLeakRad.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real G_mLeakRad.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real G_mLeakRad.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean G_mLeakRad.nonLinearPermeability = false \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real G_mLeakRad.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real G_mLeakRad.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Initial relative permeability at B=0\";
//   parameter Real G_mLeakRad.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.0 \"Flux density at maximum relative permeability\";
//   parameter Real G_mLeakRad.material.c_a = 1.0 \"Coefficient of approximation function\";
//   parameter Real G_mLeakRad.material.c_b = 1.0 \"Coefficient of approximation function\";
//   parameter Real G_mLeakRad.material.n = 1.0 \"Exponent of approximation function\";
//   Real G_mLeakRad.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real G_mLeakRad.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real G_mLeakRad.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real G_mLeakRad.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real G_mLeakRad.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real G_mLeakRad.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real G_mLeakRad.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke / 4.0 \"Width (orthogonal to flux direction)\";
//   parameter Real G_mLeakRad.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_arm \"Inner radius of hollow cylinder\";
//   parameter Real G_mLeakRad.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.02) = r_yokeIn \"Outer radius of hollow cylinder\";
//   Real g_mFeYokeSide2.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide2.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide2.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mFeYokeSide2.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mFeYokeSide2.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mFeYokeSide2.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mFeYokeSide2.nonLinearPermeability = true \"= true, if non-linear rel. permeability is used, otherwise constant rel. permeability\";
//   parameter Real g_mFeYokeSide2.mu_rConst(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Constant relative permeability; used if nonLinearPermeability = false\";
//   parameter Real g_mFeYokeSide2.material.mu_i(quantity = \"RelativePermeability\", unit = \"1\") = 400.0 \"Initial relative permeability at B=0\";
//   parameter Real g_mFeYokeSide2.material.B_myMax(quantity = \"MagneticFluxDensity\", unit = \"T\") = 1.488 \"Flux density at maximum relative permeability\";
//   parameter Real g_mFeYokeSide2.material.c_a = 1200.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide2.material.c_b = 3.0 \"Coefficient of approximation function\";
//   parameter Real g_mFeYokeSide2.material.n = 12.5 \"Exponent of approximation function\";
//   Real g_mFeYokeSide2.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mFeYokeSide2.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mFeYokeSide2.B(quantity = \"MagneticFluxDensity\", unit = \"T\") \"Magnetic flux density\";
//   Real g_mFeYokeSide2.A(quantity = \"Area\", unit = \"m2\") \"Cross-sectional area penetrated by magnetic flux\";
//   Real g_mFeYokeSide2.H(quantity = \"MagneticFieldStrength\", unit = \"A/m\") \"Magnetic field strength\";
//   Real g_mFeYokeSide2.mu_r(quantity = \"RelativePermeability\", unit = \"1\") \"Relative magnetic permeability\";
//   parameter Real g_mFeYokeSide2.l(quantity = \"Length\", unit = \"m\", start = 0.01) = l_yoke / 2.0 + (-t_yokeBot) / 2.0 \"Axial length (in direction of flux)\";
//   parameter Real g_mFeYokeSide2.r_i(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0) = r_yokeIn \"Inner radius of hollow cylinder (zero for cylinder)\";
//   parameter Real g_mFeYokeSide2.r_o(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = r_yokeOut \"Outer radius of (hollow) cylinder\";
//   Real c_par2.v(quantity = \"ElectricPotential\", unit = \"V\", start = 0.0, fixed = true) \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real c_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real c_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real c_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real c_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real c_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Real c_par2.C(quantity = \"Capacitance\", unit = \"F\", min = 0.0, start = 1.0) = C_par \"Capacitance\";
//   Real r_par1.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r_par1.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r_par1.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_par1.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r_par1.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_par1.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r_par1.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r_par1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r_par1.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r_par1.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r_par1.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r_par1.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R_par \"Resistance at temperature T_ref\";
//   parameter Real r_par1.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r_par1.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_par1.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_par2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r_par2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r_par2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_par2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r_par2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_par2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r_par2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r_par2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r_par2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r_par2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r_par2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r_par2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R_par \"Resistance at temperature T_ref\";
//   parameter Real r_par2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r_par2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_par2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_2.v(quantity = \"ElectricPotential\", unit = \"V\") \"Voltage drop between the two pins (= p.v - n.v)\";
//   Real r_2.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing from pin p to pin n\";
//   Real r_2.p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_2.p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real r_2.n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real r_2.n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   parameter Boolean r_2.useHeatPort = false \"=true, if HeatPort is enabled\";
//   parameter Real r_2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = r_2.T_ref \"Fixed device temperature if useHeatPort = false\";
//   Real r_2.LossPower(quantity = \"Power\", unit = \"W\") \"Loss power leaving component via HeatPort\";
//   Real r_2.T_heatPort(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature of HeatPort\";
//   parameter Real r_2.R(quantity = \"Resistance\", unit = \"Ohm\", start = 1.0) = R \"Resistance at temperature T_ref\";
//   parameter Real r_2.T_ref(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 300.15 \"Reference temperature\";
//   parameter Real r_2.alpha(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0 \"Temperature coefficient of resistance (R_actual = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real r_2.R_actual(quantity = \"Resistance\", unit = \"Ohm\") \"Actual resistance = R*(1 + alpha*(T_heatPort - T_ref))\";
//   Real g_mLeak3.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak3.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak3.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeak3.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeak3.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeak3.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   Real g_mLeak3.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeak3.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   parameter Real g_mLeak3.l(quantity = \"Length\", unit = \"m\", start = 0.1) = 6.28318530717959 * (r_arm + t_airPar / 2.0) \"Axial length orthogonal to flux (=2*pi*r for cylindrical pole and r>>distance between edge and plane)\";
//   Real g_mLeakWork.port_p.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeakWork.port_p.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeakWork.port_n.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential at the port\";
//   Real g_mLeakWork.port_n.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux flowing into the port\";
//   Real g_mLeakWork.V_m(quantity = \"MagneticPotential\", unit = \"A\") \"Magnetic potential difference between both ports\";
//   Real g_mLeakWork.Phi(quantity = \"MagneticFlux\", unit = \"Wb\") \"Magnetic flux from port_p to port_n\";
//   parameter Boolean g_mLeakWork.useSupport = false \"= true, if support flange enabled, otherwise implicitly grounded\";
//   parameter Real g_mLeakWork.mu_r(quantity = \"RelativePermeability\", unit = \"1\") = 1.0 \"Relative magnetic permeability\";
//   Real g_mLeakWork.F_m(quantity = \"Force\", unit = \"N\") \"Reluctance force\";
//   Real g_mLeakWork.s(quantity = \"Length\", unit = \"m\") = g_mLeakWork.flange.s - g_mLeakWork.s_support \"Distance between flange and support\";
//   Real g_mLeakWork.R_m(quantity = \"Reluctance\", unit = \"H-1\") \"Magnetic reluctance\";
//   Real g_mLeakWork.G_m(quantity = \"Permeance\", unit = \"H\") \"Magnetic permeance\";
//   Real g_mLeakWork.dGmBydx(quantity = \"Permeability\", unit = \"H/m\") \"Derivative of permeance with respect to armature position\";
//   parameter Integer g_mLeakWork.dlBydx = 1 \"Derivative of flux tube's varying dimension with respect to armature position; set to +1 or -1\";
//   Real g_mLeakWork.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real g_mLeakWork.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   protected Real g_mLeakWork.s_support(quantity = \"Length\", unit = \"m\") \"Absolute position of support flange\";
//   Real g_mLeakWork.l(quantity = \"Length\", unit = \"m\") = flange.s \"Axial length (in direction of flux)\";
//   parameter Real g_mLeakWork.w(quantity = \"Length\", unit = \"m\", start = 0.1) = 0.00942477796076938 + 6.28318530717959 * r_arm \"Width orthogonal to flux; mean circumference of flux tube in case of cylindrical poles\";
//   parameter Real g_mLeakWork.r(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.01) = 0.003 \"Radius of leakage field\";
//   Real p.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real p.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real n.v(quantity = \"ElectricPotential\", unit = \"V\") \"Potential at the pin\";
//   Real n.i(quantity = \"ElectricCurrent\", unit = \"A\") \"Current flowing into the pin\";
//   Real flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
// equation
//   ground.port.V_m = 0.0;
//   coil1.v = coil1.p.v - coil1.n.v;
//   0.0 = coil1.p.i + coil1.n.i;
//   coil1.i = coil1.p.i;
//   coil1.V_m = coil1.port_p.V_m - coil1.port_n.V_m;
//   0.0 = coil1.port_p.Phi + coil1.port_n.Phi;
//   coil1.Phi = coil1.port_p.Phi;
//   coil1.V_m = coil1.i * coil1.N;
//   coil1.N * der(coil1.Phi) = -coil1.v;
//   coil1.Psi = coil1.N * coil1.Phi;
//   coil1.L_stat = if noEvent(abs(coil1.i) > coil1.eps) then abs(coil1.Psi / coil1.i) else abs(coil1.Psi / coil1.eps);
//   assert(1.0 + r_1.alpha * (r_1.T_heatPort - r_1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r_1.R_actual = r_1.R * (1.0 + r_1.alpha * (r_1.T_heatPort - r_1.T_ref));
//   r_1.v = r_1.R_actual * r_1.i;
//   r_1.LossPower = r_1.v * r_1.i;
//   r_1.i = r_1.p.i;
//   0.0 = r_1.p.i + r_1.n.i;
//   r_1.v = r_1.p.v - r_1.n.v;
//   r_1.T_heatPort = r_1.T;
//   g_mFeYokeSide1.A = 3.14159265358979 * (g_mFeYokeSide1.r_o ^ 2.0 - g_mFeYokeSide1.r_i ^ 2.0);
//   g_mFeYokeSide1.G_m = (1.25663706143592e-06 * (g_mFeYokeSide1.mu_r * g_mFeYokeSide1.A)) / g_mFeYokeSide1.l;
//   g_mFeYokeSide1.H = g_mFeYokeSide1.B / (g_mFeYokeSide1.mu_r * 1.25663706143592e-06);
//   g_mFeYokeSide1.B = g_mFeYokeSide1.Phi / g_mFeYokeSide1.A;
//   g_mFeYokeSide1.V_m = g_mFeYokeSide1.Phi * g_mFeYokeSide1.R_m;
//   g_mFeYokeSide1.R_m = 1.0 / g_mFeYokeSide1.G_m;
//   g_mFeYokeSide1.mu_r = if g_mFeYokeSide1.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeYokeSide1.B,g_mFeYokeSide1.material.mu_i,g_mFeYokeSide1.material.B_myMax,g_mFeYokeSide1.material.c_a,g_mFeYokeSide1.material.c_b,g_mFeYokeSide1.material.n) else g_mFeYokeSide1.mu_rConst;
//   g_mFeYokeSide1.V_m = g_mFeYokeSide1.port_p.V_m - g_mFeYokeSide1.port_n.V_m;
//   g_mFeYokeSide1.Phi = g_mFeYokeSide1.port_p.Phi;
//   0.0 = g_mFeYokeSide1.port_p.Phi + g_mFeYokeSide1.port_n.Phi;
//   g_mFeArm.A = 3.14159265358979 * (g_mFeArm.r_o ^ 2.0 - g_mFeArm.r_i ^ 2.0);
//   g_mFeArm.G_m = (1.25663706143592e-06 * (g_mFeArm.mu_r * g_mFeArm.A)) / g_mFeArm.l;
//   g_mFeArm.H = g_mFeArm.B / (g_mFeArm.mu_r * 1.25663706143592e-06);
//   g_mFeArm.B = g_mFeArm.Phi / g_mFeArm.A;
//   g_mFeArm.V_m = g_mFeArm.Phi * g_mFeArm.R_m;
//   g_mFeArm.R_m = 1.0 / g_mFeArm.G_m;
//   g_mFeArm.mu_r = if g_mFeArm.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeArm.B,g_mFeArm.material.mu_i,g_mFeArm.material.B_myMax,g_mFeArm.material.c_a,g_mFeArm.material.c_b,g_mFeArm.material.n) else g_mFeArm.mu_rConst;
//   g_mFeArm.V_m = g_mFeArm.port_p.V_m - g_mFeArm.port_n.V_m;
//   g_mFeArm.Phi = g_mFeArm.port_p.Phi;
//   0.0 = g_mFeArm.port_p.Phi + g_mFeArm.port_n.Phi;
//   g_mAirWork.G_m = (1.25663706143592e-06 * (g_mAirWork.mu_r * g_mAirWork.A)) / g_mAirWork.l;
//   g_mAirWork.dGmBydx = -1.25663706143592e-06 * (g_mAirWork.mu_r * (g_mAirWork.A * (g_mAirWork.l ^ -2.0 * Real(g_mAirWork.dlBydx))));
//   g_mAirWork.B = g_mAirWork.Phi / g_mAirWork.A;
//   g_mAirWork.flange.f = -g_mAirWork.F_m;
//   g_mAirWork.s_support = 0.0;
//   g_mAirWork.F_m = 0.5 * (g_mAirWork.V_m ^ 2.0 * g_mAirWork.dGmBydx);
//   g_mAirWork.R_m = 1.0 / g_mAirWork.G_m;
//   g_mAirWork.V_m = g_mAirWork.Phi * g_mAirWork.R_m;
//   g_mAirWork.V_m = g_mAirWork.port_p.V_m - g_mAirWork.port_n.V_m;
//   g_mAirWork.Phi = g_mAirWork.port_p.Phi;
//   0.0 = g_mAirWork.port_p.Phi + g_mAirWork.port_n.Phi;
//   g_mFeYokeBot.A = 3.14159265358979 * (g_mFeYokeBot.l * (g_mFeYokeBot.r_o + g_mFeYokeBot.r_i));
//   g_mFeYokeBot.G_m = (7.89568352087149e-06 * (g_mFeYokeBot.mu_r * g_mFeYokeBot.l)) / log(g_mFeYokeBot.r_o / g_mFeYokeBot.r_i);
//   g_mFeYokeBot.H = g_mFeYokeBot.B / (g_mFeYokeBot.mu_r * 1.25663706143592e-06);
//   g_mFeYokeBot.B = g_mFeYokeBot.Phi / g_mFeYokeBot.A;
//   g_mFeYokeBot.V_m = g_mFeYokeBot.Phi * g_mFeYokeBot.R_m;
//   g_mFeYokeBot.R_m = 1.0 / g_mFeYokeBot.G_m;
//   g_mFeYokeBot.mu_r = if g_mFeYokeBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeYokeBot.B,g_mFeYokeBot.material.mu_i,g_mFeYokeBot.material.B_myMax,g_mFeYokeBot.material.c_a,g_mFeYokeBot.material.c_b,g_mFeYokeBot.material.n) else g_mFeYokeBot.mu_rConst;
//   g_mFeYokeBot.V_m = g_mFeYokeBot.port_p.V_m - g_mFeYokeBot.port_n.V_m;
//   g_mFeYokeBot.Phi = g_mFeYokeBot.port_p.Phi;
//   0.0 = g_mFeYokeBot.port_p.Phi + g_mFeYokeBot.port_n.Phi;
//   g_mAirPar.A = 3.14159265358979 * (g_mAirPar.l * (g_mAirPar.r_o + g_mAirPar.r_i));
//   g_mAirPar.G_m = (7.89568352087149e-06 * (g_mAirPar.mu_r * g_mAirPar.l)) / log(g_mAirPar.r_o / g_mAirPar.r_i);
//   g_mAirPar.H = g_mAirPar.B / (g_mAirPar.mu_r * 1.25663706143592e-06);
//   g_mAirPar.B = g_mAirPar.Phi / g_mAirPar.A;
//   g_mAirPar.V_m = g_mAirPar.Phi * g_mAirPar.R_m;
//   g_mAirPar.R_m = 1.0 / g_mAirPar.G_m;
//   g_mAirPar.mu_r = if g_mAirPar.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mAirPar.B,g_mAirPar.material.mu_i,g_mAirPar.material.B_myMax,g_mAirPar.material.c_a,g_mAirPar.material.c_b,g_mAirPar.material.n) else g_mAirPar.mu_rConst;
//   g_mAirPar.V_m = g_mAirPar.port_p.V_m - g_mAirPar.port_n.V_m;
//   g_mAirPar.Phi = g_mAirPar.port_p.Phi;
//   0.0 = g_mAirPar.port_p.Phi + g_mAirPar.port_n.Phi;
//   g_mFePoleBot.A = 3.14159265358979 * (g_mFePoleBot.l * (g_mFePoleBot.r_o + g_mFePoleBot.r_i));
//   g_mFePoleBot.G_m = (7.89568352087149e-06 * (g_mFePoleBot.mu_r * g_mFePoleBot.l)) / log(g_mFePoleBot.r_o / g_mFePoleBot.r_i);
//   g_mFePoleBot.H = g_mFePoleBot.B / (g_mFePoleBot.mu_r * 1.25663706143592e-06);
//   g_mFePoleBot.B = g_mFePoleBot.Phi / g_mFePoleBot.A;
//   g_mFePoleBot.V_m = g_mFePoleBot.Phi * g_mFePoleBot.R_m;
//   g_mFePoleBot.R_m = 1.0 / g_mFePoleBot.G_m;
//   g_mFePoleBot.mu_r = if g_mFePoleBot.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFePoleBot.B,g_mFePoleBot.material.mu_i,g_mFePoleBot.material.B_myMax,g_mFePoleBot.material.c_a,g_mFePoleBot.material.c_b,g_mFePoleBot.material.n) else g_mFePoleBot.mu_rConst;
//   g_mFePoleBot.V_m = g_mFePoleBot.port_p.V_m - g_mFePoleBot.port_n.V_m;
//   g_mFePoleBot.Phi = g_mFePoleBot.port_p.Phi;
//   0.0 = g_mFePoleBot.port_p.Phi + g_mFePoleBot.port_n.Phi;
//   g_mFePole.A = 3.14159265358979 * (g_mFePole.r_o ^ 2.0 - g_mFePole.r_i ^ 2.0);
//   g_mFePole.G_m = (1.25663706143592e-06 * (g_mFePole.mu_r * g_mFePole.A)) / g_mFePole.l;
//   g_mFePole.H = g_mFePole.B / (g_mFePole.mu_r * 1.25663706143592e-06);
//   g_mFePole.B = g_mFePole.Phi / g_mFePole.A;
//   g_mFePole.V_m = g_mFePole.Phi * g_mFePole.R_m;
//   g_mFePole.R_m = 1.0 / g_mFePole.G_m;
//   g_mFePole.mu_r = if g_mFePole.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFePole.B,g_mFePole.material.mu_i,g_mFePole.material.B_myMax,g_mFePole.material.c_a,g_mFePole.material.c_b,g_mFePole.material.n) else g_mFePole.mu_rConst;
//   g_mFePole.V_m = g_mFePole.port_p.V_m - g_mFePole.port_n.V_m;
//   g_mFePole.Phi = g_mFePole.port_p.Phi;
//   0.0 = g_mFePole.port_p.Phi + g_mFePole.port_n.Phi;
//   armature.mass.v = der(armature.mass.s);
//   armature.mass.a = der(armature.mass.v);
//   armature.mass.m * armature.mass.a = armature.mass.flange_a.f + armature.mass.flange_b.f;
//   armature.mass.flange_a.s = armature.mass.s + (-armature.mass.L) / 2.0;
//   armature.mass.flange_b.s = armature.mass.s + armature.mass.L / 2.0;
//   armature.limit_xMin.flange.s = armature.limit_xMin.s0;
//   armature.limit_xMax.flange.s = armature.limit_xMax.s0;
//   armature.stopper_xMax.contact = armature.stopper_xMax.s_rel < armature.stopper_xMax.s_rel0;
//   armature.stopper_xMax.f_c = smooth(1,if armature.stopper_xMax.contact then (-armature.stopper_xMax.c) * abs(armature.stopper_xMax.s_rel - armature.stopper_xMax.s_rel0) ^ armature.stopper_xMax.n else 0.0);
//   armature.stopper_xMax.f_d2 = if armature.stopper_xMax.contact then armature.stopper_xMax.d * armature.stopper_xMax.v_rel else 0.0;
//   armature.stopper_xMax.f_d = if armature.stopper_xMax.contact then if noEvent(armature.stopper_xMax.f_d2 < armature.stopper_xMax.f_c) then armature.stopper_xMax.f_c else if noEvent(armature.stopper_xMax.f_d2 > -armature.stopper_xMax.f_c) then -armature.stopper_xMax.f_c else armature.stopper_xMax.f_d2 else 0.0;
//   armature.stopper_xMax.f = armature.stopper_xMax.f_c + armature.stopper_xMax.f_d;
//   armature.stopper_xMax.s_rel = armature.stopper_xMax.flange_b.s - armature.stopper_xMax.flange_a.s;
//   armature.stopper_xMax.v_rel = der(armature.stopper_xMax.s_rel);
//   armature.stopper_xMax.flange_b.f = armature.stopper_xMax.f;
//   armature.stopper_xMax.flange_a.f = -armature.stopper_xMax.f;
//   armature.stopper_xMin.contact = armature.stopper_xMin.s_rel < armature.stopper_xMin.s_rel0;
//   armature.stopper_xMin.f_c = smooth(1,if armature.stopper_xMin.contact then (-armature.stopper_xMin.c) * abs(armature.stopper_xMin.s_rel - armature.stopper_xMin.s_rel0) ^ armature.stopper_xMin.n else 0.0);
//   armature.stopper_xMin.f_d2 = if armature.stopper_xMin.contact then armature.stopper_xMin.d * armature.stopper_xMin.v_rel else 0.0;
//   armature.stopper_xMin.f_d = if armature.stopper_xMin.contact then if noEvent(armature.stopper_xMin.f_d2 < armature.stopper_xMin.f_c) then armature.stopper_xMin.f_c else if noEvent(armature.stopper_xMin.f_d2 > -armature.stopper_xMin.f_c) then -armature.stopper_xMin.f_c else armature.stopper_xMin.f_d2 else 0.0;
//   armature.stopper_xMin.f = armature.stopper_xMin.f_c + armature.stopper_xMin.f_d;
//   armature.stopper_xMin.s_rel = armature.stopper_xMin.flange_b.s - armature.stopper_xMin.flange_a.s;
//   armature.stopper_xMin.v_rel = der(armature.stopper_xMin.s_rel);
//   armature.stopper_xMin.flange_b.f = armature.stopper_xMin.f;
//   armature.stopper_xMin.flange_a.f = -armature.stopper_xMin.f;
//   armature.mass.s = armature.s;
//   armature.mass.v = armature.v;
//   armature.mass.a = armature.a;
//   g_mLeak1.G_m = 6.53451271946677e-07 * g_mLeak1.l;
//   g_mLeak1.R_m = 1.0 / g_mLeak1.G_m;
//   g_mLeak1.V_m = g_mLeak1.Phi * g_mLeak1.R_m;
//   g_mLeak1.V_m = g_mLeak1.port_p.V_m - g_mLeak1.port_n.V_m;
//   g_mLeak1.Phi = g_mLeak1.port_p.Phi;
//   0.0 = g_mLeak1.port_p.Phi + g_mLeak1.port_n.Phi;
//   g_mLeak2.G_m = 8e-07 * (g_mLeak2.l * log(1.0 + g_mLeak2.ratio));
//   g_mLeak2.R_m = 1.0 / g_mLeak2.G_m;
//   g_mLeak2.V_m = g_mLeak2.Phi * g_mLeak2.R_m;
//   g_mLeak2.V_m = g_mLeak2.port_p.V_m - g_mLeak2.port_n.V_m;
//   g_mLeak2.Phi = g_mLeak2.port_p.Phi;
//   0.0 = g_mLeak2.port_p.Phi + g_mLeak2.port_n.Phi;
//   coil2.v = coil2.p.v - coil2.n.v;
//   0.0 = coil2.p.i + coil2.n.i;
//   coil2.i = coil2.p.i;
//   coil2.V_m = coil2.port_p.V_m - coil2.port_n.V_m;
//   0.0 = coil2.port_p.Phi + coil2.port_n.Phi;
//   coil2.Phi = coil2.port_p.Phi;
//   coil2.V_m = coil2.i * coil2.N;
//   coil2.N * der(coil2.Phi) = -coil2.v;
//   coil2.Psi = coil2.N * coil2.Phi;
//   coil2.L_stat = if noEvent(abs(coil2.i) > coil2.eps) then abs(coil2.Psi / coil2.i) else abs(coil2.Psi / coil2.eps);
//   c_par1.i = c_par1.C * der(c_par1.v);
//   c_par1.v = c_par1.p.v - c_par1.n.v;
//   0.0 = c_par1.p.i + c_par1.n.i;
//   c_par1.i = c_par1.p.i;
//   G_mLeakRad.A = 3.14159265358979 * (G_mLeakRad.l * (G_mLeakRad.r_o + G_mLeakRad.r_i));
//   G_mLeakRad.G_m = (7.89568352087149e-06 * (G_mLeakRad.mu_r * G_mLeakRad.l)) / log(G_mLeakRad.r_o / G_mLeakRad.r_i);
//   G_mLeakRad.H = G_mLeakRad.B / (G_mLeakRad.mu_r * 1.25663706143592e-06);
//   G_mLeakRad.B = G_mLeakRad.Phi / G_mLeakRad.A;
//   G_mLeakRad.V_m = G_mLeakRad.Phi * G_mLeakRad.R_m;
//   G_mLeakRad.R_m = 1.0 / G_mLeakRad.G_m;
//   G_mLeakRad.mu_r = if G_mLeakRad.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(G_mLeakRad.B,G_mLeakRad.material.mu_i,G_mLeakRad.material.B_myMax,G_mLeakRad.material.c_a,G_mLeakRad.material.c_b,G_mLeakRad.material.n) else G_mLeakRad.mu_rConst;
//   G_mLeakRad.V_m = G_mLeakRad.port_p.V_m - G_mLeakRad.port_n.V_m;
//   G_mLeakRad.Phi = G_mLeakRad.port_p.Phi;
//   0.0 = G_mLeakRad.port_p.Phi + G_mLeakRad.port_n.Phi;
//   g_mFeYokeSide2.A = 3.14159265358979 * (g_mFeYokeSide2.r_o ^ 2.0 - g_mFeYokeSide2.r_i ^ 2.0);
//   g_mFeYokeSide2.G_m = (1.25663706143592e-06 * (g_mFeYokeSide2.mu_r * g_mFeYokeSide2.A)) / g_mFeYokeSide2.l;
//   g_mFeYokeSide2.H = g_mFeYokeSide2.B / (g_mFeYokeSide2.mu_r * 1.25663706143592e-06);
//   g_mFeYokeSide2.B = g_mFeYokeSide2.Phi / g_mFeYokeSide2.A;
//   g_mFeYokeSide2.V_m = g_mFeYokeSide2.Phi * g_mFeYokeSide2.R_m;
//   g_mFeYokeSide2.R_m = 1.0 / g_mFeYokeSide2.G_m;
//   g_mFeYokeSide2.mu_r = if g_mFeYokeSide2.nonLinearPermeability then Modelica.Magnetic.FluxTubes.Material.SoftMagnetic.mu_rApprox(g_mFeYokeSide2.B,g_mFeYokeSide2.material.mu_i,g_mFeYokeSide2.material.B_myMax,g_mFeYokeSide2.material.c_a,g_mFeYokeSide2.material.c_b,g_mFeYokeSide2.material.n) else g_mFeYokeSide2.mu_rConst;
//   g_mFeYokeSide2.V_m = g_mFeYokeSide2.port_p.V_m - g_mFeYokeSide2.port_n.V_m;
//   g_mFeYokeSide2.Phi = g_mFeYokeSide2.port_p.Phi;
//   0.0 = g_mFeYokeSide2.port_p.Phi + g_mFeYokeSide2.port_n.Phi;
//   c_par2.i = c_par2.C * der(c_par2.v);
//   c_par2.v = c_par2.p.v - c_par2.n.v;
//   0.0 = c_par2.p.i + c_par2.n.i;
//   c_par2.i = c_par2.p.i;
//   assert(1.0 + r_par1.alpha * (r_par1.T_heatPort - r_par1.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r_par1.R_actual = r_par1.R * (1.0 + r_par1.alpha * (r_par1.T_heatPort - r_par1.T_ref));
//   r_par1.v = r_par1.R_actual * r_par1.i;
//   r_par1.LossPower = r_par1.v * r_par1.i;
//   r_par1.i = r_par1.p.i;
//   0.0 = r_par1.p.i + r_par1.n.i;
//   r_par1.v = r_par1.p.v - r_par1.n.v;
//   r_par1.T_heatPort = r_par1.T;
//   assert(1.0 + r_par2.alpha * (r_par2.T_heatPort - r_par2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r_par2.R_actual = r_par2.R * (1.0 + r_par2.alpha * (r_par2.T_heatPort - r_par2.T_ref));
//   r_par2.v = r_par2.R_actual * r_par2.i;
//   r_par2.LossPower = r_par2.v * r_par2.i;
//   r_par2.i = r_par2.p.i;
//   0.0 = r_par2.p.i + r_par2.n.i;
//   r_par2.v = r_par2.p.v - r_par2.n.v;
//   r_par2.T_heatPort = r_par2.T;
//   assert(1.0 + r_2.alpha * (r_2.T_heatPort - r_2.T_ref) >= 1e-15,\"Temperature outside scope of model!\");
//   r_2.R_actual = r_2.R * (1.0 + r_2.alpha * (r_2.T_heatPort - r_2.T_ref));
//   r_2.v = r_2.R_actual * r_2.i;
//   r_2.LossPower = r_2.v * r_2.i;
//   r_2.i = r_2.p.i;
//   0.0 = r_2.p.i + r_2.n.i;
//   r_2.v = r_2.p.v - r_2.n.v;
//   r_2.T_heatPort = r_2.T;
//   g_mLeak3.G_m = 6.53451271946677e-07 * g_mLeak3.l;
//   g_mLeak3.R_m = 1.0 / g_mLeak3.G_m;
//   g_mLeak3.V_m = g_mLeak3.Phi * g_mLeak3.R_m;
//   g_mLeak3.V_m = g_mLeak3.port_p.V_m - g_mLeak3.port_n.V_m;
//   g_mLeak3.Phi = g_mLeak3.port_p.Phi;
//   0.0 = g_mLeak3.port_p.Phi + g_mLeak3.port_n.Phi;
//   g_mLeakWork.G_m = 4e-07 * (g_mLeakWork.w * log(1.0 + (3.14159265358979 * g_mLeakWork.r) / g_mLeakWork.l));
//   g_mLeakWork.dGmBydx = (-1.25663706143592e-06 * (g_mLeakWork.w * (g_mLeakWork.r * (Real(g_mLeakWork.dlBydx) * g_mLeakWork.l ^ -2.0)))) / (1.0 + (3.14159265358979 * g_mLeakWork.r) / g_mLeakWork.l);
//   g_mLeakWork.flange.f = -g_mLeakWork.F_m;
//   g_mLeakWork.s_support = 0.0;
//   g_mLeakWork.F_m = 0.5 * (g_mLeakWork.V_m ^ 2.0 * g_mLeakWork.dGmBydx);
//   g_mLeakWork.R_m = 1.0 / g_mLeakWork.G_m;
//   g_mLeakWork.V_m = g_mLeakWork.Phi * g_mLeakWork.R_m;
//   g_mLeakWork.V_m = g_mLeakWork.port_p.V_m - g_mLeakWork.port_n.V_m;
//   g_mLeakWork.Phi = g_mLeakWork.port_p.Phi;
//   0.0 = g_mLeakWork.port_p.Phi + g_mLeakWork.port_n.Phi;
//   x = flange.s;
//   Psi_tot = coil1.Psi + coil2.Psi;
//   L_statTot = coil1.L_stat + coil2.L_stat;
//   ground.port.Phi + g_mAirPar.port_p.Phi + g_mLeak1.port_p.Phi + g_mLeak2.port_p.Phi + coil2.port_n.Phi + g_mLeak3.port_p.Phi = 0.0;
//   coil1.port_p.Phi + g_mFePole.port_p.Phi = 0.0;
//   coil1.port_n.Phi + g_mAirWork.port_n.Phi + g_mLeakWork.port_n.Phi = 0.0;
//   coil1.p.i + r_1.n.i = 0.0;
//   coil1.n.i + c_par1.n.i + r_par2.p.i + r_2.p.i = 0.0;
//   r_1.p.i + r_par1.p.i + (-p.i) = 0.0;
//   g_mFeYokeSide1.port_p.Phi + g_mFePoleBot.port_n.Phi = 0.0;
//   g_mFeYokeSide1.port_n.Phi + G_mLeakRad.port_n.Phi + g_mFeYokeSide2.port_p.Phi = 0.0;
//   g_mFeArm.port_p.Phi + coil2.port_p.Phi = 0.0;
//   g_mFeArm.port_n.Phi + g_mAirWork.port_p.Phi + G_mLeakRad.port_p.Phi + g_mLeakWork.port_p.Phi = 0.0;
//   g_mAirWork.flange.f + armature.flange_a.f + g_mLeakWork.flange.f = 0.0;
//   g_mFeYokeBot.port_p.Phi + g_mAirPar.port_n.Phi + g_mLeak1.port_n.Phi + g_mLeak2.port_n.Phi + g_mLeak3.port_n.Phi = 0.0;
//   g_mFeYokeBot.port_n.Phi + g_mFeYokeSide2.port_n.Phi = 0.0;
//   g_mFePoleBot.port_p.Phi + g_mFePole.port_n.Phi = 0.0;
//   armature.mass.flange_a.f + (-armature.flange_a.f) + armature.stopper_xMin.flange_b.f = 0.0;
//   armature.mass.flange_b.f + (-armature.flange_b.f) + armature.stopper_xMax.flange_a.f = 0.0;
//   armature.flange_b.f + (-flange.f) = 0.0;
//   armature.limit_xMin.flange.f + armature.stopper_xMin.flange_a.f = 0.0;
//   armature.limit_xMax.flange.f + armature.stopper_xMax.flange_b.f = 0.0;
//   armature.flange_a.s = armature.mass.flange_a.s;
//   armature.flange_a.s = armature.stopper_xMin.flange_b.s;
//   armature.limit_xMax.flange.s = armature.stopper_xMax.flange_b.s;
//   armature.flange_b.s = armature.mass.flange_b.s;
//   armature.flange_b.s = armature.stopper_xMax.flange_a.s;
//   armature.limit_xMin.flange.s = armature.stopper_xMin.flange_a.s;
//   coil2.p.i + r_2.n.i = 0.0;
//   coil2.n.i + c_par2.n.i + (-n.i) = 0.0;
//   c_par1.p.i + r_par1.n.i = 0.0;
//   c_par2.p.i + r_par2.n.i = 0.0;
//   p.i = 0.0;
//   n.i = 0.0;
//   flange.f = 0.0;
//   armature.flange_b.s = flange.s;
//   c_par1.p.v = r_par1.n.v;
//   p.v = r_1.p.v;
//   p.v = r_par1.p.v;
//   c_par2.p.v = r_par2.n.v;
//   c_par1.n.v = coil1.n.v;
//   c_par1.n.v = r_2.p.v;
//   c_par1.n.v = r_par2.p.v;
//   armature.flange_a.s = g_mAirWork.flange.s;
//   armature.flange_a.s = g_mLeakWork.flange.s;
//   c_par2.n.v = coil2.n.v;
//   c_par2.n.v = n.v;
//   coil2.port_p.V_m = g_mFeArm.port_p.V_m;
//   G_mLeakRad.port_p.V_m = g_mAirWork.port_p.V_m;
//   G_mLeakRad.port_p.V_m = g_mFeArm.port_n.V_m;
//   G_mLeakRad.port_p.V_m = g_mLeakWork.port_p.V_m;
//   coil1.port_n.V_m = g_mAirWork.port_n.V_m;
//   coil1.port_n.V_m = g_mLeakWork.port_n.V_m;
//   coil1.port_p.V_m = g_mFePole.port_p.V_m;
//   g_mFePole.port_n.V_m = g_mFePoleBot.port_p.V_m;
//   g_mFePoleBot.port_n.V_m = g_mFeYokeSide1.port_p.V_m;
//   G_mLeakRad.port_n.V_m = g_mFeYokeSide1.port_n.V_m;
//   G_mLeakRad.port_n.V_m = g_mFeYokeSide2.port_p.V_m;
//   g_mFeYokeBot.port_n.V_m = g_mFeYokeSide2.port_n.V_m;
//   coil2.port_n.V_m = g_mAirPar.port_p.V_m;
//   coil2.port_n.V_m = g_mLeak1.port_p.V_m;
//   coil2.port_n.V_m = g_mLeak2.port_p.V_m;
//   coil2.port_n.V_m = g_mLeak3.port_p.V_m;
//   coil2.port_n.V_m = ground.port.V_m;
//   g_mAirPar.port_n.V_m = g_mFeYokeBot.port_p.V_m;
//   g_mAirPar.port_n.V_m = g_mLeak1.port_n.V_m;
//   g_mAirPar.port_n.V_m = g_mLeak2.port_n.V_m;
//   g_mAirPar.port_n.V_m = g_mLeak3.port_n.V_m;
//   coil2.p.v = r_2.n.v;
//   coil1.p.v = r_1.n.v;
// end Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.SolenoidActuator.Components.AdvancedSolenoid has 280 equation(s) and 280 variable(s).
// 142 of these are trivial equation(s).
// "
// ""
// "class Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper
//   parameter Real L(quantity = \"Length\", unit = \"m\", start = 0.0) \"Length of component from left flange to right flange (= flange_b.s - flange_a.s)\";
//   parameter Real m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) \"Armature mass\";
//   parameter Real c(quantity = \"TranslationalSpringConstant\", unit = \"N/m\", start = 100000000000.0) \"Spring stiffness between impact partners\";
//   parameter Real d(quantity = \"TranslationalDampingConstant\", unit = \"N.s/m\", start = 20000000.0) \"Damping coefficient between impact partners\";
//   parameter Real n(min = 1.0) = 2.0 \"Exponent of spring forces (f_c = c*|s_rel|^n)\";
//   parameter Real x_max(quantity = \"Length\", unit = \"m\", start = 0.01) \"Position of stopper at maximum armature position\";
//   parameter Real x_min(quantity = \"Length\", unit = \"m\", start = 0.0) \"Position of stopper at minimum armature position\";
//   Real s(quantity = \"Length\", unit = \"m\", start = 0.0) \"Absolute position of center of component (= flange_a.s + L/2)\";
//   Real v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0) \"Absolute velocity of components (= der(s))\";
//   Real a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of components (= der(v))\";
//   Real mass.s(quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.default) \"Absolute position of center of component (s = flange_a.s + L/2 = flange_b.s - L/2)\";
//   parameter Real mass.L(quantity = \"Length\", unit = \"m\", start = 0.0) = L \"Length of component, from left flange to right flange (= flange_b.s - flange_a.s)\";
//   Real mass.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real mass.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real mass.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real mass.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real mass.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = m \"mass of the sliding mass\";
//   parameter enumeration(never, avoid, default, prefer, always) mass.stateSelect = StateSelect.default \"Priority to use s and v as states\";
//   Real mass.v(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.default) \"absolute velocity of component\";
//   Real mass.a(quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"absolute acceleration of component\";
//   Real flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real limit_xMin.s0(quantity = \"Length\", unit = \"m\") = x_min \"fixed offset position of housing\";
//   Real limit_xMin.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real limit_xMin.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real limit_xMax.s0(quantity = \"Length\", unit = \"m\") = x_max \"fixed offset position of housing\";
//   Real limit_xMax.flange.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real limit_xMax.flange.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter enumeration(never, avoid, default, prefer, always) stopper_xMax.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real stopper_xMax.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real stopper_xMax.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = stopper_xMax.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real stopper_xMax.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real stopper_xMax.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real stopper_xMax.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real stopper_xMax.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real stopper_xMax.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real stopper_xMax.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real stopper_xMax.c(unit = \"N/m\", min = 0.0, start = 1.0) = c \"Spring constant\";
//   parameter Real stopper_xMax.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = d \"Damping constant\";
//   parameter Real stopper_xMax.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real stopper_xMax.n(min = 1.0) = n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean stopper_xMax.contact \"=true, if contact, otherwise no contact\";
//   protected Real stopper_xMax.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real stopper_xMax.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real stopper_xMax.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
//   parameter enumeration(never, avoid, default, prefer, always) stopper_xMin.stateSelect = StateSelect.prefer \"Priority to use phi_rel and w_rel as states\";
//   parameter Real stopper_xMin.s_nominal(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0001 \"Nominal value of s_rel (used for scaling)\";
//   Real stopper_xMin.s_rel(quantity = \"Length\", unit = \"m\", min = 0.0, start = 0.0, nominal = stopper_xMin.s_nominal, StateSelect = StateSelect.prefer) \"Relative distance (= flange_b.s - flange_a.s)\";
//   Real stopper_xMin.v_rel(quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.prefer) \"Relative velocity (= der(s_rel))\";
//   Real stopper_xMin.f(quantity = \"Force\", unit = \"N\") \"Forces between flanges (= flange_b.f)\";
//   Real stopper_xMin.flange_a.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real stopper_xMin.flange_a.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   Real stopper_xMin.flange_b.s(quantity = \"Length\", unit = \"m\") \"absolute position of flange\";
//   Real stopper_xMin.flange_b.f(quantity = \"Force\", unit = \"N\") \"cut force directed into flange\";
//   parameter Real stopper_xMin.c(unit = \"N/m\", min = 0.0, start = 1.0) = c \"Spring constant\";
//   parameter Real stopper_xMin.d(unit = \"N/ (m/s)\", min = 0.0, start = 1.0) = d \"Damping constant\";
//   parameter Real stopper_xMin.s_rel0(quantity = \"Length\", unit = \"m\") = 0.0 \"Unstretched spring length\";
//   parameter Real stopper_xMin.n(min = 1.0) = n \"Exponent of spring force ( f_c = -c*|s_rel-s_rel0|^n )\";
//   Boolean stopper_xMin.contact \"=true, if contact, otherwise no contact\";
//   protected Real stopper_xMin.f_c(quantity = \"Force\", unit = \"N\") \"Spring force\";
//   protected Real stopper_xMin.f_d2(quantity = \"Force\", unit = \"N\") \"Linear damping force\";
//   protected Real stopper_xMin.f_d(quantity = \"Force\", unit = \"N\") \"Linear damping force which is limited by spring force (|f_d| <= |f_c|)\";
// equation
//   mass.v = der(mass.s);
//   mass.a = der(mass.v);
//   mass.m * mass.a = mass.flange_a.f + mass.flange_b.f;
//   mass.flange_a.s = mass.s + (-mass.L) / 2.0;
//   mass.flange_b.s = mass.s + mass.L / 2.0;
//   limit_xMin.flange.s = limit_xMin.s0;
//   limit_xMax.flange.s = limit_xMax.s0;
//   stopper_xMax.contact = stopper_xMax.s_rel < stopper_xMax.s_rel0;
//   stopper_xMax.f_c = smooth(1,if stopper_xMax.contact then (-stopper_xMax.c) * abs(stopper_xMax.s_rel - stopper_xMax.s_rel0) ^ stopper_xMax.n else 0.0);
//   stopper_xMax.f_d2 = if stopper_xMax.contact then stopper_xMax.d * stopper_xMax.v_rel else 0.0;
//   stopper_xMax.f_d = if stopper_xMax.contact then if noEvent(stopper_xMax.f_d2 < stopper_xMax.f_c) then stopper_xMax.f_c else if noEvent(stopper_xMax.f_d2 > -stopper_xMax.f_c) then -stopper_xMax.f_c else stopper_xMax.f_d2 else 0.0;
//   stopper_xMax.f = stopper_xMax.f_c + stopper_xMax.f_d;
//   stopper_xMax.s_rel = stopper_xMax.flange_b.s - stopper_xMax.flange_a.s;
//   stopper_xMax.v_rel = der(stopper_xMax.s_rel);
//   stopper_xMax.flange_b.f = stopper_xMax.f;
//   stopper_xMax.flange_a.f = -stopper_xMax.f;
//   stopper_xMin.contact = stopper_xMin.s_rel < stopper_xMin.s_rel0;
//   stopper_xMin.f_c = smooth(1,if stopper_xMin.contact then (-stopper_xMin.c) * abs(stopper_xMin.s_rel - stopper_xMin.s_rel0) ^ stopper_xMin.n else 0.0);
//   stopper_xMin.f_d2 = if stopper_xMin.contact then stopper_xMin.d * stopper_xMin.v_rel else 0.0;
//   stopper_xMin.f_d = if stopper_xMin.contact then if noEvent(stopper_xMin.f_d2 < stopper_xMin.f_c) then stopper_xMin.f_c else if noEvent(stopper_xMin.f_d2 > -stopper_xMin.f_c) then -stopper_xMin.f_c else stopper_xMin.f_d2 else 0.0;
//   stopper_xMin.f = stopper_xMin.f_c + stopper_xMin.f_d;
//   stopper_xMin.s_rel = stopper_xMin.flange_b.s - stopper_xMin.flange_a.s;
//   stopper_xMin.v_rel = der(stopper_xMin.s_rel);
//   stopper_xMin.flange_b.f = stopper_xMin.f;
//   stopper_xMin.flange_a.f = -stopper_xMin.f;
//   mass.s = s;
//   mass.v = v;
//   mass.a = a;
//   mass.flange_a.f + (-flange_a.f) + stopper_xMin.flange_b.f = 0.0;
//   mass.flange_b.f + (-flange_b.f) + stopper_xMax.flange_a.f = 0.0;
//   flange_a.f = 0.0;
//   flange_b.f = 0.0;
//   limit_xMin.flange.f + stopper_xMin.flange_a.f = 0.0;
//   limit_xMax.flange.f + stopper_xMax.flange_b.f = 0.0;
//   flange_a.s = mass.flange_a.s;
//   flange_a.s = stopper_xMin.flange_b.s;
//   limit_xMax.flange.s = stopper_xMax.flange_b.s;
//   flange_b.s = mass.flange_b.s;
//   flange_b.s = stopper_xMax.flange_a.s;
//   limit_xMin.flange.s = stopper_xMin.flange_a.s;
// end Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper;
// "
// ""
// "Check of Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.Utilities.TranslatoryArmatureAndStopper has 40 equation(s) and 40 variable(s).
// 23 of these are trivial equation(s).
// "
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// class Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign
//   parameter Real rho_20(quantity = \"Resistivity\", unit = \"Ohm.m\") = 1.78e-08 \"Resistivity of conductor material at 20ï¿½C (default: Copper)\";
//   parameter Real alpha_20(quantity = \"LinearTemperatureCoefficient\", unit = \"1/K\") = 0.0039 \"Temperature coefficient of conductor material's resistivity at 20degC (default: Copper)\";
//   parameter Real T_op(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Operating temperature of winding\";
//   parameter Real h_w(quantity = \"Length\", unit = \"m\") \"Height of winding cross-section\";
//   parameter Real b_w(quantity = \"Length\", unit = \"m\") \"Width of winding cross-section\";
//   parameter Real l_avg(quantity = \"Length\", unit = \"m\") \"Average length of one turn\";
//   parameter Real V_op(quantity = \"ElectricPotential\", unit = \"V\") \"Operating voltage (nominal/ minimum/ maximum voltage depending on design objective)\";
//   parameter Real J_desired(quantity = \"CurrentDensity\", unit = \"A/m2\") = 4000000.0 \"DESIRED current density at operating temperature and voltage resp.\";
//   parameter Real c_condFillChosen = 0.6 \"CHOSEN conductor filling factor = total conductor area without insulation/ total winding area\";
//   final parameter Real rho(quantity = \"Resistivity\", unit = \"Ohm.m\") = rho_20 * (1.0 + alpha_20 * (253.15 + T_op)) \"Resistivity at operating temperature\";
//   final parameter Real A_w(quantity = \"Area\", unit = \"m2\") = h_w * b_w \"Cross-section area of winding\";
//   final parameter Real N_calculated = V_op / (J_desired * l_avg * rho) \"CALCULATED number of turns\";
//   final parameter Real d_wireCalculated(quantity = \"Length\", unit = \"m\", min = 0.0) = sqrt((4.0 * (A_w * c_condFillChosen)) / (N_calculated * 3.14159265358979)) \"CALCULATED wire diameter (without insulation)\";
//   parameter Real N_chosen = N_calculated \"CHOSEN number of turns\";
//   final parameter Real A_wireCalculated(quantity = \"Area\", unit = \"m2\") = 0.785398163397448 * d_wireCalculated ^ 2.0 \"Calculated wire cross-section area\";
//   parameter Real d_wireChosen(quantity = \"Length\", unit = \"m\", min = 0.0) = d_wireCalculated \"CHOSEN available wire diameter (without insulation)\";
//   final parameter Real R_calculated(quantity = \"Resistance\", unit = \"Ohm\") = (rho * (N_calculated * l_avg)) / A_wireCalculated \"Winding resistance at operating temperature and voltage resp. with CALCULATED number of turns and wire diameter\";
//   final parameter Real A_wireChosen(quantity = \"Area\", unit = \"m2\") = 0.785398163397448 * d_wireChosen ^ 2.0 \"Wire cross-section area resulting from CHOSEN wire diameter\";
//   final parameter Real c_condFillActual = (3.14159265358979 * (N_chosen * d_wireChosen ^ 2.0)) / (A_w * 4.0) \"Conductor filling factor resulting from CHOSEN number of turns and wire diameter\";
//   final parameter Real P_calculated(quantity = \"Power\", unit = \"W\") = V_op ^ 2.0 / R_calculated \"Winding's ohmic losses at operating temperature and voltage resp. with CALCULATED number of turns and wire diameter\";
//   final parameter Real R_actual(quantity = \"Resistance\", unit = \"Ohm\") = (rho * (N_chosen * l_avg)) / A_wireChosen \"Winding resistance at operating temperature and voltage resp. resulting from CHOSEN number of turns and wire diameter\";
//   final parameter Real P_actual(quantity = \"Power\", unit = \"W\") = V_op ^ 2.0 / R_actual \"Winding's ohmic losses at operating temperature and voltage resp. resulting from CHOSEN number of turns and wire diameter\";
//   final parameter Real J_actual(quantity = \"CurrentDensity\", unit = \"A/m2\") = (4.0 * (V_op * d_wireChosen ^ -2.0)) / (R_actual * 3.14159265358979) \"Current density at operating temperature and voltage resp. resulting from CHOSEN number of turns and wire diameter\";
// end Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign;
// "
// "Warning: Parameter h_w has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter b_w has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter V_op has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter l_avg has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter V_op has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter l_avg has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter V_op has neither value nor start value, and is fixed during initialization (fixed=true)
// "
// "Check of Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign completed successfully.
// 
// 
// Class Modelica.Magnetic.FluxTubes.Examples.Utilities.CoilDesign has 0 equation(s) and 0 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// endResult
