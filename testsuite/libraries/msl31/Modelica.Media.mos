//name:        Modelica.Media [version 3.1]
//keyword:     instantiating MSL 3.1 Modelica.Media
//status:      correct
//env: OPENMODELICALIBRARY=../../../libraries/msl31/
//
// instantiate/check model example
//

loadModel(Modelica); getErrorString();

setDebugFlags("scodeFlatten");

// Not working - No constant value for variable waterConstants
//instantiateModel(Modelica.Media.Examples.SimpleLiquidWater); getErrorString();
//checkModel(Modelica.Media.Examples.SimpleLiquidWater); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.IdealGasH2O); getErrorString();
//checkModel(Modelica.Media.Examples.IdealGasH2O); getErrorString();

// Not working - No constant value for variable waterConstants
//instantiateModel(Modelica.Media.Examples.WaterIF97); getErrorString();
//checkModel(Modelica.Media.Examples.WaterIF97); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.MixtureGases); getErrorString();
//checkModel(Modelica.Media.Examples.MixtureGases); getErrorString();

// Not working - Class Air.MoistAir not found
//instantiateModel(Modelica.Media.Examples.MoistAir); getErrorString();
//checkModel(Modelica.Media.Examples.MoistAir); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TwoPhaseWater); getErrorString();
//checkModel(Modelica.Media.Examples.TwoPhaseWater); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TwoPhaseWater.ExtendedProperties); getErrorString();
//checkModel(Modelica.Media.Examples.TwoPhaseWater.ExtendedProperties); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TwoPhaseWater.TestTwoPhaseStates); getErrorString();
//checkModel(Modelica.Media.Examples.TwoPhaseWater.TestTwoPhaseStates); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TestOnly.MixIdealGasAir); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.MixIdealGasAir); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TestOnly.FlueGas); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.FlueGas); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TestOnly.N2AsMix); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.N2AsMix); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.TestOnly.IdealGasN2); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.IdealGasN2); getErrorString();

// Not working - Variable state.T not found
//instantiateModel(Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium); getErrorString();

// Not working
//instantiateModel(Modelica.Media.Examples.TestOnly.IdealGasN2Mix); getErrorString();
//checkModel(Modelica.Media.Examples.TestOnly.IdealGasN2Mix); getErrorString();

// Working
instantiateModel(Modelica.Media.Examples.Tests.Components.FluidPort); getErrorString();
checkModel(Modelica.Media.Examples.Tests.Components.FluidPort); getErrorString();

// Working
instantiateModel(Modelica.Media.Examples.Tests.Components.FluidPort_a); getErrorString();
checkModel(Modelica.Media.Examples.Tests.Components.FluidPort_b); getErrorString();

// Working
instantiateModel(Modelica.Media.Examples.Tests.Components.FluidPort_b); getErrorString();
checkModel(Modelica.Media.Examples.Tests.Components.FluidPort_b); getErrorString();

// Not working - Trying to redeclare class Medium but class not declared as replaceable
//             - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.Components.PortVolume); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.Components.PortVolume); getErrorString();

// Not working - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate); getErrorString();

// Not working - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.Components.FixedAmbient); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.Components.FixedAmbient); getErrorString();

// Working - Trying to redeclare class Medium but class not declared as replaceable
//instantiateModel(Modelica.Media.Examples.Tests.Components.ShortPipe); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.Components.ShortPipe); getErrorString();

// Not working - Error in generated function code
//checkModel(Modelica.Media.Examples.Tests.Components.PartialTestModel); getErrorString();

// Not working - Illegal to instantiate partial class PartialTestModel2
//checkModel(Modelica.Media.Examples.Tests.Components.PartialTestModel2); getErrorString();

// Not working - Class setState_pTX not found
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.SimpleAir); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.SimpleAir); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.DryAirNasa); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.DryAirNasa); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.Air); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.Air); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.Nitrogen); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.Nitrogen); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.SimpleNaturalGas); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.SimpleNaturalGas); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.SimpleNaturalGasFixedComposition); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.IdealGases.SimpleNaturalGasFixedComposition); getErrorString();

// Not working - Variable state.T not found
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47); getErrorString();

// Not working - Variable state.T not found
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Essotherm650); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Essotherm650); getErrorString();

// Not working - Variable state.T not found
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.IdealSteam); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.IdealSteam); getErrorString();

// Not working - Variable state.T not found
//             - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97OnePhase_ph); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97OnePhase_ph); getErrorString();

// Not working - Class setState_pTX not found
//             - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97_pT); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97_pT); getErrorString();

// Not working - Class setState_pTX not found
//             - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97_ph); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Water.WaterIF97_ph); getErrorString();

// Not working - Variable state.T not found
//             - Illegal to instantiate partial class BaseProperties
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.LinearFluid.LinearColdWater); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.LinearFLuid.LinearColdWater); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.LinearFluid.LinearWater_pT); getErrorString();
//checkModel(Modelica.Media.Examples.Tests.MediaTestModels.LinearFluid.LinearWater_pT); getErrorString();

// Not working - fixLocalIdents failed
//instantiateModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sine); getErrorString();
//checkModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sine); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sh_T); getErrorString();
//checkModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sh_T); getErrorString();

// Not working - Variable state.T not found
//instantiateModel(Modelica.Media.Examples.SolveOneNonlinearEquation.InverseIncompressible_sh_T); getErrorString();
//checkModel(Modelica.Media.Examples.SolveOneNonlinearEquation.InverseIncompressible_sh_T); getErrorString();

// Not working - Infinite loop
//instantiateModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sh_TX); getErrorString();
//checkModel(Modelica.Media.Examples.SolveOneNonlinearEquation.Inverse_sh_TX); getErrorString();

// Working
instantiateModel(Modelica.Media.Incompressible.Examples.Glycol47); getErrorString();
checkModel(Modelica.Media.Incompressible.Examples.Glycol47); getErrorString();

// Not working - Variable medium.Xi: Wrong type on builtin attribute start
//instantiateModel(Modelica.Media.Incompressible.Examples.TestGlycol); getErrorString();
//checkModel(Modelica.Media.Incompressible.Examples.TestGlycol); getErrorString();

// Result:
// true
// ""
// true
// "function Modelica.SIunits.Conversions.from_degC
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius - -273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Media.Examples.Tests.Components.FluidPort
//   Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
// equation
//   H_flow = 0.0;
//   m_flow = 0.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort;
// "
// ""
// "Check of Modelica.Media.Examples.Tests.Components.FluidPort completed successfully.
// 
// 
// Class Modelica.Media.Examples.Tests.Components.FluidPort has 2 equation(s) and 4 variable(s).
// 2 of these are trivial equation(s).
// "
// ""
// "function Modelica.SIunits.Conversions.from_degC
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius - -273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Media.Examples.Tests.Components.FluidPort_a
//   Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
// equation
//   H_flow = 0.0;
//   m_flow = 0.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a;
// "
// ""
// "Check of Modelica.Media.Examples.Tests.Components.FluidPort_b completed successfully.
// 
// 
// Class Modelica.Media.Examples.Tests.Components.FluidPort_b has 2 equation(s) and 4 variable(s).
// 2 of these are trivial equation(s).
// "
// ""
// "function Modelica.SIunits.Conversions.from_degC
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius - -273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Media.Examples.Tests.Components.FluidPort_b
//   Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
// equation
//   H_flow = 0.0;
//   m_flow = 0.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b;
// "
// ""
// "Check of Modelica.Media.Examples.Tests.Components.FluidPort_b completed successfully.
// 
// 
// Class Modelica.Media.Examples.Tests.Components.FluidPort_b has 2 equation(s) and 4 variable(s).
// 2 of these are trivial equation(s).
// "
// ""
// "function Modelica.Math.Matrices.LAPACK.dgelsx_vec
//   input Real[:, :] A;
//   input Real[size(A,1)] b;
//   input Real rcond = 0.0 \"Reciprocal condition number to estimate rank\";
//   output Real[max(nrow,ncol)] x = cat(1,b,fill(0,max(nrow,ncol) - nrow)) \"solution is in first size(A,2) rows\";
//   output Integer info;
//   output Integer rank \"Effective rank of A\";
//   protected Integer nrow = size(A,1);
//   protected Integer ncol = size(A,2);
//   protected Integer nx = max(nrow,ncol);
//   protected Integer lwork = max(min(nrow,ncol) + 3 * ncol,1 + 2 * min(nrow,ncol));
//   protected Real[lwork] work;
//   protected Real[nrow, ncol] Awork = A;
//   protected Integer[ncol] jpvt = fill(0,ncol);
// 
// external \"FORTRAN 77\";
// end Modelica.Math.Matrices.LAPACK.dgelsx_vec;
// 
// function Modelica.Math.Matrices.leastSquares
//   input Real[:, :] A \"Matrix A\";
//   input Real[size(A,1)] b \"Vector b\";
//   output Real[size(A,2)] x \"Vector x such that min|A*x-b|^2 if size(A,1) >= size(A,2) or min|x|^2 and A*x=b, if size(A,1) < size(A,2)\";
//   protected Integer info;
//   protected Integer rank;
//   protected Real[max(size(A,1),size(A,2))] xx;
// algorithm
//   (xx, info, rank) := Modelica.Math.Matrices.LAPACK.dgelsx_vec(A,b,1e-13);
//   x := xx[1:size(A,2)];
//   assert( info == 0, \"Solving an overdetermined or underdetermined linear system of
// equations with function \\\"Matrices.leastSquares\\\" failed.\");
// end Modelica.Math.Matrices.leastSquares;
// 
// function Modelica.Media.Incompressible.Examples.Glycol47.Polynomials_Temp.fitting
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u,1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u,1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := /*/tp:REAL[:]/*/(fill(1,size(u,1)));
//   for j in n:-1:1 loop
//     V[:,j] := <reduction>array(u[i] * V[i,1 + j] for i in 1:(size(u,1)));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V,y);
// end Modelica.Media.Incompressible.Examples.Glycol47.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Incompressible.Examples.Glycol47.invertTemp
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table,1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table,1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Incompressible.Examples.Glycol47.invertTemp;
// 
// function Modelica.SIunits.Conversions.from_degC
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius - -273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Media.Incompressible.Examples.Glycol47
//   constant enumeration(T, pT, ph, phX, pTX, dTX) ThermoStates = Modelica.Media.Incompressible.Examples.Glycol47.Choices.IndependentVariables.T \"Enumeration type for independent variables\";
//   constant String mediumName = \"Glycol-Water 47%\" \"Name of the medium\";
//   constant Boolean singleState = true \"= true, if u and d are not a function of pressure\";
//   constant Boolean reducedX = true \"= true if medium contains the equation sum(X) = 1.0; set reducedX=true if only one substance (see docu for details)\";
//   constant Boolean fixedX = true \"= true if medium contains the equation X = reference_X\";
//   constant Real reference_p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 101325.0 \"Reference pressure of Medium: default 1 atmosphere\";
//   constant Real p_default(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 101325.0 \"Default value for pressure of medium (for initialization)\";
//   constant Real T_default(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 293.15 \"Default value for temperature of medium (for initialization)\";
//   constant Boolean enthalpyOfT = true \"true if enthalpy is approximated as a function of T only, (p-dependence neglected)\";
//   constant Real T_min(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 243.15 \"Minimum temperature valid for medium model\";
//   constant Real T_max(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 373.15 \"Maximum temperature valid for medium model\";
//   constant Real T0(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 273.15 \"reference Temperature\";
//   constant Real h0(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = 0.0 \"reference enthalpy at T0, reference_p\";
//   constant Integer npol = 2 \"degree of polynomial used for fitting\";
//   constant Real tableDensity[1,1] = -30.0 \"Table for rho(T)\";
//   constant Real tableDensity[1,2] = 1066.0 \"Table for rho(T)\";
//   constant Real tableDensity[2,1] = -20.0 \"Table for rho(T)\";
//   constant Real tableDensity[2,2] = 1062.0 \"Table for rho(T)\";
//   constant Real tableDensity[3,1] = -10.0 \"Table for rho(T)\";
//   constant Real tableDensity[3,2] = 1058.0 \"Table for rho(T)\";
//   constant Real tableDensity[4,1] = 0.0 \"Table for rho(T)\";
//   constant Real tableDensity[4,2] = 1054.0 \"Table for rho(T)\";
//   constant Real tableDensity[5,1] = 20.0 \"Table for rho(T)\";
//   constant Real tableDensity[5,2] = 1044.0 \"Table for rho(T)\";
//   constant Real tableDensity[6,1] = 40.0 \"Table for rho(T)\";
//   constant Real tableDensity[6,2] = 1030.0 \"Table for rho(T)\";
//   constant Real tableDensity[7,1] = 60.0 \"Table for rho(T)\";
//   constant Real tableDensity[7,2] = 1015.0 \"Table for rho(T)\";
//   constant Real tableDensity[8,1] = 80.0 \"Table for rho(T)\";
//   constant Real tableDensity[8,2] = 999.0 \"Table for rho(T)\";
//   constant Real tableDensity[9,1] = 100.0 \"Table for rho(T)\";
//   constant Real tableDensity[9,2] = 984.0 \"Table for rho(T)\";
//   constant Real tableHeatCapacity[1,1] = -30.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[1,2] = 3450.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[2,1] = -20.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[2,2] = 3490.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[3,1] = -10.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[3,2] = 3520.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[4,1] = 0.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[4,2] = 3560.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[5,1] = 20.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[5,2] = 3620.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[6,1] = 40.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[6,2] = 3690.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[7,1] = 60.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[7,2] = 3760.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[8,1] = 80.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[8,2] = 3820.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[9,1] = 100.0 \"Table for Cp(T)\";
//   constant Real tableHeatCapacity[9,2] = 3890.0 \"Table for Cp(T)\";
//   constant Real tableViscosity[1,1] = -30.0 \"Table for eta(T)\";
//   constant Real tableViscosity[1,2] = 0.16 \"Table for eta(T)\";
//   constant Real tableViscosity[2,1] = -20.0 \"Table for eta(T)\";
//   constant Real tableViscosity[2,2] = 0.0743 \"Table for eta(T)\";
//   constant Real tableViscosity[3,1] = -10.0 \"Table for eta(T)\";
//   constant Real tableViscosity[3,2] = 0.0317 \"Table for eta(T)\";
//   constant Real tableViscosity[4,1] = 0.0 \"Table for eta(T)\";
//   constant Real tableViscosity[4,2] = 0.019 \"Table for eta(T)\";
//   constant Real tableViscosity[5,1] = 20.0 \"Table for eta(T)\";
//   constant Real tableViscosity[5,2] = 0.00626 \"Table for eta(T)\";
//   constant Real tableViscosity[6,1] = 40.0 \"Table for eta(T)\";
//   constant Real tableViscosity[6,2] = 0.00299 \"Table for eta(T)\";
//   constant Real tableViscosity[7,1] = 60.0 \"Table for eta(T)\";
//   constant Real tableViscosity[7,2] = 0.00162 \"Table for eta(T)\";
//   constant Real tableViscosity[8,1] = 80.0 \"Table for eta(T)\";
//   constant Real tableViscosity[8,2] = 0.0011 \"Table for eta(T)\";
//   constant Real tableViscosity[9,1] = 100.0 \"Table for eta(T)\";
//   constant Real tableViscosity[9,2] = 0.00081 \"Table for eta(T)\";
//   constant Real tableVaporPressure[1,1] = 0.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[1,2] = 500.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[2,1] = 20.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[2,2] = 1900.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[3,1] = 40.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[3,2] = 5300.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[4,1] = 60.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[4,2] = 16000.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[5,1] = 80.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[5,2] = 37000.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[6,1] = 100.0 \"Table for pVap(T)\";
//   constant Real tableVaporPressure[6,2] = 80000.0 \"Table for pVap(T)\";
//   constant Real tableConductivity[1,1] = -30.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[1,2] = 0.397 \"Table for lambda(T)\";
//   constant Real tableConductivity[2,1] = -20.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[2,2] = 0.396 \"Table for lambda(T)\";
//   constant Real tableConductivity[3,1] = -10.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[3,2] = 0.395 \"Table for lambda(T)\";
//   constant Real tableConductivity[4,1] = 0.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[4,2] = 0.395 \"Table for lambda(T)\";
//   constant Real tableConductivity[5,1] = 20.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[5,2] = 0.394 \"Table for lambda(T)\";
//   constant Real tableConductivity[6,1] = 40.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[6,2] = 0.393 \"Table for lambda(T)\";
//   constant Real tableConductivity[7,1] = 60.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[7,2] = 0.392 \"Table for lambda(T)\";
//   constant Real tableConductivity[8,1] = 80.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[8,2] = 0.391 \"Table for lambda(T)\";
//   constant Real tableConductivity[9,1] = 100.0 \"Table for lambda(T)\";
//   constant Real tableConductivity[9,2] = 0.39 \"Table for lambda(T)\";
//   constant Boolean TinK = false \"true if T[K],Kelvin used for table temperatures\";
//   constant String substanceNames[1] = \"Glycol-Water 47%\" \"Names of the mixture substances. Set substanceNames={mediumName} if only one substance.\";
//   constant Boolean hasDensity = true \"true if table tableDensity is present\";
//   constant Boolean hasHeatCapacity = true \"true if table tableHeatCapacity is present\";
//   constant Integer neta = 9 \"number of data points for viscosity\";
//   constant Boolean hasViscosity = true \"true if table tableViscosity is present\";
//   constant Boolean hasVaporPressure = true \"true if table tableVaporPressure is present\";
//   constant Real invTK[1] = 0.00411268764137364;
//   constant Real invTK[2] = 0.00395022713806044;
//   constant Real invTK[3] = 0.0038001140034201;
//   constant Real invTK[4] = 0.00366099212886692;
//   constant Real invTK[5] = 0.00341122292341805;
//   constant Real invTK[6] = 0.00319335781574325;
//   constant Real invTK[7] = 0.0030016509079994;
//   constant Real invTK[8] = 0.00283165793572136;
//   constant Real invTK[9] = 0.00267988744472732;
//   constant Integer nS = 1 \"Number of substances\";
//   constant Real poly_rho[1] = 0.0;
//   constant Real poly_rho[2] = 0.0;
//   constant Real poly_rho[3] = 0.0;
//   constant Real poly_Cp[1] = 0.0;
//   constant Real poly_Cp[2] = 0.0;
//   constant Real poly_Cp[3] = 0.0;
//   constant Integer nX = 1 \"Number of mass fractions\";
//   constant Real reference_X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 \"Default mass fractions of medium\";
//   constant Real X_default[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 1.0 \"Default value for mass fractions of medium (for initialization)\";
// end Modelica.Media.Incompressible.Examples.Glycol47;
// "
// ""
// "Check of Modelica.Media.Incompressible.Examples.Glycol47 completed successfully.
// 
// 
// Class Modelica.Media.Incompressible.Examples.Glycol47 has 0 equation(s) and 0 variable(s).
// 0 of these are trivial equation(s).
// "
// ""
// endResult
