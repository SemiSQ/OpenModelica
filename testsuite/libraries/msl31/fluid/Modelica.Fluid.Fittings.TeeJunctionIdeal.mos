//name:        Modelica.Fluid.Fittings.TeeJunctionIdeal [version 3.1]
//keyword:     fluid
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica, {"3.1"}); getErrorString();
setDebugFlags("nogen,noevalfunc");

instantiateModel(Modelica.Fluid.Fittings.TeeJunctionIdeal); getErrorString();
checkModel(Modelica.Fluid.Fittings.TeeJunctionIdeal); getErrorString();

// Result:
// true
// ""
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from Â°Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Fluid.Fittings.TeeJunctionIdeal
//   Real port_1.m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = if portFlowDirection_1 == Modelica.Fluid.Types.PortFlowDirection.Entering then 0.0 else -1e+60, max = if portFlowDirection_1 == Modelica.Fluid.Types.PortFlowDirection.Leaving then 0.0 else 1e+60) \"Mass flow rate from the connection point into the component\";
//   Real port_1.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Thermodynamic pressure in the connection point\";
//   Real port_1.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific thermodynamic enthalpy close to the connection point if m_flow < 0\";
//   Real port_2.m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = if portFlowDirection_2 == Modelica.Fluid.Types.PortFlowDirection.Entering then 0.0 else -1e+60, max = if portFlowDirection_2 == Modelica.Fluid.Types.PortFlowDirection.Leaving then 0.0 else 1e+60) \"Mass flow rate from the connection point into the component\";
//   Real port_2.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Thermodynamic pressure in the connection point\";
//   Real port_2.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific thermodynamic enthalpy close to the connection point if m_flow < 0\";
//   Real port_3.m_flow(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = if portFlowDirection_3 == Modelica.Fluid.Types.PortFlowDirection.Entering then 0.0 else -1e+60, max = if portFlowDirection_3 == Modelica.Fluid.Types.PortFlowDirection.Leaving then 0.0 else 1e+60) \"Mass flow rate from the connection point into the component\";
//   Real port_3.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Thermodynamic pressure in the connection point\";
//   Real port_3.h_outflow(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific thermodynamic enthalpy close to the connection point if m_flow < 0\";
//   protected parameter enumeration(Entering, Leaving, Bidirectional) portFlowDirection_1 = Modelica.Fluid.Types.PortFlowDirection.Bidirectional \"Flow direction for port_1\";
//   protected parameter enumeration(Entering, Leaving, Bidirectional) portFlowDirection_2 = Modelica.Fluid.Types.PortFlowDirection.Bidirectional \"Flow direction for port_2\";
//   protected parameter enumeration(Entering, Leaving, Bidirectional) portFlowDirection_3 = Modelica.Fluid.Types.PortFlowDirection.Bidirectional \"Flow direction for port_3\";
// equation
//   port_1.m_flow = 0.0;
//   port_2.m_flow = 0.0;
//   port_3.m_flow = 0.0;
//   (-port_1.m_flow) + (-port_2.m_flow) + (-port_3.m_flow) = 0.0;
//   port_1.p = port_2.p;
//   port_1.p = port_3.p;
//   port_3.h_outflow = (max(port_1.m_flow,1e-15) * port_1.h_outflow + max(port_2.m_flow,1e-15) * port_2.h_outflow) / (max(port_1.m_flow,1e-15) + max(port_2.m_flow,1e-15));
//   port_2.h_outflow = (max(port_1.m_flow,1e-15) * port_1.h_outflow + max(port_3.m_flow,1e-15) * port_3.h_outflow) / (max(port_1.m_flow,1e-15) + max(port_3.m_flow,1e-15));
//   port_1.h_outflow = (max(port_2.m_flow,1e-15) * port_2.h_outflow + max(port_3.m_flow,1e-15) * port_3.h_outflow) / (max(port_2.m_flow,1e-15) + max(port_3.m_flow,1e-15));
// end Modelica.Fluid.Fittings.TeeJunctionIdeal;
// "
// ""
// "Check of Modelica.Fluid.Fittings.TeeJunctionIdeal completed successfully.
// 
// 
// Class Modelica.Fluid.Fittings.TeeJunctionIdeal has 9 equation(s) and 9 variable(s).
// 5 of these are trivial equation(s).
// "
// ""
// endResult
