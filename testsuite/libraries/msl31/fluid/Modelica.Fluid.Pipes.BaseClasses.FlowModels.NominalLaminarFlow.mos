//name:        Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow [version 3.1]
//keyword:     fluid
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica, {"3.1"}); getErrorString();
setDebugFlags("nogen");

instantiateModel(Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow); getErrorString();
checkModel(Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow); getErrorString();

// Result:
// true
// ""
// true
// "function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState\"
//   output ThermodynamicState res;
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState;
// 
// function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density \"Return density\"
//   input Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density;
// 
// function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density_pTX \"Return density from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions\";
//   output Real d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density\";
// algorithm
//   d := Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density(Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.setState_pTX(p, T, X));
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density_pTX;
// 
// function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.dynamicViscosity \"Return dynamic viscosity\"
//   input Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.dynamicViscosity;
// 
// function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.pressure \"Return pressure\"
//   input Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.pressure;
// 
// function Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.setState_pTX;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from Â°Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow
//   parameter Integer n = 2 \"Number of discrete flow volumes\";
//   parameter Real nParallel \"number of identical parallel flow devices\";
//   parameter Real g(quantity = \"Acceleration\", unit = \"m/s2\") = system.g \"Constant gravity acceleration\";
//   parameter Boolean allowFlowReversal = system.allowFlowReversal \"= true to allow flow reversal, false restricts to design direction (states[1] -> states[n+1])\";
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) momentumDynamics = system.momentumDynamics \"Formulation of momentum balance\";
//   parameter Real m_flow_start(quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = system.m_flow_start \"Start value of mass flow rates\";
//   parameter Real p_a_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Start value for p[1] at design inflow\";
//   parameter Real p_b_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Start value for p[n+1] at design outflow\";
//   parameter Real system.p_ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) = 101325.0 \"Default ambient pressure\";
//   parameter Real system.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 293.15 \"Default ambient temperature\";
//   parameter Real system.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.80665 \"Constant gravity acceleration\";
//   parameter Boolean system.allowFlowReversal = true \"= false to restrict to design flow direction (port_a -> port_b)\";
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.energyDynamics = Modelica.Fluid.Types.Dynamics.DynamicFreeInitial \"Default formulation of energy balances\";
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.momentumDynamics = Modelica.Fluid.Types.Dynamics.SteadyState \"Default formulation of momentum balances, if options available\";
//   parameter Real system.m_flow_start(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.0 \"Default start value for mass flow rates\";
//   parameter Real system.m_flow_small(quantity = \"MassFlowRate\", unit = \"kg/s\", min = 0.0) = 0.01 \"Default small laminar mass flow rate for regularization of zero flow\";
//   parameter Real system.dp_small(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) = 1.0 \"Default small pressure drop for regularization of laminar and zero flow\";
//   parameter Real system.p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) = system.p_ambient \"Default start value for pressures\";
//   parameter Real system.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = system.T_ambient \"Default start value for temperatures\";
//   parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.massDynamics = system.energyDynamics \"Default formulation of mass balances\";
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.substanceDynamics = system.massDynamics \"Default formulation of substance balances\";
//   final parameter enumeration(DynamicFreeInitial, FixedInitial, SteadyStateInitial, SteadyState) system.traceDynamics = system.massDynamics \"Default formulation of trace substance balances\";
//   parameter Boolean useUpstreamScheme = true \"= false to average upstream and downstream properties across flow segments\";
//   parameter Real Re_turbulent(quantity = \"ReynoldsNumber\", unit = \"1\") = 4000.0 \"Start of turbulent regime, depending on type of flow device\";
//   parameter Boolean show_Res = false \"= true, if Reynolds numbers are included for plotting\";
//   protected parameter Boolean use_rho_nominal = false \"= true, if rho_nominal is used, otherwise computed from medium\";
//   protected parameter Real rho_nominal(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density_pTX(101325.0, 293.15, {1.0}) \"Nominal density (e.g. rho_liquidWater = 995, rho_air = 1.2)\";
//   protected parameter Real mu_nominal(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.dynamicViscosity(Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.setState_pTX(101325.0, 293.15, {1.0})) \"Nominal dynamic viscosity (e.g. mu_liquidWater = 1e-3, mu_air = 1.8e-5)\";
//   parameter Real dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) \"Nominal pressure loss\";
//   parameter Real m_flow_nominal(quantity = \"MassFlowRate\", unit = \"kg/s\") \"Mass flow rate for dp_nominal\";
//   input Real vs[1](quantity = \"Velocity\", unit = \"m/s\") \"Mean velocities of fluid flow\";
//   input Real vs[2](quantity = \"Velocity\", unit = \"m/s\") \"Mean velocities of fluid flow\";
//   input Real crossAreas[1](quantity = \"Area\", unit = \"m2\") \"Cross flow areas at segment boundaries\";
//   input Real crossAreas[2](quantity = \"Area\", unit = \"m2\") \"Cross flow areas at segment boundaries\";
//   input Real dimensions[1](quantity = \"Length\", unit = \"m\") \"Characteristic dimensions for fluid flow (diameters for pipe flow)\";
//   input Real dimensions[2](quantity = \"Length\", unit = \"m\") \"Characteristic dimensions for fluid flow (diameters for pipe flow)\";
//   input Real roughnesses[1](quantity = \"Length\", unit = \"m\", min = 0.0) \"Average height of surface asperities\";
//   input Real roughnesses[2](quantity = \"Length\", unit = \"m\", min = 0.0) \"Average height of surface asperities\";
//   input Real dheights[1](quantity = \"Length\", unit = \"m\") \"Height(states[2:n]) - Height(states[1:n-1])\";
//   parameter Integer m = n + -1 \"Number of flow segments\";
//   Real rhos[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = if use_rho_nominal then rho_nominal else Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density(states[1]);
//   Real rhos[2](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = if use_rho_nominal then rho_nominal else Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.density(states[2]);
//   Real rhos_act[1](quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) \"Actual density per segment\";
//   Real mus[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = if use_mu_nominal then mu_nominal else Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.dynamicViscosity(states[1]);
//   Real mus[2](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) = if use_mu_nominal then mu_nominal else Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.dynamicViscosity(states[2]);
//   Real mus_act[1](quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Actual viscosity per segment\";
//   parameter Boolean use_Ib_flows = momentumDynamics <> Modelica.Fluid.Types.Dynamics.SteadyState \"= true to consider differences in flow of momentum through boundaries\";
//   protected parameter Boolean use_mu_nominal = not show_Res \"= true, if mu_nominal is used, otherwise computed from medium\";
//   input Real pathLengths[1](quantity = \"Length\", unit = \"m\") \"Lengths along flow path\";
//   Real m_flows[1](quantity = \"MassFlowRate.unusablePartialMedium\", unit = \"kg/s\", min = if allowFlowReversal then -1e+60 else 0.0, max = 100000.0, start = m_flow_start, StateSelect = StateSelect.default) \"mass flow rates between states\";
//   Real Is[1](quantity = \"Momentum\", unit = \"kg.m/s\") \"Momentums of flow segments\";
//   Real Ib_flows[1](quantity = \"Force\", unit = \"N\") \"Flow of momentum across boudaries\";
//   Real Fs_p[1](quantity = \"Force\", unit = \"N\") \"Pressure forces\";
//   Real Fs_fg[1](quantity = \"Force\", unit = \"N\") \"Friction and gravity forces\";
//   Real dps_fg[1](quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", start = (p_a_start - p_b_start) / Real(n + -1)) \"pressure drop between states\";
// equation
//   dps_fg[1] = g * dheights[1] * (if m_flows[1] > 0.0 then rhos[1] else rhos[2]) + m_flows[1] * dp_nominal / (m_flow_nominal * Real(n + -1));
//   rhos_act[1] = if noEvent(m_flows[1] > 0.0) then rhos[1] else rhos[2];
//   mus_act[1] = if noEvent(m_flows[1] > 0.0) then mus[1] else mus[2];
//   Ib_flows[1] = 0.0;
//   Fs_p[1] = 0.5 * (crossAreas[1] + crossAreas[2]) * (Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.pressure(states[2]) - Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.Medium.pressure(states[1])) * nParallel;
//   dps_fg[1] = 2.0 * Fs_fg[1] / ((crossAreas[1] + crossAreas[2]) * nParallel);
//   Is[1] = m_flows[1] * pathLengths[1];
//   0.0 = Ib_flows[1] - Fs_p[1] - Fs_fg[1];
// end Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow;
// "
// "Warning: No corresponding 'inner' declaration found for component system declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in any of the parent scopes of 'outer' component's scope: Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// Warning: Parameter p_a_start has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter p_b_start has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter dp_nominal has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter m_flow_nominal has neither value nor start value, and is fixed during initialization (fixed=true)
// Warning: Parameter nParallel has neither value nor start value, and is fixed during initialization (fixed=true)
// "
// "Check of Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow completed successfully.
// 
// Warning: No corresponding 'inner' declaration found for component system declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in any of the parent scopes of 'outer' component's scope: Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// 
// Class Modelica.Fluid.Pipes.BaseClasses.FlowModels.NominalLaminarFlow has 12 equation(s) and 12 variable(s).
// 5 of these are trivial equation(s).
// "
// ""
// endResult
