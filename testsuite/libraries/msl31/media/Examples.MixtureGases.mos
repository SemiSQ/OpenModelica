//name:        Modelica.Media.Examples.MixtureGases [version 3.1]
//keyword:     media
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica,{"3.1"}); getErrorString();

instantiateModel(Modelica.Media.Examples.MixtureGases); getErrorString();
checkModel(Modelica.Media.Examples.MixtureGases); getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.exp
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = exp(u);
// end Modelica.Math.exp;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Media.Common.smoothStep \"Approximation of a general step, such that the characteristic is continuous and differentiable\"
//   input Real x \"Abszissa value\";
//   input Real y1 \"Ordinate value for x > 0\";
//   input Real y2 \"Ordinate value for x < 0\";
//   input Real x_small(min = 0.0) = 1e-05 \"Approximation of step for -x_small <= x <= x_small; x_small > 0 required\";
//   output Real y \"Ordinate value to approximate y = if x > 0 then y1 else y2\";
// algorithm
//   y := smooth(1,if x > x_small then y1 else if x < -x_small then y2 else if abs(x_small) > 0.0 then (y2 - y1 * (-3.0 + (x / x_small) ^ 2.0) * x) / (x_small * 4.0) + y1 / 2.0 + y2 / 2.0 else y1 / 2.0 + y2 / 2.0);
// end Modelica.Media.Common.smoothStep;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.dynamicViscosity \"Return mixture dynamic viscosity\"
//   input Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState state \"thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
//   protected Real[2] etaX(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"component dynamic viscosities\";
// algorithm
//   for i in 1:2 loop
//     etaX[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure(state.T,fluidConstants[i].criticalTemperature,fluidConstants[i].molarMass,fluidConstants[i].criticalMolarVolume,fluidConstants[i].acentricFactor,fluidConstants[i].dipoleMoment,0.0);
//   end for;
//   eta := Modelica.Media.Examples.MixtureGases.Medium1.gasMixtureViscosity(Modelica.Media.Examples.MixtureGases.Medium1.massToMoleFractions({state.X[1],state.X[2]},{0.0280134,0.0280134}),{0.0280134,0.0280134},{etaX[1],etaX[2]});
// end Modelica.Media.Examples.MixtureGases.Medium1.dynamicViscosity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.gasMixtureViscosity \"Return viscosities of gas mixtures at low pressures (Wilke method)\"
//   input Real[:] yi(quantity = \"MoleFraction\", unit = \"mol/mol\", min = 0.0, max = 1.0, nominal = 0.1) \"Mole fractions\";
//   input Real[:] M(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Mole masses\";
//   input Real[:] eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Pure component viscosities\";
//   output Real etam(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Viscosity of the mixture\";
//   protected Real[size(yi,1), size(yi,1)] fi;
// algorithm
//   for i in 1:size(eta,1) loop
//     assert( fluidConstants.hasDipoleMoment[i], \"Dipole moment for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute viscosity.\");
//     assert( fluidConstants.hasCriticalData[i], \"Critical data for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute viscosity.\");
//     for j in 1:size(eta,1) loop
//       if i == 1 then
//         fi[i,j] := (1.0 + (eta[i] / eta[j]) ^ 0.5 * (M[j] / M[i]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//       elseif j < i then
//         fi[i,j] := (fi[j,i] * M[j] * eta[i]) / (eta[j] * M[i]);
//       else
//         fi[i,j] := (1.0 + (eta[i] / eta[j]) ^ 0.5 * (M[j] / M[i]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//       end if;
//     end for;
//   end for;
//   etam := <reduction>sum((yi[i] * eta[i]) / (<reduction>sum(yi[j] * fi[i,j] for j in 1:(size(eta,1)))) for i in 1:(size(eta,1)));
// end Modelica.Media.Examples.MixtureGases.Medium1.gasMixtureViscosity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.768,0.232} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[1],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[2],T,exclEnthForm,refChoice,h_off)};
// end Modelica.Media.Examples.MixtureGases.Medium1.h_TX;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.lowPressureThermalConductivity \"Return thermal conductivites of low-pressure gas mixtures (Mason and Saxena Modification)\"
//   input Real[:] y(quantity = \"MoleFraction\", unit = \"mol/mol\", min = 0.0, max = 1.0, nominal = 0.1) \"Mole fraction of the components in the gass mixture\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] Tc(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Critical temperatures\";
//   input Real[:] Pc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Critical pressures\";
//   input Real[:] M(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molecular weights\";
//   input Real[:] lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivities of the pure gases\";
//   output Real lambdam(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity of the gas mixture\";
//   protected Real[size(y,1)] gamma(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   protected Real[size(y,1)] Tr \"Reduced temperature\";
//   protected Real[size(y,1), size(y,1)] A \"Mason and Saxena Modification\";
//   protected constant Real epsilon = 1.0 \"Numerical constant near unity\";
// algorithm
//   for i in 1:size(y,1) loop
//     gamma[i] := 210.0 * Tc[i] ^ 0.166666666666667 * M[i] ^ 0.5 * Pc[i] ^ -0.666666666666667;
//     Tr[i] := T / Tc[i];
//   end for;
//   for i in 1:size(y,1) loop
//     for j in 1:size(y,1) loop
//       A[i,j] := (1.0 + gamma[j] ^ 0.5 * (exp(0.0464 * Tr[i]) - exp(-0.2412 * Tr[i])) ^ 0.5 * (1.0 / (exp(0.0464 * Tr[j]) - exp(-0.2412 * Tr[j]))) ^ 0.5 * (1.0 / gamma[i]) ^ 0.5 * (M[i] / M[j]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//     end for;
//   end for;
//   lambdam := <reduction>sum((y[i] * lambda[i]) / (<reduction>sum(y[j] * A[i,j] for j in 1:(size(y,1)))) for i in 1:(size(y,1)));
// end Modelica.Media.Examples.MixtureGases.Medium1.lowPressureThermalConductivity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.massToMoleFractions \"Return mole fractions from mass fractions X\"
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of mixture\";
//   input Real[:] MMX(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0) \"molar masses of components\";
//   output Real[size(X,1)] moleFractions(quantity = \"MoleFraction\", unit = \"1\") \"Mole fractions of gas mixture\";
//   protected Real[size(X,1)] invMMX \"inverses of molar weights\";
//   protected Real Mmix(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0) \"molar mass of mixture\";
// algorithm
//   for i in 1:size(X,1) loop
//     invMMX[i] := 1.0 / MMX[i];
//   end for;
//   Mmix := 1.0 / (X * invMMX);
//   for i in 1:size(X,1) loop
//     moleFractions[i] := (Mmix * X[i]) / MMX[i];
//   end for;
// end Modelica.Media.Examples.MixtureGases.Medium1.massToMoleFractions;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.molarMass \"Return molar mass of mixture\"
//   input Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState state \"thermodynamic state record\";
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Mixture molar mass\";
// algorithm
//   MM := 1.0 / (state.X[1] / 0.0280134 + state.X[2] / 0.0280134);
// end Modelica.Media.Examples.MixtureGases.Medium1.molarMass;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.specificHeatCapacityCp \"Return specific heat capacity at constant pressure\"
//   input Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState state \"thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
// algorithm
//   cp := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[1],state.T) * state.X[1] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[2],state.T) * state.X[2];
// end Modelica.Media.Examples.MixtureGases.Medium1.specificHeatCapacityCp;
// 
// function Modelica.Media.Examples.MixtureGases.Medium1.thermalConductivity \"Return thermal conductivity for low pressure gas mixtures\"
//   input Modelica.Media.Examples.MixtureGases.Medium1.ThermodynamicState state \"thermodynamic state record\";
//   output Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity\";
//   input Integer method = 1 \"method to compute single component thermal conductivity\";
//   protected Real[2] lambdaX(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"component thermal conductivities\";
//   protected Real[2] eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"component thermal dynamic viscosities\";
//   protected Real[2] cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"component heat capacity\";
// algorithm
//   for i in 1:2 loop
//     assert( fluidConstants.hasCriticalData[i], \"Critical data for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute thermal conductivity.\");
//     eta[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure(state.T,fluidConstants[i].criticalTemperature,fluidConstants[i].molarMass,fluidConstants[i].criticalMolarVolume,fluidConstants[i].acentricFactor,fluidConstants[i].dipoleMoment,0.0);
//     cp[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[i],state.T);
//     lambdaX[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate(cp[i],eta[i],method);
//   end for;
//   lambda := Modelica.Media.Examples.MixtureGases.Medium1.lowPressureThermalConductivity(Modelica.Media.Examples.MixtureGases.Medium1.massToMoleFractions({state.X[1],state.X[2]},{0.0280134,0.0280134}),state.T,{126.2,126.2},{3398000.0,3398000.0},{0.0280134,0.0280134},{lambdaX[1],lambdaX[2]});
// end Modelica.Media.Examples.MixtureGases.Medium1.thermalConductivity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[6] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.dynamicViscosity \"Return mixture dynamic viscosity\"
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state \"thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
//   protected Real[6] etaX(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"component dynamic viscosities\";
// algorithm
//   for i in 1:6 loop
//     etaX[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure(state.T,fluidConstants[i].criticalTemperature,fluidConstants[i].molarMass,fluidConstants[i].criticalMolarVolume,fluidConstants[i].acentricFactor,fluidConstants[i].dipoleMoment,0.0);
//   end for;
//   eta := Modelica.Media.Examples.MixtureGases.Medium2.gasMixtureViscosity(Modelica.Media.Examples.MixtureGases.Medium2.massToMoleFractions({state.X[1],state.X[2],state.X[3],state.X[4],state.X[5],state.X[6]},{0.01604246,0.01604246,0.01604246,0.01604246,0.01604246,0.01604246}),{0.01604246,0.01604246,0.01604246,0.01604246,0.01604246,0.01604246},{etaX[1],etaX[2],etaX[3],etaX[4],etaX[5],etaX[6]});
// end Modelica.Media.Examples.MixtureGases.Medium2.dynamicViscosity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.gasMixtureViscosity \"Return viscosities of gas mixtures at low pressures (Wilke method)\"
//   input Real[:] yi(quantity = \"MoleFraction\", unit = \"mol/mol\", min = 0.0, max = 1.0, nominal = 0.1) \"Mole fractions\";
//   input Real[:] M(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Mole masses\";
//   input Real[:] eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Pure component viscosities\";
//   output Real etam(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Viscosity of the mixture\";
//   protected Real[size(yi,1), size(yi,1)] fi;
// algorithm
//   for i in 1:size(eta,1) loop
//     assert( fluidConstants.hasDipoleMoment[i], \"Dipole moment for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute viscosity.\");
//     assert( fluidConstants.hasCriticalData[i], \"Critical data for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute viscosity.\");
//     for j in 1:size(eta,1) loop
//       if i == 1 then
//         fi[i,j] := (1.0 + (eta[i] / eta[j]) ^ 0.5 * (M[j] / M[i]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//       elseif j < i then
//         fi[i,j] := (fi[j,i] * M[j] * eta[i]) / (eta[j] * M[i]);
//       else
//         fi[i,j] := (1.0 + (eta[i] / eta[j]) ^ 0.5 * (M[j] / M[i]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//       end if;
//     end for;
//   end for;
//   etam := <reduction>sum((yi[i] * eta[i]) / (<reduction>sum(yi[j] * fi[i,j] for j in 1:(size(eta,1)))) for i in 1:(size(eta,1)));
// end Modelica.Media.Examples.MixtureGases.Medium2.gasMixtureViscosity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.h_TX \"Return specific enthalpy\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.92,0.048,0.005,0.002,0.015,0.01} \"Independent Mass fractions of gas mixture\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := X * {Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[1],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[2],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[3],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[4],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[5],T,exclEnthForm,refChoice,h_off),Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data[6],T,exclEnthForm,refChoice,h_off)};
// end Modelica.Media.Examples.MixtureGases.Medium2.h_TX;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.lowPressureThermalConductivity \"Return thermal conductivites of low-pressure gas mixtures (Mason and Saxena Modification)\"
//   input Real[:] y(quantity = \"MoleFraction\", unit = \"mol/mol\", min = 0.0, max = 1.0, nominal = 0.1) \"Mole fraction of the components in the gass mixture\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] Tc(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Critical temperatures\";
//   input Real[:] Pc(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Critical pressures\";
//   input Real[:] M(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molecular weights\";
//   input Real[:] lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivities of the pure gases\";
//   output Real lambdam(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity of the gas mixture\";
//   protected Real[size(y,1)] gamma(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032);
//   protected Real[size(y,1)] Tr \"Reduced temperature\";
//   protected Real[size(y,1), size(y,1)] A \"Mason and Saxena Modification\";
//   protected constant Real epsilon = 1.0 \"Numerical constant near unity\";
// algorithm
//   for i in 1:size(y,1) loop
//     gamma[i] := 210.0 * Tc[i] ^ 0.166666666666667 * M[i] ^ 0.5 * Pc[i] ^ -0.666666666666667;
//     Tr[i] := T / Tc[i];
//   end for;
//   for i in 1:size(y,1) loop
//     for j in 1:size(y,1) loop
//       A[i,j] := (1.0 + gamma[j] ^ 0.5 * (exp(0.0464 * Tr[i]) - exp(-0.2412 * Tr[i])) ^ 0.5 * (1.0 / (exp(0.0464 * Tr[j]) - exp(-0.2412 * Tr[j]))) ^ 0.5 * (1.0 / gamma[i]) ^ 0.5 * (M[i] / M[j]) ^ 0.25) ^ 2.0 * (8.0 + (8.0 * M[i]) / M[j]) ^ -0.5;
//     end for;
//   end for;
//   lambdam := <reduction>sum((y[i] * lambda[i]) / (<reduction>sum(y[j] * A[i,j] for j in 1:(size(y,1)))) for i in 1:(size(y,1)));
// end Modelica.Media.Examples.MixtureGases.Medium2.lowPressureThermalConductivity;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.massToMoleFractions \"Return mole fractions from mass fractions X\"
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of mixture\";
//   input Real[:] MMX(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0) \"molar masses of components\";
//   output Real[size(X,1)] moleFractions(quantity = \"MoleFraction\", unit = \"1\") \"Mole fractions of gas mixture\";
//   protected Real[size(X,1)] invMMX \"inverses of molar weights\";
//   protected Real Mmix(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0) \"molar mass of mixture\";
// algorithm
//   for i in 1:size(X,1) loop
//     invMMX[i] := 1.0 / MMX[i];
//   end for;
//   Mmix := 1.0 / (X * invMMX);
//   for i in 1:size(X,1) loop
//     moleFractions[i] := (Mmix * X[i]) / MMX[i];
//   end for;
// end Modelica.Media.Examples.MixtureGases.Medium2.massToMoleFractions;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.molarMass \"Return molar mass of mixture\"
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state \"thermodynamic state record\";
//   output Real MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Mixture molar mass\";
// algorithm
//   MM := 1.0 / (state.X[1] / 0.01604246 + state.X[2] / 0.01604246 + state.X[3] / 0.01604246 + state.X[4] / 0.01604246 + state.X[5] / 0.01604246 + state.X[6] / 0.01604246);
// end Modelica.Media.Examples.MixtureGases.Medium2.molarMass;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.setSmoothState \"Return thermodynamic state so that it smoothly approximates: if x > 0 then state_a else state_b\"
//   input Real x \"m_flow or dp\";
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state_a \"Thermodynamic state if x > 0\";
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state_b \"Thermodynamic state if x < 0\";
//   input Real x_small(min = 0.0) \"Smooth transition in the region -x_small < x < x_small\";
//   output Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state \"Smooth thermodynamic state for all x (continuous and differentiable)\";
// algorithm
//   state := Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState(Modelica.Media.Common.smoothStep(x,state_a.p,state_b.p,x_small),Modelica.Media.Common.smoothStep(x,state_a.T,state_b.T,x_small),{Modelica.Media.Common.smoothStep(x,state_a.X[1],state_b.X[1],x_small),Modelica.Media.Common.smoothStep(x,state_a.X[2],state_b.X[2],x_small),Modelica.Media.Common.smoothStep(x,state_a.X[3],state_b.X[3],x_small),Modelica.Media.Common.smoothStep(x,state_a.X[4],state_b.X[4],x_small),Modelica.Media.Common.smoothStep(x,state_a.X[5],state_b.X[5],x_small),Modelica.Media.Common.smoothStep(x,state_a.X[6],state_b.X[6],x_small)});
// end Modelica.Media.Examples.MixtureGases.Medium2.setSmoothState;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.setState_pTX \"Return thermodynamic state as function of p, T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {0.92,0.048,0.005,0.002,0.015,0.01} \"Mass fractions\";
//   output Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state;
// algorithm
//   state := if size(X,1) == 6 then Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState(p,T,X) else Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.MixtureGases.Medium2.setState_pTX;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.specificHeatCapacityCp \"Return specific heat capacity at constant pressure\"
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state \"thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
// algorithm
//   cp := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[1],state.T) * state.X[1] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[2],state.T) * state.X[2] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[3],state.T) * state.X[3] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[4],state.T) * state.X[4] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[5],state.T) * state.X[5] + Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[6],state.T) * state.X[6];
// end Modelica.Media.Examples.MixtureGases.Medium2.specificHeatCapacityCp;
// 
// function Modelica.Media.Examples.MixtureGases.Medium2.thermalConductivity \"Return thermal conductivity for low pressure gas mixtures\"
//   input Modelica.Media.Examples.MixtureGases.Medium2.ThermodynamicState state \"thermodynamic state record\";
//   output Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity\";
//   input Integer method = 1 \"method to compute single component thermal conductivity\";
//   protected Real[6] lambdaX(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"component thermal conductivities\";
//   protected Real[6] eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"component thermal dynamic viscosities\";
//   protected Real[6] cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"component heat capacity\";
// algorithm
//   for i in 1:6 loop
//     assert( fluidConstants.hasCriticalData[i], \"Critical data for \" + fluidConstants[i].chemicalFormula + \" not known. Can not compute thermal conductivity.\");
//     eta[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure(state.T,fluidConstants[i].criticalTemperature,fluidConstants[i].molarMass,fluidConstants[i].criticalMolarVolume,fluidConstants[i].acentricFactor,fluidConstants[i].dipoleMoment,0.0);
//     cp[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T(data[i],state.T);
//     lambdaX[i] := Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate(cp[i],eta[i],method);
//   end for;
//   lambda := Modelica.Media.Examples.MixtureGases.Medium2.lowPressureThermalConductivity(Modelica.Media.Examples.MixtureGases.Medium2.massToMoleFractions({state.X[1],state.X[2],state.X[3],state.X[4],state.X[5],state.X[6]},{0.01604246,0.01604246,0.01604246,0.01604246,0.01604246,0.01604246}),state.T,{190.56,190.56,190.56,190.56,190.56,190.56},{4599000.0,4599000.0,4599000.0,4599000.0,4599000.0,4599000.0},{0.01604246,0.01604246,0.01604246,0.01604246,0.01604246,0.01604246},{lambdaX[1],lambdaX[2],lambdaX[3],lambdaX[4],lambdaX[5],lambdaX[6]});
// end Modelica.Media.Examples.MixtureGases.Medium2.thermalConductivity;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T \"Compute specific heat capacity at constant pressure from temperature and gas data\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity at temperature T\";
// algorithm
//   cp := if T < data.Tlimit then data.R * T ^ -2.0 * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T)))))) else data.R * T ^ -2.0 * (data.ahigh[1] + T * (data.ahigh[2] + T * (data.ahigh[3] + T * (data.ahigh[4] + T * (data.ahigh[5] + T * (data.ahigh[6] + data.ahigh[7] * T))))));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.cp_T;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure \"Dynamic viscosity of low pressure gases\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Gas temperature\";
//   input Real Tc(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Critical temperature of gas\";
//   input Real M(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.0) \"Molar mass of gas\";
//   input Real Vc(quantity = \"MolarVolume\", unit = \"m3/mol\", min = 0.0) \"Critical molar volume of gas\";
//   input Real w \"Acentric factor of gas\";
//   input Real mu(quantity = \"ElectricDipoleMoment\", unit = \"debye\", min = 0.0, max = 2.0) \"Dipole moment of gas molecule\";
//   input Real k = 0.0 \"Special correction for highly polar substances\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0) \"Dynamic viscosity of gas\";
//   protected parameter Real Const1_SI = 1.28973494369967e-08 \"Constant in formula for eta converted to SI units\";
//   protected parameter Real Const2_SI = 0.1313 \"Constant in formula for mur converted to SI units\";
//   protected Real mur = (Const2_SI * mu) / sqrt(Vc * Tc) \"Dimensionless dipole moment of gas molecule\";
//   protected Real Fc = 1.0 + (-0.2756 * w + (0.059035 * mur ^ 4.0 + k)) \"Factor to account for molecular shape and polarities of gas\";
//   protected Real Tstar \"Dimensionless temperature defined by equation below\";
//   protected Real Ov \"Viscosity collision integral for the gas\";
// algorithm
//   Tstar := (1.2593 * T) / Tc;
//   Ov := 1.16145 * Tstar ^ -0.14874 + 0.52487 * exp(-0.7732 * Tstar) + 2.16178 * exp(-2.43787 * Tstar);
//   eta := (Const1_SI * Fc * sqrt(M * T) * Vc ^ -0.666666666666667) / Ov;
// end Modelica.Media.IdealGases.Common.SingleGasNasa.dynamicViscosityLowPressure;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := if T < data.Tlimit then (data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1])) / T else (data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1])) / T + if exclEnthForm then -data.Hf else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0;
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate \"Thermal conductivity of polyatomic gases(Eucken and Modified Eucken correlation)\"
//   input Real Cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Constant pressure heat capacity\";
//   input Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
//   input Integer method(min = 1, max = 2) = 1 \"1: Eucken Method, 2: Modified Eucken Method\";
//   output Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity [W/(m.k)]\";
// algorithm
//   lambda := if method == 1 then eta * (Cp + 1.25 * data.R) else eta * (Cp - data.R) * (1.32 + 1.77 / (-1.0 + Cp / 8.314472));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function Modelica.SIunits.Conversions.to_bar \"Convert from Pascal to bar\"
//   input Real Pa(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pascal value\";
//   output Real bar(quantity = \"Pressure\", unit = \"bar\") \"bar value\";
// algorithm
//   bar := Pa / 100000.0;
// end Modelica.SIunits.Conversions.to_bar;
// 
// function Modelica.SIunits.Conversions.to_degC \"Convert from Kelvin to °Celsius\"
//   input Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
//   output Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
// algorithm
//   Celsius := -273.15 + Kelvin;
// end Modelica.SIunits.Conversions.to_degC;
// 
// class Modelica.Media.Examples.MixtureGases
//   parameter Real V(quantity = \"Volume\", unit = \"m3\") = 1.0 \"Fixed size of volume 1 and volume 2\";
//   parameter Real m_flow_ext(quantity = \"MassFlowRate\", unit = \"kg/s\") = 0.01 \"Fixed mass flow rate in to volume 1 and in to volume 2\";
//   parameter Real H_flow_ext(quantity = \"EnthalpyFlowRate\", unit = \"W\") = 5000.0 \"Fixed enthalpy flow rate in to volume and in to volume 2\";
//   input Real medium1.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 100000.0, StateSelect = StateSelect.prefer) \"Absolute pressure of medium\";
//   input Real medium1.Xi[1](quantity = \"MassFraction\", unit = \"1\", start = 0.768, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium1.Xi[2](quantity = \"MassFraction\", unit = \"1\", start = 0.232, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium1.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real medium1.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density of medium\";
//   Real medium1.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0, StateSelect = StateSelect.prefer) \"Temperature of medium\";
//   Real medium1.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.8, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium1.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.2, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium1.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real medium1.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real medium1.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real medium1.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real medium1.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature of medium\";
//   Real medium1.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium1.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   parameter Boolean medium1.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   final constant Boolean medium1.standardOrderComponents;
//   Real medium1.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(medium1.T) \"Temperature of medium in [degC]\";
//   Real medium1.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(medium1.p) \"Absolute pressure of medium in [bar]\";
//   Real m1(quantity = \"CombustionAirN2O2\", start = 1.0);
//   Real U1(quantity = \"Energy\", unit = \"J\");
//   Real cp1(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) = Modelica.Media.Examples.MixtureGases.Medium1.specificHeatCapacityCp(medium1.state);
//   Real eta1(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) = Modelica.Media.Examples.MixtureGases.Medium1.dynamicViscosity(medium1.state);
//   Real lambda1(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) = Modelica.Media.Examples.MixtureGases.Medium1.thermalConductivity(medium1.state,1);
//   input Real medium2.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, start = 100000.0, StateSelect = StateSelect.prefer) \"Absolute pressure of medium\";
//   input Real medium2.Xi[1](quantity = \"MassFraction\", unit = \"1\", start = 0.92, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.Xi[2](quantity = \"MassFraction\", unit = \"1\", start = 0.048, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.Xi[3](quantity = \"MassFraction\", unit = \"1\", start = 0.005, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.Xi[4](quantity = \"MassFraction\", unit = \"1\", start = 0.002, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.Xi[5](quantity = \"MassFraction\", unit = \"1\", start = 0.015, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.Xi[6](quantity = \"MassFraction\", unit = \"1\", start = 0.01, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real medium2.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real medium2.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density of medium\";
//   Real medium2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0, StateSelect = StateSelect.prefer) \"Temperature of medium\";
//   Real medium2.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.2, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.2, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.X[6](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 0.3, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real medium2.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real medium2.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real medium2.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real medium2.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature of medium\";
//   Real medium2.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.state.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.state.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.state.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real medium2.state.X[6](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   parameter Boolean medium2.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   final constant Boolean medium2.standardOrderComponents;
//   Real medium2.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(medium2.T) \"Temperature of medium in [degC]\";
//   Real medium2.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(medium2.p) \"Absolute pressure of medium in [bar]\";
//   Real m2(quantity = \"SimpleNaturalGas\", start = 1.0);
//   Real U2(quantity = \"Energy\", unit = \"J\");
//   Real cp2(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) = Modelica.Media.Examples.MixtureGases.Medium2.specificHeatCapacityCp(medium2.state);
//   Real eta2(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) = Modelica.Media.Examples.MixtureGases.Medium2.dynamicViscosity(medium2.state);
//   Real lambda2(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) = Modelica.Media.Examples.MixtureGases.Medium2.thermalConductivity(medium2.state,1);
//   Real state2.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 100500.0 \"Absolute pressure of medium\";
//   Real state2.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 302.0 \"Temperature of medium\";
//   Real state2.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.3 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state2.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.2 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state2.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.2 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state2.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.1 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state2.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.1 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real state2.X[6](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = 0.1 \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real smoothState.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature of medium\";
//   Real smoothState.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.X[3](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.X[4](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.X[5](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real smoothState.X[6](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real m_flow_ext2;
//   Real der_p;
//   Real der_T;
// equation
//   assert(medium1.T >= 200.0 and medium1.T <= 6000.0,\"
// Temperature T (=\" + String(medium1.T,0,true,6) + \" K = 200 K) is not in the allowed range
// 200 K <= T <= 6000 K
// required from medium model \\\"\" + \"CombustionAirN2O2\" + \"\\\".\");
//   medium1.MM = Modelica.Media.Examples.MixtureGases.Medium1.molarMass(medium1.state);
//   medium1.h = Modelica.Media.Examples.MixtureGases.Medium1.h_TX(medium1.T,{medium1.X[1],medium1.X[2]},true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K,0.0);
//   medium1.R = 296.803386950531 * (medium1.X[1] + medium1.X[2]);
//   medium1.u = medium1.h - medium1.R * medium1.T;
//   medium1.d = medium1.p / (medium1.T * medium1.R);
//   medium1.state.T = medium1.T;
//   medium1.state.p = medium1.p;
//   medium1.state.X[1] = medium1.X[1];
//   medium1.state.X[2] = medium1.X[2];
//   medium1.Xi[1] = medium1.X[1];
//   medium1.Xi[2] = medium1.X[2];
//   assert(medium1.X[1] >= -1e-05 and medium1.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(medium1.X[1],0,true,6) + \"of substance \" + \"Nitrogen\" + \"
// of medium \" + \"CombustionAirN2O2\" + \" is not in the range 0..1\");
//   assert(medium1.X[2] >= -1e-05 and medium1.X[2] <= 1.00001,\"Mass fraction X[2] = \" + String(medium1.X[2],0,true,6) + \"of substance \" + \"Oxygen\" + \"
// of medium \" + \"CombustionAirN2O2\" + \" is not in the range 0..1\");
//   assert(medium1.p >= 0.0,\"Pressure (= \" + String(medium1.p,0,true,6) + \" Pa) of medium \\\"\" + \"CombustionAirN2O2\" + \"\\\" is negative
// (Temperature = \" + String(medium1.T,0,true,6) + \" K)\");
//   assert(medium2.T >= 200.0 and medium2.T <= 6000.0,\"
// Temperature T (=\" + String(medium2.T,0,true,6) + \" K = 200 K) is not in the allowed range
// 200 K <= T <= 6000 K
// required from medium model \\\"\" + \"SimpleNaturalGas\" + \"\\\".\");
//   medium2.MM = Modelica.Media.Examples.MixtureGases.Medium2.molarMass(medium2.state);
//   medium2.h = Modelica.Media.Examples.MixtureGases.Medium2.h_TX(medium2.T,{medium2.X[1],medium2.X[2],medium2.X[3],medium2.X[4],medium2.X[5],medium2.X[6]},true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K,0.0);
//   medium2.R = 518.279116793808 * (medium2.X[1] + (medium2.X[2] + (medium2.X[3] + (medium2.X[4] + (medium2.X[5] + medium2.X[6])))));
//   medium2.u = medium2.h - medium2.R * medium2.T;
//   medium2.d = medium2.p / (medium2.T * medium2.R);
//   medium2.state.T = medium2.T;
//   medium2.state.p = medium2.p;
//   medium2.state.X[1] = medium2.X[1];
//   medium2.state.X[2] = medium2.X[2];
//   medium2.state.X[3] = medium2.X[3];
//   medium2.state.X[4] = medium2.X[4];
//   medium2.state.X[5] = medium2.X[5];
//   medium2.state.X[6] = medium2.X[6];
//   medium2.Xi[1] = medium2.X[1];
//   medium2.Xi[2] = medium2.X[2];
//   medium2.Xi[3] = medium2.X[3];
//   medium2.Xi[4] = medium2.X[4];
//   medium2.Xi[5] = medium2.X[5];
//   medium2.Xi[6] = medium2.X[6];
//   assert(medium2.X[1] >= -1e-05 and medium2.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(medium2.X[1],0,true,6) + \"of substance \" + \"Methane\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.X[2] >= -1e-05 and medium2.X[2] <= 1.00001,\"Mass fraction X[2] = \" + String(medium2.X[2],0,true,6) + \"of substance \" + \"Ethane\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.X[3] >= -1e-05 and medium2.X[3] <= 1.00001,\"Mass fraction X[3] = \" + String(medium2.X[3],0,true,6) + \"of substance \" + \"Propane\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.X[4] >= -1e-05 and medium2.X[4] <= 1.00001,\"Mass fraction X[4] = \" + String(medium2.X[4],0,true,6) + \"of substance \" + \"N-Butane,\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.X[5] >= -1e-05 and medium2.X[5] <= 1.00001,\"Mass fraction X[5] = \" + String(medium2.X[5],0,true,6) + \"of substance \" + \"Nitrogen\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.X[6] >= -1e-05 and medium2.X[6] <= 1.00001,\"Mass fraction X[6] = \" + String(medium2.X[6],0,true,6) + \"of substance \" + \"Carbondioxide\" + \"
// of medium \" + \"SimpleNaturalGas\" + \" is not in the range 0..1\");
//   assert(medium2.p >= 0.0,\"Pressure (= \" + String(medium2.p,0,true,6) + \" Pa) of medium \\\"\" + \"SimpleNaturalGas\" + \"\\\" is negative
// (Temperature = \" + String(medium2.T,0,true,6) + \" K)\");
//   medium1.X[1] = 0.8;
//   medium1.X[2] = 0.2;
//   m1 = medium1.d * V;
//   U1 = m1 * medium1.u;
//   der(m1) = m_flow_ext;
//   der(U1) = H_flow_ext;
//   medium2.X[1] = 0.1;
//   medium2.X[2] = 0.1;
//   medium2.X[3] = 0.1;
//   medium2.X[4] = 0.2;
//   medium2.X[5] = 0.2;
//   medium2.X[6] = 0.3;
//   m2 = medium2.d * V;
//   U2 = m2 * medium2.u;
//   der(m2) = m_flow_ext;
//   der(U2) = H_flow_ext;
//   m_flow_ext2 = time + -0.5;
//   smoothState = Modelica.Media.Examples.MixtureGases.Medium2.setSmoothState(m_flow_ext2,medium2.state,state2,0.2);
//   der_p = der(smoothState.p);
//   der_T = der(smoothState.T);
// end Modelica.Media.Examples.MixtureGases;
// "
// "[package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:534:5-535:65:writable] Error: No constant value for variable data.R in scope Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate.
// "
// "Check of Modelica.Media.Examples.MixtureGases completed successfully.
// 
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:534:5-535:65:writable] Error: No constant value for variable data.R in scope Modelica.Media.IdealGases.Common.SingleGasNasa.thermalConductivityEstimate.
// 
// Class Modelica.Media.Examples.MixtureGases has 75 equation(s) and 75 variable(s).
// 38 of these are trivial equation(s).
// "
// ""
// endResult
