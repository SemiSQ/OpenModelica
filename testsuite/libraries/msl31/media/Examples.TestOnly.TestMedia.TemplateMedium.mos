//name:        Modelica.Media.Examples.TestOnly.MixIdealGasAir [version 3.1]
//keyword:     media
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica,{"3.1"}); getErrorString();

instantiateModel(Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium); getErrorString();
checkModel(Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium); getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.dynamicViscosity \"Return dynamic viscosity\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) \"Dynamic viscosity\";
// algorithm
//   eta := 10.0 + -0.3 * state.T + 0.2 * state.p;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.dynamicViscosity;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.isentropicExponent \"Return isentropic exponent\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) \"Isentropic exponent\";
// algorithm
//   gamma := 1.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.isentropicExponent;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificEntropy \"Return specific entropy\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) \"Specific entropy\";
// algorithm
//   s := 0.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificEntropy;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCp \"Return specific heat capacity at constant pressure\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant pressure\";
// algorithm
//   cp := 0.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCp;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCv \"Return specific heat capacity at constant volume\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Specific heat capacity at constant volume\";
// algorithm
//   cv := 0.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCv;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.thermalConductivity \"Return thermal conductivity\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) \"Thermal conductivity\";
// algorithm
//   lambda := 0.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.thermalConductivity;
// 
// function Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.velocityOfSound \"Return velocity of sound\"
//   input Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real a(quantity = \"Velocity\", unit = \"m/s\", min = 0.0, max = 100000.0, start = 1000.0, nominal = 1000.0) \"Velocity of sound\";
// algorithm
//   a := 0.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.velocityOfSound;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from Â°Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// class Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium
//   Real state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature of medium\";
//   Real eta(quantity = \"DynamicViscosity\", unit = \"Pa.s\", min = 0.0, max = 100000000.0, start = 0.001, nominal = 0.001) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.dynamicViscosity(state);
//   Real lambda(quantity = \"ThermalConductivity\", unit = \"W/(m.K)\", min = 0.0, max = 500.0, start = 1.0, nominal = 1.0) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.thermalConductivity(state);
//   Real s(quantity = \"SpecificEntropy\", unit = \"J/(kg.K)\", min = -1000000.0, max = 1000000.0, nominal = 1000.0) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificEntropy(state);
//   Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCp(state);
//   Real cv(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.specificHeatCapacityCv(state);
//   Real gamma(quantity = \"RatioOfSpecificHeatCapacities\", unit = \"1\", min = 1.0, max = 500000.0, start = 1.2, nominal = 1.2) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.isentropicExponent(state);
//   Real a(quantity = \"Velocity\", unit = \"m/s\", min = 0.0, max = 100000.0, start = 1000.0, nominal = 1000.0) = Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium.Medium.velocityOfSound(state);
// equation
//   state.p = 100000.0;
//   state.T = 300.0 + time / 1000.0;
// end Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium;
// "
// ""
// "Check of Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium completed successfully.
// 
// 
// Class Modelica.Media.Examples.TestOnly.TestMedia.TemplateMedium has 9 equation(s) and 9 variable(s).
// 1 of these are trivial equation(s).
// "
// ""
// endResult
