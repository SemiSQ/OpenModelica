//name:        Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir [version 3.1]
//keyword:     media
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica,{"3.1"}); getErrorString();
setDebugFlags("nogen,noevalfunc");

instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir); getErrorString();
checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir); getErrorString();

// Result:
// true
// ""
// true
// "function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Math.cos
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = cos(u);
// end Modelica.Math.cos;
// 
// function Modelica.Math.cosh
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = cosh(u);
// end Modelica.Math.cosh;
// 
// function Modelica.Math.exp
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = exp(u);
// end Modelica.Math.exp;
// 
// function Modelica.Math.log
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = log(u);
// end Modelica.Math.log;
// 
// function Modelica.Math.tan
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\" y = tan(u);
// end Modelica.Math.tan;
// 
// function Modelica.Math.tanh
//   input Real u;
//   output Real y;
// 
//   external \"C\" y = tanh(u);
// end Modelica.Math.tanh;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.PortVolume.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState\"
//   input Real(min=0.0, max=100000000.0, nominal=100000.0, start=100000.0, quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   input Real(min=1.0, max=10000.0, nominal=300.0, start=300.0, quantity=\"ThermodynamicTemperature\", unit=\"K\", displayUnit=\"degC\") T;
//   input Real(quantity=\"MassFraction\", unit=\"kg/kg\", min=0.0, max=1.0, nominal=0.1)[2] X;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction \"Spline interpolation of two functions\"
//   input Real pos \"Returned value for x-deltax >= 0\";
//   input Real neg \"Returned value for x+deltax <= 0\";
//   input Real x \"Function argument\";
//   input Real deltax = 1.0 \"Region around x with spline interpolation\";
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   if scaledX1 <= -0.999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := pos * y + (1.0 - y) * neg;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction_der \"Derivative of spliceFunction\"
//   input Real pos;
//   input Real neg;
//   input Real x;
//   input Real deltax = 1.0;
//   input Real dpos;
//   input Real dneg;
//   input Real dx;
//   input Real ddeltax = 0.0;
//   output Real out;
//   protected Real scaledX;
//   protected Real scaledX1;
//   protected Real dscaledX1;
//   protected Real y;
// algorithm
//   scaledX1 := x / deltax;
//   scaledX := scaledX1 * asin(1.0);
//   dscaledX1 := (dx - scaledX1 * ddeltax) / deltax;
//   if scaledX1 <= -0.99999999999 then
//     y := 0.0;
//   elseif scaledX1 >= 0.9999999999 then
//     y := 1.0;
//   else
//     y := 0.5 + tanh(tan(scaledX)) / 2.0;
//   end if;
//   out := dpos * y + (1.0 - y) * dneg;
//   if abs(scaledX1) < 1.0 then
//     out := out + (pos - neg * dscaledX1 * asin(1.0) * (cosh(tan(scaledX)) * cos(scaledX)) ^ -2.0) / 2.0;
//   end if;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater \"Computes specific enthalpy of water (solid/liquid) near atmospheric pressure from temperature T\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of water\";
// algorithm
//   h := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater_der \"Derivative function of enthalpyOfWater\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT(unit = \"K/s\") \"Time derivative of temperature\";
//   output Real dh(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
// algorithm
//   dh := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction_der(-1147230.0 + 4200.0 * T,-559957.5 + 2050.0 * T + -333000.0,T + -273.16,0.1,4200.0 * dT,2050.0 * dT,dT,0.0);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.h_pTX \"Return specific enthalpy of moist air as a function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T, X\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"mass fraction of air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure(T);
//   X_sat := min((0.621964713077499 * (1.0 - X[1]) * p_steam_sat) / max(1e-013,p - p_steam_sat),1.0);
//   X_liquid := max(X[1] - X_sat,0.0);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) * X_steam + Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) * X_air + Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater(T) * X_liquid;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.h_pTX;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.h_pTX_der \"Derivative function of h_pTX\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"1\") \"Mass fractions of moist air\";
//   input Real dp(unit = \"Pa/s\") \"Pressure derivative\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   input Real[:] dX(unit = \"1/s\") \"Composition derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Time derivative of specific enthalpy\";
//   protected Real p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"Partial saturation pressure of steam\";
//   protected Real X_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of moist air\";
//   protected Real X_liquid(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of liquid water\";
//   protected Real X_steam(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of steam water\";
//   protected Real X_air(quantity = \"MassFraction\", unit = \"1\") \"Mass fraction of air\";
//   protected Real x_sat(quantity = \"MassFraction\", unit = \"1\") \"Absolute humidity per unit mass of dry air at saturation\";
//   protected Real dX_steam(unit = \"1/s\") \"Time deriveative of steam mass fraction\";
//   protected Real dX_air(unit = \"1/s\") \"Time derivative of dry air mass fraction\";
//   protected Real dX_liq(unit = \"1/s\") \"Time derivative of liquid/solid water mass fraction\";
//   protected Real dps(unit = \"Pa/s\") \"Time derivative of saturation pressure\";
//   protected Real dx_sat(unit = \"1/s\") \"Time derivative of abolute humidity per unit mass of dry air\";
// algorithm
//   p_steam_sat := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure(T);
//   x_sat := (0.621964713077499 * p_steam_sat) / max(1e-013,p - p_steam_sat);
//   X_sat := min(x_sat * (1.0 - X[1]),1.0);
//   X_liquid := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction(X[1] - X_sat,0.0,X[1] - X_sat,1e-006);
//   X_steam := X[1] - X_liquid;
//   X_air := 1.0 - X[1];
//   dX_air := -dX[1];
//   dps := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure_der(T,dT);
//   dx_sat := 0.621964713077499 * (dps * (p - p_steam_sat) - p_steam_sat * (dp - dps)) * (p - p_steam_sat) ^ -2.0;
//   dX_liq := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction_der(X[1] - X_sat,0.0,X[1] - X_sat,1e-006,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0,(1.0 + x_sat) * dX[1] - (1.0 - X[1]) * dx_sat,0.0);
//   dX_steam := dX[1] - dX_liq;
//   h_der := X_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319,dT) + dX_steam * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"H2O\",0.01801528,-13423382.8172529,549760.647628014,1000.0,{-39479.6083,575.573102,0.931782653,0.00722271286,-7.34255737e-006,4.95504349e-009,-1.336933246e-012},{-33039.7431,17.24205775},{1034972.096,-2412.698562,4.64611078,0.002291998307,-6.83683048e-007,9.42646893e-011,-4.82238053e-015},{-13842.86509,-7.97814851},461.523329085088),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,2547494.319) + X_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684,dT) + dX_air * Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow(Modelica.Media.IdealGases.Common.DataRecord(\"Air\",0.0289651159,-4333.83385840345,298609.680343105,1000.0,{10099.5016,-196.827561,5.00915511,-0.00576101373,1.06685993e-005,-7.94029797e-009,2.18523191e-012},{-176.796731,-3.921504225},{241521.443,-1257.8746,5.14455867,-0.000213854179,7.06522784e-008,-1.07148349e-011,6.57780015e-016},{6462.26319,-8.147411905},287.051224952979),T,true,Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined,25104.684) + X_liquid * Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater_der(T,dT) + dX_liq * Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.enthalpyOfWater(T);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.h_pTX_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure \"Return saturation pressure of water as a function of temperature T between 223.16 and 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"saturation pressure\";
// algorithm
//   psat := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid \"Return saturation pressure of water as a function of temperature T in the range of 273.16 to 373.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"saturation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"saturation pressure\";
// algorithm
//   psat := 611.657 * exp(17.2799 + -4102.99 / (-35.719 + Tsat));
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid_der \"Time derivative of saturationPressureLiquid\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Saturation temperature derivative\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := 2509622.55443 * exp(17.2799 + -4102.99 / (-35.719 + Tsat)) * dTsat * (-35.719 + Tsat) ^ -2.0;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure_der \"Derivative function for 'saturationPressure'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Saturation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of saturation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Saturation pressure\";
// algorithm
//   psat_der := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.Utilities.spliceFunction_der(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid(Tsat),Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce(Tsat),Tsat + -273.16,1.0,Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressureLiquid_der(Tsat,dTsat),Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce_der(Tsat,dTsat),dTsat,0.0);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.saturationPressure_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.setState_pTX \"Return thermodynamic state as function of pressure p, temperature T and composition X\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState state \"Thermodynamic state\";
// algorithm
//   state := if size(X,1) == 2 then Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState(p,T,X) else Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState(p,T,cat(1,X,{1.0 - sum(X)}));
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy \"Return specific enthalpy of moist air as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.h_pTX(state.p,state.T,{state.X[1],state.X[2]});
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {0.01,0.99} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.setState_pTX(p,T,X));
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce \"Return sublimation pressure of water as a function of temperature T between 223.16 and 273.16 K\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"sublimation temperature\";
//   output Real psat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) \"sublimation pressure\";
// algorithm
//   psat := 611.657 * exp(22.5159 + -6150.443244 / Tsat);
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce_der \"Derivative function for 'sublimationPressureIce'\"
//   input Real Tsat(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Sublimation temperature\";
//   input Real dTsat(unit = \"K/s\") \"Time derivative of sublimation temperature\";
//   output Real psat_der(unit = \"Pa/s\") \"Sublimation pressure\";
// algorithm
//   psat_der := 3761961.66329531 * exp(22.5159 + -6150.443244 / Tsat) * dTsat * Tsat ^ -2.0;
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.sublimationPressureIce_der;
// 
// function Modelica.Media.IdealGases.Common.DataRecord \"Automatically generated record constructor for Modelica.Media.IdealGases.Common.DataRecord\"
//   input String name;
//   input Real(quantity=\"MolarMass\", unit=\"kg/mol\", min=0.0) MM;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") Hf;
//   input Real(quantity=\"SpecificEnergy\", unit=\"J/kg\") H0;
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") Tlimit;
//   input Real[7] alow;
//   input Real[2] blow;
//   input Real[7] ahigh;
//   input Real[2] bhigh;
//   input Real(quantity=\"SpecificHeatCapacity\", unit=\"J/(kg.K)\") R;
//   output DataRecord res;
// end Modelica.Media.IdealGases.Common.DataRecord;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.cp_Tlow \"Compute specific heat capacity at constant pressure, low T region\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   output Real cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"Specific heat capacity at temperature T\";
// algorithm
//   cp := data.R * T ^ -2.0 * (data.alow[1] + T * (data.alow[2] + T * (data.alow[3] + T * (data.alow[4] + T * (data.alow[5] + T * (data.alow[6] + data.alow[7] * T))))));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.cp_Tlow;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.cp_Tlow_der \"Compute specific heat capacity at constant pressure, low T region\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Real dT \"Temperature derivative\";
//   output Real cp_der \"Derivative of specific heat capacity\";
// algorithm
//   cp_der := dT * data.R * T ^ -3.0 * (-2.0 * data.alow[1] + T * (T ^ 2.0 * (data.alow[4] + T * (2.0 * data.alow[5] + T * (3.0 * data.alow[6] + 4.0 * data.alow[7] * T))) - data.alow[2]));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.cp_Tlow_der;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_T \"Compute specific enthalpy from temperature and gas data; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := if T < data.Tlimit then (data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1])) / T else (data.R * (T * (data.bhigh[1] + data.ahigh[2] * log(T) + T * (data.ahigh[3] + T * (0.5 * data.ahigh[4] + T * (0.333333333333333 * data.ahigh[5] + T * (0.25 * data.ahigh[6] + 0.2 * data.ahigh[7] * T))))) - data.ahigh[1])) / T + if exclEnthForm then -data.Hf else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0;
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_T;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow \"Compute specific enthalpy, low T region; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at temperature T\";
// algorithm
//   h := (data.R * (T * (data.blow[1] + data.alow[2] * log(T) + T * (data.alow[3] + T * (0.5 * data.alow[4] + T * (0.333333333333333 * data.alow[5] + T * (0.25 * data.alow[6] + 0.2 * data.alow[7] * T))))) - data.alow[1])) / T + if exclEnthForm then -data.Hf else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.ZeroAt0K then data.H0 else 0.0 + if refChoice == Modelica.Media.Interfaces.PartialMedium.Choices.ReferenceEnthalpy.UserDefined then h_off else 0.0;
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der \"Compute specific enthalpy, low T region; reference is decided by the
//     refChoice input, or by the referenceChoice package constant by default\"
//   input Modelica.Media.IdealGases.Common.DataRecord data \"Ideal gas data\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Temperature\";
//   input Boolean exclEnthForm = true \"If true, enthalpy of formation Hf is not included in specific enthalpy h\";
//   input enumeration(ZeroAt0K, ZeroAt25C, UserDefined) refChoice = Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K \"Choice of reference enthalpy\";
//   input Real h_off(quantity = \"SpecificEnergy\", unit = \"J/kg\") = 0.0 \"User defined offset for reference enthalpy, if referenceChoice = UserDefined\";
//   input Real dT(unit = \"K/s\") \"Temperature derivative\";
//   output Real h_der(unit = \"J/(kg.s)\") \"Derivative of specific enthalpy at temperature T\";
// algorithm
//   h_der := dT * Modelica.Media.IdealGases.Common.SingleGasNasa.cp_Tlow(data,T);
// end Modelica.Media.IdealGases.Common.SingleGasNasa.h_Tlow_der;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.IdealGases.Common.SingleGasNasa.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.IdealGases.Common.SingleGasNasa.setState_pTX;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.IdealGases.Common.SingleGasNasa.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.h_T(data,state.T,true,Modelica.Media.IdealGases.Common.SingleGasNasa.Choices.ReferenceEnthalpy.ZeroAt0K,0.0);
// end Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy;
// 
// function Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy(Modelica.Media.IdealGases.Common.SingleGasNasa.setState_pTX(p,T,X));
// end Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy_pTX;
// 
// function Modelica.Media.Interfaces.PartialMedium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Interfaces.PartialMedium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.Interfaces.PartialMedium.setState_pTX;
// 
// function Modelica.Media.Interfaces.PartialMedium.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.Interfaces.PartialMedium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// end Modelica.Media.Interfaces.PartialMedium.specificEnthalpy;
// 
// function Modelica.Media.Interfaces.PartialMedium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Interfaces.PartialMedium.specificEnthalpy(Modelica.Media.Interfaces.PartialMedium.setState_pTX(p,T,X));
// end Modelica.Media.Interfaces.PartialMedium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Interfaces.PartialMixtureMedium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.Interfaces.PartialMixtureMedium.setState_pTX;
// 
// function Modelica.Media.Interfaces.PartialMixtureMedium.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.Interfaces.PartialMixtureMedium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// end Modelica.Media.Interfaces.PartialMixtureMedium.specificEnthalpy;
// 
// function Modelica.Media.Interfaces.PartialMixtureMedium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Interfaces.PartialMixtureMedium.specificEnthalpy(Modelica.Media.Interfaces.PartialMixtureMedium.setState_pTX(p,T,X));
// end Modelica.Media.Interfaces.PartialMixtureMedium.specificEnthalpy_pTX;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function Modelica.SIunits.Conversions.to_bar \"Convert from Pascal to bar\"
//   input Real Pa(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pascal value\";
//   output Real bar(quantity = \"Pressure\", unit = \"bar\") \"bar value\";
// algorithm
//   bar := Pa / 100000.0;
// end Modelica.SIunits.Conversions.to_bar;
// 
// function Modelica.SIunits.Conversions.to_degC \"Convert from Kelvin to °Celsius\"
//   input Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) \"Kelvin value\";
//   output Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
// algorithm
//   Celsius := -273.15 + Kelvin;
// end Modelica.SIunits.Conversions.to_degC;
// 
// class Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir
//   parameter Real p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0) = 101325.0 \"Initial value of pressure\";
//   parameter Real T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0) = Modelica.SIunits.Conversions.from_degC(20.0) \"Initial value of temperature\";
//   parameter Real h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir.Medium.specificEnthalpy_pTX(101325.0,Modelica.SIunits.Conversions.from_degC(20.0),{0.01,0.99}) \"Initial value of specific enthalpy\";
//   parameter Real X_start[1] = 0.01 \"Initial value of mass fractions\";
//   parameter Real X_start[2] = 0.99 \"Initial value of mass fractions\";
//   parameter Real volume.V(quantity = \"Volume\", unit = \"m3\") = 0.1 \"Fixed size of junction volume\";
//   parameter Boolean volume.use_p_start = true \"select p_start or d_start\";
//   parameter Real volume.p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = p_start \"Initial pressure\";
//   parameter Real volume.d_start(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0, max = 100000.0, start = 1, nominal = 1) = 1.0 \"Initial density\";
//   parameter Boolean volume.use_T_start = true \"select T_start or h_start\";
//   parameter Real volume.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) = T_start \"Initial temperature\";
//   parameter Real volume.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = h_start \"Initial specific enthalpy\";
//   parameter Real volume.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = X_start[1] \"Initial mass fractions m_i/m\";
//   parameter Real volume.X_start[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = X_start[2] \"Initial mass fractions m_i/m\";
//   Real volume.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real volume.port.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real volume.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real volume.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real volume.port.Xi[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Independent mixture mass fractions m_i/m in the connection point\";
//   Real volume.port.mXi_flow[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)\";
//   input Real volume.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, StateSelect = StateSelect.prefer) \"Absolute pressure of medium\";
//   input Real volume.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", start = 0.01, StateSelect = StateSelect.prefer) \"Structurally independent mass fractions\";
//   input Real volume.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real volume.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0, max = 100000.0, start = 1, nominal = 1) \"Density of medium\";
//   Real volume.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300, StateSelect = StateSelect.prefer) \"Temperature of medium\";
//   Real volume.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.01, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real volume.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.99, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real volume.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real volume.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real volume.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real volume.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real volume.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature of medium\";
//   Real volume.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real volume.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   parameter Boolean volume.medium.preferredMediumStates = true \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   final constant Boolean volume.medium.standardOrderComponents;
//   Real volume.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(volume.medium.T) \"Temperature of medium in [degC]\";
//   Real volume.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(volume.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real volume.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass of total water/mass of dry air\";
//   Real volume.medium.phi \"Relative humidity\";
//   protected Real volume.medium.X_liquid(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of liquid or solid water\";
//   protected Real volume.medium.X_steam(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of steam water\";
//   protected Real volume.medium.X_air(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of air\";
//   protected Real volume.medium.X_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass fraction of saturation boundary in kg_water/kg_moistair\";
//   protected Real volume.medium.x_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass content of saturation boundary in kg_water/kg_dryair\";
//   protected Real volume.medium.p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Partial saturation pressure of steam\";
//   Real volume.U(quantity = \"Energy\", unit = \"J\") \"Internal energy of port volume\";
//   Real volume.m(quantity = \"Mass\", unit = \"kg\", min = 0) \"Mass of junction volume\";
//   Real volume.mXi[1](quantity = \"Mass\", unit = \"kg\", min = 0) \"Independent substance masses of junction volume\";
//   parameter Real fixedMassFlowRate.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 1.0 \"Fixed mass flow rate from an infinite reservoir to the fluid port\";
//   parameter Boolean fixedMassFlowRate.use_T_ambient = true \"select T_ambient or h_ambient\";
//   parameter Real fixedMassFlowRate.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) = 1.2 * T_start \"Ambient temperature\";
//   parameter Real fixedMassFlowRate.h_ambient(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = 1.2 * h_start \"Ambient specific enthalpy\";
//   parameter Real fixedMassFlowRate.X_ambient[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = 0.5 * X_start[1] \"Ambient mass fractions m_i/m of reservoir\";
//   parameter Real fixedMassFlowRate.X_ambient[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = 0.5 * X_start[2] \"Ambient mass fractions m_i/m of reservoir\";
//   input Real fixedMassFlowRate.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, StateSelect = StateSelect.default) \"Absolute pressure of medium\";
//   input Real fixedMassFlowRate.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", start = 0.01, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real fixedMassFlowRate.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real fixedMassFlowRate.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0, max = 100000.0, start = 1, nominal = 1) \"Density of medium\";
//   Real fixedMassFlowRate.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300, StateSelect = StateSelect.default) \"Temperature of medium\";
//   Real fixedMassFlowRate.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.01, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real fixedMassFlowRate.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.99, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real fixedMassFlowRate.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real fixedMassFlowRate.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real fixedMassFlowRate.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real fixedMassFlowRate.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real fixedMassFlowRate.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature of medium\";
//   Real fixedMassFlowRate.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real fixedMassFlowRate.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   parameter Boolean fixedMassFlowRate.medium.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   final constant Boolean fixedMassFlowRate.medium.standardOrderComponents;
//   Real fixedMassFlowRate.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(fixedMassFlowRate.medium.T) \"Temperature of medium in [degC]\";
//   Real fixedMassFlowRate.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(fixedMassFlowRate.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real fixedMassFlowRate.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass of total water/mass of dry air\";
//   Real fixedMassFlowRate.medium.phi \"Relative humidity\";
//   protected Real fixedMassFlowRate.medium.X_liquid(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of liquid or solid water\";
//   protected Real fixedMassFlowRate.medium.X_steam(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of steam water\";
//   protected Real fixedMassFlowRate.medium.X_air(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of air\";
//   protected Real fixedMassFlowRate.medium.X_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass fraction of saturation boundary in kg_water/kg_moistair\";
//   protected Real fixedMassFlowRate.medium.x_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass content of saturation boundary in kg_water/kg_dryair\";
//   protected Real fixedMassFlowRate.medium.p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Partial saturation pressure of steam\";
//   Real fixedMassFlowRate.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real fixedMassFlowRate.port.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real fixedMassFlowRate.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real fixedMassFlowRate.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real fixedMassFlowRate.port.Xi[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Independent mixture mass fractions m_i/m in the connection point\";
//   Real fixedMassFlowRate.port.mXi_flow[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)\";
//   parameter Boolean ambient.use_p_ambient = true \"select p_ambient or d_ambient\";
//   parameter Real ambient.p_ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = p_start \"Ambient pressure\";
//   parameter Real ambient.d_ambient(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0, max = 100000.0, start = 1, nominal = 1) = 1.0 \"Ambient density\";
//   parameter Boolean ambient.use_T_ambient = true \"select T_ambient or h_ambient\";
//   parameter Real ambient.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) = T_start \"Ambient temperature\";
//   parameter Real ambient.h_ambient(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = h_start \"Ambient specific enthalpy\";
//   parameter Real ambient.X_ambient[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = X_start[1] \"Ambient mass fractions m_i/m\";
//   parameter Real ambient.X_ambient[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) = X_start[2] \"Ambient mass fractions m_i/m\";
//   input Real ambient.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, StateSelect = StateSelect.default) \"Absolute pressure of medium\";
//   input Real ambient.medium.Xi[1](quantity = \"MassFraction\", unit = \"1\", start = 0.01, StateSelect = StateSelect.default) \"Structurally independent mass fractions\";
//   input Real ambient.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real ambient.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0, max = 100000.0, start = 1, nominal = 1) \"Density of medium\";
//   Real ambient.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300, StateSelect = StateSelect.default) \"Temperature of medium\";
//   Real ambient.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.01, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real ambient.medium.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, start = 0.99, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real ambient.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real ambient.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real ambient.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real ambient.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Absolute pressure of medium\";
//   Real ambient.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1, max = 10000.0, start = 300, nominal = 300) \"Temperature of medium\";
//   Real ambient.medium.state.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real ambient.medium.state.X[2](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   parameter Boolean ambient.medium.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   final constant Boolean ambient.medium.standardOrderComponents;
//   Real ambient.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\") = Modelica.SIunits.Conversions.to_degC(ambient.medium.T) \"Temperature of medium in [degC]\";
//   Real ambient.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(ambient.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real ambient.medium.x_water(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass of total water/mass of dry air\";
//   Real ambient.medium.phi \"Relative humidity\";
//   protected Real ambient.medium.X_liquid(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of liquid or solid water\";
//   protected Real ambient.medium.X_steam(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of steam water\";
//   protected Real ambient.medium.X_air(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Mass fraction of air\";
//   protected Real ambient.medium.X_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass fraction of saturation boundary in kg_water/kg_moistair\";
//   protected Real ambient.medium.x_sat(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Steam water mass content of saturation boundary in kg_water/kg_dryair\";
//   protected Real ambient.medium.p_steam_sat(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Partial saturation pressure of steam\";
//   Real ambient.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real ambient.port.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real ambient.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real ambient.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real ambient.port.Xi[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Independent mixture mass fractions m_i/m in the connection point\";
//   Real ambient.port.mXi_flow[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)\";
//   parameter Real shortPipe.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 1e-010, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 10000.0 \"Nominal pressure drop\";
//   parameter Real shortPipe.m_flow_nominal(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = 1e-010, max = 100000.0) = 1.0 \"Nominal mass flow rate at nominal pressure drop\";
//   Real shortPipe.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real shortPipe.port_a.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real shortPipe.port_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real shortPipe.port_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real shortPipe.port_a.Xi[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Independent mixture mass fractions m_i/m in the connection point\";
//   Real shortPipe.port_a.mXi_flow[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)\";
//   Real shortPipe.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real shortPipe.port_b.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real shortPipe.port_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real shortPipe.port_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real shortPipe.port_b.Xi[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0, max = 1, nominal = 0.1) \"Independent mixture mass fractions m_i/m in the connection point\";
//   Real shortPipe.port_b.mXi_flow[1](quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rates of the independent substances from the connection point into the component (if m_flow > 0, mX_flow = m_flow*X)\";
//   Real shortPipe.m_flow(quantity = \"MassFlowRate.Moist air\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)\";
//   Real shortPipe.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure drop from port_a to port_b\";
// initial equation
//   volume.medium.p = volume.p_start;
//   volume.medium.T = volume.T_start;
//   volume.medium.Xi[1] = volume.X_start[1];
// equation
//   assert(volume.medium.T >= 200.0 and volume.medium.T <= 423.15,\"
// Temperature T is not in the allowed range
// 200.0 K <= (T =\" + String(volume.medium.T,0,true,6) + \" K) <= 423.15 K
// required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   volume.medium.MM = 1.0 / (34.5242878865884 + (volume.medium.Xi[1] / 0.01801528 + (-volume.medium.Xi[1]) / 0.0289651159));
//   volume.medium.p_steam_sat = min(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.saturationPressure(volume.medium.T),0.999 * volume.medium.p);
//   volume.medium.X_sat = min((0.621964713077499 * ((1.0 - volume.medium.Xi[1]) * volume.medium.p_steam_sat)) / max(1e-013,volume.medium.p - volume.medium.p_steam_sat),1.0);
//   volume.medium.X_liquid = max(volume.medium.Xi[1] - volume.medium.X_sat,0.0);
//   volume.medium.X_steam = volume.medium.Xi[1] - volume.medium.X_liquid;
//   volume.medium.X_air = 1.0 - volume.medium.Xi[1];
//   volume.medium.h = Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy_pTX(volume.medium.p,volume.medium.T,{volume.medium.Xi[1]});
//   volume.medium.R = (287.051224952979 * volume.medium.X_air) / (1.0 - volume.medium.X_liquid) + (461.523329085088 * volume.medium.X_steam) / (1.0 - volume.medium.X_liquid);
//   volume.medium.u = volume.medium.h - volume.medium.R * volume.medium.T;
//   volume.medium.d = volume.medium.p / (volume.medium.T * volume.medium.R);
//   volume.medium.state.p = volume.medium.p;
//   volume.medium.state.T = volume.medium.T;
//   volume.medium.state.X[1] = volume.medium.X[1];
//   volume.medium.state.X[2] = volume.medium.X[2];
//   volume.medium.x_sat = (0.621964713077499 * volume.medium.p_steam_sat) / max(1e-013,volume.medium.p - volume.medium.p_steam_sat);
//   volume.medium.x_water = volume.medium.Xi[1] / max(volume.medium.X_air,1e-013);
//   volume.medium.phi = (volume.medium.Xi[1] * volume.medium.p) / ((volume.medium.Xi[1] + 0.621964713077499 * volume.medium.X_air) * volume.medium.p_steam_sat);
//   volume.medium.Xi[1] = volume.medium.X[1];
//   volume.medium.X[2] = 1.0 - volume.medium.Xi[1];
//   assert(volume.medium.X[1] >= -1e-005 and volume.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(volume.medium.X[1],0,true,6) + \"of substance \" + \"water\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(volume.medium.X[2] >= -1e-005 and volume.medium.X[2] <= 1.00001,\"Mass fraction X[2] = \" + String(volume.medium.X[2],0,true,6) + \"of substance \" + \"air\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(volume.medium.p >= 0.0,\"Pressure (= \" + String(volume.medium.p,0,true,6) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
// (Temperature = \" + String(volume.medium.T,0,true,6) + \" K)\");
//   volume.medium.p = volume.port.p;
//   volume.medium.h = volume.port.h;
//   volume.medium.Xi[1] = volume.port.Xi[1];
//   volume.m = volume.V * volume.medium.d;
//   volume.mXi[1] = volume.m * volume.medium.Xi[1];
//   volume.U = volume.m * volume.medium.u;
//   der(volume.m) = volume.port.m_flow;
//   der(volume.mXi[1]) = volume.port.mXi_flow[1];
//   der(volume.U) = volume.port.H_flow;
//   assert(fixedMassFlowRate.medium.T >= 200.0 and fixedMassFlowRate.medium.T <= 423.15,\"
// Temperature T is not in the allowed range
// 200.0 K <= (T =\" + String(fixedMassFlowRate.medium.T,0,true,6) + \" K) <= 423.15 K
// required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   fixedMassFlowRate.medium.MM = 1.0 / (34.5242878865884 + (fixedMassFlowRate.medium.Xi[1] / 0.01801528 + (-fixedMassFlowRate.medium.Xi[1]) / 0.0289651159));
//   fixedMassFlowRate.medium.p_steam_sat = min(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.saturationPressure(fixedMassFlowRate.medium.T),0.999 * fixedMassFlowRate.medium.p);
//   fixedMassFlowRate.medium.X_sat = min((0.621964713077499 * ((1.0 - fixedMassFlowRate.medium.Xi[1]) * fixedMassFlowRate.medium.p_steam_sat)) / max(1e-013,fixedMassFlowRate.medium.p - fixedMassFlowRate.medium.p_steam_sat),1.0);
//   fixedMassFlowRate.medium.X_liquid = max(fixedMassFlowRate.medium.Xi[1] - fixedMassFlowRate.medium.X_sat,0.0);
//   fixedMassFlowRate.medium.X_steam = fixedMassFlowRate.medium.Xi[1] - fixedMassFlowRate.medium.X_liquid;
//   fixedMassFlowRate.medium.X_air = 1.0 - fixedMassFlowRate.medium.Xi[1];
//   fixedMassFlowRate.medium.h = Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy_pTX(fixedMassFlowRate.medium.p,fixedMassFlowRate.medium.T,{fixedMassFlowRate.medium.Xi[1]});
//   fixedMassFlowRate.medium.R = (287.051224952979 * fixedMassFlowRate.medium.X_air) / (1.0 - fixedMassFlowRate.medium.X_liquid) + (461.523329085088 * fixedMassFlowRate.medium.X_steam) / (1.0 - fixedMassFlowRate.medium.X_liquid);
//   fixedMassFlowRate.medium.u = fixedMassFlowRate.medium.h - fixedMassFlowRate.medium.R * fixedMassFlowRate.medium.T;
//   fixedMassFlowRate.medium.d = fixedMassFlowRate.medium.p / (fixedMassFlowRate.medium.T * fixedMassFlowRate.medium.R);
//   fixedMassFlowRate.medium.state.p = fixedMassFlowRate.medium.p;
//   fixedMassFlowRate.medium.state.T = fixedMassFlowRate.medium.T;
//   fixedMassFlowRate.medium.state.X[1] = fixedMassFlowRate.medium.X[1];
//   fixedMassFlowRate.medium.state.X[2] = fixedMassFlowRate.medium.X[2];
//   fixedMassFlowRate.medium.x_sat = (0.621964713077499 * fixedMassFlowRate.medium.p_steam_sat) / max(1e-013,fixedMassFlowRate.medium.p - fixedMassFlowRate.medium.p_steam_sat);
//   fixedMassFlowRate.medium.x_water = fixedMassFlowRate.medium.Xi[1] / max(fixedMassFlowRate.medium.X_air,1e-013);
//   fixedMassFlowRate.medium.phi = (fixedMassFlowRate.medium.Xi[1] * fixedMassFlowRate.medium.p) / ((fixedMassFlowRate.medium.Xi[1] + 0.621964713077499 * fixedMassFlowRate.medium.X_air) * fixedMassFlowRate.medium.p_steam_sat);
//   fixedMassFlowRate.medium.Xi[1] = fixedMassFlowRate.medium.X[1];
//   fixedMassFlowRate.medium.X[2] = 1.0 - fixedMassFlowRate.medium.Xi[1];
//   assert(fixedMassFlowRate.medium.X[1] >= -1e-005 and fixedMassFlowRate.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(fixedMassFlowRate.medium.X[1],0,true,6) + \"of substance \" + \"water\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(fixedMassFlowRate.medium.X[2] >= -1e-005 and fixedMassFlowRate.medium.X[2] <= 1.00001,\"Mass fraction X[2] = \" + String(fixedMassFlowRate.medium.X[2],0,true,6) + \"of substance \" + \"air\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(fixedMassFlowRate.medium.p >= 0.0,\"Pressure (= \" + String(fixedMassFlowRate.medium.p,0,true,6) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
// (Temperature = \" + String(fixedMassFlowRate.medium.T,0,true,6) + \" K)\");
//   fixedMassFlowRate.medium.T = fixedMassFlowRate.T_ambient;
//   fixedMassFlowRate.medium.Xi[1] = fixedMassFlowRate.X_ambient[1];
//   fixedMassFlowRate.medium.p = fixedMassFlowRate.port.p;
//   fixedMassFlowRate.port.m_flow = -fixedMassFlowRate.m_flow;
//   fixedMassFlowRate.port.mXi_flow[1] = semiLinear(fixedMassFlowRate.port.m_flow,fixedMassFlowRate.port.Xi[1],fixedMassFlowRate.medium.Xi[1]);
//   fixedMassFlowRate.port.H_flow = semiLinear(fixedMassFlowRate.port.m_flow,fixedMassFlowRate.port.h,fixedMassFlowRate.medium.h);
//   assert(ambient.medium.T >= 200.0 and ambient.medium.T <= 423.15,\"
// Temperature T is not in the allowed range
// 200.0 K <= (T =\" + String(ambient.medium.T,0,true,6) + \" K) <= 423.15 K
// required from medium model \\\"\" + \"Moist air\" + \"\\\".\");
//   ambient.medium.MM = 1.0 / (34.5242878865884 + (ambient.medium.Xi[1] / 0.01801528 + (-ambient.medium.Xi[1]) / 0.0289651159));
//   ambient.medium.p_steam_sat = min(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.saturationPressure(ambient.medium.T),0.999 * ambient.medium.p);
//   ambient.medium.X_sat = min((0.621964713077499 * ((1.0 - ambient.medium.Xi[1]) * ambient.medium.p_steam_sat)) / max(1e-013,ambient.medium.p - ambient.medium.p_steam_sat),1.0);
//   ambient.medium.X_liquid = max(ambient.medium.Xi[1] - ambient.medium.X_sat,0.0);
//   ambient.medium.X_steam = ambient.medium.Xi[1] - ambient.medium.X_liquid;
//   ambient.medium.X_air = 1.0 - ambient.medium.Xi[1];
//   ambient.medium.h = Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy_pTX(ambient.medium.p,ambient.medium.T,{ambient.medium.Xi[1]});
//   ambient.medium.R = (287.051224952979 * ambient.medium.X_air) / (1.0 - ambient.medium.X_liquid) + (461.523329085088 * ambient.medium.X_steam) / (1.0 - ambient.medium.X_liquid);
//   ambient.medium.u = ambient.medium.h - ambient.medium.R * ambient.medium.T;
//   ambient.medium.d = ambient.medium.p / (ambient.medium.T * ambient.medium.R);
//   ambient.medium.state.p = ambient.medium.p;
//   ambient.medium.state.T = ambient.medium.T;
//   ambient.medium.state.X[1] = ambient.medium.X[1];
//   ambient.medium.state.X[2] = ambient.medium.X[2];
//   ambient.medium.x_sat = (0.621964713077499 * ambient.medium.p_steam_sat) / max(1e-013,ambient.medium.p - ambient.medium.p_steam_sat);
//   ambient.medium.x_water = ambient.medium.Xi[1] / max(ambient.medium.X_air,1e-013);
//   ambient.medium.phi = (ambient.medium.Xi[1] * ambient.medium.p) / ((ambient.medium.Xi[1] + 0.621964713077499 * ambient.medium.X_air) * ambient.medium.p_steam_sat);
//   ambient.medium.Xi[1] = ambient.medium.X[1];
//   ambient.medium.X[2] = 1.0 - ambient.medium.Xi[1];
//   assert(ambient.medium.X[1] >= -1e-005 and ambient.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(ambient.medium.X[1],0,true,6) + \"of substance \" + \"water\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(ambient.medium.X[2] >= -1e-005 and ambient.medium.X[2] <= 1.00001,\"Mass fraction X[2] = \" + String(ambient.medium.X[2],0,true,6) + \"of substance \" + \"air\" + \"
// of medium \" + \"Moist air\" + \" is not in the range 0..1\");
//   assert(ambient.medium.p >= 0.0,\"Pressure (= \" + String(ambient.medium.p,0,true,6) + \" Pa) of medium \\\"\" + \"Moist air\" + \"\\\" is negative
// (Temperature = \" + String(ambient.medium.T,0,true,6) + \" K)\");
//   ambient.medium.p = ambient.p_ambient;
//   ambient.medium.T = ambient.T_ambient;
//   ambient.medium.Xi[1] = ambient.X_ambient[1];
//   ambient.port.p = ambient.medium.p;
//   ambient.port.H_flow = semiLinear(ambient.port.m_flow,ambient.port.h,ambient.medium.h);
//   ambient.port.mXi_flow[1] = semiLinear(ambient.port.m_flow,ambient.port.Xi[1],ambient.medium.Xi[1]);
//   shortPipe.port_a.H_flow = semiLinear(shortPipe.port_a.m_flow,shortPipe.port_a.h,shortPipe.port_b.h);
//   shortPipe.port_a.mXi_flow[1] = semiLinear(shortPipe.port_a.m_flow,shortPipe.port_a.Xi[1],shortPipe.port_b.Xi[1]);
//   shortPipe.port_a.H_flow + shortPipe.port_b.H_flow = 0.0;
//   shortPipe.port_a.m_flow + shortPipe.port_b.m_flow = 0.0;
//   shortPipe.port_a.mXi_flow[1] + shortPipe.port_b.mXi_flow[1] = 0.0;
//   shortPipe.m_flow = shortPipe.port_a.m_flow;
//   shortPipe.dp = shortPipe.port_a.p - shortPipe.port_b.p;
//   shortPipe.m_flow = (shortPipe.dp * shortPipe.m_flow_nominal) / shortPipe.dp_nominal;
//   volume.port.mXi_flow[1] + fixedMassFlowRate.port.mXi_flow[1] + shortPipe.port_a.mXi_flow[1] = 0.0;
//   volume.port.H_flow + fixedMassFlowRate.port.H_flow + shortPipe.port_a.H_flow = 0.0;
//   volume.port.m_flow + fixedMassFlowRate.port.m_flow + shortPipe.port_a.m_flow = 0.0;
//   ambient.port.mXi_flow[1] + shortPipe.port_b.mXi_flow[1] = 0.0;
//   ambient.port.H_flow + shortPipe.port_b.H_flow = 0.0;
//   ambient.port.m_flow + shortPipe.port_b.m_flow = 0.0;
//   fixedMassFlowRate.port.p = shortPipe.port_a.p;
//   fixedMassFlowRate.port.p = volume.port.p;
//   fixedMassFlowRate.port.h = shortPipe.port_a.h;
//   fixedMassFlowRate.port.h = volume.port.h;
//   fixedMassFlowRate.port.Xi[1] = shortPipe.port_a.Xi[1];
//   fixedMassFlowRate.port.Xi[1] = volume.port.Xi[1];
//   ambient.port.p = shortPipe.port_b.p;
//   ambient.port.h = shortPipe.port_b.h;
//   ambient.port.Xi[1] = shortPipe.port_b.Xi[1];
// end Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir;
// "
// "[package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4055:5-4056:75:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:176:5-176:27:writable] Error: No constant value for variable data in scope Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy.
// [package.mo:4093:7-4094:50:writable] Warning: Variable volume.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable volume.medium.Xi: Non-array modification 'if volume.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable fixedMassFlowRate.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable fixedMassFlowRate.medium.Xi: Non-array modification 'if fixedMassFlowRate.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable ambient.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable ambient.medium.Xi: Non-array modification 'if ambient.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// "
// "Check of Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir completed successfully.
// 
// [package.mo:4034:5-4034:78:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4684:5-4688:67:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:77:3-78:83:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4035:5-4036:96:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4060:5-4060:103:writable] Error: No constant value for variable data.name in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:4055:5-4056:75:writable] Error: No constant value for variable data.H0 in scope Modelica.Media.IdealGases.Common.SingleGasNasa.
// [package.mo:176:5-176:27:writable] Error: No constant value for variable data in scope Modelica.Media.IdealGases.Common.SingleGasNasa.specificEnthalpy.
// [package.mo:4093:7-4094:50:writable] Warning: Variable volume.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable volume.medium.Xi: Non-array modification 'if volume.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable fixedMassFlowRate.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable fixedMassFlowRate.medium.Xi: Non-array modification 'if fixedMassFlowRate.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable ambient.medium.Xi: Non-array modification 'if preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// [package.mo:4093:7-4094:50:writable] Warning: Variable ambient.medium.Xi: Non-array modification 'if ambient.medium.preferredMediumStates then StateSelect.prefer else StateSelect.default' for array component, possibly due to missing 'each'.
// 
// 
// Class Modelica.Media.Examples.Tests.MediaTestModels.Air.MoistAir has 107 equation(s) and 107 variable(s).
// 45 of these are trivial equation(s).
// "
// ""
// endResult
