//name: Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47 [version 3.1]
//keyword:     media
//status:      correct
//
// instantiate/check model example
//

loadModel(Modelica,{"3.1"}); getErrorString();
setDebugFlags("nogen,noevalfunc");

instantiateModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47); getErrorString();
checkModel(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47); getErrorString();

// Result:
// true
// ""
// true
// "function Modelica.Math.Matrices.LAPACK.dgelsx_vec
//   input Real[:, :] A;
//   input Real[size(A, 1)] b;
//   input Real rcond = 0.0 \"Reciprocal condition number to estimate rank\";
//   output Real[max(nrow, ncol)] x = cat(1, b, fill(0.0, max(nrow, ncol) - nrow)) \"solution is in first size(A,2) rows\";
//   output Integer info;
//   output Integer rank \"Effective rank of A\";
//   protected Integer nrow = size(A, 1);
//   protected Integer ncol = size(A, 2);
//   protected Integer nx = max(nrow, ncol);
//   protected Integer lwork = max(min(nrow, ncol) + 3 * ncol, 1 + 2 * min(nrow, ncol));
//   protected Real[nrow, ncol] Awork = A;
//   protected Integer[ncol] jpvt = fill(0, ncol);
//   protected Real[lwork] work;
// 
//   external \"FORTRAN 77\" dgelsx(nrow, ncol, 1, Awork, nrow, x, nx, jpvt, rcond, rank, work, lwork, info);
// end Modelica.Math.Matrices.LAPACK.dgelsx_vec;
// 
// function Modelica.Math.Matrices.leastSquares \"Solve overdetermined or underdetermined real system of linear equations A*x=b in a least squares sense (A may be rank deficient)\"
//   input Real[:, :] A \"Matrix A\";
//   input Real[size(A, 1)] b \"Vector b\";
//   output Real[size(A, 2)] x \"Vector x such that min|A*x-b|^2 if size(A,1) >= size(A,2) or min|x|^2 and A*x=b, if size(A,1) < size(A,2)\";
//   protected Integer info;
//   protected Integer rank;
//   protected Real[max(size(A, 1), size(A, 2))] xx;
// algorithm
//   (xx, info, rank) := Modelica.Math.Matrices.LAPACK.dgelsx_vec(A, b, 0.0000000000001);
//   x := xx[1:size(A, 2)];
//   assert( info == 0, \"Solving an overdetermined or underdetermined linear system of
// equations with function \\\"Matrices.leastSquares\\\" failed.\");
// end Modelica.Math.Matrices.leastSquares;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\" y = asin(u);
// end Modelica.Math.asin;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState\"
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.FluidPort.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.PortVolume.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.PortVolume.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_T;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_T_der;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), Modelica.SIunits.Conversions.to_degC(T), Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_pT;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.invertTemp;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState(T, p);
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.setState_pTX;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.h_T(state.T);
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy;
// 
// function Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy(Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.setState_pTX(p, T, X));
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy_pTX;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue \"Value of derivative of polynomial at abszissa value u\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abszissa value\";
//   output Real y \"Value of derivative of polynomial at u\";
//   protected Integer n = size(p, 1);
// algorithm
//   y := p[1] * Real(n + -1);
//   for j in 2:size(p, 1) + -1 loop
//     y := p[j] * Real(n - j) + u * y;
//   end for;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue_der \"time derivative of derivative of polynomial\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abszissa value\";
//   input Real du \"delta of abszissa value\";
//   output Real dy \"time-derivative of derivative of polynomial w.r.t. input variable at u\";
//   protected Integer n = size(p, 1);
// algorithm
//   dy := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.secondDerivativeValue(p, u) * du;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue_der;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate \"Evaluate polynomial at a given abszissa value\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abszissa value\";
//   output Real y \"Value of polynomial at u\";
// algorithm
//   y := p[1];
//   for j in 2:size(p, 1) loop
//     y := p[j] + u * y;
//   end for;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der \"Evaluate polynomial at a given abszissa value\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abszissa value\";
//   input Real du \"Abszissa value\";
//   output Real dy \"Value of polynomial at u\";
//   protected Integer n = size(p, 1);
// algorithm
//   dy := p[1] * Real(n + -1);
//   for j in 2:size(p, 1) + -1 loop
//     dy := p[j] * Real(n - j) + u * dy;
//   end for;
//   dy := dy * du;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate_der;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.fitting \"Computes the coefficients of a polynomial that fits a set of data points in a least-squares sense\"
//   input Real[:] u \"Abscissa data values\";
//   input Real[size(u, 1)] y \"Ordinate data values\";
//   input Integer n(min = 1) \"Order of desired polynomial that fits the data points (u,y)\";
//   output Real[1 + n] p \"Polynomial coefficients of polynomial that fits the date points\";
//   protected Real[size(u, 1), 1 + n] V \"Vandermonde matrix\";
// algorithm
//   V[:,1 + n] := fill(1.0, size(u, 1));
//   for j in n:-1:1 loop
//     V[:,j] := array(u[i] * V[i, 1 + j] for i in 1:size(u, 1));
//   end for;
//   p := Modelica.Math.Matrices.leastSquares(V, y);
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.fitting;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue \"Integral of polynomial p(u) from u_low to u_high\"
//   input Real[:] p \"Polynomial coefficients\";
//   input Real u_high \"High integrand value\";
//   input Real u_low = 0.0 \"Low integrand value, default 0\";
//   output Real integral = 0.0 \"Integral of polynomial p from u_low to u_high\";
//   protected Integer n = size(p, 1) \"degree of integrated polynomial\";
//   protected Real y_low = 0.0 \"value at lower integrand\";
// algorithm
//   for j in 1:n loop
//     integral := u_high * (p[j] / Real(1 + n - j) + integral);
//     y_low := u_low * (p[j] / Real(1 + n - j) + y_low);
//   end for;
//   integral := integral - y_low;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue_der \"Time derivative of integral of polynomial p(u) from u_low to u_high, assuming only u_high as time-dependent (Leibnitz rule)\"
//   input Real[:] p \"Polynomial coefficients\";
//   input Real u_high \"High integrand value\";
//   input Real u_low = 0.0 \"Low integrand value, default 0\";
//   input Real du_high \"High integrand value\";
//   input Real du_low = 0.0 \"Low integrand value, default 0\";
//   output Real dintegral = 0.0 \"Integral of polynomial p from u_low to u_high\";
// algorithm
//   dintegral := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(p, u_high) * du_high;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue_der;
// 
// function Modelica.Media.Incompressible.TableBased.Polynomials_Temp.secondDerivativeValue \"Value of 2nd derivative of polynomial at abszissa value u\"
//   input Real[:] p \"Polynomial coefficients (p[1] is coefficient of highest power)\";
//   input Real u \"Abszissa value\";
//   output Real y \"Value of 2nd derivative of polynomial at u\";
//   protected Integer n = size(p, 1);
// algorithm
//   y := p[1] * Real(n + -1) * Real(n + -2);
//   for j in 2:size(p, 1) + -2 loop
//     y := p[j] * Real(n - j) * Real(n + -1 - j) + u * y;
//   end for;
// end Modelica.Media.Incompressible.TableBased.Polynomials_Temp.secondDerivativeValue;
// 
// function Modelica.Media.Incompressible.TableBased.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Incompressible.TableBased.ThermodynamicState\"
//   input Real(quantity=\"ThermodynamicTemperature\", unit=\"K\", min=0.0, displayUnit=\"degC\") T;
//   input Real(quantity=\"Pressure\", unit=\"Pa\", displayUnit=\"bar\") p;
//   output ThermodynamicState res;
// end Modelica.Media.Incompressible.TableBased.ThermodynamicState;
// 
// function Modelica.Media.Incompressible.TableBased.h_T \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(poly_Cp, if TinK then T else Modelica.SIunits.Conversions.to_degC(T), if TinK then 273.15 else Modelica.SIunits.Conversions.to_degC(273.15));
// end Modelica.Media.Incompressible.TableBased.h_T;
// 
// function Modelica.Media.Incompressible.TableBased.h_T_der \"Compute specific enthalpy from temperature\"
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Real dT \"temperature derivative\";
//   output Real dh \"derivative of Specific enthalpy at T\";
// algorithm
//   dh := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(poly_Cp, if TinK then T else Modelica.SIunits.Conversions.to_degC(T)) * dT;
// end Modelica.Media.Incompressible.TableBased.h_T_der;
// 
// function Modelica.Media.Incompressible.TableBased.h_pT \"Compute specific enthalpy from pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Temperature\";
//   input Boolean densityOfT = false \"include or neglect density derivative dependence of enthalpy\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy at p, T\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.Polynomials_Temp.integralValue(poly_Cp, if TinK then T else Modelica.SIunits.Conversions.to_degC(T), if TinK then 273.15 else Modelica.SIunits.Conversions.to_degC(273.15)) + (if densityOfT then 1.0 + Modelica.Media.Incompressible.TableBased.Polynomials_Temp.derivativeValue(poly_rho, if TinK then T else Modelica.SIunits.Conversions.to_degC(T)) * T / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(poly_rho, if TinK then T else Modelica.SIunits.Conversions.to_degC(T)) else 1.0) * (-101325.0 + p) / Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(poly_rho, if TinK then T else Modelica.SIunits.Conversions.to_degC(T));
// end Modelica.Media.Incompressible.TableBased.h_pT;
// 
// function Modelica.Media.Incompressible.TableBased.invertTemp \"function to invert temperatures\"
//   input Real[:] table \"table temperature data\";
//   input Boolean Tink \"flag for Celsius or Kelvin\";
//   output Real[size(table, 1)] invTable \"inverted temperatures\";
// algorithm
//   for i in 1:size(table, 1) loop
//     invTable[i] := if TinK then 1.0 / table[i] else 1.0 / Modelica.SIunits.Conversions.from_degC(table[i]);
//   end for;
// end Modelica.Media.Incompressible.TableBased.invertTemp;
// 
// function Modelica.Media.Incompressible.TableBased.setState_pTX \"Returns state record, given pressure and temperature\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Incompressible.TableBased.ThermodynamicState state \"thermodynamic state record\";
// algorithm
//   state := Modelica.Media.Incompressible.TableBased.ThermodynamicState(T, p);
// end Modelica.Media.Incompressible.TableBased.setState_pTX;
// 
// function Modelica.Media.Incompressible.TableBased.specificEnthalpy \"Return specific enthalpy as a function of the thermodynamic state record\"
//   input Modelica.Media.Incompressible.TableBased.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.h_T(state.T);
// end Modelica.Media.Incompressible.TableBased.specificEnthalpy;
// 
// function Modelica.Media.Incompressible.TableBased.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Incompressible.TableBased.specificEnthalpy(Modelica.Media.Incompressible.TableBased.setState_pTX(p, T, X));
// end Modelica.Media.Incompressible.TableBased.specificEnthalpy_pTX;
// 
// function Modelica.Media.Interfaces.PartialMedium.ThermodynamicState \"Automatically generated record constructor for Modelica.Media.Interfaces.PartialMedium.ThermodynamicState\"
//   output ThermodynamicState res;
// end Modelica.Media.Interfaces.PartialMedium.ThermodynamicState;
// 
// function Modelica.Media.Interfaces.PartialMedium.setState_pTX \"Return thermodynamic state as function of p, T and composition X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Modelica.Media.Interfaces.PartialMedium.ThermodynamicState state \"thermodynamic state record\";
// end Modelica.Media.Interfaces.PartialMedium.setState_pTX;
// 
// function Modelica.Media.Interfaces.PartialMedium.specificEnthalpy \"Return specific enthalpy\"
//   input Modelica.Media.Interfaces.PartialMedium.ThermodynamicState state \"thermodynamic state record\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// end Modelica.Media.Interfaces.PartialMedium.specificEnthalpy;
// 
// function Modelica.Media.Interfaces.PartialMedium.specificEnthalpy_pTX \"Return specific enthalpy from p, T, and X or Xi\"
//   input Real p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure\";
//   input Real T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) \"Temperature\";
//   input Real[:] X(quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = {1.0} \"Mass fractions\";
//   output Real h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific enthalpy\";
// algorithm
//   h := Modelica.Media.Interfaces.PartialMedium.specificEnthalpy(Modelica.Media.Interfaces.PartialMedium.setState_pTX(p, T, X));
// end Modelica.Media.Interfaces.PartialMedium.specificEnthalpy_pTX;
// 
// function Modelica.SIunits.Conversions.from_degC \"Convert from °Celsius to Kelvin\"
//   input Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
//   output Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
// algorithm
//   Kelvin := Celsius + 273.15;
// end Modelica.SIunits.Conversions.from_degC;
// 
// function Modelica.SIunits.Conversions.to_bar \"Convert from Pascal to bar\"
//   input Real Pa(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pascal value\";
//   output Real bar(quantity = \"Pressure\", unit = \"bar\") \"bar value\";
// algorithm
//   bar := Pa / 100000.0;
// end Modelica.SIunits.Conversions.to_bar;
// 
// function Modelica.SIunits.Conversions.to_degC \"Convert from Kelvin to °Celsius\"
//   input Real Kelvin(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"Kelvin value\";
//   output Real Celsius(quantity = \"ThermodynamicTemperature\", unit = \"degC\") \"Celsius value\";
// algorithm
//   Celsius := -273.15 + Kelvin;
// end Modelica.SIunits.Conversions.to_degC;
// 
// class Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47
//   parameter Real p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) = 101325.0 \"Initial value of pressure\";
//   parameter Real T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = Modelica.SIunits.Conversions.from_degC(20.0) \"Initial value of temperature\";
//   parameter Real h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\") = Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.specificEnthalpy_pTX(101325.0, Modelica.SIunits.Conversions.from_degC(20.0), {1.0}) \"Initial value of specific enthalpy\";
//   parameter Real X_start[1] = 1.0 \"Initial value of mass fractions\";
//   parameter Real shortPipe.dp_nominal(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0000000001, max = 100000000.0, start = 100000.0, nominal = 100000.0) = 10000.0 \"Nominal pressure drop\";
//   parameter Real shortPipe.m_flow_nominal(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = 0.0000000001, max = 100000.0) = 1.0 \"Nominal mass flow rate at nominal pressure drop\";
//   Real shortPipe.port_a.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real shortPipe.port_a.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real shortPipe.port_a.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real shortPipe.port_a.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real shortPipe.port_b.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real shortPipe.port_b.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real shortPipe.port_b.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real shortPipe.port_b.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   Real shortPipe.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from port_a to port_b (m_flow > 0 is design flow direction)\";
//   Real shortPipe.dp(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"Pressure drop from port_a to port_b\";
//   parameter Real volume.V(quantity = \"Volume\", unit = \"m3\") = 0.1 \"Fixed size of junction volume\";
//   parameter Boolean volume.use_p_start = true \"select p_start or d_start\";
//   parameter Real volume.p_start(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = p_start \"Initial pressure\";
//   parameter Real volume.d_start(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) = 1.0 \"Initial density\";
//   parameter Boolean volume.use_T_start = true \"select T_start or h_start\";
//   parameter Real volume.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = T_start \"Initial temperature\";
//   parameter Real volume.h_start(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = h_start \"Initial specific enthalpy\";
//   parameter Real volume.X_start[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = X_start[1] \"Initial mass fractions m_i/m\";
//   Real volume.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real volume.port.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real volume.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real volume.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   input Real volume.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) \"Absolute pressure of medium\";
//   input Real volume.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real volume.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density of medium\";
//   Real volume.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = volume.medium.T_start, nominal = 300.0, StateSelect = StateSelect.prefer) \"Temperature of medium\";
//   Real volume.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real volume.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real volume.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real volume.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real volume.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   Real volume.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   parameter Boolean volume.medium.preferredMediumStates = true \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   parameter Boolean volume.medium.standardOrderComponents = true \"if true, and reducedX = true, the last element of X will be computed from the other ones\";
//   Real volume.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(volume.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real volume.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   parameter Real volume.medium.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 298.15 \"initial temperature\";
//   Real volume.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\", start = volume.medium.T_start + -273.15) = Modelica.SIunits.Conversions.to_degC(volume.medium.T) \"Temperature of medium in [degC]\";
//   Real volume.U(quantity = \"Energy\", unit = \"J\") \"Internal energy of port volume\";
//   Real volume.m(quantity = \"Mass\", unit = \"kg\", min = 0.0) \"Mass of junction volume\";
//   parameter Real fixedMassFlowRate.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) = 1.0 \"Fixed mass flow rate from an infinite reservoir to the fluid port\";
//   parameter Boolean fixedMassFlowRate.use_T_ambient = true \"select T_ambient or h_ambient\";
//   parameter Real fixedMassFlowRate.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = 1.2 * T_start \"Ambient temperature\";
//   parameter Real fixedMassFlowRate.h_ambient(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = 1.2 * h_start \"Ambient specific enthalpy\";
//   parameter Real fixedMassFlowRate.X_ambient[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = X_start[1] * 0.5 \"Ambient mass fractions m_i/m of reservoir\";
//   input Real fixedMassFlowRate.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) \"Absolute pressure of medium\";
//   input Real fixedMassFlowRate.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real fixedMassFlowRate.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density of medium\";
//   Real fixedMassFlowRate.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = fixedMassFlowRate.medium.T_start, nominal = 300.0, StateSelect = StateSelect.default) \"Temperature of medium\";
//   Real fixedMassFlowRate.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real fixedMassFlowRate.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real fixedMassFlowRate.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real fixedMassFlowRate.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real fixedMassFlowRate.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   Real fixedMassFlowRate.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   parameter Boolean fixedMassFlowRate.medium.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   parameter Boolean fixedMassFlowRate.medium.standardOrderComponents = true \"if true, and reducedX = true, the last element of X will be computed from the other ones\";
//   Real fixedMassFlowRate.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(fixedMassFlowRate.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real fixedMassFlowRate.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   parameter Real fixedMassFlowRate.medium.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 298.15 \"initial temperature\";
//   Real fixedMassFlowRate.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\", start = fixedMassFlowRate.medium.T_start + -273.15) = Modelica.SIunits.Conversions.to_degC(fixedMassFlowRate.medium.T) \"Temperature of medium in [degC]\";
//   Real fixedMassFlowRate.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real fixedMassFlowRate.port.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real fixedMassFlowRate.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real fixedMassFlowRate.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
//   parameter Boolean ambient.use_p_ambient = true \"select p_ambient or d_ambient\";
//   parameter Real ambient.p_ambient(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) = p_start \"Ambient pressure\";
//   parameter Real ambient.d_ambient(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) = 1.0 \"Ambient density\";
//   parameter Boolean ambient.use_T_ambient = true \"select T_ambient or h_ambient\";
//   parameter Real ambient.T_ambient(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = 300.0, nominal = 300.0) = T_start \"Ambient temperature\";
//   parameter Real ambient.h_ambient(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) = h_start \"Ambient specific enthalpy\";
//   parameter Real ambient.X_ambient[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, nominal = 0.1) = X_start[1] \"Ambient mass fractions m_i/m\";
//   input Real ambient.medium.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0) \"Absolute pressure of medium\";
//   input Real ambient.medium.h(quantity = \"SpecificEnergy\", unit = \"J/kg\") \"Specific enthalpy of medium\";
//   Real ambient.medium.d(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0, max = 100000.0, start = 1.0, nominal = 1.0) \"Density of medium\";
//   Real ambient.medium.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 1.0, max = 10000.0, start = ambient.medium.T_start, nominal = 300.0, StateSelect = StateSelect.default) \"Temperature of medium\";
//   Real ambient.medium.X[1](quantity = \"MassFraction\", unit = \"kg/kg\", min = 0.0, max = 1.0, start = 1.0, nominal = 0.1) \"Mass fractions (= (component mass)/total mass  m_i/m)\";
//   Real ambient.medium.u(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific internal energy of medium\";
//   Real ambient.medium.R(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\", min = 0.0, max = 1000000.0, start = 1000.0, nominal = 1000.0) \"Gas constant (of mixture if applicable)\";
//   Real ambient.medium.MM(quantity = \"MolarMass\", unit = \"kg/mol\", min = 0.001, max = 0.25, nominal = 0.032) \"Molar mass (of mixture or single fluid)\";
//   Real ambient.medium.state.T(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) \"temperature\";
//   Real ambient.medium.state.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\") \"pressure\";
//   parameter Boolean ambient.medium.preferredMediumStates = false \"= true if StateSelect.prefer shall be used for the independent property variables of the medium\";
//   parameter Boolean ambient.medium.standardOrderComponents = true \"if true, and reducedX = true, the last element of X will be computed from the other ones\";
//   Real ambient.medium.p_bar(quantity = \"Pressure\", unit = \"bar\") = Modelica.SIunits.Conversions.to_bar(ambient.medium.p) \"Absolute pressure of medium in [bar]\";
//   Real ambient.medium.cp(quantity = \"SpecificHeatCapacity\", unit = \"J/(kg.K)\") \"specific heat capacity\";
//   parameter Real ambient.medium.T_start(quantity = \"ThermodynamicTemperature\", unit = \"K\", displayUnit = \"degC\", min = 0.0) = 298.15 \"initial temperature\";
//   Real ambient.medium.T_degC(quantity = \"ThermodynamicTemperature\", unit = \"degC\", start = ambient.medium.T_start + -273.15) = Modelica.SIunits.Conversions.to_degC(ambient.medium.T) \"Temperature of medium in [degC]\";
//   Real ambient.port.p(quantity = \"Pressure\", unit = \"Pa\", displayUnit = \"bar\", min = 0.0, max = 100000000.0, start = 100000.0, nominal = 100000.0) \"Pressure in the connection point\";
//   Real ambient.port.m_flow(quantity = \"MassFlowRate.Glycol-Water 47%\", unit = \"kg/s\", min = -100000.0, max = 100000.0) \"Mass flow rate from the connection point into the component\";
//   Real ambient.port.h(quantity = \"SpecificEnergy\", unit = \"J/kg\", min = -100000000.0, max = 100000000.0, nominal = 1000000.0) \"Specific mixture enthalpy in the connection point\";
//   Real ambient.port.H_flow(quantity = \"EnthalpyFlowRate\", unit = \"W\", min = -100000000.0, max = 100000000.0, nominal = 1000.0) \"Enthalpy flow rate into the component (if m_flow > 0, H_flow = m_flow*h)\";
// initial equation
//   volume.medium.T = volume.T_start;
// equation
//   shortPipe.port_a.H_flow = semiLinear(shortPipe.port_a.m_flow, shortPipe.port_a.h, shortPipe.port_b.h);
//   shortPipe.port_a.H_flow + shortPipe.port_b.H_flow = 0.0;
//   shortPipe.port_a.m_flow + shortPipe.port_b.m_flow = 0.0;
//   shortPipe.m_flow = shortPipe.port_a.m_flow;
//   shortPipe.dp = shortPipe.port_a.p - shortPipe.port_b.p;
//   shortPipe.m_flow = shortPipe.dp * shortPipe.m_flow_nominal / shortPipe.dp_nominal;
//   assert(true,\"Medium Glycol-Water 47% can not be used without assigning tableDensity.\");
//   assert(volume.medium.T >= Modelica.SIunits.Conversions.from_degC(-30.0) and volume.medium.T <= Modelica.SIunits.Conversions.from_degC(100.0),\"Temperature T (= \" + String(volume.medium.T, 0, true, 6) + \" K) is not in the allowed range (\" + String(Modelica.SIunits.Conversions.from_degC(-30.0), 0, true, 6) + \" K <= T <= \" + String(Modelica.SIunits.Conversions.from_degC(100.0), 0, true, 6) + \" K) required from medium model \\\"\" + \"Glycol-Water 47%\" + \"\\\".\");
//   volume.medium.R = 8.314472;
//   volume.medium.cp = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), volume.medium.T_degC);
//   volume.medium.h = Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T(volume.medium.T);
//   volume.medium.u = Modelica.Media.Examples.Tests.Components.PortVolume.Medium.h_T(volume.medium.T) + -101325.0 / volume.medium.d;
//   volume.medium.d = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), volume.medium.T_degC);
//   volume.medium.state.T = volume.medium.T;
//   volume.medium.state.p = volume.medium.p;
//   volume.medium.MM = 0.1;
//   volume.medium.X[1] = 1.0;
//   assert(volume.medium.X[1] >= -0.00001 and volume.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(volume.medium.X[1], 0, true, 6) + \"of substance \" + \"Glycol-Water 47%\" + \"
// of medium \" + \"Glycol-Water 47%\" + \" is not in the range 0..1\");
//   assert(volume.medium.p >= 0.0,\"Pressure (= \" + String(volume.medium.p, 0, true, 6) + \" Pa) of medium \\\"\" + \"Glycol-Water 47%\" + \"\\\" is negative
// (Temperature = \" + String(volume.medium.T, 0, true, 6) + \" K)\");
//   volume.medium.p = volume.port.p;
//   volume.medium.h = volume.port.h;
//   volume.m = volume.V * volume.medium.d;
//   volume.U = volume.m * volume.medium.u;
//   der(volume.m) = volume.port.m_flow;
//   der(volume.U) = volume.port.H_flow;
//   assert(true,\"Medium Glycol-Water 47% can not be used without assigning tableDensity.\");
//   assert(fixedMassFlowRate.medium.T >= Modelica.SIunits.Conversions.from_degC(-30.0) and fixedMassFlowRate.medium.T <= Modelica.SIunits.Conversions.from_degC(100.0),\"Temperature T (= \" + String(fixedMassFlowRate.medium.T, 0, true, 6) + \" K) is not in the allowed range (\" + String(Modelica.SIunits.Conversions.from_degC(-30.0), 0, true, 6) + \" K <= T <= \" + String(Modelica.SIunits.Conversions.from_degC(100.0), 0, true, 6) + \" K) required from medium model \\\"\" + \"Glycol-Water 47%\" + \"\\\".\");
//   fixedMassFlowRate.medium.R = 8.314472;
//   fixedMassFlowRate.medium.cp = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), fixedMassFlowRate.medium.T_degC);
//   fixedMassFlowRate.medium.h = Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T(fixedMassFlowRate.medium.T);
//   fixedMassFlowRate.medium.u = Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.h_T(fixedMassFlowRate.medium.T) + -101325.0 / fixedMassFlowRate.medium.d;
//   fixedMassFlowRate.medium.d = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), fixedMassFlowRate.medium.T_degC);
//   fixedMassFlowRate.medium.state.T = fixedMassFlowRate.medium.T;
//   fixedMassFlowRate.medium.state.p = fixedMassFlowRate.medium.p;
//   fixedMassFlowRate.medium.MM = 0.1;
//   fixedMassFlowRate.medium.X[1] = 1.0;
//   assert(fixedMassFlowRate.medium.X[1] >= -0.00001 and fixedMassFlowRate.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(fixedMassFlowRate.medium.X[1], 0, true, 6) + \"of substance \" + \"Glycol-Water 47%\" + \"
// of medium \" + \"Glycol-Water 47%\" + \" is not in the range 0..1\");
//   assert(fixedMassFlowRate.medium.p >= 0.0,\"Pressure (= \" + String(fixedMassFlowRate.medium.p, 0, true, 6) + \" Pa) of medium \\\"\" + \"Glycol-Water 47%\" + \"\\\" is negative
// (Temperature = \" + String(fixedMassFlowRate.medium.T, 0, true, 6) + \" K)\");
//   fixedMassFlowRate.medium.T = fixedMassFlowRate.T_ambient;
//   fixedMassFlowRate.medium.p = fixedMassFlowRate.port.p;
//   fixedMassFlowRate.port.m_flow = -fixedMassFlowRate.m_flow;
//   fixedMassFlowRate.port.H_flow = semiLinear(fixedMassFlowRate.port.m_flow, fixedMassFlowRate.port.h, fixedMassFlowRate.medium.h);
//   assert(true,\"Medium Glycol-Water 47% can not be used without assigning tableDensity.\");
//   assert(ambient.medium.T >= Modelica.SIunits.Conversions.from_degC(-30.0) and ambient.medium.T <= Modelica.SIunits.Conversions.from_degC(100.0),\"Temperature T (= \" + String(ambient.medium.T, 0, true, 6) + \" K) is not in the allowed range (\" + String(Modelica.SIunits.Conversions.from_degC(-30.0), 0, true, 6) + \" K <= T <= \" + String(Modelica.SIunits.Conversions.from_degC(100.0), 0, true, 6) + \" K) required from medium model \\\"\" + \"Glycol-Water 47%\" + \"\\\".\");
//   ambient.medium.R = 8.314472;
//   ambient.medium.cp = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2), ambient.medium.T_degC);
//   ambient.medium.h = Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T(ambient.medium.T);
//   ambient.medium.u = Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.h_T(ambient.medium.T) + -101325.0 / ambient.medium.d;
//   ambient.medium.d = Modelica.Media.Incompressible.TableBased.Polynomials_Temp.evaluate(Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2), ambient.medium.T_degC);
//   ambient.medium.state.T = ambient.medium.T;
//   ambient.medium.state.p = ambient.medium.p;
//   ambient.medium.MM = 0.1;
//   ambient.medium.X[1] = 1.0;
//   assert(ambient.medium.X[1] >= -0.00001 and ambient.medium.X[1] <= 1.00001,\"Mass fraction X[1] = \" + String(ambient.medium.X[1], 0, true, 6) + \"of substance \" + \"Glycol-Water 47%\" + \"
// of medium \" + \"Glycol-Water 47%\" + \" is not in the range 0..1\");
//   assert(ambient.medium.p >= 0.0,\"Pressure (= \" + String(ambient.medium.p, 0, true, 6) + \" Pa) of medium \\\"\" + \"Glycol-Water 47%\" + \"\\\" is negative
// (Temperature = \" + String(ambient.medium.T, 0, true, 6) + \" K)\");
//   ambient.medium.p = ambient.p_ambient;
//   ambient.medium.T = ambient.T_ambient;
//   ambient.port.p = ambient.medium.p;
//   ambient.port.H_flow = semiLinear(ambient.port.m_flow, ambient.port.h, ambient.medium.h);
//   shortPipe.port_a.H_flow + volume.port.H_flow + fixedMassFlowRate.port.H_flow = 0.0;
//   shortPipe.port_a.m_flow + volume.port.m_flow + fixedMassFlowRate.port.m_flow = 0.0;
//   shortPipe.port_b.H_flow + ambient.port.H_flow = 0.0;
//   shortPipe.port_b.m_flow + ambient.port.m_flow = 0.0;
//   fixedMassFlowRate.port.p = shortPipe.port_a.p;
//   fixedMassFlowRate.port.p = volume.port.p;
//   fixedMassFlowRate.port.h = shortPipe.port_a.h;
//   fixedMassFlowRate.port.h = volume.port.h;
//   ambient.port.p = shortPipe.port_b.p;
//   ambient.port.h = shortPipe.port_b.h;
// end Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47;
// "
// "[Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:302:7-302:72:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_T_der.
// [Incompressible.mo:290:7-291:30:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_T.
// [Incompressible.mo:315:7-319:83:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_pT.
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// "
// "Check of Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47 completed successfully.
// 
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:302:7-302:72:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_T_der.
// [Incompressible.mo:290:7-291:30:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_T.
// [Incompressible.mo:315:7-319:83:writable] Error: No constant value for variable TinK in scope Modelica.Media.Incompressible.TableBased.h_pT.
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.ShortPipe.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.PortVolume.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_a.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedMassFlowRate.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FixedAmbient.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// [Incompressible.mo:77:5-79:98:writable] Warning: Failed to deduce dimensions of poly_rho due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {1066.0, 1062.0, 1058.0, 1054.0, 1044.0, 1030.0, 1015.0, 999.0, 984.0}, 2).
// [Incompressible.mo:80:5-82:98:writable] Warning: Failed to deduce dimensions of poly_Cp due to unknown dimensions of modifier Modelica.Media.Examples.Tests.Components.FluidPort_b.Medium.Polynomials_Temp.fitting({-30.0, -20.0, -10.0, 0.0, 20.0, 40.0, 60.0, 80.0, 100.0}, {3450.0, 3490.0, 3520.0, 3560.0, 3620.0, 3690.0, 3760.0, 3820.0, 3890.0}, 2).
// 
// Class Modelica.Media.Examples.Tests.MediaTestModels.Incompressible.Glycol47 has 63 equation(s) and 63 variable(s).
// 36 of these are trivial equation(s).
// "
// ""
// endResult
