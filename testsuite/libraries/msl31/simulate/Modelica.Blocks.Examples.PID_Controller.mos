// name:     Modelica.Blocks.Examples.PID_Controller
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Blocks.Examples.PID_Controller_* Modelica.Blocks.Examples.PID_Controller Modelica.Blocks.Examples.PID_Controller.exe Modelica.Blocks.Examples.PID_Controller.cpp Modelica.Blocks.Examples.PID_Controller.makefile Modelica.Blocks.Examples.PID_Controller.libs Modelica.Blocks.Examples.PID_Controller.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Blocks.Examples.PID_Controller,stopTime=4.0);
res := OpenModelica.Scripting.compareSimulationResults("Modelica.Blocks.Examples.PID_Controller_res.mat",
  "Modelica.Blocks.Examples.PID_Controller.mat","Modelica.Blocks.Examples.PID_Controllerdiff.csv",0.01,0.0001,{"PI.u_s",
"PI.u_m",
"PI.y",
"PI.controlError",
"PI.addP.u1",
"PI.addP.u2",
"PI.addP.y",
"PI.P.u",
"PI.P.y",
"PI.gainPID.u",
"PI.gainPID.y",
"PI.addPID.u1",
"PI.addPID.u3",
"PI.addPID.y",
"PI.limiter.u",
"PI.limiter.y",
"inertia1.flange_a.phi",
"inertia1.flange_a.tau",
"inertia1.flange_b.phi",
"inertia1.flange_b.tau",
"inertia1.phi",
"der(inertia1.phi)",
"inertia1.w",
"der(inertia1.w)",
"inertia1.a",
"torque.flange.phi",
"torque.flange.tau",
"torque.tau",
"spring.phi_rel",
"der(spring.phi_rel)",
"spring.w_rel",
"der(spring.w_rel)",
"spring.a_rel",
"spring.tau",
"spring.flange_a.phi",
"spring.flange_a.tau",
"spring.flange_b.phi",
"spring.flange_b.tau",
"inertia2.flange_a.phi",
"inertia2.flange_a.tau",
"inertia2.flange_b.phi",
"inertia2.phi",
"der(inertia2.phi)",
"inertia2.w",
"der(inertia2.w)",
"inertia2.a",
"kinematicPTP.y[1]",
"integrator.u",
"integrator.y",
"der(integrator.y)",
"speedSensor.flange.phi",
"der(speedSensor.flange.phi)",
"speedSensor.w",
"loadTorque.flange.phi",
"loadTorque.phi",
"PI.I.u",
"PI.I.y",
"der(PI.I.y)",
"PI.addI.u1",
"PI.addI.u2",
"PI.addI.u3",
"PI.addI.y",
"PI.addSat.u1",
"PI.addSat.u2",
"PI.addSat.y",
"PI.gainTrack.u",
"PI.gainTrack.y"});

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Blocks.Examples.PID_Controller_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 4.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Blocks.Examples.PID_Controller', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// "Files Equal!"
// endResult
