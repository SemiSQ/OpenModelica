// name:     Modelica.Blocks.Examples.PID_Controller
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Blocks.Examples.PID_Controller_* Modelica.Blocks.Examples.PID_Controller Modelica.Blocks.Examples.PID_Controller.exe Modelica.Blocks.Examples.PID_Controller.cpp Modelica.Blocks.Examples.PID_Controller.makefile Modelica.Blocks.Examples.PID_Controller.libs Modelica.Blocks.Examples.PID_Controller.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Blocks.Examples.PID_Controller,stopTime=4.0);
val(PI.u_s,0.0);
val(PI.u_s,4.0);
val(PI.u_m,0.0);
val(PI.u_m,4.0);
val(PI.y,0.0);
val(PI.y,4.0);
val(PI.controlError,0.0);
val(PI.controlError,4.0);
val(PI.addP.u1,0.0);
val(PI.addP.u1,4.0);
val(PI.addP.u2,0.0);
val(PI.addP.u2,4.0);
val(PI.addP.y,0.0);
val(PI.addP.y,4.0);
val(PI.P.u,0.0);
val(PI.P.u,4.0);
val(PI.P.y,0.0);
val(PI.P.y,4.0);
val(PI.gainPID.u,0.0);
val(PI.gainPID.u,4.0);
val(PI.gainPID.y,0.0);
val(PI.gainPID.y,4.0);
val(PI.addPID.u1,0.0);
val(PI.addPID.u1,4.0);
val(PI.addPID.u3,0.0);
val(PI.addPID.u3,4.0);
val(PI.addPID.y,0.0);
val(PI.addPID.y,4.0);
val(PI.limiter.u,0.0);
val(PI.limiter.u,4.0);
val(PI.limiter.y,0.0);
val(PI.limiter.y,4.0);
val(inertia1.flange_a.phi,0.0);
val(inertia1.flange_a.phi,4.0);
val(inertia1.flange_a.tau,0.0);
val(inertia1.flange_a.tau,4.0);
val(inertia1.flange_b.phi,0.0);
val(inertia1.flange_b.phi,4.0);
val(inertia1.flange_b.tau,0.0);
val(inertia1.flange_b.tau,4.0);
val(inertia1.phi,0.0);
val(inertia1.phi,4.0);
val(der(inertia1.phi),0.0);
val(der(inertia1.phi),4.0);
val(inertia1.w,0.0);
val(inertia1.w,4.0);
val(der(inertia1.w),0.0);
val(der(inertia1.w),4.0);
val(inertia1.a,0.0);
val(inertia1.a,4.0);
val(torque.flange.phi,0.0);
val(torque.flange.phi,4.0);
val(torque.flange.tau,0.0);
val(torque.flange.tau,4.0);
val(torque.tau,0.0);
val(torque.tau,4.0);
val(spring.phi_rel,0.0);
val(spring.phi_rel,4.0);
val(der(spring.phi_rel),0.0);
val(der(spring.phi_rel),4.0);
val(spring.w_rel,0.0);
val(spring.w_rel,4.0);
val(der(spring.w_rel),0.0);
val(der(spring.w_rel),4.0);
val(spring.a_rel,0.0);
val(spring.a_rel,4.0);
val(spring.tau,0.0);
val(spring.tau,4.0);
val(spring.flange_a.phi,0.0);
val(spring.flange_a.phi,4.0);
val(spring.flange_a.tau,0.0);
val(spring.flange_a.tau,4.0);
val(spring.flange_b.phi,0.0);
val(spring.flange_b.phi,4.0);
val(spring.flange_b.tau,0.0);
val(spring.flange_b.tau,4.0);
val(inertia2.flange_a.phi,0.0);
val(inertia2.flange_a.phi,4.0);
val(inertia2.flange_a.tau,0.0);
val(inertia2.flange_a.tau,4.0);
val(inertia2.flange_b.phi,0.0);
val(inertia2.flange_b.phi,4.0);
val(inertia2.phi,0.0);
val(inertia2.phi,4.0);
val(der(inertia2.phi),0.0);
val(der(inertia2.phi),4.0);
val(inertia2.w,0.0);
val(inertia2.w,4.0);
val(der(inertia2.w),0.0);
val(der(inertia2.w),4.0);
val(inertia2.a,0.0);
val(inertia2.a,4.0);
val(kinematicPTP.y[1],0.0);
val(kinematicPTP.y[1],4.0);
val(integrator.u,0.0);
val(integrator.u,4.0);
val(integrator.y,0.0);
val(integrator.y,4.0);
val(der(integrator.y),0.0);
val(der(integrator.y),4.0);
val(speedSensor.flange.phi,0.0);
val(speedSensor.flange.phi,4.0);
val(der(speedSensor.flange.phi),0.0);
val(der(speedSensor.flange.phi),4.0);
val(speedSensor.w,0.0);
val(speedSensor.w,4.0);
val(loadTorque.flange.phi,0.0);
val(loadTorque.flange.phi,4.0);
val(loadTorque.phi,0.0);
val(loadTorque.phi,4.0);
val(PI.I.u,0.0);
val(PI.I.u,4.0);
val(PI.I.y,0.0);
val(PI.I.y,4.0);
val(der(PI.I.y),0.0);
val(der(PI.I.y),4.0);
val(PI.addI.u1,0.0);
val(PI.addI.u1,4.0);
val(PI.addI.u2,0.0);
val(PI.addI.u2,4.0);
val(PI.addI.u3,0.0);
val(PI.addI.u3,4.0);
val(PI.addI.y,0.0);
val(PI.addI.y,4.0);
val(PI.addSat.u1,0.0);
val(PI.addSat.u1,4.0);
val(PI.addSat.u2,0.0);
val(PI.addSat.u2,4.0);
val(PI.addSat.y,0.0);
val(PI.addSat.y,4.0);
val(PI.gainTrack.u,0.0);
val(PI.gainTrack.u,4.0);
val(PI.gainTrack.y,0.0);
val(PI.gainTrack.y,4.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Blocks.Examples.PID_Controller_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 4.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Blocks.Examples.PID_Controller', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat'",
//     messages = ""
// end SimulationResult;
// 0.0
// -1.28022592527e-15
// 0.0
// -1.44595142046e-05
// -10.0
// -9.99916267395
// 0.0
// 1.44595142046e-05
// 0.0
// -1.28022592527e-15
// 0.0
// -1.44595142046e-05
// 0.0
// 1.44595142046e-05
// 0.0
// 1.44595142046e-05
// 0.0
// 1.44595142046e-05
// -0.10000000149
// -0.0999916270375
// -10.0
// -9.99916267395
// 0.0
// 1.44595142046e-05
// -0.10000000149
// -0.100006081164
// -0.10000000149
// -0.0999916270375
// -10.0
// -9.99916267395
// -10.0
// -9.99916267395
// 0.0
// 1.83446609974
// -10.0
// -9.99916267395
// 0.0
// 1.83446609974
// 10.0
// 9.99945068359
// 0.0
// 1.83446609974
// 0.0
// -1.44595142046e-05
// 0.0
// -1.44595142046e-05
// 0.0
// 0.000288710580207
// 0.0
// 0.000288710580207
// 0.0
// 1.83446609974
// 10.0
// 9.99916267395
// -10.0
// -9.99916267395
// 0.0010000000475
// 0.000999934156425
// 0.0
// 1.09695861283e-06
// 0.0
// 1.09695861283e-06
// 0.0
// -1.42358694575e-05
// 0.0
// -1.42358694575e-05
// 10.0
// 9.99945068359
// 0.0
// 1.83446609974
// -10.0
// -9.99945068359
// 0.0010000000475
// 1.83546602726
// 10.0
// 9.99945068359
// 0.0010000000475
// 1.83546602726
// -10.0
// -9.99945068359
// 0.0010000000475
// 1.83546602726
// 0.0010000000475
// 1.83546602726
// 0.0
// -1.33625553644e-05
// 0.0
// -1.33625553644e-05
// 0.0
// 0.000274474732578
// 0.0
// 0.000274474732578
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// -1.28022592527e-15
// 0.0
// 0.0
// 0.0
// 1.83446609974
// 0.0
// -1.44595142046e-05
// 0.0
// -1.44595142046e-05
// 0.0010000000475
// 1.83546602726
// 0.0010000000475
// 1.83546602726
// 0.0
// 1.44595142046e-05
// -0.10000000149
// -0.100006081164
// 0.0
// 0.000144595149322
// 0.0
// -1.28022592527e-15
// 0.0
// -1.44595142046e-05
// 0.0
// 0.0
// 0.0
// 1.44595142046e-05
// -10.0
// -9.99916267395
// -10.0
// -9.99916267395
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// endResult
