// name:     Modelica.Electrical.Analog.Examples.DifferenceAmplifier
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Analog.Examples.DifferenceAmplifier_* Modelica.Electrical.Analog.Examples.DifferenceAmplifier Modelica.Electrical.Analog.Examples.DifferenceAmplifier.exe Modelica.Electrical.Analog.Examples.DifferenceAmplifier.cpp Modelica.Electrical.Analog.Examples.DifferenceAmplifier.makefile Modelica.Electrical.Analog.Examples.DifferenceAmplifier.libs Modelica.Electrical.Analog.Examples.DifferenceAmplifier.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Analog.Examples.DifferenceAmplifier);
val(V1.v,0.0);
val(V1.v,1.0);
val(V1.i,0.0);
val(V1.i,1.0);
val(V1.p.v,0.0);
val(V1.p.v,1.0);
val(V1.p.i,0.0);
val(V1.p.i,1.0);
val(V1.n.i,0.0);
val(V1.n.i,1.0);
val(V1.signalSource.y,0.0);
val(V1.signalSource.y,1.0);
val(V2.v,0.0);
val(V2.v,1.0);
val(V2.i,0.0);
val(V2.i,1.0);
val(V2.p.v,0.0);
val(V2.p.v,1.0);
val(V2.p.i,0.0);
val(V2.p.i,1.0);
val(V2.n.i,0.0);
val(V2.n.i,1.0);
val(V2.signalSource.y,0.0);
val(V2.signalSource.y,1.0);
val(I1.v,0.0);
val(I1.v,1.0);
val(I1.i,0.0);
val(I1.i,1.0);
val(I1.p.v,0.0);
val(I1.p.v,1.0);
val(I1.p.i,0.0);
val(I1.p.i,1.0);
val(I1.n.i,0.0);
val(I1.n.i,1.0);
val(I1.signalSource.y,0.0);
val(I1.signalSource.y,1.0);
val(R1.v,0.0);
val(R1.v,1.0);
val(R1.i,0.0);
val(R1.i,1.0);
val(R1.p.v,0.0);
val(R1.p.v,1.0);
val(R1.p.i,0.0);
val(R1.p.i,1.0);
val(R1.n.v,0.0);
val(R1.n.v,1.0);
val(R1.n.i,0.0);
val(R1.n.i,1.0);
val(R1.LossPower,0.0);
val(R1.LossPower,1.0);
val(R2.v,0.0);
val(R2.v,1.0);
val(R2.i,0.0);
val(R2.i,1.0);
val(R2.p.v,0.0);
val(R2.p.v,1.0);
val(R2.p.i,0.0);
val(R2.p.i,1.0);
val(R2.n.v,0.0);
val(R2.n.v,1.0);
val(R2.n.i,0.0);
val(R2.n.i,1.0);
val(R2.LossPower,0.0);
val(R2.LossPower,1.0);
val(R3.v,0.0);
val(R3.v,1.0);
val(R3.i,0.0);
val(R3.i,1.0);
val(R3.p.v,0.0);
val(R3.p.v,1.0);
val(R3.p.i,0.0);
val(R3.p.i,1.0);
val(R3.n.i,0.0);
val(R3.n.i,1.0);
val(R3.LossPower,0.0);
val(R3.LossPower,1.0);
val(R4.v,0.0);
val(R4.v,1.0);
val(R4.i,0.0);
val(R4.i,1.0);
val(R4.p.v,0.0);
val(R4.p.v,1.0);
val(R4.p.i,0.0);
val(R4.p.i,1.0);
val(R4.n.v,0.0);
val(R4.n.v,1.0);
val(R4.n.i,0.0);
val(R4.n.i,1.0);
val(R4.LossPower,0.0);
val(R4.LossPower,1.0);
val(C1.v,0.0);
val(C1.v,1.0);
val(der(C1.v),0.0);
val(der(C1.v),1.0);
val(C1.i,0.0);
val(C1.i,1.0);
val(C1.p.v,0.0);
val(C1.p.v,1.0);
val(C1.p.i,0.0);
val(C1.p.i,1.0);
val(C1.n.i,0.0);
val(C1.n.i,1.0);
val(C4.v,0.0);
val(C4.v,1.0);
val(der(C4.v),0.0);
val(der(C4.v),1.0);
val(C4.i,0.0);
val(C4.i,1.0);
val(C4.p.i,0.0);
val(C4.p.i,1.0);
val(C4.n.v,0.0);
val(C4.n.v,1.0);
val(C4.n.i,0.0);
val(C4.n.i,1.0);
val(C5.v,0.0);
val(C5.v,1.0);
val(der(C5.v),0.0);
val(der(C5.v),1.0);
val(C5.i,0.0);
val(C5.i,1.0);
val(C5.p.v,0.0);
val(C5.p.v,1.0);
val(C5.p.i,0.0);
val(C5.p.i,1.0);
val(C5.n.i,0.0);
val(C5.n.i,1.0);
val(C2.v,0.0);
val(C2.v,1.0);
val(der(C2.v),0.0);
val(der(C2.v),1.0);
val(C2.i,0.0);
val(C2.i,1.0);
val(C2.p.v,0.0);
val(C2.p.v,1.0);
val(C2.p.i,0.0);
val(C2.p.i,1.0);
val(C2.n.i,0.0);
val(C2.n.i,1.0);
val(C3.v,0.0);
val(C3.v,1.0);
val(der(C3.v),0.0);
val(der(C3.v),1.0);
val(C3.i,0.0);
val(C3.i,1.0);
val(C3.p.v,0.0);
val(C3.p.v,1.0);
val(C3.p.i,0.0);
val(C3.p.i,1.0);
val(C3.n.i,0.0);
val(C3.n.i,1.0);
val(Gnd1.p.i,0.0);
val(Gnd1.p.i,1.0);
val(Gnd9.p.i,0.0);
val(Gnd9.p.i,1.0);
val(Gnd3.p.i,0.0);
val(Gnd3.p.i,1.0);
val(Gnd2.p.i,0.0);
val(Gnd2.p.i,1.0);
val(Gnd6.p.i,0.0);
val(Gnd6.p.i,1.0);
val(Gnd7.p.i,0.0);
val(Gnd7.p.i,1.0);
val(Gnd8.p.i,0.0);
val(Gnd8.p.i,1.0);
val(Gnd5.p.i,0.0);
val(Gnd5.p.i,1.0);
val(Gnd4.p.i,0.0);
val(Gnd4.p.i,1.0);
val(Transistor1.rtb.v,0.0);
val(Transistor1.rtb.v,1.0);
val(Transistor1.rtb.i,0.0);
val(Transistor1.rtb.i,1.0);
val(Transistor1.rtb.p.v,0.0);
val(Transistor1.rtb.p.v,1.0);
val(Transistor1.rtb.p.i,0.0);
val(Transistor1.rtb.p.i,1.0);
val(Transistor1.rtb.n.v,0.0);
val(Transistor1.rtb.n.v,1.0);
val(Transistor1.rtb.n.i,0.0);
val(Transistor1.rtb.n.i,1.0);
val(Transistor1.rtb.LossPower,0.0);
val(Transistor1.rtb.LossPower,1.0);
val(Transistor1.rtc.v,0.0);
val(Transistor1.rtc.v,1.0);
val(Transistor1.rtc.i,0.0);
val(Transistor1.rtc.i,1.0);
val(Transistor1.rtc.p.v,0.0);
val(Transistor1.rtc.p.v,1.0);
val(Transistor1.rtc.p.i,0.0);
val(Transistor1.rtc.p.i,1.0);
val(Transistor1.rtc.n.v,0.0);
val(Transistor1.rtc.n.v,1.0);
val(Transistor1.rtc.n.i,0.0);
val(Transistor1.rtc.n.i,1.0);
val(Transistor1.rtc.LossPower,0.0);
val(Transistor1.rtc.LossPower,1.0);
val(Transistor1.ct.v,0.0);
val(Transistor1.ct.v,1.0);
val(der(Transistor1.ct.v),0.0);
val(der(Transistor1.ct.v),1.0);
val(Transistor1.ct.i,0.0);
val(Transistor1.ct.i,1.0);
val(Transistor1.ct.p.v,0.0);
val(Transistor1.ct.p.v,1.0);
val(Transistor1.ct.p.i,0.0);
val(Transistor1.ct.p.i,1.0);
val(Transistor1.ct.n.i,0.0);
val(Transistor1.ct.n.i,1.0);
val(Transistor1.Tr.LossPower,0.0);
val(Transistor1.Tr.LossPower,1.0);
val(Transistor1.Tr.C.v,0.0);
val(Transistor1.Tr.C.v,1.0);
val(der(Transistor1.Tr.C.v),0.0);
val(der(Transistor1.Tr.C.v),1.0);
val(Transistor1.Tr.C.i,0.0);
val(Transistor1.Tr.C.i,1.0);
val(Transistor1.Tr.B.v,0.0);
val(Transistor1.Tr.B.v,1.0);
val(Transistor1.Tr.B.i,0.0);
val(Transistor1.Tr.B.i,1.0);
val(Transistor1.Tr.E.v,0.0);
val(Transistor1.Tr.E.v,1.0);
val(Transistor1.Tr.E.i,0.0);
val(Transistor1.Tr.E.i,1.0);
val(Transistor1.Ground1.p.i,0.0);
val(Transistor1.Ground1.p.i,1.0);
val(Transistor1.c.v,0.0);
val(Transistor1.c.v,1.0);
val(Transistor1.c.i,0.0);
val(Transistor1.c.i,1.0);
val(Transistor1.b.v,0.0);
val(Transistor1.b.v,1.0);
val(Transistor1.b.i,0.0);
val(Transistor1.b.i,1.0);
val(Transistor1.e.v,0.0);
val(Transistor1.e.v,1.0);
val(Transistor1.e.i,0.0);
val(Transistor1.e.i,1.0);
val(Transistor2.rtb.v,0.0);
val(Transistor2.rtb.v,1.0);
val(Transistor2.rtb.i,0.0);
val(Transistor2.rtb.i,1.0);
val(Transistor2.rtb.p.v,0.0);
val(Transistor2.rtb.p.v,1.0);
val(Transistor2.rtb.p.i,0.0);
val(Transistor2.rtb.p.i,1.0);
val(Transistor2.rtb.n.v,0.0);
val(Transistor2.rtb.n.v,1.0);
val(Transistor2.rtb.n.i,0.0);
val(Transistor2.rtb.n.i,1.0);
val(Transistor2.rtb.LossPower,0.0);
val(Transistor2.rtb.LossPower,1.0);
val(Transistor2.rtc.v,0.0);
val(Transistor2.rtc.v,1.0);
val(Transistor2.rtc.i,0.0);
val(Transistor2.rtc.i,1.0);
val(Transistor2.rtc.p.v,0.0);
val(Transistor2.rtc.p.v,1.0);
val(Transistor2.rtc.p.i,0.0);
val(Transistor2.rtc.p.i,1.0);
val(Transistor2.rtc.n.v,0.0);
val(Transistor2.rtc.n.v,1.0);
val(Transistor2.rtc.n.i,0.0);
val(Transistor2.rtc.n.i,1.0);
val(Transistor2.rtc.LossPower,0.0);
val(Transistor2.rtc.LossPower,1.0);
val(Transistor2.ct.v,0.0);
val(Transistor2.ct.v,1.0);
val(der(Transistor2.ct.v),0.0);
val(der(Transistor2.ct.v),1.0);
val(Transistor2.ct.i,0.0);
val(Transistor2.ct.i,1.0);
val(Transistor2.ct.p.v,0.0);
val(Transistor2.ct.p.v,1.0);
val(Transistor2.ct.p.i,0.0);
val(Transistor2.ct.p.i,1.0);
val(Transistor2.ct.n.i,0.0);
val(Transistor2.ct.n.i,1.0);
val(Transistor2.Tr.LossPower,0.0);
val(Transistor2.Tr.LossPower,1.0);
val(Transistor2.Tr.C.v,0.0);
val(Transistor2.Tr.C.v,1.0);
val(der(Transistor2.Tr.C.v),0.0);
val(der(Transistor2.Tr.C.v),1.0);
val(Transistor2.Tr.C.i,0.0);
val(Transistor2.Tr.C.i,1.0);
val(Transistor2.Tr.B.v,0.0);
val(Transistor2.Tr.B.v,1.0);
val(Transistor2.Tr.B.i,0.0);
val(Transistor2.Tr.B.i,1.0);
val(Transistor2.Tr.E.v,0.0);
val(Transistor2.Tr.E.v,1.0);
val(Transistor2.Tr.E.i,0.0);
val(Transistor2.Tr.E.i,1.0);
val(Transistor2.Ground1.p.i,0.0);
val(Transistor2.Ground1.p.i,1.0);
val(Transistor2.c.v,0.0);
val(Transistor2.c.v,1.0);
val(Transistor2.c.i,0.0);
val(Transistor2.c.i,1.0);
val(Transistor2.b.v,0.0);
val(Transistor2.b.v,1.0);
val(Transistor2.b.i,0.0);
val(Transistor2.b.i,1.0);
val(Transistor2.e.v,0.0);
val(Transistor2.e.v,1.0);
val(Transistor2.e.i,0.0);
val(Transistor2.e.i,1.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Analog.Examples.DifferenceAmplifier_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Analog.Examples.DifferenceAmplifier', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false",
//     messages = ""
// end SimulationResult;
// 0.0
// 0.0
// -0
// -0.00137622968759
// 0.0
// 0.0
// -0
// -0.00137622968759
// 0.0
// 0.00137622968759
// 0.0
// 0.0
// 0.0
// 15.0
// -0
// -0.157247543335
// 0.0
// 15.0
// -0
// -0.157247543335
// 0.0
// 0.157247543335
// 0.0
// 15.0
// 0.0
// -0.883233606815
// 0.0
// 0.159999996424
// 0.0
// -0.883233606815
// 0.0
// 0.159999996424
// -0
// -0.159999996424
// 0.0
// 0.159999996424
// 0.0
// 1.37622976126e-07
// 0.0
// 0.00137622968759
// 0.0
// 0.0
// 0.0
// 0.00137622968759
// 0.0
// -1.37622976126e-07
// -0
// -0.00137622968759
// 0.0
// 1.89400828354e-10
// 0.0
// 7.86237716675
// 0.0
// 0.0786237716675
// 0.0
// 15.0
// 0.0
// 0.0786237716675
// 0.0
// 7.13762283325
// -0
// -0.0786237716675
// 0.0
// 0.618169724941
// 0.0
// -1.37622976126e-07
// 0.0
// -0.00137622968759
// 0.0
// -1.37622976126e-07
// 0.0
// -0.00137622968759
// -0
// 0.00137622968759
// 0.0
// 1.89400828354e-10
// 0.0
// 7.86237716675
// 0.0
// 0.0786237716675
// 0.0
// 15.0
// 0.0
// 0.0786237716675
// -0
// 7.13762283325
// -0
// -0.0786237716675
// 0.0
// 0.618169724941
// 0.0
// -1.37622976126e-07
// 0.0
// 0.0
// 0.0
// 0.0
// 0.0
// -1.37622976126e-07
// 0.0
// 0.0
// -0
// -0
// 0.0
// -7.13762283325
// -0
// -0.00011726730736
// -0
// -1.17267306976e-14
// -0
// -1.17267306976e-14
// -0
// 7.13762283325
// 0.0
// 1.17267306976e-14
// 0.0
// -0.883233606815
// 0.0
// -6.74308103044e-06
// 0.0
// -6.74308106233e-16
// 0.0
// -0.883233606815
// 0.0
// -6.74308106233e-16
// -0
// 6.74308106233e-16
// 0.0
// 7.13762283325
// 0.0
// 2.84494653897e-05
// 0.0
// 2.8449465006e-15
// 0.0
// 7.13762283325
// 0.0
// 2.8449465006e-15
// -0
// -2.8449465006e-15
// 0.0
// -1.37622976126e-07
// -0
// -4.33680868994e-09
// -0
// -4.33680868994e-19
// 0.0
// -1.37622976126e-07
// -0
// -4.33680868994e-19
// 0.0
// 4.33680868994e-19
// -0
// -0.00137622968759
// -0
// -0.157247543335
// 0.0
// 2.8449465006e-15
// 0.0
// 0.0
// 0.0
// 1.17267306976e-14
// 0.0
// 0.159999996424
// 0.0
// -6.74308106233e-16
// -0
// -4.33680868994e-19
// 0.0
// -0.00137622968759
// 0.0
// 6.88114887453e-05
// 0.0
// 0.00137622968759
// 0.0
// -1.37622976126e-07
// 0.0
// 0.00137622968759
// 0.0
// -6.89491062076e-05
// -0
// -0.00137622968759
// 0.0
// 9.47004110685e-08
// 0.0
// -0.00786237698048
// 0.0
// -0.0786237716675
// 0.0
// 7.12976074219
// 0.0
// -0.0786237716675
// 0.0
// 7.13762283325
// -0
// 0.0786237716675
// 0.0
// 0.000618169724476
// 0.0
// -6.89491062076e-05
// 0.0
// -6.52186599837e-06
// 0.0
// -6.52186623205e-16
// 0.0
// -6.89491062076e-05
// 0.0
// -6.52186623205e-16
// -0
// 6.52186623205e-16
// 0.0
// 0.631227254868
// 0.0
// 7.12976074219
// 0.0
// -0.00248473673128
// -0
// 0.0786237716675
// 0.0
// -6.89491062076e-05
// 0.0
// 0.00137622968759
// 0.0
// -0.883233606815
// 0.0
// -0.0799999982119
// 0.0
// -6.52186623205e-16
// 0.0
// 7.13762283325
// -0
// 0.0786237716675
// 0.0
// -1.37622976126e-07
// 0.0
// 0.00137622968759
// 0.0
// -0.883233606815
// 0.0
// -0.0799999982119
// 0.0
// 6.88114887453e-05
// 0.0
// 0.00137622968759
// 0.0
// -1.37622976126e-07
// 0.0
// 0.00137622968759
// 0.0
// -6.89491062076e-05
// -0
// -0.00137622968759
// 0.0
// 9.47004110685e-08
// 0.0
// -0.00786237698048
// 0.0
// -0.0786237716675
// 0.0
// 7.12976074219
// 0.0
// -0.0786237716675
// -0
// 7.13762283325
// -0
// 0.0786237716675
// 0.0
// 0.000618169724476
// 0.0
// -6.89491062076e-05
// 0.0
// -1.05147828435e-05
// 0.0
// -1.05147832512e-15
// 0.0
// -6.89491062076e-05
// 0.0
// -1.05147832512e-15
// -0
// 1.05147832512e-15
// 0.0
// 0.631227254868
// 0.0
// 7.12976074219
// 0.0
// -0.00968923512846
// -0
// 0.0786237716675
// 0.0
// -6.89491062076e-05
// 0.0
// 0.00137622968759
// 0.0
// -0.883233606815
// 0.0
// -0.0799999982119
// 0.0
// -1.05147832512e-15
// -0
// 7.13762283325
// -0
// 0.0786237716675
// 0.0
// -1.37622976126e-07
// 0.0
// 0.00137622968759
// 0.0
// -0.883233606815
// 0.0
// -0.0799999982119
// endResult
