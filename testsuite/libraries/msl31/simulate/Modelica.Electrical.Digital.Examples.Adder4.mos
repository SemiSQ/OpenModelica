// name:     Modelica.Electrical.Digital.Examples.Adder4
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Digital.Examples.Adder4_* Modelica.Electrical.Digital.Examples.Adder4 Modelica.Electrical.Digital.Examples.Adder4.exe Modelica.Electrical.Digital.Examples.Adder4.cpp Modelica.Electrical.Digital.Examples.Adder4.makefile Modelica.Electrical.Digital.Examples.Adder4.libs Modelica.Electrical.Digital.Examples.Adder4.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Digital.Examples.Adder4,stopTime=5.0);
val(b4.y,0.0);
val(b4.y,5.0);
val(b1.y,0.0);
val(b1.y,5.0);
val(b2.y,0.0);
val(b2.y,5.0);
val(b3.y,0.0);
val(b3.y,5.0);
val(a1.y,0.0);
val(a1.y,5.0);
val(a2.y,0.0);
val(a2.y,5.0);
val(a3.y,0.0);
val(a3.y,5.0);
val(a4.y,0.0);
val(a4.y,5.0);
val(Adder1.Adder2.s,0.0);
val(Adder1.Adder2.s,5.0);
val(Adder1.Adder2.a,0.0);
val(Adder1.Adder2.a,5.0);
val(Adder1.Adder2.c,0.0);
val(Adder1.Adder2.c,5.0);
val(Adder1.Adder2.AND.x[2],0.0);
val(Adder1.Adder2.AND.x[2],5.0);
val(Adder1.Adder2.AND.y,0.0);
val(Adder1.Adder2.AND.y,5.0);
val(Adder1.Adder2.AND.G1.x[2],0.0);
val(Adder1.Adder2.AND.G1.x[2],5.0);
val(Adder1.Adder2.AND.G1.y,0.0);
val(Adder1.Adder2.AND.G1.y,5.0);
val(Adder1.Adder2.AND.G2.x,0.0);
val(Adder1.Adder2.AND.G2.x,5.0);
val(Adder1.Adder2.AND.G2.y,0.0);
val(Adder1.Adder2.AND.G2.y,5.0);
val(Adder1.Adder2.XOR.x[2],0.0);
val(Adder1.Adder2.XOR.x[2],5.0);
val(Adder1.Adder2.XOR.y,0.0);
val(Adder1.Adder2.XOR.y,5.0);
val(Adder1.Adder2.XOR.G1.x[2],0.0);
val(Adder1.Adder2.XOR.G1.x[2],5.0);
val(Adder1.Adder2.XOR.G1.y,0.0);
val(Adder1.Adder2.XOR.G1.y,5.0);
val(Adder1.Adder2.XOR.G2.x,0.0);
val(Adder1.Adder2.XOR.G2.x,5.0);
val(Adder1.Adder2.XOR.G2.y,0.0);
val(Adder1.Adder2.XOR.G2.y,5.0);
val(Adder1.Adder1.b,0.0);
val(Adder1.Adder1.b,5.0);
val(Adder1.Adder1.s,0.0);
val(Adder1.Adder1.s,5.0);
val(Adder1.Adder1.a,0.0);
val(Adder1.Adder1.a,5.0);
val(Adder1.Adder1.c,0.0);
val(Adder1.Adder1.c,5.0);
val(Adder1.Adder1.AND.x[1],0.0);
val(Adder1.Adder1.AND.x[1],5.0);
val(Adder1.Adder1.AND.x[2],0.0);
val(Adder1.Adder1.AND.x[2],5.0);
val(Adder1.Adder1.AND.y,0.0);
val(Adder1.Adder1.AND.y,5.0);
val(Adder1.Adder1.AND.G1.x[1],0.0);
val(Adder1.Adder1.AND.G1.x[1],5.0);
val(Adder1.Adder1.AND.G1.x[2],0.0);
val(Adder1.Adder1.AND.G1.x[2],5.0);
val(Adder1.Adder1.AND.G1.y,0.0);
val(Adder1.Adder1.AND.G1.y,5.0);
val(Adder1.Adder1.AND.G2.x,0.0);
val(Adder1.Adder1.AND.G2.x,5.0);
val(Adder1.Adder1.AND.G2.y,0.0);
val(Adder1.Adder1.AND.G2.y,5.0);
val(Adder1.Adder1.XOR.x[1],0.0);
val(Adder1.Adder1.XOR.x[1],5.0);
val(Adder1.Adder1.XOR.x[2],0.0);
val(Adder1.Adder1.XOR.x[2],5.0);
val(Adder1.Adder1.XOR.y,0.0);
val(Adder1.Adder1.XOR.y,5.0);
val(Adder1.Adder1.XOR.G1.x[1],0.0);
val(Adder1.Adder1.XOR.G1.x[1],5.0);
val(Adder1.Adder1.XOR.G1.x[2],0.0);
val(Adder1.Adder1.XOR.G1.x[2],5.0);
val(Adder1.Adder1.XOR.G1.y,0.0);
val(Adder1.Adder1.XOR.G1.y,5.0);
val(Adder1.Adder1.XOR.G2.x,0.0);
val(Adder1.Adder1.XOR.G2.x,5.0);
val(Adder1.Adder1.XOR.G2.y,0.0);
val(Adder1.Adder1.XOR.G2.y,5.0);
val(Adder1.a,0.0);
val(Adder1.a,5.0);
val(Adder1.b,0.0);
val(Adder1.b,5.0);
val(Adder1.s,0.0);
val(Adder1.s,5.0);
val(Adder1.c_out,0.0);
val(Adder1.c_out,5.0);
val(Adder1.OR.x[1],0.0);
val(Adder1.OR.x[1],5.0);
val(Adder1.OR.x[2],0.0);
val(Adder1.OR.x[2],5.0);
val(Adder1.OR.y,0.0);
val(Adder1.OR.y,5.0);
val(Adder2.Adder2.b,0.0);
val(Adder2.Adder2.b,5.0);
val(Adder2.Adder2.s,0.0);
val(Adder2.Adder2.s,5.0);
val(Adder2.Adder2.a,0.0);
val(Adder2.Adder2.a,5.0);
val(Adder2.Adder2.c,0.0);
val(Adder2.Adder2.c,5.0);
val(Adder2.Adder2.AND.x[1],0.0);
val(Adder2.Adder2.AND.x[1],5.0);
val(Adder2.Adder2.AND.x[2],0.0);
val(Adder2.Adder2.AND.x[2],5.0);
val(Adder2.Adder2.AND.y,0.0);
val(Adder2.Adder2.AND.y,5.0);
val(Adder2.Adder2.AND.G1.x[1],0.0);
val(Adder2.Adder2.AND.G1.x[1],5.0);
val(Adder2.Adder2.AND.G1.x[2],0.0);
val(Adder2.Adder2.AND.G1.x[2],5.0);
val(Adder2.Adder2.AND.G1.y,0.0);
val(Adder2.Adder2.AND.G1.y,5.0);
val(Adder2.Adder2.AND.G2.x,0.0);
val(Adder2.Adder2.AND.G2.x,5.0);
val(Adder2.Adder2.AND.G2.y,0.0);
val(Adder2.Adder2.AND.G2.y,5.0);
val(Adder2.Adder2.XOR.x[1],0.0);
val(Adder2.Adder2.XOR.x[1],5.0);
val(Adder2.Adder2.XOR.x[2],0.0);
val(Adder2.Adder2.XOR.x[2],5.0);
val(Adder2.Adder2.XOR.y,0.0);
val(Adder2.Adder2.XOR.y,5.0);
val(Adder2.Adder2.XOR.G1.x[1],0.0);
val(Adder2.Adder2.XOR.G1.x[1],5.0);
val(Adder2.Adder2.XOR.G1.x[2],0.0);
val(Adder2.Adder2.XOR.G1.x[2],5.0);
val(Adder2.Adder2.XOR.G1.y,0.0);
val(Adder2.Adder2.XOR.G1.y,5.0);
val(Adder2.Adder2.XOR.G2.x,0.0);
val(Adder2.Adder2.XOR.G2.x,5.0);
val(Adder2.Adder2.XOR.G2.y,0.0);
val(Adder2.Adder2.XOR.G2.y,5.0);
val(Adder2.Adder1.b,0.0);
val(Adder2.Adder1.b,5.0);
val(Adder2.Adder1.s,0.0);
val(Adder2.Adder1.s,5.0);
val(Adder2.Adder1.a,0.0);
val(Adder2.Adder1.a,5.0);
val(Adder2.Adder1.c,0.0);
val(Adder2.Adder1.c,5.0);
val(Adder2.Adder1.AND.x[1],0.0);
val(Adder2.Adder1.AND.x[1],5.0);
val(Adder2.Adder1.AND.x[2],0.0);
val(Adder2.Adder1.AND.x[2],5.0);
val(Adder2.Adder1.AND.y,0.0);
val(Adder2.Adder1.AND.y,5.0);
val(Adder2.Adder1.AND.G1.x[1],0.0);
val(Adder2.Adder1.AND.G1.x[1],5.0);
val(Adder2.Adder1.AND.G1.x[2],0.0);
val(Adder2.Adder1.AND.G1.x[2],5.0);
val(Adder2.Adder1.AND.G1.y,0.0);
val(Adder2.Adder1.AND.G1.y,5.0);
val(Adder2.Adder1.AND.G2.x,0.0);
val(Adder2.Adder1.AND.G2.x,5.0);
val(Adder2.Adder1.AND.G2.y,0.0);
val(Adder2.Adder1.AND.G2.y,5.0);
val(Adder2.Adder1.XOR.x[1],0.0);
val(Adder2.Adder1.XOR.x[1],5.0);
val(Adder2.Adder1.XOR.x[2],0.0);
val(Adder2.Adder1.XOR.x[2],5.0);
val(Adder2.Adder1.XOR.y,0.0);
val(Adder2.Adder1.XOR.y,5.0);
val(Adder2.Adder1.XOR.G1.x[1],0.0);
val(Adder2.Adder1.XOR.G1.x[1],5.0);
val(Adder2.Adder1.XOR.G1.x[2],0.0);
val(Adder2.Adder1.XOR.G1.x[2],5.0);
val(Adder2.Adder1.XOR.G1.y,0.0);
val(Adder2.Adder1.XOR.G1.y,5.0);
val(Adder2.Adder1.XOR.G2.x,0.0);
val(Adder2.Adder1.XOR.G2.x,5.0);
val(Adder2.Adder1.XOR.G2.y,0.0);
val(Adder2.Adder1.XOR.G2.y,5.0);
val(Adder2.a,0.0);
val(Adder2.a,5.0);
val(Adder2.b,0.0);
val(Adder2.b,5.0);
val(Adder2.c_in,0.0);
val(Adder2.c_in,5.0);
val(Adder2.s,0.0);
val(Adder2.s,5.0);
val(Adder2.c_out,0.0);
val(Adder2.c_out,5.0);
val(Adder2.OR.x[1],0.0);
val(Adder2.OR.x[1],5.0);
val(Adder2.OR.x[2],0.0);
val(Adder2.OR.x[2],5.0);
val(Adder2.OR.y,0.0);
val(Adder2.OR.y,5.0);
val(Adder3.Adder2.b,0.0);
val(Adder3.Adder2.b,5.0);
val(Adder3.Adder2.s,0.0);
val(Adder3.Adder2.s,5.0);
val(Adder3.Adder2.a,0.0);
val(Adder3.Adder2.a,5.0);
val(Adder3.Adder2.c,0.0);
val(Adder3.Adder2.c,5.0);
val(Adder3.Adder2.AND.x[1],0.0);
val(Adder3.Adder2.AND.x[1],5.0);
val(Adder3.Adder2.AND.x[2],0.0);
val(Adder3.Adder2.AND.x[2],5.0);
val(Adder3.Adder2.AND.y,0.0);
val(Adder3.Adder2.AND.y,5.0);
val(Adder3.Adder2.AND.G1.x[1],0.0);
val(Adder3.Adder2.AND.G1.x[1],5.0);
val(Adder3.Adder2.AND.G1.x[2],0.0);
val(Adder3.Adder2.AND.G1.x[2],5.0);
val(Adder3.Adder2.AND.G1.y,0.0);
val(Adder3.Adder2.AND.G1.y,5.0);
val(Adder3.Adder2.AND.G2.x,0.0);
val(Adder3.Adder2.AND.G2.x,5.0);
val(Adder3.Adder2.AND.G2.y,0.0);
val(Adder3.Adder2.AND.G2.y,5.0);
val(Adder3.Adder2.XOR.x[1],0.0);
val(Adder3.Adder2.XOR.x[1],5.0);
val(Adder3.Adder2.XOR.x[2],0.0);
val(Adder3.Adder2.XOR.x[2],5.0);
val(Adder3.Adder2.XOR.y,0.0);
val(Adder3.Adder2.XOR.y,5.0);
val(Adder3.Adder2.XOR.G1.x[1],0.0);
val(Adder3.Adder2.XOR.G1.x[1],5.0);
val(Adder3.Adder2.XOR.G1.x[2],0.0);
val(Adder3.Adder2.XOR.G1.x[2],5.0);
val(Adder3.Adder2.XOR.G1.y,0.0);
val(Adder3.Adder2.XOR.G1.y,5.0);
val(Adder3.Adder2.XOR.G2.x,0.0);
val(Adder3.Adder2.XOR.G2.x,5.0);
val(Adder3.Adder2.XOR.G2.y,0.0);
val(Adder3.Adder2.XOR.G2.y,5.0);
val(Adder3.Adder1.b,0.0);
val(Adder3.Adder1.b,5.0);
val(Adder3.Adder1.s,0.0);
val(Adder3.Adder1.s,5.0);
val(Adder3.Adder1.a,0.0);
val(Adder3.Adder1.a,5.0);
val(Adder3.Adder1.c,0.0);
val(Adder3.Adder1.c,5.0);
val(Adder3.Adder1.AND.x[1],0.0);
val(Adder3.Adder1.AND.x[1],5.0);
val(Adder3.Adder1.AND.x[2],0.0);
val(Adder3.Adder1.AND.x[2],5.0);
val(Adder3.Adder1.AND.y,0.0);
val(Adder3.Adder1.AND.y,5.0);
val(Adder3.Adder1.AND.G1.x[1],0.0);
val(Adder3.Adder1.AND.G1.x[1],5.0);
val(Adder3.Adder1.AND.G1.x[2],0.0);
val(Adder3.Adder1.AND.G1.x[2],5.0);
val(Adder3.Adder1.AND.G1.y,0.0);
val(Adder3.Adder1.AND.G1.y,5.0);
val(Adder3.Adder1.AND.G2.x,0.0);
val(Adder3.Adder1.AND.G2.x,5.0);
val(Adder3.Adder1.AND.G2.y,0.0);
val(Adder3.Adder1.AND.G2.y,5.0);
val(Adder3.Adder1.XOR.x[1],0.0);
val(Adder3.Adder1.XOR.x[1],5.0);
val(Adder3.Adder1.XOR.x[2],0.0);
val(Adder3.Adder1.XOR.x[2],5.0);
val(Adder3.Adder1.XOR.y,0.0);
val(Adder3.Adder1.XOR.y,5.0);
val(Adder3.Adder1.XOR.G1.x[1],0.0);
val(Adder3.Adder1.XOR.G1.x[1],5.0);
val(Adder3.Adder1.XOR.G1.x[2],0.0);
val(Adder3.Adder1.XOR.G1.x[2],5.0);
val(Adder3.Adder1.XOR.G1.y,0.0);
val(Adder3.Adder1.XOR.G1.y,5.0);
val(Adder3.Adder1.XOR.G2.x,0.0);
val(Adder3.Adder1.XOR.G2.x,5.0);
val(Adder3.Adder1.XOR.G2.y,0.0);
val(Adder3.Adder1.XOR.G2.y,5.0);
val(Adder3.a,0.0);
val(Adder3.a,5.0);
val(Adder3.b,0.0);
val(Adder3.b,5.0);
val(Adder3.c_in,0.0);
val(Adder3.c_in,5.0);
val(Adder3.s,0.0);
val(Adder3.s,5.0);
val(Adder3.c_out,0.0);
val(Adder3.c_out,5.0);
val(Adder3.OR.x[1],0.0);
val(Adder3.OR.x[1],5.0);
val(Adder3.OR.x[2],0.0);
val(Adder3.OR.x[2],5.0);
val(Adder3.OR.y,0.0);
val(Adder3.OR.y,5.0);
val(Adder4.Adder2.b,0.0);
val(Adder4.Adder2.b,5.0);
val(Adder4.Adder2.s,0.0);
val(Adder4.Adder2.s,5.0);
val(Adder4.Adder2.a,0.0);
val(Adder4.Adder2.a,5.0);
val(Adder4.Adder2.c,0.0);
val(Adder4.Adder2.c,5.0);
val(Adder4.Adder2.AND.x[1],0.0);
val(Adder4.Adder2.AND.x[1],5.0);
val(Adder4.Adder2.AND.x[2],0.0);
val(Adder4.Adder2.AND.x[2],5.0);
val(Adder4.Adder2.AND.y,0.0);
val(Adder4.Adder2.AND.y,5.0);
val(Adder4.Adder2.AND.G1.x[1],0.0);
val(Adder4.Adder2.AND.G1.x[1],5.0);
val(Adder4.Adder2.AND.G1.x[2],0.0);
val(Adder4.Adder2.AND.G1.x[2],5.0);
val(Adder4.Adder2.AND.G1.y,0.0);
val(Adder4.Adder2.AND.G1.y,5.0);
val(Adder4.Adder2.AND.G2.x,0.0);
val(Adder4.Adder2.AND.G2.x,5.0);
val(Adder4.Adder2.AND.G2.y,0.0);
val(Adder4.Adder2.AND.G2.y,5.0);
val(Adder4.Adder2.XOR.x[1],0.0);
val(Adder4.Adder2.XOR.x[1],5.0);
val(Adder4.Adder2.XOR.x[2],0.0);
val(Adder4.Adder2.XOR.x[2],5.0);
val(Adder4.Adder2.XOR.y,0.0);
val(Adder4.Adder2.XOR.y,5.0);
val(Adder4.Adder2.XOR.G1.x[1],0.0);
val(Adder4.Adder2.XOR.G1.x[1],5.0);
val(Adder4.Adder2.XOR.G1.x[2],0.0);
val(Adder4.Adder2.XOR.G1.x[2],5.0);
val(Adder4.Adder2.XOR.G1.y,0.0);
val(Adder4.Adder2.XOR.G1.y,5.0);
val(Adder4.Adder2.XOR.G2.x,0.0);
val(Adder4.Adder2.XOR.G2.x,5.0);
val(Adder4.Adder2.XOR.G2.y,0.0);
val(Adder4.Adder2.XOR.G2.y,5.0);
val(Adder4.Adder1.b,0.0);
val(Adder4.Adder1.b,5.0);
val(Adder4.Adder1.s,0.0);
val(Adder4.Adder1.s,5.0);
val(Adder4.Adder1.a,0.0);
val(Adder4.Adder1.a,5.0);
val(Adder4.Adder1.c,0.0);
val(Adder4.Adder1.c,5.0);
val(Adder4.Adder1.AND.x[1],0.0);
val(Adder4.Adder1.AND.x[1],5.0);
val(Adder4.Adder1.AND.x[2],0.0);
val(Adder4.Adder1.AND.x[2],5.0);
val(Adder4.Adder1.AND.y,0.0);
val(Adder4.Adder1.AND.y,5.0);
val(Adder4.Adder1.AND.G1.x[1],0.0);
val(Adder4.Adder1.AND.G1.x[1],5.0);
val(Adder4.Adder1.AND.G1.x[2],0.0);
val(Adder4.Adder1.AND.G1.x[2],5.0);
val(Adder4.Adder1.AND.G1.y,0.0);
val(Adder4.Adder1.AND.G1.y,5.0);
val(Adder4.Adder1.AND.G2.x,0.0);
val(Adder4.Adder1.AND.G2.x,5.0);
val(Adder4.Adder1.AND.G2.y,0.0);
val(Adder4.Adder1.AND.G2.y,5.0);
val(Adder4.Adder1.XOR.x[1],0.0);
val(Adder4.Adder1.XOR.x[1],5.0);
val(Adder4.Adder1.XOR.x[2],0.0);
val(Adder4.Adder1.XOR.x[2],5.0);
val(Adder4.Adder1.XOR.y,0.0);
val(Adder4.Adder1.XOR.y,5.0);
val(Adder4.Adder1.XOR.G1.x[1],0.0);
val(Adder4.Adder1.XOR.G1.x[1],5.0);
val(Adder4.Adder1.XOR.G1.x[2],0.0);
val(Adder4.Adder1.XOR.G1.x[2],5.0);
val(Adder4.Adder1.XOR.G1.y,0.0);
val(Adder4.Adder1.XOR.G1.y,5.0);
val(Adder4.Adder1.XOR.G2.x,0.0);
val(Adder4.Adder1.XOR.G2.x,5.0);
val(Adder4.Adder1.XOR.G2.y,0.0);
val(Adder4.Adder1.XOR.G2.y,5.0);
val(Adder4.a,0.0);
val(Adder4.a,5.0);
val(Adder4.b,0.0);
val(Adder4.b,5.0);
val(Adder4.c_in,0.0);
val(Adder4.c_in,5.0);
val(Adder4.s,0.0);
val(Adder4.s,5.0);
val(Adder4.c_out,0.0);
val(Adder4.c_out,5.0);
val(Adder4.OR.x[1],0.0);
val(Adder4.OR.x[1],5.0);
val(Adder4.OR.x[2],0.0);
val(Adder4.OR.x[2],5.0);
val(Adder4.OR.y,0.0);
val(Adder4.OR.y,5.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Digital.Examples.Adder4_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 5.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Digital.Examples.Adder4', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat'",
//     messages = ""
// end SimulationResult;
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 1.0
// 3.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 1.0
// 3.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// endResult
