// name:     Modelica.Electrical.Digital.Examples.Counter
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Digital.Examples.Counter_* Modelica.Electrical.Digital.Examples.Counter Modelica.Electrical.Digital.Examples.Counter.exe Modelica.Electrical.Digital.Examples.Counter.cpp Modelica.Electrical.Digital.Examples.Counter.makefile Modelica.Electrical.Digital.Examples.Counter.libs Modelica.Electrical.Digital.Examples.Counter.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Digital.Examples.Counter,stopTime=100.0);
val(Enable.y,0.0);
val(Enable.y,100.0);
val(Clock.y,0.0);
val(Clock.y,100.0);
val(Counter.enable,0.0);
val(Counter.enable,100.0);
val(Counter.count,0.0);
val(Counter.count,100.0);
val(Counter.FF[1].j,0.0);
val(Counter.FF[1].j,100.0);
val(Counter.FF[1].q,0.0);
val(Counter.FF[1].q,100.0);
val(Counter.FF[1].qn,0.0);
val(Counter.FF[1].qn,100.0);
val(Counter.FF[1].clk,0.0);
val(Counter.FF[1].clk,100.0);
val(Counter.FF[1].k,0.0);
val(Counter.FF[1].k,100.0);
val(Counter.FF[1].RS1.Nor1.x[1],0.0);
val(Counter.FF[1].RS1.Nor1.x[1],100.0);
val(Counter.FF[1].RS1.Nor1.x[2],0.0);
val(Counter.FF[1].RS1.Nor1.x[2],100.0);
val(Counter.FF[1].RS1.Nor1.y,0.0);
val(Counter.FF[1].RS1.Nor1.y,100.0);
val(Counter.FF[1].RS1.Nor2.x[1],0.0);
val(Counter.FF[1].RS1.Nor2.x[1],100.0);
val(Counter.FF[1].RS1.Nor2.x[2],0.0);
val(Counter.FF[1].RS1.Nor2.x[2],100.0);
val(Counter.FF[1].RS1.Nor2.y,0.0);
val(Counter.FF[1].RS1.Nor2.y,100.0);
val(Counter.FF[1].RS1.s,0.0);
val(Counter.FF[1].RS1.s,100.0);
val(Counter.FF[1].RS1.r,0.0);
val(Counter.FF[1].RS1.r,100.0);
val(Counter.FF[1].RS1.q,0.0);
val(Counter.FF[1].RS1.q,100.0);
val(Counter.FF[1].RS1.qn,0.0);
val(Counter.FF[1].RS1.qn,100.0);
val(Counter.FF[1].RS1.TD1.x,0.0);
val(Counter.FF[1].RS1.TD1.x,100.0);
val(Counter.FF[1].RS1.TD1.y,0.0);
val(Counter.FF[1].RS1.TD1.y,100.0);
val(Counter.FF[1].RS2.Nor1.x[1],0.0);
val(Counter.FF[1].RS2.Nor1.x[1],100.0);
val(Counter.FF[1].RS2.Nor1.x[2],0.0);
val(Counter.FF[1].RS2.Nor1.x[2],100.0);
val(Counter.FF[1].RS2.Nor1.y,0.0);
val(Counter.FF[1].RS2.Nor1.y,100.0);
val(Counter.FF[1].RS2.Nor2.x[1],0.0);
val(Counter.FF[1].RS2.Nor2.x[1],100.0);
val(Counter.FF[1].RS2.Nor2.x[2],0.0);
val(Counter.FF[1].RS2.Nor2.x[2],100.0);
val(Counter.FF[1].RS2.Nor2.y,0.0);
val(Counter.FF[1].RS2.Nor2.y,100.0);
val(Counter.FF[1].RS2.s,0.0);
val(Counter.FF[1].RS2.s,100.0);
val(Counter.FF[1].RS2.r,0.0);
val(Counter.FF[1].RS2.r,100.0);
val(Counter.FF[1].RS2.q,0.0);
val(Counter.FF[1].RS2.q,100.0);
val(Counter.FF[1].RS2.qn,0.0);
val(Counter.FF[1].RS2.qn,100.0);
val(Counter.FF[1].RS2.TD1.x,0.0);
val(Counter.FF[1].RS2.TD1.x,100.0);
val(Counter.FF[1].RS2.TD1.y,0.0);
val(Counter.FF[1].RS2.TD1.y,100.0);
val(Counter.FF[1].And1.x[1],0.0);
val(Counter.FF[1].And1.x[1],100.0);
val(Counter.FF[1].And1.x[2],0.0);
val(Counter.FF[1].And1.x[2],100.0);
val(Counter.FF[1].And1.x[3],0.0);
val(Counter.FF[1].And1.x[3],100.0);
val(Counter.FF[1].And1.y,0.0);
val(Counter.FF[1].And1.y,100.0);
val(Counter.FF[1].And2.x[1],0.0);
val(Counter.FF[1].And2.x[1],100.0);
val(Counter.FF[1].And2.x[2],0.0);
val(Counter.FF[1].And2.x[2],100.0);
val(Counter.FF[1].And2.x[3],0.0);
val(Counter.FF[1].And2.x[3],100.0);
val(Counter.FF[1].And2.y,0.0);
val(Counter.FF[1].And2.y,100.0);
val(Counter.FF[1].And3.x[1],0.0);
val(Counter.FF[1].And3.x[1],100.0);
val(Counter.FF[1].And3.x[2],0.0);
val(Counter.FF[1].And3.x[2],100.0);
val(Counter.FF[1].And3.y,0.0);
val(Counter.FF[1].And3.y,100.0);
val(Counter.FF[1].And4.x[1],0.0);
val(Counter.FF[1].And4.x[1],100.0);
val(Counter.FF[1].And4.x[2],0.0);
val(Counter.FF[1].And4.x[2],100.0);
val(Counter.FF[1].And4.y,0.0);
val(Counter.FF[1].And4.y,100.0);
val(Counter.FF[1].Not1.x,0.0);
val(Counter.FF[1].Not1.x,100.0);
val(Counter.FF[1].Not1.y,0.0);
val(Counter.FF[1].Not1.y,100.0);
val(Counter.FF[2].j,0.0);
val(Counter.FF[2].j,100.0);
val(Counter.FF[2].q,0.0);
val(Counter.FF[2].q,100.0);
val(Counter.FF[2].qn,0.0);
val(Counter.FF[2].qn,100.0);
val(Counter.FF[2].clk,0.0);
val(Counter.FF[2].clk,100.0);
val(Counter.FF[2].k,0.0);
val(Counter.FF[2].k,100.0);
val(Counter.FF[2].RS1.Nor1.x[1],0.0);
val(Counter.FF[2].RS1.Nor1.x[1],100.0);
val(Counter.FF[2].RS1.Nor1.x[2],0.0);
val(Counter.FF[2].RS1.Nor1.x[2],100.0);
val(Counter.FF[2].RS1.Nor1.y,0.0);
val(Counter.FF[2].RS1.Nor1.y,100.0);
val(Counter.FF[2].RS1.Nor2.x[1],0.0);
val(Counter.FF[2].RS1.Nor2.x[1],100.0);
val(Counter.FF[2].RS1.Nor2.x[2],0.0);
val(Counter.FF[2].RS1.Nor2.x[2],100.0);
val(Counter.FF[2].RS1.Nor2.y,0.0);
val(Counter.FF[2].RS1.Nor2.y,100.0);
val(Counter.FF[2].RS1.s,0.0);
val(Counter.FF[2].RS1.s,100.0);
val(Counter.FF[2].RS1.r,0.0);
val(Counter.FF[2].RS1.r,100.0);
val(Counter.FF[2].RS1.q,0.0);
val(Counter.FF[2].RS1.q,100.0);
val(Counter.FF[2].RS1.qn,0.0);
val(Counter.FF[2].RS1.qn,100.0);
val(Counter.FF[2].RS1.TD1.x,0.0);
val(Counter.FF[2].RS1.TD1.x,100.0);
val(Counter.FF[2].RS1.TD1.y,0.0);
val(Counter.FF[2].RS1.TD1.y,100.0);
val(Counter.FF[2].RS2.Nor1.x[1],0.0);
val(Counter.FF[2].RS2.Nor1.x[1],100.0);
val(Counter.FF[2].RS2.Nor1.x[2],0.0);
val(Counter.FF[2].RS2.Nor1.x[2],100.0);
val(Counter.FF[2].RS2.Nor1.y,0.0);
val(Counter.FF[2].RS2.Nor1.y,100.0);
val(Counter.FF[2].RS2.Nor2.x[1],0.0);
val(Counter.FF[2].RS2.Nor2.x[1],100.0);
val(Counter.FF[2].RS2.Nor2.x[2],0.0);
val(Counter.FF[2].RS2.Nor2.x[2],100.0);
val(Counter.FF[2].RS2.Nor2.y,0.0);
val(Counter.FF[2].RS2.Nor2.y,100.0);
val(Counter.FF[2].RS2.s,0.0);
val(Counter.FF[2].RS2.s,100.0);
val(Counter.FF[2].RS2.r,0.0);
val(Counter.FF[2].RS2.r,100.0);
val(Counter.FF[2].RS2.q,0.0);
val(Counter.FF[2].RS2.q,100.0);
val(Counter.FF[2].RS2.qn,0.0);
val(Counter.FF[2].RS2.qn,100.0);
val(Counter.FF[2].RS2.TD1.x,0.0);
val(Counter.FF[2].RS2.TD1.x,100.0);
val(Counter.FF[2].RS2.TD1.y,0.0);
val(Counter.FF[2].RS2.TD1.y,100.0);
val(Counter.FF[2].And1.x[1],0.0);
val(Counter.FF[2].And1.x[1],100.0);
val(Counter.FF[2].And1.x[2],0.0);
val(Counter.FF[2].And1.x[2],100.0);
val(Counter.FF[2].And1.x[3],0.0);
val(Counter.FF[2].And1.x[3],100.0);
val(Counter.FF[2].And1.y,0.0);
val(Counter.FF[2].And1.y,100.0);
val(Counter.FF[2].And2.x[1],0.0);
val(Counter.FF[2].And2.x[1],100.0);
val(Counter.FF[2].And2.x[2],0.0);
val(Counter.FF[2].And2.x[2],100.0);
val(Counter.FF[2].And2.x[3],0.0);
val(Counter.FF[2].And2.x[3],100.0);
val(Counter.FF[2].And2.y,0.0);
val(Counter.FF[2].And2.y,100.0);
val(Counter.FF[2].And3.x[1],0.0);
val(Counter.FF[2].And3.x[1],100.0);
val(Counter.FF[2].And3.x[2],0.0);
val(Counter.FF[2].And3.x[2],100.0);
val(Counter.FF[2].And3.y,0.0);
val(Counter.FF[2].And3.y,100.0);
val(Counter.FF[2].And4.x[1],0.0);
val(Counter.FF[2].And4.x[1],100.0);
val(Counter.FF[2].And4.x[2],0.0);
val(Counter.FF[2].And4.x[2],100.0);
val(Counter.FF[2].And4.y,0.0);
val(Counter.FF[2].And4.y,100.0);
val(Counter.FF[2].Not1.x,0.0);
val(Counter.FF[2].Not1.x,100.0);
val(Counter.FF[2].Not1.y,0.0);
val(Counter.FF[2].Not1.y,100.0);
val(Counter.FF[3].j,0.0);
val(Counter.FF[3].j,100.0);
val(Counter.FF[3].q,0.0);
val(Counter.FF[3].q,100.0);
val(Counter.FF[3].qn,0.0);
val(Counter.FF[3].qn,100.0);
val(Counter.FF[3].clk,0.0);
val(Counter.FF[3].clk,100.0);
val(Counter.FF[3].k,0.0);
val(Counter.FF[3].k,100.0);
val(Counter.FF[3].RS1.Nor1.x[1],0.0);
val(Counter.FF[3].RS1.Nor1.x[1],100.0);
val(Counter.FF[3].RS1.Nor1.x[2],0.0);
val(Counter.FF[3].RS1.Nor1.x[2],100.0);
val(Counter.FF[3].RS1.Nor1.y,0.0);
val(Counter.FF[3].RS1.Nor1.y,100.0);
val(Counter.FF[3].RS1.Nor2.x[1],0.0);
val(Counter.FF[3].RS1.Nor2.x[1],100.0);
val(Counter.FF[3].RS1.Nor2.x[2],0.0);
val(Counter.FF[3].RS1.Nor2.x[2],100.0);
val(Counter.FF[3].RS1.Nor2.y,0.0);
val(Counter.FF[3].RS1.Nor2.y,100.0);
val(Counter.FF[3].RS1.s,0.0);
val(Counter.FF[3].RS1.s,100.0);
val(Counter.FF[3].RS1.r,0.0);
val(Counter.FF[3].RS1.r,100.0);
val(Counter.FF[3].RS1.q,0.0);
val(Counter.FF[3].RS1.q,100.0);
val(Counter.FF[3].RS1.qn,0.0);
val(Counter.FF[3].RS1.qn,100.0);
val(Counter.FF[3].RS1.TD1.x,0.0);
val(Counter.FF[3].RS1.TD1.x,100.0);
val(Counter.FF[3].RS1.TD1.y,0.0);
val(Counter.FF[3].RS1.TD1.y,100.0);
val(Counter.FF[3].RS2.Nor1.x[1],0.0);
val(Counter.FF[3].RS2.Nor1.x[1],100.0);
val(Counter.FF[3].RS2.Nor1.x[2],0.0);
val(Counter.FF[3].RS2.Nor1.x[2],100.0);
val(Counter.FF[3].RS2.Nor1.y,0.0);
val(Counter.FF[3].RS2.Nor1.y,100.0);
val(Counter.FF[3].RS2.Nor2.x[1],0.0);
val(Counter.FF[3].RS2.Nor2.x[1],100.0);
val(Counter.FF[3].RS2.Nor2.x[2],0.0);
val(Counter.FF[3].RS2.Nor2.x[2],100.0);
val(Counter.FF[3].RS2.Nor2.y,0.0);
val(Counter.FF[3].RS2.Nor2.y,100.0);
val(Counter.FF[3].RS2.s,0.0);
val(Counter.FF[3].RS2.s,100.0);
val(Counter.FF[3].RS2.r,0.0);
val(Counter.FF[3].RS2.r,100.0);
val(Counter.FF[3].RS2.q,0.0);
val(Counter.FF[3].RS2.q,100.0);
val(Counter.FF[3].RS2.qn,0.0);
val(Counter.FF[3].RS2.qn,100.0);
val(Counter.FF[3].RS2.TD1.x,0.0);
val(Counter.FF[3].RS2.TD1.x,100.0);
val(Counter.FF[3].RS2.TD1.y,0.0);
val(Counter.FF[3].RS2.TD1.y,100.0);
val(Counter.FF[3].And1.x[1],0.0);
val(Counter.FF[3].And1.x[1],100.0);
val(Counter.FF[3].And1.x[2],0.0);
val(Counter.FF[3].And1.x[2],100.0);
val(Counter.FF[3].And1.x[3],0.0);
val(Counter.FF[3].And1.x[3],100.0);
val(Counter.FF[3].And1.y,0.0);
val(Counter.FF[3].And1.y,100.0);
val(Counter.FF[3].And2.x[1],0.0);
val(Counter.FF[3].And2.x[1],100.0);
val(Counter.FF[3].And2.x[2],0.0);
val(Counter.FF[3].And2.x[2],100.0);
val(Counter.FF[3].And2.x[3],0.0);
val(Counter.FF[3].And2.x[3],100.0);
val(Counter.FF[3].And2.y,0.0);
val(Counter.FF[3].And2.y,100.0);
val(Counter.FF[3].And3.x[1],0.0);
val(Counter.FF[3].And3.x[1],100.0);
val(Counter.FF[3].And3.x[2],0.0);
val(Counter.FF[3].And3.x[2],100.0);
val(Counter.FF[3].And3.y,0.0);
val(Counter.FF[3].And3.y,100.0);
val(Counter.FF[3].And4.x[1],0.0);
val(Counter.FF[3].And4.x[1],100.0);
val(Counter.FF[3].And4.x[2],0.0);
val(Counter.FF[3].And4.x[2],100.0);
val(Counter.FF[3].And4.y,0.0);
val(Counter.FF[3].And4.y,100.0);
val(Counter.FF[3].Not1.x,0.0);
val(Counter.FF[3].Not1.x,100.0);
val(Counter.FF[3].Not1.y,0.0);
val(Counter.FF[3].Not1.y,100.0);
val(Counter.FF[4].j,0.0);
val(Counter.FF[4].j,100.0);
val(Counter.FF[4].q,0.0);
val(Counter.FF[4].q,100.0);
val(Counter.FF[4].qn,0.0);
val(Counter.FF[4].qn,100.0);
val(Counter.FF[4].clk,0.0);
val(Counter.FF[4].clk,100.0);
val(Counter.FF[4].k,0.0);
val(Counter.FF[4].k,100.0);
val(Counter.FF[4].RS1.Nor1.x[1],0.0);
val(Counter.FF[4].RS1.Nor1.x[1],100.0);
val(Counter.FF[4].RS1.Nor1.x[2],0.0);
val(Counter.FF[4].RS1.Nor1.x[2],100.0);
val(Counter.FF[4].RS1.Nor1.y,0.0);
val(Counter.FF[4].RS1.Nor1.y,100.0);
val(Counter.FF[4].RS1.Nor2.x[1],0.0);
val(Counter.FF[4].RS1.Nor2.x[1],100.0);
val(Counter.FF[4].RS1.Nor2.x[2],0.0);
val(Counter.FF[4].RS1.Nor2.x[2],100.0);
val(Counter.FF[4].RS1.Nor2.y,0.0);
val(Counter.FF[4].RS1.Nor2.y,100.0);
val(Counter.FF[4].RS1.s,0.0);
val(Counter.FF[4].RS1.s,100.0);
val(Counter.FF[4].RS1.r,0.0);
val(Counter.FF[4].RS1.r,100.0);
val(Counter.FF[4].RS1.q,0.0);
val(Counter.FF[4].RS1.q,100.0);
val(Counter.FF[4].RS1.qn,0.0);
val(Counter.FF[4].RS1.qn,100.0);
val(Counter.FF[4].RS1.TD1.x,0.0);
val(Counter.FF[4].RS1.TD1.x,100.0);
val(Counter.FF[4].RS1.TD1.y,0.0);
val(Counter.FF[4].RS1.TD1.y,100.0);
val(Counter.FF[4].RS2.Nor1.x[1],0.0);
val(Counter.FF[4].RS2.Nor1.x[1],100.0);
val(Counter.FF[4].RS2.Nor1.x[2],0.0);
val(Counter.FF[4].RS2.Nor1.x[2],100.0);
val(Counter.FF[4].RS2.Nor1.y,0.0);
val(Counter.FF[4].RS2.Nor1.y,100.0);
val(Counter.FF[4].RS2.Nor2.x[1],0.0);
val(Counter.FF[4].RS2.Nor2.x[1],100.0);
val(Counter.FF[4].RS2.Nor2.x[2],0.0);
val(Counter.FF[4].RS2.Nor2.x[2],100.0);
val(Counter.FF[4].RS2.Nor2.y,0.0);
val(Counter.FF[4].RS2.Nor2.y,100.0);
val(Counter.FF[4].RS2.s,0.0);
val(Counter.FF[4].RS2.s,100.0);
val(Counter.FF[4].RS2.r,0.0);
val(Counter.FF[4].RS2.r,100.0);
val(Counter.FF[4].RS2.q,0.0);
val(Counter.FF[4].RS2.q,100.0);
val(Counter.FF[4].RS2.qn,0.0);
val(Counter.FF[4].RS2.qn,100.0);
val(Counter.FF[4].RS2.TD1.x,0.0);
val(Counter.FF[4].RS2.TD1.x,100.0);
val(Counter.FF[4].RS2.TD1.y,0.0);
val(Counter.FF[4].RS2.TD1.y,100.0);
val(Counter.FF[4].And1.x[1],0.0);
val(Counter.FF[4].And1.x[1],100.0);
val(Counter.FF[4].And1.x[2],0.0);
val(Counter.FF[4].And1.x[2],100.0);
val(Counter.FF[4].And1.x[3],0.0);
val(Counter.FF[4].And1.x[3],100.0);
val(Counter.FF[4].And1.y,0.0);
val(Counter.FF[4].And1.y,100.0);
val(Counter.FF[4].And2.x[1],0.0);
val(Counter.FF[4].And2.x[1],100.0);
val(Counter.FF[4].And2.x[2],0.0);
val(Counter.FF[4].And2.x[2],100.0);
val(Counter.FF[4].And2.x[3],0.0);
val(Counter.FF[4].And2.x[3],100.0);
val(Counter.FF[4].And2.y,0.0);
val(Counter.FF[4].And2.y,100.0);
val(Counter.FF[4].And3.x[1],0.0);
val(Counter.FF[4].And3.x[1],100.0);
val(Counter.FF[4].And3.x[2],0.0);
val(Counter.FF[4].And3.x[2],100.0);
val(Counter.FF[4].And3.y,0.0);
val(Counter.FF[4].And3.y,100.0);
val(Counter.FF[4].And4.x[1],0.0);
val(Counter.FF[4].And4.x[1],100.0);
val(Counter.FF[4].And4.x[2],0.0);
val(Counter.FF[4].And4.x[2],100.0);
val(Counter.FF[4].And4.y,0.0);
val(Counter.FF[4].And4.y,100.0);
val(Counter.FF[4].Not1.x,0.0);
val(Counter.FF[4].Not1.x,100.0);
val(Counter.FF[4].Not1.y,0.0);
val(Counter.FF[4].Not1.y,100.0);
val(Counter.q[1],0.0);
val(Counter.q[1],100.0);
val(Counter.q[2],0.0);
val(Counter.q[2],100.0);
val(Counter.q[3],0.0);
val(Counter.q[3],100.0);
val(Counter.q[4],0.0);
val(Counter.q[4],100.0);
val(Q0.x[1],0.0);
val(Q0.x[1],100.0);
val(Q0.y[1],0.0);
val(Q0.y[1],100.0);
val(Q1.x[1],0.0);
val(Q1.x[1],100.0);
val(Q1.y[1],0.0);
val(Q1.y[1],100.0);
val(Q2.x[1],0.0);
val(Q2.x[1],100.0);
val(Q2.y[1],0.0);
val(Q2.y[1],100.0);
val(Q3.x[1],0.0);
val(Q3.x[1],100.0);
val(Q3.y[1],0.0);
val(Q3.y[1],100.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Digital.Examples.Counter_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 100.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Digital.Examples.Counter', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat'",
//     messages = ""
// end SimulationResult;
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 0.0
// 1.0
// 3.0
// 4.0
// 0.0
// 1.0
// 3.0
// 3.0
// 0.0
// 0.0
// 3.0
// 3.0
// 0.0
// 0.0
// endResult
