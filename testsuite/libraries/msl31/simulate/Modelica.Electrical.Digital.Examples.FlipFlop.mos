// name:     Modelica.Electrical.Digital.Examples.FlipFlop
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Digital.Examples.FlipFlop_* Modelica.Electrical.Digital.Examples.FlipFlop Modelica.Electrical.Digital.Examples.FlipFlop.exe Modelica.Electrical.Digital.Examples.FlipFlop.cpp Modelica.Electrical.Digital.Examples.FlipFlop.makefile Modelica.Electrical.Digital.Examples.FlipFlop.libs Modelica.Electrical.Digital.Examples.FlipFlop.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Digital.Examples.FlipFlop,stopTime=250.0);
val(FF.j,0.0);
val(FF.j,250.0);
val(FF.q,0.0);
val(FF.q,250.0);
val(FF.qn,0.0);
val(FF.qn,250.0);
val(FF.clk,0.0);
val(FF.clk,250.0);
val(FF.k,0.0);
val(FF.k,250.0);
val(FF.RS1.Nor1.x[1],0.0);
val(FF.RS1.Nor1.x[1],250.0);
val(FF.RS1.Nor1.x[2],0.0);
val(FF.RS1.Nor1.x[2],250.0);
val(FF.RS1.Nor1.y,0.0);
val(FF.RS1.Nor1.y,250.0);
val(FF.RS1.Nor2.x[1],0.0);
val(FF.RS1.Nor2.x[1],250.0);
val(FF.RS1.Nor2.x[2],0.0);
val(FF.RS1.Nor2.x[2],250.0);
val(FF.RS1.Nor2.y,0.0);
val(FF.RS1.Nor2.y,250.0);
val(FF.RS1.s,0.0);
val(FF.RS1.s,250.0);
val(FF.RS1.r,0.0);
val(FF.RS1.r,250.0);
val(FF.RS1.q,0.0);
val(FF.RS1.q,250.0);
val(FF.RS1.qn,0.0);
val(FF.RS1.qn,250.0);
val(FF.RS1.TD1.x,0.0);
val(FF.RS1.TD1.x,250.0);
val(FF.RS1.TD1.y,0.0);
val(FF.RS1.TD1.y,250.0);
val(FF.RS2.Nor1.x[1],0.0);
val(FF.RS2.Nor1.x[1],250.0);
val(FF.RS2.Nor1.x[2],0.0);
val(FF.RS2.Nor1.x[2],250.0);
val(FF.RS2.Nor1.y,0.0);
val(FF.RS2.Nor1.y,250.0);
val(FF.RS2.Nor2.x[1],0.0);
val(FF.RS2.Nor2.x[1],250.0);
val(FF.RS2.Nor2.x[2],0.0);
val(FF.RS2.Nor2.x[2],250.0);
val(FF.RS2.Nor2.y,0.0);
val(FF.RS2.Nor2.y,250.0);
val(FF.RS2.s,0.0);
val(FF.RS2.s,250.0);
val(FF.RS2.r,0.0);
val(FF.RS2.r,250.0);
val(FF.RS2.q,0.0);
val(FF.RS2.q,250.0);
val(FF.RS2.qn,0.0);
val(FF.RS2.qn,250.0);
val(FF.RS2.TD1.x,0.0);
val(FF.RS2.TD1.x,250.0);
val(FF.RS2.TD1.y,0.0);
val(FF.RS2.TD1.y,250.0);
val(FF.And1.x[1],0.0);
val(FF.And1.x[1],250.0);
val(FF.And1.x[2],0.0);
val(FF.And1.x[2],250.0);
val(FF.And1.x[3],0.0);
val(FF.And1.x[3],250.0);
val(FF.And1.y,0.0);
val(FF.And1.y,250.0);
val(FF.And2.x[1],0.0);
val(FF.And2.x[1],250.0);
val(FF.And2.x[2],0.0);
val(FF.And2.x[2],250.0);
val(FF.And2.x[3],0.0);
val(FF.And2.x[3],250.0);
val(FF.And2.y,0.0);
val(FF.And2.y,250.0);
val(FF.And3.x[1],0.0);
val(FF.And3.x[1],250.0);
val(FF.And3.x[2],0.0);
val(FF.And3.x[2],250.0);
val(FF.And3.y,0.0);
val(FF.And3.y,250.0);
val(FF.And4.x[1],0.0);
val(FF.And4.x[1],250.0);
val(FF.And4.x[2],0.0);
val(FF.And4.x[2],250.0);
val(FF.And4.y,0.0);
val(FF.And4.y,250.0);
val(FF.Not1.x,0.0);
val(FF.Not1.x,250.0);
val(FF.Not1.y,0.0);
val(FF.Not1.y,250.0);
val(CLK.y,0.0);
val(CLK.y,250.0);
val(J.y,0.0);
val(J.y,250.0);
val(K.y,0.0);
val(K.y,250.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Digital.Examples.FlipFlop_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 250.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Digital.Examples.FlipFlop', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false",
//     messages = ""
// end SimulationResult;
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// endResult
