// name:     Modelica.Electrical.Digital.Examples.FullAdder
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Digital.Examples.FullAdder_* Modelica.Electrical.Digital.Examples.FullAdder Modelica.Electrical.Digital.Examples.FullAdder.exe Modelica.Electrical.Digital.Examples.FullAdder.cpp Modelica.Electrical.Digital.Examples.FullAdder.makefile Modelica.Electrical.Digital.Examples.FullAdder.libs Modelica.Electrical.Digital.Examples.FullAdder.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Digital.Examples.FullAdder,stopTime=10.0);
val(Adder1.Adder2.b,0.0);
val(Adder1.Adder2.b,10.0);
val(Adder1.Adder2.s,0.0);
val(Adder1.Adder2.s,10.0);
val(Adder1.Adder2.a,0.0);
val(Adder1.Adder2.a,10.0);
val(Adder1.Adder2.c,0.0);
val(Adder1.Adder2.c,10.0);
val(Adder1.Adder2.AND.x[1],0.0);
val(Adder1.Adder2.AND.x[1],10.0);
val(Adder1.Adder2.AND.x[2],0.0);
val(Adder1.Adder2.AND.x[2],10.0);
val(Adder1.Adder2.AND.y,0.0);
val(Adder1.Adder2.AND.y,10.0);
val(Adder1.Adder2.AND.G1.x[1],0.0);
val(Adder1.Adder2.AND.G1.x[1],10.0);
val(Adder1.Adder2.AND.G1.x[2],0.0);
val(Adder1.Adder2.AND.G1.x[2],10.0);
val(Adder1.Adder2.AND.G1.y,0.0);
val(Adder1.Adder2.AND.G1.y,10.0);
val(Adder1.Adder2.AND.G2.x,0.0);
val(Adder1.Adder2.AND.G2.x,10.0);
val(Adder1.Adder2.AND.G2.y,0.0);
val(Adder1.Adder2.AND.G2.y,10.0);
val(Adder1.Adder2.XOR.x[1],0.0);
val(Adder1.Adder2.XOR.x[1],10.0);
val(Adder1.Adder2.XOR.x[2],0.0);
val(Adder1.Adder2.XOR.x[2],10.0);
val(Adder1.Adder2.XOR.y,0.0);
val(Adder1.Adder2.XOR.y,10.0);
val(Adder1.Adder2.XOR.G1.x[1],0.0);
val(Adder1.Adder2.XOR.G1.x[1],10.0);
val(Adder1.Adder2.XOR.G1.x[2],0.0);
val(Adder1.Adder2.XOR.G1.x[2],10.0);
val(Adder1.Adder2.XOR.G1.y,0.0);
val(Adder1.Adder2.XOR.G1.y,10.0);
val(Adder1.Adder2.XOR.G2.x,0.0);
val(Adder1.Adder2.XOR.G2.x,10.0);
val(Adder1.Adder2.XOR.G2.y,0.0);
val(Adder1.Adder2.XOR.G2.y,10.0);
val(Adder1.Adder1.b,0.0);
val(Adder1.Adder1.b,10.0);
val(Adder1.Adder1.s,0.0);
val(Adder1.Adder1.s,10.0);
val(Adder1.Adder1.a,0.0);
val(Adder1.Adder1.a,10.0);
val(Adder1.Adder1.c,0.0);
val(Adder1.Adder1.c,10.0);
val(Adder1.Adder1.AND.x[1],0.0);
val(Adder1.Adder1.AND.x[1],10.0);
val(Adder1.Adder1.AND.x[2],0.0);
val(Adder1.Adder1.AND.x[2],10.0);
val(Adder1.Adder1.AND.y,0.0);
val(Adder1.Adder1.AND.y,10.0);
val(Adder1.Adder1.AND.G1.x[1],0.0);
val(Adder1.Adder1.AND.G1.x[1],10.0);
val(Adder1.Adder1.AND.G1.x[2],0.0);
val(Adder1.Adder1.AND.G1.x[2],10.0);
val(Adder1.Adder1.AND.G1.y,0.0);
val(Adder1.Adder1.AND.G1.y,10.0);
val(Adder1.Adder1.AND.G2.x,0.0);
val(Adder1.Adder1.AND.G2.x,10.0);
val(Adder1.Adder1.AND.G2.y,0.0);
val(Adder1.Adder1.AND.G2.y,10.0);
val(Adder1.Adder1.XOR.x[1],0.0);
val(Adder1.Adder1.XOR.x[1],10.0);
val(Adder1.Adder1.XOR.x[2],0.0);
val(Adder1.Adder1.XOR.x[2],10.0);
val(Adder1.Adder1.XOR.y,0.0);
val(Adder1.Adder1.XOR.y,10.0);
val(Adder1.Adder1.XOR.G1.x[1],0.0);
val(Adder1.Adder1.XOR.G1.x[1],10.0);
val(Adder1.Adder1.XOR.G1.x[2],0.0);
val(Adder1.Adder1.XOR.G1.x[2],10.0);
val(Adder1.Adder1.XOR.G1.y,0.0);
val(Adder1.Adder1.XOR.G1.y,10.0);
val(Adder1.Adder1.XOR.G2.x,0.0);
val(Adder1.Adder1.XOR.G2.x,10.0);
val(Adder1.Adder1.XOR.G2.y,0.0);
val(Adder1.Adder1.XOR.G2.y,10.0);
val(Adder1.a,0.0);
val(Adder1.a,10.0);
val(Adder1.b,0.0);
val(Adder1.b,10.0);
val(Adder1.c_in,0.0);
val(Adder1.c_in,10.0);
val(Adder1.s,0.0);
val(Adder1.s,10.0);
val(Adder1.c_out,0.0);
val(Adder1.c_out,10.0);
val(Adder1.OR.x[1],0.0);
val(Adder1.OR.x[1],10.0);
val(Adder1.OR.x[2],0.0);
val(Adder1.OR.x[2],10.0);
val(Adder1.OR.y,0.0);
val(Adder1.OR.y,10.0);
val(s.x[1],0.0);
val(s.x[1],10.0);
val(s.y[1],0.0);
val(s.y[1],10.0);
val(c_out.x[1],0.0);
val(c_out.x[1],10.0);
val(c_out.y[1],0.0);
val(c_out.y[1],10.0);
val(Counter.q2,0.0);
val(Counter.q2,10.0);
val(Counter.count,0.0);
val(Counter.count,10.0);
val(Counter.FF1.q,0.0);
val(Counter.FF1.q,10.0);
val(Counter.FF1.qn,0.0);
val(Counter.FF1.qn,10.0);
val(Counter.FF1.clk,0.0);
val(Counter.FF1.clk,10.0);
val(Counter.FF1.RS1.Nor1.x[1],0.0);
val(Counter.FF1.RS1.Nor1.x[1],10.0);
val(Counter.FF1.RS1.Nor1.x[2],0.0);
val(Counter.FF1.RS1.Nor1.x[2],10.0);
val(Counter.FF1.RS1.Nor1.y,0.0);
val(Counter.FF1.RS1.Nor1.y,10.0);
val(Counter.FF1.RS1.Nor2.x[1],0.0);
val(Counter.FF1.RS1.Nor2.x[1],10.0);
val(Counter.FF1.RS1.Nor2.x[2],0.0);
val(Counter.FF1.RS1.Nor2.x[2],10.0);
val(Counter.FF1.RS1.Nor2.y,0.0);
val(Counter.FF1.RS1.Nor2.y,10.0);
val(Counter.FF1.RS1.s,0.0);
val(Counter.FF1.RS1.s,10.0);
val(Counter.FF1.RS1.r,0.0);
val(Counter.FF1.RS1.r,10.0);
val(Counter.FF1.RS1.q,0.0);
val(Counter.FF1.RS1.q,10.0);
val(Counter.FF1.RS1.qn,0.0);
val(Counter.FF1.RS1.qn,10.0);
val(Counter.FF1.RS1.TD1.x,0.0);
val(Counter.FF1.RS1.TD1.x,10.0);
val(Counter.FF1.RS1.TD1.y,0.0);
val(Counter.FF1.RS1.TD1.y,10.0);
val(Counter.FF1.RS2.Nor1.x[1],0.0);
val(Counter.FF1.RS2.Nor1.x[1],10.0);
val(Counter.FF1.RS2.Nor1.x[2],0.0);
val(Counter.FF1.RS2.Nor1.x[2],10.0);
val(Counter.FF1.RS2.Nor1.y,0.0);
val(Counter.FF1.RS2.Nor1.y,10.0);
val(Counter.FF1.RS2.Nor2.x[1],0.0);
val(Counter.FF1.RS2.Nor2.x[1],10.0);
val(Counter.FF1.RS2.Nor2.x[2],0.0);
val(Counter.FF1.RS2.Nor2.x[2],10.0);
val(Counter.FF1.RS2.Nor2.y,0.0);
val(Counter.FF1.RS2.Nor2.y,10.0);
val(Counter.FF1.RS2.s,0.0);
val(Counter.FF1.RS2.s,10.0);
val(Counter.FF1.RS2.r,0.0);
val(Counter.FF1.RS2.r,10.0);
val(Counter.FF1.RS2.q,0.0);
val(Counter.FF1.RS2.q,10.0);
val(Counter.FF1.RS2.qn,0.0);
val(Counter.FF1.RS2.qn,10.0);
val(Counter.FF1.RS2.TD1.x,0.0);
val(Counter.FF1.RS2.TD1.x,10.0);
val(Counter.FF1.RS2.TD1.y,0.0);
val(Counter.FF1.RS2.TD1.y,10.0);
val(Counter.FF1.And1.x[1],0.0);
val(Counter.FF1.And1.x[1],10.0);
val(Counter.FF1.And1.x[3],0.0);
val(Counter.FF1.And1.x[3],10.0);
val(Counter.FF1.And1.y,0.0);
val(Counter.FF1.And1.y,10.0);
val(Counter.FF1.And2.x[1],0.0);
val(Counter.FF1.And2.x[1],10.0);
val(Counter.FF1.And2.x[3],0.0);
val(Counter.FF1.And2.x[3],10.0);
val(Counter.FF1.And2.y,0.0);
val(Counter.FF1.And2.y,10.0);
val(Counter.FF1.And3.x[1],0.0);
val(Counter.FF1.And3.x[1],10.0);
val(Counter.FF1.And3.x[2],0.0);
val(Counter.FF1.And3.x[2],10.0);
val(Counter.FF1.And3.y,0.0);
val(Counter.FF1.And3.y,10.0);
val(Counter.FF1.And4.x[1],0.0);
val(Counter.FF1.And4.x[1],10.0);
val(Counter.FF1.And4.x[2],0.0);
val(Counter.FF1.And4.x[2],10.0);
val(Counter.FF1.And4.y,0.0);
val(Counter.FF1.And4.y,10.0);
val(Counter.FF1.Not1.x,0.0);
val(Counter.FF1.Not1.x,10.0);
val(Counter.FF1.Not1.y,0.0);
val(Counter.FF1.Not1.y,10.0);
val(Counter.FF2.q,0.0);
val(Counter.FF2.q,10.0);
val(Counter.FF2.qn,0.0);
val(Counter.FF2.qn,10.0);
val(Counter.FF2.clk,0.0);
val(Counter.FF2.clk,10.0);
val(Counter.FF2.RS1.Nor1.x[1],0.0);
val(Counter.FF2.RS1.Nor1.x[1],10.0);
val(Counter.FF2.RS1.Nor1.x[2],0.0);
val(Counter.FF2.RS1.Nor1.x[2],10.0);
val(Counter.FF2.RS1.Nor1.y,0.0);
val(Counter.FF2.RS1.Nor1.y,10.0);
val(Counter.FF2.RS1.Nor2.x[1],0.0);
val(Counter.FF2.RS1.Nor2.x[1],10.0);
val(Counter.FF2.RS1.Nor2.x[2],0.0);
val(Counter.FF2.RS1.Nor2.x[2],10.0);
val(Counter.FF2.RS1.Nor2.y,0.0);
val(Counter.FF2.RS1.Nor2.y,10.0);
val(Counter.FF2.RS1.s,0.0);
val(Counter.FF2.RS1.s,10.0);
val(Counter.FF2.RS1.r,0.0);
val(Counter.FF2.RS1.r,10.0);
val(Counter.FF2.RS1.q,0.0);
val(Counter.FF2.RS1.q,10.0);
val(Counter.FF2.RS1.qn,0.0);
val(Counter.FF2.RS1.qn,10.0);
val(Counter.FF2.RS1.TD1.x,0.0);
val(Counter.FF2.RS1.TD1.x,10.0);
val(Counter.FF2.RS1.TD1.y,0.0);
val(Counter.FF2.RS1.TD1.y,10.0);
val(Counter.FF2.RS2.Nor1.x[1],0.0);
val(Counter.FF2.RS2.Nor1.x[1],10.0);
val(Counter.FF2.RS2.Nor1.x[2],0.0);
val(Counter.FF2.RS2.Nor1.x[2],10.0);
val(Counter.FF2.RS2.Nor1.y,0.0);
val(Counter.FF2.RS2.Nor1.y,10.0);
val(Counter.FF2.RS2.Nor2.x[1],0.0);
val(Counter.FF2.RS2.Nor2.x[1],10.0);
val(Counter.FF2.RS2.Nor2.x[2],0.0);
val(Counter.FF2.RS2.Nor2.x[2],10.0);
val(Counter.FF2.RS2.Nor2.y,0.0);
val(Counter.FF2.RS2.Nor2.y,10.0);
val(Counter.FF2.RS2.s,0.0);
val(Counter.FF2.RS2.s,10.0);
val(Counter.FF2.RS2.r,0.0);
val(Counter.FF2.RS2.r,10.0);
val(Counter.FF2.RS2.q,0.0);
val(Counter.FF2.RS2.q,10.0);
val(Counter.FF2.RS2.qn,0.0);
val(Counter.FF2.RS2.qn,10.0);
val(Counter.FF2.RS2.TD1.x,0.0);
val(Counter.FF2.RS2.TD1.x,10.0);
val(Counter.FF2.RS2.TD1.y,0.0);
val(Counter.FF2.RS2.TD1.y,10.0);
val(Counter.FF2.And1.x[1],0.0);
val(Counter.FF2.And1.x[1],10.0);
val(Counter.FF2.And1.x[3],0.0);
val(Counter.FF2.And1.x[3],10.0);
val(Counter.FF2.And1.y,0.0);
val(Counter.FF2.And1.y,10.0);
val(Counter.FF2.And2.x[1],0.0);
val(Counter.FF2.And2.x[1],10.0);
val(Counter.FF2.And2.x[3],0.0);
val(Counter.FF2.And2.x[3],10.0);
val(Counter.FF2.And2.y,0.0);
val(Counter.FF2.And2.y,10.0);
val(Counter.FF2.And3.x[1],0.0);
val(Counter.FF2.And3.x[1],10.0);
val(Counter.FF2.And3.x[2],0.0);
val(Counter.FF2.And3.x[2],10.0);
val(Counter.FF2.And3.y,0.0);
val(Counter.FF2.And3.y,10.0);
val(Counter.FF2.And4.x[1],0.0);
val(Counter.FF2.And4.x[1],10.0);
val(Counter.FF2.And4.x[2],0.0);
val(Counter.FF2.And4.x[2],10.0);
val(Counter.FF2.And4.y,0.0);
val(Counter.FF2.And4.y,10.0);
val(Counter.FF2.Not1.x,0.0);
val(Counter.FF2.Not1.x,10.0);
val(Counter.FF2.Not1.y,0.0);
val(Counter.FF2.Not1.y,10.0);
val(Counter.FF3.q,0.0);
val(Counter.FF3.q,10.0);
val(Counter.FF3.qn,0.0);
val(Counter.FF3.qn,10.0);
val(Counter.FF3.clk,0.0);
val(Counter.FF3.clk,10.0);
val(Counter.FF3.RS1.Nor1.x[1],0.0);
val(Counter.FF3.RS1.Nor1.x[1],10.0);
val(Counter.FF3.RS1.Nor1.x[2],0.0);
val(Counter.FF3.RS1.Nor1.x[2],10.0);
val(Counter.FF3.RS1.Nor1.y,0.0);
val(Counter.FF3.RS1.Nor1.y,10.0);
val(Counter.FF3.RS1.Nor2.x[1],0.0);
val(Counter.FF3.RS1.Nor2.x[1],10.0);
val(Counter.FF3.RS1.Nor2.x[2],0.0);
val(Counter.FF3.RS1.Nor2.x[2],10.0);
val(Counter.FF3.RS1.Nor2.y,0.0);
val(Counter.FF3.RS1.Nor2.y,10.0);
val(Counter.FF3.RS1.s,0.0);
val(Counter.FF3.RS1.s,10.0);
val(Counter.FF3.RS1.r,0.0);
val(Counter.FF3.RS1.r,10.0);
val(Counter.FF3.RS1.q,0.0);
val(Counter.FF3.RS1.q,10.0);
val(Counter.FF3.RS1.qn,0.0);
val(Counter.FF3.RS1.qn,10.0);
val(Counter.FF3.RS1.TD1.x,0.0);
val(Counter.FF3.RS1.TD1.x,10.0);
val(Counter.FF3.RS1.TD1.y,0.0);
val(Counter.FF3.RS1.TD1.y,10.0);
val(Counter.FF3.RS2.Nor1.x[1],0.0);
val(Counter.FF3.RS2.Nor1.x[1],10.0);
val(Counter.FF3.RS2.Nor1.x[2],0.0);
val(Counter.FF3.RS2.Nor1.x[2],10.0);
val(Counter.FF3.RS2.Nor1.y,0.0);
val(Counter.FF3.RS2.Nor1.y,10.0);
val(Counter.FF3.RS2.Nor2.x[1],0.0);
val(Counter.FF3.RS2.Nor2.x[1],10.0);
val(Counter.FF3.RS2.Nor2.x[2],0.0);
val(Counter.FF3.RS2.Nor2.x[2],10.0);
val(Counter.FF3.RS2.Nor2.y,0.0);
val(Counter.FF3.RS2.Nor2.y,10.0);
val(Counter.FF3.RS2.s,0.0);
val(Counter.FF3.RS2.s,10.0);
val(Counter.FF3.RS2.r,0.0);
val(Counter.FF3.RS2.r,10.0);
val(Counter.FF3.RS2.q,0.0);
val(Counter.FF3.RS2.q,10.0);
val(Counter.FF3.RS2.qn,0.0);
val(Counter.FF3.RS2.qn,10.0);
val(Counter.FF3.RS2.TD1.x,0.0);
val(Counter.FF3.RS2.TD1.x,10.0);
val(Counter.FF3.RS2.TD1.y,0.0);
val(Counter.FF3.RS2.TD1.y,10.0);
val(Counter.FF3.And1.x[1],0.0);
val(Counter.FF3.And1.x[1],10.0);
val(Counter.FF3.And1.x[3],0.0);
val(Counter.FF3.And1.x[3],10.0);
val(Counter.FF3.And1.y,0.0);
val(Counter.FF3.And1.y,10.0);
val(Counter.FF3.And2.x[1],0.0);
val(Counter.FF3.And2.x[1],10.0);
val(Counter.FF3.And2.x[3],0.0);
val(Counter.FF3.And2.x[3],10.0);
val(Counter.FF3.And2.y,0.0);
val(Counter.FF3.And2.y,10.0);
val(Counter.FF3.And3.x[1],0.0);
val(Counter.FF3.And3.x[1],10.0);
val(Counter.FF3.And3.x[2],0.0);
val(Counter.FF3.And3.x[2],10.0);
val(Counter.FF3.And3.y,0.0);
val(Counter.FF3.And3.y,10.0);
val(Counter.FF3.And4.x[1],0.0);
val(Counter.FF3.And4.x[1],10.0);
val(Counter.FF3.And4.x[2],0.0);
val(Counter.FF3.And4.x[2],10.0);
val(Counter.FF3.And4.y,0.0);
val(Counter.FF3.And4.y,10.0);
val(Counter.FF3.Not1.x,0.0);
val(Counter.FF3.Not1.x,10.0);
val(Counter.FF3.Not1.y,0.0);
val(Counter.FF3.Not1.y,10.0);
val(Counter.q1,0.0);
val(Counter.q1,10.0);
val(Counter.q0,0.0);
val(Counter.q0,10.0);
val(CLK.y,0.0);
val(CLK.y,10.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Digital.Examples.FullAdder_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 10.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Digital.Examples.FullAdder', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false, cflags = ''",
//     messages = ""
// end SimulationResult;
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 3.0
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 3.0
// 3.0
// 1.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 1.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 1.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 1.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 1.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 1.0
// 4.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 3.0
// 1.0
// 4.0
// 0.5
// 1.0
// 1.0
// 3.0
// 0.5
// 0.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 3.0
// 4.0
// 4.0
// 3.0
// 3.0
// 4.0
// 3.0
// 3.0
// 4.0
// 4.0
// endResult
