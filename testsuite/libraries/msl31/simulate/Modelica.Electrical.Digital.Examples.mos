
//name:        Simulate Modelica.Electrical.Digital.Examples [version 3.1]
//keyword:     instantiating/check/simulate MSL 3.1 Modelica.Electrical.Digital.Examples
//status:      correct
//env: OPENMODELICALIBRARY=../../../../libraries/msl31/
//
// instantiate/check/simulate model example
//

loadModel(Modelica); getErrorString();

// Modelica.Electrical.Digital.Examples
instantiateModel(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Multiplexer);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.FlipFlop);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.HalfAdder);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.FullAdder);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Adder4);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Counter3);  getErrorString();


instantiateModel(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();
checkModel(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();
simulate(Modelica.Electrical.Digital.Examples.Counter);  getErrorString();

system("rm -f *.c *.dll *.log *.makefile *.cpp *.exe *.h *.libs *_init.txt *_res.plt");


// Result:
// true
// ""
// "class Modelica.Electrical.Digital.Examples.Multiplexer
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 20.0 "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D0.t[1] = 50.0 "vector of corresponding time points";
//   parameter Real D0.t[2] = 100.0 "vector of corresponding time points";
//   parameter Real D0.t[3] = 145.0 "vector of corresponding time points";
//   parameter Real D0.t[4] = 200.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D0.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D0.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D1.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D1.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D1.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D1.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D1.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D1.y;
//   parameter Real MUX.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d1;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d3;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.a0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.a1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.d;
//   parameter Integer MUX.Or1.n(min = 2) = 4 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[3] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.x[4] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Or1.auxiliary[4](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And3.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And3.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer MUX.And4.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.And4.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') MUX.Not2.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D2.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D2.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D2.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D2.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D2.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real D3.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real D3.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real D3.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real D3.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer D3.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') D3.y;
//   parameter Real FF.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.k;
//   parameter Real FF.RS1.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y0 = FF.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x_delayed;
//   parameter Real FF.RS2.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y0 = FF.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x_delayed;
//   parameter Integer FF.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
// equation
//   MUX.Or1.auxiliary[1] = MUX.Or1.x[1];
//   MUX.Or1.auxiliary[2] = D.Tables.OrTable[MUX.Or1.auxiliary[1],MUX.Or1.x[2]];
//   MUX.Or1.auxiliary[3] = D.Tables.OrTable[MUX.Or1.auxiliary[2],MUX.Or1.x[3]];
//   MUX.Or1.auxiliary[4] = D.Tables.OrTable[MUX.Or1.auxiliary[3],MUX.Or1.x[4]];
//   MUX.Or1.y = pre(MUX.Or1.auxiliary[4]);
//   MUX.And1.auxiliary[1] = MUX.And1.x[1];
//   MUX.And1.auxiliary[2] = D.Tables.AndTable[MUX.And1.auxiliary[1],MUX.And1.x[2]];
//   MUX.And1.auxiliary[3] = D.Tables.AndTable[MUX.And1.auxiliary[2],MUX.And1.x[3]];
//   MUX.And1.y = pre(MUX.And1.auxiliary[3]);
//   MUX.And2.auxiliary[1] = MUX.And2.x[1];
//   MUX.And2.auxiliary[2] = D.Tables.AndTable[MUX.And2.auxiliary[1],MUX.And2.x[2]];
//   MUX.And2.auxiliary[3] = D.Tables.AndTable[MUX.And2.auxiliary[2],MUX.And2.x[3]];
//   MUX.And2.y = pre(MUX.And2.auxiliary[3]);
//   MUX.And3.auxiliary[1] = MUX.And3.x[1];
//   MUX.And3.auxiliary[2] = D.Tables.AndTable[MUX.And3.auxiliary[1],MUX.And3.x[2]];
//   MUX.And3.auxiliary[3] = D.Tables.AndTable[MUX.And3.auxiliary[2],MUX.And3.x[3]];
//   MUX.And3.y = pre(MUX.And3.auxiliary[3]);
//   MUX.And4.auxiliary[1] = MUX.And4.x[1];
//   MUX.And4.auxiliary[2] = D.Tables.AndTable[MUX.And4.auxiliary[1],MUX.And4.x[2]];
//   MUX.And4.auxiliary[3] = D.Tables.AndTable[MUX.And4.auxiliary[2],MUX.And4.x[3]];
//   MUX.And4.y = pre(MUX.And4.auxiliary[3]);
//   MUX.Not1.auxiliary = D.Tables.NotTable[MUX.Not1.x];
//   MUX.Not1.y = pre(MUX.Not1.auxiliary);
//   MUX.Not2.auxiliary = D.Tables.NotTable[MUX.Not2.x];
//   MUX.Not2.y = pre(MUX.Not2.auxiliary);
//   FF.RS1.Nor1.auxiliary[1] = FF.RS1.Nor1.x[1];
//   FF.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor1.auxiliary[1],FF.RS1.Nor1.x[2]];
//   FF.RS1.Nor1.y = pre(D.Tables.NotTable[FF.RS1.Nor1.auxiliary[2]]);
//   FF.RS1.Nor2.auxiliary[1] = FF.RS1.Nor2.x[1];
//   FF.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor2.auxiliary[1],FF.RS1.Nor2.x[2]];
//   FF.RS1.Nor2.y = pre(D.Tables.NotTable[FF.RS1.Nor2.auxiliary[2]]);
//   FF.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(FF.RS1.TD1.x),FF.RS1.TD1.delayTime,FF.RS1.TD1.delayTime)));
//   FF.RS1.TD1.y = if FF.RS1.TD1.delayTime > 0.0 then if time >= FF.RS1.TD1.delayTime then FF.RS1.TD1.x_delayed else FF.RS1.TD1.y0 else pre(FF.RS1.TD1.x);
//   FF.RS2.Nor1.auxiliary[1] = FF.RS2.Nor1.x[1];
//   FF.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor1.auxiliary[1],FF.RS2.Nor1.x[2]];
//   FF.RS2.Nor1.y = pre(D.Tables.NotTable[FF.RS2.Nor1.auxiliary[2]]);
//   FF.RS2.Nor2.auxiliary[1] = FF.RS2.Nor2.x[1];
//   FF.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor2.auxiliary[1],FF.RS2.Nor2.x[2]];
//   FF.RS2.Nor2.y = pre(D.Tables.NotTable[FF.RS2.Nor2.auxiliary[2]]);
//   FF.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(FF.RS2.TD1.x),FF.RS2.TD1.delayTime,FF.RS2.TD1.delayTime)));
//   FF.RS2.TD1.y = if FF.RS2.TD1.delayTime > 0.0 then if time >= FF.RS2.TD1.delayTime then FF.RS2.TD1.x_delayed else FF.RS2.TD1.y0 else pre(FF.RS2.TD1.x);
//   FF.And1.auxiliary[1] = FF.And1.x[1];
//   FF.And1.auxiliary[2] = D.Tables.AndTable[FF.And1.auxiliary[1],FF.And1.x[2]];
//   FF.And1.auxiliary[3] = D.Tables.AndTable[FF.And1.auxiliary[2],FF.And1.x[3]];
//   FF.And1.y = pre(FF.And1.auxiliary[3]);
//   FF.And2.auxiliary[1] = FF.And2.x[1];
//   FF.And2.auxiliary[2] = D.Tables.AndTable[FF.And2.auxiliary[1],FF.And2.x[2]];
//   FF.And2.auxiliary[3] = D.Tables.AndTable[FF.And2.auxiliary[2],FF.And2.x[3]];
//   FF.And2.y = pre(FF.And2.auxiliary[3]);
//   FF.And3.auxiliary[1] = FF.And3.x[1];
//   FF.And3.auxiliary[2] = D.Tables.AndTable[FF.And3.auxiliary[1],FF.And3.x[2]];
//   FF.And3.y = pre(FF.And3.auxiliary[2]);
//   FF.And4.auxiliary[1] = FF.And4.x[1];
//   FF.And4.auxiliary[2] = D.Tables.AndTable[FF.And4.auxiliary[1],FF.And4.x[2]];
//   FF.And4.y = pre(FF.And4.auxiliary[2]);
//   FF.Not1.auxiliary = D.Tables.NotTable[FF.Not1.x];
//   FF.Not1.y = pre(FF.Not1.auxiliary);
//   FF.q = MUX.a1;
//   D3.y = MUX.d3;
//   D2.y = MUX.d2;
//   D1.y = MUX.d1;
//   D0.y = MUX.d0;
//   CLK.y = FF.clk;
//   CLK.y = MUX.a0;
//   Enable.y = FF.j;
//   Enable.y = FF.k;
//   FF.And2.x[1] = FF.RS1.q;
//   FF.And2.x[1] = FF.qn;
//   FF.And1.x[3] = FF.RS1.qn;
//   FF.And1.x[3] = FF.q;
//   FF.And1.x[2] = FF.j;
//   FF.And3.x[1] = FF.And4.x[1];
//   FF.And3.x[1] = FF.Not1.y;
//   FF.And1.x[1] = FF.And2.x[3];
//   FF.And1.x[1] = FF.Not1.x;
//   FF.And1.x[1] = FF.clk;
//   FF.And3.x[2] = FF.RS2.q;
//   FF.And4.x[2] = FF.RS2.qn;
//   FF.And3.y = FF.RS1.s;
//   FF.And4.y = FF.RS1.r;
//   FF.And2.x[2] = FF.k;
//   FF.And1.y = FF.RS2.s;
//   FF.And2.y = FF.RS2.r;
//   FF.RS2.Nor1.y = FF.RS2.TD1.x;
//   FF.RS2.Nor1.y = FF.RS2.qn;
//   FF.RS2.Nor2.x[2] = FF.RS2.TD1.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.Nor2.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.q;
//   FF.RS2.Nor2.x[1] = FF.RS2.r;
//   FF.RS2.Nor1.x[2] = FF.RS2.s;
//   FF.RS1.Nor1.y = FF.RS1.TD1.x;
//   FF.RS1.Nor1.y = FF.RS1.qn;
//   FF.RS1.Nor2.x[2] = FF.RS1.TD1.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.Nor2.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.q;
//   FF.RS1.Nor2.x[1] = FF.RS1.r;
//   FF.RS1.Nor1.x[2] = FF.RS1.s;
//   MUX.And3.x[1] = MUX.And4.x[1];
//   MUX.And3.x[1] = MUX.Not2.x;
//   MUX.And3.x[1] = MUX.a1;
//   MUX.And2.x[3] = MUX.And4.x[3];
//   MUX.And2.x[3] = MUX.Not1.x;
//   MUX.And2.x[3] = MUX.a0;
//   MUX.And1.x[1] = MUX.And2.x[1];
//   MUX.And1.x[1] = MUX.Not2.y;
//   MUX.And1.x[3] = MUX.And3.x[3];
//   MUX.And1.x[3] = MUX.Not1.y;
//   MUX.Or1.y = MUX.d;
//   MUX.And1.y = MUX.Or1.x[4];
//   MUX.And2.y = MUX.Or1.x[3];
//   MUX.And3.y = MUX.Or1.x[2];
//   MUX.And4.y = MUX.Or1.x[1];
//   MUX.And4.x[2] = MUX.d3;
//   MUX.And3.x[2] = MUX.d2;
//   MUX.And2.x[2] = MUX.d1;
//   MUX.And1.x[2] = MUX.d0;
// algorithm
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
//   if initial() then
//     assert(D0.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D0.n loop
//     end for;
//   end if;
//   D0.y := D0.y0;
//   for i in 1:D0.n loop
//     if time >= D0.t[i] then
//       D0.y := D0.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D1.n loop
//     end for;
//   end if;
//   D1.y := D1.y0;
//   for i in 1:D1.n loop
//     if time >= D1.t[i] then
//       D1.y := D1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D2.n loop
//     end for;
//   end if;
//   D2.y := D2.y0;
//   for i in 1:D2.n loop
//     if time >= D2.t[i] then
//       D2.y := D2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(D3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:D3.n loop
//     end for;
//   end if;
//   D3.y := D3.y0;
//   for i in 1:D3.n loop
//     if time >= D3.t[i] then
//       D3.y := D3.x[i];
//     end if;
//   end for;
//   Enable.y := Enable.x;
// end Modelica.Electrical.Digital.Examples.Multiplexer;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.Multiplexer completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.Multiplexer has 124 equation(s) and 124 variable(s).
// 72 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Multiplexer
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Multiplexer.exe Modelica.Electrical.Digital.Examples.Multiplexer.cpp Modelica.Electrical.Digital.Examples.Multiplexer_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Multiplexer_records.c

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1825: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1828: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1840: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1842: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1842: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1842: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1842: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1842: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1843: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1843: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1847: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1854: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1856: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1865: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1865: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1867: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1867: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1867: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1867: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1868: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1868: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1872: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1879: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1881: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1910: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1911: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1914: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1914: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1914: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1914: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1941: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1970: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:1999: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2028: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2294: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2294: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2295: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2295: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2296: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2296: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2297: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2297: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2478: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2481: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2500: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2507: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2509: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2525: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2532: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2534: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2555: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2564: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2567: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2568: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2609: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2638: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2667: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2696: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2822: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2822: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2822: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2822: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2825: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2826: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2826: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2826: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2826: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2829: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2829: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2829: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2829: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2830: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2830: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2830: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2830: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2833: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2833: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2833: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2833: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2838: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2841: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2847: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2847: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2847: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2847: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2850: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2850: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2850: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2850: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2851: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2851: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2855: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2860: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2862: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2871: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2871: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2873: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2873: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2873: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2873: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2874: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2874: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2878: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2883: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2885: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2893: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2894: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2897: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:2904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3164: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3177: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3177: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3177: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3177: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3178: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3178: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3178: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3178: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3181: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3181: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3181: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3181: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3181: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3182: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3182: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3186: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3193: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3195: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3203: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3203: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3203: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3203: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3207: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3207: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3211: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3218: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3220: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3228: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3228: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3228: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3228: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3237: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3242: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3246: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3249: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3249: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3249: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3249: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3250: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3250: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3250: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3250: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3253: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3253: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3253: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3253: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3254: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3254: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3254: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3254: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3563: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3573: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3573: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3573: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3573: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3577: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3577: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3577: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3577: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3578: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3578: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3580: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3580: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3580: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3580: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3580: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3581: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3581: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3585: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3592: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3594: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3602: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3602: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3602: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3602: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3610: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3617: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3619: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3627: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3627: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3627: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3627: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3648: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3648: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3648: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3648: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3653: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3653: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3653: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3653: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3654: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3654: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3654: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3654: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3694: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3723: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3752: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3781: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3800: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3800: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3801: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3801: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3802: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3802: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3803: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Multiplexer.cpp:3803: error: `OTHER_ASUB' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Multiplexer] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.FlipFlop
//   parameter Real FF.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.k;
//   parameter Real FF.RS1.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.y0 = FF.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS1.TD1.x_delayed;
//   parameter Real FF.RS2.delayTime(quantity = "Time", unit = "s") = FF.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q0 = FF.q0 "initial value of output";
//   parameter Integer FF.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real FF.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = FF.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.y0 = FF.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.RS2.TD1.x_delayed;
//   parameter Integer FF.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer FF.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') FF.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) = 10.0 "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real J.t[1] = 50.0 "vector of corresponding time points";
//   parameter Real J.t[2] = 100.0 "vector of corresponding time points";
//   parameter Real J.t[3] = 145.0 "vector of corresponding time points";
//   parameter Real J.t[4] = 200.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer J.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') J.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real K.t[1] = 22.0 "vector of corresponding time points";
//   parameter Real K.t[2] = 140.0 "vector of corresponding time points";
//   parameter Real K.t[3] = 150.0 "vector of corresponding time points";
//   parameter Real K.t[4] = 180.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer K.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') K.y;
// equation
//   FF.RS1.Nor1.auxiliary[1] = FF.RS1.Nor1.x[1];
//   FF.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor1.auxiliary[1],FF.RS1.Nor1.x[2]];
//   FF.RS1.Nor1.y = pre(D.Tables.NotTable[FF.RS1.Nor1.auxiliary[2]]);
//   FF.RS1.Nor2.auxiliary[1] = FF.RS1.Nor2.x[1];
//   FF.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS1.Nor2.auxiliary[1],FF.RS1.Nor2.x[2]];
//   FF.RS1.Nor2.y = pre(D.Tables.NotTable[FF.RS1.Nor2.auxiliary[2]]);
//   FF.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(FF.RS1.TD1.x),FF.RS1.TD1.delayTime,FF.RS1.TD1.delayTime)));
//   FF.RS1.TD1.y = if FF.RS1.TD1.delayTime > 0.0 then if time >= FF.RS1.TD1.delayTime then FF.RS1.TD1.x_delayed else FF.RS1.TD1.y0 else pre(FF.RS1.TD1.x);
//   FF.RS2.Nor1.auxiliary[1] = FF.RS2.Nor1.x[1];
//   FF.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor1.auxiliary[1],FF.RS2.Nor1.x[2]];
//   FF.RS2.Nor1.y = pre(D.Tables.NotTable[FF.RS2.Nor1.auxiliary[2]]);
//   FF.RS2.Nor2.auxiliary[1] = FF.RS2.Nor2.x[1];
//   FF.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[FF.RS2.Nor2.auxiliary[1],FF.RS2.Nor2.x[2]];
//   FF.RS2.Nor2.y = pre(D.Tables.NotTable[FF.RS2.Nor2.auxiliary[2]]);
//   FF.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(FF.RS2.TD1.x),FF.RS2.TD1.delayTime,FF.RS2.TD1.delayTime)));
//   FF.RS2.TD1.y = if FF.RS2.TD1.delayTime > 0.0 then if time >= FF.RS2.TD1.delayTime then FF.RS2.TD1.x_delayed else FF.RS2.TD1.y0 else pre(FF.RS2.TD1.x);
//   FF.And1.auxiliary[1] = FF.And1.x[1];
//   FF.And1.auxiliary[2] = D.Tables.AndTable[FF.And1.auxiliary[1],FF.And1.x[2]];
//   FF.And1.auxiliary[3] = D.Tables.AndTable[FF.And1.auxiliary[2],FF.And1.x[3]];
//   FF.And1.y = pre(FF.And1.auxiliary[3]);
//   FF.And2.auxiliary[1] = FF.And2.x[1];
//   FF.And2.auxiliary[2] = D.Tables.AndTable[FF.And2.auxiliary[1],FF.And2.x[2]];
//   FF.And2.auxiliary[3] = D.Tables.AndTable[FF.And2.auxiliary[2],FF.And2.x[3]];
//   FF.And2.y = pre(FF.And2.auxiliary[3]);
//   FF.And3.auxiliary[1] = FF.And3.x[1];
//   FF.And3.auxiliary[2] = D.Tables.AndTable[FF.And3.auxiliary[1],FF.And3.x[2]];
//   FF.And3.y = pre(FF.And3.auxiliary[2]);
//   FF.And4.auxiliary[1] = FF.And4.x[1];
//   FF.And4.auxiliary[2] = D.Tables.AndTable[FF.And4.auxiliary[1],FF.And4.x[2]];
//   FF.And4.y = pre(FF.And4.auxiliary[2]);
//   FF.Not1.auxiliary = D.Tables.NotTable[FF.Not1.x];
//   FF.Not1.y = pre(FF.Not1.auxiliary);
//   FF.k = K.y;
//   CLK.y = FF.clk;
//   FF.j = J.y;
//   FF.And2.x[1] = FF.RS1.q;
//   FF.And2.x[1] = FF.qn;
//   FF.And1.x[3] = FF.RS1.qn;
//   FF.And1.x[3] = FF.q;
//   FF.And1.x[2] = FF.j;
//   FF.And3.x[1] = FF.And4.x[1];
//   FF.And3.x[1] = FF.Not1.y;
//   FF.And1.x[1] = FF.And2.x[3];
//   FF.And1.x[1] = FF.Not1.x;
//   FF.And1.x[1] = FF.clk;
//   FF.And3.x[2] = FF.RS2.q;
//   FF.And4.x[2] = FF.RS2.qn;
//   FF.And3.y = FF.RS1.s;
//   FF.And4.y = FF.RS1.r;
//   FF.And2.x[2] = FF.k;
//   FF.And1.y = FF.RS2.s;
//   FF.And2.y = FF.RS2.r;
//   FF.RS2.Nor1.y = FF.RS2.TD1.x;
//   FF.RS2.Nor1.y = FF.RS2.qn;
//   FF.RS2.Nor2.x[2] = FF.RS2.TD1.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.Nor2.y;
//   FF.RS2.Nor1.x[1] = FF.RS2.q;
//   FF.RS2.Nor2.x[1] = FF.RS2.r;
//   FF.RS2.Nor1.x[2] = FF.RS2.s;
//   FF.RS1.Nor1.y = FF.RS1.TD1.x;
//   FF.RS1.Nor1.y = FF.RS1.qn;
//   FF.RS1.Nor2.x[2] = FF.RS1.TD1.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.Nor2.y;
//   FF.RS1.Nor1.x[1] = FF.RS1.q;
//   FF.RS1.Nor2.x[1] = FF.RS1.r;
//   FF.RS1.Nor1.x[2] = FF.RS1.s;
// algorithm
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
//   if initial() then
//     assert(J.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:J.n loop
//     end for;
//   end if;
//   J.y := J.y0;
//   for i in 1:J.n loop
//     if time >= J.t[i] then
//       J.y := J.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(K.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:K.n loop
//     end for;
//   end if;
//   K.y := K.y0;
//   for i in 1:K.n loop
//     if time >= K.t[i] then
//       K.y := K.x[i];
//     end if;
//   end for;
// end Modelica.Electrical.Digital.Examples.FlipFlop;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.FlipFlop completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.FlipFlop has 71 equation(s) and 71 variable(s).
// 42 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.FlipFlop
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.FlipFlop.exe Modelica.Electrical.Digital.Examples.FlipFlop.cpp Modelica.Electrical.Digital.Examples.FlipFlop_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.FlipFlop_records.c

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1267: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1270: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1277: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1277: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1277: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1277: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1280: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1282: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1284: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1285: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1285: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1289: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1296: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1298: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1306: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1307: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1307: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1309: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1309: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1309: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1309: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1310: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1310: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1314: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1321: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1323: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1331: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1331: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1331: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1331: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1532: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1532: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1533: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1533: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1674: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1677: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1677: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1677: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1677: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1677: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1680: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1680: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1680: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1680: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1683: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1683: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1683: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1683: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1684: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1684: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1684: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1684: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1687: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1689: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1691: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1691: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1691: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1691: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1691: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1692: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1692: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1696: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1703: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1705: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1717: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1717: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1721: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1728: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1730: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1738: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1738: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1738: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1738: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1777: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1806: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1921: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1921: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1921: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1921: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1921: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1922: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1922: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1922: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1924: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1924: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1924: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1924: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1925: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1925: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1929: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1934: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1936: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1944: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1944: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1944: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1944: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1945: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1945: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1947: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1947: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1947: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1947: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1948: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1948: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1952: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1957: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1959: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1967: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1971: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1971: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1971: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1971: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1972: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1972: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1972: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1972: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1975: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1975: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1975: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1975: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1978: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1978: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1978: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:1978: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2155: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2161: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2161: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2161: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2161: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2165: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2165: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2165: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2165: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2170: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2172: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2177: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2184: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2186: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2195: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2195: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2198: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2198: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2202: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2209: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2211: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2360: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2369: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2369: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2369: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2369: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2370: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2370: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2370: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2370: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2377: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2382: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2389: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2391: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2403: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2403: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2407: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2414: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2416: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2463: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2492: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2510: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2510: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2511: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FlipFlop.cpp:2511: error: `OTHER_ASUB' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.FlipFlop] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.HalfAdder
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.x[4] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real a.t[3] = 3.0 "vector of corresponding time points";
//   parameter Real a.t[4] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a.n = 4 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real b.t[1] = 2.0 "vector of corresponding time points";
//   parameter Real b.t[2] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b.y;
//   parameter Real Adder.delayTime = 0.3 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.c;
//   parameter Integer Adder.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.y "Connector of Digital output signal";
//   parameter Real Adder.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "rise inertial delay";
//   parameter Real Adder.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder.AND.G1.n(min = 2) = Adder.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.AND.tLH "rise inertial delay";
//   parameter Real Adder.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y0 = Adder.AND.y0 "initial value of output";
//   protected Integer Adder.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.y_auxiliary(start = Adder.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.AND.G2.x_old(start = Adder.AND.G2.y0, fixed = true);
//   protected Integer Adder.AND.G2.lh;
//   protected discrete Real Adder.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "rise inertial delay";
//   parameter Real Adder.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder.XOR.G1.n(min = 2) = Adder.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder.XOR.tLH "rise inertial delay";
//   parameter Real Adder.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y0 = Adder.XOR.y0 "initial value of output";
//   protected Integer Adder.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.y_auxiliary(start = Adder.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder.XOR.G2.x_old(start = Adder.XOR.G2.y0, fixed = true);
//   protected Integer Adder.XOR.G2.lh;
//   protected discrete Real Adder.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') s.x[1];
//   output Real s.y[1];
//   parameter Integer s.n(min = 1, start = 1) "signal width";
//   parameter Real s.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real s.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real s.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real s.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real s.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real s.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real s.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real s.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real s.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') c.x[1];
//   output Real c.y[1];
//   parameter Integer c.n(min = 1, start = 1) "signal width";
//   parameter Real c.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real c.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real c.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real c.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real c.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real c.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real c.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real c.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real c.value_m(start = 0.5) "value for digital m (Don't care)";
// equation
//   Adder.AND.G1.auxiliary[1] = Adder.AND.G1.x[1];
//   Adder.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder.AND.G1.auxiliary[1],Adder.AND.G1.x[2]];
//   Adder.AND.G1.y = pre(Adder.AND.G1.auxiliary[2]);
//   Adder.XOR.G1.auxiliary[1] = Adder.XOR.G1.x[1];
//   Adder.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder.XOR.G1.auxiliary[1],Adder.XOR.G1.x[2]];
//   Adder.XOR.G1.y = pre(Adder.XOR.G1.auxiliary[2]);
//   s.y[1] = if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then s.value_U else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then s.value_X else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then s.value_0 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then s.value_1 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then s.value_Z else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then s.value_W else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then s.value_L else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then s.value_H else s.value_m;
//   c.y[1] = if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then c.value_U else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then c.value_X else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then c.value_0 else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then c.value_1 else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then c.value_Z else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then c.value_W else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then c.value_L else if c.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then c.value_H else c.value_m;
//   Adder.c = c.x[1];
//   Adder.s = s.x[1];
//   Adder.a = a.y;
//   Adder.b = b.y;
//   Adder.AND.x[2] = Adder.XOR.x[2];
//   Adder.AND.x[2] = Adder.a;
//   Adder.AND.x[1] = Adder.XOR.x[1];
//   Adder.AND.x[1] = Adder.b;
//   Adder.XOR.y = Adder.s;
//   Adder.AND.y = Adder.c;
//   Adder.XOR.G2.y = Adder.XOR.y;
//   Adder.XOR.G1.y = Adder.XOR.G2.x;
//   Adder.XOR.G1.x[1] = Adder.XOR.x[1];
//   Adder.XOR.G1.x[2] = Adder.XOR.x[2];
//   Adder.AND.G1.y = Adder.AND.G2.x;
//   Adder.AND.G2.y = Adder.AND.y;
//   Adder.AND.G1.x[1] = Adder.AND.x[1];
//   Adder.AND.G1.x[2] = Adder.AND.x[2];
// algorithm
//   if initial() then
//     assert(a.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a.n loop
//     end for;
//   end if;
//   a.y := a.y0;
//   for i in 1:a.n loop
//     if time >= a.t[i] then
//       a.y := a.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b.n loop
//     end for;
//   end if;
//   b.y := b.y0;
//   for i in 1:b.n loop
//     if time >= b.t[i] then
//       b.y := b.x[i];
//     end if;
//   end for;
//   when {initial(),(Adder.AND.G2.tLH > 0.0 OR Adder.AND.G2.tHL > 0.0) AND change(Adder.AND.G2.x) AND  NOT initial()} then
//     Adder.AND.G2.x_old := if initial() OR pre(Adder.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder.AND.G2.y0 else pre(Adder.AND.G2.x);
//     Adder.AND.G2.lh := Adder.AND.G2.delayTable[Adder.AND.G2.x_old,Adder.AND.G2.x];
//     Adder.AND.G2.delayTime := if Adder.AND.G2.lh > 0 then Adder.AND.G2.tLH else if Adder.AND.G2.lh < 0 then Adder.AND.G2.tHL else 0.0;
//     Adder.AND.G2.t_next := time + Adder.AND.G2.delayTime;
//     if Adder.AND.G2.lh == 0 OR abs(Adder.AND.G2.delayTime) < 1e-60 then
//       Adder.AND.G2.y_auxiliary := Adder.AND.G2.x;
//     end if;
//   elsewhen time >= Adder.AND.G2.t_next then
//     Adder.AND.G2.y_auxiliary := Adder.AND.G2.x;
//   end when;
//   Adder.AND.G2.y := if Adder.AND.G2.tLH > 0.0 OR Adder.AND.G2.tHL > 0.0 then Adder.AND.G2.y_auxiliary else Adder.AND.G2.x;
//   when {initial(),(Adder.XOR.G2.tLH > 0.0 OR Adder.XOR.G2.tHL > 0.0) AND change(Adder.XOR.G2.x) AND  NOT initial()} then
//     Adder.XOR.G2.x_old := if initial() OR pre(Adder.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder.XOR.G2.y0 else pre(Adder.XOR.G2.x);
//     Adder.XOR.G2.lh := Adder.XOR.G2.delayTable[Adder.XOR.G2.x_old,Adder.XOR.G2.x];
//     Adder.XOR.G2.delayTime := if Adder.XOR.G2.lh > 0 then Adder.XOR.G2.tLH else if Adder.XOR.G2.lh < 0 then Adder.XOR.G2.tHL else 0.0;
//     Adder.XOR.G2.t_next := time + Adder.XOR.G2.delayTime;
//     if Adder.XOR.G2.lh == 0 OR abs(Adder.XOR.G2.delayTime) < 1e-60 then
//       Adder.XOR.G2.y_auxiliary := Adder.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder.XOR.G2.t_next then
//     Adder.XOR.G2.y_auxiliary := Adder.XOR.G2.x;
//   end when;
//   Adder.XOR.G2.y := if Adder.XOR.G2.tLH > 0.0 OR Adder.XOR.G2.tHL > 0.0 then Adder.XOR.G2.y_auxiliary else Adder.XOR.G2.x;
// end Modelica.Electrical.Digital.Examples.HalfAdder;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.HalfAdder completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.HalfAdder has 202 equation(s) and 202 variable(s).
// 182 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.HalfAdder
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.HalfAdder.exe Modelica.Electrical.Digital.Examples.HalfAdder.cpp Modelica.Electrical.Digital.Examples.HalfAdder_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.HalfAdder_records.c

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2200: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2229: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2337: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2339: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2346: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2348: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2447: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2447: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2449: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2486: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2488: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2504: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2504: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2506: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2543: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2545: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2646: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2646: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2647: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:2647: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3017: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3017: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3017: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3017: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3017: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3101: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3101: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3101: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3101: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3101: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3125: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3154: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3173: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3173: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3175: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3212: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3214: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3279: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3279: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3281: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3318: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3320: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3512: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3515: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3985: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3988: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:3988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionAliasEquations()':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4162: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4164: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4171: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4173: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4420: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4420: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4420: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4420: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4420: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4504: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4504: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4504: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4504: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4504: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4528: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4557: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4576: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4576: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4578: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4615: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4617: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4682: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4682: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4684: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4721: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4723: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4789: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4789: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4790: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.HalfAdder.cpp:4790: error: `OTHER_ASUB' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.HalfAdder] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.FullAdder
//   parameter Real Adder1.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.c;
//   parameter Integer Adder1.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.AND.G1.n(min = 2) = Adder1.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y0 = Adder1.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y_auxiliary(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x_old(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.AND.G2.lh;
//   protected discrete Real Adder1.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder2.XOR.G1.n(min = 2) = Adder1.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y0 = Adder1.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y_auxiliary(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x_old(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.XOR.G2.lh;
//   protected discrete Real Adder1.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.c;
//   parameter Integer Adder1.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.AND.G1.n(min = 2) = Adder1.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y0 = Adder1.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y_auxiliary(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x_old(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.AND.G2.lh;
//   protected discrete Real Adder1.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder1.XOR.G1.n(min = 2) = Adder1.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y0 = Adder1.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y_auxiliary(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x_old(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.XOR.G2.lh;
//   protected discrete Real Adder1.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_out;
//   parameter Integer Adder1.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') s.x[1];
//   output Real s.y[1];
//   parameter Integer s.n(min = 1, start = 1) "signal width";
//   parameter Real s.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real s.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real s.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real s.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real s.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real s.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real s.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real s.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real s.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') c_out.x[1];
//   output Real c_out.y[1];
//   parameter Integer c_out.n(min = 1, start = 1) "signal width";
//   parameter Real c_out.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real c_out.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real c_out.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real c_out.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real c_out.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real c_out.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real c_out.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real c_out.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real c_out.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF1.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.k;
//   parameter Real Counter.FF1.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y0 = Counter.FF1.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x_delayed;
//   parameter Real Counter.FF1.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y0 = Counter.FF1.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF1.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF2.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.k;
//   parameter Real Counter.FF2.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y0 = Counter.FF2.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x_delayed;
//   parameter Real Counter.FF2.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y0 = Counter.FF2.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF2.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF3.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.k;
//   parameter Real Counter.FF3.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y0 = Counter.FF3.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x_delayed;
//   parameter Real Counter.FF3.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y0 = Counter.FF3.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF3.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') = Modelica.Electrical.Digital.Interfaces.Logic.'1' "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real CLK.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real CLK.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real CLK.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') CLK.y "Connector of Digital output signal";
//   protected Real CLK.t_i(quantity = "Time", unit = "s", start = CLK.startTime) "Start time of current period";
//   protected Real CLK.t_width(quantity = "Time", unit = "s") = CLK.period * CLK.width / 100.0;
// equation
//   Adder1.Adder2.AND.G1.auxiliary[1] = Adder1.Adder2.AND.G1.x[1];
//   Adder1.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder2.AND.G1.auxiliary[1],Adder1.Adder2.AND.G1.x[2]];
//   Adder1.Adder2.AND.G1.y = pre(Adder1.Adder2.AND.G1.auxiliary[2]);
//   Adder1.Adder2.XOR.G1.auxiliary[1] = Adder1.Adder2.XOR.G1.x[1];
//   Adder1.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder2.XOR.G1.auxiliary[1],Adder1.Adder2.XOR.G1.x[2]];
//   Adder1.Adder2.XOR.G1.y = pre(Adder1.Adder2.XOR.G1.auxiliary[2]);
//   Adder1.Adder1.AND.G1.auxiliary[1] = Adder1.Adder1.AND.G1.x[1];
//   Adder1.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder1.AND.G1.auxiliary[1],Adder1.Adder1.AND.G1.x[2]];
//   Adder1.Adder1.AND.G1.y = pre(Adder1.Adder1.AND.G1.auxiliary[2]);
//   Adder1.Adder1.XOR.G1.auxiliary[1] = Adder1.Adder1.XOR.G1.x[1];
//   Adder1.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder1.XOR.G1.auxiliary[1],Adder1.Adder1.XOR.G1.x[2]];
//   Adder1.Adder1.XOR.G1.y = pre(Adder1.Adder1.XOR.G1.auxiliary[2]);
//   Adder1.OR.auxiliary[1] = Adder1.OR.x[1];
//   Adder1.OR.auxiliary[2] = D.Tables.OrTable[Adder1.OR.auxiliary[1],Adder1.OR.x[2]];
//   Adder1.OR.y = pre(Adder1.OR.auxiliary[2]);
//   s.y[1] = if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then s.value_U else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then s.value_X else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then s.value_0 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then s.value_1 else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then s.value_Z else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then s.value_W else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then s.value_L else if s.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then s.value_H else s.value_m;
//   c_out.y[1] = if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then c_out.value_U else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then c_out.value_X else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then c_out.value_0 else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then c_out.value_1 else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then c_out.value_Z else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then c_out.value_W else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then c_out.value_L else if c_out.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then c_out.value_H else c_out.value_m;
//   Counter.FF1.RS1.Nor1.auxiliary[1] = Counter.FF1.RS1.Nor1.x[1];
//   Counter.FF1.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor1.auxiliary[1],Counter.FF1.RS1.Nor1.x[2]];
//   Counter.FF1.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor1.auxiliary[2]]);
//   Counter.FF1.RS1.Nor2.auxiliary[1] = Counter.FF1.RS1.Nor2.x[1];
//   Counter.FF1.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor2.auxiliary[1],Counter.FF1.RS1.Nor2.x[2]];
//   Counter.FF1.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor2.auxiliary[2]]);
//   Counter.FF1.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF1.RS1.TD1.x),Counter.FF1.RS1.TD1.delayTime,Counter.FF1.RS1.TD1.delayTime)));
//   Counter.FF1.RS1.TD1.y = if Counter.FF1.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS1.TD1.delayTime then Counter.FF1.RS1.TD1.x_delayed else Counter.FF1.RS1.TD1.y0 else pre(Counter.FF1.RS1.TD1.x);
//   Counter.FF1.RS2.Nor1.auxiliary[1] = Counter.FF1.RS2.Nor1.x[1];
//   Counter.FF1.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor1.auxiliary[1],Counter.FF1.RS2.Nor1.x[2]];
//   Counter.FF1.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor1.auxiliary[2]]);
//   Counter.FF1.RS2.Nor2.auxiliary[1] = Counter.FF1.RS2.Nor2.x[1];
//   Counter.FF1.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor2.auxiliary[1],Counter.FF1.RS2.Nor2.x[2]];
//   Counter.FF1.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor2.auxiliary[2]]);
//   Counter.FF1.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF1.RS2.TD1.x),Counter.FF1.RS2.TD1.delayTime,Counter.FF1.RS2.TD1.delayTime)));
//   Counter.FF1.RS2.TD1.y = if Counter.FF1.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS2.TD1.delayTime then Counter.FF1.RS2.TD1.x_delayed else Counter.FF1.RS2.TD1.y0 else pre(Counter.FF1.RS2.TD1.x);
//   Counter.FF1.And1.auxiliary[1] = Counter.FF1.And1.x[1];
//   Counter.FF1.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[1],Counter.FF1.And1.x[2]];
//   Counter.FF1.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[2],Counter.FF1.And1.x[3]];
//   Counter.FF1.And1.y = pre(Counter.FF1.And1.auxiliary[3]);
//   Counter.FF1.And2.auxiliary[1] = Counter.FF1.And2.x[1];
//   Counter.FF1.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[1],Counter.FF1.And2.x[2]];
//   Counter.FF1.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[2],Counter.FF1.And2.x[3]];
//   Counter.FF1.And2.y = pre(Counter.FF1.And2.auxiliary[3]);
//   Counter.FF1.And3.auxiliary[1] = Counter.FF1.And3.x[1];
//   Counter.FF1.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And3.auxiliary[1],Counter.FF1.And3.x[2]];
//   Counter.FF1.And3.y = pre(Counter.FF1.And3.auxiliary[2]);
//   Counter.FF1.And4.auxiliary[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And4.auxiliary[1],Counter.FF1.And4.x[2]];
//   Counter.FF1.And4.y = pre(Counter.FF1.And4.auxiliary[2]);
//   Counter.FF1.Not1.auxiliary = D.Tables.NotTable[Counter.FF1.Not1.x];
//   Counter.FF1.Not1.y = pre(Counter.FF1.Not1.auxiliary);
//   Counter.FF2.RS1.Nor1.auxiliary[1] = Counter.FF2.RS1.Nor1.x[1];
//   Counter.FF2.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor1.auxiliary[1],Counter.FF2.RS1.Nor1.x[2]];
//   Counter.FF2.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor1.auxiliary[2]]);
//   Counter.FF2.RS1.Nor2.auxiliary[1] = Counter.FF2.RS1.Nor2.x[1];
//   Counter.FF2.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor2.auxiliary[1],Counter.FF2.RS1.Nor2.x[2]];
//   Counter.FF2.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor2.auxiliary[2]]);
//   Counter.FF2.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF2.RS1.TD1.x),Counter.FF2.RS1.TD1.delayTime,Counter.FF2.RS1.TD1.delayTime)));
//   Counter.FF2.RS1.TD1.y = if Counter.FF2.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS1.TD1.delayTime then Counter.FF2.RS1.TD1.x_delayed else Counter.FF2.RS1.TD1.y0 else pre(Counter.FF2.RS1.TD1.x);
//   Counter.FF2.RS2.Nor1.auxiliary[1] = Counter.FF2.RS2.Nor1.x[1];
//   Counter.FF2.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor1.auxiliary[1],Counter.FF2.RS2.Nor1.x[2]];
//   Counter.FF2.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor1.auxiliary[2]]);
//   Counter.FF2.RS2.Nor2.auxiliary[1] = Counter.FF2.RS2.Nor2.x[1];
//   Counter.FF2.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor2.auxiliary[1],Counter.FF2.RS2.Nor2.x[2]];
//   Counter.FF2.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor2.auxiliary[2]]);
//   Counter.FF2.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF2.RS2.TD1.x),Counter.FF2.RS2.TD1.delayTime,Counter.FF2.RS2.TD1.delayTime)));
//   Counter.FF2.RS2.TD1.y = if Counter.FF2.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS2.TD1.delayTime then Counter.FF2.RS2.TD1.x_delayed else Counter.FF2.RS2.TD1.y0 else pre(Counter.FF2.RS2.TD1.x);
//   Counter.FF2.And1.auxiliary[1] = Counter.FF2.And1.x[1];
//   Counter.FF2.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[1],Counter.FF2.And1.x[2]];
//   Counter.FF2.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[2],Counter.FF2.And1.x[3]];
//   Counter.FF2.And1.y = pre(Counter.FF2.And1.auxiliary[3]);
//   Counter.FF2.And2.auxiliary[1] = Counter.FF2.And2.x[1];
//   Counter.FF2.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[1],Counter.FF2.And2.x[2]];
//   Counter.FF2.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[2],Counter.FF2.And2.x[3]];
//   Counter.FF2.And2.y = pre(Counter.FF2.And2.auxiliary[3]);
//   Counter.FF2.And3.auxiliary[1] = Counter.FF2.And3.x[1];
//   Counter.FF2.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And3.auxiliary[1],Counter.FF2.And3.x[2]];
//   Counter.FF2.And3.y = pre(Counter.FF2.And3.auxiliary[2]);
//   Counter.FF2.And4.auxiliary[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And4.auxiliary[1],Counter.FF2.And4.x[2]];
//   Counter.FF2.And4.y = pre(Counter.FF2.And4.auxiliary[2]);
//   Counter.FF2.Not1.auxiliary = D.Tables.NotTable[Counter.FF2.Not1.x];
//   Counter.FF2.Not1.y = pre(Counter.FF2.Not1.auxiliary);
//   Counter.FF3.RS1.Nor1.auxiliary[1] = Counter.FF3.RS1.Nor1.x[1];
//   Counter.FF3.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor1.auxiliary[1],Counter.FF3.RS1.Nor1.x[2]];
//   Counter.FF3.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor1.auxiliary[2]]);
//   Counter.FF3.RS1.Nor2.auxiliary[1] = Counter.FF3.RS1.Nor2.x[1];
//   Counter.FF3.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor2.auxiliary[1],Counter.FF3.RS1.Nor2.x[2]];
//   Counter.FF3.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor2.auxiliary[2]]);
//   Counter.FF3.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF3.RS1.TD1.x),Counter.FF3.RS1.TD1.delayTime,Counter.FF3.RS1.TD1.delayTime)));
//   Counter.FF3.RS1.TD1.y = if Counter.FF3.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS1.TD1.delayTime then Counter.FF3.RS1.TD1.x_delayed else Counter.FF3.RS1.TD1.y0 else pre(Counter.FF3.RS1.TD1.x);
//   Counter.FF3.RS2.Nor1.auxiliary[1] = Counter.FF3.RS2.Nor1.x[1];
//   Counter.FF3.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor1.auxiliary[1],Counter.FF3.RS2.Nor1.x[2]];
//   Counter.FF3.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor1.auxiliary[2]]);
//   Counter.FF3.RS2.Nor2.auxiliary[1] = Counter.FF3.RS2.Nor2.x[1];
//   Counter.FF3.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor2.auxiliary[1],Counter.FF3.RS2.Nor2.x[2]];
//   Counter.FF3.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor2.auxiliary[2]]);
//   Counter.FF3.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF3.RS2.TD1.x),Counter.FF3.RS2.TD1.delayTime,Counter.FF3.RS2.TD1.delayTime)));
//   Counter.FF3.RS2.TD1.y = if Counter.FF3.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS2.TD1.delayTime then Counter.FF3.RS2.TD1.x_delayed else Counter.FF3.RS2.TD1.y0 else pre(Counter.FF3.RS2.TD1.x);
//   Counter.FF3.And1.auxiliary[1] = Counter.FF3.And1.x[1];
//   Counter.FF3.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[1],Counter.FF3.And1.x[2]];
//   Counter.FF3.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[2],Counter.FF3.And1.x[3]];
//   Counter.FF3.And1.y = pre(Counter.FF3.And1.auxiliary[3]);
//   Counter.FF3.And2.auxiliary[1] = Counter.FF3.And2.x[1];
//   Counter.FF3.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[1],Counter.FF3.And2.x[2]];
//   Counter.FF3.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[2],Counter.FF3.And2.x[3]];
//   Counter.FF3.And2.y = pre(Counter.FF3.And2.auxiliary[3]);
//   Counter.FF3.And3.auxiliary[1] = Counter.FF3.And3.x[1];
//   Counter.FF3.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And3.auxiliary[1],Counter.FF3.And3.x[2]];
//   Counter.FF3.And3.y = pre(Counter.FF3.And3.auxiliary[2]);
//   Counter.FF3.And4.auxiliary[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And4.auxiliary[1],Counter.FF3.And4.x[2]];
//   Counter.FF3.And4.y = pre(Counter.FF3.And4.auxiliary[2]);
//   Counter.FF3.Not1.auxiliary = D.Tables.NotTable[Counter.FF3.Not1.x];
//   Counter.FF3.Not1.y = pre(Counter.FF3.Not1.auxiliary);
//   Adder1.c_in = Counter.q0;
//   Adder1.b = Counter.q1;
//   Adder1.a = Counter.q2;
//   Counter.enable = Enable.y;
//   CLK.y = Counter.count;
//   Adder1.c_out = c_out.x[1];
//   Adder1.s = s.x[1];
//   Counter.FF2.q = Counter.FF3.clk;
//   Counter.FF2.q = Counter.q1;
//   Counter.FF1.q = Counter.FF2.clk;
//   Counter.FF1.q = Counter.q0;
//   Counter.FF3.q = Counter.q2;
//   Counter.FF1.j = Counter.FF1.k;
//   Counter.FF1.j = Counter.FF2.j;
//   Counter.FF1.j = Counter.FF2.k;
//   Counter.FF1.j = Counter.FF3.j;
//   Counter.FF1.j = Counter.FF3.k;
//   Counter.FF1.j = Counter.enable;
//   Counter.FF1.clk = Counter.count;
//   Counter.FF3.And2.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.And2.x[1] = Counter.FF3.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.RS1.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.q;
//   Counter.FF3.And1.x[2] = Counter.FF3.j;
//   Counter.FF3.And3.x[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And3.x[1] = Counter.FF3.Not1.y;
//   Counter.FF3.And1.x[1] = Counter.FF3.And2.x[3];
//   Counter.FF3.And1.x[1] = Counter.FF3.Not1.x;
//   Counter.FF3.And1.x[1] = Counter.FF3.clk;
//   Counter.FF3.And3.x[2] = Counter.FF3.RS2.q;
//   Counter.FF3.And4.x[2] = Counter.FF3.RS2.qn;
//   Counter.FF3.And3.y = Counter.FF3.RS1.s;
//   Counter.FF3.And4.y = Counter.FF3.RS1.r;
//   Counter.FF3.And2.x[2] = Counter.FF3.k;
//   Counter.FF3.And1.y = Counter.FF3.RS2.s;
//   Counter.FF3.And2.y = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.TD1.x;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.qn;
//   Counter.FF3.RS2.Nor2.x[2] = Counter.FF3.RS2.TD1.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.Nor2.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.q;
//   Counter.FF3.RS2.Nor2.x[1] = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.x[2] = Counter.FF3.RS2.s;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.TD1.x;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.qn;
//   Counter.FF3.RS1.Nor2.x[2] = Counter.FF3.RS1.TD1.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.Nor2.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.RS1.Nor2.x[1] = Counter.FF3.RS1.r;
//   Counter.FF3.RS1.Nor1.x[2] = Counter.FF3.RS1.s;
//   Counter.FF2.And2.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.And2.x[1] = Counter.FF2.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.RS1.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.q;
//   Counter.FF2.And1.x[2] = Counter.FF2.j;
//   Counter.FF2.And3.x[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And3.x[1] = Counter.FF2.Not1.y;
//   Counter.FF2.And1.x[1] = Counter.FF2.And2.x[3];
//   Counter.FF2.And1.x[1] = Counter.FF2.Not1.x;
//   Counter.FF2.And1.x[1] = Counter.FF2.clk;
//   Counter.FF2.And3.x[2] = Counter.FF2.RS2.q;
//   Counter.FF2.And4.x[2] = Counter.FF2.RS2.qn;
//   Counter.FF2.And3.y = Counter.FF2.RS1.s;
//   Counter.FF2.And4.y = Counter.FF2.RS1.r;
//   Counter.FF2.And2.x[2] = Counter.FF2.k;
//   Counter.FF2.And1.y = Counter.FF2.RS2.s;
//   Counter.FF2.And2.y = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.TD1.x;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.qn;
//   Counter.FF2.RS2.Nor2.x[2] = Counter.FF2.RS2.TD1.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.Nor2.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.q;
//   Counter.FF2.RS2.Nor2.x[1] = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.x[2] = Counter.FF2.RS2.s;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.TD1.x;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.qn;
//   Counter.FF2.RS1.Nor2.x[2] = Counter.FF2.RS1.TD1.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.Nor2.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.RS1.Nor2.x[1] = Counter.FF2.RS1.r;
//   Counter.FF2.RS1.Nor1.x[2] = Counter.FF2.RS1.s;
//   Counter.FF1.And2.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.And2.x[1] = Counter.FF1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.RS1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.q;
//   Counter.FF1.And1.x[2] = Counter.FF1.j;
//   Counter.FF1.And3.x[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And3.x[1] = Counter.FF1.Not1.y;
//   Counter.FF1.And1.x[1] = Counter.FF1.And2.x[3];
//   Counter.FF1.And1.x[1] = Counter.FF1.Not1.x;
//   Counter.FF1.And1.x[1] = Counter.FF1.clk;
//   Counter.FF1.And3.x[2] = Counter.FF1.RS2.q;
//   Counter.FF1.And4.x[2] = Counter.FF1.RS2.qn;
//   Counter.FF1.And3.y = Counter.FF1.RS1.s;
//   Counter.FF1.And4.y = Counter.FF1.RS1.r;
//   Counter.FF1.And2.x[2] = Counter.FF1.k;
//   Counter.FF1.And1.y = Counter.FF1.RS2.s;
//   Counter.FF1.And2.y = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.TD1.x;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.qn;
//   Counter.FF1.RS2.Nor2.x[2] = Counter.FF1.RS2.TD1.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.Nor2.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.q;
//   Counter.FF1.RS2.Nor2.x[1] = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.x[2] = Counter.FF1.RS2.s;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.TD1.x;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.qn;
//   Counter.FF1.RS1.Nor2.x[2] = Counter.FF1.RS1.TD1.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.Nor2.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.RS1.Nor2.x[1] = Counter.FF1.RS1.r;
//   Counter.FF1.RS1.Nor1.x[2] = Counter.FF1.RS1.s;
//   Adder1.Adder2.b = Adder1.c_in;
//   Adder1.Adder1.c = Adder1.OR.x[1];
//   Adder1.Adder1.s = Adder1.Adder2.a;
//   Adder1.Adder1.b = Adder1.b;
//   Adder1.Adder1.a = Adder1.a;
//   Adder1.Adder2.s = Adder1.s;
//   Adder1.Adder2.c = Adder1.OR.x[2];
//   Adder1.OR.y = Adder1.c_out;
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.a;
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.b;
//   Adder1.Adder1.XOR.y = Adder1.Adder1.s;
//   Adder1.Adder1.AND.y = Adder1.Adder1.c;
//   Adder1.Adder1.XOR.G2.y = Adder1.Adder1.XOR.y;
//   Adder1.Adder1.XOR.G1.y = Adder1.Adder1.XOR.G2.x;
//   Adder1.Adder1.XOR.G1.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.XOR.G1.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.G1.y = Adder1.Adder1.AND.G2.x;
//   Adder1.Adder1.AND.G2.y = Adder1.Adder1.AND.y;
//   Adder1.Adder1.AND.G1.x[1] = Adder1.Adder1.AND.x[1];
//   Adder1.Adder1.AND.G1.x[2] = Adder1.Adder1.AND.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.a;
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.b;
//   Adder1.Adder2.XOR.y = Adder1.Adder2.s;
//   Adder1.Adder2.AND.y = Adder1.Adder2.c;
//   Adder1.Adder2.XOR.G2.y = Adder1.Adder2.XOR.y;
//   Adder1.Adder2.XOR.G1.y = Adder1.Adder2.XOR.G2.x;
//   Adder1.Adder2.XOR.G1.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.XOR.G1.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.G1.y = Adder1.Adder2.AND.G2.x;
//   Adder1.Adder2.AND.G2.y = Adder1.Adder2.AND.y;
//   Adder1.Adder2.AND.G1.x[1] = Adder1.Adder2.AND.x[1];
//   Adder1.Adder2.AND.G1.x[2] = Adder1.Adder2.AND.x[2];
// algorithm
//   when {initial(),(Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0) AND change(Adder1.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.AND.G2.x_old := if initial() OR pre(Adder1.Adder2.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder2.AND.G2.y0 else pre(Adder1.Adder2.AND.G2.x);
//     Adder1.Adder2.AND.G2.lh := Adder1.Adder2.AND.G2.delayTable[Adder1.Adder2.AND.G2.x_old,Adder1.Adder2.AND.G2.x];
//     Adder1.Adder2.AND.G2.delayTime := if Adder1.Adder2.AND.G2.lh > 0 then Adder1.Adder2.AND.G2.tLH else if Adder1.Adder2.AND.G2.lh < 0 then Adder1.Adder2.AND.G2.tHL else 0.0;
//     Adder1.Adder2.AND.G2.t_next := time + Adder1.Adder2.AND.G2.delayTime;
//     if Adder1.Adder2.AND.G2.lh == 0 OR abs(Adder1.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.AND.G2.t_next then
//     Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//   end when;
//   Adder1.Adder2.AND.G2.y := if Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0 then Adder1.Adder2.AND.G2.y_auxiliary else Adder1.Adder2.AND.G2.x;
//   when {initial(),(Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0) AND change(Adder1.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.XOR.G2.x_old := if initial() OR pre(Adder1.Adder2.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder2.XOR.G2.y0 else pre(Adder1.Adder2.XOR.G2.x);
//     Adder1.Adder2.XOR.G2.lh := Adder1.Adder2.XOR.G2.delayTable[Adder1.Adder2.XOR.G2.x_old,Adder1.Adder2.XOR.G2.x];
//     Adder1.Adder2.XOR.G2.delayTime := if Adder1.Adder2.XOR.G2.lh > 0 then Adder1.Adder2.XOR.G2.tLH else if Adder1.Adder2.XOR.G2.lh < 0 then Adder1.Adder2.XOR.G2.tHL else 0.0;
//     Adder1.Adder2.XOR.G2.t_next := time + Adder1.Adder2.XOR.G2.delayTime;
//     if Adder1.Adder2.XOR.G2.lh == 0 OR abs(Adder1.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.XOR.G2.t_next then
//     Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//   end when;
//   Adder1.Adder2.XOR.G2.y := if Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0 then Adder1.Adder2.XOR.G2.y_auxiliary else Adder1.Adder2.XOR.G2.x;
//   when {initial(),(Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0) AND change(Adder1.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.AND.G2.x_old := if initial() OR pre(Adder1.Adder1.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder1.AND.G2.y0 else pre(Adder1.Adder1.AND.G2.x);
//     Adder1.Adder1.AND.G2.lh := Adder1.Adder1.AND.G2.delayTable[Adder1.Adder1.AND.G2.x_old,Adder1.Adder1.AND.G2.x];
//     Adder1.Adder1.AND.G2.delayTime := if Adder1.Adder1.AND.G2.lh > 0 then Adder1.Adder1.AND.G2.tLH else if Adder1.Adder1.AND.G2.lh < 0 then Adder1.Adder1.AND.G2.tHL else 0.0;
//     Adder1.Adder1.AND.G2.t_next := time + Adder1.Adder1.AND.G2.delayTime;
//     if Adder1.Adder1.AND.G2.lh == 0 OR abs(Adder1.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.AND.G2.t_next then
//     Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//   end when;
//   Adder1.Adder1.AND.G2.y := if Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0 then Adder1.Adder1.AND.G2.y_auxiliary else Adder1.Adder1.AND.G2.x;
//   when {initial(),(Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0) AND change(Adder1.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.XOR.G2.x_old := if initial() OR pre(Adder1.Adder1.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder1.XOR.G2.y0 else pre(Adder1.Adder1.XOR.G2.x);
//     Adder1.Adder1.XOR.G2.lh := Adder1.Adder1.XOR.G2.delayTable[Adder1.Adder1.XOR.G2.x_old,Adder1.Adder1.XOR.G2.x];
//     Adder1.Adder1.XOR.G2.delayTime := if Adder1.Adder1.XOR.G2.lh > 0 then Adder1.Adder1.XOR.G2.tLH else if Adder1.Adder1.XOR.G2.lh < 0 then Adder1.Adder1.XOR.G2.tHL else 0.0;
//     Adder1.Adder1.XOR.G2.t_next := time + Adder1.Adder1.XOR.G2.delayTime;
//     if Adder1.Adder1.XOR.G2.lh == 0 OR abs(Adder1.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.XOR.G2.t_next then
//     Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//   end when;
//   Adder1.Adder1.XOR.G2.y := if Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0 then Adder1.Adder1.XOR.G2.y_auxiliary else Adder1.Adder1.XOR.G2.x;
//   Enable.y := Enable.x;
//   when sample(CLK.startTime,CLK.period) then
//     CLK.t_i := time;
//   end when;
//   CLK.y := if  NOT time >= CLK.startTime OR time >= CLK.t_i + CLK.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.FullAdder;
// "
// ""
// "Check of Modelica.Electrical.Digital.Examples.FullAdder completed successfully.
// 
// 
// Class Modelica.Electrical.Digital.Examples.FullAdder has 613 equation(s) and 613 variable(s).
// 501 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.FullAdder
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.FullAdder.exe Modelica.Electrical.Digital.Examples.FullAdder.cpp Modelica.Electrical.Digital.Examples.FullAdder_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.FullAdder_records.c

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5124: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5137: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5137: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5137: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5137: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5138: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5138: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5138: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5138: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5139: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5139: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5141: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5141: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5141: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5141: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5141: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5142: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5142: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5146: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5153: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5155: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5163: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5163: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5163: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5163: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5164: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5166: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5166: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5166: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5166: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5167: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5171: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5178: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5180: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5188: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5188: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5188: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5188: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5197: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5200: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5201: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5204: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5205: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5205: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5205: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5205: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5206: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5208: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5208: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5208: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5208: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5209: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5209: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5213: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5220: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5222: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5230: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5230: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5230: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5230: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5231: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5231: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5233: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5233: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5233: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5233: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5234: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5234: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5238: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5245: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5247: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5261: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5264: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5264: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5264: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5264: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5272: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5272: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5272: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5272: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5273: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5275: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5275: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5275: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5275: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5276: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5280: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5287: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5289: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5297: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5297: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5297: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5297: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5298: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5298: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5300: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5300: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5300: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5300: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5301: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5301: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5305: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5312: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5314: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5322: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5322: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5322: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5322: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5374: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5377: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5440: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5442: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5449: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5451: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5458: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5460: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5467: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5469: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5791: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5791: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5793: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5830: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5832: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5848: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5848: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5850: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5887: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5889: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5905: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5905: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5907: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5944: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5946: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5962: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5962: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:5964: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6001: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6003: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6755: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6758: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6758: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6758: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6758: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6758: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6761: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6761: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6761: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6761: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6764: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6764: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6764: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6764: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6765: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6765: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6765: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6765: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6768: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6768: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6768: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6768: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6769: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6769: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6769: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6769: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6772: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6772: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6772: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6772: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6772: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6773: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6773: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6777: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6784: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6786: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6794: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6794: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6794: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6794: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6797: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6797: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6797: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6797: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6798: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6798: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6802: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6809: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6811: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6825: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6828: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6831: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6832: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6832: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6832: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6832: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6835: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6836: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6836: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6836: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6836: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6837: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6839: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6840: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6844: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6851: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6853: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6861: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6861: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6861: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6861: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6862: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6862: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6864: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6865: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6865: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6869: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6876: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6878: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6911: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6918: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6920: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6929: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6932: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6932: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6936: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6943: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6945: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:6953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7005: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7005: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7005: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7005: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7089: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7341: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7341: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7341: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7341: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7355: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7355: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7357: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7394: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7396: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7412: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7412: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7414: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7451: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7453: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7518: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7518: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7520: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7557: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7559: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7575: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7575: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7577: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7614: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7616: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7883: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7886: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7889: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7895: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7997: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7997: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7997: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:7999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8000: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8000: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8004: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8009: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8011: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8020: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8020: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8023: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8023: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8027: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8032: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8034: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8042: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8042: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8042: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8042: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8043: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8043: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8043: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8043: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8067: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8072: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8074: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8083: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8083: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8086: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8086: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8090: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8095: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8097: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8105: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8105: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8105: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8105: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8106: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8106: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8106: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8106: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8109: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8109: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8109: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8109: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8110: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8130: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8135: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8137: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8145: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8145: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8145: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8145: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8146: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8146: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8148: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8148: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8148: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8148: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8153: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8158: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8160: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8168: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8169: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8172: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8173: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8176: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8179: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8982: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8985: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8992: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8992: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8992: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8992: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8995: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8995: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8995: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8995: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8996: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8997: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8997: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8999: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:8999: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9000: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9000: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9004: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9011: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9013: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9025: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9025: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9029: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9036: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9038: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9055: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9055: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9055: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9055: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9059: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9062: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9063: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9066: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9066: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9066: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9066: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9067: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9071: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9078: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9080: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9089: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9092: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9092: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9096: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9103: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9105: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9122: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9126: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9129: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9129: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9129: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9129: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9130: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9131: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9131: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9133: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9138: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9145: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9147: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9155: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9155: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9155: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9155: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9158: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9159: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9159: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9163: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9170: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9172: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9232: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9232: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9232: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9232: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9235: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9235: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9235: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9235: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9235: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9238: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9244: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9244: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9244: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9244: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionAliasEquations()':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9329: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9331: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9338: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9340: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9347: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9349: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9356: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9358: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9806: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9809: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9809: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9809: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9809: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9809: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9819: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9820: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9821: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9824: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9824: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9828: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9835: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9837: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9845: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9845: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9845: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9845: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9846: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9846: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9848: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9849: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9849: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9853: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9860: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9862: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9870: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9876: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9876: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9876: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9876: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9882: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9882: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9882: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9882: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9883: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9887: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9887: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9887: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9887: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9888: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9890: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9890: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9890: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9890: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9891: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9895: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9902: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9904: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9912: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9912: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9912: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9912: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9913: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9913: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9915: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9916: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9920: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9927: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9929: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9937: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9937: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9937: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9937: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9943: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9943: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9943: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9943: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9946: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9946: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9946: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9946: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9949: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9949: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9949: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9949: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9950: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9950: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9950: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9950: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9953: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9955: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9955: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9958: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9958: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9962: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9969: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9971: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9979: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9979: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9979: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9979: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9982: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9982: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9982: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9982: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9983: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9983: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9987: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9994: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:9996: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10004: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10004: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10004: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10004: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10140: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10140: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10140: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10140: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10140: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10224: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10224: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10224: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10224: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10308: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10308: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10308: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10308: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10392: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10392: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10392: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10392: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10406: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10406: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10408: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10445: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10447: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10463: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10463: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10465: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10502: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10504: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10569: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10569: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10571: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10608: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10610: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10626: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10626: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10628: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10665: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.FullAdder.cpp:10667: warning: converting to `modelica_integer' from `double'

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.FullAdder] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Adder4
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real b4.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real b4.t[2] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b4.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b4.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b1.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real b1.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real b1.t[3] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b1.n = 3 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b1.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b2.t[1] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b2.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real b3.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer b3.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') b3.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.x[3] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real a1.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a1.t[2] = 2.0 "vector of corresponding time points";
//   parameter Real a1.t[3] = 3.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a1.n = 3 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a1.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter Real a2.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a2.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a2.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'1' "vector of values";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.x[2] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a3.t[1] = 1.0 "vector of corresponding time points";
//   parameter Real a3.t[2] = 4.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a3.n = 2 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a3.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.x[1] = Modelica.Electrical.Digital.Interfaces.Logic.'0' "vector of values";
//   parameter Real a4.t[1] = 1.0 "vector of corresponding time points";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial output value";
//   parameter Integer a4.n = 1 "table size";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') a4.y;
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Set.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') = Modelica.Electrical.Digital.Interfaces.Logic.'0' "Logic value to be set";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Set.y;
//   parameter Real Adder1.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.c;
//   parameter Integer Adder1.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.AND.G1.n(min = 2) = Adder1.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y0 = Adder1.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.y_auxiliary(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.AND.G2.x_old(start = Adder1.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.AND.G2.lh;
//   protected discrete Real Adder1.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder2.XOR.G1.n(min = 2) = Adder1.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y0 = Adder1.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.y_auxiliary(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder2.XOR.G2.x_old(start = Adder1.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder2.XOR.G2.lh;
//   protected discrete Real Adder1.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.c;
//   parameter Integer Adder1.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.AND.G1.n(min = 2) = Adder1.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y0 = Adder1.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.y_auxiliary(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.AND.G2.x_old(start = Adder1.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.AND.G2.lh;
//   protected discrete Real Adder1.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder1.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder1.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder1.Adder1.XOR.G1.n(min = 2) = Adder1.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder1.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder1.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder1.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y0 = Adder1.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder1.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder1.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.y_auxiliary(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.Adder1.XOR.G2.x_old(start = Adder1.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder1.Adder1.XOR.G2.lh;
//   protected discrete Real Adder1.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.c_out;
//   parameter Integer Adder1.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder1.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder2.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.c;
//   parameter Integer Adder2.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder2.AND.G1.n(min = 2) = Adder2.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder2.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y0 = Adder2.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.y_auxiliary(start = Adder2.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.AND.G2.x_old(start = Adder2.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder2.Adder2.AND.G2.lh;
//   protected discrete Real Adder2.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder2.Adder2.XOR.G1.n(min = 2) = Adder2.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder2.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y0 = Adder2.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.y_auxiliary(start = Adder2.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder2.XOR.G2.x_old(start = Adder2.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder2.Adder2.XOR.G2.lh;
//   protected discrete Real Adder2.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.c;
//   parameter Integer Adder2.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder1.AND.G1.n(min = 2) = Adder2.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder2.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y0 = Adder2.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.y_auxiliary(start = Adder2.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.AND.G2.x_old(start = Adder2.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder2.Adder1.AND.G2.lh;
//   protected discrete Real Adder2.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder2.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder2.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder2.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder2.Adder1.XOR.G1.n(min = 2) = Adder2.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder2.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder2.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder2.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y0 = Adder2.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder2.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder2.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.y_auxiliary(start = Adder2.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.Adder1.XOR.G2.x_old(start = Adder2.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder2.Adder1.XOR.G2.lh;
//   protected discrete Real Adder2.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.c_out;
//   parameter Integer Adder2.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder2.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder3.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.c;
//   parameter Integer Adder3.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder2.AND.G1.n(min = 2) = Adder3.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder3.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y0 = Adder3.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.y_auxiliary(start = Adder3.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.AND.G2.x_old(start = Adder3.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder3.Adder2.AND.G2.lh;
//   protected discrete Real Adder3.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder3.Adder2.XOR.G1.n(min = 2) = Adder3.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder3.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y0 = Adder3.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.y_auxiliary(start = Adder3.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder2.XOR.G2.x_old(start = Adder3.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder3.Adder2.XOR.G2.lh;
//   protected discrete Real Adder3.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.c;
//   parameter Integer Adder3.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder1.AND.G1.n(min = 2) = Adder3.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder3.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y0 = Adder3.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.y_auxiliary(start = Adder3.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.AND.G2.x_old(start = Adder3.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder3.Adder1.AND.G2.lh;
//   protected discrete Real Adder3.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder3.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder3.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder3.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder3.Adder1.XOR.G1.n(min = 2) = Adder3.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder3.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder3.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder3.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y0 = Adder3.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder3.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder3.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.y_auxiliary(start = Adder3.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.Adder1.XOR.G2.x_old(start = Adder3.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder3.Adder1.XOR.G2.lh;
//   protected discrete Real Adder3.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.c_out;
//   parameter Integer Adder3.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder3.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Real Adder4.Adder2.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.c;
//   parameter Integer Adder4.Adder2.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder2.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder2.AND.G1.n(min = 2) = Adder4.Adder2.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.AND.tLH "rise inertial delay";
//   parameter Real Adder4.Adder2.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y0 = Adder4.Adder2.AND.y0 "initial value of output";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder2.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.y_auxiliary(start = Adder4.Adder2.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.AND.G2.x_old(start = Adder4.Adder2.AND.G2.y0, fixed = true);
//   protected Integer Adder4.Adder2.AND.G2.lh;
//   protected discrete Real Adder4.Adder2.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder2.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder2.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder2.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder4.Adder2.XOR.G1.n(min = 2) = Adder4.Adder2.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder2.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.XOR.tLH "rise inertial delay";
//   parameter Real Adder4.Adder2.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder2.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y0 = Adder4.Adder2.XOR.y0 "initial value of output";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder2.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder2.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.y_auxiliary(start = Adder4.Adder2.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder2.XOR.G2.x_old(start = Adder4.Adder2.XOR.G2.y0, fixed = true);
//   protected Integer Adder4.Adder2.XOR.G2.lh;
//   protected discrete Real Adder4.Adder2.XOR.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder1.delayTime = 0.001 "delay time";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.b;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.a;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.c;
//   parameter Integer Adder4.Adder1.AND.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.AND.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder1.AND.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder1.AND.G1.n(min = 2) = Adder4.Adder1.AND.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.AND.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.AND.tLH "rise inertial delay";
//   parameter Real Adder4.Adder1.AND.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.AND.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y0 = Adder4.Adder1.AND.y0 "initial value of output";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.AND.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder1.AND.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.y_auxiliary(start = Adder4.Adder1.AND.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.AND.G2.x_old(start = Adder4.Adder1.AND.G2.y0, fixed = true);
//   protected Integer Adder4.Adder1.AND.G2.lh;
//   protected discrete Real Adder4.Adder1.AND.G2.t_next(quantity = "Time", unit = "s");
//   parameter Real Adder4.Adder1.XOR.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "rise inertial delay";
//   parameter Real Adder4.Adder1.XOR.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.delayTime "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.y0 = Modelica.Electrical.Digital.Interfaces.Logic.'U' "initial value of output";
//   parameter Integer Adder4.Adder1.XOR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.y "Connector of Digital output signal";
//   parameter Integer Adder4.Adder1.XOR.G1.n(min = 2) = Adder4.Adder1.XOR.n "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y "Connector of Digital output signal";
//   parameter Real Adder4.Adder1.XOR.G2.tLH(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.XOR.tLH "rise inertial delay";
//   parameter Real Adder4.Adder1.XOR.G2.tHL(quantity = "Time", unit = "s", start = 0.0) = Adder4.Adder1.XOR.tHL "fall inertial delay";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y0 = Adder4.Adder1.XOR.y0 "initial value of output";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[1,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[2,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[3,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[4,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[5,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[6,9] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,1] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,2] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,3] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,5] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,6] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,7] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[7,9] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,1] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,2] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,4] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,5] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,6] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,8] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[8,9] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,1] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,2] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,3] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,4] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,5] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,6] = 0 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,7] = -1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,8] = 1 "specification of delay according to signal change";
//   protected Integer Adder4.Adder1.XOR.G2.delayTable[9,9] = 0 "specification of delay according to signal change";
//   protected Real Adder4.Adder1.XOR.G2.delayTime(quantity = "Time", unit = "s");
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.y_auxiliary(start = Adder4.Adder1.XOR.G2.y0, fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.Adder1.XOR.G2.x_old(start = Adder4.Adder1.XOR.G2.y0, fixed = true);
//   protected Integer Adder4.Adder1.XOR.G2.lh;
//   protected discrete Real Adder4.Adder1.XOR.G2.t_next(quantity = "Time", unit = "s");
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.a;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.b;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.c_in;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.s;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.c_out;
//   parameter Integer Adder4.OR.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Adder4.OR.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
// equation
//   Adder1.Adder2.AND.G1.auxiliary[1] = Adder1.Adder2.AND.G1.x[1];
//   Adder1.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder2.AND.G1.auxiliary[1],Adder1.Adder2.AND.G1.x[2]];
//   Adder1.Adder2.AND.G1.y = pre(Adder1.Adder2.AND.G1.auxiliary[2]);
//   Adder1.Adder2.XOR.G1.auxiliary[1] = Adder1.Adder2.XOR.G1.x[1];
//   Adder1.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder2.XOR.G1.auxiliary[1],Adder1.Adder2.XOR.G1.x[2]];
//   Adder1.Adder2.XOR.G1.y = pre(Adder1.Adder2.XOR.G1.auxiliary[2]);
//   Adder1.Adder1.AND.G1.auxiliary[1] = Adder1.Adder1.AND.G1.x[1];
//   Adder1.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder1.Adder1.AND.G1.auxiliary[1],Adder1.Adder1.AND.G1.x[2]];
//   Adder1.Adder1.AND.G1.y = pre(Adder1.Adder1.AND.G1.auxiliary[2]);
//   Adder1.Adder1.XOR.G1.auxiliary[1] = Adder1.Adder1.XOR.G1.x[1];
//   Adder1.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder1.Adder1.XOR.G1.auxiliary[1],Adder1.Adder1.XOR.G1.x[2]];
//   Adder1.Adder1.XOR.G1.y = pre(Adder1.Adder1.XOR.G1.auxiliary[2]);
//   Adder1.OR.auxiliary[1] = Adder1.OR.x[1];
//   Adder1.OR.auxiliary[2] = D.Tables.OrTable[Adder1.OR.auxiliary[1],Adder1.OR.x[2]];
//   Adder1.OR.y = pre(Adder1.OR.auxiliary[2]);
//   Adder2.Adder2.AND.G1.auxiliary[1] = Adder2.Adder2.AND.G1.x[1];
//   Adder2.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder2.Adder2.AND.G1.auxiliary[1],Adder2.Adder2.AND.G1.x[2]];
//   Adder2.Adder2.AND.G1.y = pre(Adder2.Adder2.AND.G1.auxiliary[2]);
//   Adder2.Adder2.XOR.G1.auxiliary[1] = Adder2.Adder2.XOR.G1.x[1];
//   Adder2.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder2.Adder2.XOR.G1.auxiliary[1],Adder2.Adder2.XOR.G1.x[2]];
//   Adder2.Adder2.XOR.G1.y = pre(Adder2.Adder2.XOR.G1.auxiliary[2]);
//   Adder2.Adder1.AND.G1.auxiliary[1] = Adder2.Adder1.AND.G1.x[1];
//   Adder2.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder2.Adder1.AND.G1.auxiliary[1],Adder2.Adder1.AND.G1.x[2]];
//   Adder2.Adder1.AND.G1.y = pre(Adder2.Adder1.AND.G1.auxiliary[2]);
//   Adder2.Adder1.XOR.G1.auxiliary[1] = Adder2.Adder1.XOR.G1.x[1];
//   Adder2.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder2.Adder1.XOR.G1.auxiliary[1],Adder2.Adder1.XOR.G1.x[2]];
//   Adder2.Adder1.XOR.G1.y = pre(Adder2.Adder1.XOR.G1.auxiliary[2]);
//   Adder2.OR.auxiliary[1] = Adder2.OR.x[1];
//   Adder2.OR.auxiliary[2] = D.Tables.OrTable[Adder2.OR.auxiliary[1],Adder2.OR.x[2]];
//   Adder2.OR.y = pre(Adder2.OR.auxiliary[2]);
//   Adder3.Adder2.AND.G1.auxiliary[1] = Adder3.Adder2.AND.G1.x[1];
//   Adder3.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder3.Adder2.AND.G1.auxiliary[1],Adder3.Adder2.AND.G1.x[2]];
//   Adder3.Adder2.AND.G1.y = pre(Adder3.Adder2.AND.G1.auxiliary[2]);
//   Adder3.Adder2.XOR.G1.auxiliary[1] = Adder3.Adder2.XOR.G1.x[1];
//   Adder3.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder3.Adder2.XOR.G1.auxiliary[1],Adder3.Adder2.XOR.G1.x[2]];
//   Adder3.Adder2.XOR.G1.y = pre(Adder3.Adder2.XOR.G1.auxiliary[2]);
//   Adder3.Adder1.AND.G1.auxiliary[1] = Adder3.Adder1.AND.G1.x[1];
//   Adder3.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder3.Adder1.AND.G1.auxiliary[1],Adder3.Adder1.AND.G1.x[2]];
//   Adder3.Adder1.AND.G1.y = pre(Adder3.Adder1.AND.G1.auxiliary[2]);
//   Adder3.Adder1.XOR.G1.auxiliary[1] = Adder3.Adder1.XOR.G1.x[1];
//   Adder3.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder3.Adder1.XOR.G1.auxiliary[1],Adder3.Adder1.XOR.G1.x[2]];
//   Adder3.Adder1.XOR.G1.y = pre(Adder3.Adder1.XOR.G1.auxiliary[2]);
//   Adder3.OR.auxiliary[1] = Adder3.OR.x[1];
//   Adder3.OR.auxiliary[2] = D.Tables.OrTable[Adder3.OR.auxiliary[1],Adder3.OR.x[2]];
//   Adder3.OR.y = pre(Adder3.OR.auxiliary[2]);
//   Adder4.Adder2.AND.G1.auxiliary[1] = Adder4.Adder2.AND.G1.x[1];
//   Adder4.Adder2.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder4.Adder2.AND.G1.auxiliary[1],Adder4.Adder2.AND.G1.x[2]];
//   Adder4.Adder2.AND.G1.y = pre(Adder4.Adder2.AND.G1.auxiliary[2]);
//   Adder4.Adder2.XOR.G1.auxiliary[1] = Adder4.Adder2.XOR.G1.x[1];
//   Adder4.Adder2.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder4.Adder2.XOR.G1.auxiliary[1],Adder4.Adder2.XOR.G1.x[2]];
//   Adder4.Adder2.XOR.G1.y = pre(Adder4.Adder2.XOR.G1.auxiliary[2]);
//   Adder4.Adder1.AND.G1.auxiliary[1] = Adder4.Adder1.AND.G1.x[1];
//   Adder4.Adder1.AND.G1.auxiliary[2] = D.Tables.AndTable[Adder4.Adder1.AND.G1.auxiliary[1],Adder4.Adder1.AND.G1.x[2]];
//   Adder4.Adder1.AND.G1.y = pre(Adder4.Adder1.AND.G1.auxiliary[2]);
//   Adder4.Adder1.XOR.G1.auxiliary[1] = Adder4.Adder1.XOR.G1.x[1];
//   Adder4.Adder1.XOR.G1.auxiliary[2] = D.Tables.XorTable[Adder4.Adder1.XOR.G1.auxiliary[1],Adder4.Adder1.XOR.G1.x[2]];
//   Adder4.Adder1.XOR.G1.y = pre(Adder4.Adder1.XOR.G1.auxiliary[2]);
//   Adder4.OR.auxiliary[1] = Adder4.OR.x[1];
//   Adder4.OR.auxiliary[2] = D.Tables.OrTable[Adder4.OR.auxiliary[1],Adder4.OR.x[2]];
//   Adder4.OR.y = pre(Adder4.OR.auxiliary[2]);
//   Adder4.a = a4.y;
//   Adder4.b = b4.y;
//   Adder3.a = a3.y;
//   Adder3.b = b3.y;
//   Adder2.a = a2.y;
//   Adder2.b = b2.y;
//   Adder3.c_out = Adder4.c_in;
//   Adder2.c_out = Adder3.c_in;
//   Adder1.c_out = Adder2.c_in;
//   Adder1.c_in = Set.y;
//   Adder1.a = a1.y;
//   Adder1.b = b1.y;
//   Adder4.Adder2.b = Adder4.c_in;
//   Adder4.Adder1.c = Adder4.OR.x[1];
//   Adder4.Adder1.s = Adder4.Adder2.a;
//   Adder4.Adder1.b = Adder4.b;
//   Adder4.Adder1.a = Adder4.a;
//   Adder4.Adder2.s = Adder4.s;
//   Adder4.Adder2.c = Adder4.OR.x[2];
//   Adder4.OR.y = Adder4.c_out;
//   Adder4.Adder1.AND.x[2] = Adder4.Adder1.XOR.x[2];
//   Adder4.Adder1.AND.x[2] = Adder4.Adder1.a;
//   Adder4.Adder1.AND.x[1] = Adder4.Adder1.XOR.x[1];
//   Adder4.Adder1.AND.x[1] = Adder4.Adder1.b;
//   Adder4.Adder1.XOR.y = Adder4.Adder1.s;
//   Adder4.Adder1.AND.y = Adder4.Adder1.c;
//   Adder4.Adder1.XOR.G2.y = Adder4.Adder1.XOR.y;
//   Adder4.Adder1.XOR.G1.y = Adder4.Adder1.XOR.G2.x;
//   Adder4.Adder1.XOR.G1.x[1] = Adder4.Adder1.XOR.x[1];
//   Adder4.Adder1.XOR.G1.x[2] = Adder4.Adder1.XOR.x[2];
//   Adder4.Adder1.AND.G1.y = Adder4.Adder1.AND.G2.x;
//   Adder4.Adder1.AND.G2.y = Adder4.Adder1.AND.y;
//   Adder4.Adder1.AND.G1.x[1] = Adder4.Adder1.AND.x[1];
//   Adder4.Adder1.AND.G1.x[2] = Adder4.Adder1.AND.x[2];
//   Adder4.Adder2.AND.x[2] = Adder4.Adder2.XOR.x[2];
//   Adder4.Adder2.AND.x[2] = Adder4.Adder2.a;
//   Adder4.Adder2.AND.x[1] = Adder4.Adder2.XOR.x[1];
//   Adder4.Adder2.AND.x[1] = Adder4.Adder2.b;
//   Adder4.Adder2.XOR.y = Adder4.Adder2.s;
//   Adder4.Adder2.AND.y = Adder4.Adder2.c;
//   Adder4.Adder2.XOR.G2.y = Adder4.Adder2.XOR.y;
//   Adder4.Adder2.XOR.G1.y = Adder4.Adder2.XOR.G2.x;
//   Adder4.Adder2.XOR.G1.x[1] = Adder4.Adder2.XOR.x[1];
//   Adder4.Adder2.XOR.G1.x[2] = Adder4.Adder2.XOR.x[2];
//   Adder4.Adder2.AND.G1.y = Adder4.Adder2.AND.G2.x;
//   Adder4.Adder2.AND.G2.y = Adder4.Adder2.AND.y;
//   Adder4.Adder2.AND.G1.x[1] = Adder4.Adder2.AND.x[1];
//   Adder4.Adder2.AND.G1.x[2] = Adder4.Adder2.AND.x[2];
//   Adder3.Adder2.b = Adder3.c_in;
//   Adder3.Adder1.c = Adder3.OR.x[1];
//   Adder3.Adder1.s = Adder3.Adder2.a;
//   Adder3.Adder1.b = Adder3.b;
//   Adder3.Adder1.a = Adder3.a;
//   Adder3.Adder2.s = Adder3.s;
//   Adder3.Adder2.c = Adder3.OR.x[2];
//   Adder3.OR.y = Adder3.c_out;
//   Adder3.Adder1.AND.x[2] = Adder3.Adder1.XOR.x[2];
//   Adder3.Adder1.AND.x[2] = Adder3.Adder1.a;
//   Adder3.Adder1.AND.x[1] = Adder3.Adder1.XOR.x[1];
//   Adder3.Adder1.AND.x[1] = Adder3.Adder1.b;
//   Adder3.Adder1.XOR.y = Adder3.Adder1.s;
//   Adder3.Adder1.AND.y = Adder3.Adder1.c;
//   Adder3.Adder1.XOR.G2.y = Adder3.Adder1.XOR.y;
//   Adder3.Adder1.XOR.G1.y = Adder3.Adder1.XOR.G2.x;
//   Adder3.Adder1.XOR.G1.x[1] = Adder3.Adder1.XOR.x[1];
//   Adder3.Adder1.XOR.G1.x[2] = Adder3.Adder1.XOR.x[2];
//   Adder3.Adder1.AND.G1.y = Adder3.Adder1.AND.G2.x;
//   Adder3.Adder1.AND.G2.y = Adder3.Adder1.AND.y;
//   Adder3.Adder1.AND.G1.x[1] = Adder3.Adder1.AND.x[1];
//   Adder3.Adder1.AND.G1.x[2] = Adder3.Adder1.AND.x[2];
//   Adder3.Adder2.AND.x[2] = Adder3.Adder2.XOR.x[2];
//   Adder3.Adder2.AND.x[2] = Adder3.Adder2.a;
//   Adder3.Adder2.AND.x[1] = Adder3.Adder2.XOR.x[1];
//   Adder3.Adder2.AND.x[1] = Adder3.Adder2.b;
//   Adder3.Adder2.XOR.y = Adder3.Adder2.s;
//   Adder3.Adder2.AND.y = Adder3.Adder2.c;
//   Adder3.Adder2.XOR.G2.y = Adder3.Adder2.XOR.y;
//   Adder3.Adder2.XOR.G1.y = Adder3.Adder2.XOR.G2.x;
//   Adder3.Adder2.XOR.G1.x[1] = Adder3.Adder2.XOR.x[1];
//   Adder3.Adder2.XOR.G1.x[2] = Adder3.Adder2.XOR.x[2];
//   Adder3.Adder2.AND.G1.y = Adder3.Adder2.AND.G2.x;
//   Adder3.Adder2.AND.G2.y = Adder3.Adder2.AND.y;
//   Adder3.Adder2.AND.G1.x[1] = Adder3.Adder2.AND.x[1];
//   Adder3.Adder2.AND.G1.x[2] = Adder3.Adder2.AND.x[2];
//   Adder2.Adder2.b = Adder2.c_in;
//   Adder2.Adder1.c = Adder2.OR.x[1];
//   Adder2.Adder1.s = Adder2.Adder2.a;
//   Adder2.Adder1.b = Adder2.b;
//   Adder2.Adder1.a = Adder2.a;
//   Adder2.Adder2.s = Adder2.s;
//   Adder2.Adder2.c = Adder2.OR.x[2];
//   Adder2.OR.y = Adder2.c_out;
//   Adder2.Adder1.AND.x[2] = Adder2.Adder1.XOR.x[2];
//   Adder2.Adder1.AND.x[2] = Adder2.Adder1.a;
//   Adder2.Adder1.AND.x[1] = Adder2.Adder1.XOR.x[1];
//   Adder2.Adder1.AND.x[1] = Adder2.Adder1.b;
//   Adder2.Adder1.XOR.y = Adder2.Adder1.s;
//   Adder2.Adder1.AND.y = Adder2.Adder1.c;
//   Adder2.Adder1.XOR.G2.y = Adder2.Adder1.XOR.y;
//   Adder2.Adder1.XOR.G1.y = Adder2.Adder1.XOR.G2.x;
//   Adder2.Adder1.XOR.G1.x[1] = Adder2.Adder1.XOR.x[1];
//   Adder2.Adder1.XOR.G1.x[2] = Adder2.Adder1.XOR.x[2];
//   Adder2.Adder1.AND.G1.y = Adder2.Adder1.AND.G2.x;
//   Adder2.Adder1.AND.G2.y = Adder2.Adder1.AND.y;
//   Adder2.Adder1.AND.G1.x[1] = Adder2.Adder1.AND.x[1];
//   Adder2.Adder1.AND.G1.x[2] = Adder2.Adder1.AND.x[2];
//   Adder2.Adder2.AND.x[2] = Adder2.Adder2.XOR.x[2];
//   Adder2.Adder2.AND.x[2] = Adder2.Adder2.a;
//   Adder2.Adder2.AND.x[1] = Adder2.Adder2.XOR.x[1];
//   Adder2.Adder2.AND.x[1] = Adder2.Adder2.b;
//   Adder2.Adder2.XOR.y = Adder2.Adder2.s;
//   Adder2.Adder2.AND.y = Adder2.Adder2.c;
//   Adder2.Adder2.XOR.G2.y = Adder2.Adder2.XOR.y;
//   Adder2.Adder2.XOR.G1.y = Adder2.Adder2.XOR.G2.x;
//   Adder2.Adder2.XOR.G1.x[1] = Adder2.Adder2.XOR.x[1];
//   Adder2.Adder2.XOR.G1.x[2] = Adder2.Adder2.XOR.x[2];
//   Adder2.Adder2.AND.G1.y = Adder2.Adder2.AND.G2.x;
//   Adder2.Adder2.AND.G2.y = Adder2.Adder2.AND.y;
//   Adder2.Adder2.AND.G1.x[1] = Adder2.Adder2.AND.x[1];
//   Adder2.Adder2.AND.G1.x[2] = Adder2.Adder2.AND.x[2];
//   Adder1.Adder2.b = Adder1.c_in;
//   Adder1.Adder1.c = Adder1.OR.x[1];
//   Adder1.Adder1.s = Adder1.Adder2.a;
//   Adder1.Adder1.b = Adder1.b;
//   Adder1.Adder1.a = Adder1.a;
//   Adder1.Adder2.s = Adder1.s;
//   Adder1.Adder2.c = Adder1.OR.x[2];
//   Adder1.OR.y = Adder1.c_out;
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.x[2] = Adder1.Adder1.a;
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.AND.x[1] = Adder1.Adder1.b;
//   Adder1.Adder1.XOR.y = Adder1.Adder1.s;
//   Adder1.Adder1.AND.y = Adder1.Adder1.c;
//   Adder1.Adder1.XOR.G2.y = Adder1.Adder1.XOR.y;
//   Adder1.Adder1.XOR.G1.y = Adder1.Adder1.XOR.G2.x;
//   Adder1.Adder1.XOR.G1.x[1] = Adder1.Adder1.XOR.x[1];
//   Adder1.Adder1.XOR.G1.x[2] = Adder1.Adder1.XOR.x[2];
//   Adder1.Adder1.AND.G1.y = Adder1.Adder1.AND.G2.x;
//   Adder1.Adder1.AND.G2.y = Adder1.Adder1.AND.y;
//   Adder1.Adder1.AND.G1.x[1] = Adder1.Adder1.AND.x[1];
//   Adder1.Adder1.AND.G1.x[2] = Adder1.Adder1.AND.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.x[2] = Adder1.Adder2.a;
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.AND.x[1] = Adder1.Adder2.b;
//   Adder1.Adder2.XOR.y = Adder1.Adder2.s;
//   Adder1.Adder2.AND.y = Adder1.Adder2.c;
//   Adder1.Adder2.XOR.G2.y = Adder1.Adder2.XOR.y;
//   Adder1.Adder2.XOR.G1.y = Adder1.Adder2.XOR.G2.x;
//   Adder1.Adder2.XOR.G1.x[1] = Adder1.Adder2.XOR.x[1];
//   Adder1.Adder2.XOR.G1.x[2] = Adder1.Adder2.XOR.x[2];
//   Adder1.Adder2.AND.G1.y = Adder1.Adder2.AND.G2.x;
//   Adder1.Adder2.AND.G2.y = Adder1.Adder2.AND.y;
//   Adder1.Adder2.AND.G1.x[1] = Adder1.Adder2.AND.x[1];
//   Adder1.Adder2.AND.G1.x[2] = Adder1.Adder2.AND.x[2];
// algorithm
//   if initial() then
//     assert(b4.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b4.n loop
//     end for;
//   end if;
//   b4.y := b4.y0;
//   for i in 1:b4.n loop
//     if time >= b4.t[i] then
//       b4.y := b4.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b1.n loop
//     end for;
//   end if;
//   b1.y := b1.y0;
//   for i in 1:b1.n loop
//     if time >= b1.t[i] then
//       b1.y := b1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b2.n loop
//     end for;
//   end if;
//   b2.y := b2.y0;
//   for i in 1:b2.n loop
//     if time >= b2.t[i] then
//       b2.y := b2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(b3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:b3.n loop
//     end for;
//   end if;
//   b3.y := b3.y0;
//   for i in 1:b3.n loop
//     if time >= b3.t[i] then
//       b3.y := b3.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a1.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a1.n loop
//     end for;
//   end if;
//   a1.y := a1.y0;
//   for i in 1:a1.n loop
//     if time >= a1.t[i] then
//       a1.y := a1.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a2.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a2.n loop
//     end for;
//   end if;
//   a2.y := a2.y0;
//   for i in 1:a2.n loop
//     if time >= a2.t[i] then
//       a2.y := a2.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a3.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a3.n loop
//     end for;
//   end if;
//   a3.y := a3.y0;
//   for i in 1:a3.n loop
//     if time >= a3.t[i] then
//       a3.y := a3.x[i];
//     end if;
//   end for;
//   if initial() then
//     assert(a4.n > 0, "Invalid size of table (n < 1)");
//     for i in 1:a4.n loop
//     end for;
//   end if;
//   a4.y := a4.y0;
//   for i in 1:a4.n loop
//     if time >= a4.t[i] then
//       a4.y := a4.x[i];
//     end if;
//   end for;
//   Set.y := Set.x;
//   when {initial(),(Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0) AND change(Adder1.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.AND.G2.x_old := if initial() OR pre(Adder1.Adder2.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder2.AND.G2.y0 else pre(Adder1.Adder2.AND.G2.x);
//     Adder1.Adder2.AND.G2.lh := Adder1.Adder2.AND.G2.delayTable[Adder1.Adder2.AND.G2.x_old,Adder1.Adder2.AND.G2.x];
//     Adder1.Adder2.AND.G2.delayTime := if Adder1.Adder2.AND.G2.lh > 0 then Adder1.Adder2.AND.G2.tLH else if Adder1.Adder2.AND.G2.lh < 0 then Adder1.Adder2.AND.G2.tHL else 0.0;
//     Adder1.Adder2.AND.G2.t_next := time + Adder1.Adder2.AND.G2.delayTime;
//     if Adder1.Adder2.AND.G2.lh == 0 OR abs(Adder1.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.AND.G2.t_next then
//     Adder1.Adder2.AND.G2.y_auxiliary := Adder1.Adder2.AND.G2.x;
//   end when;
//   Adder1.Adder2.AND.G2.y := if Adder1.Adder2.AND.G2.tLH > 0.0 OR Adder1.Adder2.AND.G2.tHL > 0.0 then Adder1.Adder2.AND.G2.y_auxiliary else Adder1.Adder2.AND.G2.x;
//   when {initial(),(Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0) AND change(Adder1.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder2.XOR.G2.x_old := if initial() OR pre(Adder1.Adder2.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder2.XOR.G2.y0 else pre(Adder1.Adder2.XOR.G2.x);
//     Adder1.Adder2.XOR.G2.lh := Adder1.Adder2.XOR.G2.delayTable[Adder1.Adder2.XOR.G2.x_old,Adder1.Adder2.XOR.G2.x];
//     Adder1.Adder2.XOR.G2.delayTime := if Adder1.Adder2.XOR.G2.lh > 0 then Adder1.Adder2.XOR.G2.tLH else if Adder1.Adder2.XOR.G2.lh < 0 then Adder1.Adder2.XOR.G2.tHL else 0.0;
//     Adder1.Adder2.XOR.G2.t_next := time + Adder1.Adder2.XOR.G2.delayTime;
//     if Adder1.Adder2.XOR.G2.lh == 0 OR abs(Adder1.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder2.XOR.G2.t_next then
//     Adder1.Adder2.XOR.G2.y_auxiliary := Adder1.Adder2.XOR.G2.x;
//   end when;
//   Adder1.Adder2.XOR.G2.y := if Adder1.Adder2.XOR.G2.tLH > 0.0 OR Adder1.Adder2.XOR.G2.tHL > 0.0 then Adder1.Adder2.XOR.G2.y_auxiliary else Adder1.Adder2.XOR.G2.x;
//   when {initial(),(Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0) AND change(Adder1.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.AND.G2.x_old := if initial() OR pre(Adder1.Adder1.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder1.AND.G2.y0 else pre(Adder1.Adder1.AND.G2.x);
//     Adder1.Adder1.AND.G2.lh := Adder1.Adder1.AND.G2.delayTable[Adder1.Adder1.AND.G2.x_old,Adder1.Adder1.AND.G2.x];
//     Adder1.Adder1.AND.G2.delayTime := if Adder1.Adder1.AND.G2.lh > 0 then Adder1.Adder1.AND.G2.tLH else if Adder1.Adder1.AND.G2.lh < 0 then Adder1.Adder1.AND.G2.tHL else 0.0;
//     Adder1.Adder1.AND.G2.t_next := time + Adder1.Adder1.AND.G2.delayTime;
//     if Adder1.Adder1.AND.G2.lh == 0 OR abs(Adder1.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.AND.G2.t_next then
//     Adder1.Adder1.AND.G2.y_auxiliary := Adder1.Adder1.AND.G2.x;
//   end when;
//   Adder1.Adder1.AND.G2.y := if Adder1.Adder1.AND.G2.tLH > 0.0 OR Adder1.Adder1.AND.G2.tHL > 0.0 then Adder1.Adder1.AND.G2.y_auxiliary else Adder1.Adder1.AND.G2.x;
//   when {initial(),(Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0) AND change(Adder1.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder1.Adder1.XOR.G2.x_old := if initial() OR pre(Adder1.Adder1.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder1.Adder1.XOR.G2.y0 else pre(Adder1.Adder1.XOR.G2.x);
//     Adder1.Adder1.XOR.G2.lh := Adder1.Adder1.XOR.G2.delayTable[Adder1.Adder1.XOR.G2.x_old,Adder1.Adder1.XOR.G2.x];
//     Adder1.Adder1.XOR.G2.delayTime := if Adder1.Adder1.XOR.G2.lh > 0 then Adder1.Adder1.XOR.G2.tLH else if Adder1.Adder1.XOR.G2.lh < 0 then Adder1.Adder1.XOR.G2.tHL else 0.0;
//     Adder1.Adder1.XOR.G2.t_next := time + Adder1.Adder1.XOR.G2.delayTime;
//     if Adder1.Adder1.XOR.G2.lh == 0 OR abs(Adder1.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder1.Adder1.XOR.G2.t_next then
//     Adder1.Adder1.XOR.G2.y_auxiliary := Adder1.Adder1.XOR.G2.x;
//   end when;
//   Adder1.Adder1.XOR.G2.y := if Adder1.Adder1.XOR.G2.tLH > 0.0 OR Adder1.Adder1.XOR.G2.tHL > 0.0 then Adder1.Adder1.XOR.G2.y_auxiliary else Adder1.Adder1.XOR.G2.x;
//   when {initial(),(Adder2.Adder2.AND.G2.tLH > 0.0 OR Adder2.Adder2.AND.G2.tHL > 0.0) AND change(Adder2.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder2.Adder2.AND.G2.x_old := if initial() OR pre(Adder2.Adder2.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder2.Adder2.AND.G2.y0 else pre(Adder2.Adder2.AND.G2.x);
//     Adder2.Adder2.AND.G2.lh := Adder2.Adder2.AND.G2.delayTable[Adder2.Adder2.AND.G2.x_old,Adder2.Adder2.AND.G2.x];
//     Adder2.Adder2.AND.G2.delayTime := if Adder2.Adder2.AND.G2.lh > 0 then Adder2.Adder2.AND.G2.tLH else if Adder2.Adder2.AND.G2.lh < 0 then Adder2.Adder2.AND.G2.tHL else 0.0;
//     Adder2.Adder2.AND.G2.t_next := time + Adder2.Adder2.AND.G2.delayTime;
//     if Adder2.Adder2.AND.G2.lh == 0 OR abs(Adder2.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder2.Adder2.AND.G2.y_auxiliary := Adder2.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder2.AND.G2.t_next then
//     Adder2.Adder2.AND.G2.y_auxiliary := Adder2.Adder2.AND.G2.x;
//   end when;
//   Adder2.Adder2.AND.G2.y := if Adder2.Adder2.AND.G2.tLH > 0.0 OR Adder2.Adder2.AND.G2.tHL > 0.0 then Adder2.Adder2.AND.G2.y_auxiliary else Adder2.Adder2.AND.G2.x;
//   when {initial(),(Adder2.Adder2.XOR.G2.tLH > 0.0 OR Adder2.Adder2.XOR.G2.tHL > 0.0) AND change(Adder2.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder2.Adder2.XOR.G2.x_old := if initial() OR pre(Adder2.Adder2.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder2.Adder2.XOR.G2.y0 else pre(Adder2.Adder2.XOR.G2.x);
//     Adder2.Adder2.XOR.G2.lh := Adder2.Adder2.XOR.G2.delayTable[Adder2.Adder2.XOR.G2.x_old,Adder2.Adder2.XOR.G2.x];
//     Adder2.Adder2.XOR.G2.delayTime := if Adder2.Adder2.XOR.G2.lh > 0 then Adder2.Adder2.XOR.G2.tLH else if Adder2.Adder2.XOR.G2.lh < 0 then Adder2.Adder2.XOR.G2.tHL else 0.0;
//     Adder2.Adder2.XOR.G2.t_next := time + Adder2.Adder2.XOR.G2.delayTime;
//     if Adder2.Adder2.XOR.G2.lh == 0 OR abs(Adder2.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder2.Adder2.XOR.G2.y_auxiliary := Adder2.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder2.XOR.G2.t_next then
//     Adder2.Adder2.XOR.G2.y_auxiliary := Adder2.Adder2.XOR.G2.x;
//   end when;
//   Adder2.Adder2.XOR.G2.y := if Adder2.Adder2.XOR.G2.tLH > 0.0 OR Adder2.Adder2.XOR.G2.tHL > 0.0 then Adder2.Adder2.XOR.G2.y_auxiliary else Adder2.Adder2.XOR.G2.x;
//   when {initial(),(Adder2.Adder1.AND.G2.tLH > 0.0 OR Adder2.Adder1.AND.G2.tHL > 0.0) AND change(Adder2.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder2.Adder1.AND.G2.x_old := if initial() OR pre(Adder2.Adder1.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder2.Adder1.AND.G2.y0 else pre(Adder2.Adder1.AND.G2.x);
//     Adder2.Adder1.AND.G2.lh := Adder2.Adder1.AND.G2.delayTable[Adder2.Adder1.AND.G2.x_old,Adder2.Adder1.AND.G2.x];
//     Adder2.Adder1.AND.G2.delayTime := if Adder2.Adder1.AND.G2.lh > 0 then Adder2.Adder1.AND.G2.tLH else if Adder2.Adder1.AND.G2.lh < 0 then Adder2.Adder1.AND.G2.tHL else 0.0;
//     Adder2.Adder1.AND.G2.t_next := time + Adder2.Adder1.AND.G2.delayTime;
//     if Adder2.Adder1.AND.G2.lh == 0 OR abs(Adder2.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder2.Adder1.AND.G2.y_auxiliary := Adder2.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder1.AND.G2.t_next then
//     Adder2.Adder1.AND.G2.y_auxiliary := Adder2.Adder1.AND.G2.x;
//   end when;
//   Adder2.Adder1.AND.G2.y := if Adder2.Adder1.AND.G2.tLH > 0.0 OR Adder2.Adder1.AND.G2.tHL > 0.0 then Adder2.Adder1.AND.G2.y_auxiliary else Adder2.Adder1.AND.G2.x;
//   when {initial(),(Adder2.Adder1.XOR.G2.tLH > 0.0 OR Adder2.Adder1.XOR.G2.tHL > 0.0) AND change(Adder2.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder2.Adder1.XOR.G2.x_old := if initial() OR pre(Adder2.Adder1.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder2.Adder1.XOR.G2.y0 else pre(Adder2.Adder1.XOR.G2.x);
//     Adder2.Adder1.XOR.G2.lh := Adder2.Adder1.XOR.G2.delayTable[Adder2.Adder1.XOR.G2.x_old,Adder2.Adder1.XOR.G2.x];
//     Adder2.Adder1.XOR.G2.delayTime := if Adder2.Adder1.XOR.G2.lh > 0 then Adder2.Adder1.XOR.G2.tLH else if Adder2.Adder1.XOR.G2.lh < 0 then Adder2.Adder1.XOR.G2.tHL else 0.0;
//     Adder2.Adder1.XOR.G2.t_next := time + Adder2.Adder1.XOR.G2.delayTime;
//     if Adder2.Adder1.XOR.G2.lh == 0 OR abs(Adder2.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder2.Adder1.XOR.G2.y_auxiliary := Adder2.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder2.Adder1.XOR.G2.t_next then
//     Adder2.Adder1.XOR.G2.y_auxiliary := Adder2.Adder1.XOR.G2.x;
//   end when;
//   Adder2.Adder1.XOR.G2.y := if Adder2.Adder1.XOR.G2.tLH > 0.0 OR Adder2.Adder1.XOR.G2.tHL > 0.0 then Adder2.Adder1.XOR.G2.y_auxiliary else Adder2.Adder1.XOR.G2.x;
//   when {initial(),(Adder3.Adder2.AND.G2.tLH > 0.0 OR Adder3.Adder2.AND.G2.tHL > 0.0) AND change(Adder3.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder3.Adder2.AND.G2.x_old := if initial() OR pre(Adder3.Adder2.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder3.Adder2.AND.G2.y0 else pre(Adder3.Adder2.AND.G2.x);
//     Adder3.Adder2.AND.G2.lh := Adder3.Adder2.AND.G2.delayTable[Adder3.Adder2.AND.G2.x_old,Adder3.Adder2.AND.G2.x];
//     Adder3.Adder2.AND.G2.delayTime := if Adder3.Adder2.AND.G2.lh > 0 then Adder3.Adder2.AND.G2.tLH else if Adder3.Adder2.AND.G2.lh < 0 then Adder3.Adder2.AND.G2.tHL else 0.0;
//     Adder3.Adder2.AND.G2.t_next := time + Adder3.Adder2.AND.G2.delayTime;
//     if Adder3.Adder2.AND.G2.lh == 0 OR abs(Adder3.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder3.Adder2.AND.G2.y_auxiliary := Adder3.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder2.AND.G2.t_next then
//     Adder3.Adder2.AND.G2.y_auxiliary := Adder3.Adder2.AND.G2.x;
//   end when;
//   Adder3.Adder2.AND.G2.y := if Adder3.Adder2.AND.G2.tLH > 0.0 OR Adder3.Adder2.AND.G2.tHL > 0.0 then Adder3.Adder2.AND.G2.y_auxiliary else Adder3.Adder2.AND.G2.x;
//   when {initial(),(Adder3.Adder2.XOR.G2.tLH > 0.0 OR Adder3.Adder2.XOR.G2.tHL > 0.0) AND change(Adder3.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder3.Adder2.XOR.G2.x_old := if initial() OR pre(Adder3.Adder2.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder3.Adder2.XOR.G2.y0 else pre(Adder3.Adder2.XOR.G2.x);
//     Adder3.Adder2.XOR.G2.lh := Adder3.Adder2.XOR.G2.delayTable[Adder3.Adder2.XOR.G2.x_old,Adder3.Adder2.XOR.G2.x];
//     Adder3.Adder2.XOR.G2.delayTime := if Adder3.Adder2.XOR.G2.lh > 0 then Adder3.Adder2.XOR.G2.tLH else if Adder3.Adder2.XOR.G2.lh < 0 then Adder3.Adder2.XOR.G2.tHL else 0.0;
//     Adder3.Adder2.XOR.G2.t_next := time + Adder3.Adder2.XOR.G2.delayTime;
//     if Adder3.Adder2.XOR.G2.lh == 0 OR abs(Adder3.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder3.Adder2.XOR.G2.y_auxiliary := Adder3.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder2.XOR.G2.t_next then
//     Adder3.Adder2.XOR.G2.y_auxiliary := Adder3.Adder2.XOR.G2.x;
//   end when;
//   Adder3.Adder2.XOR.G2.y := if Adder3.Adder2.XOR.G2.tLH > 0.0 OR Adder3.Adder2.XOR.G2.tHL > 0.0 then Adder3.Adder2.XOR.G2.y_auxiliary else Adder3.Adder2.XOR.G2.x;
//   when {initial(),(Adder3.Adder1.AND.G2.tLH > 0.0 OR Adder3.Adder1.AND.G2.tHL > 0.0) AND change(Adder3.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder3.Adder1.AND.G2.x_old := if initial() OR pre(Adder3.Adder1.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder3.Adder1.AND.G2.y0 else pre(Adder3.Adder1.AND.G2.x);
//     Adder3.Adder1.AND.G2.lh := Adder3.Adder1.AND.G2.delayTable[Adder3.Adder1.AND.G2.x_old,Adder3.Adder1.AND.G2.x];
//     Adder3.Adder1.AND.G2.delayTime := if Adder3.Adder1.AND.G2.lh > 0 then Adder3.Adder1.AND.G2.tLH else if Adder3.Adder1.AND.G2.lh < 0 then Adder3.Adder1.AND.G2.tHL else 0.0;
//     Adder3.Adder1.AND.G2.t_next := time + Adder3.Adder1.AND.G2.delayTime;
//     if Adder3.Adder1.AND.G2.lh == 0 OR abs(Adder3.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder3.Adder1.AND.G2.y_auxiliary := Adder3.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder1.AND.G2.t_next then
//     Adder3.Adder1.AND.G2.y_auxiliary := Adder3.Adder1.AND.G2.x;
//   end when;
//   Adder3.Adder1.AND.G2.y := if Adder3.Adder1.AND.G2.tLH > 0.0 OR Adder3.Adder1.AND.G2.tHL > 0.0 then Adder3.Adder1.AND.G2.y_auxiliary else Adder3.Adder1.AND.G2.x;
//   when {initial(),(Adder3.Adder1.XOR.G2.tLH > 0.0 OR Adder3.Adder1.XOR.G2.tHL > 0.0) AND change(Adder3.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder3.Adder1.XOR.G2.x_old := if initial() OR pre(Adder3.Adder1.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder3.Adder1.XOR.G2.y0 else pre(Adder3.Adder1.XOR.G2.x);
//     Adder3.Adder1.XOR.G2.lh := Adder3.Adder1.XOR.G2.delayTable[Adder3.Adder1.XOR.G2.x_old,Adder3.Adder1.XOR.G2.x];
//     Adder3.Adder1.XOR.G2.delayTime := if Adder3.Adder1.XOR.G2.lh > 0 then Adder3.Adder1.XOR.G2.tLH else if Adder3.Adder1.XOR.G2.lh < 0 then Adder3.Adder1.XOR.G2.tHL else 0.0;
//     Adder3.Adder1.XOR.G2.t_next := time + Adder3.Adder1.XOR.G2.delayTime;
//     if Adder3.Adder1.XOR.G2.lh == 0 OR abs(Adder3.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder3.Adder1.XOR.G2.y_auxiliary := Adder3.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder3.Adder1.XOR.G2.t_next then
//     Adder3.Adder1.XOR.G2.y_auxiliary := Adder3.Adder1.XOR.G2.x;
//   end when;
//   Adder3.Adder1.XOR.G2.y := if Adder3.Adder1.XOR.G2.tLH > 0.0 OR Adder3.Adder1.XOR.G2.tHL > 0.0 then Adder3.Adder1.XOR.G2.y_auxiliary else Adder3.Adder1.XOR.G2.x;
//   when {initial(),(Adder4.Adder2.AND.G2.tLH > 0.0 OR Adder4.Adder2.AND.G2.tHL > 0.0) AND change(Adder4.Adder2.AND.G2.x) AND  NOT initial()} then
//     Adder4.Adder2.AND.G2.x_old := if initial() OR pre(Adder4.Adder2.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder4.Adder2.AND.G2.y0 else pre(Adder4.Adder2.AND.G2.x);
//     Adder4.Adder2.AND.G2.lh := Adder4.Adder2.AND.G2.delayTable[Adder4.Adder2.AND.G2.x_old,Adder4.Adder2.AND.G2.x];
//     Adder4.Adder2.AND.G2.delayTime := if Adder4.Adder2.AND.G2.lh > 0 then Adder4.Adder2.AND.G2.tLH else if Adder4.Adder2.AND.G2.lh < 0 then Adder4.Adder2.AND.G2.tHL else 0.0;
//     Adder4.Adder2.AND.G2.t_next := time + Adder4.Adder2.AND.G2.delayTime;
//     if Adder4.Adder2.AND.G2.lh == 0 OR abs(Adder4.Adder2.AND.G2.delayTime) < 1e-60 then
//       Adder4.Adder2.AND.G2.y_auxiliary := Adder4.Adder2.AND.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder2.AND.G2.t_next then
//     Adder4.Adder2.AND.G2.y_auxiliary := Adder4.Adder2.AND.G2.x;
//   end when;
//   Adder4.Adder2.AND.G2.y := if Adder4.Adder2.AND.G2.tLH > 0.0 OR Adder4.Adder2.AND.G2.tHL > 0.0 then Adder4.Adder2.AND.G2.y_auxiliary else Adder4.Adder2.AND.G2.x;
//   when {initial(),(Adder4.Adder2.XOR.G2.tLH > 0.0 OR Adder4.Adder2.XOR.G2.tHL > 0.0) AND change(Adder4.Adder2.XOR.G2.x) AND  NOT initial()} then
//     Adder4.Adder2.XOR.G2.x_old := if initial() OR pre(Adder4.Adder2.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder4.Adder2.XOR.G2.y0 else pre(Adder4.Adder2.XOR.G2.x);
//     Adder4.Adder2.XOR.G2.lh := Adder4.Adder2.XOR.G2.delayTable[Adder4.Adder2.XOR.G2.x_old,Adder4.Adder2.XOR.G2.x];
//     Adder4.Adder2.XOR.G2.delayTime := if Adder4.Adder2.XOR.G2.lh > 0 then Adder4.Adder2.XOR.G2.tLH else if Adder4.Adder2.XOR.G2.lh < 0 then Adder4.Adder2.XOR.G2.tHL else 0.0;
//     Adder4.Adder2.XOR.G2.t_next := time + Adder4.Adder2.XOR.G2.delayTime;
//     if Adder4.Adder2.XOR.G2.lh == 0 OR abs(Adder4.Adder2.XOR.G2.delayTime) < 1e-60 then
//       Adder4.Adder2.XOR.G2.y_auxiliary := Adder4.Adder2.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder2.XOR.G2.t_next then
//     Adder4.Adder2.XOR.G2.y_auxiliary := Adder4.Adder2.XOR.G2.x;
//   end when;
//   Adder4.Adder2.XOR.G2.y := if Adder4.Adder2.XOR.G2.tLH > 0.0 OR Adder4.Adder2.XOR.G2.tHL > 0.0 then Adder4.Adder2.XOR.G2.y_auxiliary else Adder4.Adder2.XOR.G2.x;
//   when {initial(),(Adder4.Adder1.AND.G2.tLH > 0.0 OR Adder4.Adder1.AND.G2.tHL > 0.0) AND change(Adder4.Adder1.AND.G2.x) AND  NOT initial()} then
//     Adder4.Adder1.AND.G2.x_old := if initial() OR pre(Adder4.Adder1.AND.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder4.Adder1.AND.G2.y0 else pre(Adder4.Adder1.AND.G2.x);
//     Adder4.Adder1.AND.G2.lh := Adder4.Adder1.AND.G2.delayTable[Adder4.Adder1.AND.G2.x_old,Adder4.Adder1.AND.G2.x];
//     Adder4.Adder1.AND.G2.delayTime := if Adder4.Adder1.AND.G2.lh > 0 then Adder4.Adder1.AND.G2.tLH else if Adder4.Adder1.AND.G2.lh < 0 then Adder4.Adder1.AND.G2.tHL else 0.0;
//     Adder4.Adder1.AND.G2.t_next := time + Adder4.Adder1.AND.G2.delayTime;
//     if Adder4.Adder1.AND.G2.lh == 0 OR abs(Adder4.Adder1.AND.G2.delayTime) < 1e-60 then
//       Adder4.Adder1.AND.G2.y_auxiliary := Adder4.Adder1.AND.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder1.AND.G2.t_next then
//     Adder4.Adder1.AND.G2.y_auxiliary := Adder4.Adder1.AND.G2.x;
//   end when;
//   Adder4.Adder1.AND.G2.y := if Adder4.Adder1.AND.G2.tLH > 0.0 OR Adder4.Adder1.AND.G2.tHL > 0.0 then Adder4.Adder1.AND.G2.y_auxiliary else Adder4.Adder1.AND.G2.x;
//   when {initial(),(Adder4.Adder1.XOR.G2.tLH > 0.0 OR Adder4.Adder1.XOR.G2.tHL > 0.0) AND change(Adder4.Adder1.XOR.G2.x) AND  NOT initial()} then
//     Adder4.Adder1.XOR.G2.x_old := if initial() OR pre(Adder4.Adder1.XOR.G2.x) == DAE.CAST(ENUM TYPE, 0) then Adder4.Adder1.XOR.G2.y0 else pre(Adder4.Adder1.XOR.G2.x);
//     Adder4.Adder1.XOR.G2.lh := Adder4.Adder1.XOR.G2.delayTable[Adder4.Adder1.XOR.G2.x_old,Adder4.Adder1.XOR.G2.x];
//     Adder4.Adder1.XOR.G2.delayTime := if Adder4.Adder1.XOR.G2.lh > 0 then Adder4.Adder1.XOR.G2.tLH else if Adder4.Adder1.XOR.G2.lh < 0 then Adder4.Adder1.XOR.G2.tHL else 0.0;
//     Adder4.Adder1.XOR.G2.t_next := time + Adder4.Adder1.XOR.G2.delayTime;
//     if Adder4.Adder1.XOR.G2.lh == 0 OR abs(Adder4.Adder1.XOR.G2.delayTime) < 1e-60 then
//       Adder4.Adder1.XOR.G2.y_auxiliary := Adder4.Adder1.XOR.G2.x;
//     end if;
//   elsewhen time >= Adder4.Adder1.XOR.G2.t_next then
//     Adder4.Adder1.XOR.G2.y_auxiliary := Adder4.Adder1.XOR.G2.x;
//   end when;
//   Adder4.Adder1.XOR.G2.y := if Adder4.Adder1.XOR.G2.tLH > 0.0 OR Adder4.Adder1.XOR.G2.tHL > 0.0 then Adder4.Adder1.XOR.G2.y_auxiliary else Adder4.Adder1.XOR.G2.x;
// end Modelica.Electrical.Digital.Examples.Adder4;
// "
// "[Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Adder4 completed successfully.
// 
// [Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Adder4 has 1617 equation(s) and 1617 variable(s).
// 1472 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Adder4
// [Digital.mo:499:7-503:28:writable] Warning: Component Set has the same name as its type Modelica.Electrical.Digital.Examples.Adder4.Sources.Set.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Adder4.exe Modelica.Electrical.Digital.Examples.Adder4.cpp Modelica.Electrical.Digital.Examples.Adder4_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Adder4_records.c

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11631: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11646: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11652: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11655: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11658: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11661: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11664: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11673: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11676: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11679: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11682: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11685: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11688: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11712: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11741: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11770: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11799: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11828: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11857: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11886: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11915: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11926: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11928: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11935: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11937: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11944: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11946: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11953: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11955: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11962: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11964: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11971: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11973: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11980: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11982: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11989: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11991: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:11998: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12000: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12007: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12009: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12016: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12018: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12025: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12027: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12034: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12036: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12043: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12045: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12052: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12054: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12061: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12063: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE_output2()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12682: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12682: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12684: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12721: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12723: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12739: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12739: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12741: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12778: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12780: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12796: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12796: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12798: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12835: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12837: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12853: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12853: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12855: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12892: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12894: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12910: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12910: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12912: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12949: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12951: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12967: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12967: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:12969: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13006: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13008: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13024: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13024: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13026: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13063: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13065: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13081: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13081: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13083: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13120: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13122: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13138: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13138: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13140: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13177: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13179: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13195: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13195: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13197: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13234: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13236: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13252: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13252: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13254: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13291: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13293: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13309: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13309: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13311: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13348: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13350: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13366: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13366: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13368: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13405: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13407: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13423: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13423: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13425: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13462: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13464: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13480: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13480: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13482: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13519: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13521: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13537: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13537: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13539: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13576: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13578: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_zeroCrossing(fortran_integer*, double*, double*, fortran_integer*, double*, double*, fortran_integer*)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13849: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13849: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13850: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13850: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13851: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13851: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13852: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13852: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13853: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13853: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13854: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13854: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13855: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13855: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13856: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:13856: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14711: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14711: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14711: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14711: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14711: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14795: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14795: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14879: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14879: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14963: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14963: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14963: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:14963: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15050: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15134: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15218: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15218: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15218: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15218: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15302: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15302: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15302: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15302: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15389: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15389: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15389: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15389: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15896: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15896: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15896: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15896: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:15980: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16064: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16088: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16117: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16146: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16175: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16204: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16233: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16262: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16291: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16311: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16311: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16313: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16350: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16352: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16368: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16368: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16370: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16407: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16409: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16425: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16425: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16427: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16464: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16466: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16482: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16482: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16484: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16521: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16523: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16539: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16539: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16541: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16578: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16580: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16596: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16596: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16598: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16635: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16637: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16653: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16653: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16655: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16692: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16694: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16710: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16710: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16712: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16749: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16751: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16767: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16767: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16769: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16806: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16808: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16824: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16824: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16826: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16863: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16865: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16881: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16881: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16883: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16920: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16922: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16938: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16938: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16940: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16977: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16979: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16995: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16995: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:16997: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17034: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17036: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17052: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17052: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17054: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17091: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17093: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17109: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17109: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17111: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17148: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17150: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17166: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17166: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17168: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17205: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17207: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17518: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17521: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17530: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17530: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17530: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17530: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17530: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17533: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17533: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17533: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17533: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17536: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17536: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17536: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17536: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17539: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17539: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17539: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17539: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17545: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17545: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17545: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17545: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17554: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17554: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17554: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17554: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17566: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17569: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:17575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19433: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19436: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19439: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19439: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19439: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19439: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19439: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19442: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19442: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19442: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19442: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19469: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19469: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19469: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19469: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19472: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19472: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19472: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19472: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19478: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19478: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19478: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19478: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionAliasEquations()':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19778: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19780: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19787: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19789: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19796: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19798: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19805: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19807: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19814: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19816: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19823: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19825: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19832: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19834: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19841: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19843: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19850: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19852: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19859: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19861: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19868: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19870: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19877: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19879: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19886: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19888: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19895: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19897: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19904: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19906: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19913: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:19915: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20649: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20649: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20733: error: `$PD$PTables$PXorTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20733: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20733: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20733: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20733: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20817: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20817: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20817: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20817: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20817: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20901: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20985: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:20988: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21072: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21072: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21072: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21072: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21156: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21240: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21240: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21240: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21240: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21324: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21324: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21324: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21324: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21327: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21327: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21327: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21327: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21834: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21918: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21918: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21918: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:21918: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22026: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22055: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22084: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22113: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22142: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22171: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22200: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22229: error: cannot convert `double*' to `modelica_integer*' for argument `2' to `void integer_array_create(integer_array_t*, modelica_integer*, int, ...)'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22249: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22249: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22251: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22288: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22290: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22306: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22306: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22308: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22345: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22347: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22363: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22363: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22365: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22402: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22404: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22420: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22420: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22422: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22459: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22461: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22477: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22477: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22479: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22516: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22518: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22534: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22534: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22536: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22573: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22575: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22591: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22591: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22593: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22630: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22632: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22648: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22648: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22650: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22687: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22689: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22705: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22705: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22707: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22744: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22746: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22762: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22762: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22764: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22801: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22803: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22819: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22819: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22821: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22858: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22860: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22876: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22876: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22878: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22915: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22917: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22933: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22933: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22935: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22972: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22974: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22990: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22990: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:22992: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23029: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23031: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23047: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23047: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23049: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23086: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23088: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23104: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23104: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23106: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23143: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23145: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Adder4.cpp: In function `int function_onlyZeroCrossings(double*, double*)':

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23176: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23176: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23177: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23177: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23178: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23178: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23179: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23179: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23180: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23180: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23181: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23181: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23182: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23182: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23183: error: `OTHER_ASUB' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Adder4.cpp:23183: error: `OTHER_ASUB' was not declared in this scope

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Adder4] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Counter3
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.before(start = Modelica.Electrical.Digital.Interfaces.Logic.'0') "Logic value before step";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.after(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value after step";
//   parameter Real Enable.stepTime(start = 1.0) "step time";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real Clock.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real Clock.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real Clock.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Clock.y "Connector of Digital output signal";
//   protected Real Clock.t_i(quantity = "Time", unit = "s", start = Clock.startTime) "Start time of current period";
//   protected Real Clock.t_width(quantity = "Time", unit = "s") = Clock.period * Clock.width / 100.0;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q2;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF1.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.k;
//   parameter Real Counter.FF1.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.y0 = Counter.FF1.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS1.TD1.x_delayed;
//   parameter Real Counter.FF1.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q0 = Counter.FF1.q0 "initial value of output";
//   parameter Integer Counter.FF1.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF1.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF1.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.y0 = Counter.FF1.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF1.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF1.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF1.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF2.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.k;
//   parameter Real Counter.FF2.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.y0 = Counter.FF2.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS1.TD1.x_delayed;
//   parameter Real Counter.FF2.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q0 = Counter.FF2.q0 "initial value of output";
//   parameter Integer Counter.FF2.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF2.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF2.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.y0 = Counter.FF2.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF2.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF2.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF2.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF3.delayTime(quantity = "Time", unit = "s") = 0.001 "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.k;
//   parameter Real Counter.FF3.RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.y0 = Counter.FF3.RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS1.TD1.x_delayed;
//   parameter Real Counter.FF3.RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF3.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q0 = Counter.FF3.q0 "initial value of output";
//   parameter Integer Counter.FF3.RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF3.RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF3.RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.y0 = Counter.FF3.RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.RS2.TD1.x_delayed;
//   parameter Integer Counter.FF3.And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF3.And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF3.Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q1;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0;
// equation
//   Counter.FF1.RS1.Nor1.auxiliary[1] = Counter.FF1.RS1.Nor1.x[1];
//   Counter.FF1.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor1.auxiliary[1],Counter.FF1.RS1.Nor1.x[2]];
//   Counter.FF1.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor1.auxiliary[2]]);
//   Counter.FF1.RS1.Nor2.auxiliary[1] = Counter.FF1.RS1.Nor2.x[1];
//   Counter.FF1.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS1.Nor2.auxiliary[1],Counter.FF1.RS1.Nor2.x[2]];
//   Counter.FF1.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS1.Nor2.auxiliary[2]]);
//   Counter.FF1.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF1.RS1.TD1.x),Counter.FF1.RS1.TD1.delayTime,Counter.FF1.RS1.TD1.delayTime)));
//   Counter.FF1.RS1.TD1.y = if Counter.FF1.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS1.TD1.delayTime then Counter.FF1.RS1.TD1.x_delayed else Counter.FF1.RS1.TD1.y0 else pre(Counter.FF1.RS1.TD1.x);
//   Counter.FF1.RS2.Nor1.auxiliary[1] = Counter.FF1.RS2.Nor1.x[1];
//   Counter.FF1.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor1.auxiliary[1],Counter.FF1.RS2.Nor1.x[2]];
//   Counter.FF1.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor1.auxiliary[2]]);
//   Counter.FF1.RS2.Nor2.auxiliary[1] = Counter.FF1.RS2.Nor2.x[1];
//   Counter.FF1.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF1.RS2.Nor2.auxiliary[1],Counter.FF1.RS2.Nor2.x[2]];
//   Counter.FF1.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF1.RS2.Nor2.auxiliary[2]]);
//   Counter.FF1.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF1.RS2.TD1.x),Counter.FF1.RS2.TD1.delayTime,Counter.FF1.RS2.TD1.delayTime)));
//   Counter.FF1.RS2.TD1.y = if Counter.FF1.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF1.RS2.TD1.delayTime then Counter.FF1.RS2.TD1.x_delayed else Counter.FF1.RS2.TD1.y0 else pre(Counter.FF1.RS2.TD1.x);
//   Counter.FF1.And1.auxiliary[1] = Counter.FF1.And1.x[1];
//   Counter.FF1.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[1],Counter.FF1.And1.x[2]];
//   Counter.FF1.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And1.auxiliary[2],Counter.FF1.And1.x[3]];
//   Counter.FF1.And1.y = pre(Counter.FF1.And1.auxiliary[3]);
//   Counter.FF1.And2.auxiliary[1] = Counter.FF1.And2.x[1];
//   Counter.FF1.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[1],Counter.FF1.And2.x[2]];
//   Counter.FF1.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF1.And2.auxiliary[2],Counter.FF1.And2.x[3]];
//   Counter.FF1.And2.y = pre(Counter.FF1.And2.auxiliary[3]);
//   Counter.FF1.And3.auxiliary[1] = Counter.FF1.And3.x[1];
//   Counter.FF1.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And3.auxiliary[1],Counter.FF1.And3.x[2]];
//   Counter.FF1.And3.y = pre(Counter.FF1.And3.auxiliary[2]);
//   Counter.FF1.And4.auxiliary[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF1.And4.auxiliary[1],Counter.FF1.And4.x[2]];
//   Counter.FF1.And4.y = pre(Counter.FF1.And4.auxiliary[2]);
//   Counter.FF1.Not1.auxiliary = D.Tables.NotTable[Counter.FF1.Not1.x];
//   Counter.FF1.Not1.y = pre(Counter.FF1.Not1.auxiliary);
//   Counter.FF2.RS1.Nor1.auxiliary[1] = Counter.FF2.RS1.Nor1.x[1];
//   Counter.FF2.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor1.auxiliary[1],Counter.FF2.RS1.Nor1.x[2]];
//   Counter.FF2.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor1.auxiliary[2]]);
//   Counter.FF2.RS1.Nor2.auxiliary[1] = Counter.FF2.RS1.Nor2.x[1];
//   Counter.FF2.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS1.Nor2.auxiliary[1],Counter.FF2.RS1.Nor2.x[2]];
//   Counter.FF2.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS1.Nor2.auxiliary[2]]);
//   Counter.FF2.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF2.RS1.TD1.x),Counter.FF2.RS1.TD1.delayTime,Counter.FF2.RS1.TD1.delayTime)));
//   Counter.FF2.RS1.TD1.y = if Counter.FF2.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS1.TD1.delayTime then Counter.FF2.RS1.TD1.x_delayed else Counter.FF2.RS1.TD1.y0 else pre(Counter.FF2.RS1.TD1.x);
//   Counter.FF2.RS2.Nor1.auxiliary[1] = Counter.FF2.RS2.Nor1.x[1];
//   Counter.FF2.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor1.auxiliary[1],Counter.FF2.RS2.Nor1.x[2]];
//   Counter.FF2.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor1.auxiliary[2]]);
//   Counter.FF2.RS2.Nor2.auxiliary[1] = Counter.FF2.RS2.Nor2.x[1];
//   Counter.FF2.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF2.RS2.Nor2.auxiliary[1],Counter.FF2.RS2.Nor2.x[2]];
//   Counter.FF2.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF2.RS2.Nor2.auxiliary[2]]);
//   Counter.FF2.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF2.RS2.TD1.x),Counter.FF2.RS2.TD1.delayTime,Counter.FF2.RS2.TD1.delayTime)));
//   Counter.FF2.RS2.TD1.y = if Counter.FF2.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF2.RS2.TD1.delayTime then Counter.FF2.RS2.TD1.x_delayed else Counter.FF2.RS2.TD1.y0 else pre(Counter.FF2.RS2.TD1.x);
//   Counter.FF2.And1.auxiliary[1] = Counter.FF2.And1.x[1];
//   Counter.FF2.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[1],Counter.FF2.And1.x[2]];
//   Counter.FF2.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And1.auxiliary[2],Counter.FF2.And1.x[3]];
//   Counter.FF2.And1.y = pre(Counter.FF2.And1.auxiliary[3]);
//   Counter.FF2.And2.auxiliary[1] = Counter.FF2.And2.x[1];
//   Counter.FF2.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[1],Counter.FF2.And2.x[2]];
//   Counter.FF2.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF2.And2.auxiliary[2],Counter.FF2.And2.x[3]];
//   Counter.FF2.And2.y = pre(Counter.FF2.And2.auxiliary[3]);
//   Counter.FF2.And3.auxiliary[1] = Counter.FF2.And3.x[1];
//   Counter.FF2.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And3.auxiliary[1],Counter.FF2.And3.x[2]];
//   Counter.FF2.And3.y = pre(Counter.FF2.And3.auxiliary[2]);
//   Counter.FF2.And4.auxiliary[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF2.And4.auxiliary[1],Counter.FF2.And4.x[2]];
//   Counter.FF2.And4.y = pre(Counter.FF2.And4.auxiliary[2]);
//   Counter.FF2.Not1.auxiliary = D.Tables.NotTable[Counter.FF2.Not1.x];
//   Counter.FF2.Not1.y = pre(Counter.FF2.Not1.auxiliary);
//   Counter.FF3.RS1.Nor1.auxiliary[1] = Counter.FF3.RS1.Nor1.x[1];
//   Counter.FF3.RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor1.auxiliary[1],Counter.FF3.RS1.Nor1.x[2]];
//   Counter.FF3.RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor1.auxiliary[2]]);
//   Counter.FF3.RS1.Nor2.auxiliary[1] = Counter.FF3.RS1.Nor2.x[1];
//   Counter.FF3.RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS1.Nor2.auxiliary[1],Counter.FF3.RS1.Nor2.x[2]];
//   Counter.FF3.RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS1.Nor2.auxiliary[2]]);
//   Counter.FF3.RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF3.RS1.TD1.x),Counter.FF3.RS1.TD1.delayTime,Counter.FF3.RS1.TD1.delayTime)));
//   Counter.FF3.RS1.TD1.y = if Counter.FF3.RS1.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS1.TD1.delayTime then Counter.FF3.RS1.TD1.x_delayed else Counter.FF3.RS1.TD1.y0 else pre(Counter.FF3.RS1.TD1.x);
//   Counter.FF3.RS2.Nor1.auxiliary[1] = Counter.FF3.RS2.Nor1.x[1];
//   Counter.FF3.RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor1.auxiliary[1],Counter.FF3.RS2.Nor1.x[2]];
//   Counter.FF3.RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor1.auxiliary[2]]);
//   Counter.FF3.RS2.Nor2.auxiliary[1] = Counter.FF3.RS2.Nor2.x[1];
//   Counter.FF3.RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF3.RS2.Nor2.auxiliary[1],Counter.FF3.RS2.Nor2.x[2]];
//   Counter.FF3.RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF3.RS2.Nor2.auxiliary[2]]);
//   Counter.FF3.RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF3.RS2.TD1.x),Counter.FF3.RS2.TD1.delayTime,Counter.FF3.RS2.TD1.delayTime)));
//   Counter.FF3.RS2.TD1.y = if Counter.FF3.RS2.TD1.delayTime > 0.0 then if time >= Counter.FF3.RS2.TD1.delayTime then Counter.FF3.RS2.TD1.x_delayed else Counter.FF3.RS2.TD1.y0 else pre(Counter.FF3.RS2.TD1.x);
//   Counter.FF3.And1.auxiliary[1] = Counter.FF3.And1.x[1];
//   Counter.FF3.And1.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[1],Counter.FF3.And1.x[2]];
//   Counter.FF3.And1.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And1.auxiliary[2],Counter.FF3.And1.x[3]];
//   Counter.FF3.And1.y = pre(Counter.FF3.And1.auxiliary[3]);
//   Counter.FF3.And2.auxiliary[1] = Counter.FF3.And2.x[1];
//   Counter.FF3.And2.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[1],Counter.FF3.And2.x[2]];
//   Counter.FF3.And2.auxiliary[3] = D.Tables.AndTable[Counter.FF3.And2.auxiliary[2],Counter.FF3.And2.x[3]];
//   Counter.FF3.And2.y = pre(Counter.FF3.And2.auxiliary[3]);
//   Counter.FF3.And3.auxiliary[1] = Counter.FF3.And3.x[1];
//   Counter.FF3.And3.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And3.auxiliary[1],Counter.FF3.And3.x[2]];
//   Counter.FF3.And3.y = pre(Counter.FF3.And3.auxiliary[2]);
//   Counter.FF3.And4.auxiliary[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And4.auxiliary[2] = D.Tables.AndTable[Counter.FF3.And4.auxiliary[1],Counter.FF3.And4.x[2]];
//   Counter.FF3.And4.y = pre(Counter.FF3.And4.auxiliary[2]);
//   Counter.FF3.Not1.auxiliary = D.Tables.NotTable[Counter.FF3.Not1.x];
//   Counter.FF3.Not1.y = pre(Counter.FF3.Not1.auxiliary);
//   Clock.y = Counter.count;
//   Counter.enable = Enable.y;
//   Counter.FF2.q = Counter.FF3.clk;
//   Counter.FF2.q = Counter.q1;
//   Counter.FF1.q = Counter.FF2.clk;
//   Counter.FF1.q = Counter.q0;
//   Counter.FF3.q = Counter.q2;
//   Counter.FF1.j = Counter.FF1.k;
//   Counter.FF1.j = Counter.FF2.j;
//   Counter.FF1.j = Counter.FF2.k;
//   Counter.FF1.j = Counter.FF3.j;
//   Counter.FF1.j = Counter.FF3.k;
//   Counter.FF1.j = Counter.enable;
//   Counter.FF1.clk = Counter.count;
//   Counter.FF3.And2.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.And2.x[1] = Counter.FF3.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.RS1.qn;
//   Counter.FF3.And1.x[3] = Counter.FF3.q;
//   Counter.FF3.And1.x[2] = Counter.FF3.j;
//   Counter.FF3.And3.x[1] = Counter.FF3.And4.x[1];
//   Counter.FF3.And3.x[1] = Counter.FF3.Not1.y;
//   Counter.FF3.And1.x[1] = Counter.FF3.And2.x[3];
//   Counter.FF3.And1.x[1] = Counter.FF3.Not1.x;
//   Counter.FF3.And1.x[1] = Counter.FF3.clk;
//   Counter.FF3.And3.x[2] = Counter.FF3.RS2.q;
//   Counter.FF3.And4.x[2] = Counter.FF3.RS2.qn;
//   Counter.FF3.And3.y = Counter.FF3.RS1.s;
//   Counter.FF3.And4.y = Counter.FF3.RS1.r;
//   Counter.FF3.And2.x[2] = Counter.FF3.k;
//   Counter.FF3.And1.y = Counter.FF3.RS2.s;
//   Counter.FF3.And2.y = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.TD1.x;
//   Counter.FF3.RS2.Nor1.y = Counter.FF3.RS2.qn;
//   Counter.FF3.RS2.Nor2.x[2] = Counter.FF3.RS2.TD1.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.Nor2.y;
//   Counter.FF3.RS2.Nor1.x[1] = Counter.FF3.RS2.q;
//   Counter.FF3.RS2.Nor2.x[1] = Counter.FF3.RS2.r;
//   Counter.FF3.RS2.Nor1.x[2] = Counter.FF3.RS2.s;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.TD1.x;
//   Counter.FF3.RS1.Nor1.y = Counter.FF3.RS1.qn;
//   Counter.FF3.RS1.Nor2.x[2] = Counter.FF3.RS1.TD1.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.Nor2.y;
//   Counter.FF3.RS1.Nor1.x[1] = Counter.FF3.RS1.q;
//   Counter.FF3.RS1.Nor2.x[1] = Counter.FF3.RS1.r;
//   Counter.FF3.RS1.Nor1.x[2] = Counter.FF3.RS1.s;
//   Counter.FF2.And2.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.And2.x[1] = Counter.FF2.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.RS1.qn;
//   Counter.FF2.And1.x[3] = Counter.FF2.q;
//   Counter.FF2.And1.x[2] = Counter.FF2.j;
//   Counter.FF2.And3.x[1] = Counter.FF2.And4.x[1];
//   Counter.FF2.And3.x[1] = Counter.FF2.Not1.y;
//   Counter.FF2.And1.x[1] = Counter.FF2.And2.x[3];
//   Counter.FF2.And1.x[1] = Counter.FF2.Not1.x;
//   Counter.FF2.And1.x[1] = Counter.FF2.clk;
//   Counter.FF2.And3.x[2] = Counter.FF2.RS2.q;
//   Counter.FF2.And4.x[2] = Counter.FF2.RS2.qn;
//   Counter.FF2.And3.y = Counter.FF2.RS1.s;
//   Counter.FF2.And4.y = Counter.FF2.RS1.r;
//   Counter.FF2.And2.x[2] = Counter.FF2.k;
//   Counter.FF2.And1.y = Counter.FF2.RS2.s;
//   Counter.FF2.And2.y = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.TD1.x;
//   Counter.FF2.RS2.Nor1.y = Counter.FF2.RS2.qn;
//   Counter.FF2.RS2.Nor2.x[2] = Counter.FF2.RS2.TD1.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.Nor2.y;
//   Counter.FF2.RS2.Nor1.x[1] = Counter.FF2.RS2.q;
//   Counter.FF2.RS2.Nor2.x[1] = Counter.FF2.RS2.r;
//   Counter.FF2.RS2.Nor1.x[2] = Counter.FF2.RS2.s;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.TD1.x;
//   Counter.FF2.RS1.Nor1.y = Counter.FF2.RS1.qn;
//   Counter.FF2.RS1.Nor2.x[2] = Counter.FF2.RS1.TD1.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.Nor2.y;
//   Counter.FF2.RS1.Nor1.x[1] = Counter.FF2.RS1.q;
//   Counter.FF2.RS1.Nor2.x[1] = Counter.FF2.RS1.r;
//   Counter.FF2.RS1.Nor1.x[2] = Counter.FF2.RS1.s;
//   Counter.FF1.And2.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.And2.x[1] = Counter.FF1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.RS1.qn;
//   Counter.FF1.And1.x[3] = Counter.FF1.q;
//   Counter.FF1.And1.x[2] = Counter.FF1.j;
//   Counter.FF1.And3.x[1] = Counter.FF1.And4.x[1];
//   Counter.FF1.And3.x[1] = Counter.FF1.Not1.y;
//   Counter.FF1.And1.x[1] = Counter.FF1.And2.x[3];
//   Counter.FF1.And1.x[1] = Counter.FF1.Not1.x;
//   Counter.FF1.And1.x[1] = Counter.FF1.clk;
//   Counter.FF1.And3.x[2] = Counter.FF1.RS2.q;
//   Counter.FF1.And4.x[2] = Counter.FF1.RS2.qn;
//   Counter.FF1.And3.y = Counter.FF1.RS1.s;
//   Counter.FF1.And4.y = Counter.FF1.RS1.r;
//   Counter.FF1.And2.x[2] = Counter.FF1.k;
//   Counter.FF1.And1.y = Counter.FF1.RS2.s;
//   Counter.FF1.And2.y = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.TD1.x;
//   Counter.FF1.RS2.Nor1.y = Counter.FF1.RS2.qn;
//   Counter.FF1.RS2.Nor2.x[2] = Counter.FF1.RS2.TD1.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.Nor2.y;
//   Counter.FF1.RS2.Nor1.x[1] = Counter.FF1.RS2.q;
//   Counter.FF1.RS2.Nor2.x[1] = Counter.FF1.RS2.r;
//   Counter.FF1.RS2.Nor1.x[2] = Counter.FF1.RS2.s;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.TD1.x;
//   Counter.FF1.RS1.Nor1.y = Counter.FF1.RS1.qn;
//   Counter.FF1.RS1.Nor2.x[2] = Counter.FF1.RS1.TD1.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.Nor2.y;
//   Counter.FF1.RS1.Nor1.x[1] = Counter.FF1.RS1.q;
//   Counter.FF1.RS1.Nor2.x[1] = Counter.FF1.RS1.r;
//   Counter.FF1.RS1.Nor1.x[2] = Counter.FF1.RS1.s;
// algorithm
//   when initial() then
//     Enable.y := Enable.before;
//   end when;
//   if time >= Enable.stepTime then
//     Enable.y := Enable.after;
//   else
//     Enable.y := Enable.before;
//   end if;
//   when sample(Clock.startTime,Clock.period) then
//     Clock.t_i := time;
//   end when;
//   Clock.y := if  NOT time >= Clock.startTime OR time >= Clock.t_i + Clock.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.Counter3;
// "
// "[Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Counter3 completed successfully.
// 
// [Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Counter3 has 207 equation(s) and 207 variable(s).
// 131 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Counter3
// [Digital.mo:610:7-611:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter3.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Counter3.exe Modelica.Electrical.Digital.Examples.Counter3.cpp Modelica.Electrical.Digital.Examples.Counter3_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Counter3_records.c

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2278: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2287: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2288: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2288: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2288: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2288: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2291: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2291: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2291: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2291: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2293: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2293: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2295: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2296: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2296: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2300: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2307: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2309: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2317: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2317: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2317: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2317: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2318: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2318: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2320: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2320: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2320: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2320: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2321: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2321: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2325: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2332: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2334: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2342: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2342: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2342: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2342: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2348: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2348: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2348: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2348: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2351: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2354: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2358: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2358: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2358: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2358: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2359: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2359: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2359: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2359: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2360: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2360: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2362: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2362: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2362: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2362: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2363: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2367: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2374: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2376: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2385: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2385: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2388: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2388: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2392: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2399: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2401: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2421: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2421: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2421: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2421: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2427: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2427: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2429: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2429: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2429: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2429: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2430: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2430: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2434: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2441: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2443: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2452: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2452: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2454: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2455: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2455: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2459: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2466: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2468: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2476: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2476: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2476: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:2476: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3043: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3046: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3046: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3049: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3049: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3049: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3049: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3052: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3053: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3056: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3060: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3061: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3061: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3065: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3072: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3074: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3083: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3083: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3085: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3086: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3086: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3090: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3097: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3099: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3107: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3113: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3116: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3119: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3120: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3120: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3120: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3120: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3123: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3128: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3132: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3139: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3141: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3150: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3150: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3152: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3153: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3153: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3157: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3164: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3166: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3174: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3180: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3183: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3183: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3183: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3183: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3186: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3186: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3186: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3186: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3187: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3187: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3187: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3187: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3190: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3190: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3190: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3190: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3191: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3191: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3191: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3191: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3192: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3192: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3194: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3195: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3195: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3199: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3206: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3208: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3216: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3216: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3216: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3216: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3217: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3219: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3220: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3220: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3224: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3231: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3233: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3241: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3433: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3433: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3434: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3434: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3434: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3436: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3437: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3437: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3441: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3446: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3448: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3457: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3459: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3459: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3459: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3459: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3460: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3464: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3469: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3471: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3479: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3497: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3497: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3500: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3500: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3504: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3509: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3511: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3522: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3522: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3522: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3522: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3523: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3523: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3527: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3532: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3534: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3542: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3543: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3543: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3543: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3543: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3547: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3550: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3559: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3562: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3562: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3562: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3562: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3563: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3567: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3572: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3574: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3583: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3583: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3586: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3586: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3590: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3595: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3597: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3606: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3613: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3613: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3613: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3613: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3951: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3954: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3954: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3957: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3960: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3960: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3960: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3960: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3961: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3961: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3961: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3961: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3964: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3964: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3964: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3964: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3965: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3965: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3965: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3965: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3966: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3966: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3968: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3968: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3969: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3969: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3973: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3980: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3982: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3990: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3990: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3990: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3990: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3991: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3993: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3993: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3993: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3993: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3994: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3994: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:3998: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4005: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4007: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4021: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4024: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4027: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4027: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4027: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4027: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4028: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4028: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4028: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4028: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4031: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4031: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4031: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4031: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4032: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4032: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4032: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4032: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4033: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4033: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4035: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4035: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4035: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4035: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4036: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4040: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4047: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4049: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4057: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4058: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4060: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4061: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4061: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4065: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4072: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4074: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4082: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4088: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4091: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4094: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4094: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4094: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4094: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4095: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4095: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4095: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4095: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4098: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4098: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4098: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4098: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4099: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4099: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4099: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4099: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4100: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4100: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4102: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4102: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4102: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4102: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4103: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4103: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4107: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4114: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4116: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4124: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4125: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4127: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4128: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4128: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4132: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4139: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4141: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4149: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4409: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4412: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4415: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4418: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4419: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4419: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4419: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4419: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4424: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4427: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4427: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4431: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4438: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4440: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4448: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4451: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4452: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4452: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4456: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4463: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4465: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4473: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4479: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4490: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4498: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4505: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4507: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4515: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4523: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4530: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4532: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4540: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4540: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4540: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4540: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4546: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4553: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4556: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4557: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4558: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4558: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4560: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4561: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4561: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4565: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4572: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4574: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4583: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4583: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4585: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4586: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4586: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4590: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4597: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4599: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter3.cpp:4607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Counter3] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// "class Modelica.Electrical.Digital.Examples.Counter
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.before(start = Modelica.Electrical.Digital.Interfaces.Logic.'0') "Logic value before step";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.after(start = Modelica.Electrical.Digital.Interfaces.Logic.'1') "Logic value after step";
//   parameter Real Enable.stepTime(start = 1.0) "step time";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Enable.y;
//   parameter Real Clock.startTime(quantity = "Time", unit = "s", start = 0.0) "Output = offset for time < startTime";
//   parameter Real Clock.period(quantity = "Time", unit = "s", min = 1e-60, start = 1.0) "Time for one period";
//   parameter Real Clock.width(min = 1e-60, max = 100.0, start = 50.0) "Width of pulses in % of period";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Clock.y "Connector of Digital output signal";
//   protected Real Clock.t_i(quantity = "Time", unit = "s", start = Clock.startTime) "Start time of current period";
//   protected Real Clock.t_width(quantity = "Time", unit = "s") = Clock.period * Clock.width / 100.0;
//   parameter Integer Counter.n = 4 "number of bits";
//   parameter Real Counter.delayTime(quantity = "Time", unit = "s") = 0.001 "delay of each JKFF";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q0 = Modelica.Electrical.Digital.Interfaces.Logic.'0' "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.enable;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.count;
//   parameter Real Counter.FF[1].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].k;
//   parameter Real Counter.FF[1].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[1].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.q0 = Counter.FF[1].q0 "initial value of output";
//   parameter Integer Counter.FF[1].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[1].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[1].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.y0 = Counter.FF[1].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[1].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[1].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.q0 = Counter.FF[1].q0 "initial value of output";
//   parameter Integer Counter.FF[1].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[1].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[1].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.y0 = Counter.FF[1].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[1].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[1].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[1].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[2].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].k;
//   parameter Real Counter.FF[2].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[2].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.q0 = Counter.FF[2].q0 "initial value of output";
//   parameter Integer Counter.FF[2].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[2].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[2].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.y0 = Counter.FF[2].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[2].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[2].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.q0 = Counter.FF[2].q0 "initial value of output";
//   parameter Integer Counter.FF[2].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[2].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[2].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.y0 = Counter.FF[2].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[2].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[2].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[2].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[3].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].k;
//   parameter Real Counter.FF[3].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[3].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.q0 = Counter.FF[3].q0 "initial value of output";
//   parameter Integer Counter.FF[3].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[3].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[3].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.y0 = Counter.FF[3].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[3].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[3].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.q0 = Counter.FF[3].q0 "initial value of output";
//   parameter Integer Counter.FF[3].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[3].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[3].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.y0 = Counter.FF[3].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[3].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[3].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[3].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   parameter Real Counter.FF[4].delayTime(quantity = "Time", unit = "s") = Counter.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].q0 = Counter.q0 "initial value";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].j;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].qn "not Q";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].clk;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].k;
//   parameter Real Counter.FF[4].RS1.delayTime(quantity = "Time", unit = "s") = Counter.FF[4].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.q0 = Counter.FF[4].q0 "initial value of output";
//   parameter Integer Counter.FF[4].RS1.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].RS1.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[4].RS1.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[4].RS1.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.y0 = Counter.FF[4].RS1.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS1.TD1.x_delayed;
//   parameter Real Counter.FF[4].RS2.delayTime(quantity = "Time", unit = "s") = Counter.FF[4].delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.q0 = Counter.FF[4].q0 "initial value of output";
//   parameter Integer Counter.FF[4].RS2.Nor1.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].RS2.Nor2.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.Nor2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.s;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.r;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.q;
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.qn;
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.x(start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true) "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.y "Connector of Digital output signal";
//   parameter Real Counter.FF[4].RS2.TD1.delayTime(quantity = "Time", unit = "s", start = 0.0) = Counter.FF[4].RS2.delayTime "delay time";
//   parameter enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.y0 = Counter.FF[4].RS2.q0 "initial value of output";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].RS2.TD1.x_delayed;
//   parameter Integer Counter.FF[4].And1.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And1.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And2.n(min = 2) = 3 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[2] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.x[3] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And2.auxiliary[3](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And3.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And3.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   parameter Integer Counter.FF[4].And4.n(min = 2) = 2 "Number of inputs";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.x[1] "Connector of Digital input signal vector";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.x[2] "Connector of Digital input signal vector";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.auxiliary[1](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].And4.auxiliary[2](start = Modelica.Electrical.Digital.Interfaces.Logic.'U', fixed = true);
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.x "Connector of Digital input signal";
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.y "Connector of Digital output signal";
//   protected enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.FF[4].Not1.auxiliary(start = Modelica.Electrical.Digital.Interfaces.Logic.'0', fixed = true);
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[1];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[2];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[3];
//   output enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Counter.q[4];
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q0.x[1];
//   output Real Q0.y[1];
//   parameter Integer Q0.n(min = 1, start = 1) "signal width";
//   parameter Real Q0.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q0.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q0.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q0.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q0.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q0.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q0.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q0.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q0.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q1.x[1];
//   output Real Q1.y[1];
//   parameter Integer Q1.n(min = 1, start = 1) "signal width";
//   parameter Real Q1.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q1.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q1.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q1.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q1.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q1.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q1.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q1.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q1.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q2.x[1];
//   output Real Q2.y[1];
//   parameter Integer Q2.n(min = 1, start = 1) "signal width";
//   parameter Real Q2.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q2.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q2.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q2.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q2.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q2.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q2.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q2.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q2.value_m(start = 0.5) "value for digital m (Don't care)";
//   input enumeration('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-') Q3.x[1];
//   output Real Q3.y[1];
//   parameter Integer Q3.n(min = 1, start = 1) "signal width";
//   parameter Real Q3.value_U(start = 0.5) "value for digital U (uninitialized)";
//   parameter Real Q3.value_X(start = 0.5) "value for digital X (Forcing Unknown)";
//   parameter Real Q3.value_0(start = 0.0) "value for digital 0   (Forcing 0)";
//   parameter Real Q3.value_1(start = 1.0) "value for digital 1 (Forcing 1)";
//   parameter Real Q3.value_Z(start = 0.5) "value for digital Z (High Impedance)";
//   parameter Real Q3.value_W(start = 0.5) "value for digital W (Weak    Unknown)";
//   parameter Real Q3.value_L(start = 0.0) "value for digital L (Weak    0)";
//   parameter Real Q3.value_H(start = 1.0) "value for digital H (Weak    1)";
//   parameter Real Q3.value_m(start = 0.5) "value for digital m (Don't care)";
// equation
//   Counter.FF[1].RS1.Nor1.auxiliary[1] = Counter.FF[1].RS1.Nor1.x[1];
//   Counter.FF[1].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS1.Nor1.auxiliary[1],Counter.FF[1].RS1.Nor1.x[2]];
//   Counter.FF[1].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[1].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[1].RS1.Nor2.auxiliary[1] = Counter.FF[1].RS1.Nor2.x[1];
//   Counter.FF[1].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS1.Nor2.auxiliary[1],Counter.FF[1].RS1.Nor2.x[2]];
//   Counter.FF[1].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[1].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[1].RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[1].RS1.TD1.x),Counter.FF[1].RS1.TD1.delayTime,Counter.FF[1].RS1.TD1.delayTime)));
//   Counter.FF[1].RS1.TD1.y = if Counter.FF[1].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[1].RS1.TD1.delayTime then Counter.FF[1].RS1.TD1.x_delayed else Counter.FF[1].RS1.TD1.y0 else pre(Counter.FF[1].RS1.TD1.x);
//   Counter.FF[1].RS2.Nor1.auxiliary[1] = Counter.FF[1].RS2.Nor1.x[1];
//   Counter.FF[1].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS2.Nor1.auxiliary[1],Counter.FF[1].RS2.Nor1.x[2]];
//   Counter.FF[1].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[1].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[1].RS2.Nor2.auxiliary[1] = Counter.FF[1].RS2.Nor2.x[1];
//   Counter.FF[1].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[1].RS2.Nor2.auxiliary[1],Counter.FF[1].RS2.Nor2.x[2]];
//   Counter.FF[1].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[1].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[1].RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[1].RS2.TD1.x),Counter.FF[1].RS2.TD1.delayTime,Counter.FF[1].RS2.TD1.delayTime)));
//   Counter.FF[1].RS2.TD1.y = if Counter.FF[1].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[1].RS2.TD1.delayTime then Counter.FF[1].RS2.TD1.x_delayed else Counter.FF[1].RS2.TD1.y0 else pre(Counter.FF[1].RS2.TD1.x);
//   Counter.FF[1].And1.auxiliary[1] = Counter.FF[1].And1.x[1];
//   Counter.FF[1].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And1.auxiliary[1],Counter.FF[1].And1.x[2]];
//   Counter.FF[1].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[1].And1.auxiliary[2],Counter.FF[1].And1.x[3]];
//   Counter.FF[1].And1.y = pre(Counter.FF[1].And1.auxiliary[3]);
//   Counter.FF[1].And2.auxiliary[1] = Counter.FF[1].And2.x[1];
//   Counter.FF[1].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And2.auxiliary[1],Counter.FF[1].And2.x[2]];
//   Counter.FF[1].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[1].And2.auxiliary[2],Counter.FF[1].And2.x[3]];
//   Counter.FF[1].And2.y = pre(Counter.FF[1].And2.auxiliary[3]);
//   Counter.FF[1].And3.auxiliary[1] = Counter.FF[1].And3.x[1];
//   Counter.FF[1].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And3.auxiliary[1],Counter.FF[1].And3.x[2]];
//   Counter.FF[1].And3.y = pre(Counter.FF[1].And3.auxiliary[2]);
//   Counter.FF[1].And4.auxiliary[1] = Counter.FF[1].And4.x[1];
//   Counter.FF[1].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[1].And4.auxiliary[1],Counter.FF[1].And4.x[2]];
//   Counter.FF[1].And4.y = pre(Counter.FF[1].And4.auxiliary[2]);
//   Counter.FF[1].Not1.auxiliary = D.Tables.NotTable[Counter.FF[1].Not1.x];
//   Counter.FF[1].Not1.y = pre(Counter.FF[1].Not1.auxiliary);
//   Counter.FF[2].RS1.Nor1.auxiliary[1] = Counter.FF[2].RS1.Nor1.x[1];
//   Counter.FF[2].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS1.Nor1.auxiliary[1],Counter.FF[2].RS1.Nor1.x[2]];
//   Counter.FF[2].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[2].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[2].RS1.Nor2.auxiliary[1] = Counter.FF[2].RS1.Nor2.x[1];
//   Counter.FF[2].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS1.Nor2.auxiliary[1],Counter.FF[2].RS1.Nor2.x[2]];
//   Counter.FF[2].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[2].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[2].RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[2].RS1.TD1.x),Counter.FF[2].RS1.TD1.delayTime,Counter.FF[2].RS1.TD1.delayTime)));
//   Counter.FF[2].RS1.TD1.y = if Counter.FF[2].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[2].RS1.TD1.delayTime then Counter.FF[2].RS1.TD1.x_delayed else Counter.FF[2].RS1.TD1.y0 else pre(Counter.FF[2].RS1.TD1.x);
//   Counter.FF[2].RS2.Nor1.auxiliary[1] = Counter.FF[2].RS2.Nor1.x[1];
//   Counter.FF[2].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS2.Nor1.auxiliary[1],Counter.FF[2].RS2.Nor1.x[2]];
//   Counter.FF[2].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[2].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[2].RS2.Nor2.auxiliary[1] = Counter.FF[2].RS2.Nor2.x[1];
//   Counter.FF[2].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[2].RS2.Nor2.auxiliary[1],Counter.FF[2].RS2.Nor2.x[2]];
//   Counter.FF[2].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[2].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[2].RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[2].RS2.TD1.x),Counter.FF[2].RS2.TD1.delayTime,Counter.FF[2].RS2.TD1.delayTime)));
//   Counter.FF[2].RS2.TD1.y = if Counter.FF[2].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[2].RS2.TD1.delayTime then Counter.FF[2].RS2.TD1.x_delayed else Counter.FF[2].RS2.TD1.y0 else pre(Counter.FF[2].RS2.TD1.x);
//   Counter.FF[2].And1.auxiliary[1] = Counter.FF[2].And1.x[1];
//   Counter.FF[2].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And1.auxiliary[1],Counter.FF[2].And1.x[2]];
//   Counter.FF[2].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[2].And1.auxiliary[2],Counter.FF[2].And1.x[3]];
//   Counter.FF[2].And1.y = pre(Counter.FF[2].And1.auxiliary[3]);
//   Counter.FF[2].And2.auxiliary[1] = Counter.FF[2].And2.x[1];
//   Counter.FF[2].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And2.auxiliary[1],Counter.FF[2].And2.x[2]];
//   Counter.FF[2].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[2].And2.auxiliary[2],Counter.FF[2].And2.x[3]];
//   Counter.FF[2].And2.y = pre(Counter.FF[2].And2.auxiliary[3]);
//   Counter.FF[2].And3.auxiliary[1] = Counter.FF[2].And3.x[1];
//   Counter.FF[2].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And3.auxiliary[1],Counter.FF[2].And3.x[2]];
//   Counter.FF[2].And3.y = pre(Counter.FF[2].And3.auxiliary[2]);
//   Counter.FF[2].And4.auxiliary[1] = Counter.FF[2].And4.x[1];
//   Counter.FF[2].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[2].And4.auxiliary[1],Counter.FF[2].And4.x[2]];
//   Counter.FF[2].And4.y = pre(Counter.FF[2].And4.auxiliary[2]);
//   Counter.FF[2].Not1.auxiliary = D.Tables.NotTable[Counter.FF[2].Not1.x];
//   Counter.FF[2].Not1.y = pre(Counter.FF[2].Not1.auxiliary);
//   Counter.FF[3].RS1.Nor1.auxiliary[1] = Counter.FF[3].RS1.Nor1.x[1];
//   Counter.FF[3].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS1.Nor1.auxiliary[1],Counter.FF[3].RS1.Nor1.x[2]];
//   Counter.FF[3].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[3].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[3].RS1.Nor2.auxiliary[1] = Counter.FF[3].RS1.Nor2.x[1];
//   Counter.FF[3].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS1.Nor2.auxiliary[1],Counter.FF[3].RS1.Nor2.x[2]];
//   Counter.FF[3].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[3].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[3].RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[3].RS1.TD1.x),Counter.FF[3].RS1.TD1.delayTime,Counter.FF[3].RS1.TD1.delayTime)));
//   Counter.FF[3].RS1.TD1.y = if Counter.FF[3].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[3].RS1.TD1.delayTime then Counter.FF[3].RS1.TD1.x_delayed else Counter.FF[3].RS1.TD1.y0 else pre(Counter.FF[3].RS1.TD1.x);
//   Counter.FF[3].RS2.Nor1.auxiliary[1] = Counter.FF[3].RS2.Nor1.x[1];
//   Counter.FF[3].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS2.Nor1.auxiliary[1],Counter.FF[3].RS2.Nor1.x[2]];
//   Counter.FF[3].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[3].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[3].RS2.Nor2.auxiliary[1] = Counter.FF[3].RS2.Nor2.x[1];
//   Counter.FF[3].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[3].RS2.Nor2.auxiliary[1],Counter.FF[3].RS2.Nor2.x[2]];
//   Counter.FF[3].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[3].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[3].RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[3].RS2.TD1.x),Counter.FF[3].RS2.TD1.delayTime,Counter.FF[3].RS2.TD1.delayTime)));
//   Counter.FF[3].RS2.TD1.y = if Counter.FF[3].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[3].RS2.TD1.delayTime then Counter.FF[3].RS2.TD1.x_delayed else Counter.FF[3].RS2.TD1.y0 else pre(Counter.FF[3].RS2.TD1.x);
//   Counter.FF[3].And1.auxiliary[1] = Counter.FF[3].And1.x[1];
//   Counter.FF[3].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And1.auxiliary[1],Counter.FF[3].And1.x[2]];
//   Counter.FF[3].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[3].And1.auxiliary[2],Counter.FF[3].And1.x[3]];
//   Counter.FF[3].And1.y = pre(Counter.FF[3].And1.auxiliary[3]);
//   Counter.FF[3].And2.auxiliary[1] = Counter.FF[3].And2.x[1];
//   Counter.FF[3].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And2.auxiliary[1],Counter.FF[3].And2.x[2]];
//   Counter.FF[3].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[3].And2.auxiliary[2],Counter.FF[3].And2.x[3]];
//   Counter.FF[3].And2.y = pre(Counter.FF[3].And2.auxiliary[3]);
//   Counter.FF[3].And3.auxiliary[1] = Counter.FF[3].And3.x[1];
//   Counter.FF[3].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And3.auxiliary[1],Counter.FF[3].And3.x[2]];
//   Counter.FF[3].And3.y = pre(Counter.FF[3].And3.auxiliary[2]);
//   Counter.FF[3].And4.auxiliary[1] = Counter.FF[3].And4.x[1];
//   Counter.FF[3].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[3].And4.auxiliary[1],Counter.FF[3].And4.x[2]];
//   Counter.FF[3].And4.y = pre(Counter.FF[3].And4.auxiliary[2]);
//   Counter.FF[3].Not1.auxiliary = D.Tables.NotTable[Counter.FF[3].Not1.x];
//   Counter.FF[3].Not1.y = pre(Counter.FF[3].Not1.auxiliary);
//   Counter.FF[4].RS1.Nor1.auxiliary[1] = Counter.FF[4].RS1.Nor1.x[1];
//   Counter.FF[4].RS1.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS1.Nor1.auxiliary[1],Counter.FF[4].RS1.Nor1.x[2]];
//   Counter.FF[4].RS1.Nor1.y = pre(D.Tables.NotTable[Counter.FF[4].RS1.Nor1.auxiliary[2]]);
//   Counter.FF[4].RS1.Nor2.auxiliary[1] = Counter.FF[4].RS1.Nor2.x[1];
//   Counter.FF[4].RS1.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS1.Nor2.auxiliary[1],Counter.FF[4].RS1.Nor2.x[2]];
//   Counter.FF[4].RS1.Nor2.y = pre(D.Tables.NotTable[Counter.FF[4].RS1.Nor2.auxiliary[2]]);
//   Counter.FF[4].RS1.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[4].RS1.TD1.x),Counter.FF[4].RS1.TD1.delayTime,Counter.FF[4].RS1.TD1.delayTime)));
//   Counter.FF[4].RS1.TD1.y = if Counter.FF[4].RS1.TD1.delayTime > 0.0 then if time >= Counter.FF[4].RS1.TD1.delayTime then Counter.FF[4].RS1.TD1.x_delayed else Counter.FF[4].RS1.TD1.y0 else pre(Counter.FF[4].RS1.TD1.x);
//   Counter.FF[4].RS2.Nor1.auxiliary[1] = Counter.FF[4].RS2.Nor1.x[1];
//   Counter.FF[4].RS2.Nor1.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS2.Nor1.auxiliary[1],Counter.FF[4].RS2.Nor1.x[2]];
//   Counter.FF[4].RS2.Nor1.y = pre(D.Tables.NotTable[Counter.FF[4].RS2.Nor1.auxiliary[2]]);
//   Counter.FF[4].RS2.Nor2.auxiliary[1] = Counter.FF[4].RS2.Nor2.x[1];
//   Counter.FF[4].RS2.Nor2.auxiliary[2] = D.Tables.OrTable[Counter.FF[4].RS2.Nor2.auxiliary[1],Counter.FF[4].RS2.Nor2.x[2]];
//   Counter.FF[4].RS2.Nor2.y = pre(D.Tables.NotTable[Counter.FF[4].RS2.Nor2.auxiliary[2]]);
//   Counter.FF[4].RS2.TD1.x_delayed = DAE.CAST(ENUM TYPE, integer(delay(Real(Counter.FF[4].RS2.TD1.x),Counter.FF[4].RS2.TD1.delayTime,Counter.FF[4].RS2.TD1.delayTime)));
//   Counter.FF[4].RS2.TD1.y = if Counter.FF[4].RS2.TD1.delayTime > 0.0 then if time >= Counter.FF[4].RS2.TD1.delayTime then Counter.FF[4].RS2.TD1.x_delayed else Counter.FF[4].RS2.TD1.y0 else pre(Counter.FF[4].RS2.TD1.x);
//   Counter.FF[4].And1.auxiliary[1] = Counter.FF[4].And1.x[1];
//   Counter.FF[4].And1.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And1.auxiliary[1],Counter.FF[4].And1.x[2]];
//   Counter.FF[4].And1.auxiliary[3] = D.Tables.AndTable[Counter.FF[4].And1.auxiliary[2],Counter.FF[4].And1.x[3]];
//   Counter.FF[4].And1.y = pre(Counter.FF[4].And1.auxiliary[3]);
//   Counter.FF[4].And2.auxiliary[1] = Counter.FF[4].And2.x[1];
//   Counter.FF[4].And2.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And2.auxiliary[1],Counter.FF[4].And2.x[2]];
//   Counter.FF[4].And2.auxiliary[3] = D.Tables.AndTable[Counter.FF[4].And2.auxiliary[2],Counter.FF[4].And2.x[3]];
//   Counter.FF[4].And2.y = pre(Counter.FF[4].And2.auxiliary[3]);
//   Counter.FF[4].And3.auxiliary[1] = Counter.FF[4].And3.x[1];
//   Counter.FF[4].And3.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And3.auxiliary[1],Counter.FF[4].And3.x[2]];
//   Counter.FF[4].And3.y = pre(Counter.FF[4].And3.auxiliary[2]);
//   Counter.FF[4].And4.auxiliary[1] = Counter.FF[4].And4.x[1];
//   Counter.FF[4].And4.auxiliary[2] = D.Tables.AndTable[Counter.FF[4].And4.auxiliary[1],Counter.FF[4].And4.x[2]];
//   Counter.FF[4].And4.y = pre(Counter.FF[4].And4.auxiliary[2]);
//   Counter.FF[4].Not1.auxiliary = D.Tables.NotTable[Counter.FF[4].Not1.x];
//   Counter.FF[4].Not1.y = pre(Counter.FF[4].Not1.auxiliary);
//   Q0.y[1] = if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q0.value_U else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q0.value_X else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q0.value_0 else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q0.value_1 else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q0.value_Z else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q0.value_W else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q0.value_L else if Q0.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q0.value_H else Q0.value_m;
//   Q1.y[1] = if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q1.value_U else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q1.value_X else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q1.value_0 else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q1.value_1 else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q1.value_Z else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q1.value_W else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q1.value_L else if Q1.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q1.value_H else Q1.value_m;
//   Q2.y[1] = if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q2.value_U else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q2.value_X else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q2.value_0 else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q2.value_1 else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q2.value_Z else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q2.value_W else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q2.value_L else if Q2.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q2.value_H else Q2.value_m;
//   Q3.y[1] = if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'U' then Q3.value_U else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'X' then Q3.value_X else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'0' then Q3.value_0 else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'1' then Q3.value_1 else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'Z' then Q3.value_Z else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'W' then Q3.value_W else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'L' then Q3.value_L else if Q3.x[1] == Modelica.Electrical.Digital.Interfaces.Logic.'H' then Q3.value_H else Q3.value_m;
//   Counter.q[4] = Q3.x[1];
//   Counter.q[3] = Q2.x[1];
//   Counter.q[2] = Q1.x[1];
//   Counter.q[1] = Q0.x[1];
//   Clock.y = Counter.count;
//   Counter.enable = Enable.y;
//   Counter.FF[4].q = Counter.q[4];
//   Counter.FF[3].q = Counter.FF[4].clk;
//   Counter.FF[3].q = Counter.q[3];
//   Counter.FF[1].j = Counter.FF[1].k;
//   Counter.FF[1].j = Counter.FF[2].j;
//   Counter.FF[1].j = Counter.FF[2].k;
//   Counter.FF[1].j = Counter.FF[3].j;
//   Counter.FF[1].j = Counter.FF[3].k;
//   Counter.FF[1].j = Counter.FF[4].j;
//   Counter.FF[1].j = Counter.FF[4].k;
//   Counter.FF[1].j = Counter.enable;
//   Counter.FF[2].q = Counter.FF[3].clk;
//   Counter.FF[2].q = Counter.q[2];
//   Counter.FF[1].q = Counter.FF[2].clk;
//   Counter.FF[1].q = Counter.q[1];
//   Counter.FF[1].clk = Counter.count;
//   Counter.FF[4].And2.x[1] = Counter.FF[4].RS1.q;
//   Counter.FF[4].And2.x[1] = Counter.FF[4].qn;
//   Counter.FF[4].And1.x[3] = Counter.FF[4].RS1.qn;
//   Counter.FF[4].And1.x[3] = Counter.FF[4].q;
//   Counter.FF[4].And1.x[2] = Counter.FF[4].j;
//   Counter.FF[4].And3.x[1] = Counter.FF[4].And4.x[1];
//   Counter.FF[4].And3.x[1] = Counter.FF[4].Not1.y;
//   Counter.FF[4].And1.x[1] = Counter.FF[4].And2.x[3];
//   Counter.FF[4].And1.x[1] = Counter.FF[4].Not1.x;
//   Counter.FF[4].And1.x[1] = Counter.FF[4].clk;
//   Counter.FF[4].And3.x[2] = Counter.FF[4].RS2.q;
//   Counter.FF[4].And4.x[2] = Counter.FF[4].RS2.qn;
//   Counter.FF[4].And3.y = Counter.FF[4].RS1.s;
//   Counter.FF[4].And4.y = Counter.FF[4].RS1.r;
//   Counter.FF[4].And2.x[2] = Counter.FF[4].k;
//   Counter.FF[4].And1.y = Counter.FF[4].RS2.s;
//   Counter.FF[4].And2.y = Counter.FF[4].RS2.r;
//   Counter.FF[4].RS2.Nor1.y = Counter.FF[4].RS2.TD1.x;
//   Counter.FF[4].RS2.Nor1.y = Counter.FF[4].RS2.qn;
//   Counter.FF[4].RS2.Nor2.x[2] = Counter.FF[4].RS2.TD1.y;
//   Counter.FF[4].RS2.Nor1.x[1] = Counter.FF[4].RS2.Nor2.y;
//   Counter.FF[4].RS2.Nor1.x[1] = Counter.FF[4].RS2.q;
//   Counter.FF[4].RS2.Nor2.x[1] = Counter.FF[4].RS2.r;
//   Counter.FF[4].RS2.Nor1.x[2] = Counter.FF[4].RS2.s;
//   Counter.FF[4].RS1.Nor1.y = Counter.FF[4].RS1.TD1.x;
//   Counter.FF[4].RS1.Nor1.y = Counter.FF[4].RS1.qn;
//   Counter.FF[4].RS1.Nor2.x[2] = Counter.FF[4].RS1.TD1.y;
//   Counter.FF[4].RS1.Nor1.x[1] = Counter.FF[4].RS1.Nor2.y;
//   Counter.FF[4].RS1.Nor1.x[1] = Counter.FF[4].RS1.q;
//   Counter.FF[4].RS1.Nor2.x[1] = Counter.FF[4].RS1.r;
//   Counter.FF[4].RS1.Nor1.x[2] = Counter.FF[4].RS1.s;
//   Counter.FF[3].And2.x[1] = Counter.FF[3].RS1.q;
//   Counter.FF[3].And2.x[1] = Counter.FF[3].qn;
//   Counter.FF[3].And1.x[3] = Counter.FF[3].RS1.qn;
//   Counter.FF[3].And1.x[3] = Counter.FF[3].q;
//   Counter.FF[3].And1.x[2] = Counter.FF[3].j;
//   Counter.FF[3].And3.x[1] = Counter.FF[3].And4.x[1];
//   Counter.FF[3].And3.x[1] = Counter.FF[3].Not1.y;
//   Counter.FF[3].And1.x[1] = Counter.FF[3].And2.x[3];
//   Counter.FF[3].And1.x[1] = Counter.FF[3].Not1.x;
//   Counter.FF[3].And1.x[1] = Counter.FF[3].clk;
//   Counter.FF[3].And3.x[2] = Counter.FF[3].RS2.q;
//   Counter.FF[3].And4.x[2] = Counter.FF[3].RS2.qn;
//   Counter.FF[3].And3.y = Counter.FF[3].RS1.s;
//   Counter.FF[3].And4.y = Counter.FF[3].RS1.r;
//   Counter.FF[3].And2.x[2] = Counter.FF[3].k;
//   Counter.FF[3].And1.y = Counter.FF[3].RS2.s;
//   Counter.FF[3].And2.y = Counter.FF[3].RS2.r;
//   Counter.FF[3].RS2.Nor1.y = Counter.FF[3].RS2.TD1.x;
//   Counter.FF[3].RS2.Nor1.y = Counter.FF[3].RS2.qn;
//   Counter.FF[3].RS2.Nor2.x[2] = Counter.FF[3].RS2.TD1.y;
//   Counter.FF[3].RS2.Nor1.x[1] = Counter.FF[3].RS2.Nor2.y;
//   Counter.FF[3].RS2.Nor1.x[1] = Counter.FF[3].RS2.q;
//   Counter.FF[3].RS2.Nor2.x[1] = Counter.FF[3].RS2.r;
//   Counter.FF[3].RS2.Nor1.x[2] = Counter.FF[3].RS2.s;
//   Counter.FF[3].RS1.Nor1.y = Counter.FF[3].RS1.TD1.x;
//   Counter.FF[3].RS1.Nor1.y = Counter.FF[3].RS1.qn;
//   Counter.FF[3].RS1.Nor2.x[2] = Counter.FF[3].RS1.TD1.y;
//   Counter.FF[3].RS1.Nor1.x[1] = Counter.FF[3].RS1.Nor2.y;
//   Counter.FF[3].RS1.Nor1.x[1] = Counter.FF[3].RS1.q;
//   Counter.FF[3].RS1.Nor2.x[1] = Counter.FF[3].RS1.r;
//   Counter.FF[3].RS1.Nor1.x[2] = Counter.FF[3].RS1.s;
//   Counter.FF[2].And2.x[1] = Counter.FF[2].RS1.q;
//   Counter.FF[2].And2.x[1] = Counter.FF[2].qn;
//   Counter.FF[2].And1.x[3] = Counter.FF[2].RS1.qn;
//   Counter.FF[2].And1.x[3] = Counter.FF[2].q;
//   Counter.FF[2].And1.x[2] = Counter.FF[2].j;
//   Counter.FF[2].And3.x[1] = Counter.FF[2].And4.x[1];
//   Counter.FF[2].And3.x[1] = Counter.FF[2].Not1.y;
//   Counter.FF[2].And1.x[1] = Counter.FF[2].And2.x[3];
//   Counter.FF[2].And1.x[1] = Counter.FF[2].Not1.x;
//   Counter.FF[2].And1.x[1] = Counter.FF[2].clk;
//   Counter.FF[2].And3.x[2] = Counter.FF[2].RS2.q;
//   Counter.FF[2].And4.x[2] = Counter.FF[2].RS2.qn;
//   Counter.FF[2].And3.y = Counter.FF[2].RS1.s;
//   Counter.FF[2].And4.y = Counter.FF[2].RS1.r;
//   Counter.FF[2].And2.x[2] = Counter.FF[2].k;
//   Counter.FF[2].And1.y = Counter.FF[2].RS2.s;
//   Counter.FF[2].And2.y = Counter.FF[2].RS2.r;
//   Counter.FF[2].RS2.Nor1.y = Counter.FF[2].RS2.TD1.x;
//   Counter.FF[2].RS2.Nor1.y = Counter.FF[2].RS2.qn;
//   Counter.FF[2].RS2.Nor2.x[2] = Counter.FF[2].RS2.TD1.y;
//   Counter.FF[2].RS2.Nor1.x[1] = Counter.FF[2].RS2.Nor2.y;
//   Counter.FF[2].RS2.Nor1.x[1] = Counter.FF[2].RS2.q;
//   Counter.FF[2].RS2.Nor2.x[1] = Counter.FF[2].RS2.r;
//   Counter.FF[2].RS2.Nor1.x[2] = Counter.FF[2].RS2.s;
//   Counter.FF[2].RS1.Nor1.y = Counter.FF[2].RS1.TD1.x;
//   Counter.FF[2].RS1.Nor1.y = Counter.FF[2].RS1.qn;
//   Counter.FF[2].RS1.Nor2.x[2] = Counter.FF[2].RS1.TD1.y;
//   Counter.FF[2].RS1.Nor1.x[1] = Counter.FF[2].RS1.Nor2.y;
//   Counter.FF[2].RS1.Nor1.x[1] = Counter.FF[2].RS1.q;
//   Counter.FF[2].RS1.Nor2.x[1] = Counter.FF[2].RS1.r;
//   Counter.FF[2].RS1.Nor1.x[2] = Counter.FF[2].RS1.s;
//   Counter.FF[1].And2.x[1] = Counter.FF[1].RS1.q;
//   Counter.FF[1].And2.x[1] = Counter.FF[1].qn;
//   Counter.FF[1].And1.x[3] = Counter.FF[1].RS1.qn;
//   Counter.FF[1].And1.x[3] = Counter.FF[1].q;
//   Counter.FF[1].And1.x[2] = Counter.FF[1].j;
//   Counter.FF[1].And3.x[1] = Counter.FF[1].And4.x[1];
//   Counter.FF[1].And3.x[1] = Counter.FF[1].Not1.y;
//   Counter.FF[1].And1.x[1] = Counter.FF[1].And2.x[3];
//   Counter.FF[1].And1.x[1] = Counter.FF[1].Not1.x;
//   Counter.FF[1].And1.x[1] = Counter.FF[1].clk;
//   Counter.FF[1].And3.x[2] = Counter.FF[1].RS2.q;
//   Counter.FF[1].And4.x[2] = Counter.FF[1].RS2.qn;
//   Counter.FF[1].And3.y = Counter.FF[1].RS1.s;
//   Counter.FF[1].And4.y = Counter.FF[1].RS1.r;
//   Counter.FF[1].And2.x[2] = Counter.FF[1].k;
//   Counter.FF[1].And1.y = Counter.FF[1].RS2.s;
//   Counter.FF[1].And2.y = Counter.FF[1].RS2.r;
//   Counter.FF[1].RS2.Nor1.y = Counter.FF[1].RS2.TD1.x;
//   Counter.FF[1].RS2.Nor1.y = Counter.FF[1].RS2.qn;
//   Counter.FF[1].RS2.Nor2.x[2] = Counter.FF[1].RS2.TD1.y;
//   Counter.FF[1].RS2.Nor1.x[1] = Counter.FF[1].RS2.Nor2.y;
//   Counter.FF[1].RS2.Nor1.x[1] = Counter.FF[1].RS2.q;
//   Counter.FF[1].RS2.Nor2.x[1] = Counter.FF[1].RS2.r;
//   Counter.FF[1].RS2.Nor1.x[2] = Counter.FF[1].RS2.s;
//   Counter.FF[1].RS1.Nor1.y = Counter.FF[1].RS1.TD1.x;
//   Counter.FF[1].RS1.Nor1.y = Counter.FF[1].RS1.qn;
//   Counter.FF[1].RS1.Nor2.x[2] = Counter.FF[1].RS1.TD1.y;
//   Counter.FF[1].RS1.Nor1.x[1] = Counter.FF[1].RS1.Nor2.y;
//   Counter.FF[1].RS1.Nor1.x[1] = Counter.FF[1].RS1.q;
//   Counter.FF[1].RS1.Nor2.x[1] = Counter.FF[1].RS1.r;
//   Counter.FF[1].RS1.Nor1.x[2] = Counter.FF[1].RS1.s;
// algorithm
//   when initial() then
//     Enable.y := Enable.before;
//   end when;
//   if time >= Enable.stepTime then
//     Enable.y := Enable.after;
//   else
//     Enable.y := Enable.before;
//   end if;
//   when sample(Clock.startTime,Clock.period) then
//     Clock.t_i := time;
//   end when;
//   Clock.y := if  NOT time >= Clock.startTime OR time >= Clock.t_i + Clock.t_width then Modelica.Electrical.Digital.Interfaces.Logic.'0' else Modelica.Electrical.Digital.Interfaces.Logic.'1';
// end Modelica.Electrical.Digital.Examples.Counter;
// "
// "[Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// "
// "Check of Modelica.Electrical.Digital.Examples.Counter completed successfully.
// 
// [Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// 
// Class Modelica.Electrical.Digital.Examples.Counter has 282 equation(s) and 282 variable(s).
// 178 of these are trivial equation(s).
// "
// ""
// record SimulationResult
//     resultFile = "",
//     messages = "Simulation failed for model: Modelica.Electrical.Digital.Examples.Counter
// [Digital.mo:646:7-647:51:writable] Warning: Component Clock has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Sources.Clock.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// [Digital.mo:648:7-650:28:writable] Warning: Component Counter has the same name as its type Modelica.Electrical.Digital.Examples.Counter.D.Examples.Utilities.Counter.
// 	This is forbidden by Modelica specification and may lead to lookup errors.
// Error: Error building simulator. Buildlog: g++ -I. -o Modelica.Electrical.Digital.Examples.Counter.exe Modelica.Electrical.Digital.Examples.Counter.cpp Modelica.Electrical.Digital.Examples.Counter_functions.cpp -L"../../../../libraries/msl31//Modelica/Electrical"   -lsim -linteractive -I"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/include/omc" -msse2 -mfpmath=sse  -lsendData -lQtNetwork-mingw -lQtCore-mingw -lQtGui-mingw -luuid -lole32 -lws2_32 -L"c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/lib/omc" -lc_runtime -lf2c Modelica.Electrical.Digital.Examples.Counter_records.c

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionDAE_output()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:3242: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3245: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3245: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3248: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3251: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3252: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3255: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3257: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3259: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:3259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3260: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3260: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3264: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3271: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3273: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3281: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3282: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3282: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3284: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3285: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3285: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3338: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3345: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3347: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3355: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3361: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3364: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3364: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3364: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3364: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3367: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3367: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3367: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3367: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3373: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3380: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3387: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3389: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3397: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3397: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3397: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3397: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3398: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3398: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3454: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3461: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3463: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3471: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3477: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3480: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3483: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3496: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3503: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3505: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3514: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3514: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3570: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3577: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3579: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3587: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3587: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3587: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3587: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3593: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3596: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3596: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3596: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3596: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3599: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3599: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3599: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3599: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3605: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3612: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3619: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3621: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3629: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3629: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3629: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3629: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3630: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3630: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3632: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3632: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3632: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3632: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3686: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:3693: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3695: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3703: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3703: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3703: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:3703: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int function_updateDependents()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:4657: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4660: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4660: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4660: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4660: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4660: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4663: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4666: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4667: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4670: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4671: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4672: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4672: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4674: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4675: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4675: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4679: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4686: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4688: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4696: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4696: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4696: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4696: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4697: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4697: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4699: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4699: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4699: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4699: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4700: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4700: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4753: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4760: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4762: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4770: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4776: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4776: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4776: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4776: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4779: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4779: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4779: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4779: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4782: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4782: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4782: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4782: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4783: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4783: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4783: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4783: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4786: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4787: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4787: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4787: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4787: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4788: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4790: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4790: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4790: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4790: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4791: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4791: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4795: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4802: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4804: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4812: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4813: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4813: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4815: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4816: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4869: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4876: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4878: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4886: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4892: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4895: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4898: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4899: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4902: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4903: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4904: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4906: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4907: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4911: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4918: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4920: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4928: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4929: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4929: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4931: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4932: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4932: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4985: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:4992: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:4994: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5002: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5008: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5008: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5008: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5008: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5011: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5011: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5011: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5011: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5014: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5015: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5018: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5018: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5018: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5018: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5019: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5020: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5020: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5022: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5023: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5023: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5027: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5034: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5036: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5044: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5044: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5044: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5044: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5045: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5045: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5047: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5048: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5048: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5101: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5108: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5110: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5118: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5118: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5118: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5118: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int initial_residual()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:5399: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5399: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5400: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5400: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5403: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5407: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5412: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5414: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5422: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5423: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5425: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5426: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5430: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5435: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5437: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5445: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5446: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5449: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5450: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5450: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5450: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5450: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5453: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5453: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5453: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5453: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5456: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5462: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5462: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5462: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5462: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5463: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5465: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5466: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5470: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5475: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5477: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5485: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5486: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5489: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5493: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5498: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5500: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5508: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5508: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5508: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5508: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5509: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5509: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5509: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5509: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5512: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5513: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5516: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5519: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5526: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5529: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5533: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5538: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5540: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5548: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5549: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5551: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5552: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5556: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5561: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5563: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5571: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5571: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5571: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5571: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5572: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5575: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5576: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5579: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5582: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5588: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5588: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5588: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5588: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5589: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5589: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5592: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5592: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5596: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5601: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5603: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5612: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5612: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5619: error: expected primary-expression before ')' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:5624: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5626: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5635: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5635: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5635: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5635: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5638: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5638: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5638: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5638: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5639: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5639: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5639: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5639: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5642: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5642: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5642: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5642: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:5645: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionAlgebraics()':

// Modelica.Electrical.Digital.Examples.Counter.cpp:6362: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6365: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6365: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6365: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6365: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6365: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6368: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6371: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6376: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6377: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6379: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:6379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6380: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6384: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6391: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6393: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6401: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6402: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6404: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6404: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6404: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6404: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6405: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6405: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6458: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6465: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6467: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6475: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6481: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6484: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6487: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6492: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6493: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6496: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6500: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6507: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6509: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6517: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6518: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6520: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6521: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6574: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6581: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6583: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6591: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6597: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6597: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6597: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6597: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6600: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6603: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6608: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6609: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6612: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6612: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6616: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6623: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6625: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6633: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6634: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6636: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6637: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6690: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6697: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6699: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6707: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6707: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6707: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6707: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6713: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6716: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6719: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6719: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6719: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6719: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6720: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6720: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6720: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6720: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6723: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6723: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6723: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6723: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6724: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6724: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6724: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6724: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6725: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6727: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6727: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6727: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6727: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6728: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6732: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6739: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6741: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6749: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6749: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6749: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6749: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6750: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6752: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6752: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6752: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6752: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6753: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6753: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6806: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:6813: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6815: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:6823: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp: In function `int functionDAE(int&)':

// Modelica.Electrical.Digital.Examples.Counter.cpp:7253: error: `$PD$PTables$PNotTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7256: error: `$PD$PTables$PAndTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7256: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7259: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7262: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7262: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7262: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7262: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7263: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7263: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7263: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7263: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7266: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7266: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7266: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7266: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7267: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7268: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7270: error: `$PD$PTables$POrTable' was not declared in this scope

// Modelica.Electrical.Digital.Examples.Counter.cpp:7270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7270: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7271: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7275: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7282: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7284: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7292: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7293: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7293: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7295: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7296: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7296: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7349: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7356: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7358: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7366: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7372: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7375: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7378: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7379: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7382: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7382: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7382: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7382: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7383: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7384: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7386: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7387: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7391: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7398: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7400: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7408: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7408: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7408: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7408: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7409: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7411: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7412: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7465: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7472: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7474: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7482: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7488: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7491: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7494: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7495: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7498: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7498: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7498: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7498: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7499: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7500: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7500: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7502: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7502: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7502: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7502: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7503: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7503: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7507: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7514: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7516: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7524: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7525: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7527: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7528: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7581: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7588: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7590: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7598: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7598: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7598: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7598: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7604: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7607: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7610: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7611: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7614: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7615: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7616: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7618: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7618: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7618: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7618: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7619: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7619: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7623: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7630: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7632: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7640: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7641: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7643: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7644: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7697: error: expected primary-expression before ';' token

// Modelica.Electrical.Digital.Examples.Counter.cpp:7704: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7706: warning: converting to `modelica_integer' from `double'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// Modelica.Electrical.Digital.Examples.Counter.cpp:7714: error: cannot convert `double*' to `integer_array_t*' for argument `1' to `modelica_integer integer_get(integer_array_t*, size_t)'

// mingw32-make: *** [Modelica.Electrical.Digital.Examples.Counter] Error 1

// 
// Error: Error building simulator. Buildlog: command g++ not found. Check $OPENMODELICAHOME
// Error: Error building simulator. Buildlog: command "c:/bin/cygwin/home/adrpo/dev/OpenModelicaBackend/build/share/omc/scripts/Compile" not found. Check $OPENMODELICAHOME
// "
// end SimulationResult;
// ""
// 0
// endResult
