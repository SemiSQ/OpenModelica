// name:     Modelica.Electrical.Machines.Examples.AIMC_Inverter
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Machines.Examples.AIMC_Inverter_* Modelica.Electrical.Machines.Examples.AIMC_Inverter Modelica.Electrical.Machines.Examples.AIMC_Inverter.exe Modelica.Electrical.Machines.Examples.AIMC_Inverter.cpp Modelica.Electrical.Machines.Examples.AIMC_Inverter.makefile Modelica.Electrical.Machines.Examples.AIMC_Inverter.libs Modelica.Electrical.Machines.Examples.AIMC_Inverter.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Machines.Examples.AIMC_Inverter,stopTime=1.5);
val(aimc.phiMechanical,0.0);
val(aimc.phiMechanical,1.5);
val(der(aimc.phiMechanical),0.0);
val(der(aimc.phiMechanical),1.5);
val(aimc.wMechanical,0.0);
val(aimc.wMechanical,1.5);
val(aimc.tauElectrical,0.0);
val(aimc.tauElectrical,1.5);
val(aimc.tauShaft,0.0);
val(aimc.tauShaft,1.5);
val(aimc.flange.phi,0.0);
val(aimc.flange.phi,1.5);
val(aimc.flange.tau,0.0);
val(aimc.flange.tau,1.5);
val(aimc.inertiaRotor.flange_a.phi,0.0);
val(aimc.inertiaRotor.flange_a.phi,1.5);
val(aimc.inertiaRotor.flange_a.tau,0.0);
val(aimc.inertiaRotor.flange_a.tau,1.5);
val(aimc.inertiaRotor.flange_b.phi,0.0);
val(aimc.inertiaRotor.flange_b.phi,1.5);
val(aimc.inertiaRotor.flange_b.tau,0.0);
val(aimc.inertiaRotor.flange_b.tau,1.5);
val(aimc.inertiaRotor.phi,0.0);
val(aimc.inertiaRotor.phi,1.5);
val(der(aimc.inertiaRotor.phi),0.0);
val(der(aimc.inertiaRotor.phi),1.5);
val(aimc.inertiaRotor.w,0.0);
val(aimc.inertiaRotor.w,1.5);
val(der(aimc.inertiaRotor.w),0.0);
val(der(aimc.inertiaRotor.w),1.5);
val(aimc.inertiaRotor.a,0.0);
val(aimc.inertiaRotor.a,1.5);
val(aimc.fixed.flange.tau,0.0);
val(aimc.fixed.flange.tau,1.5);
val(aimc.vs[1],0.0);
val(aimc.vs[1],1.5);
val(aimc.vs[2],0.0);
val(aimc.vs[2],1.5);
val(aimc.vs[3],0.0);
val(aimc.vs[3],1.5);
val(aimc.is[1],0.0);
val(aimc.is[1],1.5);
val(aimc.is[2],0.0);
val(aimc.is[2],1.5);
val(aimc.is[3],0.0);
val(aimc.is[3],1.5);
val(aimc.i_0_s,0.0);
val(aimc.i_0_s,1.5);
val(der(aimc.i_0_s),0.0);
val(der(aimc.i_0_s),1.5);
val(aimc.idq_ss[1],0.0);
val(aimc.idq_ss[1],1.5);
val(aimc.idq_ss[2],0.0);
val(aimc.idq_ss[2],1.5);
val(aimc.idq_sr[1],0.0);
val(aimc.idq_sr[1],1.5);
val(der(aimc.idq_sr[1]),0.0);
val(der(aimc.idq_sr[1]),1.5);
val(aimc.idq_sr[2],0.0);
val(aimc.idq_sr[2],1.5);
val(der(aimc.idq_sr[2]),0.0);
val(der(aimc.idq_sr[2]),1.5);
val(aimc.idq_rs[1],0.0);
val(aimc.idq_rs[1],1.5);
val(aimc.idq_rs[2],0.0);
val(aimc.idq_rs[2],1.5);
val(aimc.idq_rr[1],0.0);
val(aimc.idq_rr[1],1.5);
val(der(aimc.idq_rr[1]),0.0);
val(der(aimc.idq_rr[1]),1.5);
val(aimc.idq_rr[2],0.0);
val(aimc.idq_rr[2],1.5);
val(der(aimc.idq_rr[2]),0.0);
val(der(aimc.idq_rr[2]),1.5);
val(aimc.plug_sp.pin[1].v,0.0);
val(aimc.plug_sp.pin[1].v,1.5);
val(aimc.plug_sp.pin[1].i,0.0);
val(aimc.plug_sp.pin[1].i,1.5);
val(aimc.plug_sp.pin[2].v,0.0);
val(aimc.plug_sp.pin[2].v,1.5);
val(aimc.plug_sp.pin[2].i,0.0);
val(aimc.plug_sp.pin[2].i,1.5);
val(aimc.plug_sp.pin[3].v,0.0);
val(aimc.plug_sp.pin[3].v,1.5);
val(aimc.plug_sp.pin[3].i,0.0);
val(aimc.plug_sp.pin[3].i,1.5);
val(aimc.plug_sn.pin[1].v,0.0);
val(aimc.plug_sn.pin[1].v,1.5);
val(aimc.plug_sn.pin[1].i,0.0);
val(aimc.plug_sn.pin[1].i,1.5);
val(aimc.plug_sn.pin[2].v,0.0);
val(aimc.plug_sn.pin[2].v,1.5);
val(aimc.plug_sn.pin[2].i,0.0);
val(aimc.plug_sn.pin[2].i,1.5);
val(aimc.plug_sn.pin[3].v,0.0);
val(aimc.plug_sn.pin[3].v,1.5);
val(aimc.plug_sn.pin[3].i,0.0);
val(aimc.plug_sn.pin[3].i,1.5);
val(aimc.rs.v[1],0.0);
val(aimc.rs.v[1],1.5);
val(aimc.rs.v[2],0.0);
val(aimc.rs.v[2],1.5);
val(aimc.rs.v[3],0.0);
val(aimc.rs.v[3],1.5);
val(aimc.rs.i[1],0.0);
val(aimc.rs.i[1],1.5);
val(aimc.rs.i[2],0.0);
val(aimc.rs.i[2],1.5);
val(aimc.rs.i[3],0.0);
val(aimc.rs.i[3],1.5);
val(aimc.rs.plug_p.pin[1].v,0.0);
val(aimc.rs.plug_p.pin[1].v,1.5);
val(aimc.rs.plug_p.pin[1].i,0.0);
val(aimc.rs.plug_p.pin[1].i,1.5);
val(aimc.rs.plug_p.pin[2].v,0.0);
val(aimc.rs.plug_p.pin[2].v,1.5);
val(aimc.rs.plug_p.pin[2].i,0.0);
val(aimc.rs.plug_p.pin[2].i,1.5);
val(aimc.rs.plug_p.pin[3].v,0.0);
val(aimc.rs.plug_p.pin[3].v,1.5);
val(aimc.rs.plug_p.pin[3].i,0.0);
val(aimc.rs.plug_p.pin[3].i,1.5);
val(aimc.rs.plug_n.pin[1].v,0.0);
val(aimc.rs.plug_n.pin[1].v,1.5);
val(aimc.rs.plug_n.pin[1].i,0.0);
val(aimc.rs.plug_n.pin[1].i,1.5);
val(aimc.rs.plug_n.pin[2].v,0.0);
val(aimc.rs.plug_n.pin[2].v,1.5);
val(aimc.rs.plug_n.pin[2].i,0.0);
val(aimc.rs.plug_n.pin[2].i,1.5);
val(aimc.rs.plug_n.pin[3].v,0.0);
val(aimc.rs.plug_n.pin[3].v,1.5);
val(aimc.rs.plug_n.pin[3].i,0.0);
val(aimc.rs.plug_n.pin[3].i,1.5);
val(aimc.rs.resistor[1].v,0.0);
val(aimc.rs.resistor[1].v,1.5);
val(aimc.rs.resistor[1].i,0.0);
val(aimc.rs.resistor[1].i,1.5);
val(aimc.rs.resistor[1].p.v,0.0);
val(aimc.rs.resistor[1].p.v,1.5);
val(aimc.rs.resistor[1].p.i,0.0);
val(aimc.rs.resistor[1].p.i,1.5);
val(aimc.rs.resistor[1].n.v,0.0);
val(aimc.rs.resistor[1].n.v,1.5);
val(aimc.rs.resistor[1].n.i,0.0);
val(aimc.rs.resistor[1].n.i,1.5);
val(aimc.rs.resistor[1].LossPower,0.0);
val(aimc.rs.resistor[1].LossPower,1.5);
val(aimc.rs.resistor[2].v,0.0);
val(aimc.rs.resistor[2].v,1.5);
val(aimc.rs.resistor[2].i,0.0);
val(aimc.rs.resistor[2].i,1.5);
val(aimc.rs.resistor[2].p.v,0.0);
val(aimc.rs.resistor[2].p.v,1.5);
val(aimc.rs.resistor[2].p.i,0.0);
val(aimc.rs.resistor[2].p.i,1.5);
val(aimc.rs.resistor[2].n.v,0.0);
val(aimc.rs.resistor[2].n.v,1.5);
val(aimc.rs.resistor[2].n.i,0.0);
val(aimc.rs.resistor[2].n.i,1.5);
val(aimc.rs.resistor[2].LossPower,0.0);
val(aimc.rs.resistor[2].LossPower,1.5);
val(aimc.rs.resistor[3].v,0.0);
val(aimc.rs.resistor[3].v,1.5);
val(aimc.rs.resistor[3].i,0.0);
val(aimc.rs.resistor[3].i,1.5);
val(aimc.rs.resistor[3].p.v,0.0);
val(aimc.rs.resistor[3].p.v,1.5);
val(aimc.rs.resistor[3].p.i,0.0);
val(aimc.rs.resistor[3].p.i,1.5);
val(aimc.rs.resistor[3].n.v,0.0);
val(aimc.rs.resistor[3].n.v,1.5);
val(aimc.rs.resistor[3].n.i,0.0);
val(aimc.rs.resistor[3].n.i,1.5);
val(aimc.rs.resistor[3].LossPower,0.0);
val(aimc.rs.resistor[3].LossPower,1.5);
val(aimc.lssigma.v[1],0.0);
val(aimc.lssigma.v[1],1.5);
val(aimc.lssigma.v[2],0.0);
val(aimc.lssigma.v[2],1.5);
val(aimc.lssigma.v[3],0.0);
val(aimc.lssigma.v[3],1.5);
val(aimc.lssigma.i[1],0.0);
val(aimc.lssigma.i[1],1.5);
val(aimc.lssigma.i[2],0.0);
val(aimc.lssigma.i[2],1.5);
val(aimc.lssigma.i[3],0.0);
val(aimc.lssigma.i[3],1.5);
val(aimc.lssigma.plug_p.pin[1].v,0.0);
val(aimc.lssigma.plug_p.pin[1].v,1.5);
val(aimc.lssigma.plug_p.pin[1].i,0.0);
val(aimc.lssigma.plug_p.pin[1].i,1.5);
val(aimc.lssigma.plug_p.pin[2].v,0.0);
val(aimc.lssigma.plug_p.pin[2].v,1.5);
val(aimc.lssigma.plug_p.pin[2].i,0.0);
val(aimc.lssigma.plug_p.pin[2].i,1.5);
val(aimc.lssigma.plug_p.pin[3].v,0.0);
val(aimc.lssigma.plug_p.pin[3].v,1.5);
val(aimc.lssigma.plug_p.pin[3].i,0.0);
val(aimc.lssigma.plug_p.pin[3].i,1.5);
val(aimc.lssigma.plug_n.pin[1].v,0.0);
val(aimc.lssigma.plug_n.pin[1].v,1.5);
val(aimc.lssigma.plug_n.pin[1].i,0.0);
val(aimc.lssigma.plug_n.pin[1].i,1.5);
val(aimc.lssigma.plug_n.pin[2].v,0.0);
val(aimc.lssigma.plug_n.pin[2].v,1.5);
val(aimc.lssigma.plug_n.pin[2].i,0.0);
val(aimc.lssigma.plug_n.pin[2].i,1.5);
val(aimc.lssigma.plug_n.pin[3].v,0.0);
val(aimc.lssigma.plug_n.pin[3].v,1.5);
val(aimc.lssigma.plug_n.pin[3].i,0.0);
val(aimc.lssigma.plug_n.pin[3].i,1.5);
val(aimc.lssigma.inductor[1].v,0.0);
val(aimc.lssigma.inductor[1].v,1.5);
val(aimc.lssigma.inductor[1].i,0.0);
val(aimc.lssigma.inductor[1].i,1.5);
val(der(aimc.lssigma.inductor[1].i),0.0);
val(der(aimc.lssigma.inductor[1].i),1.5);
val(aimc.lssigma.inductor[1].p.v,0.0);
val(aimc.lssigma.inductor[1].p.v,1.5);
val(aimc.lssigma.inductor[1].p.i,0.0);
val(aimc.lssigma.inductor[1].p.i,1.5);
val(aimc.lssigma.inductor[1].n.v,0.0);
val(aimc.lssigma.inductor[1].n.v,1.5);
val(aimc.lssigma.inductor[1].n.i,0.0);
val(aimc.lssigma.inductor[1].n.i,1.5);
val(aimc.lssigma.inductor[2].v,0.0);
val(aimc.lssigma.inductor[2].v,1.5);
val(aimc.lssigma.inductor[2].i,0.0);
val(aimc.lssigma.inductor[2].i,1.5);
val(der(aimc.lssigma.inductor[2].i),0.0);
val(der(aimc.lssigma.inductor[2].i),1.5);
val(aimc.lssigma.inductor[2].p.v,0.0);
val(aimc.lssigma.inductor[2].p.v,1.5);
val(aimc.lssigma.inductor[2].p.i,0.0);
val(aimc.lssigma.inductor[2].p.i,1.5);
val(aimc.lssigma.inductor[2].n.v,0.0);
val(aimc.lssigma.inductor[2].n.v,1.5);
val(aimc.lssigma.inductor[2].n.i,0.0);
val(aimc.lssigma.inductor[2].n.i,1.5);
val(aimc.lssigma.inductor[3].v,0.0);
val(aimc.lssigma.inductor[3].v,1.5);
val(aimc.lssigma.inductor[3].i,0.0);
val(aimc.lssigma.inductor[3].i,1.5);
val(der(aimc.lssigma.inductor[3].i),0.0);
val(der(aimc.lssigma.inductor[3].i),1.5);
val(aimc.lssigma.inductor[3].p.v,0.0);
val(aimc.lssigma.inductor[3].p.v,1.5);
val(aimc.lssigma.inductor[3].p.i,0.0);
val(aimc.lssigma.inductor[3].p.i,1.5);
val(aimc.lssigma.inductor[3].n.v,0.0);
val(aimc.lssigma.inductor[3].n.v,1.5);
val(aimc.lssigma.inductor[3].n.i,0.0);
val(aimc.lssigma.inductor[3].n.i,1.5);
val(aimc.spacePhasorS.v[1],0.0);
val(aimc.spacePhasorS.v[1],1.5);
val(aimc.spacePhasorS.v[2],0.0);
val(aimc.spacePhasorS.v[2],1.5);
val(aimc.spacePhasorS.v[3],0.0);
val(aimc.spacePhasorS.v[3],1.5);
val(aimc.spacePhasorS.i[1],0.0);
val(aimc.spacePhasorS.i[1],1.5);
val(aimc.spacePhasorS.i[2],0.0);
val(aimc.spacePhasorS.i[2],1.5);
val(aimc.spacePhasorS.i[3],0.0);
val(aimc.spacePhasorS.i[3],1.5);
val(aimc.spacePhasorS.plug_p.pin[1].v,0.0);
val(aimc.spacePhasorS.plug_p.pin[1].v,1.5);
val(aimc.spacePhasorS.plug_p.pin[1].i,0.0);
val(aimc.spacePhasorS.plug_p.pin[1].i,1.5);
val(aimc.spacePhasorS.plug_p.pin[2].v,0.0);
val(aimc.spacePhasorS.plug_p.pin[2].v,1.5);
val(aimc.spacePhasorS.plug_p.pin[2].i,0.0);
val(aimc.spacePhasorS.plug_p.pin[2].i,1.5);
val(aimc.spacePhasorS.plug_p.pin[3].v,0.0);
val(aimc.spacePhasorS.plug_p.pin[3].v,1.5);
val(aimc.spacePhasorS.plug_p.pin[3].i,0.0);
val(aimc.spacePhasorS.plug_p.pin[3].i,1.5);
val(aimc.spacePhasorS.plug_n.pin[1].v,0.0);
val(aimc.spacePhasorS.plug_n.pin[1].v,1.5);
val(aimc.spacePhasorS.plug_n.pin[1].i,0.0);
val(aimc.spacePhasorS.plug_n.pin[1].i,1.5);
val(aimc.spacePhasorS.plug_n.pin[2].v,0.0);
val(aimc.spacePhasorS.plug_n.pin[2].v,1.5);
val(aimc.spacePhasorS.plug_n.pin[2].i,0.0);
val(aimc.spacePhasorS.plug_n.pin[2].i,1.5);
val(aimc.spacePhasorS.plug_n.pin[3].v,0.0);
val(aimc.spacePhasorS.plug_n.pin[3].v,1.5);
val(aimc.spacePhasorS.plug_n.pin[3].i,0.0);
val(aimc.spacePhasorS.plug_n.pin[3].i,1.5);
val(aimc.spacePhasorS.zero.i,0.0);
val(aimc.spacePhasorS.zero.i,1.5);
val(aimc.spacePhasorS.ground.i,0.0);
val(aimc.spacePhasorS.ground.i,1.5);
val(aimc.spacePhasorS.gnd.p.i,0.0);
val(aimc.spacePhasorS.gnd.p.i,1.5);
val(aimc.spacePhasorS.spacePhasor.v_[1],0.0);
val(aimc.spacePhasorS.spacePhasor.v_[1],1.5);
val(aimc.spacePhasorS.spacePhasor.v_[2],0.0);
val(aimc.spacePhasorS.spacePhasor.v_[2],1.5);
val(aimc.spacePhasorS.spacePhasor.i_[1],0.0);
val(aimc.spacePhasorS.spacePhasor.i_[1],1.5);
val(aimc.spacePhasorS.spacePhasor.i_[2],0.0);
val(aimc.spacePhasorS.spacePhasor.i_[2],1.5);
val(aimc.airGapS.tauElectrical,0.0);
val(aimc.airGapS.tauElectrical,1.5);
val(aimc.airGapS.gamma,0.0);
val(aimc.airGapS.gamma,1.5);
val(der(aimc.airGapS.gamma),0.0);
val(der(aimc.airGapS.gamma),1.5);
val(aimc.airGapS.i_ss[1],0.0);
val(aimc.airGapS.i_ss[1],1.5);
val(aimc.airGapS.i_ss[2],0.0);
val(aimc.airGapS.i_ss[2],1.5);
val(der(aimc.airGapS.i_ss[1]),0.0);
val(der(aimc.airGapS.i_ss[1]),1.5);
val(der(aimc.airGapS.i_ss[2]),0.0);
val(der(aimc.airGapS.i_ss[2]),1.5);
val(aimc.airGapS.i_sr[1],0.0);
val(aimc.airGapS.i_sr[1],1.5);
val(aimc.airGapS.i_sr[2],0.0);
val(aimc.airGapS.i_sr[2],1.5);
val(aimc.airGapS.i_rs[1],0.0);
val(aimc.airGapS.i_rs[1],1.5);
val(aimc.airGapS.i_rs[2],0.0);
val(aimc.airGapS.i_rs[2],1.5);
val(der(aimc.airGapS.i_rs[1]),0.0);
val(der(aimc.airGapS.i_rs[1]),1.5);
val(der(aimc.airGapS.i_rs[2]),0.0);
val(der(aimc.airGapS.i_rs[2]),1.5);
val(aimc.airGapS.i_rr[1],0.0);
val(aimc.airGapS.i_rr[1],1.5);
val(aimc.airGapS.i_rr[2],0.0);
val(aimc.airGapS.i_rr[2],1.5);
val(aimc.airGapS.psi_ms[1],0.0);
val(aimc.airGapS.psi_ms[1],1.5);
val(aimc.airGapS.psi_ms[2],0.0);
val(aimc.airGapS.psi_ms[2],1.5);
val(der(aimc.airGapS.psi_ms[1]),0.0);
val(der(aimc.airGapS.psi_ms[1]),1.5);
val(der(aimc.airGapS.psi_ms[2]),0.0);
val(der(aimc.airGapS.psi_ms[2]),1.5);
val(aimc.airGapS.psi_mr[1],0.0);
val(aimc.airGapS.psi_mr[1],1.5);
val(aimc.airGapS.psi_mr[2],0.0);
val(aimc.airGapS.psi_mr[2],1.5);
val(der(aimc.airGapS.psi_mr[1]),0.0);
val(der(aimc.airGapS.psi_mr[1]),1.5);
val(der(aimc.airGapS.psi_mr[2]),0.0);
val(der(aimc.airGapS.psi_mr[2]),1.5);
val(aimc.airGapS.RotationMatrix[1,1],0.0);
val(aimc.airGapS.RotationMatrix[1,1],1.5);
val(aimc.airGapS.RotationMatrix[1,2],0.0);
val(aimc.airGapS.RotationMatrix[1,2],1.5);
val(aimc.airGapS.RotationMatrix[2,1],0.0);
val(aimc.airGapS.RotationMatrix[2,1],1.5);
val(aimc.airGapS.RotationMatrix[2,2],0.0);
val(aimc.airGapS.RotationMatrix[2,2],1.5);
val(der(aimc.airGapS.RotationMatrix[1,1]),0.0);
val(der(aimc.airGapS.RotationMatrix[1,1]),1.5);
val(der(aimc.airGapS.RotationMatrix[1,2]),0.0);
val(der(aimc.airGapS.RotationMatrix[1,2]),1.5);
val(der(aimc.airGapS.RotationMatrix[2,1]),0.0);
val(der(aimc.airGapS.RotationMatrix[2,1]),1.5);
val(der(aimc.airGapS.RotationMatrix[2,2]),0.0);
val(der(aimc.airGapS.RotationMatrix[2,2]),1.5);
val(aimc.airGapS.flange.phi,0.0);
val(aimc.airGapS.flange.phi,1.5);
val(aimc.airGapS.flange.tau,0.0);
val(aimc.airGapS.flange.tau,1.5);
val(aimc.airGapS.support.tau,0.0);
val(aimc.airGapS.support.tau,1.5);
val(aimc.airGapS.spacePhasor_s.v_[1],0.0);
val(aimc.airGapS.spacePhasor_s.v_[1],1.5);
val(aimc.airGapS.spacePhasor_s.v_[2],0.0);
val(aimc.airGapS.spacePhasor_s.v_[2],1.5);
val(aimc.airGapS.spacePhasor_s.i_[1],0.0);
val(aimc.airGapS.spacePhasor_s.i_[1],1.5);
val(aimc.airGapS.spacePhasor_s.i_[2],0.0);
val(aimc.airGapS.spacePhasor_s.i_[2],1.5);
val(aimc.airGapS.spacePhasor_r.v_[1],0.0);
val(aimc.airGapS.spacePhasor_r.v_[1],1.5);
val(aimc.airGapS.spacePhasor_r.v_[2],0.0);
val(aimc.airGapS.spacePhasor_r.v_[2],1.5);
val(aimc.airGapS.spacePhasor_r.i_[1],0.0);
val(aimc.airGapS.spacePhasor_r.i_[1],1.5);
val(aimc.airGapS.spacePhasor_r.i_[2],0.0);
val(aimc.airGapS.spacePhasor_r.i_[2],1.5);
val(aimc.airGapS.i_ms[1],0.0);
val(aimc.airGapS.i_ms[1],1.5);
val(aimc.airGapS.i_ms[2],0.0);
val(aimc.airGapS.i_ms[2],1.5);
val(der(aimc.airGapS.i_ms[1]),0.0);
val(der(aimc.airGapS.i_ms[1]),1.5);
val(der(aimc.airGapS.i_ms[2]),0.0);
val(der(aimc.airGapS.i_ms[2]),1.5);
val(aimc.squirrelCageR.spacePhasor_r.v_[1],0.0);
val(aimc.squirrelCageR.spacePhasor_r.v_[1],1.5);
val(aimc.squirrelCageR.spacePhasor_r.v_[2],0.0);
val(aimc.squirrelCageR.spacePhasor_r.v_[2],1.5);
val(aimc.squirrelCageR.spacePhasor_r.i_[1],0.0);
val(aimc.squirrelCageR.spacePhasor_r.i_[1],1.5);
val(aimc.squirrelCageR.spacePhasor_r.i_[2],0.0);
val(aimc.squirrelCageR.spacePhasor_r.i_[2],1.5);
val(der(aimc.squirrelCageR.spacePhasor_r.i_[1]),0.0);
val(der(aimc.squirrelCageR.spacePhasor_r.i_[1]),1.5);
val(der(aimc.squirrelCageR.spacePhasor_r.i_[2]),0.0);
val(der(aimc.squirrelCageR.spacePhasor_r.i_[2]),1.5);
val(currentQuasiRMSSensor.I,0.0);
val(currentQuasiRMSSensor.I,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,1.5);
val(currentQuasiRMSSensor.Gain1.u,0.0);
val(currentQuasiRMSSensor.Gain1.u,1.5);
val(currentQuasiRMSSensor.Gain1.y,0.0);
val(currentQuasiRMSSensor.Gain1.y,1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,1.5);
val(currentQuasiRMSSensor.ToPolar1.u[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.u[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[2],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[2],1.5);
val(ramp.y,0.0);
val(ramp.y,1.5);
val(vfController.u,0.0);
val(vfController.u,1.5);
val(vfController.y[1],0.0);
val(vfController.y[1],1.5);
val(vfController.y[2],0.0);
val(vfController.y[2],1.5);
val(vfController.y[3],0.0);
val(vfController.y[3],1.5);
val(vfController.x,0.0);
val(vfController.x,1.5);
val(der(vfController.x),0.0);
val(der(vfController.x),1.5);
val(vfController.amplitude,0.0);
val(vfController.amplitude,1.5);
val(signalVoltage.i[1],0.0);
val(signalVoltage.i[1],1.5);
val(signalVoltage.i[2],0.0);
val(signalVoltage.i[2],1.5);
val(signalVoltage.i[3],0.0);
val(signalVoltage.i[3],1.5);
val(signalVoltage.plug_p.pin[1].v,0.0);
val(signalVoltage.plug_p.pin[1].v,1.5);
val(signalVoltage.plug_p.pin[1].i,0.0);
val(signalVoltage.plug_p.pin[1].i,1.5);
val(signalVoltage.plug_p.pin[2].v,0.0);
val(signalVoltage.plug_p.pin[2].v,1.5);
val(signalVoltage.plug_p.pin[2].i,0.0);
val(signalVoltage.plug_p.pin[2].i,1.5);
val(signalVoltage.plug_p.pin[3].v,0.0);
val(signalVoltage.plug_p.pin[3].v,1.5);
val(signalVoltage.plug_p.pin[3].i,0.0);
val(signalVoltage.plug_p.pin[3].i,1.5);
val(signalVoltage.plug_n.pin[1].i,0.0);
val(signalVoltage.plug_n.pin[1].i,1.5);
val(signalVoltage.plug_n.pin[2].i,0.0);
val(signalVoltage.plug_n.pin[2].i,1.5);
val(signalVoltage.plug_n.pin[3].i,0.0);
val(signalVoltage.plug_n.pin[3].i,1.5);
val(signalVoltage.v[1],0.0);
val(signalVoltage.v[1],1.5);
val(signalVoltage.v[2],0.0);
val(signalVoltage.v[2],1.5);
val(signalVoltage.v[3],0.0);
val(signalVoltage.v[3],1.5);
val(signalVoltage.signalVoltage[1].p.v,0.0);
val(signalVoltage.signalVoltage[1].p.v,1.5);
val(signalVoltage.signalVoltage[1].p.i,0.0);
val(signalVoltage.signalVoltage[1].p.i,1.5);
val(signalVoltage.signalVoltage[1].n.i,0.0);
val(signalVoltage.signalVoltage[1].n.i,1.5);
val(signalVoltage.signalVoltage[1].v,0.0);
val(signalVoltage.signalVoltage[1].v,1.5);
val(signalVoltage.signalVoltage[1].i,0.0);
val(signalVoltage.signalVoltage[1].i,1.5);
val(signalVoltage.signalVoltage[2].p.v,0.0);
val(signalVoltage.signalVoltage[2].p.v,1.5);
val(signalVoltage.signalVoltage[2].p.i,0.0);
val(signalVoltage.signalVoltage[2].p.i,1.5);
val(signalVoltage.signalVoltage[2].n.i,0.0);
val(signalVoltage.signalVoltage[2].n.i,1.5);
val(signalVoltage.signalVoltage[2].v,0.0);
val(signalVoltage.signalVoltage[2].v,1.5);
val(signalVoltage.signalVoltage[2].i,0.0);
val(signalVoltage.signalVoltage[2].i,1.5);
val(signalVoltage.signalVoltage[3].p.v,0.0);
val(signalVoltage.signalVoltage[3].p.v,1.5);
val(signalVoltage.signalVoltage[3].p.i,0.0);
val(signalVoltage.signalVoltage[3].p.i,1.5);
val(signalVoltage.signalVoltage[3].n.i,0.0);
val(signalVoltage.signalVoltage[3].n.i,1.5);
val(signalVoltage.signalVoltage[3].v,0.0);
val(signalVoltage.signalVoltage[3].v,1.5);
val(signalVoltage.signalVoltage[3].i,0.0);
val(signalVoltage.signalVoltage[3].i,1.5);
val(star.plug_p.pin[1].i,0.0);
val(star.plug_p.pin[1].i,1.5);
val(star.plug_p.pin[2].i,0.0);
val(star.plug_p.pin[2].i,1.5);
val(star.plug_p.pin[3].i,0.0);
val(star.plug_p.pin[3].i,1.5);
val(star.pin_n.i,0.0);
val(star.pin_n.i,1.5);
val(ground.p.i,0.0);
val(ground.p.i,1.5);
val(loadInertia.flange_a.phi,0.0);
val(loadInertia.flange_a.phi,1.5);
val(loadInertia.flange_a.tau,0.0);
val(loadInertia.flange_a.tau,1.5);
val(loadInertia.flange_b.phi,0.0);
val(loadInertia.flange_b.phi,1.5);
val(loadInertia.flange_b.tau,0.0);
val(loadInertia.flange_b.tau,1.5);
val(loadInertia.phi,0.0);
val(loadInertia.phi,1.5);
val(der(loadInertia.phi),0.0);
val(der(loadInertia.phi),1.5);
val(loadInertia.w,0.0);
val(loadInertia.w,1.5);
val(der(loadInertia.w),0.0);
val(der(loadInertia.w),1.5);
val(loadInertia.a,0.0);
val(loadInertia.a,1.5);
val(loadTorqueStep.flange.phi,0.0);
val(loadTorqueStep.flange.phi,1.5);
val(loadTorqueStep.flange.tau,0.0);
val(loadTorqueStep.flange.tau,1.5);
val(loadTorqueStep.phi,0.0);
val(loadTorqueStep.phi,1.5);
val(loadTorqueStep.tau,0.0);
val(loadTorqueStep.tau,1.5);
val(terminalBox.plug_sp.pin[1].v,0.0);
val(terminalBox.plug_sp.pin[1].v,1.5);
val(terminalBox.plug_sp.pin[1].i,0.0);
val(terminalBox.plug_sp.pin[1].i,1.5);
val(terminalBox.plug_sp.pin[2].v,0.0);
val(terminalBox.plug_sp.pin[2].v,1.5);
val(terminalBox.plug_sp.pin[2].i,0.0);
val(terminalBox.plug_sp.pin[2].i,1.5);
val(terminalBox.plug_sp.pin[3].v,0.0);
val(terminalBox.plug_sp.pin[3].v,1.5);
val(terminalBox.plug_sp.pin[3].i,0.0);
val(terminalBox.plug_sp.pin[3].i,1.5);
val(terminalBox.plug_sn.pin[1].v,0.0);
val(terminalBox.plug_sn.pin[1].v,1.5);
val(terminalBox.plug_sn.pin[1].i,0.0);
val(terminalBox.plug_sn.pin[1].i,1.5);
val(terminalBox.plug_sn.pin[2].v,0.0);
val(terminalBox.plug_sn.pin[2].v,1.5);
val(terminalBox.plug_sn.pin[2].i,0.0);
val(terminalBox.plug_sn.pin[2].i,1.5);
val(terminalBox.plug_sn.pin[3].v,0.0);
val(terminalBox.plug_sn.pin[3].v,1.5);
val(terminalBox.plug_sn.pin[3].i,0.0);
val(terminalBox.plug_sn.pin[3].i,1.5);
val(terminalBox.star.plug_p.pin[1].v,0.0);
val(terminalBox.star.plug_p.pin[1].v,1.5);
val(terminalBox.star.plug_p.pin[1].i,0.0);
val(terminalBox.star.plug_p.pin[1].i,1.5);
val(terminalBox.star.plug_p.pin[2].v,0.0);
val(terminalBox.star.plug_p.pin[2].v,1.5);
val(terminalBox.star.plug_p.pin[2].i,0.0);
val(terminalBox.star.plug_p.pin[2].i,1.5);
val(terminalBox.star.plug_p.pin[3].v,0.0);
val(terminalBox.star.plug_p.pin[3].v,1.5);
val(terminalBox.star.plug_p.pin[3].i,0.0);
val(terminalBox.star.plug_p.pin[3].i,1.5);
val(terminalBox.star.pin_n.v,0.0);
val(terminalBox.star.pin_n.v,1.5);
val(terminalBox.plugSupply.pin[1].v,0.0);
val(terminalBox.plugSupply.pin[1].v,1.5);
val(terminalBox.plugSupply.pin[1].i,0.0);
val(terminalBox.plugSupply.pin[1].i,1.5);
val(terminalBox.plugSupply.pin[2].v,0.0);
val(terminalBox.plugSupply.pin[2].v,1.5);
val(terminalBox.plugSupply.pin[2].i,0.0);
val(terminalBox.plugSupply.pin[2].i,1.5);
val(terminalBox.plugSupply.pin[3].v,0.0);
val(terminalBox.plugSupply.pin[3].v,1.5);
val(terminalBox.plugSupply.pin[3].i,0.0);
val(terminalBox.plugSupply.pin[3].i,1.5);
val(terminalBox.starpoint.v,0.0);
val(terminalBox.starpoint.v,1.5);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Machines.Examples.AIMC_Inverter_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.5, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Machines.Examples.AIMC_Inverter', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false",
//     messages = ""
// end SimulationResult;
// 0.0
// 150.528259277
// 0.0
// 150.844238281
// 0.0
// 150.844238281
// 0.0
// 161.398834229
// -0
// 161.399414063
// 0.0
// 150.528259277
// 0.0
// -161.399414063
// 0.0
// 150.528259277
// 0.0
// 161.398834229
// 0.0
// 150.528259277
// 0.0
// -161.399414063
// 0.0
// 150.528259277
// 0.0
// 150.844238281
// 0.0
// 150.844238281
// 0.0
// -0.00200124550611
// 0.0
// -0.00200124550611
// -0
// -161.398834229
// 0.0
// 3.02373621253e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// -0
// 9.47390342581e-15
// -0
// 3.41060513165e-13
// 0.0
// -68.4429321289
// 0.0
// -123.754844666
// 0.0
// 4.4115228653
// 0.0
// 1762.12121582
// 0.0
// -141.351455688
// 0.0
// 55.7364578247
// 0.0
// 23.3313560486
// 0.0
// 127.392181396
// 0.0
// -45.0465354919
// 0.0
// -1513.64990234
// 0.0
// 121.424583435
// 0.0
// -562.467651367
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 8.27782287161e-13
// -0
// 68.4429321289
// 0.0
// 8.27782287161e-13
// -0
// 72.9533691406
// 0.0
// 8.27782287161e-13
// 0.0
// -141.39630127
// 0.0
// -2.05328798294
// 0.0
// -2.188601017
// 0.0
// 4.24188899994
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 2.05328845978
// -0
// 68.4429321289
// -0
// -120.285888672
// -0
// 72.9533691406
// 0.0
// 118.232597351
// 0.0
// -141.39630127
// 0.0
// -2.05328798294
// 0.0
// -68.4429321289
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// 0.0
// 2.05328845978
// -0
// 68.4429321289
// 0.0
// 140.533065796
// 0.0
// -2.188601017
// 0.0
// -72.9533691406
// -0
// -122.474487305
// 0.0
// -72.9533691406
// -0
// -120.285888672
// -0
// 72.9533691406
// 0.0
// 159.66583252
// -0
// 4.24188899994
// -0
// 141.39630127
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 118.232597351
// 0.0
// -141.39630127
// 0.0
// 599.787475586
// 0.0
// 12.5952644348
// 0.0
// -12.3299913406
// 0.0
// -0.265272349119
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// 2.05328845978
// 0.0
// -68.4429321289
// -0
// -120.285888672
// 0.0
// -72.9533691406
// 0.0
// 118.232597351
// -0
// 141.39630127
// 0.0
// -10.541975975
// -0
// 68.4429321289
// -0
// -107.95589447
// -0
// 72.9533691406
// 0.0
// 118.497871399
// 0.0
// -141.39630127
// -0
// 12.5952644348
// 0.0
// -68.4429321289
// -0
// 38878.546875
// 0.0
// 2.05328845978
// 0.0
// -68.4429321289
// 0.0
// -10.541975975
// -0
// 68.4429321289
// 0.0
// -12.3299913406
// 0.0
// -72.9533691406
// 0.0
// -38059.7148438
// -0
// -120.285888672
// 0.0
// -72.9533691406
// -0
// -107.95589447
// -0
// 72.9533691406
// 0.0
// -0.265272349119
// -0
// 141.39630127
// 0.0
// -818.831848145
// 0.0
// 118.232597351
// -0
// 141.39630127
// 0.0
// 118.497871399
// 0.0
// -141.39630127
// 0.0
// -10.541975975
// -0
// -107.95589447
// 0.0
// 118.497871399
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// -10.541975975
// 0.0
// -68.4429321289
// -0
// -107.95589447
// 0.0
// -72.9533691406
// 0.0
// 118.497871399
// -0
// 141.39630127
// 0.0
// 8.27782287161e-13
// -0
// 68.4429321289
// 0.0
// 8.27782287161e-13
// -0
// 72.9533691406
// 0.0
// 8.27782287161e-13
// 0.0
// -141.39630127
// -0
// 9.47390342581e-15
// 0.0
// -9.47390342581e-15
// 0.0
// -9.47390342581e-15
// 0.0
// -10.541975975
// -0
// -130.743148804
// -0
// 68.4429321289
// -0
// 123.754844666
// 0.0
// 161.398834229
// 0.0
// 301.056518555
// 0.0
// 301.688476563
// 0.0
// -68.4429321289
// 0.0
// -123.754844666
// -0
// 38878.546875
// 0.0
// -21501.0351563
// 0.0
// 4.4115228653
// 0.0
// -141.351455688
// 0.0
// 23.3313560486
// 0.0
// 127.392181396
// 0.0
// -40021.2695313
// 0.0
// 7328.84667969
// 0.0
// -45.0465354919
// 0.0
// 121.424583435
// 0.0
// -0.416169315577
// 0.0
// 0.0335556194186
// 0.0
// -10.541975975
// -0
// -130.743148804
// 0.0
// -0.374871492386
// 0.0
// -0.183832079172
// 0.0
// 2.29223012924
// -0
// -4.6747636795
// 1.0
// 0.859562516212
// -0
// 0.511030554771
// 0.0
// -0.511030554771
// 1.0
// 0.859562516212
// -0
// 154.172042847
// -0
// -259.320129395
// 0.0
// 259.320129395
// -0
// 154.172042847
// 0.0
// 150.528259277
// -0
// -161.398834229
// 0.0
// 161.398834229
// 0.0
// -10.541975975
// -0
// -130.743148804
// 0.0
// -68.4429321289
// 0.0
// -123.754844666
// 0.0
// 2.29223012924
// -0
// -4.6747636795
// 0.0
// -45.0465354919
// 0.0
// 121.424583435
// 0.0
// -45.111579895
// 0.0
// 3.63733434677
// 0.0
// -1142.72045898
// 0.0
// -14172.1875
// 0.0
// 2.29223012924
// -0
// -4.6747636795
// -0
// 45.0465354919
// -0
// -121.424583435
// -0
// 1513.64990234
// -0
// 562.467651367
// 0.0
// 99.9992446899
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// -0
// 141.39630127
// 0.0
// 141.420288086
// 0.0
// 99.9992446899
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// -68.4429321289
// 0.0
// -123.754844666
// 0.0
// -9.47390342581e-15
// 0.0
// -68.4429321289
// 0.0
// -123.754844666
// 0.0
// 141.420288086
// 0.0
// -2.07598018646
// 0.0
// 50.0
// 0.0
// 50.0
// 0.0
// 3.02374473904e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 314.15927124
// 0.0
// 314.15927124
// 0.0
// 141.421356201
// -0
// 68.4429321289
// -0
// 72.9533691406
// 0.0
// -141.39630127
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// 0.0
// -68.4429321289
// 0.0
// -72.9533691406
// -0
// 141.39630127
// 0.0
// 3.02374473904e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// 0.0
// -68.4429321289
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// -72.9533691406
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// -0
// 141.39630127
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// -0
// 68.4429321289
// -0
// 72.9533691406
// 0.0
// -141.39630127
// 0.0
// -2.84217094304e-14
// -0
// 2.84217094304e-14
// 0.0
// 150.528259277
// -0
// 161.399414063
// 0.0
// 150.528259277
// 0.0
// -161.399993896
// 0.0
// 150.528259277
// 0.0
// 150.844238281
// 0.0
// 150.844238281
// 0.0
// -0.00200124550611
// 0.0
// -0.00200124550611
// 0.0
// 150.528259277
// -0
// 161.399993896
// 0.0
// 150.528259277
// 0.0
// -161.399993896
// 0.0
// 3.02374473904e-07
// -0
// 68.4429321289
// -0
// -122.474487305
// -0
// 72.9533691406
// 0.0
// 122.474487305
// 0.0
// -141.39630127
// 0.0
// 8.27782287161e-13
// 0.0
// -68.4429321289
// 0.0
// 8.27782287161e-13
// 0.0
// -72.9533691406
// 0.0
// 8.27782287161e-13
// -0
// 141.39630127
// 0.0
// 8.27782287161e-13
// 0.0
// -68.4429321289
// 0.0
// 8.27782287161e-13
// 0.0
// -72.9533691406
// 0.0
// 8.27782287161e-13
// -0
// 141.39630127
// 0.0
// 8.27782287161e-13
// 0.0
// 3.02374473904e-07
// 0.0
// -68.4429321289
// -0
// -122.474487305
// 0.0
// -72.9533691406
// 0.0
// 122.474487305
// -0
// 141.39630127
// 0.0
// 8.27782287161e-13
// endResult
