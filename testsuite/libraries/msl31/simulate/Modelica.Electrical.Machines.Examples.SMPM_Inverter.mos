// name:     Modelica.Electrical.Machines.Examples.SMPM_Inverter
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Machines.Examples.SMPM_Inverter_* Modelica.Electrical.Machines.Examples.SMPM_Inverter Modelica.Electrical.Machines.Examples.SMPM_Inverter.exe Modelica.Electrical.Machines.Examples.SMPM_Inverter.cpp Modelica.Electrical.Machines.Examples.SMPM_Inverter.makefile Modelica.Electrical.Machines.Examples.SMPM_Inverter.libs Modelica.Electrical.Machines.Examples.SMPM_Inverter.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Machines.Examples.SMPM_Inverter,stopTime=1.5);
val(smpm.phiMechanical,0.0);
val(smpm.phiMechanical,1.5);
val(der(smpm.phiMechanical),0.0);
val(der(smpm.phiMechanical),1.5);
val(smpm.wMechanical,0.0);
val(smpm.wMechanical,1.5);
val(smpm.tauElectrical,0.0);
val(smpm.tauElectrical,1.5);
val(smpm.tauShaft,0.0);
val(smpm.tauShaft,1.5);
val(smpm.flange.phi,0.0);
val(smpm.flange.phi,1.5);
val(smpm.flange.tau,0.0);
val(smpm.flange.tau,1.5);
val(smpm.inertiaRotor.flange_a.phi,0.0);
val(smpm.inertiaRotor.flange_a.phi,1.5);
val(smpm.inertiaRotor.flange_a.tau,0.0);
val(smpm.inertiaRotor.flange_a.tau,1.5);
val(smpm.inertiaRotor.flange_b.phi,0.0);
val(smpm.inertiaRotor.flange_b.phi,1.5);
val(smpm.inertiaRotor.flange_b.tau,0.0);
val(smpm.inertiaRotor.flange_b.tau,1.5);
val(smpm.inertiaRotor.phi,0.0);
val(smpm.inertiaRotor.phi,1.5);
val(der(smpm.inertiaRotor.phi),0.0);
val(der(smpm.inertiaRotor.phi),1.5);
val(smpm.inertiaRotor.w,0.0);
val(smpm.inertiaRotor.w,1.5);
val(der(smpm.inertiaRotor.w),0.0);
val(der(smpm.inertiaRotor.w),1.5);
val(smpm.inertiaRotor.a,0.0);
val(smpm.inertiaRotor.a,1.5);
val(smpm.fixed.flange.tau,0.0);
val(smpm.fixed.flange.tau,1.5);
val(smpm.vs[1],0.0);
val(smpm.vs[1],1.5);
val(smpm.vs[2],0.0);
val(smpm.vs[2],1.5);
val(smpm.vs[3],0.0);
val(smpm.vs[3],1.5);
val(smpm.is[1],0.0);
val(smpm.is[1],1.5);
val(smpm.is[2],0.0);
val(smpm.is[2],1.5);
val(smpm.is[3],0.0);
val(smpm.is[3],1.5);
val(smpm.i_0_s,0.0);
val(smpm.i_0_s,1.5);
val(der(smpm.i_0_s),0.0);
val(der(smpm.i_0_s),1.5);
val(smpm.idq_ss[1],0.0);
val(smpm.idq_ss[1],1.5);
val(smpm.idq_ss[2],0.0);
val(smpm.idq_ss[2],1.5);
val(smpm.idq_sr[1],0.0);
val(smpm.idq_sr[1],1.5);
val(der(smpm.idq_sr[1]),0.0);
val(der(smpm.idq_sr[1]),1.5);
val(smpm.idq_sr[2],0.0);
val(smpm.idq_sr[2],1.5);
val(der(smpm.idq_sr[2]),0.0);
val(der(smpm.idq_sr[2]),1.5);
val(smpm.idq_rs[1],0.0);
val(smpm.idq_rs[1],1.5);
val(smpm.idq_rs[2],0.0);
val(smpm.idq_rs[2],1.5);
val(smpm.idq_rr[1],0.0);
val(smpm.idq_rr[1],1.5);
val(smpm.idq_rr[2],0.0);
val(smpm.idq_rr[2],1.5);
val(der(smpm.idq_rr[2]),0.0);
val(der(smpm.idq_rr[2]),1.5);
val(der(smpm.idq_rr[1]),0.0);
val(der(smpm.idq_rr[1]),1.5);
val(smpm.plug_sp.pin[1].v,0.0);
val(smpm.plug_sp.pin[1].v,1.5);
val(smpm.plug_sp.pin[1].i,0.0);
val(smpm.plug_sp.pin[1].i,1.5);
val(smpm.plug_sp.pin[2].v,0.0);
val(smpm.plug_sp.pin[2].v,1.5);
val(smpm.plug_sp.pin[2].i,0.0);
val(smpm.plug_sp.pin[2].i,1.5);
val(smpm.plug_sp.pin[3].v,0.0);
val(smpm.plug_sp.pin[3].v,1.5);
val(smpm.plug_sp.pin[3].i,0.0);
val(smpm.plug_sp.pin[3].i,1.5);
val(smpm.plug_sn.pin[1].v,0.0);
val(smpm.plug_sn.pin[1].v,1.5);
val(smpm.plug_sn.pin[1].i,0.0);
val(smpm.plug_sn.pin[1].i,1.5);
val(smpm.plug_sn.pin[2].v,0.0);
val(smpm.plug_sn.pin[2].v,1.5);
val(smpm.plug_sn.pin[2].i,0.0);
val(smpm.plug_sn.pin[2].i,1.5);
val(smpm.plug_sn.pin[3].v,0.0);
val(smpm.plug_sn.pin[3].v,1.5);
val(smpm.plug_sn.pin[3].i,0.0);
val(smpm.plug_sn.pin[3].i,1.5);
val(smpm.rs.v[1],0.0);
val(smpm.rs.v[1],1.5);
val(smpm.rs.v[2],0.0);
val(smpm.rs.v[2],1.5);
val(smpm.rs.v[3],0.0);
val(smpm.rs.v[3],1.5);
val(smpm.rs.i[1],0.0);
val(smpm.rs.i[1],1.5);
val(smpm.rs.i[2],0.0);
val(smpm.rs.i[2],1.5);
val(smpm.rs.i[3],0.0);
val(smpm.rs.i[3],1.5);
val(smpm.rs.plug_p.pin[1].v,0.0);
val(smpm.rs.plug_p.pin[1].v,1.5);
val(smpm.rs.plug_p.pin[1].i,0.0);
val(smpm.rs.plug_p.pin[1].i,1.5);
val(smpm.rs.plug_p.pin[2].v,0.0);
val(smpm.rs.plug_p.pin[2].v,1.5);
val(smpm.rs.plug_p.pin[2].i,0.0);
val(smpm.rs.plug_p.pin[2].i,1.5);
val(smpm.rs.plug_p.pin[3].v,0.0);
val(smpm.rs.plug_p.pin[3].v,1.5);
val(smpm.rs.plug_p.pin[3].i,0.0);
val(smpm.rs.plug_p.pin[3].i,1.5);
val(smpm.rs.plug_n.pin[1].v,0.0);
val(smpm.rs.plug_n.pin[1].v,1.5);
val(smpm.rs.plug_n.pin[1].i,0.0);
val(smpm.rs.plug_n.pin[1].i,1.5);
val(smpm.rs.plug_n.pin[2].v,0.0);
val(smpm.rs.plug_n.pin[2].v,1.5);
val(smpm.rs.plug_n.pin[2].i,0.0);
val(smpm.rs.plug_n.pin[2].i,1.5);
val(smpm.rs.plug_n.pin[3].v,0.0);
val(smpm.rs.plug_n.pin[3].v,1.5);
val(smpm.rs.plug_n.pin[3].i,0.0);
val(smpm.rs.plug_n.pin[3].i,1.5);
val(smpm.rs.resistor[1].v,0.0);
val(smpm.rs.resistor[1].v,1.5);
val(smpm.rs.resistor[1].i,0.0);
val(smpm.rs.resistor[1].i,1.5);
val(smpm.rs.resistor[1].p.v,0.0);
val(smpm.rs.resistor[1].p.v,1.5);
val(smpm.rs.resistor[1].p.i,0.0);
val(smpm.rs.resistor[1].p.i,1.5);
val(smpm.rs.resistor[1].n.v,0.0);
val(smpm.rs.resistor[1].n.v,1.5);
val(smpm.rs.resistor[1].n.i,0.0);
val(smpm.rs.resistor[1].n.i,1.5);
val(smpm.rs.resistor[1].LossPower,0.0);
val(smpm.rs.resistor[1].LossPower,1.5);
val(smpm.rs.resistor[2].v,0.0);
val(smpm.rs.resistor[2].v,1.5);
val(smpm.rs.resistor[2].i,0.0);
val(smpm.rs.resistor[2].i,1.5);
val(smpm.rs.resistor[2].p.v,0.0);
val(smpm.rs.resistor[2].p.v,1.5);
val(smpm.rs.resistor[2].p.i,0.0);
val(smpm.rs.resistor[2].p.i,1.5);
val(smpm.rs.resistor[2].n.v,0.0);
val(smpm.rs.resistor[2].n.v,1.5);
val(smpm.rs.resistor[2].n.i,0.0);
val(smpm.rs.resistor[2].n.i,1.5);
val(smpm.rs.resistor[2].LossPower,0.0);
val(smpm.rs.resistor[2].LossPower,1.5);
val(smpm.rs.resistor[3].v,0.0);
val(smpm.rs.resistor[3].v,1.5);
val(smpm.rs.resistor[3].i,0.0);
val(smpm.rs.resistor[3].i,1.5);
val(smpm.rs.resistor[3].p.v,0.0);
val(smpm.rs.resistor[3].p.v,1.5);
val(smpm.rs.resistor[3].p.i,0.0);
val(smpm.rs.resistor[3].p.i,1.5);
val(smpm.rs.resistor[3].n.v,0.0);
val(smpm.rs.resistor[3].n.v,1.5);
val(smpm.rs.resistor[3].n.i,0.0);
val(smpm.rs.resistor[3].n.i,1.5);
val(smpm.rs.resistor[3].LossPower,0.0);
val(smpm.rs.resistor[3].LossPower,1.5);
val(smpm.lssigma.v[1],0.0);
val(smpm.lssigma.v[1],1.5);
val(smpm.lssigma.v[2],0.0);
val(smpm.lssigma.v[2],1.5);
val(smpm.lssigma.v[3],0.0);
val(smpm.lssigma.v[3],1.5);
val(smpm.lssigma.i[1],0.0);
val(smpm.lssigma.i[1],1.5);
val(smpm.lssigma.i[2],0.0);
val(smpm.lssigma.i[2],1.5);
val(smpm.lssigma.i[3],0.0);
val(smpm.lssigma.i[3],1.5);
val(smpm.lssigma.plug_p.pin[1].v,0.0);
val(smpm.lssigma.plug_p.pin[1].v,1.5);
val(smpm.lssigma.plug_p.pin[1].i,0.0);
val(smpm.lssigma.plug_p.pin[1].i,1.5);
val(smpm.lssigma.plug_p.pin[2].v,0.0);
val(smpm.lssigma.plug_p.pin[2].v,1.5);
val(smpm.lssigma.plug_p.pin[2].i,0.0);
val(smpm.lssigma.plug_p.pin[2].i,1.5);
val(smpm.lssigma.plug_p.pin[3].v,0.0);
val(smpm.lssigma.plug_p.pin[3].v,1.5);
val(smpm.lssigma.plug_p.pin[3].i,0.0);
val(smpm.lssigma.plug_p.pin[3].i,1.5);
val(smpm.lssigma.plug_n.pin[1].v,0.0);
val(smpm.lssigma.plug_n.pin[1].v,1.5);
val(smpm.lssigma.plug_n.pin[1].i,0.0);
val(smpm.lssigma.plug_n.pin[1].i,1.5);
val(smpm.lssigma.plug_n.pin[2].v,0.0);
val(smpm.lssigma.plug_n.pin[2].v,1.5);
val(smpm.lssigma.plug_n.pin[2].i,0.0);
val(smpm.lssigma.plug_n.pin[2].i,1.5);
val(smpm.lssigma.plug_n.pin[3].v,0.0);
val(smpm.lssigma.plug_n.pin[3].v,1.5);
val(smpm.lssigma.plug_n.pin[3].i,0.0);
val(smpm.lssigma.plug_n.pin[3].i,1.5);
val(smpm.lssigma.inductor[1].v,0.0);
val(smpm.lssigma.inductor[1].v,1.5);
val(smpm.lssigma.inductor[1].i,0.0);
val(smpm.lssigma.inductor[1].i,1.5);
val(der(smpm.lssigma.inductor[1].i),0.0);
val(der(smpm.lssigma.inductor[1].i),1.5);
val(smpm.lssigma.inductor[1].p.v,0.0);
val(smpm.lssigma.inductor[1].p.v,1.5);
val(smpm.lssigma.inductor[1].p.i,0.0);
val(smpm.lssigma.inductor[1].p.i,1.5);
val(smpm.lssigma.inductor[1].n.v,0.0);
val(smpm.lssigma.inductor[1].n.v,1.5);
val(smpm.lssigma.inductor[1].n.i,0.0);
val(smpm.lssigma.inductor[1].n.i,1.5);
val(smpm.lssigma.inductor[2].v,0.0);
val(smpm.lssigma.inductor[2].v,1.5);
val(smpm.lssigma.inductor[2].i,0.0);
val(smpm.lssigma.inductor[2].i,1.5);
val(der(smpm.lssigma.inductor[2].i),0.0);
val(der(smpm.lssigma.inductor[2].i),1.5);
val(smpm.lssigma.inductor[2].p.v,0.0);
val(smpm.lssigma.inductor[2].p.v,1.5);
val(smpm.lssigma.inductor[2].p.i,0.0);
val(smpm.lssigma.inductor[2].p.i,1.5);
val(smpm.lssigma.inductor[2].n.v,0.0);
val(smpm.lssigma.inductor[2].n.v,1.5);
val(smpm.lssigma.inductor[2].n.i,0.0);
val(smpm.lssigma.inductor[2].n.i,1.5);
val(smpm.lssigma.inductor[3].v,0.0);
val(smpm.lssigma.inductor[3].v,1.5);
val(smpm.lssigma.inductor[3].i,0.0);
val(smpm.lssigma.inductor[3].i,1.5);
val(der(smpm.lssigma.inductor[3].i),0.0);
val(der(smpm.lssigma.inductor[3].i),1.5);
val(smpm.lssigma.inductor[3].p.v,0.0);
val(smpm.lssigma.inductor[3].p.v,1.5);
val(smpm.lssigma.inductor[3].p.i,0.0);
val(smpm.lssigma.inductor[3].p.i,1.5);
val(smpm.lssigma.inductor[3].n.v,0.0);
val(smpm.lssigma.inductor[3].n.v,1.5);
val(smpm.lssigma.inductor[3].n.i,0.0);
val(smpm.lssigma.inductor[3].n.i,1.5);
val(smpm.spacePhasorS.v[1],0.0);
val(smpm.spacePhasorS.v[1],1.5);
val(smpm.spacePhasorS.v[2],0.0);
val(smpm.spacePhasorS.v[2],1.5);
val(smpm.spacePhasorS.v[3],0.0);
val(smpm.spacePhasorS.v[3],1.5);
val(smpm.spacePhasorS.i[1],0.0);
val(smpm.spacePhasorS.i[1],1.5);
val(smpm.spacePhasorS.i[2],0.0);
val(smpm.spacePhasorS.i[2],1.5);
val(smpm.spacePhasorS.i[3],0.0);
val(smpm.spacePhasorS.i[3],1.5);
val(smpm.spacePhasorS.plug_p.pin[1].v,0.0);
val(smpm.spacePhasorS.plug_p.pin[1].v,1.5);
val(smpm.spacePhasorS.plug_p.pin[1].i,0.0);
val(smpm.spacePhasorS.plug_p.pin[1].i,1.5);
val(smpm.spacePhasorS.plug_p.pin[2].v,0.0);
val(smpm.spacePhasorS.plug_p.pin[2].v,1.5);
val(smpm.spacePhasorS.plug_p.pin[2].i,0.0);
val(smpm.spacePhasorS.plug_p.pin[2].i,1.5);
val(smpm.spacePhasorS.plug_p.pin[3].v,0.0);
val(smpm.spacePhasorS.plug_p.pin[3].v,1.5);
val(smpm.spacePhasorS.plug_p.pin[3].i,0.0);
val(smpm.spacePhasorS.plug_p.pin[3].i,1.5);
val(smpm.spacePhasorS.plug_n.pin[1].v,0.0);
val(smpm.spacePhasorS.plug_n.pin[1].v,1.5);
val(smpm.spacePhasorS.plug_n.pin[1].i,0.0);
val(smpm.spacePhasorS.plug_n.pin[1].i,1.5);
val(smpm.spacePhasorS.plug_n.pin[2].v,0.0);
val(smpm.spacePhasorS.plug_n.pin[2].v,1.5);
val(smpm.spacePhasorS.plug_n.pin[2].i,0.0);
val(smpm.spacePhasorS.plug_n.pin[2].i,1.5);
val(smpm.spacePhasorS.plug_n.pin[3].v,0.0);
val(smpm.spacePhasorS.plug_n.pin[3].v,1.5);
val(smpm.spacePhasorS.plug_n.pin[3].i,0.0);
val(smpm.spacePhasorS.plug_n.pin[3].i,1.5);
val(smpm.spacePhasorS.zero.i,0.0);
val(smpm.spacePhasorS.zero.i,1.5);
val(smpm.spacePhasorS.ground.i,0.0);
val(smpm.spacePhasorS.ground.i,1.5);
val(smpm.spacePhasorS.gnd.p.i,0.0);
val(smpm.spacePhasorS.gnd.p.i,1.5);
val(smpm.spacePhasorS.spacePhasor.v_[1],0.0);
val(smpm.spacePhasorS.spacePhasor.v_[1],1.5);
val(smpm.spacePhasorS.spacePhasor.v_[2],0.0);
val(smpm.spacePhasorS.spacePhasor.v_[2],1.5);
val(smpm.spacePhasorS.spacePhasor.i_[1],0.0);
val(smpm.spacePhasorS.spacePhasor.i_[1],1.5);
val(smpm.spacePhasorS.spacePhasor.i_[2],0.0);
val(smpm.spacePhasorS.spacePhasor.i_[2],1.5);
val(smpm.airGapR.tauElectrical,0.0);
val(smpm.airGapR.tauElectrical,1.5);
val(smpm.airGapR.gamma,0.0);
val(smpm.airGapR.gamma,1.5);
val(der(smpm.airGapR.gamma),0.0);
val(der(smpm.airGapR.gamma),1.5);
val(smpm.airGapR.i_ss[1],0.0);
val(smpm.airGapR.i_ss[1],1.5);
val(smpm.airGapR.i_ss[2],0.0);
val(smpm.airGapR.i_ss[2],1.5);
val(der(smpm.airGapR.i_ss[1]),0.0);
val(der(smpm.airGapR.i_ss[1]),1.5);
val(der(smpm.airGapR.i_ss[2]),0.0);
val(der(smpm.airGapR.i_ss[2]),1.5);
val(smpm.airGapR.i_sr[1],0.0);
val(smpm.airGapR.i_sr[1],1.5);
val(smpm.airGapR.i_sr[2],0.0);
val(smpm.airGapR.i_sr[2],1.5);
val(smpm.airGapR.i_rs[1],0.0);
val(smpm.airGapR.i_rs[1],1.5);
val(smpm.airGapR.i_rs[2],0.0);
val(smpm.airGapR.i_rs[2],1.5);
val(smpm.airGapR.i_rr[1],0.0);
val(smpm.airGapR.i_rr[1],1.5);
val(smpm.airGapR.i_rr[2],0.0);
val(smpm.airGapR.i_rr[2],1.5);
val(smpm.airGapR.psi_ms[1],0.0);
val(smpm.airGapR.psi_ms[1],1.5);
val(smpm.airGapR.psi_ms[2],0.0);
val(smpm.airGapR.psi_ms[2],1.5);
val(der(smpm.airGapR.psi_ms[1]),0.0);
val(der(smpm.airGapR.psi_ms[1]),1.5);
val(der(smpm.airGapR.psi_ms[2]),0.0);
val(der(smpm.airGapR.psi_ms[2]),1.5);
val(smpm.airGapR.psi_mr[1],0.0);
val(smpm.airGapR.psi_mr[1],1.5);
val(smpm.airGapR.psi_mr[2],0.0);
val(smpm.airGapR.psi_mr[2],1.5);
val(der(smpm.airGapR.psi_mr[1]),0.0);
val(der(smpm.airGapR.psi_mr[1]),1.5);
val(der(smpm.airGapR.psi_mr[2]),0.0);
val(der(smpm.airGapR.psi_mr[2]),1.5);
val(smpm.airGapR.RotationMatrix[1,1],0.0);
val(smpm.airGapR.RotationMatrix[1,1],1.5);
val(smpm.airGapR.RotationMatrix[1,2],0.0);
val(smpm.airGapR.RotationMatrix[1,2],1.5);
val(smpm.airGapR.RotationMatrix[2,1],0.0);
val(smpm.airGapR.RotationMatrix[2,1],1.5);
val(smpm.airGapR.RotationMatrix[2,2],0.0);
val(smpm.airGapR.RotationMatrix[2,2],1.5);
val(der(smpm.airGapR.RotationMatrix[1,1]),0.0);
val(der(smpm.airGapR.RotationMatrix[1,1]),1.5);
val(der(smpm.airGapR.RotationMatrix[1,2]),0.0);
val(der(smpm.airGapR.RotationMatrix[1,2]),1.5);
val(der(smpm.airGapR.RotationMatrix[2,1]),0.0);
val(der(smpm.airGapR.RotationMatrix[2,1]),1.5);
val(der(smpm.airGapR.RotationMatrix[2,2]),0.0);
val(der(smpm.airGapR.RotationMatrix[2,2]),1.5);
val(smpm.airGapR.flange.phi,0.0);
val(smpm.airGapR.flange.phi,1.5);
val(smpm.airGapR.flange.tau,0.0);
val(smpm.airGapR.flange.tau,1.5);
val(smpm.airGapR.support.tau,0.0);
val(smpm.airGapR.support.tau,1.5);
val(smpm.airGapR.spacePhasor_s.v_[1],0.0);
val(smpm.airGapR.spacePhasor_s.v_[1],1.5);
val(smpm.airGapR.spacePhasor_s.v_[2],0.0);
val(smpm.airGapR.spacePhasor_s.v_[2],1.5);
val(smpm.airGapR.spacePhasor_s.i_[1],0.0);
val(smpm.airGapR.spacePhasor_s.i_[1],1.5);
val(smpm.airGapR.spacePhasor_s.i_[2],0.0);
val(smpm.airGapR.spacePhasor_s.i_[2],1.5);
val(smpm.airGapR.spacePhasor_r.v_[1],0.0);
val(smpm.airGapR.spacePhasor_r.v_[1],1.5);
val(smpm.airGapR.spacePhasor_r.v_[2],0.0);
val(smpm.airGapR.spacePhasor_r.v_[2],1.5);
val(smpm.airGapR.spacePhasor_r.i_[1],0.0);
val(smpm.airGapR.spacePhasor_r.i_[1],1.5);
val(smpm.airGapR.spacePhasor_r.i_[2],0.0);
val(smpm.airGapR.spacePhasor_r.i_[2],1.5);
val(smpm.airGapR.i_mr[1],0.0);
val(smpm.airGapR.i_mr[1],1.5);
val(smpm.airGapR.i_mr[2],0.0);
val(smpm.airGapR.i_mr[2],1.5);
val(der(smpm.airGapR.i_mr[1]),0.0);
val(der(smpm.airGapR.i_mr[1]),1.5);
val(der(smpm.airGapR.i_mr[2]),0.0);
val(der(smpm.airGapR.i_mr[2]),1.5);
val(smpm.idq_dr[1],0.0);
val(smpm.idq_dr[1],1.5);
val(der(smpm.idq_dr[1]),0.0);
val(der(smpm.idq_dr[1]),1.5);
val(smpm.idq_dr[2],0.0);
val(smpm.idq_dr[2],1.5);
val(der(smpm.idq_dr[2]),0.0);
val(der(smpm.idq_dr[2]),1.5);
val(smpm.permanentMagnet.spacePhasor_r.v_[1],0.0);
val(smpm.permanentMagnet.spacePhasor_r.v_[1],1.5);
val(smpm.permanentMagnet.spacePhasor_r.v_[2],0.0);
val(smpm.permanentMagnet.spacePhasor_r.v_[2],1.5);
val(smpm.damperCage.spacePhasor_r.v_[1],0.0);
val(smpm.damperCage.spacePhasor_r.v_[1],1.5);
val(smpm.damperCage.spacePhasor_r.v_[2],0.0);
val(smpm.damperCage.spacePhasor_r.v_[2],1.5);
val(smpm.damperCage.spacePhasor_r.i_[1],0.0);
val(smpm.damperCage.spacePhasor_r.i_[1],1.5);
val(smpm.damperCage.spacePhasor_r.i_[2],0.0);
val(smpm.damperCage.spacePhasor_r.i_[2],1.5);
val(der(smpm.damperCage.spacePhasor_r.i_[1]),0.0);
val(der(smpm.damperCage.spacePhasor_r.i_[1]),1.5);
val(der(smpm.damperCage.spacePhasor_r.i_[2]),0.0);
val(der(smpm.damperCage.spacePhasor_r.i_[2]),1.5);
val(currentQuasiRMSSensor.I,0.0);
val(currentQuasiRMSSensor.I,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,1.5);
val(currentQuasiRMSSensor.Gain1.u,0.0);
val(currentQuasiRMSSensor.Gain1.u,1.5);
val(currentQuasiRMSSensor.Gain1.y,0.0);
val(currentQuasiRMSSensor.Gain1.y,1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,1.5);
val(currentQuasiRMSSensor.ToPolar1.u[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.u[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[2],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[2],1.5);
val(rotorDisplacementAngle.rotorDisplacementAngle,0.0);
val(rotorDisplacementAngle.rotorDisplacementAngle,1.5);
val(rotorDisplacementAngle.plug_p.pin[1].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[1].v,1.5);
val(rotorDisplacementAngle.plug_p.pin[2].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[2].v,1.5);
val(rotorDisplacementAngle.plug_p.pin[3].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[3].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[1].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[1].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[2].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[2].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[3].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[1],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[1],1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[2],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[2],1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[3],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[3],1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].v,1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[1],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[1],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[2],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[2],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[3],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[3],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[1],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[1],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[2],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[2],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.zero,0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.zero,1.5);
val(rotorDisplacementAngle.flange.phi,0.0);
val(rotorDisplacementAngle.flange.phi,1.5);
val(rotorDisplacementAngle.relativeAngleSensor.flange_b.phi,0.0);
val(rotorDisplacementAngle.relativeAngleSensor.flange_b.phi,1.5);
val(rotorDisplacementAngle.relativeAngleSensor.phi_rel,0.0);
val(rotorDisplacementAngle.relativeAngleSensor.phi_rel,1.5);
val(rotorDisplacementAngle.add.u1,0.0);
val(rotorDisplacementAngle.add.u1,1.5);
val(rotorDisplacementAngle.add.y,0.0);
val(rotorDisplacementAngle.add.y,1.5);
val(rotorDisplacementAngle.rotatorVS2R.u[1],0.0);
val(rotorDisplacementAngle.rotatorVS2R.u[1],1.5);
val(rotorDisplacementAngle.rotatorVS2R.u[2],0.0);
val(rotorDisplacementAngle.rotatorVS2R.u[2],1.5);
val(rotorDisplacementAngle.rotatorVS2R.y[1],0.0);
val(rotorDisplacementAngle.rotatorVS2R.y[1],1.5);
val(rotorDisplacementAngle.rotatorVS2R.y[2],0.0);
val(rotorDisplacementAngle.rotatorVS2R.y[2],1.5);
val(rotorDisplacementAngle.rotatorVS2R.angle,0.0);
val(rotorDisplacementAngle.rotatorVS2R.angle,1.5);
val(rotorDisplacementAngle.ToPolarVSR.u[1],0.0);
val(rotorDisplacementAngle.ToPolarVSR.u[1],1.5);
val(rotorDisplacementAngle.ToPolarVSR.u[2],0.0);
val(rotorDisplacementAngle.ToPolarVSR.u[2],1.5);
val(rotorDisplacementAngle.ToPolarVSR.y[1],0.0);
val(rotorDisplacementAngle.ToPolarVSR.y[1],1.5);
val(rotorDisplacementAngle.ToPolarVSR.y[2],0.0);
val(rotorDisplacementAngle.ToPolarVSR.y[2],1.5);
val(rotorDisplacementAngle.deMultiplex2.u[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.u[1],1.5);
val(rotorDisplacementAngle.deMultiplex2.u[2],0.0);
val(rotorDisplacementAngle.deMultiplex2.u[2],1.5);
val(rotorDisplacementAngle.deMultiplex2.y1[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.y1[1],1.5);
val(rotorDisplacementAngle.deMultiplex2.y2[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.y2[1],1.5);
val(ramp.y,0.0);
val(ramp.y,1.5);
val(vfController.u,0.0);
val(vfController.u,1.5);
val(vfController.y[1],0.0);
val(vfController.y[1],1.5);
val(vfController.y[2],0.0);
val(vfController.y[2],1.5);
val(vfController.y[3],0.0);
val(vfController.y[3],1.5);
val(vfController.x,0.0);
val(vfController.x,1.5);
val(der(vfController.x),0.0);
val(der(vfController.x),1.5);
val(vfController.amplitude,0.0);
val(vfController.amplitude,1.5);
val(signalVoltage.i[1],0.0);
val(signalVoltage.i[1],1.5);
val(signalVoltage.i[2],0.0);
val(signalVoltage.i[2],1.5);
val(signalVoltage.i[3],0.0);
val(signalVoltage.i[3],1.5);
val(signalVoltage.plug_p.pin[1].v,0.0);
val(signalVoltage.plug_p.pin[1].v,1.5);
val(signalVoltage.plug_p.pin[1].i,0.0);
val(signalVoltage.plug_p.pin[1].i,1.5);
val(signalVoltage.plug_p.pin[2].v,0.0);
val(signalVoltage.plug_p.pin[2].v,1.5);
val(signalVoltage.plug_p.pin[2].i,0.0);
val(signalVoltage.plug_p.pin[2].i,1.5);
val(signalVoltage.plug_p.pin[3].v,0.0);
val(signalVoltage.plug_p.pin[3].v,1.5);
val(signalVoltage.plug_p.pin[3].i,0.0);
val(signalVoltage.plug_p.pin[3].i,1.5);
val(signalVoltage.plug_n.pin[1].i,0.0);
val(signalVoltage.plug_n.pin[1].i,1.5);
val(signalVoltage.plug_n.pin[2].i,0.0);
val(signalVoltage.plug_n.pin[2].i,1.5);
val(signalVoltage.plug_n.pin[3].i,0.0);
val(signalVoltage.plug_n.pin[3].i,1.5);
val(signalVoltage.v[1],0.0);
val(signalVoltage.v[1],1.5);
val(signalVoltage.v[2],0.0);
val(signalVoltage.v[2],1.5);
val(signalVoltage.v[3],0.0);
val(signalVoltage.v[3],1.5);
val(signalVoltage.signalVoltage[1].p.v,0.0);
val(signalVoltage.signalVoltage[1].p.v,1.5);
val(signalVoltage.signalVoltage[1].p.i,0.0);
val(signalVoltage.signalVoltage[1].p.i,1.5);
val(signalVoltage.signalVoltage[1].n.i,0.0);
val(signalVoltage.signalVoltage[1].n.i,1.5);
val(signalVoltage.signalVoltage[1].v,0.0);
val(signalVoltage.signalVoltage[1].v,1.5);
val(signalVoltage.signalVoltage[1].i,0.0);
val(signalVoltage.signalVoltage[1].i,1.5);
val(signalVoltage.signalVoltage[2].p.v,0.0);
val(signalVoltage.signalVoltage[2].p.v,1.5);
val(signalVoltage.signalVoltage[2].p.i,0.0);
val(signalVoltage.signalVoltage[2].p.i,1.5);
val(signalVoltage.signalVoltage[2].n.i,0.0);
val(signalVoltage.signalVoltage[2].n.i,1.5);
val(signalVoltage.signalVoltage[2].v,0.0);
val(signalVoltage.signalVoltage[2].v,1.5);
val(signalVoltage.signalVoltage[2].i,0.0);
val(signalVoltage.signalVoltage[2].i,1.5);
val(signalVoltage.signalVoltage[3].p.v,0.0);
val(signalVoltage.signalVoltage[3].p.v,1.5);
val(signalVoltage.signalVoltage[3].p.i,0.0);
val(signalVoltage.signalVoltage[3].p.i,1.5);
val(signalVoltage.signalVoltage[3].n.i,0.0);
val(signalVoltage.signalVoltage[3].n.i,1.5);
val(signalVoltage.signalVoltage[3].v,0.0);
val(signalVoltage.signalVoltage[3].v,1.5);
val(signalVoltage.signalVoltage[3].i,0.0);
val(signalVoltage.signalVoltage[3].i,1.5);
val(star.plug_p.pin[1].i,0.0);
val(star.plug_p.pin[1].i,1.5);
val(star.plug_p.pin[2].i,0.0);
val(star.plug_p.pin[2].i,1.5);
val(star.plug_p.pin[3].i,0.0);
val(star.plug_p.pin[3].i,1.5);
val(star.pin_n.i,0.0);
val(star.pin_n.i,1.5);
val(ground.p.i,0.0);
val(ground.p.i,1.5);
val(loadInertia.flange_a.phi,0.0);
val(loadInertia.flange_a.phi,1.5);
val(loadInertia.flange_a.tau,0.0);
val(loadInertia.flange_a.tau,1.5);
val(loadInertia.flange_b.phi,0.0);
val(loadInertia.flange_b.phi,1.5);
val(loadInertia.flange_b.tau,0.0);
val(loadInertia.flange_b.tau,1.5);
val(loadInertia.phi,0.0);
val(loadInertia.phi,1.5);
val(der(loadInertia.phi),0.0);
val(der(loadInertia.phi),1.5);
val(loadInertia.w,0.0);
val(loadInertia.w,1.5);
val(der(loadInertia.w),0.0);
val(der(loadInertia.w),1.5);
val(loadInertia.a,0.0);
val(loadInertia.a,1.5);
val(loadTorqueStep.flange.phi,0.0);
val(loadTorqueStep.flange.phi,1.5);
val(loadTorqueStep.flange.tau,0.0);
val(loadTorqueStep.flange.tau,1.5);
val(loadTorqueStep.phi,0.0);
val(loadTorqueStep.phi,1.5);
val(loadTorqueStep.tau,0.0);
val(loadTorqueStep.tau,1.5);
val(terminalBox.plug_sp.pin[1].v,0.0);
val(terminalBox.plug_sp.pin[1].v,1.5);
val(terminalBox.plug_sp.pin[1].i,0.0);
val(terminalBox.plug_sp.pin[1].i,1.5);
val(terminalBox.plug_sp.pin[2].v,0.0);
val(terminalBox.plug_sp.pin[2].v,1.5);
val(terminalBox.plug_sp.pin[2].i,0.0);
val(terminalBox.plug_sp.pin[2].i,1.5);
val(terminalBox.plug_sp.pin[3].v,0.0);
val(terminalBox.plug_sp.pin[3].v,1.5);
val(terminalBox.plug_sp.pin[3].i,0.0);
val(terminalBox.plug_sp.pin[3].i,1.5);
val(terminalBox.plug_sn.pin[1].v,0.0);
val(terminalBox.plug_sn.pin[1].v,1.5);
val(terminalBox.plug_sn.pin[1].i,0.0);
val(terminalBox.plug_sn.pin[1].i,1.5);
val(terminalBox.plug_sn.pin[2].v,0.0);
val(terminalBox.plug_sn.pin[2].v,1.5);
val(terminalBox.plug_sn.pin[2].i,0.0);
val(terminalBox.plug_sn.pin[2].i,1.5);
val(terminalBox.plug_sn.pin[3].v,0.0);
val(terminalBox.plug_sn.pin[3].v,1.5);
val(terminalBox.plug_sn.pin[3].i,0.0);
val(terminalBox.plug_sn.pin[3].i,1.5);
val(terminalBox.star.plug_p.pin[1].v,0.0);
val(terminalBox.star.plug_p.pin[1].v,1.5);
val(terminalBox.star.plug_p.pin[1].i,0.0);
val(terminalBox.star.plug_p.pin[1].i,1.5);
val(terminalBox.star.plug_p.pin[2].v,0.0);
val(terminalBox.star.plug_p.pin[2].v,1.5);
val(terminalBox.star.plug_p.pin[2].i,0.0);
val(terminalBox.star.plug_p.pin[2].i,1.5);
val(terminalBox.star.plug_p.pin[3].v,0.0);
val(terminalBox.star.plug_p.pin[3].v,1.5);
val(terminalBox.star.plug_p.pin[3].i,0.0);
val(terminalBox.star.plug_p.pin[3].i,1.5);
val(terminalBox.star.pin_n.v,0.0);
val(terminalBox.star.pin_n.v,1.5);
val(terminalBox.plugSupply.pin[1].v,0.0);
val(terminalBox.plugSupply.pin[1].v,1.5);
val(terminalBox.plugSupply.pin[1].i,0.0);
val(terminalBox.plugSupply.pin[1].i,1.5);
val(terminalBox.plugSupply.pin[2].v,0.0);
val(terminalBox.plugSupply.pin[2].v,1.5);
val(terminalBox.plugSupply.pin[2].i,0.0);
val(terminalBox.plugSupply.pin[2].i,1.5);
val(terminalBox.plugSupply.pin[3].v,0.0);
val(terminalBox.plugSupply.pin[3].v,1.5);
val(terminalBox.plugSupply.pin[3].i,0.0);
val(terminalBox.plugSupply.pin[3].i,1.5);
val(terminalBox.starpoint.v,0.0);
val(terminalBox.starpoint.v,1.5);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Machines.Examples.SMPM_Inverter_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.5, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Machines.Examples.SMPM_Inverter', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat', variableFilter = '.*', measureTime = false",
//     messages = ""
// end SimulationResult;
// 0.0
// 156.1144104
// 0.0
// 156.949401855
// 0.0
// 156.949401855
// 0.0
// 181.75920105
// 0.0
// 181.579605103
// 0.0
// 156.1144104
// -0
// -181.579605103
// 0.0
// 156.1144104
// 0.0
// 181.75920105
// 0.0
// 156.1144104
// -0
// -181.579605103
// 0.0
// 156.1144104
// 0.0
// 156.949401855
// 0.0
// 156.949401855
// 0.0
// 0.619314968586
// 0.0
// 0.619314968586
// -0
// -181.75920105
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// -0
// -3.78956137032e-14
// -0
// -0
// 0.0
// 138.861343384
// 0.0
// 28.7082824707
// 0.0
// -75.7446746826
// 0.0
// -52.5517921448
// 0.0
// 119.8723526
// 0.0
// 117.33757782
// 529.387268066
// -188.063934326
// 0.0
// -495.781768799
// 529.387268066
// 530.250183105
// 0.0
// -1.53684842587
// 0.0
// -45.3961868286
// -0
// 14.0627260208
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// 4.83169060317e-13
// -0
// -138.861343384
// 0.0
// 4.83169060317e-13
// -0
// 44.5685691833
// 0.0
// 4.83169060317e-13
// 0.0
// 94.2927703857
// 0.0
// 4.16584014893
// 0.0
// -1.33705711365
// -0
// -2.8287832737
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// 137.255508423
// -0
// -138.861343384
// -0
// -69.3735656738
// -0
// 44.5685691833
// 0.0
// -67.8819503784
// 0.0
// 94.2927703857
// 0.0
// 4.16584014893
// 0.0
// 138.861343384
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// 0.0
// 137.255508423
// -0
// -138.861343384
// 0.0
// 578.474182129
// 0.0
// -1.33705711365
// 0.0
// -44.5685691833
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -69.3735656738
// -0
// 44.5685691833
// 0.0
// 59.5907211304
// -0
// -2.8287832737
// -0
// -94.2927703857
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// -67.8819503784
// 0.0
// 94.2927703857
// 0.0
// 266.733795166
// 0.0
// -2.82760071754
// 0.0
// 13.4317502975
// 0.0
// -10.6041498184
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 137.255508423
// 0.0
// 138.861343384
// -0
// -69.3735656738
// 0.0
// -44.5685691833
// 0.0
// -67.8819503784
// -0
// -94.2927703857
// 0.0
// 140.083114624
// -0
// -138.861343384
// -0
// -82.8053131104
// -0
// 44.5685691833
// 0.0
// -57.2778015137
// 0.0
// 94.2927703857
// -0
// -2.82760071754
// 0.0
// 138.861343384
// -0
// -8883.16992188
// 0.0
// 137.255508423
// 0.0
// 138.861343384
// 0.0
// 140.083114624
// -0
// -138.861343384
// 0.0
// 13.4317502975
// 0.0
// -44.5685691833
// 0.0
// 42197.0898438
// -0
// -69.3735656738
// 0.0
// -44.5685691833
// -0
// -82.8053131104
// -0
// 44.5685691833
// 0.0
// -10.6041498184
// -0
// -94.2927703857
// 0.0
// -33313.9179688
// 0.0
// -67.8819503784
// -0
// -94.2927703857
// 0.0
// -57.2778015137
// 0.0
// 94.2927703857
// 0.0
// 140.083114624
// -0
// -82.8053131104
// 0.0
// -57.2778015137
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 140.083114624
// 0.0
// 138.861343384
// -0
// -82.8053131104
// 0.0
// -44.5685691833
// 0.0
// -57.2778015137
// -0
// -94.2927703857
// 0.0
// 4.83169060317e-13
// -0
// -138.861343384
// 0.0
// 4.83169060317e-13
// -0
// 44.5685691833
// 0.0
// 4.83169060317e-13
// 0.0
// 94.2927703857
// -0
// -3.78956137032e-14
// 0.0
// 3.78956137032e-14
// 0.0
// 3.78956137032e-14
// 0.0
// 140.083114624
// -0
// -14.7383165359
// -0
// -138.861343384
// -0
// -28.7082824707
// 0.0
// 181.75920105
// 0.0
// 312.228820801
// 0.0
// 313.898803711
// 0.0
// 138.861343384
// 0.0
// 28.7082824707
// -0
// -8883.16992188
// 0.0
// 43596.3007813
// 0.0
// -75.7446746826
// 0.0
// 119.8723526
// 529.387268066
// -188.063934326
// 0.0
// -495.781768799
// 529.387268066
// 530.250183105
// 0.0
// -1.53684842587
// 0.505527615547
// -0.0469850152731
// 0.0
// -0.446022331715
// 0.0
// 140.083114624
// -0
// -14.7383165359
// 0.505527615547
// 0.434020787477
// 0.0
// 0.113002084196
// 0.0
// -0.0367543511093
// 0.0
// 0.068698965013
// 1.0
// -0.351957291365
// -0
// 0.936016082764
// 0.0
// -0.936016082764
// 1.0
// -0.351957291365
// -0
// 293.814331055
// -0
// 110.478973389
// 0.0
// -110.478973389
// -0
// 293.814331055
// 0.0
// 156.1144104
// -0
// -181.75920105
// 0.0
// 181.75920105
// 0.0
// 140.083114624
// -0
// -14.7383165359
// 0.0
// 138.861343384
// 0.0
// 28.7082824707
// 0.0
// -0.0367543511093
// 0.0
// 0.068698965013
// 529.387268066
// 530.250183105
// 0.0
// -1.53684842587
// 529.387268066
// 454.505493164
// 0.0
// 118.335510254
// 0.0
// -38.4890670776
// 0.0
// 71.9413909912
// 0.0
// -0.862904965878
// 0.0
// -14.0627260208
// -0
// 1.53684842587
// -0
// 45.3961868286
// 0.0
// -0.0367543511093
// 0.0
// 0.068698965013
// 0.0
// -0.0367543511093
// 0.0
// 0.068698965013
// 0.0
// -0.862904965878
// -0
// 1.53684842587
// 0.0
// -14.0627260208
// -0
// 45.3961868286
// 0.0
// 100.266242981
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// -70.7106246948
// -0
// 44.5685691833
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// -70.7106246948
// -0
// 44.5685691833
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// 0.0
// 141.421356201
// -0
// -138.861343384
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7106246948
// -0
// 44.5685691833
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// -0
// -94.2927703857
// 0.0
// 141.79788208
// 0.0
// 100.266242981
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 138.861343384
// 0.0
// 28.7082824707
// 0.0
// 3.78956137032e-14
// 0.0
// 138.861343384
// 0.0
// 28.7082824707
// 0.0
// 141.79788208
// 0.0
// 0.203868463635
// 0.0
// 0.359661847353
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 4.83169060317e-13
// 0.0
// 4.83169060317e-13
// 0.0
// 4.83169060317e-13
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 4.83169060317e-13
// 0.0
// 4.83169060317e-13
// 0.0
// 4.83169060317e-13
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 141.421356201
// 0.0
// 4.83169060317e-13
// 0.0
// 141.421356201
// -0
// -70.7106246948
// 0.0
// 4.83169060317e-13
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 4.83169060317e-13
// -0
// -70.7107315063
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 141.421356201
// 0.0
// 6.52219241601e-05
// 0.0
// 0.0
// 0.0
// 156.1144104
// 0.0
// 156.1144104
// 0.0
// 156.1144104
// 0.0
// 156.1144104
// 1.57079637051
// 313.799591064
// 0.0
// 141.421356201
// 0.0
// 6.52219241601e-05
// 0.0
// 132.372634888
// -0
// 49.7743377686
// 1.57079637051
// 313.799591064
// 0.0
// 132.372634888
// -0
// 49.7743377686
// 0.0
// 141.421356201
// 0.0
// 0.359661847353
// 0.0
// 141.421356201
// 0.0
// 0.359661847353
// 0.0
// 141.421356201
// 0.0
// 0.359661847353
// 0.0
// 50.0
// 0.0
// 50.0
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 314.15927124
// 0.0
// 314.15927124
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// 44.5685691833
// 0.0
// 94.2927703857
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// -70.7106246948
// -0
// 44.5685691833
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// 0.0
// 138.861343384
// 0.0
// -44.5685691833
// -0
// -94.2927703857
// 0.0
// 141.421356201
// -0
// -70.7106246948
// -0
// -70.7107315063
// 0.0
// 141.421356201
// -0
// -138.861343384
// 0.0
// 138.861343384
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// -70.7106246948
// -0
// 44.5685691833
// 0.0
// -44.5685691833
// -0
// -70.7106246948
// -0
// 44.5685691833
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// -0
// -94.2927703857
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// -0
// -138.861343384
// -0
// 44.5685691833
// 0.0
// 94.2927703857
// 0.0
// 1.13686837722e-13
// -0
// -1.13686837722e-13
// 0.0
// 156.1144104
// 0.0
// 181.579605103
// 0.0
// 156.1144104
// 0.0
// -181.399993896
// 0.0
// 156.1144104
// 0.0
// 156.949401855
// 0.0
// 156.949401855
// 0.0
// 0.619314968586
// 0.0
// 0.619314968586
// 0.0
// 156.1144104
// -0
// 181.399993896
// 0.0
// 156.1144104
// 0.0
// -181.399993896
// 0.0
// 141.421356201
// -0
// -138.861343384
// -0
// -70.7106246948
// -0
// 44.5685691833
// -0
// -70.7107315063
// 0.0
// 94.2927703857
// 0.0
// 4.83169060317e-13
// 0.0
// 138.861343384
// 0.0
// 4.83169060317e-13
// 0.0
// -44.5685691833
// 0.0
// 4.83169060317e-13
// -0
// -94.2927703857
// 0.0
// 4.83169060317e-13
// 0.0
// 138.861343384
// 0.0
// 4.83169060317e-13
// 0.0
// -44.5685691833
// 0.0
// 4.83169060317e-13
// -0
// -94.2927703857
// 0.0
// 4.83169060317e-13
// 0.0
// 141.421356201
// 0.0
// 138.861343384
// -0
// -70.7106246948
// 0.0
// -44.5685691833
// -0
// -70.7107315063
// -0
// -94.2927703857
// 0.0
// 4.83169060317e-13
// endResult
