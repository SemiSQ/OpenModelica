// name:     Modelica.Electrical.Machines.Examples.SMR_Inverter
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Electrical.Machines.Examples.SMR_Inverter_* Modelica.Electrical.Machines.Examples.SMR_Inverter Modelica.Electrical.Machines.Examples.SMR_Inverter.exe Modelica.Electrical.Machines.Examples.SMR_Inverter.cpp Modelica.Electrical.Machines.Examples.SMR_Inverter.makefile Modelica.Electrical.Machines.Examples.SMR_Inverter.libs Modelica.Electrical.Machines.Examples.SMR_Inverter.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Electrical.Machines.Examples.SMR_Inverter,stopTime=1.5);
val(smr.phiMechanical,0.0);
val(smr.phiMechanical,1.5);
val(der(smr.phiMechanical),0.0);
val(der(smr.phiMechanical),1.5);
val(smr.wMechanical,0.0);
val(smr.wMechanical,1.5);
val(smr.tauElectrical,0.0);
val(smr.tauElectrical,1.5);
val(smr.tauShaft,0.0);
val(smr.tauShaft,1.5);
val(smr.flange.phi,0.0);
val(smr.flange.phi,1.5);
val(smr.flange.tau,0.0);
val(smr.flange.tau,1.5);
val(smr.inertiaRotor.flange_a.phi,0.0);
val(smr.inertiaRotor.flange_a.phi,1.5);
val(smr.inertiaRotor.flange_a.tau,0.0);
val(smr.inertiaRotor.flange_a.tau,1.5);
val(smr.inertiaRotor.flange_b.phi,0.0);
val(smr.inertiaRotor.flange_b.phi,1.5);
val(smr.inertiaRotor.flange_b.tau,0.0);
val(smr.inertiaRotor.flange_b.tau,1.5);
val(smr.inertiaRotor.phi,0.0);
val(smr.inertiaRotor.phi,1.5);
val(der(smr.inertiaRotor.phi),0.0);
val(der(smr.inertiaRotor.phi),1.5);
val(smr.inertiaRotor.w,0.0);
val(smr.inertiaRotor.w,1.5);
val(der(smr.inertiaRotor.w),0.0);
val(der(smr.inertiaRotor.w),1.5);
val(smr.inertiaRotor.a,0.0);
val(smr.inertiaRotor.a,1.5);
val(smr.fixed.flange.tau,0.0);
val(smr.fixed.flange.tau,1.5);
val(smr.vs[1],0.0);
val(smr.vs[1],1.5);
val(smr.vs[2],0.0);
val(smr.vs[2],1.5);
val(smr.vs[3],0.0);
val(smr.vs[3],1.5);
val(smr.is[1],0.0);
val(smr.is[1],1.5);
val(smr.is[2],0.0);
val(smr.is[2],1.5);
val(smr.is[3],0.0);
val(smr.is[3],1.5);
val(smr.i_0_s,0.0);
val(smr.i_0_s,1.5);
val(der(smr.i_0_s),0.0);
val(der(smr.i_0_s),1.5);
val(smr.idq_ss[1],0.0);
val(smr.idq_ss[1],1.5);
val(smr.idq_ss[2],0.0);
val(smr.idq_ss[2],1.5);
val(smr.idq_sr[1],0.0);
val(smr.idq_sr[1],1.5);
val(der(smr.idq_sr[1]),0.0);
val(der(smr.idq_sr[1]),1.5);
val(smr.idq_sr[2],0.0);
val(smr.idq_sr[2],1.5);
val(der(smr.idq_sr[2]),0.0);
val(der(smr.idq_sr[2]),1.5);
val(smr.idq_rs[1],0.0);
val(smr.idq_rs[1],1.5);
val(smr.idq_rs[2],0.0);
val(smr.idq_rs[2],1.5);
val(smr.idq_rr[1],0.0);
val(smr.idq_rr[1],1.5);
val(der(smr.idq_rr[1]),0.0);
val(der(smr.idq_rr[1]),1.5);
val(smr.idq_rr[2],0.0);
val(smr.idq_rr[2],1.5);
val(der(smr.idq_rr[2]),0.0);
val(der(smr.idq_rr[2]),1.5);
val(smr.plug_sp.pin[1].v,0.0);
val(smr.plug_sp.pin[1].v,1.5);
val(smr.plug_sp.pin[1].i,0.0);
val(smr.plug_sp.pin[1].i,1.5);
val(smr.plug_sp.pin[2].v,0.0);
val(smr.plug_sp.pin[2].v,1.5);
val(smr.plug_sp.pin[2].i,0.0);
val(smr.plug_sp.pin[2].i,1.5);
val(smr.plug_sp.pin[3].v,0.0);
val(smr.plug_sp.pin[3].v,1.5);
val(smr.plug_sp.pin[3].i,0.0);
val(smr.plug_sp.pin[3].i,1.5);
val(smr.plug_sn.pin[1].v,0.0);
val(smr.plug_sn.pin[1].v,1.5);
val(smr.plug_sn.pin[1].i,0.0);
val(smr.plug_sn.pin[1].i,1.5);
val(smr.plug_sn.pin[2].v,0.0);
val(smr.plug_sn.pin[2].v,1.5);
val(smr.plug_sn.pin[2].i,0.0);
val(smr.plug_sn.pin[2].i,1.5);
val(smr.plug_sn.pin[3].v,0.0);
val(smr.plug_sn.pin[3].v,1.5);
val(smr.plug_sn.pin[3].i,0.0);
val(smr.plug_sn.pin[3].i,1.5);
val(smr.rs.v[1],0.0);
val(smr.rs.v[1],1.5);
val(smr.rs.v[2],0.0);
val(smr.rs.v[2],1.5);
val(smr.rs.v[3],0.0);
val(smr.rs.v[3],1.5);
val(smr.rs.i[1],0.0);
val(smr.rs.i[1],1.5);
val(smr.rs.i[2],0.0);
val(smr.rs.i[2],1.5);
val(smr.rs.i[3],0.0);
val(smr.rs.i[3],1.5);
val(smr.rs.plug_p.pin[1].v,0.0);
val(smr.rs.plug_p.pin[1].v,1.5);
val(smr.rs.plug_p.pin[1].i,0.0);
val(smr.rs.plug_p.pin[1].i,1.5);
val(smr.rs.plug_p.pin[2].v,0.0);
val(smr.rs.plug_p.pin[2].v,1.5);
val(smr.rs.plug_p.pin[2].i,0.0);
val(smr.rs.plug_p.pin[2].i,1.5);
val(smr.rs.plug_p.pin[3].v,0.0);
val(smr.rs.plug_p.pin[3].v,1.5);
val(smr.rs.plug_p.pin[3].i,0.0);
val(smr.rs.plug_p.pin[3].i,1.5);
val(smr.rs.plug_n.pin[1].v,0.0);
val(smr.rs.plug_n.pin[1].v,1.5);
val(smr.rs.plug_n.pin[1].i,0.0);
val(smr.rs.plug_n.pin[1].i,1.5);
val(smr.rs.plug_n.pin[2].v,0.0);
val(smr.rs.plug_n.pin[2].v,1.5);
val(smr.rs.plug_n.pin[2].i,0.0);
val(smr.rs.plug_n.pin[2].i,1.5);
val(smr.rs.plug_n.pin[3].v,0.0);
val(smr.rs.plug_n.pin[3].v,1.5);
val(smr.rs.plug_n.pin[3].i,0.0);
val(smr.rs.plug_n.pin[3].i,1.5);
val(smr.rs.resistor[1].v,0.0);
val(smr.rs.resistor[1].v,1.5);
val(smr.rs.resistor[1].i,0.0);
val(smr.rs.resistor[1].i,1.5);
val(smr.rs.resistor[1].p.v,0.0);
val(smr.rs.resistor[1].p.v,1.5);
val(smr.rs.resistor[1].p.i,0.0);
val(smr.rs.resistor[1].p.i,1.5);
val(smr.rs.resistor[1].n.v,0.0);
val(smr.rs.resistor[1].n.v,1.5);
val(smr.rs.resistor[1].n.i,0.0);
val(smr.rs.resistor[1].n.i,1.5);
val(smr.rs.resistor[1].LossPower,0.0);
val(smr.rs.resistor[1].LossPower,1.5);
val(smr.rs.resistor[2].v,0.0);
val(smr.rs.resistor[2].v,1.5);
val(smr.rs.resistor[2].i,0.0);
val(smr.rs.resistor[2].i,1.5);
val(smr.rs.resistor[2].p.v,0.0);
val(smr.rs.resistor[2].p.v,1.5);
val(smr.rs.resistor[2].p.i,0.0);
val(smr.rs.resistor[2].p.i,1.5);
val(smr.rs.resistor[2].n.v,0.0);
val(smr.rs.resistor[2].n.v,1.5);
val(smr.rs.resistor[2].n.i,0.0);
val(smr.rs.resistor[2].n.i,1.5);
val(smr.rs.resistor[2].LossPower,0.0);
val(smr.rs.resistor[2].LossPower,1.5);
val(smr.rs.resistor[3].v,0.0);
val(smr.rs.resistor[3].v,1.5);
val(smr.rs.resistor[3].i,0.0);
val(smr.rs.resistor[3].i,1.5);
val(smr.rs.resistor[3].p.v,0.0);
val(smr.rs.resistor[3].p.v,1.5);
val(smr.rs.resistor[3].p.i,0.0);
val(smr.rs.resistor[3].p.i,1.5);
val(smr.rs.resistor[3].n.v,0.0);
val(smr.rs.resistor[3].n.v,1.5);
val(smr.rs.resistor[3].n.i,0.0);
val(smr.rs.resistor[3].n.i,1.5);
val(smr.rs.resistor[3].LossPower,0.0);
val(smr.rs.resistor[3].LossPower,1.5);
val(smr.lssigma.v[1],0.0);
val(smr.lssigma.v[1],1.5);
val(smr.lssigma.v[2],0.0);
val(smr.lssigma.v[2],1.5);
val(smr.lssigma.v[3],0.0);
val(smr.lssigma.v[3],1.5);
val(smr.lssigma.i[1],0.0);
val(smr.lssigma.i[1],1.5);
val(smr.lssigma.i[2],0.0);
val(smr.lssigma.i[2],1.5);
val(smr.lssigma.i[3],0.0);
val(smr.lssigma.i[3],1.5);
val(smr.lssigma.plug_p.pin[1].v,0.0);
val(smr.lssigma.plug_p.pin[1].v,1.5);
val(smr.lssigma.plug_p.pin[1].i,0.0);
val(smr.lssigma.plug_p.pin[1].i,1.5);
val(smr.lssigma.plug_p.pin[2].v,0.0);
val(smr.lssigma.plug_p.pin[2].v,1.5);
val(smr.lssigma.plug_p.pin[2].i,0.0);
val(smr.lssigma.plug_p.pin[2].i,1.5);
val(smr.lssigma.plug_p.pin[3].v,0.0);
val(smr.lssigma.plug_p.pin[3].v,1.5);
val(smr.lssigma.plug_p.pin[3].i,0.0);
val(smr.lssigma.plug_p.pin[3].i,1.5);
val(smr.lssigma.plug_n.pin[1].v,0.0);
val(smr.lssigma.plug_n.pin[1].v,1.5);
val(smr.lssigma.plug_n.pin[1].i,0.0);
val(smr.lssigma.plug_n.pin[1].i,1.5);
val(smr.lssigma.plug_n.pin[2].v,0.0);
val(smr.lssigma.plug_n.pin[2].v,1.5);
val(smr.lssigma.plug_n.pin[2].i,0.0);
val(smr.lssigma.plug_n.pin[2].i,1.5);
val(smr.lssigma.plug_n.pin[3].v,0.0);
val(smr.lssigma.plug_n.pin[3].v,1.5);
val(smr.lssigma.plug_n.pin[3].i,0.0);
val(smr.lssigma.plug_n.pin[3].i,1.5);
val(smr.lssigma.inductor[1].v,0.0);
val(smr.lssigma.inductor[1].v,1.5);
val(smr.lssigma.inductor[1].i,0.0);
val(smr.lssigma.inductor[1].i,1.5);
val(der(smr.lssigma.inductor[1].i),0.0);
val(der(smr.lssigma.inductor[1].i),1.5);
val(smr.lssigma.inductor[1].p.v,0.0);
val(smr.lssigma.inductor[1].p.v,1.5);
val(smr.lssigma.inductor[1].p.i,0.0);
val(smr.lssigma.inductor[1].p.i,1.5);
val(smr.lssigma.inductor[1].n.v,0.0);
val(smr.lssigma.inductor[1].n.v,1.5);
val(smr.lssigma.inductor[1].n.i,0.0);
val(smr.lssigma.inductor[1].n.i,1.5);
val(smr.lssigma.inductor[2].v,0.0);
val(smr.lssigma.inductor[2].v,1.5);
val(smr.lssigma.inductor[2].i,0.0);
val(smr.lssigma.inductor[2].i,1.5);
val(der(smr.lssigma.inductor[2].i),0.0);
val(der(smr.lssigma.inductor[2].i),1.5);
val(smr.lssigma.inductor[2].p.v,0.0);
val(smr.lssigma.inductor[2].p.v,1.5);
val(smr.lssigma.inductor[2].p.i,0.0);
val(smr.lssigma.inductor[2].p.i,1.5);
val(smr.lssigma.inductor[2].n.v,0.0);
val(smr.lssigma.inductor[2].n.v,1.5);
val(smr.lssigma.inductor[2].n.i,0.0);
val(smr.lssigma.inductor[2].n.i,1.5);
val(smr.lssigma.inductor[3].v,0.0);
val(smr.lssigma.inductor[3].v,1.5);
val(smr.lssigma.inductor[3].i,0.0);
val(smr.lssigma.inductor[3].i,1.5);
val(der(smr.lssigma.inductor[3].i),0.0);
val(der(smr.lssigma.inductor[3].i),1.5);
val(smr.lssigma.inductor[3].p.v,0.0);
val(smr.lssigma.inductor[3].p.v,1.5);
val(smr.lssigma.inductor[3].p.i,0.0);
val(smr.lssigma.inductor[3].p.i,1.5);
val(smr.lssigma.inductor[3].n.v,0.0);
val(smr.lssigma.inductor[3].n.v,1.5);
val(smr.lssigma.inductor[3].n.i,0.0);
val(smr.lssigma.inductor[3].n.i,1.5);
val(smr.spacePhasorS.v[1],0.0);
val(smr.spacePhasorS.v[1],1.5);
val(smr.spacePhasorS.v[2],0.0);
val(smr.spacePhasorS.v[2],1.5);
val(smr.spacePhasorS.v[3],0.0);
val(smr.spacePhasorS.v[3],1.5);
val(smr.spacePhasorS.i[1],0.0);
val(smr.spacePhasorS.i[1],1.5);
val(smr.spacePhasorS.i[2],0.0);
val(smr.spacePhasorS.i[2],1.5);
val(smr.spacePhasorS.i[3],0.0);
val(smr.spacePhasorS.i[3],1.5);
val(smr.spacePhasorS.plug_p.pin[1].v,0.0);
val(smr.spacePhasorS.plug_p.pin[1].v,1.5);
val(smr.spacePhasorS.plug_p.pin[1].i,0.0);
val(smr.spacePhasorS.plug_p.pin[1].i,1.5);
val(smr.spacePhasorS.plug_p.pin[2].v,0.0);
val(smr.spacePhasorS.plug_p.pin[2].v,1.5);
val(smr.spacePhasorS.plug_p.pin[2].i,0.0);
val(smr.spacePhasorS.plug_p.pin[2].i,1.5);
val(smr.spacePhasorS.plug_p.pin[3].v,0.0);
val(smr.spacePhasorS.plug_p.pin[3].v,1.5);
val(smr.spacePhasorS.plug_p.pin[3].i,0.0);
val(smr.spacePhasorS.plug_p.pin[3].i,1.5);
val(smr.spacePhasorS.plug_n.pin[1].v,0.0);
val(smr.spacePhasorS.plug_n.pin[1].v,1.5);
val(smr.spacePhasorS.plug_n.pin[1].i,0.0);
val(smr.spacePhasorS.plug_n.pin[1].i,1.5);
val(smr.spacePhasorS.plug_n.pin[2].v,0.0);
val(smr.spacePhasorS.plug_n.pin[2].v,1.5);
val(smr.spacePhasorS.plug_n.pin[2].i,0.0);
val(smr.spacePhasorS.plug_n.pin[2].i,1.5);
val(smr.spacePhasorS.plug_n.pin[3].v,0.0);
val(smr.spacePhasorS.plug_n.pin[3].v,1.5);
val(smr.spacePhasorS.plug_n.pin[3].i,0.0);
val(smr.spacePhasorS.plug_n.pin[3].i,1.5);
val(smr.spacePhasorS.zero.i,0.0);
val(smr.spacePhasorS.zero.i,1.5);
val(smr.spacePhasorS.ground.i,0.0);
val(smr.spacePhasorS.ground.i,1.5);
val(smr.spacePhasorS.gnd.p.i,0.0);
val(smr.spacePhasorS.gnd.p.i,1.5);
val(smr.spacePhasorS.spacePhasor.v_[1],0.0);
val(smr.spacePhasorS.spacePhasor.v_[1],1.5);
val(smr.spacePhasorS.spacePhasor.v_[2],0.0);
val(smr.spacePhasorS.spacePhasor.v_[2],1.5);
val(smr.spacePhasorS.spacePhasor.i_[1],0.0);
val(smr.spacePhasorS.spacePhasor.i_[1],1.5);
val(smr.spacePhasorS.spacePhasor.i_[2],0.0);
val(smr.spacePhasorS.spacePhasor.i_[2],1.5);
val(smr.airGapR.tauElectrical,0.0);
val(smr.airGapR.tauElectrical,1.5);
val(smr.airGapR.gamma,0.0);
val(smr.airGapR.gamma,1.5);
val(der(smr.airGapR.gamma),0.0);
val(der(smr.airGapR.gamma),1.5);
val(smr.airGapR.i_ss[1],0.0);
val(smr.airGapR.i_ss[1],1.5);
val(smr.airGapR.i_ss[2],0.0);
val(smr.airGapR.i_ss[2],1.5);
val(der(smr.airGapR.i_ss[1]),0.0);
val(der(smr.airGapR.i_ss[1]),1.5);
val(der(smr.airGapR.i_ss[2]),0.0);
val(der(smr.airGapR.i_ss[2]),1.5);
val(smr.airGapR.i_sr[1],0.0);
val(smr.airGapR.i_sr[1],1.5);
val(smr.airGapR.i_sr[2],0.0);
val(smr.airGapR.i_sr[2],1.5);
val(smr.airGapR.i_rs[1],0.0);
val(smr.airGapR.i_rs[1],1.5);
val(smr.airGapR.i_rs[2],0.0);
val(smr.airGapR.i_rs[2],1.5);
val(smr.airGapR.i_rr[1],0.0);
val(smr.airGapR.i_rr[1],1.5);
val(smr.airGapR.i_rr[2],0.0);
val(smr.airGapR.i_rr[2],1.5);
val(smr.airGapR.psi_ms[1],0.0);
val(smr.airGapR.psi_ms[1],1.5);
val(smr.airGapR.psi_ms[2],0.0);
val(smr.airGapR.psi_ms[2],1.5);
val(der(smr.airGapR.psi_ms[1]),0.0);
val(der(smr.airGapR.psi_ms[1]),1.5);
val(der(smr.airGapR.psi_ms[2]),0.0);
val(der(smr.airGapR.psi_ms[2]),1.5);
val(smr.airGapR.psi_mr[1],0.0);
val(smr.airGapR.psi_mr[1],1.5);
val(smr.airGapR.psi_mr[2],0.0);
val(smr.airGapR.psi_mr[2],1.5);
val(der(smr.airGapR.psi_mr[1]),0.0);
val(der(smr.airGapR.psi_mr[1]),1.5);
val(der(smr.airGapR.psi_mr[2]),0.0);
val(der(smr.airGapR.psi_mr[2]),1.5);
val(smr.airGapR.RotationMatrix[1,1],0.0);
val(smr.airGapR.RotationMatrix[1,1],1.5);
val(smr.airGapR.RotationMatrix[1,2],0.0);
val(smr.airGapR.RotationMatrix[1,2],1.5);
val(smr.airGapR.RotationMatrix[2,1],0.0);
val(smr.airGapR.RotationMatrix[2,1],1.5);
val(smr.airGapR.RotationMatrix[2,2],0.0);
val(smr.airGapR.RotationMatrix[2,2],1.5);
val(der(smr.airGapR.RotationMatrix[1,1]),0.0);
val(der(smr.airGapR.RotationMatrix[1,1]),1.5);
val(der(smr.airGapR.RotationMatrix[1,2]),0.0);
val(der(smr.airGapR.RotationMatrix[1,2]),1.5);
val(der(smr.airGapR.RotationMatrix[2,1]),0.0);
val(der(smr.airGapR.RotationMatrix[2,1]),1.5);
val(der(smr.airGapR.RotationMatrix[2,2]),0.0);
val(der(smr.airGapR.RotationMatrix[2,2]),1.5);
val(smr.airGapR.flange.phi,0.0);
val(smr.airGapR.flange.phi,1.5);
val(smr.airGapR.flange.tau,0.0);
val(smr.airGapR.flange.tau,1.5);
val(smr.airGapR.support.tau,0.0);
val(smr.airGapR.support.tau,1.5);
val(smr.airGapR.spacePhasor_s.v_[1],0.0);
val(smr.airGapR.spacePhasor_s.v_[1],1.5);
val(smr.airGapR.spacePhasor_s.v_[2],0.0);
val(smr.airGapR.spacePhasor_s.v_[2],1.5);
val(smr.airGapR.spacePhasor_s.i_[1],0.0);
val(smr.airGapR.spacePhasor_s.i_[1],1.5);
val(smr.airGapR.spacePhasor_s.i_[2],0.0);
val(smr.airGapR.spacePhasor_s.i_[2],1.5);
val(smr.airGapR.spacePhasor_r.v_[1],0.0);
val(smr.airGapR.spacePhasor_r.v_[1],1.5);
val(smr.airGapR.spacePhasor_r.v_[2],0.0);
val(smr.airGapR.spacePhasor_r.v_[2],1.5);
val(smr.airGapR.spacePhasor_r.i_[1],0.0);
val(smr.airGapR.spacePhasor_r.i_[1],1.5);
val(smr.airGapR.spacePhasor_r.i_[2],0.0);
val(smr.airGapR.spacePhasor_r.i_[2],1.5);
val(smr.airGapR.i_mr[1],0.0);
val(smr.airGapR.i_mr[1],1.5);
val(smr.airGapR.i_mr[2],0.0);
val(smr.airGapR.i_mr[2],1.5);
val(der(smr.airGapR.i_mr[1]),0.0);
val(der(smr.airGapR.i_mr[1]),1.5);
val(der(smr.airGapR.i_mr[2]),0.0);
val(der(smr.airGapR.i_mr[2]),1.5);
val(smr.damperCage.spacePhasor_r.v_[1],0.0);
val(smr.damperCage.spacePhasor_r.v_[1],1.5);
val(smr.damperCage.spacePhasor_r.v_[2],0.0);
val(smr.damperCage.spacePhasor_r.v_[2],1.5);
val(smr.damperCage.spacePhasor_r.i_[1],0.0);
val(smr.damperCage.spacePhasor_r.i_[1],1.5);
val(smr.damperCage.spacePhasor_r.i_[2],0.0);
val(smr.damperCage.spacePhasor_r.i_[2],1.5);
val(der(smr.damperCage.spacePhasor_r.i_[1]),0.0);
val(der(smr.damperCage.spacePhasor_r.i_[1]),1.5);
val(der(smr.damperCage.spacePhasor_r.i_[2]),0.0);
val(der(smr.damperCage.spacePhasor_r.i_[2]),1.5);
val(currentQuasiRMSSensor.I,0.0);
val(currentQuasiRMSSensor.I,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_p.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.plug_n.pin[3].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[1],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[2],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],0.0);
val(currentQuasiRMSSensor.CurrentSensor1.i[3],1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[1].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[2].i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].p.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.v,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].n.i,1.5);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,0.0);
val(currentQuasiRMSSensor.CurrentSensor1.currentSensor[3].i,1.5);
val(currentQuasiRMSSensor.Gain1.u,0.0);
val(currentQuasiRMSSensor.Gain1.u,1.5);
val(currentQuasiRMSSensor.Gain1.y,0.0);
val(currentQuasiRMSSensor.Gain1.y,1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.u[3],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[1],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.y[2],1.5);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,0.0);
val(currentQuasiRMSSensor.ToSpacePhasor1.zero,1.5);
val(currentQuasiRMSSensor.ToPolar1.u[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.u[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.u[2],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[1],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[1],1.5);
val(currentQuasiRMSSensor.ToPolar1.y[2],0.0);
val(currentQuasiRMSSensor.ToPolar1.y[2],1.5);
val(rotorDisplacementAngle.rotorDisplacementAngle,0.0);
val(rotorDisplacementAngle.rotorDisplacementAngle,1.5);
val(rotorDisplacementAngle.plug_p.pin[1].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[1].v,1.5);
val(rotorDisplacementAngle.plug_p.pin[2].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[2].v,1.5);
val(rotorDisplacementAngle.plug_p.pin[3].v,0.0);
val(rotorDisplacementAngle.plug_p.pin[3].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[1].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[1].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[2].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[2].v,1.5);
val(rotorDisplacementAngle.plug_n.pin[3].v,0.0);
val(rotorDisplacementAngle.plug_n.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_p.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.plug_n.pin[3].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[1],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[1],1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[2],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[2],1.5);
val(rotorDisplacementAngle.VoltageSensor1.v[3],0.0);
val(rotorDisplacementAngle.VoltageSensor1.v[3],1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[1].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[2].v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].p.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].p.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].n.v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].n.v,1.5);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].v,0.0);
val(rotorDisplacementAngle.VoltageSensor1.voltageSensor[3].v,1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[1],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[1],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[2],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[2],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[3],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.u[3],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[1],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[1],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[2],0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.y[2],1.5);
val(rotorDisplacementAngle.ToSpacePhasorVS.zero,0.0);
val(rotorDisplacementAngle.ToSpacePhasorVS.zero,1.5);
val(rotorDisplacementAngle.flange.phi,0.0);
val(rotorDisplacementAngle.flange.phi,1.5);
val(rotorDisplacementAngle.relativeAngleSensor.flange_b.phi,0.0);
val(rotorDisplacementAngle.relativeAngleSensor.flange_b.phi,1.5);
val(rotorDisplacementAngle.relativeAngleSensor.phi_rel,0.0);
val(rotorDisplacementAngle.relativeAngleSensor.phi_rel,1.5);
val(rotorDisplacementAngle.add.u1,0.0);
val(rotorDisplacementAngle.add.u1,1.5);
val(rotorDisplacementAngle.add.y,0.0);
val(rotorDisplacementAngle.add.y,1.5);
val(rotorDisplacementAngle.rotatorVS2R.u[1],0.0);
val(rotorDisplacementAngle.rotatorVS2R.u[1],1.5);
val(rotorDisplacementAngle.rotatorVS2R.u[2],0.0);
val(rotorDisplacementAngle.rotatorVS2R.u[2],1.5);
val(rotorDisplacementAngle.rotatorVS2R.y[1],0.0);
val(rotorDisplacementAngle.rotatorVS2R.y[1],1.5);
val(rotorDisplacementAngle.rotatorVS2R.y[2],0.0);
val(rotorDisplacementAngle.rotatorVS2R.y[2],1.5);
val(rotorDisplacementAngle.rotatorVS2R.angle,0.0);
val(rotorDisplacementAngle.rotatorVS2R.angle,1.5);
val(rotorDisplacementAngle.ToPolarVSR.u[1],0.0);
val(rotorDisplacementAngle.ToPolarVSR.u[1],1.5);
val(rotorDisplacementAngle.ToPolarVSR.u[2],0.0);
val(rotorDisplacementAngle.ToPolarVSR.u[2],1.5);
val(rotorDisplacementAngle.ToPolarVSR.y[1],0.0);
val(rotorDisplacementAngle.ToPolarVSR.y[1],1.5);
val(rotorDisplacementAngle.ToPolarVSR.y[2],0.0);
val(rotorDisplacementAngle.ToPolarVSR.y[2],1.5);
val(rotorDisplacementAngle.deMultiplex2.u[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.u[1],1.5);
val(rotorDisplacementAngle.deMultiplex2.u[2],0.0);
val(rotorDisplacementAngle.deMultiplex2.u[2],1.5);
val(rotorDisplacementAngle.deMultiplex2.y1[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.y1[1],1.5);
val(rotorDisplacementAngle.deMultiplex2.y2[1],0.0);
val(rotorDisplacementAngle.deMultiplex2.y2[1],1.5);
val(ramp.y,0.0);
val(ramp.y,1.5);
val(vfController.u,0.0);
val(vfController.u,1.5);
val(vfController.y[1],0.0);
val(vfController.y[1],1.5);
val(vfController.y[2],0.0);
val(vfController.y[2],1.5);
val(vfController.y[3],0.0);
val(vfController.y[3],1.5);
val(vfController.x,0.0);
val(vfController.x,1.5);
val(der(vfController.x),0.0);
val(der(vfController.x),1.5);
val(vfController.amplitude,0.0);
val(vfController.amplitude,1.5);
val(signalVoltage.i[1],0.0);
val(signalVoltage.i[1],1.5);
val(signalVoltage.i[2],0.0);
val(signalVoltage.i[2],1.5);
val(signalVoltage.i[3],0.0);
val(signalVoltage.i[3],1.5);
val(signalVoltage.plug_p.pin[1].v,0.0);
val(signalVoltage.plug_p.pin[1].v,1.5);
val(signalVoltage.plug_p.pin[1].i,0.0);
val(signalVoltage.plug_p.pin[1].i,1.5);
val(signalVoltage.plug_p.pin[2].v,0.0);
val(signalVoltage.plug_p.pin[2].v,1.5);
val(signalVoltage.plug_p.pin[2].i,0.0);
val(signalVoltage.plug_p.pin[2].i,1.5);
val(signalVoltage.plug_p.pin[3].v,0.0);
val(signalVoltage.plug_p.pin[3].v,1.5);
val(signalVoltage.plug_p.pin[3].i,0.0);
val(signalVoltage.plug_p.pin[3].i,1.5);
val(signalVoltage.plug_n.pin[1].i,0.0);
val(signalVoltage.plug_n.pin[1].i,1.5);
val(signalVoltage.plug_n.pin[2].i,0.0);
val(signalVoltage.plug_n.pin[2].i,1.5);
val(signalVoltage.plug_n.pin[3].i,0.0);
val(signalVoltage.plug_n.pin[3].i,1.5);
val(signalVoltage.v[1],0.0);
val(signalVoltage.v[1],1.5);
val(signalVoltage.v[2],0.0);
val(signalVoltage.v[2],1.5);
val(signalVoltage.v[3],0.0);
val(signalVoltage.v[3],1.5);
val(signalVoltage.signalVoltage[1].p.v,0.0);
val(signalVoltage.signalVoltage[1].p.v,1.5);
val(signalVoltage.signalVoltage[1].p.i,0.0);
val(signalVoltage.signalVoltage[1].p.i,1.5);
val(signalVoltage.signalVoltage[1].n.i,0.0);
val(signalVoltage.signalVoltage[1].n.i,1.5);
val(signalVoltage.signalVoltage[1].v,0.0);
val(signalVoltage.signalVoltage[1].v,1.5);
val(signalVoltage.signalVoltage[1].i,0.0);
val(signalVoltage.signalVoltage[1].i,1.5);
val(signalVoltage.signalVoltage[2].p.v,0.0);
val(signalVoltage.signalVoltage[2].p.v,1.5);
val(signalVoltage.signalVoltage[2].p.i,0.0);
val(signalVoltage.signalVoltage[2].p.i,1.5);
val(signalVoltage.signalVoltage[2].n.i,0.0);
val(signalVoltage.signalVoltage[2].n.i,1.5);
val(signalVoltage.signalVoltage[2].v,0.0);
val(signalVoltage.signalVoltage[2].v,1.5);
val(signalVoltage.signalVoltage[2].i,0.0);
val(signalVoltage.signalVoltage[2].i,1.5);
val(signalVoltage.signalVoltage[3].p.v,0.0);
val(signalVoltage.signalVoltage[3].p.v,1.5);
val(signalVoltage.signalVoltage[3].p.i,0.0);
val(signalVoltage.signalVoltage[3].p.i,1.5);
val(signalVoltage.signalVoltage[3].n.i,0.0);
val(signalVoltage.signalVoltage[3].n.i,1.5);
val(signalVoltage.signalVoltage[3].v,0.0);
val(signalVoltage.signalVoltage[3].v,1.5);
val(signalVoltage.signalVoltage[3].i,0.0);
val(signalVoltage.signalVoltage[3].i,1.5);
val(star.plug_p.pin[1].i,0.0);
val(star.plug_p.pin[1].i,1.5);
val(star.plug_p.pin[2].i,0.0);
val(star.plug_p.pin[2].i,1.5);
val(star.plug_p.pin[3].i,0.0);
val(star.plug_p.pin[3].i,1.5);
val(star.pin_n.i,0.0);
val(star.pin_n.i,1.5);
val(ground.p.i,0.0);
val(ground.p.i,1.5);
val(loadInertia.flange_a.phi,0.0);
val(loadInertia.flange_a.phi,1.5);
val(loadInertia.flange_a.tau,0.0);
val(loadInertia.flange_a.tau,1.5);
val(loadInertia.flange_b.phi,0.0);
val(loadInertia.flange_b.phi,1.5);
val(loadInertia.flange_b.tau,0.0);
val(loadInertia.flange_b.tau,1.5);
val(loadInertia.phi,0.0);
val(loadInertia.phi,1.5);
val(der(loadInertia.phi),0.0);
val(der(loadInertia.phi),1.5);
val(loadInertia.w,0.0);
val(loadInertia.w,1.5);
val(der(loadInertia.w),0.0);
val(der(loadInertia.w),1.5);
val(loadInertia.a,0.0);
val(loadInertia.a,1.5);
val(loadTorqueStep.flange.phi,0.0);
val(loadTorqueStep.flange.phi,1.5);
val(loadTorqueStep.flange.tau,0.0);
val(loadTorqueStep.flange.tau,1.5);
val(loadTorqueStep.phi,0.0);
val(loadTorqueStep.phi,1.5);
val(loadTorqueStep.tau,0.0);
val(loadTorqueStep.tau,1.5);
val(terminalBox.plug_sp.pin[1].v,0.0);
val(terminalBox.plug_sp.pin[1].v,1.5);
val(terminalBox.plug_sp.pin[1].i,0.0);
val(terminalBox.plug_sp.pin[1].i,1.5);
val(terminalBox.plug_sp.pin[2].v,0.0);
val(terminalBox.plug_sp.pin[2].v,1.5);
val(terminalBox.plug_sp.pin[2].i,0.0);
val(terminalBox.plug_sp.pin[2].i,1.5);
val(terminalBox.plug_sp.pin[3].v,0.0);
val(terminalBox.plug_sp.pin[3].v,1.5);
val(terminalBox.plug_sp.pin[3].i,0.0);
val(terminalBox.plug_sp.pin[3].i,1.5);
val(terminalBox.plug_sn.pin[1].v,0.0);
val(terminalBox.plug_sn.pin[1].v,1.5);
val(terminalBox.plug_sn.pin[1].i,0.0);
val(terminalBox.plug_sn.pin[1].i,1.5);
val(terminalBox.plug_sn.pin[2].v,0.0);
val(terminalBox.plug_sn.pin[2].v,1.5);
val(terminalBox.plug_sn.pin[2].i,0.0);
val(terminalBox.plug_sn.pin[2].i,1.5);
val(terminalBox.plug_sn.pin[3].v,0.0);
val(terminalBox.plug_sn.pin[3].v,1.5);
val(terminalBox.plug_sn.pin[3].i,0.0);
val(terminalBox.plug_sn.pin[3].i,1.5);
val(terminalBox.star.plug_p.pin[1].v,0.0);
val(terminalBox.star.plug_p.pin[1].v,1.5);
val(terminalBox.star.plug_p.pin[1].i,0.0);
val(terminalBox.star.plug_p.pin[1].i,1.5);
val(terminalBox.star.plug_p.pin[2].v,0.0);
val(terminalBox.star.plug_p.pin[2].v,1.5);
val(terminalBox.star.plug_p.pin[2].i,0.0);
val(terminalBox.star.plug_p.pin[2].i,1.5);
val(terminalBox.star.plug_p.pin[3].v,0.0);
val(terminalBox.star.plug_p.pin[3].v,1.5);
val(terminalBox.star.plug_p.pin[3].i,0.0);
val(terminalBox.star.plug_p.pin[3].i,1.5);
val(terminalBox.star.pin_n.v,0.0);
val(terminalBox.star.pin_n.v,1.5);
val(terminalBox.plugSupply.pin[1].v,0.0);
val(terminalBox.plugSupply.pin[1].v,1.5);
val(terminalBox.plugSupply.pin[1].i,0.0);
val(terminalBox.plugSupply.pin[1].i,1.5);
val(terminalBox.plugSupply.pin[2].v,0.0);
val(terminalBox.plugSupply.pin[2].v,1.5);
val(terminalBox.plugSupply.pin[2].i,0.0);
val(terminalBox.plugSupply.pin[2].i,1.5);
val(terminalBox.plugSupply.pin[3].v,0.0);
val(terminalBox.plugSupply.pin[3].v,1.5);
val(terminalBox.plugSupply.pin[3].i,0.0);
val(terminalBox.plugSupply.pin[3].i,1.5);
val(terminalBox.starpoint.v,0.0);
val(terminalBox.starpoint.v,1.5);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Electrical.Machines.Examples.SMR_Inverter_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 1.5, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Electrical.Machines.Examples.SMR_Inverter', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat'",
//     messages = ""
// end SimulationResult;
// 0.0
// 152.183563232
// 0.0
// 156.957824707
// 0.0
// 156.957824707
// 0.0
// 46.5766563416
// 0.0
// 46.2883300781
// 0.0
// 152.183563232
// -0
// -46.2883300781
// 0.0
// 152.183563232
// 0.0
// 46.5766563416
// 0.0
// 152.183563232
// -0
// -46.2883300781
// 0.0
// 152.183563232
// 0.0
// 156.957824707
// 0.0
// 156.957824707
// 0.0
// 0.994236528873
// 0.0
// 0.994236528873
// -0
// -46.5766563416
// 0.0
// 3.02630866145e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// -0
// 2.3684757294e-14
// -0
// -0
// 0.0
// -59.1046485901
// 0.0
// -35.4980163574
// 0.0
// 42.4113388062
// 0.0
// 3.53999781609
// 0.0
// 54.3575820923
// 0.0
// 13.1495056152
// 0.0
// -0.0888885334134
// 0.0
// 2.76322937012
// 0.0
// 1.07540559769
// 0.0
// -8.0609960556
// 0.0
// -2.54692745209
// 0.0
// 21.232717514
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 8.35775892938e-13
// -0
// 59.1046485901
// 0.0
// 8.35775892938e-13
// -0
// 1.18985927105
// 0.0
// 8.35775892938e-13
// 0.0
// -60.294506073
// 0.0
// -1.77313935757
// 0.0
// -0.0356957763433
// 0.0
// 1.80883514881
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 1.77313971519
// -0
// 59.1046485901
// -0
// -122.438789368
// -0
// 1.18985927105
// 0.0
// 120.665649414
// 0.0
// -60.294506073
// 0.0
// -1.77313935757
// 0.0
// -59.1046485901
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// 0.0
// 1.77313971519
// -0
// 59.1046485901
// 0.0
// 104.80078125
// 0.0
// -0.0356957763433
// 0.0
// -1.18985927105
// -0
// -122.474487305
// 0.0
// -1.18985927105
// -0
// -122.438789368
// -0
// 1.18985927105
// 0.0
// 0.0424729511142
// -0
// 1.80883514881
// -0
// 60.294506073
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 120.665649414
// 0.0
// -60.294506073
// 0.0
// 109.062828064
// 0.0
// 3.54449391365
// 0.0
// -6.88992261887
// 0.0
// 3.34542894363
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// 1.77313971519
// 0.0
// -59.1046485901
// -0
// -122.438789368
// 0.0
// -1.18985927105
// 0.0
// 120.665649414
// -0
// 60.294506073
// 0.0
// -1.77135419846
// -0
// 59.1046485901
// -0
// -115.548866272
// -0
// 1.18985927105
// 0.0
// 117.320220947
// 0.0
// -60.294506073
// -0
// 3.54449391365
// 0.0
// -59.1046485901
// -0
// 11135.3554688
// 0.0
// 1.77313971519
// 0.0
// -59.1046485901
// 0.0
// -1.77135419846
// -0
// 59.1046485901
// 0.0
// -6.88992261887
// 0.0
// -1.18985927105
// 0.0
// -21645.3300781
// -0
// -122.438789368
// 0.0
// -1.18985927105
// -0
// -115.548866272
// -0
// 1.18985927105
// 0.0
// 3.34542894363
// -0
// 60.294506073
// 0.0
// 10509.9746094
// 0.0
// 120.665649414
// -0
// 60.294506073
// 0.0
// 117.320220947
// 0.0
// -60.294506073
// 0.0
// -1.77135419846
// -0
// -115.548866272
// 0.0
// 117.320220947
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// -1.77135419846
// 0.0
// -59.1046485901
// -0
// -115.548866272
// 0.0
// -1.18985927105
// 0.0
// 117.320220947
// -0
// 60.294506073
// 0.0
// 8.35775892938e-13
// -0
// 59.1046485901
// 0.0
// 8.35775892938e-13
// -0
// 1.18985927105
// 0.0
// 8.35775892938e-13
// 0.0
// -60.294506073
// -0
// 2.3684757294e-14
// 0.0
// -2.3684757294e-14
// 0.0
// -2.3684757294e-14
// 0.0
// -1.77135419846
// -0
// -134.447036743
// -0
// 59.1046485901
// -0
// 35.4980163574
// 0.0
// 46.5766563416
// 0.0
// 304.367126465
// 0.0
// 313.915649414
// 0.0
// -59.1046485901
// 0.0
// -35.4980163574
// -0
// 11135.3554688
// 0.0
// -18564.875
// 0.0
// 42.4113388062
// 0.0
// 54.3575820923
// 0.0
// -0.0888885334134
// 0.0
// 2.76322937012
// 0.0
// 1.07540559769
// 0.0
// -2.54692745209
// 0.0
// -0.427949726582
// 0.0
// 0.00565414968878
// 0.0
// -1.77135419846
// -0
// -134.447036743
// 0.0
// 0.40142557025
// 0.0
// 0.14842659235
// 0.0
// -0.041733276099
// 0.0
// 0.0984978079796
// 1.0
// -0.933275043964
// -0
// -0.359162420034
// 0.0
// 0.359162420034
// 1.0
// -0.933275043964
// -0
// -112.746711731
// -0
// 292.969665527
// 0.0
// -292.969665527
// -0
// -112.746711731
// 0.0
// 152.183563232
// -0
// -46.5766563416
// 0.0
// 46.5766563416
// 0.0
// -1.77135419846
// -0
// -134.447036743
// 0.0
// -59.1046485901
// 0.0
// -35.4980163574
// 0.0
// -0.041733276099
// 0.0
// 0.0984978079796
// 0.0
// 1.07540559769
// 0.0
// -2.54692745209
// 0.0
// 43.486743927
// 0.0
// 51.8106536865
// 0.0
// -4.52099847794
// 0.0
// 34.3822212219
// 0.0
// -0.041733276099
// 0.0
// 0.0984978079796
// -0
// -1.07540559769
// -0
// 2.54692745209
// -0
// 8.0609960556
// -0
// -21.232717514
// 0.0
// 48.7517623901
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// -0
// 60.294506073
// 0.0
// 68.9454040527
// 0.0
// 48.7517623901
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// -59.1046485901
// 0.0
// -35.4980163574
// 0.0
// -2.3684757294e-14
// 0.0
// -59.1046485901
// 0.0
// -35.4980163574
// 0.0
// 68.9454040527
// 0.0
// -2.60073494911
// 0.0
// 0.367370277643
// 0.0
// 3.02631718796e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 8.35775892938e-13
// 0.0
// 8.35775892938e-13
// 0.0
// 8.35775892938e-13
// 0.0
// 3.02631718796e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 8.35775892938e-13
// 0.0
// 8.35775892938e-13
// 0.0
// 8.35775892938e-13
// 0.0
// 3.02630866145e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 3.02631718796e-07
// 0.0
// 8.35775892938e-13
// 0.0
// 3.02630866145e-07
// -0
// -122.474487305
// 0.0
// 8.35775892938e-13
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 8.35775892938e-13
// 0.0
// 122.474487305
// 0.0
// 3.02630866145e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 3.02630752458e-07
// -0
// -141.421356201
// 0.0
// -4.73695171291e-15
// 0.0
// 152.183563232
// 0.0
// 152.183563232
// 0.0
// 152.183563232
// 0.0
// 152.183563232
// 1.57079637051
// 305.937927246
// 0.0
// 3.02630752458e-07
// -0
// -141.421356201
// -0
// 131.985031128
// 0.0
// 50.7932395935
// 1.57079637051
// 305.937927246
// -0
// 131.985031128
// 0.0
// 50.7932395935
// 0.0
// 141.421356201
// 0.0
// 0.367370277643
// 0.0
// 141.421356201
// 0.0
// 0.367370277643
// 0.0
// 141.421356201
// 0.0
// 0.367370277643
// 0.0
// 50.0
// 0.0
// 50.0
// 0.0
// 3.02631718796e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 314.15927124
// 0.0
// 314.15927124
// 0.0
// 141.421356201
// -0
// 59.1046485901
// -0
// 1.18985927105
// 0.0
// -60.294506073
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// 0.0
// -59.1046485901
// 0.0
// -1.18985927105
// -0
// 60.294506073
// 0.0
// 3.02631718796e-07
// -0
// -122.474487305
// 0.0
// 122.474487305
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// 0.0
// -59.1046485901
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// -1.18985927105
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// -0
// 60.294506073
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// -0
// 59.1046485901
// -0
// 1.18985927105
// 0.0
// -60.294506073
// 0.0
// -7.1054273576e-14
// -0
// 7.1054273576e-14
// 0.0
// 152.183563232
// 0.0
// 46.2883300781
// 0.0
// 152.183563232
// 0.0
// -46.0
// 0.0
// 152.183563232
// 0.0
// 156.957824707
// 0.0
// 156.957824707
// 0.0
// 0.994236528873
// 0.0
// 0.994236528873
// 0.0
// 152.183563232
// -0
// 46.0
// 0.0
// 152.183563232
// 0.0
// -46.0
// 0.0
// 3.02631718796e-07
// -0
// 59.1046485901
// -0
// -122.474487305
// -0
// 1.18985927105
// 0.0
// 122.474487305
// 0.0
// -60.294506073
// 0.0
// 8.35775892938e-13
// 0.0
// -59.1046485901
// 0.0
// 8.35775892938e-13
// 0.0
// -1.18985927105
// 0.0
// 8.35775892938e-13
// -0
// 60.294506073
// 0.0
// 8.35775892938e-13
// 0.0
// -59.1046485901
// 0.0
// 8.35775892938e-13
// 0.0
// -1.18985927105
// 0.0
// 8.35775892938e-13
// -0
// 60.294506073
// 0.0
// 8.35775892938e-13
// 0.0
// 3.02631718796e-07
// 0.0
// -59.1046485901
// -0
// -122.474487305
// 0.0
// -1.18985927105
// 0.0
// 122.474487305
// -0
// 60.294506073
// 0.0
// 8.35775892938e-13
// endResult
