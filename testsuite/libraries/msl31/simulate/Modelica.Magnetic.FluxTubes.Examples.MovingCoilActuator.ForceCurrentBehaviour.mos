// name:     Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour_* Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour.exe Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour.cpp Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour.makefile Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour.libs Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour,stopTime=6.0);
val(pmActuator.mmf_PM.port_p.Phi,0.0);
val(pmActuator.mmf_PM.port_p.Phi,6.0);
val(pmActuator.mmf_PM.port_n.Phi,0.0);
val(pmActuator.mmf_PM.port_n.Phi,6.0);
val(pmActuator.mmf_PM.Phi,0.0);
val(pmActuator.mmf_PM.Phi,6.0);
val(pmActuator.armature.mass.flange_a.f,0.0);
val(pmActuator.armature.mass.flange_a.f,6.0);
val(pmActuator.armature.mass.flange_b.f,0.0);
val(pmActuator.armature.mass.flange_b.f,6.0);
val(pmActuator.armature.flange_a.f,0.0);
val(pmActuator.armature.flange_a.f,6.0);
val(pmActuator.armature.flange_b.f,0.0);
val(pmActuator.armature.flange_b.f,6.0);
val(pmActuator.r.v,0.0);
val(pmActuator.r.v,6.0);
val(pmActuator.r.i,0.0);
val(pmActuator.r.i,6.0);
val(pmActuator.r.p.v,0.0);
val(pmActuator.r.p.v,6.0);
val(pmActuator.r.p.i,0.0);
val(pmActuator.r.p.i,6.0);
val(pmActuator.r.n.v,0.0);
val(pmActuator.r.n.v,6.0);
val(pmActuator.r.n.i,0.0);
val(pmActuator.r.n.i,6.0);
val(pmActuator.r.LossPower,0.0);
val(pmActuator.r.LossPower,6.0);
val(pmActuator.ground.port.Phi,0.0);
val(pmActuator.ground.port.Phi,6.0);
val(pmActuator.coil.port_p.V_m,0.0);
val(pmActuator.coil.port_p.V_m,6.0);
val(pmActuator.coil.port_p.Phi,0.0);
val(pmActuator.coil.port_p.Phi,6.0);
val(pmActuator.coil.port_n.Phi,0.0);
val(pmActuator.coil.port_n.Phi,6.0);
val(pmActuator.coil.p.v,0.0);
val(pmActuator.coil.p.v,6.0);
val(pmActuator.coil.p.i,0.0);
val(pmActuator.coil.p.i,6.0);
val(pmActuator.coil.n.i,0.0);
val(pmActuator.coil.n.i,6.0);
val(pmActuator.coil.v,0.0);
val(pmActuator.coil.v,6.0);
val(pmActuator.coil.i,0.0);
val(pmActuator.coil.i,6.0);
val(der(pmActuator.coil.i),0.0);
val(der(pmActuator.coil.i),6.0);
val(pmActuator.coil.V_m,0.0);
val(pmActuator.coil.V_m,6.0);
val(der(pmActuator.coil.V_m),0.0);
val(der(pmActuator.coil.V_m),6.0);
val(pmActuator.coil.Phi,0.0);
val(pmActuator.coil.Phi,6.0);
val(der(pmActuator.coil.Phi),0.0);
val(der(pmActuator.coil.Phi),6.0);
val(pmActuator.coil.Psi,0.0);
val(pmActuator.coil.Psi,6.0);
val(pmActuator.coil.L_stat,0.0);
val(pmActuator.coil.L_stat,6.0);
val(pmActuator.g_ma.port_p.Phi,0.0);
val(pmActuator.g_ma.port_p.Phi,6.0);
val(pmActuator.g_ma.port_n.V_m,0.0);
val(pmActuator.g_ma.port_n.V_m,6.0);
val(pmActuator.g_ma.port_n.Phi,0.0);
val(pmActuator.g_ma.port_n.Phi,6.0);
val(pmActuator.g_ma.V_m,0.0);
val(pmActuator.g_ma.V_m,6.0);
val(pmActuator.g_ma.Phi,0.0);
val(pmActuator.g_ma.Phi,6.0);
val(der(pmActuator.g_ma.Phi),0.0);
val(der(pmActuator.g_ma.Phi),6.0);
val(pmActuator.g_ma.F_m,0.0);
val(pmActuator.g_ma.F_m,6.0);
val(pmActuator.g_ma.flange.f,0.0);
val(pmActuator.g_ma.flange.f,6.0);
val(pmActuator.g_ma.B_avg,0.0);
val(pmActuator.g_ma.B_avg,6.0);
val(pmActuator.g_mLeak1.port_p.Phi,0.0);
val(pmActuator.g_mLeak1.port_p.Phi,6.0);
val(pmActuator.g_mLeak1.port_n.V_m,0.0);
val(pmActuator.g_mLeak1.port_n.V_m,6.0);
val(pmActuator.g_mLeak1.port_n.Phi,0.0);
val(pmActuator.g_mLeak1.port_n.Phi,6.0);
val(pmActuator.g_mLeak1.V_m,0.0);
val(pmActuator.g_mLeak1.V_m,6.0);
val(pmActuator.g_mLeak1.Phi,0.0);
val(pmActuator.g_mLeak1.Phi,6.0);
val(der(pmActuator.g_mLeak1.Phi),0.0);
val(der(pmActuator.g_mLeak1.Phi),6.0);
val(pmActuator.g_mLeak2.port_p.Phi,0.0);
val(pmActuator.g_mLeak2.port_p.Phi,6.0);
val(pmActuator.g_mLeak2.port_n.V_m,0.0);
val(pmActuator.g_mLeak2.port_n.V_m,6.0);
val(pmActuator.g_mLeak2.port_n.Phi,0.0);
val(pmActuator.g_mLeak2.port_n.Phi,6.0);
val(pmActuator.g_mLeak2.V_m,0.0);
val(pmActuator.g_mLeak2.V_m,6.0);
val(pmActuator.g_mLeak2.Phi,0.0);
val(pmActuator.g_mLeak2.Phi,6.0);
val(der(pmActuator.g_mLeak2.Phi),0.0);
val(der(pmActuator.g_mLeak2.Phi),6.0);
val(pmActuator.p.v,0.0);
val(pmActuator.p.v,6.0);
val(pmActuator.p.i,0.0);
val(pmActuator.p.i,6.0);
val(pmActuator.n.i,0.0);
val(pmActuator.n.i,6.0);
val(pmActuator.flange.f,0.0);
val(pmActuator.flange.f,6.0);
val(pmFixedPos.flange.f,0.0);
val(pmFixedPos.flange.f,6.0);
val(pmRampCurrent.v,0.0);
val(pmRampCurrent.v,6.0);
val(pmRampCurrent.i,0.0);
val(pmRampCurrent.i,6.0);
val(pmRampCurrent.p.v,0.0);
val(pmRampCurrent.p.v,6.0);
val(pmRampCurrent.p.i,0.0);
val(pmRampCurrent.p.i,6.0);
val(pmRampCurrent.n.i,0.0);
val(pmRampCurrent.n.i,6.0);
val(pmRampCurrent.signalSource.y,0.0);
val(pmRampCurrent.signalSource.y,6.0);
val(cFixedPos.flange.f,0.0);
val(cFixedPos.flange.f,6.0);
val(cRampCurrent.v,0.0);
val(cRampCurrent.v,6.0);
val(cRampCurrent.i,0.0);
val(cRampCurrent.i,6.0);
val(cRampCurrent.p.v,0.0);
val(cRampCurrent.p.v,6.0);
val(cRampCurrent.p.i,0.0);
val(cRampCurrent.p.i,6.0);
val(cRampCurrent.n.i,0.0);
val(cRampCurrent.n.i,6.0);
val(cRampCurrent.signalSource.y,0.0);
val(cRampCurrent.signalSource.y,6.0);
val(cActuator.r.v,0.0);
val(cActuator.r.v,6.0);
val(cActuator.r.i,0.0);
val(cActuator.r.i,6.0);
val(cActuator.r.p.v,0.0);
val(cActuator.r.p.v,6.0);
val(cActuator.r.p.i,0.0);
val(cActuator.r.p.i,6.0);
val(cActuator.r.n.v,0.0);
val(cActuator.r.n.v,6.0);
val(cActuator.r.n.i,0.0);
val(cActuator.r.n.i,6.0);
val(cActuator.r.LossPower,0.0);
val(cActuator.r.LossPower,6.0);
val(cActuator.armature.mass.flange_a.f,0.0);
val(cActuator.armature.mass.flange_a.f,6.0);
val(cActuator.armature.mass.flange_b.f,0.0);
val(cActuator.armature.mass.flange_b.f,6.0);
val(cActuator.armature.flange_a.f,0.0);
val(cActuator.armature.flange_a.f,6.0);
val(cActuator.armature.flange_b.f,0.0);
val(cActuator.armature.flange_b.f,6.0);
val(cActuator.l.v,0.0);
val(cActuator.l.v,6.0);
val(cActuator.l.i,0.0);
val(cActuator.l.i,6.0);
val(der(cActuator.l.i),0.0);
val(der(cActuator.l.i),6.0);
val(cActuator.l.p.v,0.0);
val(cActuator.l.p.v,6.0);
val(cActuator.l.p.i,0.0);
val(cActuator.l.p.i,6.0);
val(cActuator.l.n.i,0.0);
val(cActuator.l.n.i,6.0);
val(cActuator.electroTranslationalConverter.i,0.0);
val(cActuator.electroTranslationalConverter.i,6.0);
val(cActuator.electroTranslationalConverter.p.i,0.0);
val(cActuator.electroTranslationalConverter.p.i,6.0);
val(cActuator.electroTranslationalConverter.n.i,0.0);
val(cActuator.electroTranslationalConverter.n.i,6.0);
val(cActuator.electroTranslationalConverter.flange.f,0.0);
val(cActuator.electroTranslationalConverter.flange.f,6.0);
val(cActuator.p.v,0.0);
val(cActuator.p.v,6.0);
val(cActuator.p.i,0.0);
val(cActuator.p.i,6.0);
val(cActuator.n.i,0.0);
val(cActuator.n.i,6.0);
val(cActuator.flange.f,0.0);
val(cActuator.flange.f,6.0);
val(comparisonWithFEA.u,0.0);
val(comparisonWithFEA.u,6.0);
val(comparisonWithFEA.y[1],0.0);
val(comparisonWithFEA.y[1],6.0);
val(iSensor.p.v,0.0);
val(iSensor.p.v,6.0);
val(iSensor.p.i,0.0);
val(iSensor.p.i,6.0);
val(iSensor.n.v,0.0);
val(iSensor.n.v,6.0);
val(iSensor.n.i,0.0);
val(iSensor.n.i,6.0);
val(iSensor.i,0.0);
val(iSensor.i,6.0);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour_res.mat",
//     simulationOptions = "startTime = 0.0, stopTime = 6.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Magnetic.FluxTubes.Examples.MovingCoilActuator.ForceCurrentBehaviour', storeInTemp = false, noClean = false, options = '', outputFormat = 'mat'",
//     messages = ""
// end SimulationResult;
// -0.000471240171464
// -0.000637560209725
// 0.000471240171464
// 0.000637560209725
// -0.000471240171464
// -0.000637560209725
// -9.89604377747
// 13.3887653351
// 9.89604377747
// -13.3887653351
// -9.89604377747
// 13.3887653351
// 9.89604377747
// -13.3887653351
// -8.57999992371
// 8.57999992371
// -3.0
// 3.0
// -8.57486343384
// 8.57999992371
// -3.0
// 3.0
// 0.005137023516
// -0
// 3.0
// -3.0
// 25.7399997711
// 25.7399997711
// -0
// -0
// -420.0
// 420.0
// -0.000167121033883
// -0.000387279171264
// 0.000167121033883
// 0.000387279171264
// 0.005137023516
// -0
// -3.0
// 3.0
// 3.0
// -3.0
// 0.005137023516
// -0
// -3.0
// 3.0
// 1.0
// -0
// -420.0
// 420.0
// 140.0
// -0
// -0.000167121033883
// -0.000387279171264
// -3.66930253222e-05
// 0.0
// -0.0233969446272
// -0.0542190857232
// 0.00779898138717
// 0.0180730279535
// -0.000194040068891
// -0.000360360136256
// -420.0
// 420.0
// 0.000194040068891
// 0.000360360136256
// -980.0
// -1820.0
// -0.000194040068891
// -0.000360360136256
// -2.77200106211e-05
// 0.0
// 9.50796318054
// 32.7927703857
// -9.50796318054
// -32.7927703857
// -0.196078956127
// -0.364146649837
// 1.33392577482e-05
// -1.33392577482e-05
// -420.0
// 420.0
// -1.33392577482e-05
// 1.33392577482e-05
// 420.0
// -420.0
// 1.33392577482e-05
// -1.33392577482e-05
// -4.4464190978e-06
// 0.0
// 1.3579786355e-05
// -1.3579786355e-05
// -420.0
// 420.0
// -1.3579786355e-05
// 1.3579786355e-05
// 420.0
// -420.0
// 1.3579786355e-05
// -1.3579786355e-05
// -4.52659514849e-06
// 0.0
// -8.57486343384
// 8.57999992371
// -3.0
// 3.0
// 3.0
// -3.0
// 9.89604377747
// -13.3887653351
// -9.89604377747
// 13.3887653351
// -8.57486343384
// 8.57999992371
// 3.0
// -3.0
// -8.57486343384
// 8.57999992371
// 3.0
// -3.0
// -3.0
// 3.0
// 3.0
// -3.0
// -11.6400003433
// 11.6400003433
// -8.57489967346
// 8.57999992371
// 3.0
// -3.0
// -8.57489967346
// 8.57999992371
// 3.0
// -3.0
// -3.0
// 3.0
// 3.0
// -3.0
// -8.57999992371
// 8.57999992371
// -3.0
// 3.0
// -8.57489967346
// 8.57999992371
// -3.0
// 3.0
// 0.00510000018403
// -0
// 3.0
// -3.0
// 25.7399997711
// 25.7399997711
// -11.6400003433
// 11.6400003433
// 11.6400003433
// -11.6400003433
// -11.6400003433
// 11.6400003433
// 11.6400003433
// -11.6400003433
// 0.00510000018403
// -0
// -3.0
// 3.0
// 1.0
// -0
// 0.00510000018403
// -0
// -3.0
// 3.0
// 3.0
// -3.0
// -3.0
// 3.0
// -3.0
// 3.0
// 3.0
// -3.0
// 11.6400003433
// -11.6400003433
// -8.57489967346
// 8.57999992371
// -3.0
// 3.0
// 3.0
// -3.0
// 11.6400003433
// -11.6400003433
// -3.0
// 3.0
// -9.65653038025
// 13.0741500854
// -8.57489967346
// 8.57999992371
// -3.0
// 3.0
// -8.57489967346
// 8.57999992371
// 3.0
// -3.0
// -3.0
// 3.0
// endResult
