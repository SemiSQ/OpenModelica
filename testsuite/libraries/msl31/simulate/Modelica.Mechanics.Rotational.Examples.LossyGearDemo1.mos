// name:     Modelica.Mechanics.Rotational.Examples.LossyGearDemo1
// keywords: simulation MSL Examples
// status: correct
// teardown_command: rm -rf Modelica.Mechanics.Rotational.Examples.LossyGearDemo1_* Modelica.Mechanics.Rotational.Examples.LossyGearDemo1 Modelica.Mechanics.Rotational.Examples.LossyGearDemo1.exe Modelica.Mechanics.Rotational.Examples.LossyGearDemo1.cpp Modelica.Mechanics.Rotational.Examples.LossyGearDemo1.makefile Modelica.Mechanics.Rotational.Examples.LossyGearDemo1.libs Modelica.Mechanics.Rotational.Examples.LossyGearDemo1.log output.log
//
// Simulation Results 
// Modelica Standard Library
//

loadModel(Modelica);
loadModel(ModelicaServices);

simulate(Modelica.Mechanics.Rotational.Examples.LossyGearDemo1);
val(PowerLoss,0.0);
val(PowerLoss,0.5);
val(gear.flange_a.phi,0.0);
val(gear.flange_a.phi,0.5);
val(der(gear.flange_a.phi),0.0);
val(der(gear.flange_a.phi),0.5);
val(gear.flange_a.tau,0.0);
val(gear.flange_a.tau,0.5);
val(gear.flange_b.phi,0.0);
val(gear.flange_b.phi,0.5);
val(der(gear.flange_b.phi),0.0);
val(der(gear.flange_b.phi),0.5);
val(gear.flange_b.tau,0.0);
val(gear.flange_b.tau,0.5);
val(gear.support.tau,0.0);
val(gear.support.tau,0.5);
val(gear.phi_a,0.0);
val(gear.phi_a,0.5);
val(der(gear.phi_a),0.0);
val(der(gear.phi_a),0.5);
val(gear.phi_b,0.0);
val(gear.phi_b,0.5);
val(gear.sa,0.0);
val(gear.sa,0.5);
val(gear.w_a,0.0);
val(gear.w_a,0.5);
val(der(gear.w_a),0.0);
val(der(gear.w_a),0.5);
val(gear.a_a,0.0);
val(gear.a_a,0.5);
val(gear.quadrant1,0.0);
val(gear.quadrant1,0.5);
val(gear.quadrant2,0.0);
val(gear.quadrant2,0.5);
val(gear.quadrant3,0.0);
val(gear.quadrant3,0.5);
val(gear.quadrant4,0.0);
val(gear.quadrant4,0.5);
val(gear.tauLoss,0.0);
val(gear.tauLoss,0.5);
val(gear.tauLossMax,0.0);
val(gear.tauLossMax,0.5);
val(gear.tauLossMin,0.0);
val(gear.tauLossMin,0.5);
val(gear.tau_aPos,0.0);
val(gear.tau_aPos,0.5);
val(gear.startForward,0.0);
val(gear.startForward,0.5);
val(gear.startBackward,0.0);
val(gear.startBackward,0.5);
val(gear.locked,0.0);
val(gear.locked,0.5);
val(gear.mode,0.0);
val(gear.mode,0.5);
val(Inertia1.flange_a.phi,0.0);
val(Inertia1.flange_a.phi,0.5);
val(Inertia1.flange_a.tau,0.0);
val(Inertia1.flange_a.tau,0.5);
val(Inertia1.flange_b.phi,0.0);
val(Inertia1.flange_b.phi,0.5);
val(Inertia1.flange_b.tau,0.0);
val(Inertia1.flange_b.tau,0.5);
val(Inertia1.phi,0.0);
val(Inertia1.phi,0.5);
val(der(Inertia1.phi),0.0);
val(der(Inertia1.phi),0.5);
val(Inertia1.w,0.0);
val(Inertia1.w,0.5);
val(der(Inertia1.w),0.0);
val(der(Inertia1.w),0.5);
val(Inertia1.a,0.0);
val(Inertia1.a,0.5);
val(Inertia2.flange_a.phi,0.0);
val(Inertia2.flange_a.phi,0.5);
val(Inertia2.flange_a.tau,0.0);
val(Inertia2.flange_a.tau,0.5);
val(Inertia2.flange_b.phi,0.0);
val(Inertia2.flange_b.phi,0.5);
val(Inertia2.flange_b.tau,0.0);
val(Inertia2.flange_b.tau,0.5);
val(Inertia2.phi,0.0);
val(Inertia2.phi,0.5);
val(der(Inertia2.phi),0.0);
val(der(Inertia2.phi),0.5);
val(Inertia2.w,0.0);
val(Inertia2.w,0.5);
val(der(Inertia2.w),0.0);
val(der(Inertia2.w),0.5);
val(Inertia2.a,0.0);
val(Inertia2.a,0.5);
val(torque1.flange.phi,0.0);
val(torque1.flange.phi,0.5);
val(torque1.flange.tau,0.0);
val(torque1.flange.tau,0.5);
val(torque1.support.tau,0.0);
val(torque1.support.tau,0.5);
val(torque1.tau,0.0);
val(torque1.tau,0.5);
val(torque2.flange.phi,0.0);
val(torque2.flange.phi,0.5);
val(torque2.flange.tau,0.0);
val(torque2.flange.tau,0.5);
val(torque2.support.tau,0.0);
val(torque2.support.tau,0.5);
val(torque2.tau,0.0);
val(torque2.tau,0.5);
val(DriveSine.y,0.0);
val(DriveSine.y,0.5);
val(load.y,0.0);
val(load.y,0.5);
val(fixed.flange.tau,0.0);
val(fixed.flange.tau,0.5);

// Result:
// true
// true
// record SimulationResult
//     resultFile = "Modelica.Mechanics.Rotational.Examples.LossyGearDemo1_res.plt",
//     simulationOptions = "startTime = 0.0, stopTime = 1.0, numberOfIntervals = 500, tolerance = 1e-06, method = 'dassl', fileNamePrefix = 'Modelica.Mechanics.Rotational.Examples.LossyGearDemo1', storeInTemp = false, noClean = false, options = '', outputFormat = 'plt'",
//     messages = ""
// end SimulationResult;
// 0.0
// 0.0599777773023
// 0.0
// 0.000125364473206
// 0.0
// -0.0325593650341
// 2.10526323318
// 1.84210526943
// 0.0
// 6.2682236603e-05
// 0.0
// -0.0162796825171
// -8.42105293274
// -7.36842107773
// 6.31578969955
// 5.52631568909
// 0.0
// 0.000125364473206
// 0.0
// -0.0325593650341
// 0.0
// 6.2682236603e-05
// -4.21052646637
// -3.68421053886
// 0.0
// -0.0325593650341
// -2.10526323318
// -1.84210526943
// -2.10526323318
// -1.84210526943
// 1.05263161659
// 0.921052634716
// -2.10526323318
// -1.84210526943
// 1.05263161659
// 0.921052634716
// -2.10526323318
// -1.84210526943
// -2.10526323318
// -1.84210526943
// 1.05263161659
// 0.921052634716
// -2.10526323318
// -1.84210526943
// 1.0
// 1.0
// 0.0
// 0.0
// 1.0
// 0.0
// 0.0
// 0.0
// 0.0
// -1.0
// 0.0
// 0.000125364473206
// 0.0
// -1.65389213826e-14
// 0.0
// 0.000125364473206
// -2.10526323318
// -1.84210526943
// 0.0
// 0.000125364473206
// 0.0
// -0.0325593650341
// 0.0
// -0.0325593650341
// -2.10526323318
// -1.84210526943
// -2.10526323318
// -1.84210526943
// 0.0
// 6.2682236603e-05
// 8.42105293274
// 7.36842107773
// 0.0
// 6.2682236603e-05
// -10.0
// -8.75
// 0.0
// 6.2682236603e-05
// 0.0
// -0.0162796825171
// 0.0
// -0.0162796825171
// -1.05263161659
// -0.921052634716
// -1.05263161659
// -0.921052634716
// 0.0
// 0.000125364473206
// -0
// 1.65389213826e-14
// 0.0
// -1.65389213826e-14
// 0.0
// -1.65389213826e-14
// 0.0
// 6.2682236603e-05
// 10.0
// 8.75
// -10.0
// -8.75
// -10.0
// -8.75
// 0.0
// -1.65389213826e-14
// -10.0
// -8.75
// 3.68421053886
// 3.22368431091
// endResult
