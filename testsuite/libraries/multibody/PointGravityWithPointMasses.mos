// name:     Modelica3.x.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses
// keywords: multibody, balancing, instantiation
// status:   correct
// 
//  Modelica MultiBody 3.x: instantiation and balance checking of the PointGravityWithPointMasses model
//

loadFile("_ElementaryTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses);
getErrorString();
system("rm -f *.so *.dll *.log *.c* *.makefile *.libs");

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length
// input Real[:] v "Vector";
// output Real result "Length of vector v";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent
// input Real u1;
// input Real u2;
// output Real y;
// protected Integer dummy;
// algorithm
//   y := if u1 > u2 then u1 else u2;
//   dummy := 0;
// end Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation
// input Real[3, 3] T1 "Orientation object to rotate frame 0 into frame 1";
// input Real[3, 3] T_rel "Orientation object to rotate frame 1 into frame 2";
// output Real[3, 3] T2 "Orientation object to rotate frame 0 into frame 2";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy
// input Real[3] n_x(unit = "1") "Vector in direction of x-axis of frame 2, resolved in frame 1";
// input Real[3] n_y(unit = "1") "Vector in direction of y-axis of frame 2, resolved in frame 1";
// output Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
// protected Real[3] e_x(unit = "1") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
// protected Real[3] n_z_aux(unit = "1") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
// protected Real[3] n_y_aux(unit = "1") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else DAE.CAST(/tp:REAL[3]/, if abs(e_x[1]) > 1e-06 then {0,1,0} else {1,0,0});
// protected Real[3] e_z_aux(unit = "1") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
// protected Real[3] e_z(unit = "1") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1
// input Real[3, 3] T "Orientation object to rotate frame 1 into frame 2";
// input Real[3] v2 "Vector in frame 2";
// output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation
// output Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object such that frame 1 and frame 2 are identical";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation({{1.0,0.0,0.0},{0.0,1.0,0.0},{0.0,0.0,1.0}},{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation "Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation"
// input Real[3, 3] T;
// input Real(quantity="AngularVelocity", unit="rad/s")[3] w;
// output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Math.Vectors.normalize
// input Real[:] v "Vector";
// input Real eps = 1e-13 "if |v| < eps then result = v/eps";
// output Real[size(v,1)] result "Input vector v normalized to length=1";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1
// input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// input Real[3] v2 "Vector in frame 2";
// output Real[3] v1 "Vector in frame 1";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2
// input Modelica.Mechanics.MultiBody.Frames.Orientation R "Orientation object to rotate frame 1 into frame 2";
// input Real[3] v1 "Vector in frame 1";
// output Real[3] v2 "Vector in frame 2";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration
// input Real[3] r(quantity = "Length", unit = "m") "Position vector from world frame to actual point, resolved in world frame";
// input enumeration(NoGravity, UniformGravity, PointGravity) gravityType "Type of gravity field";
// input Real[3] g(quantity = "Acceleration", unit = "m/s2") "Constant gravity acceleration, resolved in world frame, if gravityType=1";
// input Real mue(unit = "m3/s2") "Field constant of point gravity field, if gravityType=2";
// output Real[3] gravity(quantity = "Acceleration", unit = "m/s2") "Gravity acceleration at point r, resolved in world frame";
// algorithm
//   gravity := if gravityType == GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial
// input Real material1;
// input Real material2;
// input Real material3;
// input Real sp;
// output Real mat;
// algorithm
//   mat := material1 + material2 + material3 + sp;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial;
// 
// function Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape
// input String shapeType;
// output Real pack;
// algorithm
//   pack := 1.2;
// end Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape;
// 
// fclass Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses
// Real world.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real world.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real world.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real world.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real world.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real world.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real world.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real world.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real world.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real world.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real world.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real world.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real world.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean world.enableAnimation = true "= true, if animation of all components is enabled";
// parameter Boolean world.animateWorld = true "= true, if world coordinate system shall be visualized";
// parameter Boolean world.animateGravity = true "= true, if gravity field shall be visualized (acceleration vector or field center)";
// parameter String world.label1 = "x" "Label of horizontal axis in icon";
// parameter String world.label2 = "y" "Label of vertical axis in icon";
// parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity "Type of gravity field";
// parameter Real world.g(quantity = "Acceleration", unit = "m/s2") = 9.81 "Constant gravity acceleration";
// parameter Real world.n[1](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
// parameter Real world.n[2](unit = "1") = -1.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
// parameter Real world.n[3](unit = "1") = 0.0 "Direction of gravity resolved in world frame (gravity = g*n/length(n))";
// parameter Real world.mue(unit = "m3/s2", min = 0.0) = 1.0 "Gravity field constant (default = field constant of earth)";
// parameter Boolean world.driveTrainMechanics3D = true "= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account";
// parameter Real world.axisLength(quantity = "Length", unit = "m", min = 0.0) = world.nominalLength / 2.0 "Length of world axes arrows";
// parameter Real world.axisDiameter(quantity = "Length", unit = "m", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction "Diameter of world axes arrows";
// parameter Boolean world.axisShowLabels = true "= true, if labels shall be shown";
// input Integer world.axisColor_x[1](min = 0, max = 255) = 0 "Color of x-arrow";
// input Integer world.axisColor_x[2](min = 0, max = 255) = 0 "Color of x-arrow";
// input Integer world.axisColor_x[3](min = 0, max = 255) = 0 "Color of x-arrow";
// input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
// input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
// input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
// input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] "Color of z-arrow";
// input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] "Color of z-arrow";
// input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] "Color of z-arrow";
// parameter Real world.gravityArrowTail[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
// parameter Real world.gravityArrowTail[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
// parameter Real world.gravityArrowTail[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to arrow tail, resolved in world frame";
// parameter Real world.gravityArrowLength(quantity = "Length", unit = "m") = world.axisLength / 2.0 "Length of gravity arrow";
// parameter Real world.gravityArrowDiameter(quantity = "Length", unit = "m", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction "Diameter of gravity arrow";
// input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 "Color of gravity arrow";
// input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 "Color of gravity arrow";
// input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 "Color of gravity arrow";
// parameter Real world.gravitySphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of sphere representing gravity center (default = mean diameter of earth)";
// input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 "Color of gravity sphere";
// input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 "Color of gravity sphere";
// input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 "Color of gravity sphere";
// parameter Real world.nominalLength(quantity = "Length", unit = "m") = 1.0 "\"Nominal\" length of multi-body system";
// parameter Real world.defaultAxisLength(quantity = "Length", unit = "m") = world.nominalLength / 5.0 "Default for length of a frame axis (but not world frame)";
// parameter Real world.defaultJointLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a joint";
// parameter Real world.defaultJointWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape representing a joint";
// parameter Real world.defaultForceLength(quantity = "Length", unit = "m") = world.nominalLength / 10.0 "Default for the fixed length of a shape representing a force (e.g. damper)";
// parameter Real world.defaultForceWidth(quantity = "Length", unit = "m") = world.nominalLength / 20.0 "Default for the fixed width of a shape represening a force (e.g. spring, bushing)";
// parameter Real world.defaultBodyDiameter(quantity = "Length", unit = "m") = world.nominalLength / 9.0 "Default for diameter of sphere representing the center of mass of a body";
// parameter Real world.defaultWidthFraction = 20.0 "Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)";
// parameter Real world.defaultArrowDiameter(quantity = "Length", unit = "m") = world.nominalLength / 40.0 "Default for arrow diameter (e.g., of forces, torques, sensors)";
// parameter Real world.defaultFrameDiameterFraction = 40.0 "Default for arrow diameter of a coordinate system as a fraction of axis length";
// parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 "Default reflection of ambient light (= 0: light is completely absorbed)";
// parameter Real world.defaultN_to_m(unit = "N/m", min = 0.0) = 1000.0 "Default scaling of force arrows (length = force/defaultN_to_m)";
// parameter Real world.defaultNm_to_m(unit = "N.m/m", min = 0.0) = 1000.0 "Default scaling of torque arrows (length = torque/defaultNm_to_m)";
// protected parameter Integer world.ndim = if world.enableAnimation AND world.animateWorld then 1 else 0;
// protected parameter Integer world.ndim2 = if world.enableAnimation AND world.animateWorld AND world.axisShowLabels then 1 else 0;
// protected parameter Real world.headLength(quantity = "Length", unit = "m") = min(world.axisLength,5.0 * world.axisDiameter);
// protected parameter Real world.headWidth(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
// protected parameter Real world.lineLength(quantity = "Length", unit = "m") = max(0.0,world.axisLength - world.headLength);
// protected parameter Real world.lineWidth(quantity = "Length", unit = "m") = world.axisDiameter;
// protected parameter Real world.scaledLabel(quantity = "Length", unit = "m") = 3.0 * world.axisDiameter;
// protected parameter Real world.labelStart(quantity = "Length", unit = "m") = 1.05 * world.axisLength;
// parameter String world.x_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.x_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowLine.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
// input Real world.x_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
// input Real world.x_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
// input Real world.x_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) "Color of shape";
// input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) "Color of shape";
// input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) "Color of shape";
// input Real world.x_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.x_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
// protected Real world.x_arrowLine.e_x[1](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
// protected Real world.x_arrowLine.e_x[2](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
// protected Real world.x_arrowLine.e_x[3](unit = "1") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
// protected Real world.x_arrowLine.n_z_aux[1](unit = "1") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
// protected Real world.x_arrowLine.n_z_aux[2](unit = "1") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
// protected Real world.x_arrowLine.n_z_aux[3](unit = "1") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
// protected Real world.x_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
// protected Real world.x_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
// protected Real world.x_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
// protected output Real world.x_arrowLine.Form;
// output Real world.x_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.x_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowLine.Material;
// protected output Real world.x_arrowLine.Extra;
// parameter String world.x_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.x_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_arrowHead.r[1](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_arrowHead.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.x_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
// input Real world.x_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
// input Real world.x_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
// input Real world.x_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) "Color of shape";
// input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) "Color of shape";
// input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) "Color of shape";
// input Real world.x_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.x_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
// protected Real world.x_arrowHead.e_x[1](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
// protected Real world.x_arrowHead.e_x[2](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
// protected Real world.x_arrowHead.e_x[3](unit = "1") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
// protected Real world.x_arrowHead.n_z_aux[1](unit = "1") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
// protected Real world.x_arrowHead.n_z_aux[2](unit = "1") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
// protected Real world.x_arrowHead.n_z_aux[3](unit = "1") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
// protected Real world.x_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
// protected Real world.x_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
// protected Real world.x_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
// protected output Real world.x_arrowHead.Form;
// output Real world.x_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.x_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_arrowHead.Material;
// protected output Real world.x_arrowHead.Extra;
// input Real world.x_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.x_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.r_lines[1](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.x_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.x_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_x[1](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.x_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[1,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.x_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
// input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] "Color of cylinders";
// input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] "Color of cylinders";
// input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] "Color of cylinders";
// input Real world.x_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected parameter Integer world.x_label.n = 2 "Number of cylinders";
// protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][1];
// protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][2];
// protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][3];
// protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][1];
// protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][2];
// protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][3];
// protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][1];
// protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][2];
// protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][3];
// protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][1];
// protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][2];
// protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][3];
// protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][1];
// protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][2];
// protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][3];
// protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][1];
// protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][2];
// protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][3];
// protected Real world.x_label.r_abs[1](quantity = "Length", unit = "m") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[1];
// protected Real world.x_label.r_abs[2](quantity = "Length", unit = "m") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[2];
// protected Real world.x_label.r_abs[3](quantity = "Length", unit = "m") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[3];
// parameter String world.x_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.x_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[1].r[1](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[1].r[2](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[1].r[3](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) "Length of visual object";
// input Real world.x_label.cylinders[1].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
// input Real world.x_label.cylinders[1].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
// input Real world.x_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) "Color of shape";
// input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) "Color of shape";
// input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) "Color of shape";
// input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.x_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
// protected Real world.x_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
// protected Real world.x_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
// protected Real world.x_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
// protected Real world.x_label.cylinders[1].n_z_aux[1](unit = "1") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
// protected Real world.x_label.cylinders[1].n_z_aux[2](unit = "1") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
// protected Real world.x_label.cylinders[1].n_z_aux[3](unit = "1") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
// protected Real world.x_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
// protected Real world.x_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
// protected Real world.x_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
// protected output Real world.x_label.cylinders[1].Form;
// output Real world.x_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.x_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[1].Material;
// protected output Real world.x_label.cylinders[1].Extra;
// parameter String world.x_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.x_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.x_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.x_label.cylinders[2].r[1](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[2].r[2](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[2].r[3](quantity = "Length", unit = "m") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.x_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.x_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.x_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.x_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) "Length of visual object";
// input Real world.x_label.cylinders[2].width(quantity = "Length", unit = "m") = world.x_label.diameter "Width of visual object";
// input Real world.x_label.cylinders[2].height(quantity = "Length", unit = "m") = world.x_label.diameter "Height of visual object";
// input Real world.x_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) "Color of shape";
// input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) "Color of shape";
// input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) "Color of shape";
// input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.x_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
// protected Real world.x_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
// protected Real world.x_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
// protected Real world.x_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
// protected Real world.x_label.cylinders[2].n_z_aux[1](unit = "1") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
// protected Real world.x_label.cylinders[2].n_z_aux[2](unit = "1") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
// protected Real world.x_label.cylinders[2].n_z_aux[3](unit = "1") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
// protected Real world.x_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
// protected Real world.x_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
// protected Real world.x_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
// protected output Real world.x_label.cylinders[2].Form;
// output Real world.x_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.x_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.x_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.x_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.x_label.cylinders[2].Material;
// protected output Real world.x_label.cylinders[2].Extra;
// parameter String world.y_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.y_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowLine.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowLine.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowLine.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowLine.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
// input Real world.y_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
// input Real world.y_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
// input Real world.y_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) "Color of shape";
// input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) "Color of shape";
// input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) "Color of shape";
// input Real world.y_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.y_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
// protected Real world.y_arrowLine.e_x[1](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
// protected Real world.y_arrowLine.e_x[2](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
// protected Real world.y_arrowLine.e_x[3](unit = "1") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
// protected Real world.y_arrowLine.n_z_aux[1](unit = "1") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
// protected Real world.y_arrowLine.n_z_aux[2](unit = "1") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
// protected Real world.y_arrowLine.n_z_aux[3](unit = "1") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
// protected Real world.y_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
// protected Real world.y_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
// protected Real world.y_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
// protected output Real world.y_arrowLine.Form;
// output Real world.y_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.y_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowLine.Material;
// protected output Real world.y_arrowLine.Extra;
// parameter String world.y_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.y_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowHead.r[2](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowHead.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowHead.lengthDirection[2](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowHead.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.y_arrowHead.widthDirection[1](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowHead.widthDirection[2](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
// input Real world.y_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
// input Real world.y_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
// input Real world.y_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) "Color of shape";
// input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) "Color of shape";
// input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) "Color of shape";
// input Real world.y_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.y_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
// protected Real world.y_arrowHead.e_x[1](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
// protected Real world.y_arrowHead.e_x[2](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
// protected Real world.y_arrowHead.e_x[3](unit = "1") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
// protected Real world.y_arrowHead.n_z_aux[1](unit = "1") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
// protected Real world.y_arrowHead.n_z_aux[2](unit = "1") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
// protected Real world.y_arrowHead.n_z_aux[3](unit = "1") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
// protected Real world.y_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
// protected Real world.y_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
// protected Real world.y_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
// protected output Real world.y_arrowHead.Form;
// output Real world.y_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.y_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_arrowHead.Material;
// protected output Real world.y_arrowHead.Extra;
// input Real world.y_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.y_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.y_label.r_lines[2](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.y_label.r_lines[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_x[2](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_x[3](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_y[1](unit = "1") = -1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_y[2](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.y_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[1,2,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[2,1,2](quantity = "Length", unit = "m") = 1.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[2,2,1](quantity = "Length", unit = "m") = 0.5 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.lines[2,2,2](quantity = "Length", unit = "m") = 0.75 * world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.y_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
// input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] "Color of cylinders";
// input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] "Color of cylinders";
// input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] "Color of cylinders";
// input Real world.y_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected parameter Integer world.y_label.n = 2 "Number of cylinders";
// protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][1];
// protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][2];
// protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][3];
// protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][1];
// protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][2];
// protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][3];
// protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][1];
// protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][2];
// protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][3];
// protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][1];
// protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][2];
// protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][3];
// protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][1];
// protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][2];
// protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][3];
// protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][1];
// protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][2];
// protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][3];
// protected Real world.y_label.r_abs[1](quantity = "Length", unit = "m") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[1];
// protected Real world.y_label.r_abs[2](quantity = "Length", unit = "m") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[2];
// protected Real world.y_label.r_abs[3](quantity = "Length", unit = "m") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[3];
// parameter String world.y_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.y_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[1].r[1](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[1].r[2](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[1].r[3](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) "Length of visual object";
// input Real world.y_label.cylinders[1].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
// input Real world.y_label.cylinders[1].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
// input Real world.y_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) "Color of shape";
// input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) "Color of shape";
// input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) "Color of shape";
// input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.y_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
// protected Real world.y_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
// protected Real world.y_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
// protected Real world.y_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
// protected Real world.y_label.cylinders[1].n_z_aux[1](unit = "1") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
// protected Real world.y_label.cylinders[1].n_z_aux[2](unit = "1") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
// protected Real world.y_label.cylinders[1].n_z_aux[3](unit = "1") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
// protected Real world.y_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
// protected Real world.y_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
// protected Real world.y_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
// protected output Real world.y_label.cylinders[1].Form;
// output Real world.y_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.y_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[1].Material;
// protected output Real world.y_label.cylinders[1].Extra;
// parameter String world.y_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.y_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.y_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.y_label.cylinders[2].r[1](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[2].r[2](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[2].r[3](quantity = "Length", unit = "m") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.y_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.y_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.y_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.y_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) "Length of visual object";
// input Real world.y_label.cylinders[2].width(quantity = "Length", unit = "m") = world.y_label.diameter "Width of visual object";
// input Real world.y_label.cylinders[2].height(quantity = "Length", unit = "m") = world.y_label.diameter "Height of visual object";
// input Real world.y_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) "Color of shape";
// input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) "Color of shape";
// input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) "Color of shape";
// input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.y_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
// protected Real world.y_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
// protected Real world.y_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
// protected Real world.y_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
// protected Real world.y_label.cylinders[2].n_z_aux[1](unit = "1") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
// protected Real world.y_label.cylinders[2].n_z_aux[2](unit = "1") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
// protected Real world.y_label.cylinders[2].n_z_aux[3](unit = "1") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
// protected Real world.y_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
// protected Real world.y_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
// protected Real world.y_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
// protected output Real world.y_label.cylinders[2].Form;
// output Real world.y_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.y_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.y_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.y_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.y_label.cylinders[2].Material;
// protected output Real world.y_label.cylinders[2].Extra;
// parameter String world.z_arrowLine.shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.z_arrowLine.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowLine.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowLine.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowLine.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowLine.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowLine.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowLine.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowLine.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowLine.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowLine.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowLine.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowLine.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowLine.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowLine.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowLine.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowLine.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowLine.length(quantity = "Length", unit = "m") = world.lineLength "Length of visual object";
// input Real world.z_arrowLine.width(quantity = "Length", unit = "m") = world.lineWidth "Width of visual object";
// input Real world.z_arrowLine.height(quantity = "Length", unit = "m") = world.lineWidth "Height of visual object";
// input Real world.z_arrowLine.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) "Color of shape";
// input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) "Color of shape";
// input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) "Color of shape";
// input Real world.z_arrowLine.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.z_arrowLine.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
// protected Real world.z_arrowLine.e_x[1](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
// protected Real world.z_arrowLine.e_x[2](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
// protected Real world.z_arrowLine.e_x[3](unit = "1") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
// protected Real world.z_arrowLine.n_z_aux[1](unit = "1") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
// protected Real world.z_arrowLine.n_z_aux[2](unit = "1") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
// protected Real world.z_arrowLine.n_z_aux[3](unit = "1") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
// protected Real world.z_arrowLine.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
// protected Real world.z_arrowLine.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
// protected Real world.z_arrowLine.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
// protected output Real world.z_arrowLine.Form;
// output Real world.z_arrowLine.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowLine.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_arrowLine.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_arrowLine.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.z_arrowLine.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowLine.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowLine.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowLine.Material;
// protected output Real world.z_arrowLine.Extra;
// parameter String world.z_arrowHead.shapeType = "cone" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.z_arrowHead.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_arrowHead.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowHead.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowHead.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_arrowHead.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowHead.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowHead.r[3](quantity = "Length", unit = "m") = world.lineLength "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_arrowHead.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowHead.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowHead.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_arrowHead.lengthDirection[1](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowHead.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowHead.lengthDirection[3](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.z_arrowHead.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowHead.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowHead.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_arrowHead.length(quantity = "Length", unit = "m") = world.headLength "Length of visual object";
// input Real world.z_arrowHead.width(quantity = "Length", unit = "m") = world.headWidth "Width of visual object";
// input Real world.z_arrowHead.height(quantity = "Length", unit = "m") = world.headWidth "Height of visual object";
// input Real world.z_arrowHead.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) "Color of shape";
// input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) "Color of shape";
// input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) "Color of shape";
// input Real world.z_arrowHead.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.z_arrowHead.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
// protected Real world.z_arrowHead.e_x[1](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
// protected Real world.z_arrowHead.e_x[2](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
// protected Real world.z_arrowHead.e_x[3](unit = "1") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
// protected Real world.z_arrowHead.n_z_aux[1](unit = "1") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
// protected Real world.z_arrowHead.n_z_aux[2](unit = "1") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
// protected Real world.z_arrowHead.n_z_aux[3](unit = "1") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
// protected Real world.z_arrowHead.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
// protected Real world.z_arrowHead.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
// protected Real world.z_arrowHead.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
// protected output Real world.z_arrowHead.Form;
// output Real world.z_arrowHead.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_arrowHead.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_arrowHead.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_arrowHead.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.z_arrowHead.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowHead.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowHead.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_arrowHead.Material;
// protected output Real world.z_arrowHead.Extra;
// input Real world.z_label.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.z_label.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.r_lines[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.z_label.r_lines[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.z_label.r_lines[3](quantity = "Length", unit = "m") = world.labelStart "Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_x[1](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_x[2](unit = "1") = 0.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_x[3](unit = "1") = 1.0 "Vector in direction of x-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_y[1](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_y[2](unit = "1") = 1.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.n_y[3](unit = "1") = 0.0 "Vector in direction of y-axis of 'lines' frame, resolved in object frame";
// input Real world.z_label.lines[1,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[1,1,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[1,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[1,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[2,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[2,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[2,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[2,2,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[3,1,1](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[3,1,2](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[3,2,1](quantity = "Length", unit = "m") = world.scaledLabel "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.lines[3,2,2](quantity = "Length", unit = "m") = 0.0 "List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}";
// input Real world.z_label.diameter(quantity = "Length", unit = "m", min = 0.0) = world.axisDiameter "Diameter of the cylinders defined by lines";
// input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] "Color of cylinders";
// input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] "Color of cylinders";
// input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] "Color of cylinders";
// input Real world.z_label.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected parameter Integer world.z_label.n = 3 "Number of cylinders";
// protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][1];
// protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][2];
// protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][3];
// protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][1];
// protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][2];
// protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][3];
// protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][1];
// protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][2];
// protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][3];
// protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][1];
// protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][2];
// protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][3];
// protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][1];
// protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][2];
// protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][3];
// protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][1];
// protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][2];
// protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][3];
// protected Real world.z_label.r_abs[1](quantity = "Length", unit = "m") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[1];
// protected Real world.z_label.r_abs[2](quantity = "Length", unit = "m") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[2];
// protected Real world.z_label.r_abs[3](quantity = "Length", unit = "m") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[3];
// parameter String world.z_label.cylinders[1].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.z_label.cylinders[1].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[1].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[1].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[1].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[1].r[1](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[1].r[2](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[1].r[3](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[1].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[1].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[1].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[1].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[1].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[1].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[1].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[1].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[1].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[1].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) "Length of visual object";
// input Real world.z_label.cylinders[1].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
// input Real world.z_label.cylinders[1].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
// input Real world.z_label.cylinders[1].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) "Color of shape";
// input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) "Color of shape";
// input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) "Color of shape";
// input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.z_label.cylinders[1].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
// protected Real world.z_label.cylinders[1].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
// protected Real world.z_label.cylinders[1].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
// protected Real world.z_label.cylinders[1].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
// protected Real world.z_label.cylinders[1].n_z_aux[1](unit = "1") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
// protected Real world.z_label.cylinders[1].n_z_aux[2](unit = "1") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
// protected Real world.z_label.cylinders[1].n_z_aux[3](unit = "1") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
// protected Real world.z_label.cylinders[1].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
// protected Real world.z_label.cylinders[1].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
// protected Real world.z_label.cylinders[1].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
// protected output Real world.z_label.cylinders[1].Form;
// output Real world.z_label.cylinders[1].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[1].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[1].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[1].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.z_label.cylinders[1].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[1].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[1].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[1].Material;
// protected output Real world.z_label.cylinders[1].Extra;
// parameter String world.z_label.cylinders[2].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.z_label.cylinders[2].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[2].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[2].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[2].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[2].r[1](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[2].r[2](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[2].r[3](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[2].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[2].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[2].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[2].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[2].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[2].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[2].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[2].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[2].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[2].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) "Length of visual object";
// input Real world.z_label.cylinders[2].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
// input Real world.z_label.cylinders[2].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
// input Real world.z_label.cylinders[2].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) "Color of shape";
// input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) "Color of shape";
// input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) "Color of shape";
// input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.z_label.cylinders[2].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
// protected Real world.z_label.cylinders[2].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
// protected Real world.z_label.cylinders[2].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
// protected Real world.z_label.cylinders[2].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
// protected Real world.z_label.cylinders[2].n_z_aux[1](unit = "1") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
// protected Real world.z_label.cylinders[2].n_z_aux[2](unit = "1") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
// protected Real world.z_label.cylinders[2].n_z_aux[3](unit = "1") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
// protected Real world.z_label.cylinders[2].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
// protected Real world.z_label.cylinders[2].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
// protected Real world.z_label.cylinders[2].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
// protected output Real world.z_label.cylinders[2].Form;
// output Real world.z_label.cylinders[2].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[2].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[2].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[2].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.z_label.cylinders[2].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[2].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[2].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[2].Material;
// protected output Real world.z_label.cylinders[2].Extra;
// parameter String world.z_label.cylinders[3].shapeType = "cylinder" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.z_label.cylinders[3].R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real world.z_label.cylinders[3].R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[3].R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[3].R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.z_label.cylinders[3].r[1](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[3].r[2](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[3].r[3](quantity = "Length", unit = "m") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.z_label.cylinders[3].r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[3].r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[3].r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.z_label.cylinders[3].lengthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[3].lengthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[3].lengthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] "Vector in length direction, resolved in object frame";
// input Real world.z_label.cylinders[3].widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[3].widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[3].widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.z_label.cylinders[3].length(quantity = "Length", unit = "m") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) "Length of visual object";
// input Real world.z_label.cylinders[3].width(quantity = "Length", unit = "m") = world.z_label.diameter "Width of visual object";
// input Real world.z_label.cylinders[3].height(quantity = "Length", unit = "m") = world.z_label.diameter "Height of visual object";
// input Real world.z_label.cylinders[3].extra = 0.0 "Additional size data for some of the shape types";
// input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) "Color of shape";
// input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) "Color of shape";
// input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) "Color of shape";
// input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.z_label.cylinders[3].abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
// protected Real world.z_label.cylinders[3].e_x[1](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
// protected Real world.z_label.cylinders[3].e_x[2](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
// protected Real world.z_label.cylinders[3].e_x[3](unit = "1") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
// protected Real world.z_label.cylinders[3].n_z_aux[1](unit = "1") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
// protected Real world.z_label.cylinders[3].n_z_aux[2](unit = "1") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
// protected Real world.z_label.cylinders[3].n_z_aux[3](unit = "1") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
// protected Real world.z_label.cylinders[3].e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
// protected Real world.z_label.cylinders[3].e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
// protected Real world.z_label.cylinders[3].e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
// protected output Real world.z_label.cylinders[3].Form;
// output Real world.z_label.cylinders[3].rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.z_label.cylinders[3].rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[3].rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.z_label.cylinders[3].rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.z_label.cylinders[3].size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[3].size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[3].size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.z_label.cylinders[3].Material;
// protected output Real world.z_label.cylinders[3].Extra;
// protected parameter Real world.gravityHeadLength(quantity = "Length", unit = "m") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
// protected parameter Real world.gravityHeadWidth(quantity = "Length", unit = "m") = 3.0 * world.gravityArrowDiameter;
// protected parameter Real world.gravityLineLength(quantity = "Length", unit = "m") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
// protected parameter Integer world.ndim_pointGravity = if world.enableAnimation AND world.animateGravity AND world.gravityType == 2 then 1 else 0;
// parameter String world.gravitySphere.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real world.gravitySphere.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real world.gravitySphere.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.gravitySphere.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.gravitySphere.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real world.gravitySphere.r[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.gravitySphere.r[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.gravitySphere.r[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real world.gravitySphere.r_shape[1](quantity = "Length", unit = "m") = (-world.gravitySphereDiameter) / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.gravitySphere.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.gravitySphere.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real world.gravitySphere.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real world.gravitySphere.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.gravitySphere.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real world.gravitySphere.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.gravitySphere.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real world.gravitySphere.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real world.gravitySphere.length(quantity = "Length", unit = "m") = world.gravitySphereDiameter "Length of visual object";
// input Real world.gravitySphere.width(quantity = "Length", unit = "m") = world.gravitySphereDiameter "Width of visual object";
// input Real world.gravitySphere.height(quantity = "Length", unit = "m") = world.gravitySphereDiameter "Height of visual object";
// input Real world.gravitySphere.extra = 0.0 "Additional size data for some of the shape types";
// input Real world.gravitySphere.color[1] = Real(world.gravitySphereColor[1]) "Color of shape";
// input Real world.gravitySphere.color[2] = Real(world.gravitySphereColor[2]) "Color of shape";
// input Real world.gravitySphere.color[3] = Real(world.gravitySphereColor[3]) "Color of shape";
// input Real world.gravitySphere.specularCoefficient = 0.0 "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real world.gravitySphere.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({world.gravitySphere.lengthDirection[1],world.gravitySphere.lengthDirection[2],world.gravitySphere.lengthDirection[3]});
// protected Real world.gravitySphere.e_x[1](unit = "1") = if noEvent(world.gravitySphere.abs_n_x < 1e-10) then 1.0 else world.gravitySphere.lengthDirection[1] / world.gravitySphere.abs_n_x;
// protected Real world.gravitySphere.e_x[2](unit = "1") = if noEvent(world.gravitySphere.abs_n_x < 1e-10) then 0.0 else world.gravitySphere.lengthDirection[2] / world.gravitySphere.abs_n_x;
// protected Real world.gravitySphere.e_x[3](unit = "1") = if noEvent(world.gravitySphere.abs_n_x < 1e-10) then 0.0 else world.gravitySphere.lengthDirection[3] / world.gravitySphere.abs_n_x;
// protected Real world.gravitySphere.n_z_aux[1](unit = "1") = world.gravitySphere.e_x[2] * world.gravitySphere.widthDirection[3] - world.gravitySphere.e_x[3] * world.gravitySphere.widthDirection[2];
// protected Real world.gravitySphere.n_z_aux[2](unit = "1") = world.gravitySphere.e_x[3] * world.gravitySphere.widthDirection[1] - world.gravitySphere.e_x[1] * world.gravitySphere.widthDirection[3];
// protected Real world.gravitySphere.n_z_aux[3](unit = "1") = world.gravitySphere.e_x[1] * world.gravitySphere.widthDirection[2] - world.gravitySphere.e_x[2] * world.gravitySphere.widthDirection[1];
// protected Real world.gravitySphere.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]},if noEvent(world.gravitySphere.n_z_aux[1] ^ 2.0 + (world.gravitySphere.n_z_aux[2] ^ 2.0 + world.gravitySphere.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravitySphere.widthDirection[1],world.gravitySphere.widthDirection[2],world.gravitySphere.widthDirection[3]} else if noEvent(abs(world.gravitySphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]})[1];
// protected Real world.gravitySphere.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]},if noEvent(world.gravitySphere.n_z_aux[1] ^ 2.0 + (world.gravitySphere.n_z_aux[2] ^ 2.0 + world.gravitySphere.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravitySphere.widthDirection[1],world.gravitySphere.widthDirection[2],world.gravitySphere.widthDirection[3]} else if noEvent(abs(world.gravitySphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]})[2];
// protected Real world.gravitySphere.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]},if noEvent(world.gravitySphere.n_z_aux[1] ^ 2.0 + (world.gravitySphere.n_z_aux[2] ^ 2.0 + world.gravitySphere.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravitySphere.widthDirection[1],world.gravitySphere.widthDirection[2],world.gravitySphere.widthDirection[3]} else if noEvent(abs(world.gravitySphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravitySphere.e_x[1],world.gravitySphere.e_x[2],world.gravitySphere.e_x[3]})[3];
// protected output Real world.gravitySphere.Form;
// output Real world.gravitySphere.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real world.gravitySphere.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.gravitySphere.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real world.gravitySphere.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real world.gravitySphere.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.gravitySphere.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.gravitySphere.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real world.gravitySphere.Material;
// protected output Real world.gravitySphere.Extra;
// Real body1.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body1.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body1.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body1.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real body1.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body1.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body1.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body1.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body1.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body1.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body1.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body1.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body1.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean body1.animation = true "= true, if animation shall be enabled (show sphere)";
// parameter Real body1.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "Mass of mass point";
// input Real body1.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of sphere";
// input Integer body1.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
// input Integer body1.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
// input Integer body1.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
// input Real body1.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// parameter enumeration(never, avoid, default, prefer, always) body1.stateSelect = StateSelect.avoid "Priority to use frame_a.r_0, v_0 (= der(frame_a.r_0)) as states";
// Real body1.r_0[1](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body1.r_0[2](quantity = "Length", unit = "m", start = 0.6, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body1.r_0[3](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body1.v_0[1](quantity = "Velocity", unit = "m/s", start = 1.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body1.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body1.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body1.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body1.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body1.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// parameter String body1.sphere.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real body1.sphere.R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real body1.sphere.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body1.sphere.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body1.sphere.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body1.sphere.r[1](quantity = "Length", unit = "m") = body1.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body1.sphere.r[2](quantity = "Length", unit = "m") = body1.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body1.sphere.r[3](quantity = "Length", unit = "m") = body1.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body1.sphere.r_shape[1](quantity = "Length", unit = "m") = (-body1.sphereDiameter) / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body1.sphere.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body1.sphere.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body1.sphere.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real body1.sphere.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body1.sphere.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body1.sphere.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body1.sphere.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real body1.sphere.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body1.sphere.length(quantity = "Length", unit = "m") = body1.sphereDiameter "Length of visual object";
// input Real body1.sphere.width(quantity = "Length", unit = "m") = body1.sphereDiameter "Width of visual object";
// input Real body1.sphere.height(quantity = "Length", unit = "m") = body1.sphereDiameter "Height of visual object";
// input Real body1.sphere.extra = 0.0 "Additional size data for some of the shape types";
// input Real body1.sphere.color[1] = Real(body1.sphereColor[1]) "Color of shape";
// input Real body1.sphere.color[2] = Real(body1.sphereColor[2]) "Color of shape";
// input Real body1.sphere.color[3] = Real(body1.sphereColor[3]) "Color of shape";
// input Real body1.sphere.specularCoefficient = body1.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real body1.sphere.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({body1.sphere.lengthDirection[1],body1.sphere.lengthDirection[2],body1.sphere.lengthDirection[3]});
// protected Real body1.sphere.e_x[1](unit = "1") = if noEvent(body1.sphere.abs_n_x < 1e-10) then 1.0 else body1.sphere.lengthDirection[1] / body1.sphere.abs_n_x;
// protected Real body1.sphere.e_x[2](unit = "1") = if noEvent(body1.sphere.abs_n_x < 1e-10) then 0.0 else body1.sphere.lengthDirection[2] / body1.sphere.abs_n_x;
// protected Real body1.sphere.e_x[3](unit = "1") = if noEvent(body1.sphere.abs_n_x < 1e-10) then 0.0 else body1.sphere.lengthDirection[3] / body1.sphere.abs_n_x;
// protected Real body1.sphere.n_z_aux[1](unit = "1") = body1.sphere.e_x[2] * body1.sphere.widthDirection[3] - body1.sphere.e_x[3] * body1.sphere.widthDirection[2];
// protected Real body1.sphere.n_z_aux[2](unit = "1") = body1.sphere.e_x[3] * body1.sphere.widthDirection[1] - body1.sphere.e_x[1] * body1.sphere.widthDirection[3];
// protected Real body1.sphere.n_z_aux[3](unit = "1") = body1.sphere.e_x[1] * body1.sphere.widthDirection[2] - body1.sphere.e_x[2] * body1.sphere.widthDirection[1];
// protected Real body1.sphere.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]},if noEvent(body1.sphere.n_z_aux[1] ^ 2.0 + (body1.sphere.n_z_aux[2] ^ 2.0 + body1.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body1.sphere.widthDirection[1],body1.sphere.widthDirection[2],body1.sphere.widthDirection[3]} else if noEvent(abs(body1.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]})[1];
// protected Real body1.sphere.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]},if noEvent(body1.sphere.n_z_aux[1] ^ 2.0 + (body1.sphere.n_z_aux[2] ^ 2.0 + body1.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body1.sphere.widthDirection[1],body1.sphere.widthDirection[2],body1.sphere.widthDirection[3]} else if noEvent(abs(body1.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]})[2];
// protected Real body1.sphere.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]},if noEvent(body1.sphere.n_z_aux[1] ^ 2.0 + (body1.sphere.n_z_aux[2] ^ 2.0 + body1.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body1.sphere.widthDirection[1],body1.sphere.widthDirection[2],body1.sphere.widthDirection[3]} else if noEvent(abs(body1.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body1.sphere.e_x[1],body1.sphere.e_x[2],body1.sphere.e_x[3]})[3];
// protected output Real body1.sphere.Form;
// output Real body1.sphere.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body1.sphere.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body1.sphere.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body1.sphere.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real body1.sphere.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body1.sphere.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body1.sphere.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body1.sphere.Material;
// protected output Real body1.sphere.Extra;
// Real body2.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body2.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body2.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body2.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real body2.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body2.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body2.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body2.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body2.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body2.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body2.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body2.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body2.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean body2.animation = true "= true, if animation shall be enabled (show sphere)";
// parameter Real body2.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "Mass of mass point";
// input Real body2.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of sphere";
// input Integer body2.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
// input Integer body2.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
// input Integer body2.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
// input Real body2.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// parameter enumeration(never, avoid, default, prefer, always) body2.stateSelect = StateSelect.avoid "Priority to use frame_a.r_0, v_0 (= der(frame_a.r_0)) as states";
// Real body2.r_0[1](quantity = "Length", unit = "m", start = 0.6, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body2.r_0[2](quantity = "Length", unit = "m", start = 0.6, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body2.r_0[3](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body2.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.6, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body2.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body2.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body2.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body2.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body2.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// parameter String body2.sphere.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real body2.sphere.R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real body2.sphere.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body2.sphere.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body2.sphere.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body2.sphere.r[1](quantity = "Length", unit = "m") = body2.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body2.sphere.r[2](quantity = "Length", unit = "m") = body2.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body2.sphere.r[3](quantity = "Length", unit = "m") = body2.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body2.sphere.r_shape[1](quantity = "Length", unit = "m") = (-body2.sphereDiameter) / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body2.sphere.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body2.sphere.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body2.sphere.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real body2.sphere.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body2.sphere.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body2.sphere.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body2.sphere.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real body2.sphere.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body2.sphere.length(quantity = "Length", unit = "m") = body2.sphereDiameter "Length of visual object";
// input Real body2.sphere.width(quantity = "Length", unit = "m") = body2.sphereDiameter "Width of visual object";
// input Real body2.sphere.height(quantity = "Length", unit = "m") = body2.sphereDiameter "Height of visual object";
// input Real body2.sphere.extra = 0.0 "Additional size data for some of the shape types";
// input Real body2.sphere.color[1] = Real(body2.sphereColor[1]) "Color of shape";
// input Real body2.sphere.color[2] = Real(body2.sphereColor[2]) "Color of shape";
// input Real body2.sphere.color[3] = Real(body2.sphereColor[3]) "Color of shape";
// input Real body2.sphere.specularCoefficient = body2.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real body2.sphere.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({body2.sphere.lengthDirection[1],body2.sphere.lengthDirection[2],body2.sphere.lengthDirection[3]});
// protected Real body2.sphere.e_x[1](unit = "1") = if noEvent(body2.sphere.abs_n_x < 1e-10) then 1.0 else body2.sphere.lengthDirection[1] / body2.sphere.abs_n_x;
// protected Real body2.sphere.e_x[2](unit = "1") = if noEvent(body2.sphere.abs_n_x < 1e-10) then 0.0 else body2.sphere.lengthDirection[2] / body2.sphere.abs_n_x;
// protected Real body2.sphere.e_x[3](unit = "1") = if noEvent(body2.sphere.abs_n_x < 1e-10) then 0.0 else body2.sphere.lengthDirection[3] / body2.sphere.abs_n_x;
// protected Real body2.sphere.n_z_aux[1](unit = "1") = body2.sphere.e_x[2] * body2.sphere.widthDirection[3] - body2.sphere.e_x[3] * body2.sphere.widthDirection[2];
// protected Real body2.sphere.n_z_aux[2](unit = "1") = body2.sphere.e_x[3] * body2.sphere.widthDirection[1] - body2.sphere.e_x[1] * body2.sphere.widthDirection[3];
// protected Real body2.sphere.n_z_aux[3](unit = "1") = body2.sphere.e_x[1] * body2.sphere.widthDirection[2] - body2.sphere.e_x[2] * body2.sphere.widthDirection[1];
// protected Real body2.sphere.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]},if noEvent(body2.sphere.n_z_aux[1] ^ 2.0 + (body2.sphere.n_z_aux[2] ^ 2.0 + body2.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body2.sphere.widthDirection[1],body2.sphere.widthDirection[2],body2.sphere.widthDirection[3]} else if noEvent(abs(body2.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]})[1];
// protected Real body2.sphere.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]},if noEvent(body2.sphere.n_z_aux[1] ^ 2.0 + (body2.sphere.n_z_aux[2] ^ 2.0 + body2.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body2.sphere.widthDirection[1],body2.sphere.widthDirection[2],body2.sphere.widthDirection[3]} else if noEvent(abs(body2.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]})[2];
// protected Real body2.sphere.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]},if noEvent(body2.sphere.n_z_aux[1] ^ 2.0 + (body2.sphere.n_z_aux[2] ^ 2.0 + body2.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body2.sphere.widthDirection[1],body2.sphere.widthDirection[2],body2.sphere.widthDirection[3]} else if noEvent(abs(body2.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body2.sphere.e_x[1],body2.sphere.e_x[2],body2.sphere.e_x[3]})[3];
// protected output Real body2.sphere.Form;
// output Real body2.sphere.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body2.sphere.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body2.sphere.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body2.sphere.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real body2.sphere.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body2.sphere.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body2.sphere.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body2.sphere.Material;
// protected output Real body2.sphere.Extra;
// Real body3.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body3.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body3.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body3.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real body3.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body3.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body3.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body3.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body3.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body3.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body3.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body3.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body3.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean body3.animation = true "= true, if animation shall be enabled (show sphere)";
// parameter Real body3.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "Mass of mass point";
// input Real body3.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of sphere";
// input Integer body3.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
// input Integer body3.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
// input Integer body3.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
// input Real body3.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// parameter enumeration(never, avoid, default, prefer, always) body3.stateSelect = StateSelect.avoid "Priority to use frame_a.r_0, v_0 (= der(frame_a.r_0)) as states";
// Real body3.r_0[1](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body3.r_0[2](quantity = "Length", unit = "m", start = 0.8, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body3.r_0[3](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body3.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.6, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body3.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body3.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body3.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body3.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body3.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// parameter String body3.sphere.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real body3.sphere.R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real body3.sphere.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body3.sphere.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body3.sphere.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body3.sphere.r[1](quantity = "Length", unit = "m") = body3.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body3.sphere.r[2](quantity = "Length", unit = "m") = body3.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body3.sphere.r[3](quantity = "Length", unit = "m") = body3.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body3.sphere.r_shape[1](quantity = "Length", unit = "m") = (-body3.sphereDiameter) / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body3.sphere.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body3.sphere.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body3.sphere.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real body3.sphere.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body3.sphere.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body3.sphere.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body3.sphere.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real body3.sphere.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body3.sphere.length(quantity = "Length", unit = "m") = body3.sphereDiameter "Length of visual object";
// input Real body3.sphere.width(quantity = "Length", unit = "m") = body3.sphereDiameter "Width of visual object";
// input Real body3.sphere.height(quantity = "Length", unit = "m") = body3.sphereDiameter "Height of visual object";
// input Real body3.sphere.extra = 0.0 "Additional size data for some of the shape types";
// input Real body3.sphere.color[1] = Real(body3.sphereColor[1]) "Color of shape";
// input Real body3.sphere.color[2] = Real(body3.sphereColor[2]) "Color of shape";
// input Real body3.sphere.color[3] = Real(body3.sphereColor[3]) "Color of shape";
// input Real body3.sphere.specularCoefficient = body3.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real body3.sphere.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({body3.sphere.lengthDirection[1],body3.sphere.lengthDirection[2],body3.sphere.lengthDirection[3]});
// protected Real body3.sphere.e_x[1](unit = "1") = if noEvent(body3.sphere.abs_n_x < 1e-10) then 1.0 else body3.sphere.lengthDirection[1] / body3.sphere.abs_n_x;
// protected Real body3.sphere.e_x[2](unit = "1") = if noEvent(body3.sphere.abs_n_x < 1e-10) then 0.0 else body3.sphere.lengthDirection[2] / body3.sphere.abs_n_x;
// protected Real body3.sphere.e_x[3](unit = "1") = if noEvent(body3.sphere.abs_n_x < 1e-10) then 0.0 else body3.sphere.lengthDirection[3] / body3.sphere.abs_n_x;
// protected Real body3.sphere.n_z_aux[1](unit = "1") = body3.sphere.e_x[2] * body3.sphere.widthDirection[3] - body3.sphere.e_x[3] * body3.sphere.widthDirection[2];
// protected Real body3.sphere.n_z_aux[2](unit = "1") = body3.sphere.e_x[3] * body3.sphere.widthDirection[1] - body3.sphere.e_x[1] * body3.sphere.widthDirection[3];
// protected Real body3.sphere.n_z_aux[3](unit = "1") = body3.sphere.e_x[1] * body3.sphere.widthDirection[2] - body3.sphere.e_x[2] * body3.sphere.widthDirection[1];
// protected Real body3.sphere.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]},if noEvent(body3.sphere.n_z_aux[1] ^ 2.0 + (body3.sphere.n_z_aux[2] ^ 2.0 + body3.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body3.sphere.widthDirection[1],body3.sphere.widthDirection[2],body3.sphere.widthDirection[3]} else if noEvent(abs(body3.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]})[1];
// protected Real body3.sphere.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]},if noEvent(body3.sphere.n_z_aux[1] ^ 2.0 + (body3.sphere.n_z_aux[2] ^ 2.0 + body3.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body3.sphere.widthDirection[1],body3.sphere.widthDirection[2],body3.sphere.widthDirection[3]} else if noEvent(abs(body3.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]})[2];
// protected Real body3.sphere.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]},if noEvent(body3.sphere.n_z_aux[1] ^ 2.0 + (body3.sphere.n_z_aux[2] ^ 2.0 + body3.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body3.sphere.widthDirection[1],body3.sphere.widthDirection[2],body3.sphere.widthDirection[3]} else if noEvent(abs(body3.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body3.sphere.e_x[1],body3.sphere.e_x[2],body3.sphere.e_x[3]})[3];
// protected output Real body3.sphere.Form;
// output Real body3.sphere.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body3.sphere.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body3.sphere.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body3.sphere.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real body3.sphere.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body3.sphere.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body3.sphere.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body3.sphere.Material;
// protected output Real body3.sphere.Extra;
// Real body4.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body4.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body4.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real body4.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real body4.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body4.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body4.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real body4.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body4.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body4.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real body4.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body4.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real body4.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean body4.animation = true "= true, if animation shall be enabled (show sphere)";
// parameter Real body4.m(quantity = "Mass", unit = "kg", min = 0.0) = 1.0 "Mass of mass point";
// input Real body4.sphereDiameter(quantity = "Length", unit = "m", min = 0.0) = 0.1 "Diameter of sphere";
// input Integer body4.sphereColor[1](min = 0, max = 255) = 0 "Color of sphere";
// input Integer body4.sphereColor[2](min = 0, max = 255) = 128 "Color of sphere";
// input Integer body4.sphereColor[3](min = 0, max = 255) = 255 "Color of sphere";
// input Real body4.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// parameter enumeration(never, avoid, default, prefer, always) body4.stateSelect = StateSelect.avoid "Priority to use frame_a.r_0, v_0 (= der(frame_a.r_0)) as states";
// Real body4.r_0[1](quantity = "Length", unit = "m", start = 0.3, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body4.r_0[2](quantity = "Length", unit = "m", start = 0.8, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body4.r_0[3](quantity = "Length", unit = "m", start = 0.0, fixed = true) "Position vector from origin of world frame to origin of frame_a, resolved in world frame";
// Real body4.v_0[1](quantity = "Velocity", unit = "m/s", start = 0.6, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body4.v_0[2](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body4.v_0[3](quantity = "Velocity", unit = "m/s", start = 0.0, fixed = true) "Absolute velocity of frame_a, resolved in world frame (= der(r_0))";
// Real body4.a_0[1](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body4.a_0[2](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// Real body4.a_0[3](quantity = "Acceleration", unit = "m/s2", start = 0.0) "Absolute acceleration of frame_a resolved in world frame (= der(v_0))";
// parameter String body4.sphere.shapeType = "sphere" "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real body4.sphere.R.T[1,1] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[1,2] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[1,3] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[2,1] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[2,2] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[2,3] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[3,1] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[3,2] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.T[3,3] "Transformation matrix from world frame to local frame";
// input Real body4.sphere.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body4.sphere.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body4.sphere.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// input Real body4.sphere.r[1](quantity = "Length", unit = "m") = body4.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body4.sphere.r[2](quantity = "Length", unit = "m") = body4.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body4.sphere.r[3](quantity = "Length", unit = "m") = body4.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real body4.sphere.r_shape[1](quantity = "Length", unit = "m") = (-body4.sphereDiameter) / 2.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body4.sphere.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body4.sphere.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real body4.sphere.lengthDirection[1](unit = "1") = 1.0 "Vector in length direction, resolved in object frame";
// input Real body4.sphere.lengthDirection[2](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body4.sphere.lengthDirection[3](unit = "1") = 0.0 "Vector in length direction, resolved in object frame";
// input Real body4.sphere.widthDirection[1](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body4.sphere.widthDirection[2](unit = "1") = 1.0 "Vector in width direction, resolved in object frame";
// input Real body4.sphere.widthDirection[3](unit = "1") = 0.0 "Vector in width direction, resolved in object frame";
// input Real body4.sphere.length(quantity = "Length", unit = "m") = body4.sphereDiameter "Length of visual object";
// input Real body4.sphere.width(quantity = "Length", unit = "m") = body4.sphereDiameter "Width of visual object";
// input Real body4.sphere.height(quantity = "Length", unit = "m") = body4.sphereDiameter "Height of visual object";
// input Real body4.sphere.extra = 0.0 "Additional size data for some of the shape types";
// input Real body4.sphere.color[1] = Real(body4.sphereColor[1]) "Color of shape";
// input Real body4.sphere.color[2] = Real(body4.sphereColor[2]) "Color of shape";
// input Real body4.sphere.color[3] = Real(body4.sphereColor[3]) "Color of shape";
// input Real body4.sphere.specularCoefficient = body4.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real body4.sphere.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({body4.sphere.lengthDirection[1],body4.sphere.lengthDirection[2],body4.sphere.lengthDirection[3]});
// protected Real body4.sphere.e_x[1](unit = "1") = if noEvent(body4.sphere.abs_n_x < 1e-10) then 1.0 else body4.sphere.lengthDirection[1] / body4.sphere.abs_n_x;
// protected Real body4.sphere.e_x[2](unit = "1") = if noEvent(body4.sphere.abs_n_x < 1e-10) then 0.0 else body4.sphere.lengthDirection[2] / body4.sphere.abs_n_x;
// protected Real body4.sphere.e_x[3](unit = "1") = if noEvent(body4.sphere.abs_n_x < 1e-10) then 0.0 else body4.sphere.lengthDirection[3] / body4.sphere.abs_n_x;
// protected Real body4.sphere.n_z_aux[1](unit = "1") = body4.sphere.e_x[2] * body4.sphere.widthDirection[3] - body4.sphere.e_x[3] * body4.sphere.widthDirection[2];
// protected Real body4.sphere.n_z_aux[2](unit = "1") = body4.sphere.e_x[3] * body4.sphere.widthDirection[1] - body4.sphere.e_x[1] * body4.sphere.widthDirection[3];
// protected Real body4.sphere.n_z_aux[3](unit = "1") = body4.sphere.e_x[1] * body4.sphere.widthDirection[2] - body4.sphere.e_x[2] * body4.sphere.widthDirection[1];
// protected Real body4.sphere.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]},if noEvent(body4.sphere.n_z_aux[1] ^ 2.0 + (body4.sphere.n_z_aux[2] ^ 2.0 + body4.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body4.sphere.widthDirection[1],body4.sphere.widthDirection[2],body4.sphere.widthDirection[3]} else if noEvent(abs(body4.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]})[1];
// protected Real body4.sphere.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]},if noEvent(body4.sphere.n_z_aux[1] ^ 2.0 + (body4.sphere.n_z_aux[2] ^ 2.0 + body4.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body4.sphere.widthDirection[1],body4.sphere.widthDirection[2],body4.sphere.widthDirection[3]} else if noEvent(abs(body4.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]})[2];
// protected Real body4.sphere.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]},if noEvent(body4.sphere.n_z_aux[1] ^ 2.0 + (body4.sphere.n_z_aux[2] ^ 2.0 + body4.sphere.n_z_aux[3] ^ 2.0) > 1e-06) then {body4.sphere.widthDirection[1],body4.sphere.widthDirection[2],body4.sphere.widthDirection[3]} else if noEvent(abs(body4.sphere.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body4.sphere.e_x[1],body4.sphere.e_x[2],body4.sphere.e_x[3]})[3];
// protected output Real body4.sphere.Form;
// output Real body4.sphere.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real body4.sphere.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body4.sphere.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real body4.sphere.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real body4.sphere.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body4.sphere.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body4.sphere.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real body4.sphere.Material;
// protected output Real body4.sphere.Extra;
// Real spring.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real spring.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// parameter Boolean spring.animation = true "= true, if animation shall be enabled";
// parameter Boolean spring.showMass = false "= true, if point mass shall be visualized as sphere if animation=true and m>0";
// parameter Real spring.c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0) = 10.0 "Spring constant";
// parameter Real spring.s_unstretched(quantity = "Length", unit = "m") = 0.0 "Unstretched spring length";
// parameter Real spring.m(quantity = "Mass", unit = "kg", min = 0.0) = 0.0 "Spring mass located on the connetion line between the origin of frame_a and the origin of frame_b";
// parameter Real spring.lengthFraction(min = 0.0, max = 1.0) = 0.5 "Location of spring mass with respect to frame_a as a fraction of the distance from frame_a to frame_b (=0: at frame_a; =1: at frame_b)";
// input Real spring.width(quantity = "Length", unit = "m", min = 0.0) = world.defaultForceWidth " Width of spring";
// input Real spring.coilWidth(quantity = "Length", unit = "m", min = 0.0) = spring.width / 10.0 " Width of spring coil";
// parameter Integer spring.numberOfWindings = 5 " Number of spring windings";
// input Integer spring.color[1](min = 0, max = 255) = 0 " Color of spring";
// input Integer spring.color[2](min = 0, max = 255) = 0 " Color of spring";
// input Integer spring.color[3](min = 0, max = 255) = 255 " Color of spring";
// input Real spring.specularCoefficient = world.defaultSpecularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// input Real spring.massDiameter(quantity = "Length", unit = "m", min = 0.0) = max(0.0,0.9 * spring.width - 1.8 * spring.coilWidth) " Diameter of mass point sphere";
// input Integer spring.massColor[1](min = 0, max = 255) = 0 " Color of mass point";
// input Integer spring.massColor[2](min = 0, max = 255) = 128 " Color of mass point";
// input Integer spring.massColor[3](min = 0, max = 255) = 255 " Color of mass point";
// Real spring.lineForce.frame_a.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_a.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_a.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_a.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_a.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_a.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_a.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_a.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_a.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_a.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_a.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.frame_a.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.frame_a.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.frame_b.r_0[1](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_b.r_0[2](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_b.r_0[3](quantity = "Length", unit = "m") "Position vector from world frame to the connector frame origin, resolved in world frame";
// Real spring.lineForce.frame_b.R.T[1,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[1,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[1,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[2,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[2,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[2,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[3,1] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[3,2] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.T[3,3] "Transformation matrix from world frame to local frame";
// Real spring.lineForce.frame_b.R.w[1](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_b.R.w[2](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_b.R.w[3](quantity = "AngularVelocity", unit = "rad/s") "Absolute angular velocity of local frame, resolved in local frame";
// Real spring.lineForce.frame_b.f[1](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_b.f[2](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_b.f[3](quantity = "Force", unit = "N") "Cut-force resolved in connector frame";
// Real spring.lineForce.frame_b.t[1](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.frame_b.t[2](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.frame_b.t[3](quantity = "Torque", unit = "N.m") "Cut-torque resolved in connector frame";
// Real spring.lineForce.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real spring.lineForce.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real spring.lineForce.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real spring.lineForce.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
// parameter Boolean spring.lineForce.animateLine = spring.animation "= true, if a line shape between frame_a and frame_b shall be visualized";
// parameter Boolean spring.lineForce.animateMass = spring.showMass "= true, if point mass shall be visualized as sphere provided m > 0";
// parameter Real spring.lineForce.m(quantity = "Mass", unit = "kg", min = 0.0) = spring.m "Mass of point mass on the connetion line between the origin of frame_a and the origin of frame_b";
// parameter Real spring.lineForce.lengthFraction(unit = "1", min = 0.0, max = 1.0) = spring.lengthFraction "Location of point mass with respect to frame_a as a fraction of the distance from frame_a to frame_b";
// input Real spring.lineForce.specularCoefficient = spring.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// parameter String spring.lineForce.lineShapeType = "spring" " Type of shape visualizing the line from frame_a to frame_b";
// input Real spring.lineForce.lineShapeWidth(quantity = "Length", unit = "m") = spring.width " Width of shape";
// input Real spring.lineForce.lineShapeHeight(quantity = "Length", unit = "m") = 2.0 * spring.coilWidth " Height of shape";
// parameter Real spring.lineForce.lineShapeExtra = Real(spring.numberOfWindings) " Extra parameter for shape";
// input Integer spring.lineForce.lineShapeColor[1](min = 0, max = 255) = spring.color[1] " Color of line shape";
// input Integer spring.lineForce.lineShapeColor[2](min = 0, max = 255) = spring.color[2] " Color of line shape";
// input Integer spring.lineForce.lineShapeColor[3](min = 0, max = 255) = spring.color[3] " Color of line shape";
// input Real spring.lineForce.massDiameter = spring.massDiameter " Diameter of point mass sphere";
// input Integer spring.lineForce.massColor[1](min = 0, max = 255) = spring.massColor[1] " Color of point mass";
// input Integer spring.lineForce.massColor[2](min = 0, max = 255) = spring.massColor[2] " Color of point mass";
// input Integer spring.lineForce.massColor[3](min = 0, max = 255) = spring.massColor[3] " Color of point mass";
// parameter Real spring.lineForce.s_small(quantity = "Length", unit = "m") = 1e-10 " Prevent zero-division if distance between frame_a and frame_b is zero";
// Real spring.lineForce.length(quantity = "Length", unit = "m", min = 0.0) "Distance between the origin of frame_a and the origin of frame_b";
// Real spring.lineForce.r_rel_0[1](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in world frame";
// Real spring.lineForce.r_rel_0[2](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in world frame";
// Real spring.lineForce.r_rel_0[3](quantity = "Length", unit = "m") "Position vector from frame_a to frame_b resolved in world frame";
// Real spring.lineForce.e_rel_0[1](unit = "1") "Unit vector in direction from frame_a to frame_b, resolved in world frame";
// Real spring.lineForce.e_rel_0[2](unit = "1") "Unit vector in direction from frame_a to frame_b, resolved in world frame";
// Real spring.lineForce.e_rel_0[3](unit = "1") "Unit vector in direction from frame_a to frame_b, resolved in world frame";
// protected Real spring.lineForce.fa(quantity = "Force", unit = "N") "Force from flange_a";
// protected Real spring.lineForce.fb(quantity = "Force", unit = "N") "Force from flange_b";
// protected Real spring.lineForce.r_CM_0[1](quantity = "Length", unit = "m", StateSelect = StateSelect.avoid) "Position vector from world frame to point mass, resolved in world frame";
// protected Real spring.lineForce.r_CM_0[2](quantity = "Length", unit = "m", StateSelect = StateSelect.avoid) "Position vector from world frame to point mass, resolved in world frame";
// protected Real spring.lineForce.r_CM_0[3](quantity = "Length", unit = "m", StateSelect = StateSelect.avoid) "Position vector from world frame to point mass, resolved in world frame";
// protected Real spring.lineForce.v_CM_0[1](quantity = "Velocity", unit = "m/s", StateSelect = StateSelect.avoid) "First derivative of r_CM_0";
// protected Real spring.lineForce.v_CM_0[2](quantity = "Velocity", unit = "m/s", StateSelect = StateSelect.avoid) "First derivative of r_CM_0";
// protected Real spring.lineForce.v_CM_0[3](quantity = "Velocity", unit = "m/s", StateSelect = StateSelect.avoid) "First derivative of r_CM_0";
// protected Real spring.lineForce.ag_CM_0[1](quantity = "Acceleration", unit = "m/s2") "der(v_CM_0) - gravityAcceleration";
// protected Real spring.lineForce.ag_CM_0[2](quantity = "Acceleration", unit = "m/s2") "der(v_CM_0) - gravityAcceleration";
// protected Real spring.lineForce.ag_CM_0[3](quantity = "Acceleration", unit = "m/s2") "der(v_CM_0) - gravityAcceleration";
// parameter String spring.lineForce.lineShape.shapeType = spring.lineForce.lineShapeType "Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)";
// input Real spring.lineForce.lineShape.R.T[1,1] = 1.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[1,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[1,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[2,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[2,2] = 1.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[2,3] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[3,1] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[3,2] = 0.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.T[3,3] = 1.0 "Transformation matrix from world frame to local frame";
// input Real spring.lineForce.lineShape.R.w[1](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real spring.lineForce.lineShape.R.w[2](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real spring.lineForce.lineShape.R.w[3](quantity = "AngularVelocity", unit = "rad/s") = 0.0 "Absolute angular velocity of local frame, resolved in local frame";
// input Real spring.lineForce.lineShape.r[1](quantity = "Length", unit = "m") = spring.lineForce.frame_a.r_0[1] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real spring.lineForce.lineShape.r[2](quantity = "Length", unit = "m") = spring.lineForce.frame_a.r_0[2] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real spring.lineForce.lineShape.r[3](quantity = "Length", unit = "m") = spring.lineForce.frame_a.r_0[3] "Position vector from origin of world frame to origin of object frame, resolved in world frame";
// input Real spring.lineForce.lineShape.r_shape[1](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real spring.lineForce.lineShape.r_shape[2](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real spring.lineForce.lineShape.r_shape[3](quantity = "Length", unit = "m") = 0.0 "Position vector from origin of object frame to shape origin, resolved in object frame";
// input Real spring.lineForce.lineShape.lengthDirection[1](unit = "1") = spring.lineForce.e_rel_0[1] "Vector in length direction, resolved in object frame";
// input Real spring.lineForce.lineShape.lengthDirection[2](unit = "1") = spring.lineForce.e_rel_0[2] "Vector in length direction, resolved in object frame";
// input Real spring.lineForce.lineShape.lengthDirection[3](unit = "1") = spring.lineForce.e_rel_0[3] "Vector in length direction, resolved in object frame";
// input Real spring.lineForce.lineShape.widthDirection[1](unit = "1") = Modelica.Mechanics.MultiBody.Frames.resolve1(spring.lineForce.frame_a.R,{0.0,1.0,0.0})[1] "Vector in width direction, resolved in object frame";
// input Real spring.lineForce.lineShape.widthDirection[2](unit = "1") = Modelica.Mechanics.MultiBody.Frames.resolve1(spring.lineForce.frame_a.R,{0.0,1.0,0.0})[2] "Vector in width direction, resolved in object frame";
// input Real spring.lineForce.lineShape.widthDirection[3](unit = "1") = Modelica.Mechanics.MultiBody.Frames.resolve1(spring.lineForce.frame_a.R,{0.0,1.0,0.0})[3] "Vector in width direction, resolved in object frame";
// input Real spring.lineForce.lineShape.length(quantity = "Length", unit = "m") = spring.lineForce.length "Length of visual object";
// input Real spring.lineForce.lineShape.width(quantity = "Length", unit = "m") = spring.lineForce.lineShapeWidth "Width of visual object";
// input Real spring.lineForce.lineShape.height(quantity = "Length", unit = "m") = spring.lineForce.lineShapeHeight "Height of visual object";
// input Real spring.lineForce.lineShape.extra = spring.lineForce.lineShapeExtra "Additional size data for some of the shape types";
// input Real spring.lineForce.lineShape.color[1] = Real(spring.lineForce.lineShapeColor[1]) "Color of shape";
// input Real spring.lineForce.lineShape.color[2] = Real(spring.lineForce.lineShapeColor[2]) "Color of shape";
// input Real spring.lineForce.lineShape.color[3] = Real(spring.lineForce.lineShapeColor[3]) "Color of shape";
// input Real spring.lineForce.lineShape.specularCoefficient = spring.lineForce.specularCoefficient "Reflection of ambient light (= 0: light is completely absorbed)";
// protected Real spring.lineForce.lineShape.abs_n_x(unit = "1") = Modelica.Math.Vectors.length({spring.lineForce.lineShape.lengthDirection[1],spring.lineForce.lineShape.lengthDirection[2],spring.lineForce.lineShape.lengthDirection[3]});
// protected Real spring.lineForce.lineShape.e_x[1](unit = "1") = if noEvent(spring.lineForce.lineShape.abs_n_x < 1e-10) then 1.0 else spring.lineForce.lineShape.lengthDirection[1] / spring.lineForce.lineShape.abs_n_x;
// protected Real spring.lineForce.lineShape.e_x[2](unit = "1") = if noEvent(spring.lineForce.lineShape.abs_n_x < 1e-10) then 0.0 else spring.lineForce.lineShape.lengthDirection[2] / spring.lineForce.lineShape.abs_n_x;
// protected Real spring.lineForce.lineShape.e_x[3](unit = "1") = if noEvent(spring.lineForce.lineShape.abs_n_x < 1e-10) then 0.0 else spring.lineForce.lineShape.lengthDirection[3] / spring.lineForce.lineShape.abs_n_x;
// protected Real spring.lineForce.lineShape.n_z_aux[1](unit = "1") = spring.lineForce.lineShape.e_x[2] * spring.lineForce.lineShape.widthDirection[3] - spring.lineForce.lineShape.e_x[3] * spring.lineForce.lineShape.widthDirection[2];
// protected Real spring.lineForce.lineShape.n_z_aux[2](unit = "1") = spring.lineForce.lineShape.e_x[3] * spring.lineForce.lineShape.widthDirection[1] - spring.lineForce.lineShape.e_x[1] * spring.lineForce.lineShape.widthDirection[3];
// protected Real spring.lineForce.lineShape.n_z_aux[3](unit = "1") = spring.lineForce.lineShape.e_x[1] * spring.lineForce.lineShape.widthDirection[2] - spring.lineForce.lineShape.e_x[2] * spring.lineForce.lineShape.widthDirection[1];
// protected Real spring.lineForce.lineShape.e_y[1](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]},if noEvent(spring.lineForce.lineShape.n_z_aux[1] ^ 2.0 + (spring.lineForce.lineShape.n_z_aux[2] ^ 2.0 + spring.lineForce.lineShape.n_z_aux[3] ^ 2.0) > 1e-06) then {spring.lineForce.lineShape.widthDirection[1],spring.lineForce.lineShape.widthDirection[2],spring.lineForce.lineShape.widthDirection[3]} else if noEvent(abs(spring.lineForce.lineShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]})[1];
// protected Real spring.lineForce.lineShape.e_y[2](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]},if noEvent(spring.lineForce.lineShape.n_z_aux[1] ^ 2.0 + (spring.lineForce.lineShape.n_z_aux[2] ^ 2.0 + spring.lineForce.lineShape.n_z_aux[3] ^ 2.0) > 1e-06) then {spring.lineForce.lineShape.widthDirection[1],spring.lineForce.lineShape.widthDirection[2],spring.lineForce.lineShape.widthDirection[3]} else if noEvent(abs(spring.lineForce.lineShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]})[2];
// protected Real spring.lineForce.lineShape.e_y[3](unit = "1") = cross(Modelica.Math.Vectors.normalize(cross({spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]},if noEvent(spring.lineForce.lineShape.n_z_aux[1] ^ 2.0 + (spring.lineForce.lineShape.n_z_aux[2] ^ 2.0 + spring.lineForce.lineShape.n_z_aux[3] ^ 2.0) > 1e-06) then {spring.lineForce.lineShape.widthDirection[1],spring.lineForce.lineShape.widthDirection[2],spring.lineForce.lineShape.widthDirection[3]} else if noEvent(abs(spring.lineForce.lineShape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{spring.lineForce.lineShape.e_x[1],spring.lineForce.lineShape.e_x[2],spring.lineForce.lineShape.e_x[3]})[3];
// protected output Real spring.lineForce.lineShape.Form;
// output Real spring.lineForce.lineShape.rxvisobj[1](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.rxvisobj[2](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.rxvisobj[3](unit = "1") "x-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.ryvisobj[1](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.ryvisobj[2](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.ryvisobj[3](unit = "1") "y-axis unit vector of shape, resolved in world frame";
// output Real spring.lineForce.lineShape.rvisobj[1](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real spring.lineForce.lineShape.rvisobj[2](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// output Real spring.lineForce.lineShape.rvisobj[3](quantity = "Length", unit = "m") "position vector from world frame to shape frame, resolved in world frame";
// protected output Real spring.lineForce.lineShape.size[1](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real spring.lineForce.lineShape.size[2](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real spring.lineForce.lineShape.size[3](quantity = "Length", unit = "m") "{length,width,height} of shape";
// protected output Real spring.lineForce.lineShape.Material;
// protected output Real spring.lineForce.lineShape.Extra;
// Real spring.spring.flange_a.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real spring.spring.flange_a.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real spring.spring.flange_b.s(quantity = "Length", unit = "m") "absolute position of flange";
// Real spring.spring.flange_b.f(quantity = "Force", unit = "N") "cut force directed into flange";
// Real spring.spring.s_rel(quantity = "Length", unit = "m", min = 0.0, start = 0.0) "relative distance (= flange_b.s - flange_a.s)";
// Real spring.spring.f(quantity = "Force", unit = "N") "force between flanges (positive in direction of flange axis R)";
// parameter Real spring.spring.c(quantity = "TranslationalSpringConstant", unit = "N/m", min = 0.0, start = 1.0) = spring.c "spring constant ";
// parameter Real spring.spring.s_rel0(quantity = "Length", unit = "m", min = 0.0) = spring.s_unstretched "unstretched spring length";
// equation
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3]);
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + (world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3]);
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3]);
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + (world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3]);
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3]);
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + (world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3]);
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3]);
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + (world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3]);
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3]);
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + (world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3]);
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3]);
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + (world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3]);
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3]);
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + (world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3]);
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3]);
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + (world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3]);
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3]);
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + (world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3]);
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3]);
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + (world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3]);
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3]);
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + (world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3]);
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3]);
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + (world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3]);
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3]);
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + (world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3]);
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   world.gravitySphere.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(world.gravitySphere.shapeType);
//   world.gravitySphere.rxvisobj[1] = world.gravitySphere.R.T[1,1] * world.gravitySphere.e_x[1] + (world.gravitySphere.R.T[2,1] * world.gravitySphere.e_x[2] + world.gravitySphere.R.T[3,1] * world.gravitySphere.e_x[3]);
//   world.gravitySphere.rxvisobj[2] = world.gravitySphere.R.T[1,2] * world.gravitySphere.e_x[1] + (world.gravitySphere.R.T[2,2] * world.gravitySphere.e_x[2] + world.gravitySphere.R.T[3,2] * world.gravitySphere.e_x[3]);
//   world.gravitySphere.rxvisobj[3] = world.gravitySphere.R.T[1,3] * world.gravitySphere.e_x[1] + (world.gravitySphere.R.T[2,3] * world.gravitySphere.e_x[2] + world.gravitySphere.R.T[3,3] * world.gravitySphere.e_x[3]);
//   world.gravitySphere.ryvisobj[1] = world.gravitySphere.R.T[1,1] * world.gravitySphere.e_y[1] + (world.gravitySphere.R.T[2,1] * world.gravitySphere.e_y[2] + world.gravitySphere.R.T[3,1] * world.gravitySphere.e_y[3]);
//   world.gravitySphere.ryvisobj[2] = world.gravitySphere.R.T[1,2] * world.gravitySphere.e_y[1] + (world.gravitySphere.R.T[2,2] * world.gravitySphere.e_y[2] + world.gravitySphere.R.T[3,2] * world.gravitySphere.e_y[3]);
//   world.gravitySphere.ryvisobj[3] = world.gravitySphere.R.T[1,3] * world.gravitySphere.e_y[1] + (world.gravitySphere.R.T[2,3] * world.gravitySphere.e_y[2] + world.gravitySphere.R.T[3,3] * world.gravitySphere.e_y[3]);
//   world.gravitySphere.rvisobj = world.gravitySphere.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravitySphere.R.T[1,1],world.gravitySphere.R.T[1,2],world.gravitySphere.R.T[1,3]},{world.gravitySphere.R.T[2,1],world.gravitySphere.R.T[2,2],world.gravitySphere.R.T[2,3]},{world.gravitySphere.R.T[3,1],world.gravitySphere.R.T[3,2],world.gravitySphere.R.T[3,3]}},{world.gravitySphere.r_shape[1],world.gravitySphere.r_shape[2],world.gravitySphere.r_shape[3]});
//   world.gravitySphere.size[1] = world.gravitySphere.length;
//   world.gravitySphere.size[2] = world.gravitySphere.width;
//   world.gravitySphere.size[3] = world.gravitySphere.height;
//   world.gravitySphere.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(world.gravitySphere.color[1] / 255.0,world.gravitySphere.color[2] / 255.0,world.gravitySphere.color[3] / 255.0,world.gravitySphere.specularCoefficient);
//   world.gravitySphere.Extra = world.gravitySphere.extra;
// assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,"Parameter n of World object is wrong (lenght(n) > 0 required)");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   body1.sphere.R.T[1,1] = body1.frame_a.R.T[1,1];
//   body1.sphere.R.T[1,2] = body1.frame_a.R.T[1,2];
//   body1.sphere.R.T[1,3] = body1.frame_a.R.T[1,3];
//   body1.sphere.R.T[2,1] = body1.frame_a.R.T[2,1];
//   body1.sphere.R.T[2,2] = body1.frame_a.R.T[2,2];
//   body1.sphere.R.T[2,3] = body1.frame_a.R.T[2,3];
//   body1.sphere.R.T[3,1] = body1.frame_a.R.T[3,1];
//   body1.sphere.R.T[3,2] = body1.frame_a.R.T[3,2];
//   body1.sphere.R.T[3,3] = body1.frame_a.R.T[3,3];
//   body1.sphere.R.w[1] = body1.frame_a.R.w[1];
//   body1.sphere.R.w[2] = body1.frame_a.R.w[2];
//   body1.sphere.R.w[3] = body1.frame_a.R.w[3];
//   body1.sphere.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(body1.sphere.shapeType);
//   body1.sphere.rxvisobj[1] = body1.sphere.R.T[1,1] * body1.sphere.e_x[1] + (body1.sphere.R.T[2,1] * body1.sphere.e_x[2] + body1.sphere.R.T[3,1] * body1.sphere.e_x[3]);
//   body1.sphere.rxvisobj[2] = body1.sphere.R.T[1,2] * body1.sphere.e_x[1] + (body1.sphere.R.T[2,2] * body1.sphere.e_x[2] + body1.sphere.R.T[3,2] * body1.sphere.e_x[3]);
//   body1.sphere.rxvisobj[3] = body1.sphere.R.T[1,3] * body1.sphere.e_x[1] + (body1.sphere.R.T[2,3] * body1.sphere.e_x[2] + body1.sphere.R.T[3,3] * body1.sphere.e_x[3]);
//   body1.sphere.ryvisobj[1] = body1.sphere.R.T[1,1] * body1.sphere.e_y[1] + (body1.sphere.R.T[2,1] * body1.sphere.e_y[2] + body1.sphere.R.T[3,1] * body1.sphere.e_y[3]);
//   body1.sphere.ryvisobj[2] = body1.sphere.R.T[1,2] * body1.sphere.e_y[1] + (body1.sphere.R.T[2,2] * body1.sphere.e_y[2] + body1.sphere.R.T[3,2] * body1.sphere.e_y[3]);
//   body1.sphere.ryvisobj[3] = body1.sphere.R.T[1,3] * body1.sphere.e_y[1] + (body1.sphere.R.T[2,3] * body1.sphere.e_y[2] + body1.sphere.R.T[3,3] * body1.sphere.e_y[3]);
//   body1.sphere.rvisobj = body1.sphere.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body1.sphere.R.T[1,1],body1.sphere.R.T[1,2],body1.sphere.R.T[1,3]},{body1.sphere.R.T[2,1],body1.sphere.R.T[2,2],body1.sphere.R.T[2,3]},{body1.sphere.R.T[3,1],body1.sphere.R.T[3,2],body1.sphere.R.T[3,3]}},{body1.sphere.r_shape[1],body1.sphere.r_shape[2],body1.sphere.r_shape[3]});
//   body1.sphere.size[1] = body1.sphere.length;
//   body1.sphere.size[2] = body1.sphere.width;
//   body1.sphere.size[3] = body1.sphere.height;
//   body1.sphere.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(body1.sphere.color[1] / 255.0,body1.sphere.color[2] / 255.0,body1.sphere.color[3] / 255.0,body1.sphere.specularCoefficient);
//   body1.sphere.Extra = body1.sphere.extra;
//   if true then
// assert(true,"
// A Modelica.Mechanics.MultiBody.Parts.PointMass model is connected in
// a way, so that no equations are present to compute frame_a.R
// (the orientation object in the connector). Setting frame_a.R to
// an arbitrary value in the PointMass model, might lead to a wrong
// overall model, depending on how the PointMass model is used.
//    You can avoid this message, by providing equations that
// compute the orientation object, e.g., by using the
// Modelica.Mechanics.MultiBody.Joints.FreeMotion joint.
//    If a PointMass model is not connected at all, the
// orientation object is set to a unit rotation. But this is
// the only case where this is done.
// ");
//   body1.frame_a.R.w[3] = 0.0;
//   body1.frame_a.R.w[2] = 0.0;
//   body1.frame_a.R.w[1] = 0.0;
//   body1.frame_a.R.T[3,3] = 1.0;
//   body1.frame_a.R.T[3,2] = 0.0;
//   body1.frame_a.R.T[3,1] = 0.0;
//   body1.frame_a.R.T[2,3] = 0.0;
//   body1.frame_a.R.T[2,2] = 1.0;
//   body1.frame_a.R.T[2,1] = 0.0;
//   body1.frame_a.R.T[1,3] = 0.0;
//   body1.frame_a.R.T[1,2] = 0.0;
//   body1.frame_a.R.T[1,1] = 1.0;
//   else
//   body1.frame_a.t[1] = 0.0;
//   body1.frame_a.t[2] = 0.0;
//   body1.frame_a.t[3] = 0.0;
//   end if;
//   body1.r_0[1] = body1.frame_a.r_0[1];
//   body1.r_0[2] = body1.frame_a.r_0[2];
//   body1.r_0[3] = body1.frame_a.r_0[3];
//   body1.v_0[1] = der(body1.r_0[1]);
//   body1.v_0[2] = der(body1.r_0[2]);
//   body1.v_0[3] = der(body1.r_0[3]);
//   body1.a_0[1] = der(body1.v_0[1]);
//   body1.a_0[2] = der(body1.v_0[2]);
//   body1.a_0[3] = der(body1.v_0[3]);
//   body1.frame_a.f = body1.m * Modelica.Mechanics.MultiBody.Frames.resolve2(body1.frame_a.R,{body1.a_0[1],body1.a_0[2],body1.a_0[3]} - Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration({body1.r_0[1],body1.r_0[2],body1.r_0[3]},world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue));
//   body2.sphere.R.T[1,1] = body2.frame_a.R.T[1,1];
//   body2.sphere.R.T[1,2] = body2.frame_a.R.T[1,2];
//   body2.sphere.R.T[1,3] = body2.frame_a.R.T[1,3];
//   body2.sphere.R.T[2,1] = body2.frame_a.R.T[2,1];
//   body2.sphere.R.T[2,2] = body2.frame_a.R.T[2,2];
//   body2.sphere.R.T[2,3] = body2.frame_a.R.T[2,3];
//   body2.sphere.R.T[3,1] = body2.frame_a.R.T[3,1];
//   body2.sphere.R.T[3,2] = body2.frame_a.R.T[3,2];
//   body2.sphere.R.T[3,3] = body2.frame_a.R.T[3,3];
//   body2.sphere.R.w[1] = body2.frame_a.R.w[1];
//   body2.sphere.R.w[2] = body2.frame_a.R.w[2];
//   body2.sphere.R.w[3] = body2.frame_a.R.w[3];
//   body2.sphere.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(body2.sphere.shapeType);
//   body2.sphere.rxvisobj[1] = body2.sphere.R.T[1,1] * body2.sphere.e_x[1] + (body2.sphere.R.T[2,1] * body2.sphere.e_x[2] + body2.sphere.R.T[3,1] * body2.sphere.e_x[3]);
//   body2.sphere.rxvisobj[2] = body2.sphere.R.T[1,2] * body2.sphere.e_x[1] + (body2.sphere.R.T[2,2] * body2.sphere.e_x[2] + body2.sphere.R.T[3,2] * body2.sphere.e_x[3]);
//   body2.sphere.rxvisobj[3] = body2.sphere.R.T[1,3] * body2.sphere.e_x[1] + (body2.sphere.R.T[2,3] * body2.sphere.e_x[2] + body2.sphere.R.T[3,3] * body2.sphere.e_x[3]);
//   body2.sphere.ryvisobj[1] = body2.sphere.R.T[1,1] * body2.sphere.e_y[1] + (body2.sphere.R.T[2,1] * body2.sphere.e_y[2] + body2.sphere.R.T[3,1] * body2.sphere.e_y[3]);
//   body2.sphere.ryvisobj[2] = body2.sphere.R.T[1,2] * body2.sphere.e_y[1] + (body2.sphere.R.T[2,2] * body2.sphere.e_y[2] + body2.sphere.R.T[3,2] * body2.sphere.e_y[3]);
//   body2.sphere.ryvisobj[3] = body2.sphere.R.T[1,3] * body2.sphere.e_y[1] + (body2.sphere.R.T[2,3] * body2.sphere.e_y[2] + body2.sphere.R.T[3,3] * body2.sphere.e_y[3]);
//   body2.sphere.rvisobj = body2.sphere.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body2.sphere.R.T[1,1],body2.sphere.R.T[1,2],body2.sphere.R.T[1,3]},{body2.sphere.R.T[2,1],body2.sphere.R.T[2,2],body2.sphere.R.T[2,3]},{body2.sphere.R.T[3,1],body2.sphere.R.T[3,2],body2.sphere.R.T[3,3]}},{body2.sphere.r_shape[1],body2.sphere.r_shape[2],body2.sphere.r_shape[3]});
//   body2.sphere.size[1] = body2.sphere.length;
//   body2.sphere.size[2] = body2.sphere.width;
//   body2.sphere.size[3] = body2.sphere.height;
//   body2.sphere.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(body2.sphere.color[1] / 255.0,body2.sphere.color[2] / 255.0,body2.sphere.color[3] / 255.0,body2.sphere.specularCoefficient);
//   body2.sphere.Extra = body2.sphere.extra;
//   if true then
// assert(true,"
// A Modelica.Mechanics.MultiBody.Parts.PointMass model is connected in
// a way, so that no equations are present to compute frame_a.R
// (the orientation object in the connector). Setting frame_a.R to
// an arbitrary value in the PointMass model, might lead to a wrong
// overall model, depending on how the PointMass model is used.
//    You can avoid this message, by providing equations that
// compute the orientation object, e.g., by using the
// Modelica.Mechanics.MultiBody.Joints.FreeMotion joint.
//    If a PointMass model is not connected at all, the
// orientation object is set to a unit rotation. But this is
// the only case where this is done.
// ");
//   body2.frame_a.R.w[3] = 0.0;
//   body2.frame_a.R.w[2] = 0.0;
//   body2.frame_a.R.w[1] = 0.0;
//   body2.frame_a.R.T[3,3] = 1.0;
//   body2.frame_a.R.T[3,2] = 0.0;
//   body2.frame_a.R.T[3,1] = 0.0;
//   body2.frame_a.R.T[2,3] = 0.0;
//   body2.frame_a.R.T[2,2] = 1.0;
//   body2.frame_a.R.T[2,1] = 0.0;
//   body2.frame_a.R.T[1,3] = 0.0;
//   body2.frame_a.R.T[1,2] = 0.0;
//   body2.frame_a.R.T[1,1] = 1.0;
//   else
//   body2.frame_a.t[1] = 0.0;
//   body2.frame_a.t[2] = 0.0;
//   body2.frame_a.t[3] = 0.0;
//   end if;
//   body2.r_0[1] = body2.frame_a.r_0[1];
//   body2.r_0[2] = body2.frame_a.r_0[2];
//   body2.r_0[3] = body2.frame_a.r_0[3];
//   body2.v_0[1] = der(body2.r_0[1]);
//   body2.v_0[2] = der(body2.r_0[2]);
//   body2.v_0[3] = der(body2.r_0[3]);
//   body2.a_0[1] = der(body2.v_0[1]);
//   body2.a_0[2] = der(body2.v_0[2]);
//   body2.a_0[3] = der(body2.v_0[3]);
//   body2.frame_a.f = body2.m * Modelica.Mechanics.MultiBody.Frames.resolve2(body2.frame_a.R,{body2.a_0[1],body2.a_0[2],body2.a_0[3]} - Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration({body2.r_0[1],body2.r_0[2],body2.r_0[3]},world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue));
//   body3.sphere.R.T[1,1] = body3.frame_a.R.T[1,1];
//   body3.sphere.R.T[1,2] = body3.frame_a.R.T[1,2];
//   body3.sphere.R.T[1,3] = body3.frame_a.R.T[1,3];
//   body3.sphere.R.T[2,1] = body3.frame_a.R.T[2,1];
//   body3.sphere.R.T[2,2] = body3.frame_a.R.T[2,2];
//   body3.sphere.R.T[2,3] = body3.frame_a.R.T[2,3];
//   body3.sphere.R.T[3,1] = body3.frame_a.R.T[3,1];
//   body3.sphere.R.T[3,2] = body3.frame_a.R.T[3,2];
//   body3.sphere.R.T[3,3] = body3.frame_a.R.T[3,3];
//   body3.sphere.R.w[1] = body3.frame_a.R.w[1];
//   body3.sphere.R.w[2] = body3.frame_a.R.w[2];
//   body3.sphere.R.w[3] = body3.frame_a.R.w[3];
//   body3.sphere.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(body3.sphere.shapeType);
//   body3.sphere.rxvisobj[1] = body3.sphere.R.T[1,1] * body3.sphere.e_x[1] + (body3.sphere.R.T[2,1] * body3.sphere.e_x[2] + body3.sphere.R.T[3,1] * body3.sphere.e_x[3]);
//   body3.sphere.rxvisobj[2] = body3.sphere.R.T[1,2] * body3.sphere.e_x[1] + (body3.sphere.R.T[2,2] * body3.sphere.e_x[2] + body3.sphere.R.T[3,2] * body3.sphere.e_x[3]);
//   body3.sphere.rxvisobj[3] = body3.sphere.R.T[1,3] * body3.sphere.e_x[1] + (body3.sphere.R.T[2,3] * body3.sphere.e_x[2] + body3.sphere.R.T[3,3] * body3.sphere.e_x[3]);
//   body3.sphere.ryvisobj[1] = body3.sphere.R.T[1,1] * body3.sphere.e_y[1] + (body3.sphere.R.T[2,1] * body3.sphere.e_y[2] + body3.sphere.R.T[3,1] * body3.sphere.e_y[3]);
//   body3.sphere.ryvisobj[2] = body3.sphere.R.T[1,2] * body3.sphere.e_y[1] + (body3.sphere.R.T[2,2] * body3.sphere.e_y[2] + body3.sphere.R.T[3,2] * body3.sphere.e_y[3]);
//   body3.sphere.ryvisobj[3] = body3.sphere.R.T[1,3] * body3.sphere.e_y[1] + (body3.sphere.R.T[2,3] * body3.sphere.e_y[2] + body3.sphere.R.T[3,3] * body3.sphere.e_y[3]);
//   body3.sphere.rvisobj = body3.sphere.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body3.sphere.R.T[1,1],body3.sphere.R.T[1,2],body3.sphere.R.T[1,3]},{body3.sphere.R.T[2,1],body3.sphere.R.T[2,2],body3.sphere.R.T[2,3]},{body3.sphere.R.T[3,1],body3.sphere.R.T[3,2],body3.sphere.R.T[3,3]}},{body3.sphere.r_shape[1],body3.sphere.r_shape[2],body3.sphere.r_shape[3]});
//   body3.sphere.size[1] = body3.sphere.length;
//   body3.sphere.size[2] = body3.sphere.width;
//   body3.sphere.size[3] = body3.sphere.height;
//   body3.sphere.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(body3.sphere.color[1] / 255.0,body3.sphere.color[2] / 255.0,body3.sphere.color[3] / 255.0,body3.sphere.specularCoefficient);
//   body3.sphere.Extra = body3.sphere.extra;
//   if false then
// assert(false,"
// A Modelica.Mechanics.MultiBody.Parts.PointMass model is connected in
// a way, so that no equations are present to compute frame_a.R
// (the orientation object in the connector). Setting frame_a.R to
// an arbitrary value in the PointMass model, might lead to a wrong
// overall model, depending on how the PointMass model is used.
//    You can avoid this message, by providing equations that
// compute the orientation object, e.g., by using the
// Modelica.Mechanics.MultiBody.Joints.FreeMotion joint.
//    If a PointMass model is not connected at all, the
// orientation object is set to a unit rotation. But this is
// the only case where this is done.
// ");
//   body3.frame_a.R.w[3] = 0.0;
//   body3.frame_a.R.w[2] = 0.0;
//   body3.frame_a.R.w[1] = 0.0;
//   body3.frame_a.R.T[3,3] = 1.0;
//   body3.frame_a.R.T[3,2] = 0.0;
//   body3.frame_a.R.T[3,1] = 0.0;
//   body3.frame_a.R.T[2,3] = 0.0;
//   body3.frame_a.R.T[2,2] = 1.0;
//   body3.frame_a.R.T[2,1] = 0.0;
//   body3.frame_a.R.T[1,3] = 0.0;
//   body3.frame_a.R.T[1,2] = 0.0;
//   body3.frame_a.R.T[1,1] = 1.0;
//   else
//   body3.frame_a.t[1] = 0.0;
//   body3.frame_a.t[2] = 0.0;
//   body3.frame_a.t[3] = 0.0;
//   end if;
//   body3.r_0[1] = body3.frame_a.r_0[1];
//   body3.r_0[2] = body3.frame_a.r_0[2];
//   body3.r_0[3] = body3.frame_a.r_0[3];
//   body3.v_0[1] = der(body3.r_0[1]);
//   body3.v_0[2] = der(body3.r_0[2]);
//   body3.v_0[3] = der(body3.r_0[3]);
//   body3.a_0[1] = der(body3.v_0[1]);
//   body3.a_0[2] = der(body3.v_0[2]);
//   body3.a_0[3] = der(body3.v_0[3]);
//   body3.frame_a.f = body3.m * Modelica.Mechanics.MultiBody.Frames.resolve2(body3.frame_a.R,{body3.a_0[1],body3.a_0[2],body3.a_0[3]} - Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration({body3.r_0[1],body3.r_0[2],body3.r_0[3]},world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue));
//   body4.sphere.R.T[1,1] = body4.frame_a.R.T[1,1];
//   body4.sphere.R.T[1,2] = body4.frame_a.R.T[1,2];
//   body4.sphere.R.T[1,3] = body4.frame_a.R.T[1,3];
//   body4.sphere.R.T[2,1] = body4.frame_a.R.T[2,1];
//   body4.sphere.R.T[2,2] = body4.frame_a.R.T[2,2];
//   body4.sphere.R.T[2,3] = body4.frame_a.R.T[2,3];
//   body4.sphere.R.T[3,1] = body4.frame_a.R.T[3,1];
//   body4.sphere.R.T[3,2] = body4.frame_a.R.T[3,2];
//   body4.sphere.R.T[3,3] = body4.frame_a.R.T[3,3];
//   body4.sphere.R.w[1] = body4.frame_a.R.w[1];
//   body4.sphere.R.w[2] = body4.frame_a.R.w[2];
//   body4.sphere.R.w[3] = body4.frame_a.R.w[3];
//   body4.sphere.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(body4.sphere.shapeType);
//   body4.sphere.rxvisobj[1] = body4.sphere.R.T[1,1] * body4.sphere.e_x[1] + (body4.sphere.R.T[2,1] * body4.sphere.e_x[2] + body4.sphere.R.T[3,1] * body4.sphere.e_x[3]);
//   body4.sphere.rxvisobj[2] = body4.sphere.R.T[1,2] * body4.sphere.e_x[1] + (body4.sphere.R.T[2,2] * body4.sphere.e_x[2] + body4.sphere.R.T[3,2] * body4.sphere.e_x[3]);
//   body4.sphere.rxvisobj[3] = body4.sphere.R.T[1,3] * body4.sphere.e_x[1] + (body4.sphere.R.T[2,3] * body4.sphere.e_x[2] + body4.sphere.R.T[3,3] * body4.sphere.e_x[3]);
//   body4.sphere.ryvisobj[1] = body4.sphere.R.T[1,1] * body4.sphere.e_y[1] + (body4.sphere.R.T[2,1] * body4.sphere.e_y[2] + body4.sphere.R.T[3,1] * body4.sphere.e_y[3]);
//   body4.sphere.ryvisobj[2] = body4.sphere.R.T[1,2] * body4.sphere.e_y[1] + (body4.sphere.R.T[2,2] * body4.sphere.e_y[2] + body4.sphere.R.T[3,2] * body4.sphere.e_y[3]);
//   body4.sphere.ryvisobj[3] = body4.sphere.R.T[1,3] * body4.sphere.e_y[1] + (body4.sphere.R.T[2,3] * body4.sphere.e_y[2] + body4.sphere.R.T[3,3] * body4.sphere.e_y[3]);
//   body4.sphere.rvisobj = body4.sphere.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body4.sphere.R.T[1,1],body4.sphere.R.T[1,2],body4.sphere.R.T[1,3]},{body4.sphere.R.T[2,1],body4.sphere.R.T[2,2],body4.sphere.R.T[2,3]},{body4.sphere.R.T[3,1],body4.sphere.R.T[3,2],body4.sphere.R.T[3,3]}},{body4.sphere.r_shape[1],body4.sphere.r_shape[2],body4.sphere.r_shape[3]});
//   body4.sphere.size[1] = body4.sphere.length;
//   body4.sphere.size[2] = body4.sphere.width;
//   body4.sphere.size[3] = body4.sphere.height;
//   body4.sphere.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(body4.sphere.color[1] / 255.0,body4.sphere.color[2] / 255.0,body4.sphere.color[3] / 255.0,body4.sphere.specularCoefficient);
//   body4.sphere.Extra = body4.sphere.extra;
//   if false then
// assert(false,"
// A Modelica.Mechanics.MultiBody.Parts.PointMass model is connected in
// a way, so that no equations are present to compute frame_a.R
// (the orientation object in the connector). Setting frame_a.R to
// an arbitrary value in the PointMass model, might lead to a wrong
// overall model, depending on how the PointMass model is used.
//    You can avoid this message, by providing equations that
// compute the orientation object, e.g., by using the
// Modelica.Mechanics.MultiBody.Joints.FreeMotion joint.
//    If a PointMass model is not connected at all, the
// orientation object is set to a unit rotation. But this is
// the only case where this is done.
// ");
//   body4.frame_a.R.w[3] = 0.0;
//   body4.frame_a.R.w[2] = 0.0;
//   body4.frame_a.R.w[1] = 0.0;
//   body4.frame_a.R.T[3,3] = 1.0;
//   body4.frame_a.R.T[3,2] = 0.0;
//   body4.frame_a.R.T[3,1] = 0.0;
//   body4.frame_a.R.T[2,3] = 0.0;
//   body4.frame_a.R.T[2,2] = 1.0;
//   body4.frame_a.R.T[2,1] = 0.0;
//   body4.frame_a.R.T[1,3] = 0.0;
//   body4.frame_a.R.T[1,2] = 0.0;
//   body4.frame_a.R.T[1,1] = 1.0;
//   else
//   body4.frame_a.t[1] = 0.0;
//   body4.frame_a.t[2] = 0.0;
//   body4.frame_a.t[3] = 0.0;
//   end if;
//   body4.r_0[1] = body4.frame_a.r_0[1];
//   body4.r_0[2] = body4.frame_a.r_0[2];
//   body4.r_0[3] = body4.frame_a.r_0[3];
//   body4.v_0[1] = der(body4.r_0[1]);
//   body4.v_0[2] = der(body4.r_0[2]);
//   body4.v_0[3] = der(body4.r_0[3]);
//   body4.a_0[1] = der(body4.v_0[1]);
//   body4.a_0[2] = der(body4.v_0[2]);
//   body4.a_0[3] = der(body4.v_0[3]);
//   body4.frame_a.f = body4.m * Modelica.Mechanics.MultiBody.Frames.resolve2(body4.frame_a.R,{body4.a_0[1],body4.a_0[2],body4.a_0[3]} - Modelica.Mechanics.MultiBody.Parts.PointMass.world.gravityAcceleration({body4.r_0[1],body4.r_0[2],body4.r_0[3]},world.gravityType,world.g * Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13),world.mue));
//   spring.lineForce.lineShape.Form = 9.87e+25 + 1e+20 * Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackShape(spring.lineForce.lineShape.shapeType);
//   spring.lineForce.lineShape.rxvisobj[1] = spring.lineForce.lineShape.R.T[1,1] * spring.lineForce.lineShape.e_x[1] + (spring.lineForce.lineShape.R.T[2,1] * spring.lineForce.lineShape.e_x[2] + spring.lineForce.lineShape.R.T[3,1] * spring.lineForce.lineShape.e_x[3]);
//   spring.lineForce.lineShape.rxvisobj[2] = spring.lineForce.lineShape.R.T[1,2] * spring.lineForce.lineShape.e_x[1] + (spring.lineForce.lineShape.R.T[2,2] * spring.lineForce.lineShape.e_x[2] + spring.lineForce.lineShape.R.T[3,2] * spring.lineForce.lineShape.e_x[3]);
//   spring.lineForce.lineShape.rxvisobj[3] = spring.lineForce.lineShape.R.T[1,3] * spring.lineForce.lineShape.e_x[1] + (spring.lineForce.lineShape.R.T[2,3] * spring.lineForce.lineShape.e_x[2] + spring.lineForce.lineShape.R.T[3,3] * spring.lineForce.lineShape.e_x[3]);
//   spring.lineForce.lineShape.ryvisobj[1] = spring.lineForce.lineShape.R.T[1,1] * spring.lineForce.lineShape.e_y[1] + (spring.lineForce.lineShape.R.T[2,1] * spring.lineForce.lineShape.e_y[2] + spring.lineForce.lineShape.R.T[3,1] * spring.lineForce.lineShape.e_y[3]);
//   spring.lineForce.lineShape.ryvisobj[2] = spring.lineForce.lineShape.R.T[1,2] * spring.lineForce.lineShape.e_y[1] + (spring.lineForce.lineShape.R.T[2,2] * spring.lineForce.lineShape.e_y[2] + spring.lineForce.lineShape.R.T[3,2] * spring.lineForce.lineShape.e_y[3]);
//   spring.lineForce.lineShape.ryvisobj[3] = spring.lineForce.lineShape.R.T[1,3] * spring.lineForce.lineShape.e_y[1] + (spring.lineForce.lineShape.R.T[2,3] * spring.lineForce.lineShape.e_y[2] + spring.lineForce.lineShape.R.T[3,3] * spring.lineForce.lineShape.e_y[3]);
//   spring.lineForce.lineShape.rvisobj = spring.lineForce.lineShape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{spring.lineForce.lineShape.R.T[1,1],spring.lineForce.lineShape.R.T[1,2],spring.lineForce.lineShape.R.T[1,3]},{spring.lineForce.lineShape.R.T[2,1],spring.lineForce.lineShape.R.T[2,2],spring.lineForce.lineShape.R.T[2,3]},{spring.lineForce.lineShape.R.T[3,1],spring.lineForce.lineShape.R.T[3,2],spring.lineForce.lineShape.R.T[3,3]}},{spring.lineForce.lineShape.r_shape[1],spring.lineForce.lineShape.r_shape[2],spring.lineForce.lineShape.r_shape[3]});
//   spring.lineForce.lineShape.size[1] = spring.lineForce.lineShape.length;
//   spring.lineForce.lineShape.size[2] = spring.lineForce.lineShape.width;
//   spring.lineForce.lineShape.size[3] = spring.lineForce.lineShape.height;
//   spring.lineForce.lineShape.Material = Modelica.Mechanics.MultiBody.Visualizers.Advanced.Shape.PackMaterial(spring.lineForce.lineShape.color[1] / 255.0,spring.lineForce.lineShape.color[2] / 255.0,spring.lineForce.lineShape.color[3] / 255.0,spring.lineForce.lineShape.specularCoefficient);
//   spring.lineForce.lineShape.Extra = spring.lineForce.lineShape.extra;
// assert(noEvent(spring.lineForce.length > spring.lineForce.s_small),"
// The distance between the origin of frame_a and the origin of frame_b
// of a LineForceWithMass component became smaller as parameter s_small
// (= a small number, defined in the \"Advanced\" menu). The distance is
// set to s_small, although it is smaller, to avoid a division by zero
// when computing the direction of the line force. Possible reasons
// for this situation:
// - At initial time the distance may already be zero: Change the initial
//   positions of the bodies connected by this element.
// - Hardware stops are not modeled or are modeled not stiff enough.
//   Include stops, e.g., stiff springs, or increase the stiffness
//   if already present.
// - Another error in your model may lead to unrealistically large forces
//   and torques that would in reality destroy the stops.
// - The flange_b connector might be defined by a pre-defined motion,
//   e.g., with Modelica.Mechanics.Translational.Position and the
//   predefined flange_b.s is zero or negative.
// ");
//   spring.lineForce.r_rel_0[1] = spring.lineForce.frame_b.r_0[1] - spring.lineForce.frame_a.r_0[1];
//   spring.lineForce.r_rel_0[2] = spring.lineForce.frame_b.r_0[2] - spring.lineForce.frame_a.r_0[2];
//   spring.lineForce.r_rel_0[3] = spring.lineForce.frame_b.r_0[3] - spring.lineForce.frame_a.r_0[3];
//   spring.lineForce.length = Modelica.Math.Vectors.length({spring.lineForce.r_rel_0[1],spring.lineForce.r_rel_0[2],spring.lineForce.r_rel_0[3]});
//   spring.lineForce.flange_a.s = 0.0;
//   spring.lineForce.flange_b.s = spring.lineForce.length;
//   spring.lineForce.e_rel_0[1] = spring.lineForce.r_rel_0[1] / Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(spring.lineForce.length,spring.lineForce.s_small);
//   spring.lineForce.e_rel_0[2] = spring.lineForce.r_rel_0[2] / Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(spring.lineForce.length,spring.lineForce.s_small);
//   spring.lineForce.e_rel_0[3] = spring.lineForce.r_rel_0[3] / Modelica.Mechanics.MultiBody.Frames.Internal.maxWithoutEvent(spring.lineForce.length,spring.lineForce.s_small);
//   spring.lineForce.fa = spring.lineForce.flange_a.f;
//   spring.lineForce.fb = spring.lineForce.flange_b.f;
//   spring.lineForce.r_CM_0[1] = 0.0;
//   spring.lineForce.r_CM_0[2] = 0.0;
//   spring.lineForce.r_CM_0[3] = 0.0;
//   spring.lineForce.v_CM_0[1] = 0.0;
//   spring.lineForce.v_CM_0[2] = 0.0;
//   spring.lineForce.v_CM_0[3] = 0.0;
//   spring.lineForce.ag_CM_0[1] = 0.0;
//   spring.lineForce.ag_CM_0[2] = 0.0;
//   spring.lineForce.ag_CM_0[3] = 0.0;
//   spring.lineForce.frame_a.f = -Modelica.Mechanics.MultiBody.Frames.resolve2(spring.lineForce.frame_a.R,{spring.lineForce.fa * spring.lineForce.e_rel_0[1],spring.lineForce.fa * spring.lineForce.e_rel_0[2],spring.lineForce.fa * spring.lineForce.e_rel_0[3]});
//   spring.lineForce.frame_b.f = -Modelica.Mechanics.MultiBody.Frames.resolve2(spring.lineForce.frame_b.R,{spring.lineForce.fb * spring.lineForce.e_rel_0[1],spring.lineForce.fb * spring.lineForce.e_rel_0[2],spring.lineForce.fb * spring.lineForce.e_rel_0[3]});
//   if true then
//   spring.lineForce.frame_a.R.w[3] = 0.0;
//   spring.lineForce.frame_a.R.w[2] = 0.0;
//   spring.lineForce.frame_a.R.w[1] = 0.0;
//   spring.lineForce.frame_a.R.T[3,3] = 1.0;
//   spring.lineForce.frame_a.R.T[3,2] = 0.0;
//   spring.lineForce.frame_a.R.T[3,1] = 0.0;
//   spring.lineForce.frame_a.R.T[2,3] = 0.0;
//   spring.lineForce.frame_a.R.T[2,2] = 1.0;
//   spring.lineForce.frame_a.R.T[2,1] = 0.0;
//   spring.lineForce.frame_a.R.T[1,3] = 0.0;
//   spring.lineForce.frame_a.R.T[1,2] = 0.0;
//   spring.lineForce.frame_a.R.T[1,1] = 1.0;
//   else
//   spring.lineForce.frame_a.t[1] = 0.0;
//   spring.lineForce.frame_a.t[2] = 0.0;
//   spring.lineForce.frame_a.t[3] = 0.0;
//   end if;
//   if true then
//   spring.lineForce.frame_b.R.w[3] = 0.0;
//   spring.lineForce.frame_b.R.w[2] = 0.0;
//   spring.lineForce.frame_b.R.w[1] = 0.0;
//   spring.lineForce.frame_b.R.T[3,3] = 1.0;
//   spring.lineForce.frame_b.R.T[3,2] = 0.0;
//   spring.lineForce.frame_b.R.T[3,1] = 0.0;
//   spring.lineForce.frame_b.R.T[2,3] = 0.0;
//   spring.lineForce.frame_b.R.T[2,2] = 1.0;
//   spring.lineForce.frame_b.R.T[2,1] = 0.0;
//   spring.lineForce.frame_b.R.T[1,3] = 0.0;
//   spring.lineForce.frame_b.R.T[1,2] = 0.0;
//   spring.lineForce.frame_b.R.T[1,1] = 1.0;
//   else
//   spring.lineForce.frame_b.t[1] = 0.0;
//   spring.lineForce.frame_b.t[2] = 0.0;
//   spring.lineForce.frame_b.t[3] = 0.0;
//   end if;
// assert(true,"Connector frame_a of component is not connected");
// assert(true,"Connector frame_b of component is not connected");
//   spring.spring.f = spring.spring.c * (spring.spring.s_rel - spring.spring.s_rel0);
//   spring.spring.s_rel = spring.spring.flange_b.s - spring.spring.flange_a.s;
//   spring.spring.flange_b.f = spring.spring.f;
//   spring.spring.flange_a.f = -spring.spring.f;
// assert(true,"Connector frame_a of component is not connected");
// assert(true,"Connector frame_b of component is not connected");
//   spring.spring.flange_a.f + spring.lineForce.flange_a.f = 0.0;
// spring.spring.flange_a.s = spring.lineForce.flange_a.s;
//   spring.spring.flange_b.f + spring.lineForce.flange_b.f = 0.0;
// spring.spring.flange_b.s = spring.lineForce.flange_b.s;
//   spring.lineForce.frame_b.t[1] + (-spring.frame_b.t[1]) = 0.0;
//   spring.lineForce.frame_b.t[2] + (-spring.frame_b.t[2]) = 0.0;
//   spring.lineForce.frame_b.t[3] + (-spring.frame_b.t[3]) = 0.0;
//   spring.lineForce.frame_b.f[1] + (-spring.frame_b.f[1]) = 0.0;
//   spring.lineForce.frame_b.f[2] + (-spring.frame_b.f[2]) = 0.0;
//   spring.lineForce.frame_b.f[3] + (-spring.frame_b.f[3]) = 0.0;
// spring.lineForce.frame_b.R.w[1] = spring.frame_b.R.w[1];
// spring.lineForce.frame_b.R.w[2] = spring.frame_b.R.w[2];
// spring.lineForce.frame_b.R.w[3] = spring.frame_b.R.w[3];
// spring.lineForce.frame_b.R.T[1,1] = spring.frame_b.R.T[1,1];
// spring.lineForce.frame_b.R.T[1,2] = spring.frame_b.R.T[1,2];
// spring.lineForce.frame_b.R.T[1,3] = spring.frame_b.R.T[1,3];
// spring.lineForce.frame_b.R.T[2,1] = spring.frame_b.R.T[2,1];
// spring.lineForce.frame_b.R.T[2,2] = spring.frame_b.R.T[2,2];
// spring.lineForce.frame_b.R.T[2,3] = spring.frame_b.R.T[2,3];
// spring.lineForce.frame_b.R.T[3,1] = spring.frame_b.R.T[3,1];
// spring.lineForce.frame_b.R.T[3,2] = spring.frame_b.R.T[3,2];
// spring.lineForce.frame_b.R.T[3,3] = spring.frame_b.R.T[3,3];
// spring.lineForce.frame_b.r_0[1] = spring.frame_b.r_0[1];
// spring.lineForce.frame_b.r_0[2] = spring.frame_b.r_0[2];
// spring.lineForce.frame_b.r_0[3] = spring.frame_b.r_0[3];
//   spring.lineForce.frame_a.t[1] + (-spring.frame_a.t[1]) = 0.0;
//   spring.lineForce.frame_a.t[2] + (-spring.frame_a.t[2]) = 0.0;
//   spring.lineForce.frame_a.t[3] + (-spring.frame_a.t[3]) = 0.0;
//   spring.lineForce.frame_a.f[1] + (-spring.frame_a.f[1]) = 0.0;
//   spring.lineForce.frame_a.f[2] + (-spring.frame_a.f[2]) = 0.0;
//   spring.lineForce.frame_a.f[3] + (-spring.frame_a.f[3]) = 0.0;
// spring.lineForce.frame_a.R.w[1] = spring.frame_a.R.w[1];
// spring.lineForce.frame_a.R.w[2] = spring.frame_a.R.w[2];
// spring.lineForce.frame_a.R.w[3] = spring.frame_a.R.w[3];
// spring.lineForce.frame_a.R.T[1,1] = spring.frame_a.R.T[1,1];
// spring.lineForce.frame_a.R.T[1,2] = spring.frame_a.R.T[1,2];
// spring.lineForce.frame_a.R.T[1,3] = spring.frame_a.R.T[1,3];
// spring.lineForce.frame_a.R.T[2,1] = spring.frame_a.R.T[2,1];
// spring.lineForce.frame_a.R.T[2,2] = spring.frame_a.R.T[2,2];
// spring.lineForce.frame_a.R.T[2,3] = spring.frame_a.R.T[2,3];
// spring.lineForce.frame_a.R.T[3,1] = spring.frame_a.R.T[3,1];
// spring.lineForce.frame_a.R.T[3,2] = spring.frame_a.R.T[3,2];
// spring.lineForce.frame_a.R.T[3,3] = spring.frame_a.R.T[3,3];
// spring.lineForce.frame_a.r_0[1] = spring.frame_a.r_0[1];
// spring.lineForce.frame_a.r_0[2] = spring.frame_a.r_0[2];
// spring.lineForce.frame_a.r_0[3] = spring.frame_a.r_0[3];
//   spring.frame_b.t[1] + body4.frame_a.t[1] = 0.0;
//   spring.frame_b.t[2] + body4.frame_a.t[2] = 0.0;
//   spring.frame_b.t[3] + body4.frame_a.t[3] = 0.0;
//   spring.frame_b.f[1] + body4.frame_a.f[1] = 0.0;
//   spring.frame_b.f[2] + body4.frame_a.f[2] = 0.0;
//   spring.frame_b.f[3] + body4.frame_a.f[3] = 0.0;
// spring.frame_b.R.w[1] = body4.frame_a.R.w[1];
// spring.frame_b.R.w[2] = body4.frame_a.R.w[2];
// spring.frame_b.R.w[3] = body4.frame_a.R.w[3];
// spring.frame_b.R.T[1,1] = body4.frame_a.R.T[1,1];
// spring.frame_b.R.T[1,2] = body4.frame_a.R.T[1,2];
// spring.frame_b.R.T[1,3] = body4.frame_a.R.T[1,3];
// spring.frame_b.R.T[2,1] = body4.frame_a.R.T[2,1];
// spring.frame_b.R.T[2,2] = body4.frame_a.R.T[2,2];
// spring.frame_b.R.T[2,3] = body4.frame_a.R.T[2,3];
// spring.frame_b.R.T[3,1] = body4.frame_a.R.T[3,1];
// spring.frame_b.R.T[3,2] = body4.frame_a.R.T[3,2];
// spring.frame_b.R.T[3,3] = body4.frame_a.R.T[3,3];
// spring.frame_b.r_0[1] = body4.frame_a.r_0[1];
// spring.frame_b.r_0[2] = body4.frame_a.r_0[2];
// spring.frame_b.r_0[3] = body4.frame_a.r_0[3];
//   spring.frame_a.t[1] + body3.frame_a.t[1] = 0.0;
//   spring.frame_a.t[2] + body3.frame_a.t[2] = 0.0;
//   spring.frame_a.t[3] + body3.frame_a.t[3] = 0.0;
//   spring.frame_a.f[1] + body3.frame_a.f[1] = 0.0;
//   spring.frame_a.f[2] + body3.frame_a.f[2] = 0.0;
//   spring.frame_a.f[3] + body3.frame_a.f[3] = 0.0;
// spring.frame_a.R.w[1] = body3.frame_a.R.w[1];
// spring.frame_a.R.w[2] = body3.frame_a.R.w[2];
// spring.frame_a.R.w[3] = body3.frame_a.R.w[3];
// spring.frame_a.R.T[1,1] = body3.frame_a.R.T[1,1];
// spring.frame_a.R.T[1,2] = body3.frame_a.R.T[1,2];
// spring.frame_a.R.T[1,3] = body3.frame_a.R.T[1,3];
// spring.frame_a.R.T[2,1] = body3.frame_a.R.T[2,1];
// spring.frame_a.R.T[2,2] = body3.frame_a.R.T[2,2];
// spring.frame_a.R.T[2,3] = body3.frame_a.R.T[2,3];
// spring.frame_a.R.T[3,1] = body3.frame_a.R.T[3,1];
// spring.frame_a.R.T[3,2] = body3.frame_a.R.T[3,2];
// spring.frame_a.R.T[3,3] = body3.frame_a.R.T[3,3];
// spring.frame_a.r_0[1] = body3.frame_a.r_0[1];
// spring.frame_a.r_0[2] = body3.frame_a.r_0[2];
// spring.frame_a.r_0[3] = body3.frame_a.r_0[3];
//   body2.frame_a.f[1] = 0.0;
//   body2.frame_a.f[2] = 0.0;
//   body2.frame_a.f[3] = 0.0;
//   body2.frame_a.t[1] = 0.0;
//   body2.frame_a.t[2] = 0.0;
//   body2.frame_a.t[3] = 0.0;
//   body1.frame_a.f[1] = 0.0;
//   body1.frame_a.f[2] = 0.0;
//   body1.frame_a.f[3] = 0.0;
//   body1.frame_a.t[1] = 0.0;
//   body1.frame_a.t[2] = 0.0;
//   body1.frame_a.t[3] = 0.0;
//   world.frame_b.f[1] = 0.0;
//   world.frame_b.f[2] = 0.0;
//   world.frame_b.f[3] = 0.0;
//   world.frame_b.t[1] = 0.0;
//   world.frame_b.t[2] = 0.0;
//   world.frame_b.t[3] = 0.0;
// end Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses;
// "
// ""
// "Check of Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses completed successfully.
// 
// 
// Class Modelica.Mechanics.MultiBody.Examples.Elementary.PointGravityWithPointMasses has 1569 equation(s) and 1569 variable(s).
// 935 of these are trivial equation(s).
// "
// ""
// 0
// endResult
