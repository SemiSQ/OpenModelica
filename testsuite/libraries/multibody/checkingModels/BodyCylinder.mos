// name:     Modelica3.x.Mechanics.MultiBody.Parts.BodyCylinder
// keywords: multibody, balancing, instantiation
// status:   correct
// teardown_command: rm -f *.so *.dll *.log *.c* *.makefile *.libs
// 
//  Modelica MultiBody 3.x: instantiation and balance checking
//

loadFile("BodyCylinderTotal.mo");
getErrorString();
instantiateModel(Modelica.Mechanics.MultiBody.Parts.BodyCylinder);
getErrorString();
checkModel(Modelica.Mechanics.MultiBody.Parts.BodyCylinder);
getErrorString();

// Result:
// true
// ""
// "function Modelica.Math.Vectors.length \"Inline before index reduction\" \"Return length of a vectorReturn length of a vector (better as norm(), if further symbolic processing is performed)\"
//   input Real[:] v \"Vector\";
//   output Real result \"Length of vector v\";
// algorithm
//   result := sqrt(v * v);
// end Modelica.Math.Vectors.length;
// 
// function Modelica.Math.Vectors.normalize \"Inline before index reduction\" \"Return normalized vector such that length = 1Return normalized vector such that length = 1 and prevent zero-division for zero vector\"
//   input Real[:] v \"Vector\";
//   input Real eps = 1e-13 \"if |v| < eps then result = v/eps\";
//   output Real[size(v,1)] result \"Input vector v normalized to length=1\";
// algorithm
//   result := if Modelica.Math.Vectors.length(v) >= eps then v / Modelica.Math.Vectors.length(v) else v / eps;
// end Modelica.Math.Vectors.normalize;
// 
// function Modelica.Math.asin
//   input Real u;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\";
// end Modelica.Math.asin;
// 
// function Modelica.Math.atan2
//   input Real u1;
//   input Real u2;
//   output Real y(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
// 
//   external \"C\";
// end Modelica.Math.atan2;
// 
// function Modelica.Math.cos
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\";
// end Modelica.Math.cos;
// 
// function Modelica.Math.sin
//   input Real u(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\");
//   output Real y;
// 
//   external \"C\";
// end Modelica.Math.sin;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.resolve1_der \"Inline before index reduction\" \"Derivative of function Frames.resolve1(..)\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector resolved in frame 2\";
//   input Real[3] v2_der \"= der(v2)\";
//   output Real[3] v1_der \"Derivative of vector v resolved in frame 1\";
// algorithm
//   v1_der := Modelica.Mechanics.MultiBody.Frames.resolve1(R,{v2_der[1] + R.w[2] * v2[3] - R.w[3] * v2[2],v2_der[2] + R.w[3] * v2[1] - R.w[1] * v2[3],v2_der[3] + R.w[1] * v2[2] - R.w[2] * v2[1]});
// end Modelica.Mechanics.MultiBody.Frames.Internal.resolve1_der;
// 
// function Modelica.Mechanics.MultiBody.Frames.Internal.resolve2_der \"Inline before index reduction\" \"Derivative of function Frames.resolve2(..)\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector resolved in frame 1\";
//   input Real[3] v1_der \"= der(v1)\";
//   output Real[3] v2_der \"Derivative of vector v resolved in frame 2\";
// algorithm
//   v2_der := Modelica.Mechanics.MultiBody.Frames.resolve2(R,{v1_der[1],v1_der[2],v1_der[3]}) - cross({R.w[1],R.w[2],R.w[3]},Modelica.Mechanics.MultiBody.Frames.resolve2(R,{v1[1],v1[2],v1[3]}));
// end Modelica.Mechanics.MultiBody.Frames.Internal.resolve2_der;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation \"Automatically generated record constructor for Modelica.Mechanics.MultiBody.Frames.Orientation\"
//   input Real[3, 3] T;
//   input Real(quantity=\"AngularVelocity\", unit=\"rad/s\")[3] w;
//   output Orientation res;
// end Modelica.Mechanics.MultiBody.Frames.Orientation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint \"Inline before index reduction\" \"Return the constraint residues to express that two frames have the same orientation\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R2 \"Orientation object to rotate frame 0 into frame 2\";
//   output Real[3] residue \"The rotation angles around x-, y-, and z-axis of frame 1 to rotate frame 1 into frame 2 for a small rotation (should be zero)\";
// algorithm
//   residue := {atan2((R1.T[1,2] * R1.T[2,3] - R1.T[1,3] * R1.T[2,2]) * R2.T[2,1] + (R1.T[1,3] * R1.T[2,1] - R1.T[1,1] * R1.T[2,3]) * R2.T[2,2] + (R1.T[1,1] * R1.T[2,2] - R1.T[1,2] * R1.T[2,1]) * R2.T[2,3],R1.T[1,1] * R2.T[1,1] + R1.T[1,2] * R2.T[1,2] + R1.T[1,3] * R2.T[1,3]),atan2((R1.T[1,3] * R1.T[2,2] - R1.T[1,2] * R1.T[2,3]) * R2.T[1,1] + (R1.T[1,1] * R1.T[2,3] - R1.T[1,3] * R1.T[2,1]) * R2.T[1,2] + (R1.T[1,2] * R1.T[2,1] - R1.T[1,1] * R1.T[2,2]) * R2.T[1,3],R1.T[2,1] * R2.T[2,1] + R1.T[2,2] * R2.T[2,2] + R1.T[2,3] * R2.T[2,3]),atan2(R1.T[2,1] * R2.T[1,1] + R1.T[2,2] * R2.T[1,2] + R1.T[2,3] * R2.T[1,3],R1.T[3,1] * R2.T[3,1] + R1.T[3,2] * R2.T[3,2] + R1.T[3,3] * R2.T[3,3])};
// end Modelica.Mechanics.MultiBody.Frames.Orientation.equalityConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2 \"Inline before index reduction\" \"Compute angular velocity resolved in frame 2 from quaternions orientation object and its derivative\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[4] der_Q(unit = \"1/s\") \"Derivative of Q\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {2.0 * (Q[4] * der_Q[1] + Q[3] * der_Q[2] + -Q[2] * der_Q[3] + -Q[1] * der_Q[4]),2.0 * (-Q[3] * der_Q[1] + Q[4] * der_Q[2] + Q[1] * der_Q[3] + -Q[2] * der_Q[4]),2.0 * (Q[2] * der_Q[1] + -Q[1] * der_Q[2] + Q[4] * der_Q[3] + -Q[3] * der_Q[4])};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T \"Return quaternions orientation object Q from transformation matrix T\"
//   input Real[3, 3] T \"Transformation matrix to transform vector from frame 1 to frame 2 (v2=T*v1)\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for Q (there are 2 solutions; the one close to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2 (Q and -Q have same transformation matrix)\";
//   protected Real paux;
//   protected Real paux4;
//   protected Real c1;
//   protected Real c2;
//   protected Real c3;
//   protected Real c4;
//   protected constant Real p4limit = 0.1;
//   protected constant Real c4limit = 0.04;
// algorithm
//   c1 := 1.0 + T[1,1] + -T[2,2] - T[3,3];
//   c2 := 1.0 + T[2,2] + -T[1,1] - T[3,3];
//   c3 := 1.0 + T[3,3] + -T[1,1] - T[2,2];
//   c4 := 1.0 + T[1,1] + T[2,2] + T[3,3];
//   if c4 > 0.04 or c4 > c1 and c4 > c2 and c4 > c3 then
//     paux := sqrt(c4) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[2,3] - T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4,(T[1,2] - T[2,1]) / paux4,paux};
//   elseif c1 > c2 and c1 > c3 and c1 > c4 then
//     paux := sqrt(c1) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {paux,(T[1,2] + T[2,1]) / paux4,(T[1,3] + T[3,1]) / paux4,(T[2,3] - T[3,2]) / paux4};
//   elseif c2 > c1 and c2 > c3 and c2 > c4 then
//     paux := sqrt(c2) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,2] + T[2,1]) / paux4,paux,(T[2,3] + T[3,2]) / paux4,(T[3,1] - T[1,3]) / paux4};
//   else
//     paux := sqrt(c3) / 2.0;
//     paux4 := 4.0 * paux;
//     Q := {(T[1,3] + T[3,1]) / paux4,(T[2,3] + T[3,2]) / paux4,paux,(T[1,2] - T[2,1]) / paux4};
//   end if;
//   if Q[1] * Q_guess[1] + Q[2] * Q_guess[2] + Q[3] * Q_guess[3] + Q[4] * Q_guess[4] < 0.0 then
//     Q := -{Q[1],Q[2],Q[3],Q[4]};
//   end if;
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation \"Inline before index reduction\" \"Return quaternions orientation object that does not rotate a frame\"
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := {0.0,0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint \"Inline before index reduction\" \"Return residues of orientation constraints (shall be zero)\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   output Real[1] residue \"Residue constraint (shall be zero)\";
// algorithm
//   residue := {Q[1] ^ 2.0 + Q[2] ^ 2.0 + Q[3] ^ 2.0 + Q[4] ^ 2.0 + -1.0};
// end Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation \"Inline before index reduction\" \"Return absolute orientation object from another absolute and a relative orientation object\"
//   input Real[3, 3] T1 \"Orientation object to rotate frame 0 into frame 1\";
//   input Real[3, 3] T_rel \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3, 3] T2 \"Orientation object to rotate frame 0 into frame 2\";
// algorithm
//   T2 := <matrix>[T_rel[1,1] * T1[1,1] + T_rel[1,2] * T1[2,1] + T_rel[1,3] * T1[3,1],T_rel[1,1] * T1[1,2] + T_rel[1,2] * T1[2,2] + T_rel[1,3] * T1[3,2],T_rel[1,1] * T1[1,3] + T_rel[1,2] * T1[2,3] + T_rel[1,3] * T1[3,3];T_rel[2,1] * T1[1,1] + T_rel[2,2] * T1[2,1] + T_rel[2,3] * T1[3,1],T_rel[2,1] * T1[1,2] + T_rel[2,2] * T1[2,2] + T_rel[2,3] * T1[3,2],T_rel[2,1] * T1[1,3] + T_rel[2,2] * T1[2,3] + T_rel[2,3] * T1[3,3];T_rel[3,1] * T1[1,1] + T_rel[3,2] * T1[2,1] + T_rel[3,3] * T1[3,1],T_rel[3,1] * T1[1,2] + T_rel[3,2] * T1[2,2] + T_rel[3,3] * T1[3,2],T_rel[3,1] * T1[1,3] + T_rel[3,2] * T1[2,3] + T_rel[3,3] * T1[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation \"Inline before index reduction\" \"Return rotation object to rotate around one frame axis\"
//   input Integer axis(min = 1, max = 3) \"Rotate around 'axis' of frame 1\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along 'axis' of frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := if axis == 1 then <matrix>[1.0,0.0,0.0;0.0,cos(angle),sin(angle);0.0,-sin(angle),cos(angle)] else if axis == 2 then <matrix>[cos(angle),0.0,-sin(angle);0.0,1.0,0.0;sin(angle),0.0,cos(angle)] else <matrix>[cos(angle),sin(angle),0.0;-sin(angle),cos(angle),0.0;0.0,0.0,1.0];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy \"Return orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 1e-06 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   T := <matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation \"Inline before index reduction\" \"Return orientation object of a planar rotation\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation (must have length=1)\";
//   input Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e\";
//   output Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   T := <matrix>[e[1] * e[1] + cos(angle) * (1.0 - e[1] * e[1]),(e[1] * e[2] + cos(angle) * -e[1] * e[2]) - -sin(angle) * e[3],(e[1] * e[3] + cos(angle) * -e[1] * e[3]) - sin(angle) * e[2];(e[2] * e[1] + cos(angle) * -e[2] * e[1]) - sin(angle) * e[3],e[2] * e[2] + cos(angle) * (1.0 - e[2] * e[2]),(e[2] * e[3] + cos(angle) * -e[2] * e[3]) - -sin(angle) * e[1];(e[3] * e[1] + cos(angle) * -e[3] * e[1]) - -sin(angle) * e[2],(e[3] * e[2] + cos(angle) * -e[3] * e[2]) - sin(angle) * e[1],e[3] * e[3] + cos(angle) * (1.0 - e[3] * e[3])];
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1 \"Inline before index reduction\" \"Transform vector from frame 2 to frame 1\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {T[1,1] * v2[1] + T[2,1] * v2[2] + T[3,1] * v2[3],T[1,2] * v2[1] + T[2,2] * v2[2] + T[3,2] * v2[3],T[1,3] * v2[1] + T[2,3] * v2[2] + T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2 \"Inline before index reduction\" \"Transform vector from frame 1 to frame 2\"
//   input Real[3, 3] T \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {T[1,1] * v1[1] + T[1,2] * v1[2] + T[1,3] * v1[3],T[2,1] * v1[1] + T[2,2] * v1[2] + T[2,3] * v1[3],T[3,1] * v1[1] + T[3,2] * v1[2] + T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.angularVelocity2 \"Inline before index reduction\" \"Return angular velocity resolved in frame 2 from orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   output Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity of frame 2 with respect to frame 1 resolved in frame 2\";
// algorithm
//   w := {R.w[1],R.w[2],R.w[3]};
// end Modelica.Mechanics.MultiBody.Frames.angularVelocity2;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotations \"Inline before index reduction\" \"Return fixed rotation object to rotate in sequence around fixed angles along 3 axes\"
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence'\";
//   input Real[3] der_angles(quantity = \"AngularVelocity\", unit = \"rad/s\") \"= der(angles)\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[1],angles[1]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[3]) * der_angles[3] + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[2]) * der_angles[2]) + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[3],angles[3]) * Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.axisRotation(sequence[2],angles[2]),Modelica.Mechanics.MultiBody.Frames.axis(sequence[1]) * der_angles[1]));
// end Modelica.Mechanics.MultiBody.Frames.axesRotations;
// 
// function Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles \"Return the 3 angles to rotate in sequence around 3 axes to construct the given orientation object\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Integer[3] sequence = {1,2,3} \"Sequence of rotations from frame 1 to frame 2 along axis sequence[i]\";
//   input Real guessAngle1(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Select angles[1] such that |angles[1] - guessAngle1| is a minimum\";
//   output Real[3] angles(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angles around the axes defined in 'sequence' such that R=Frames.axesRotation(sequence,angles); -pi < angles[i] <= pi\";
//   protected Real[3] e1_1(unit = \"1\") \"First rotation axis, resolved in frame 1\";
//   protected Real[3] e2_1a(unit = \"1\") \"Second rotation axis, resolved in frame 1a\";
//   protected Real[3] e3_1(unit = \"1\") \"Third rotation axis, resolved in frame 1\";
//   protected Real[3] e3_2(unit = \"1\") \"Third rotation axis, resolved in frame 2\";
//   protected Real A \"Coefficient A in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real B \"Coefficient B in the equation A*cos(angles[1])+B*sin(angles[1]) = 0\";
//   protected Real angle_1a(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 1 for angles[1]\";
//   protected Real angle_1b(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Solution 2 for angles[1]\";
//   protected Real[3, 3] T_1a \"Orientation object to rotate frame 1 into frame 1a\";
// algorithm
//   assert( sequence[1] <> sequence[2] and sequence[2] <> sequence[3], \"input argument 'sequence[1:3]' is not valid\");
//   e1_1 := if sequence[1] == 1 then {1.0,0.0,0.0} else if sequence[1] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e2_1a := if sequence[2] == 1 then {1.0,0.0,0.0} else if sequence[2] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   e3_1 := {R.T[sequence[3],1],R.T[sequence[3],2],R.T[sequence[3],3]};
//   e3_2 := if sequence[3] == 1 then {1.0,0.0,0.0} else if sequence[3] == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
//   A := e2_1a[1] * e3_1[1] + e2_1a[2] * e3_1[2] + e2_1a[3] * e3_1[3];
//   B := (e1_1[2] * e2_1a[3] - e1_1[3] * e2_1a[2]) * e3_1[1] + (e1_1[3] * e2_1a[1] - e1_1[1] * e2_1a[3]) * e3_1[2] + (e1_1[1] * e2_1a[2] - e1_1[2] * e2_1a[1]) * e3_1[3];
//   if abs(A) <= 1e-12 and abs(B) <= 1e-12 then
//     angles[1] := guessAngle1;
//   else
//     angle_1a := atan2(A,-B);
//     angle_1b := atan2(-A,B);
//     angles[1] := if abs(angle_1a - guessAngle1) <= abs(angle_1b - guessAngle1) then angle_1a else angle_1b;
//   end if;
//   T_1a := Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.planarRotation({e1_1[1],e1_1[2],e1_1[3]},angles[1]);
//   angles[2] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e3_1[1],e3_1[2],e3_1[3]}),{e3_2[1],e3_2[2],e3_2[3]});
//   angles[3] := Modelica.Mechanics.MultiBody.Frames.planarRotationAngle({e3_2[1],e3_2[2],e3_2[3]},{e2_1a[1],e2_1a[2],e2_1a[3]},Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve2(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1(<matrix>[T_1a[1,1],T_1a[1,2],T_1a[1,3];T_1a[2,1],T_1a[2,2],T_1a[2,3];T_1a[3,1],T_1a[3,2],T_1a[3,3]],{e2_1a[1],e2_1a[2],e2_1a[3]})));
// end Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles;
// 
// function Modelica.Mechanics.MultiBody.Frames.axis \"Inline before index reduction\" \"Return unit vector for x-, y-, or z-axis\"
//   input Integer axis(min = 1, max = 3) \"Axis vector to be returned\";
//   output Real[3] e(unit = \"1\") \"Unit axis vector\";
// algorithm
//   e := if axis == 1 then {1.0,0.0,0.0} else if axis == 2 then {0.0,1.0,0.0} else {0.0,0.0,1.0};
// end Modelica.Mechanics.MultiBody.Frames.axis;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_Q \"Inline before index reduction\" \"Return orientation object R from quaternion orientation object Q\"
//   input Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
//   input Real[3] w(quantity = \"AngularVelocity\", unit = \"rad/s\") \"Angular velocity from frame 2 with respect to frame 1, resolved in frame 2\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[2.0 * (Q[1] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[1] * Q[2] + Q[3] * Q[4]),2.0 * (Q[1] * Q[3] - Q[2] * Q[4]);2.0 * (Q[2] * Q[1] - Q[3] * Q[4]),2.0 * (Q[2] ^ 2.0 + Q[4] ^ 2.0) + -1.0,2.0 * (Q[2] * Q[3] + Q[1] * Q[4]);2.0 * (Q[3] * Q[1] + Q[2] * Q[4]),2.0 * (Q[3] * Q[2] - Q[1] * Q[4]),2.0 * (Q[3] ^ 2.0 + Q[4] ^ 2.0) + -1.0],{w[1],w[2],w[3]});
// end Modelica.Mechanics.MultiBody.Frames.from_Q;
// 
// function Modelica.Mechanics.MultiBody.Frames.from_nxy \"Return fixed orientation object from n_x and n_y vectors\"
//   input Real[3] n_x(unit = \"1\") \"Vector in direction of x-axis of frame 2, resolved in frame 1\";
//   input Real[3] n_y(unit = \"1\") \"Vector in direction of y-axis of frame 2, resolved in frame 1\";
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   protected Real abs_n_x = sqrt(n_x[1] ^ 2.0 + (n_x[2] ^ 2.0 + n_x[3] ^ 2.0));
//   protected Real[3] e_x(unit = \"1\") = if abs_n_x < 1e-10 then {1.0,0.0,0.0} else {n_x[1] / abs_n_x,n_x[2] / abs_n_x,n_x[3] / abs_n_x};
//   protected Real[3] n_z_aux(unit = \"1\") = {e_x[2] * n_y[3] - e_x[3] * n_y[2],e_x[3] * n_y[1] - e_x[1] * n_y[3],e_x[1] * n_y[2] - e_x[2] * n_y[1]};
//   protected Real[3] n_y_aux(unit = \"1\") = if n_z_aux[1] ^ 2.0 + (n_z_aux[2] ^ 2.0 + n_z_aux[3] ^ 2.0) > 1e-06 then {n_y[1],n_y[2],n_y[3]} else if abs(e_x[1]) > 1e-06 then {0.0,1.0,0.0} else {1.0,0.0,0.0};
//   protected Real[3] e_z_aux(unit = \"1\") = {e_x[2] * n_y_aux[3] - e_x[3] * n_y_aux[2],e_x[3] * n_y_aux[1] - e_x[1] * n_y_aux[3],e_x[1] * n_y_aux[2] - e_x[2] * n_y_aux[1]};
//   protected Real[3] e_z(unit = \"1\") = {e_z_aux[1] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[2] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0)),e_z_aux[3] / sqrt(e_z_aux[1] ^ 2.0 + (e_z_aux[2] ^ 2.0 + e_z_aux[3] ^ 2.0))};
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[e_x[1],e_x[2],e_x[3];e_z[2] * e_x[3] - e_z[3] * e_x[2],e_z[3] * e_x[1] - e_z[1] * e_x[3],e_z[1] * e_x[2] - e_z[2] * e_x[1];e_z[1],e_z[2],e_z[3]],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.from_nxy;
// 
// function Modelica.Mechanics.MultiBody.Frames.nullRotation \"Inline before index reduction\" \"Return orientation object that does not rotate a frame\"
//   output Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object such that frame 1 and frame 2 are identical\";
// algorithm
//   R := Modelica.Mechanics.MultiBody.Frames.Orientation(<matrix>[1.0,0.0,0.0;0.0,1.0,0.0;0.0,0.0,1.0],{0.0,0.0,0.0});
// end Modelica.Mechanics.MultiBody.Frames.nullRotation;
// 
// function Modelica.Mechanics.MultiBody.Frames.planarRotationAngle \"Inline before index reduction\" \"Return angle of a planar rotation, given the rotation axis and the representations of a vector in frame 1 and frame 2\"
//   input Real[3] e(unit = \"1\") \"Normalized axis of rotation to rotate frame 1 around e into frame 2 (must have length=1)\";
//   input Real[3] v1 \"A vector v resolved in frame 1 (shall not be parallel to e)\";
//   input Real[3] v2 \"Vector v resolved in frame 2, i.e., v2 = resolve2(planarRotation(e,angle),v1)\";
//   output Real angle(quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") \"Rotation angle to rotate frame 1 into frame 2 along axis e in the range: -pi <= angle <= pi\";
// algorithm
//   angle := atan2((e[3] * v1[2] - e[2] * v1[3]) * v2[1] + (e[1] * v1[3] - e[3] * v1[1]) * v2[2] + (e[2] * v1[1] - e[1] * v1[2]) * v2[3],v1[1] * v2[1] + v1[2] * v2[2] + v1[3] * v2[3] - (e[1] * v1[1] + e[2] * v1[2] + e[3] * v1[3]) * (e[1] * v2[1] + e[2] * v2[2] + e[3] * v2[3]));
// end Modelica.Mechanics.MultiBody.Frames.planarRotationAngle;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve1 \"Inline after index reduction\" \"Transform vector from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v2 \"Vector in frame 2\";
//   output Real[3] v1 \"Vector in frame 1\";
// algorithm
//   v1 := {R.T[1,1] * v2[1] + R.T[2,1] * v2[2] + R.T[3,1] * v2[3],R.T[1,2] * v2[1] + R.T[2,2] * v2[2] + R.T[3,2] * v2[3],R.T[1,3] * v2[1] + R.T[2,3] * v2[2] + R.T[3,3] * v2[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve1;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolve2 \"Inline after index reduction\" \"Transform vector from frame 1 to frame 2\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3] v1 \"Vector in frame 1\";
//   output Real[3] v2 \"Vector in frame 2\";
// algorithm
//   v2 := {R.T[1,1] * v1[1] + R.T[1,2] * v1[2] + R.T[1,3] * v1[3],R.T[2,1] * v1[1] + R.T[2,2] * v1[2] + R.T[2,3] * v1[3],R.T[3,1] * v1[1] + R.T[3,2] * v1[2] + R.T[3,3] * v1[3]};
// end Modelica.Mechanics.MultiBody.Frames.resolve2;
// 
// function Modelica.Mechanics.MultiBody.Frames.resolveDyade1 \"Inline before index reduction\" \"Transform second order tensor from frame 2 to frame 1\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[3, 3] D2 \"Second order tensor resolved in frame 2\";
//   output Real[3, 3] D1 \"Second order tensor resolved in frame 1\";
// algorithm
//   D1 := <matrix>[(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,1] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,1] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,1],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,2] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,2] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,2],(R.T[1,1] * D2[1,1] + R.T[2,1] * D2[2,1] + R.T[3,1] * D2[3,1]) * R.T[1,3] + (R.T[1,1] * D2[1,2] + R.T[2,1] * D2[2,2] + R.T[3,1] * D2[3,2]) * R.T[2,3] + (R.T[1,1] * D2[1,3] + R.T[2,1] * D2[2,3] + R.T[3,1] * D2[3,3]) * R.T[3,3];(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,1] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,1] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,1],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,2] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,2] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,2],(R.T[1,2] * D2[1,1] + R.T[2,2] * D2[2,1] + R.T[3,2] * D2[3,1]) * R.T[1,3] + (R.T[1,2] * D2[1,2] + R.T[2,2] * D2[2,2] + R.T[3,2] * D2[3,2]) * R.T[2,3] + (R.T[1,2] * D2[1,3] + R.T[2,2] * D2[2,3] + R.T[3,2] * D2[3,3]) * R.T[3,3];(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,1] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,1] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,1],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,2] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,2] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,2],(R.T[1,3] * D2[1,1] + R.T[2,3] * D2[2,1] + R.T[3,3] * D2[3,1]) * R.T[1,3] + (R.T[1,3] * D2[1,2] + R.T[2,3] * D2[2,2] + R.T[3,3] * D2[3,2]) * R.T[2,3] + (R.T[1,3] * D2[1,3] + R.T[2,3] * D2[2,3] + R.T[3,3] * D2[3,3]) * R.T[3,3]];
// end Modelica.Mechanics.MultiBody.Frames.resolveDyade1;
// 
// function Modelica.Mechanics.MultiBody.Frames.to_Q \"Inline before index reduction\" \"Return quaternion orientation object Q from orientation object R\"
//   input Modelica.Mechanics.MultiBody.Frames.Orientation R \"Orientation object to rotate frame 1 into frame 2\";
//   input Real[4] Q_guess = {0.0,0.0,0.0,1.0} \"Guess value for output Q (there are 2 solutions; the one closer to Q_guess is used\";
//   output Real[4] Q \"Quaternions orientation object to rotate frame 1 into frame 2\";
// algorithm
//   Q := Modelica.Mechanics.MultiBody.Frames.Quaternions.from_T(<matrix>[R.T[1,1],R.T[1,2],R.T[1,3];R.T[2,1],R.T[2,2],R.T[2,3];R.T[3,1],R.T[3,2],R.T[3,3]],{Q_guess[1],Q_guess[2],Q_guess[3],Q_guess[4]});
// end Modelica.Mechanics.MultiBody.Frames.to_Q;
// 
// function Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration \"Gravity field acceleration depending on field type and position\"
//   input Real[3] r(quantity = \"Length\", unit = \"m\") \"Position vector from world frame to actual point, resolved in world frame\";
//   input enumeration(NoGravity, UniformGravity, PointGravity) gravityType \"Type of gravity field\";
//   input Real[3] g(quantity = \"Acceleration\", unit = \"m/s2\") \"Constant gravity acceleration, resolved in world frame, if gravityType=1\";
//   input Real mue(unit = \"m3/s2\") \"Field constant of point gravity field, if gravityType=2\";
//   output Real[3] gravity(quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration at point r, resolved in world frame\";
// algorithm
//   gravity := if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then {g[1],g[2],g[3]} else if gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.PointGravity then -{(mue * r[1]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[2]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0)),(mue * r[3]) / (Modelica.Math.Vectors.length({r[1],r[2],r[3]}) * (r[1] ^ 2.0 + r[2] ^ 2.0 + r[3] ^ 2.0))} else {0.0,0.0,0.0};
// end Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration;
// 
// function PackMaterial
//   input Real r;
//   input Real g;
//   input Real b;
//   input Real spec;
//   output Real packedMaterial;
//   Integer i1;
//   Integer i2;
//   Integer i3;
//   Integer i4;
// algorithm
//   i1 := integer(floor(99.0 * r));
//   if i1 < 0 then
//     i1 := 0;
//   end if;
//   if i1 > 99 then
//     i1 := 99;
//   end if;
//   i2 := integer(floor(99.0 * g));
//   if i2 < 0 then
//     i2 := 0;
//   end if;
//   if i2 > 99 then
//     i2 := 99;
//   end if;
//   i3 := integer(floor(99.0 * b));
//   if i3 < 0 then
//     i3 := 0;
//   end if;
//   if i3 > 99 then
//     i3 := 99;
//   end if;
//   i4 := integer(floor(9.0 * spec));
//   if i4 < 0 then
//     i4 := 0;
//   end if;
//   if i4 > 99 then
//     i4 := 9;
//   end if;
//   packedMaterial := /*REAL*/(100000 * i1 + 1000 * i2 + 10 * i3 + i4);
// end PackMaterial;
// 
// function PackShape
//   input String shape;
//   output Real packedShape;
// algorithm
//   if shape == \"box\" then
//     packedShape := 101.0;
//   elseif shape == \"sphere\" then
//     packedShape := 102.0;
//   elseif shape == \"cylinder\" then
//     packedShape := 103.0;
//   elseif shape == \"cone\" then
//     packedShape := 104.0;
//   elseif shape == \"pipe\" then
//     packedShape := 105.0;
//   elseif shape == \"beam\" then
//     packedShape := 106.0;
//   elseif shape == \"wirebox\" then
//     packedShape := 107.0;
//   elseif shape == \"gearwheel\" then
//     packedShape := 108.0;
//   elseif shape == \"pipecylinder\" then
//     packedShape := 110.0;
//   elseif shape == \"spring\" then
//     packedShape := 111.0;
//   else
//     packedShape := 200.0;
//   end if;
// end PackShape;
// 
// class Modelica.Mechanics.MultiBody.Parts.BodyCylinder
//   Real frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean animation = true \"= true, if animation shall be enabled (show cylinder between frame_a and frame_b)\";
//   parameter Real r[1](quantity = \"Length\", unit = \"m\", start = 0.1) \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real r[2](quantity = \"Length\", unit = \"m\", start = 0.0) \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real r[3](quantity = \"Length\", unit = \"m\", start = 0.0) \"Vector from frame_a to frame_b, resolved in frame_a\";
//   parameter Real r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Vector from frame_a to cylinder origin, resolved in frame_a\";
//   parameter Real innerDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 0.0 \"Inner diameter of cylinder (0 <= innerDiameter <= Diameter)\";
//   parameter Real density(quantity = \"Density\", unit = \"kg/m3\", displayUnit = \"g/cm3\", min = 0.0) = 7700.0 \"Density of cylinder (e.g., steel: 7700 .. 7900, wood : 400 .. 800)\";
//   input Integer color[1](min = 0, max = 255) = 0 \"Color of cylinder\";
//   input Integer color[2](min = 0, max = 255) = 128 \"Color of cylinder\";
//   input Integer color[3](min = 0, max = 255) = 255 \"Color of cylinder\";
//   input Real specularCoefficient = world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean angles_fixed = false \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = 0.0 \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer sequence_start[1](min = 1, max = 3) = 1 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer sequence_start[2](min = 1, max = 3) = 2 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer sequence_start[3](min = 1, max = 3) = 3 \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean w_0_fixed = false \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean z_0_fixed = false \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = 0.0 \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Boolean enforceStates = false \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean useQuaternions = true \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer sequence_angleStates[1](min = 1, max = 3) = 1 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer sequence_angleStates[2](min = 1, max = 3) = 2 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer sequence_angleStates[3](min = 1, max = 3) = 3 \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   constant Real pi = 3.14159265358979;
//   Real body.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real body.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real body.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real body.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean body.animation = false \"= true, if animation shall be enabled (show cylinder and sphere)\";
//   parameter Real body.r_CM[1](quantity = \"Length\", unit = \"m\", start = 0.0) = r_CM[1] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real body.r_CM[2](quantity = \"Length\", unit = \"m\", start = 0.0) = r_CM[2] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real body.r_CM[3](quantity = \"Length\", unit = \"m\", start = 0.0) = r_CM[3] \"Vector from frame_a to center of mass, resolved in frame_a\";
//   parameter Real body.m(quantity = \"Mass\", unit = \"kg\", min = 0.0, start = 1.0) = m \"Mass of rigid body\";
//   parameter Real body.I_11(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = I[1,1] \" (1,1) element of inertia tensor\";
//   parameter Real body.I_22(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = I[2,2] \" (2,2) element of inertia tensor\";
//   parameter Real body.I_33(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = 0.0) = I[3,3] \" (3,3) element of inertia tensor\";
//   parameter Real body.I_21(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = I[2,1] \" (2,1) element of inertia tensor\";
//   parameter Real body.I_31(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = I[3,1] \" (3,1) element of inertia tensor\";
//   parameter Real body.I_32(quantity = \"MomentOfInertia\", unit = \"kg.m2\", min = -1e+60) = I[3,2] \" (3,2) element of inertia tensor\";
//   Real body.r_0[1](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real body.r_0[2](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real body.r_0[3](quantity = \"Length\", unit = \"m\", start = 0.0, StateSelect = StateSelect.avoid) \"Position vector from origin of world frame to origin of frame_a\";
//   Real body.v_0[1](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real body.v_0[2](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real body.v_0[3](quantity = \"Velocity\", unit = \"m/s\", start = 0.0, StateSelect = StateSelect.avoid) \"Absolute velocity of frame_a, resolved in world frame (= der(r_0))\";
//   Real body.a_0[1](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real body.a_0[2](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   Real body.a_0[3](quantity = \"Acceleration\", unit = \"m/s2\", start = 0.0) \"Absolute acceleration of frame_a resolved in world frame (= der(v_0))\";
//   parameter Boolean body.angles_fixed = angles_fixed \"= true, if angles_start are used as initial values, else as guess values\";
//   parameter Real body.angles_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = angles_start[1] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real body.angles_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = angles_start[2] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Real body.angles_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = angles_start[3] \"Initial values of angles to rotate frame_a around 'sequence_start' axes into frame_b\";
//   parameter Integer body.sequence_start[1](min = 1, max = 3) = sequence_start[1] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer body.sequence_start[2](min = 1, max = 3) = sequence_start[2] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Integer body.sequence_start[3](min = 1, max = 3) = sequence_start[3] \"Sequence of rotations to rotate frame_a into frame_b at initial time\";
//   parameter Boolean body.w_0_fixed = w_0_fixed \"= true, if w_0_start are used as initial values, else as guess values\";
//   parameter Real body.w_0_start[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = w_0_start[1] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real body.w_0_start[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = w_0_start[2] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Real body.w_0_start[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = w_0_start[3] \"Initial or guess values of angular velocity of frame_a resolved in world frame\";
//   parameter Boolean body.z_0_fixed = z_0_fixed \"= true, if z_0_start are used as initial values, else as guess values\";
//   parameter Real body.z_0_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = z_0_start[1] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real body.z_0_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = z_0_start[2] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real body.z_0_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = z_0_start[3] \"Initial values of angular acceleration z_0 = der(w_0)\";
//   parameter Real body.sphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.defaultBodyDiameter \"Diameter of sphere\";
//   input Integer body.sphereColor[1](min = 0, max = 255) = 0 \"Color of sphere\";
//   input Integer body.sphereColor[2](min = 0, max = 255) = 128 \"Color of sphere\";
//   input Integer body.sphereColor[3](min = 0, max = 255) = 255 \"Color of sphere\";
//   input Integer body.cylinderColor[1](min = 0, max = 255) = body.sphereColor[1] \"Color of cylinder\";
//   input Integer body.cylinderColor[2](min = 0, max = 255) = body.sphereColor[2] \"Color of cylinder\";
//   input Integer body.cylinderColor[3](min = 0, max = 255) = body.sphereColor[3] \"Color of cylinder\";
//   input Real body.specularCoefficient = body.world.defaultSpecularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Boolean body.enforceStates = enforceStates \" = true, if absolute variables of body object shall be used as states (StateSelect.always)\";
//   parameter Boolean body.useQuaternions = useQuaternions \" = true, if quaternions shall be used as potential states otherwise use 3 angles as potential states\";
//   parameter Integer body.sequence_angleStates[1](min = 1, max = 3) = sequence_angleStates[1] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer body.sequence_angleStates[2](min = 1, max = 3) = sequence_angleStates[2] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   parameter Integer body.sequence_angleStates[3](min = 1, max = 3) = sequence_angleStates[3] \" Sequence of rotations to rotate world frame into frame_a around the 3 angles used as potential states\";
//   Real body.w_a[1](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[1], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real body.w_a[2](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[2], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real body.w_a[3](quantity = \"AngularVelocity\", unit = \"rad/s\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.w_0_start[1],body.w_0_start[2],body.w_0_start[3]})[3], fixed = body.w_0_fixed, StateSelect = StateSelect.avoid) \"Absolute angular velocity of frame_a resolved in frame_a\";
//   Real body.z_a[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[1], fixed = body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real body.z_a[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[2], fixed = body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real body.z_a[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\", start = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[3], fixed = body.z_0_fixed) \"Absolute angular acceleration of frame_a resolved in frame_a\";
//   Real body.g_0[1](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real body.g_0[2](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real body.g_0[3](quantity = \"Acceleration\", unit = \"m/s2\") \"Gravity acceleration resolved in world frame\";
//   Real body.world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real body.world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real body.world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real body.world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real body.world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real body.world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real body.world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean body.world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean body.world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean body.world.animateGravity = true \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String body.world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String body.world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) body.world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real body.world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.81 \"Constant gravity acceleration\";
//   parameter Real body.world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real body.world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real body.world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real body.world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000.0 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean body.world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean body.world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer body.world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer body.world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer body.world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer body.world.axisColor_y[1](min = 0, max = 255) = body.world.axisColor_x[1];
//   input Integer body.world.axisColor_y[2](min = 0, max = 255) = body.world.axisColor_x[2];
//   input Integer body.world.axisColor_y[3](min = 0, max = 255) = body.world.axisColor_x[3];
//   input Integer body.world.axisColor_z[1](min = 0, max = 255) = body.world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer body.world.axisColor_z[2](min = 0, max = 255) = body.world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer body.world.axisColor_z[3](min = 0, max = 255) = body.world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real body.world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real body.world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real body.world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer body.world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer body.world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer body.world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real body.world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer body.world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer body.world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer body.world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real body.world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real body.world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real body.world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real body.world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real body.world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real body.world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer body.world.ndim = if body.world.enableAnimation and body.world.animateWorld then 1 else 0;
//   parameter String body.world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Length of visual object\";
//   input Real body.world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Width of visual object\";
//   input Real body.world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Height of visual object\";
//   input Real body.world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.x_arrowLine.color[1] = Real(body.world.axisColor_x[1]) \"Color of shape\";
//   input Real body.world.x_arrowLine.color[2] = Real(body.world.axisColor_x[2]) \"Color of shape\";
//   input Real body.world.x_arrowLine.color[3] = Real(body.world.axisColor_x[3]) \"Color of shape\";
//   input Real body.world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.x_arrowLine.lengthDirection[1],body.world.x_arrowLine.lengthDirection[2],body.world.x_arrowLine.lengthDirection[3]});
//   protected Real body.world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(body.world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else body.world.x_arrowLine.lengthDirection[1] / body.world.x_arrowLine.abs_n_x;
//   protected Real body.world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(body.world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.x_arrowLine.lengthDirection[2] / body.world.x_arrowLine.abs_n_x;
//   protected Real body.world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(body.world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.x_arrowLine.lengthDirection[3] / body.world.x_arrowLine.abs_n_x;
//   protected Real body.world.x_arrowLine.n_z_aux[1](unit = \"1\") = body.world.x_arrowLine.e_x[2] * body.world.x_arrowLine.widthDirection[3] - body.world.x_arrowLine.e_x[3] * body.world.x_arrowLine.widthDirection[2];
//   protected Real body.world.x_arrowLine.n_z_aux[2](unit = \"1\") = body.world.x_arrowLine.e_x[3] * body.world.x_arrowLine.widthDirection[1] - body.world.x_arrowLine.e_x[1] * body.world.x_arrowLine.widthDirection[3];
//   protected Real body.world.x_arrowLine.n_z_aux[3](unit = \"1\") = body.world.x_arrowLine.e_x[1] * body.world.x_arrowLine.widthDirection[2] - body.world.x_arrowLine.e_x[2] * body.world.x_arrowLine.widthDirection[1];
//   protected Real body.world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]},if noEvent(body.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.x_arrowLine.n_z_aux[2] ^ 2.0 + body.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowLine.widthDirection[1],body.world.x_arrowLine.widthDirection[2],body.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]})[1];
//   protected Real body.world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]},if noEvent(body.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.x_arrowLine.n_z_aux[2] ^ 2.0 + body.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowLine.widthDirection[1],body.world.x_arrowLine.widthDirection[2],body.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]})[2];
//   protected Real body.world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]},if noEvent(body.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.x_arrowLine.n_z_aux[2] ^ 2.0 + body.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowLine.widthDirection[1],body.world.x_arrowLine.widthDirection[2],body.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowLine.e_x[1],body.world.x_arrowLine.e_x[2],body.world.x_arrowLine.e_x[3]})[3];
//   protected output Real body.world.x_arrowLine.Form;
//   output Real body.world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowLine.Material;
//   protected output Real body.world.x_arrowLine.Extra;
//   parameter String body.world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = body.world.headLength \"Length of visual object\";
//   input Real body.world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Width of visual object\";
//   input Real body.world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Height of visual object\";
//   input Real body.world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.x_arrowHead.color[1] = Real(body.world.axisColor_x[1]) \"Color of shape\";
//   input Real body.world.x_arrowHead.color[2] = Real(body.world.axisColor_x[2]) \"Color of shape\";
//   input Real body.world.x_arrowHead.color[3] = Real(body.world.axisColor_x[3]) \"Color of shape\";
//   input Real body.world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.x_arrowHead.lengthDirection[1],body.world.x_arrowHead.lengthDirection[2],body.world.x_arrowHead.lengthDirection[3]});
//   protected Real body.world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(body.world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else body.world.x_arrowHead.lengthDirection[1] / body.world.x_arrowHead.abs_n_x;
//   protected Real body.world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(body.world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.x_arrowHead.lengthDirection[2] / body.world.x_arrowHead.abs_n_x;
//   protected Real body.world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(body.world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.x_arrowHead.lengthDirection[3] / body.world.x_arrowHead.abs_n_x;
//   protected Real body.world.x_arrowHead.n_z_aux[1](unit = \"1\") = body.world.x_arrowHead.e_x[2] * body.world.x_arrowHead.widthDirection[3] - body.world.x_arrowHead.e_x[3] * body.world.x_arrowHead.widthDirection[2];
//   protected Real body.world.x_arrowHead.n_z_aux[2](unit = \"1\") = body.world.x_arrowHead.e_x[3] * body.world.x_arrowHead.widthDirection[1] - body.world.x_arrowHead.e_x[1] * body.world.x_arrowHead.widthDirection[3];
//   protected Real body.world.x_arrowHead.n_z_aux[3](unit = \"1\") = body.world.x_arrowHead.e_x[1] * body.world.x_arrowHead.widthDirection[2] - body.world.x_arrowHead.e_x[2] * body.world.x_arrowHead.widthDirection[1];
//   protected Real body.world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]},if noEvent(body.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.x_arrowHead.n_z_aux[2] ^ 2.0 + body.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowHead.widthDirection[1],body.world.x_arrowHead.widthDirection[2],body.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]})[1];
//   protected Real body.world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]},if noEvent(body.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.x_arrowHead.n_z_aux[2] ^ 2.0 + body.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowHead.widthDirection[1],body.world.x_arrowHead.widthDirection[2],body.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]})[2];
//   protected Real body.world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]},if noEvent(body.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.x_arrowHead.n_z_aux[2] ^ 2.0 + body.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_arrowHead.widthDirection[1],body.world.x_arrowHead.widthDirection[2],body.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_arrowHead.e_x[1],body.world.x_arrowHead.e_x[2],body.world.x_arrowHead.e_x[3]})[3];
//   protected output Real body.world.x_arrowHead.Form;
//   output Real body.world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_arrowHead.Material;
//   protected output Real body.world.x_arrowHead.Extra;
//   parameter String body.world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Length of visual object\";
//   input Real body.world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Width of visual object\";
//   input Real body.world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Height of visual object\";
//   input Real body.world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.y_arrowLine.color[1] = Real(body.world.axisColor_y[1]) \"Color of shape\";
//   input Real body.world.y_arrowLine.color[2] = Real(body.world.axisColor_y[2]) \"Color of shape\";
//   input Real body.world.y_arrowLine.color[3] = Real(body.world.axisColor_y[3]) \"Color of shape\";
//   input Real body.world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.y_arrowLine.lengthDirection[1],body.world.y_arrowLine.lengthDirection[2],body.world.y_arrowLine.lengthDirection[3]});
//   protected Real body.world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(body.world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else body.world.y_arrowLine.lengthDirection[1] / body.world.y_arrowLine.abs_n_x;
//   protected Real body.world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(body.world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.y_arrowLine.lengthDirection[2] / body.world.y_arrowLine.abs_n_x;
//   protected Real body.world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(body.world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.y_arrowLine.lengthDirection[3] / body.world.y_arrowLine.abs_n_x;
//   protected Real body.world.y_arrowLine.n_z_aux[1](unit = \"1\") = body.world.y_arrowLine.e_x[2] * body.world.y_arrowLine.widthDirection[3] - body.world.y_arrowLine.e_x[3] * body.world.y_arrowLine.widthDirection[2];
//   protected Real body.world.y_arrowLine.n_z_aux[2](unit = \"1\") = body.world.y_arrowLine.e_x[3] * body.world.y_arrowLine.widthDirection[1] - body.world.y_arrowLine.e_x[1] * body.world.y_arrowLine.widthDirection[3];
//   protected Real body.world.y_arrowLine.n_z_aux[3](unit = \"1\") = body.world.y_arrowLine.e_x[1] * body.world.y_arrowLine.widthDirection[2] - body.world.y_arrowLine.e_x[2] * body.world.y_arrowLine.widthDirection[1];
//   protected Real body.world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]},if noEvent(body.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.y_arrowLine.n_z_aux[2] ^ 2.0 + body.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowLine.widthDirection[1],body.world.y_arrowLine.widthDirection[2],body.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]})[1];
//   protected Real body.world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]},if noEvent(body.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.y_arrowLine.n_z_aux[2] ^ 2.0 + body.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowLine.widthDirection[1],body.world.y_arrowLine.widthDirection[2],body.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]})[2];
//   protected Real body.world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]},if noEvent(body.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.y_arrowLine.n_z_aux[2] ^ 2.0 + body.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowLine.widthDirection[1],body.world.y_arrowLine.widthDirection[2],body.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowLine.e_x[1],body.world.y_arrowLine.e_x[2],body.world.y_arrowLine.e_x[3]})[3];
//   protected output Real body.world.y_arrowLine.Form;
//   output Real body.world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowLine.Material;
//   protected output Real body.world.y_arrowLine.Extra;
//   parameter String body.world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = body.world.headLength \"Length of visual object\";
//   input Real body.world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Width of visual object\";
//   input Real body.world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Height of visual object\";
//   input Real body.world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.y_arrowHead.color[1] = Real(body.world.axisColor_y[1]) \"Color of shape\";
//   input Real body.world.y_arrowHead.color[2] = Real(body.world.axisColor_y[2]) \"Color of shape\";
//   input Real body.world.y_arrowHead.color[3] = Real(body.world.axisColor_y[3]) \"Color of shape\";
//   input Real body.world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.y_arrowHead.lengthDirection[1],body.world.y_arrowHead.lengthDirection[2],body.world.y_arrowHead.lengthDirection[3]});
//   protected Real body.world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(body.world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else body.world.y_arrowHead.lengthDirection[1] / body.world.y_arrowHead.abs_n_x;
//   protected Real body.world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(body.world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.y_arrowHead.lengthDirection[2] / body.world.y_arrowHead.abs_n_x;
//   protected Real body.world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(body.world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.y_arrowHead.lengthDirection[3] / body.world.y_arrowHead.abs_n_x;
//   protected Real body.world.y_arrowHead.n_z_aux[1](unit = \"1\") = body.world.y_arrowHead.e_x[2] * body.world.y_arrowHead.widthDirection[3] - body.world.y_arrowHead.e_x[3] * body.world.y_arrowHead.widthDirection[2];
//   protected Real body.world.y_arrowHead.n_z_aux[2](unit = \"1\") = body.world.y_arrowHead.e_x[3] * body.world.y_arrowHead.widthDirection[1] - body.world.y_arrowHead.e_x[1] * body.world.y_arrowHead.widthDirection[3];
//   protected Real body.world.y_arrowHead.n_z_aux[3](unit = \"1\") = body.world.y_arrowHead.e_x[1] * body.world.y_arrowHead.widthDirection[2] - body.world.y_arrowHead.e_x[2] * body.world.y_arrowHead.widthDirection[1];
//   protected Real body.world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]},if noEvent(body.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.y_arrowHead.n_z_aux[2] ^ 2.0 + body.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowHead.widthDirection[1],body.world.y_arrowHead.widthDirection[2],body.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]})[1];
//   protected Real body.world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]},if noEvent(body.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.y_arrowHead.n_z_aux[2] ^ 2.0 + body.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowHead.widthDirection[1],body.world.y_arrowHead.widthDirection[2],body.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]})[2];
//   protected Real body.world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]},if noEvent(body.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.y_arrowHead.n_z_aux[2] ^ 2.0 + body.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_arrowHead.widthDirection[1],body.world.y_arrowHead.widthDirection[2],body.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_arrowHead.e_x[1],body.world.y_arrowHead.e_x[2],body.world.y_arrowHead.e_x[3]})[3];
//   protected output Real body.world.y_arrowHead.Form;
//   output Real body.world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_arrowHead.Material;
//   protected output Real body.world.y_arrowHead.Extra;
//   parameter String body.world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Length of visual object\";
//   input Real body.world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Width of visual object\";
//   input Real body.world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = body.world.lineWidth \"Height of visual object\";
//   input Real body.world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.z_arrowLine.color[1] = Real(body.world.axisColor_z[1]) \"Color of shape\";
//   input Real body.world.z_arrowLine.color[2] = Real(body.world.axisColor_z[2]) \"Color of shape\";
//   input Real body.world.z_arrowLine.color[3] = Real(body.world.axisColor_z[3]) \"Color of shape\";
//   input Real body.world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.z_arrowLine.lengthDirection[1],body.world.z_arrowLine.lengthDirection[2],body.world.z_arrowLine.lengthDirection[3]});
//   protected Real body.world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(body.world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else body.world.z_arrowLine.lengthDirection[1] / body.world.z_arrowLine.abs_n_x;
//   protected Real body.world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(body.world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.z_arrowLine.lengthDirection[2] / body.world.z_arrowLine.abs_n_x;
//   protected Real body.world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(body.world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else body.world.z_arrowLine.lengthDirection[3] / body.world.z_arrowLine.abs_n_x;
//   protected Real body.world.z_arrowLine.n_z_aux[1](unit = \"1\") = body.world.z_arrowLine.e_x[2] * body.world.z_arrowLine.widthDirection[3] - body.world.z_arrowLine.e_x[3] * body.world.z_arrowLine.widthDirection[2];
//   protected Real body.world.z_arrowLine.n_z_aux[2](unit = \"1\") = body.world.z_arrowLine.e_x[3] * body.world.z_arrowLine.widthDirection[1] - body.world.z_arrowLine.e_x[1] * body.world.z_arrowLine.widthDirection[3];
//   protected Real body.world.z_arrowLine.n_z_aux[3](unit = \"1\") = body.world.z_arrowLine.e_x[1] * body.world.z_arrowLine.widthDirection[2] - body.world.z_arrowLine.e_x[2] * body.world.z_arrowLine.widthDirection[1];
//   protected Real body.world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]},if noEvent(body.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.z_arrowLine.n_z_aux[2] ^ 2.0 + body.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowLine.widthDirection[1],body.world.z_arrowLine.widthDirection[2],body.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]})[1];
//   protected Real body.world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]},if noEvent(body.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.z_arrowLine.n_z_aux[2] ^ 2.0 + body.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowLine.widthDirection[1],body.world.z_arrowLine.widthDirection[2],body.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]})[2];
//   protected Real body.world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]},if noEvent(body.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (body.world.z_arrowLine.n_z_aux[2] ^ 2.0 + body.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowLine.widthDirection[1],body.world.z_arrowLine.widthDirection[2],body.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(body.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowLine.e_x[1],body.world.z_arrowLine.e_x[2],body.world.z_arrowLine.e_x[3]})[3];
//   protected output Real body.world.z_arrowLine.Form;
//   output Real body.world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowLine.Material;
//   protected output Real body.world.z_arrowLine.Extra;
//   parameter String body.world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = body.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = body.world.headLength \"Length of visual object\";
//   input Real body.world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Width of visual object\";
//   input Real body.world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = body.world.headWidth \"Height of visual object\";
//   input Real body.world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.z_arrowHead.color[1] = Real(body.world.axisColor_z[1]) \"Color of shape\";
//   input Real body.world.z_arrowHead.color[2] = Real(body.world.axisColor_z[2]) \"Color of shape\";
//   input Real body.world.z_arrowHead.color[3] = Real(body.world.axisColor_z[3]) \"Color of shape\";
//   input Real body.world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.z_arrowHead.lengthDirection[1],body.world.z_arrowHead.lengthDirection[2],body.world.z_arrowHead.lengthDirection[3]});
//   protected Real body.world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(body.world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else body.world.z_arrowHead.lengthDirection[1] / body.world.z_arrowHead.abs_n_x;
//   protected Real body.world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(body.world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.z_arrowHead.lengthDirection[2] / body.world.z_arrowHead.abs_n_x;
//   protected Real body.world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(body.world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else body.world.z_arrowHead.lengthDirection[3] / body.world.z_arrowHead.abs_n_x;
//   protected Real body.world.z_arrowHead.n_z_aux[1](unit = \"1\") = body.world.z_arrowHead.e_x[2] * body.world.z_arrowHead.widthDirection[3] - body.world.z_arrowHead.e_x[3] * body.world.z_arrowHead.widthDirection[2];
//   protected Real body.world.z_arrowHead.n_z_aux[2](unit = \"1\") = body.world.z_arrowHead.e_x[3] * body.world.z_arrowHead.widthDirection[1] - body.world.z_arrowHead.e_x[1] * body.world.z_arrowHead.widthDirection[3];
//   protected Real body.world.z_arrowHead.n_z_aux[3](unit = \"1\") = body.world.z_arrowHead.e_x[1] * body.world.z_arrowHead.widthDirection[2] - body.world.z_arrowHead.e_x[2] * body.world.z_arrowHead.widthDirection[1];
//   protected Real body.world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]},if noEvent(body.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.z_arrowHead.n_z_aux[2] ^ 2.0 + body.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowHead.widthDirection[1],body.world.z_arrowHead.widthDirection[2],body.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]})[1];
//   protected Real body.world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]},if noEvent(body.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.z_arrowHead.n_z_aux[2] ^ 2.0 + body.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowHead.widthDirection[1],body.world.z_arrowHead.widthDirection[2],body.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]})[2];
//   protected Real body.world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]},if noEvent(body.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (body.world.z_arrowHead.n_z_aux[2] ^ 2.0 + body.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_arrowHead.widthDirection[1],body.world.z_arrowHead.widthDirection[2],body.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(body.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_arrowHead.e_x[1],body.world.z_arrowHead.e_x[2],body.world.z_arrowHead.e_x[3]})[3];
//   protected output Real body.world.z_arrowHead.Form;
//   output Real body.world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_arrowHead.Material;
//   protected output Real body.world.z_arrowHead.Extra;
//   protected parameter Integer body.world.ndim_pointGravity = if body.world.enableAnimation and body.world.animateGravity and body.world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String body.world.gravityArrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.gravityArrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = body.world.gravityArrowTail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = body.world.gravityArrowTail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = body.world.gravityArrowTail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowLine.lengthDirection[1](unit = \"1\") = body.world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.lengthDirection[2](unit = \"1\") = body.world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.lengthDirection[3](unit = \"1\") = body.world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowLine.length(quantity = \"Length\", unit = \"m\") = body.world.gravityLineLength \"Length of visual object\";
//   input Real body.world.gravityArrowLine.width(quantity = \"Length\", unit = \"m\") = body.world.gravityArrowDiameter \"Width of visual object\";
//   input Real body.world.gravityArrowLine.height(quantity = \"Length\", unit = \"m\") = body.world.gravityArrowDiameter \"Height of visual object\";
//   input Real body.world.gravityArrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.gravityArrowLine.color[1] = Real(body.world.gravityArrowColor[1]) \"Color of shape\";
//   input Real body.world.gravityArrowLine.color[2] = Real(body.world.gravityArrowColor[2]) \"Color of shape\";
//   input Real body.world.gravityArrowLine.color[3] = Real(body.world.gravityArrowColor[3]) \"Color of shape\";
//   input Real body.world.gravityArrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.gravityArrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.gravityArrowLine.lengthDirection[1],body.world.gravityArrowLine.lengthDirection[2],body.world.gravityArrowLine.lengthDirection[3]});
//   protected Real body.world.gravityArrowLine.e_x[1](unit = \"1\") = if noEvent(body.world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else body.world.gravityArrowLine.lengthDirection[1] / body.world.gravityArrowLine.abs_n_x;
//   protected Real body.world.gravityArrowLine.e_x[2](unit = \"1\") = if noEvent(body.world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else body.world.gravityArrowLine.lengthDirection[2] / body.world.gravityArrowLine.abs_n_x;
//   protected Real body.world.gravityArrowLine.e_x[3](unit = \"1\") = if noEvent(body.world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else body.world.gravityArrowLine.lengthDirection[3] / body.world.gravityArrowLine.abs_n_x;
//   protected Real body.world.gravityArrowLine.n_z_aux[1](unit = \"1\") = body.world.gravityArrowLine.e_x[2] * body.world.gravityArrowLine.widthDirection[3] - body.world.gravityArrowLine.e_x[3] * body.world.gravityArrowLine.widthDirection[2];
//   protected Real body.world.gravityArrowLine.n_z_aux[2](unit = \"1\") = body.world.gravityArrowLine.e_x[3] * body.world.gravityArrowLine.widthDirection[1] - body.world.gravityArrowLine.e_x[1] * body.world.gravityArrowLine.widthDirection[3];
//   protected Real body.world.gravityArrowLine.n_z_aux[3](unit = \"1\") = body.world.gravityArrowLine.e_x[1] * body.world.gravityArrowLine.widthDirection[2] - body.world.gravityArrowLine.e_x[2] * body.world.gravityArrowLine.widthDirection[1];
//   protected Real body.world.gravityArrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]},if noEvent(body.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + body.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowLine.widthDirection[1],body.world.gravityArrowLine.widthDirection[2],body.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]})[1];
//   protected Real body.world.gravityArrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]},if noEvent(body.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + body.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowLine.widthDirection[1],body.world.gravityArrowLine.widthDirection[2],body.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]})[2];
//   protected Real body.world.gravityArrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]},if noEvent(body.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + body.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowLine.widthDirection[1],body.world.gravityArrowLine.widthDirection[2],body.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowLine.e_x[1],body.world.gravityArrowLine.e_x[2],body.world.gravityArrowLine.e_x[3]})[3];
//   protected output Real body.world.gravityArrowLine.Form;
//   output Real body.world.gravityArrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.gravityArrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.gravityArrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.gravityArrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowLine.Material;
//   protected output Real body.world.gravityArrowLine.Extra;
//   parameter String body.world.gravityArrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.gravityArrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.gravityArrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.gravityArrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.gravityArrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = ({body.world.gravityArrowTail[1],body.world.gravityArrowTail[2],body.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({body.world.n[1],body.world.n[2],body.world.n[3]},1e-13) * body.world.gravityLineLength)[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = ({body.world.gravityArrowTail[1],body.world.gravityArrowTail[2],body.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({body.world.n[1],body.world.n[2],body.world.n[3]},1e-13) * body.world.gravityLineLength)[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = ({body.world.gravityArrowTail[1],body.world.gravityArrowTail[2],body.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({body.world.n[1],body.world.n[2],body.world.n[3]},1e-13) * body.world.gravityLineLength)[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.gravityArrowHead.lengthDirection[1](unit = \"1\") = body.world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.lengthDirection[2](unit = \"1\") = body.world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.lengthDirection[3](unit = \"1\") = body.world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.gravityArrowHead.length(quantity = \"Length\", unit = \"m\") = body.world.gravityHeadLength \"Length of visual object\";
//   input Real body.world.gravityArrowHead.width(quantity = \"Length\", unit = \"m\") = body.world.gravityHeadWidth \"Width of visual object\";
//   input Real body.world.gravityArrowHead.height(quantity = \"Length\", unit = \"m\") = body.world.gravityHeadWidth \"Height of visual object\";
//   input Real body.world.gravityArrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.gravityArrowHead.color[1] = Real(body.world.gravityArrowColor[1]) \"Color of shape\";
//   input Real body.world.gravityArrowHead.color[2] = Real(body.world.gravityArrowColor[2]) \"Color of shape\";
//   input Real body.world.gravityArrowHead.color[3] = Real(body.world.gravityArrowColor[3]) \"Color of shape\";
//   input Real body.world.gravityArrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.gravityArrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.gravityArrowHead.lengthDirection[1],body.world.gravityArrowHead.lengthDirection[2],body.world.gravityArrowHead.lengthDirection[3]});
//   protected Real body.world.gravityArrowHead.e_x[1](unit = \"1\") = if noEvent(body.world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else body.world.gravityArrowHead.lengthDirection[1] / body.world.gravityArrowHead.abs_n_x;
//   protected Real body.world.gravityArrowHead.e_x[2](unit = \"1\") = if noEvent(body.world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else body.world.gravityArrowHead.lengthDirection[2] / body.world.gravityArrowHead.abs_n_x;
//   protected Real body.world.gravityArrowHead.e_x[3](unit = \"1\") = if noEvent(body.world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else body.world.gravityArrowHead.lengthDirection[3] / body.world.gravityArrowHead.abs_n_x;
//   protected Real body.world.gravityArrowHead.n_z_aux[1](unit = \"1\") = body.world.gravityArrowHead.e_x[2] * body.world.gravityArrowHead.widthDirection[3] - body.world.gravityArrowHead.e_x[3] * body.world.gravityArrowHead.widthDirection[2];
//   protected Real body.world.gravityArrowHead.n_z_aux[2](unit = \"1\") = body.world.gravityArrowHead.e_x[3] * body.world.gravityArrowHead.widthDirection[1] - body.world.gravityArrowHead.e_x[1] * body.world.gravityArrowHead.widthDirection[3];
//   protected Real body.world.gravityArrowHead.n_z_aux[3](unit = \"1\") = body.world.gravityArrowHead.e_x[1] * body.world.gravityArrowHead.widthDirection[2] - body.world.gravityArrowHead.e_x[2] * body.world.gravityArrowHead.widthDirection[1];
//   protected Real body.world.gravityArrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]},if noEvent(body.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + body.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowHead.widthDirection[1],body.world.gravityArrowHead.widthDirection[2],body.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]})[1];
//   protected Real body.world.gravityArrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]},if noEvent(body.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + body.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowHead.widthDirection[1],body.world.gravityArrowHead.widthDirection[2],body.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]})[2];
//   protected Real body.world.gravityArrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]},if noEvent(body.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (body.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + body.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.gravityArrowHead.widthDirection[1],body.world.gravityArrowHead.widthDirection[2],body.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(body.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.gravityArrowHead.e_x[1],body.world.gravityArrowHead.e_x[2],body.world.gravityArrowHead.e_x[3]})[3];
//   protected output Real body.world.gravityArrowHead.Form;
//   output Real body.world.gravityArrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.gravityArrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.gravityArrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.gravityArrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.gravityArrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.gravityArrowHead.Material;
//   protected output Real body.world.gravityArrowHead.Extra;
//   protected parameter Integer body.world.ndim2 = if body.world.enableAnimation and body.world.animateWorld and body.world.axisShowLabels then 1 else 0;
//   input Real body.world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = body.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer body.world.x_label.color[1](min = 0, max = 255) = body.world.axisColor_x[1] \"Color of cylinders\";
//   input Integer body.world.x_label.color[2](min = 0, max = 255) = body.world.axisColor_x[2] \"Color of cylinders\";
//   input Integer body.world.x_label.color[3](min = 0, max = 255) = body.world.axisColor_x[3] \"Color of cylinders\";
//   input Real body.world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[1][1];
//   protected Real body.world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[1][2];
//   protected Real body.world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[1][3];
//   protected Real body.world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[2][1];
//   protected Real body.world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[2][2];
//   protected Real body.world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[2][3];
//   protected Real body.world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[3][1];
//   protected Real body.world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[3][2];
//   protected Real body.world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.x_label.n_x[1],body.world.x_label.n_x[2],body.world.x_label.n_x[3]},{body.world.x_label.n_y[1],body.world.x_label.n_y[2],body.world.x_label.n_y[3]})[3][3];
//   protected Real body.world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[1][1];
//   protected Real body.world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[1][2];
//   protected Real body.world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[1][3];
//   protected Real body.world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[2][1];
//   protected Real body.world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[2][2];
//   protected Real body.world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[2][3];
//   protected Real body.world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[3][1];
//   protected Real body.world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[3][2];
//   protected Real body.world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}})[3][3];
//   protected Real body.world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r[1],body.world.x_label.r[2],body.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{body.world.x_label.r_lines[1],body.world.x_label.r_lines[2],body.world.x_label.r_lines[3]}))[1];
//   protected Real body.world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r[1],body.world.x_label.r[2],body.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{body.world.x_label.r_lines[1],body.world.x_label.r_lines[2],body.world.x_label.r_lines[3]}))[2];
//   protected Real body.world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r[1],body.world.x_label.r[2],body.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R.T[1,1],body.world.x_label.R.T[1,2],body.world.x_label.R.T[1,3]},{body.world.x_label.R.T[2,1],body.world.x_label.R.T[2,2],body.world.x_label.R.T[2,3]},{body.world.x_label.R.T[3,1],body.world.x_label.R.T[3,2],body.world.x_label.R.T[3,3]}},{body.world.x_label.r_lines[1],body.world.x_label.r_lines[2],body.world.x_label.r_lines[3]}))[3];
//   parameter String body.world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.x_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[1,2,1] - body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,2,2] - body.world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[1,2,1] - body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,2,2] - body.world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[1,2,1] - body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,2,2] - body.world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.x_label.lines[1,2,1] - body.world.x_label.lines[1,1,1],body.world.x_label.lines[1,2,2] - body.world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real body.world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = body.world.x_label.diameter \"Width of visual object\";
//   input Real body.world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = body.world.x_label.diameter \"Height of visual object\";
//   input Real body.world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.x_label.cylinders[1].color[1] = Real(body.world.x_label.color[1]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[1].color[2] = Real(body.world.x_label.color[2]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[1].color[3] = Real(body.world.x_label.color[3]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[1].specularCoefficient = body.world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.x_label.cylinders[1].lengthDirection[1],body.world.x_label.cylinders[1].lengthDirection[2],body.world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real body.world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(body.world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else body.world.x_label.cylinders[1].lengthDirection[1] / body.world.x_label.cylinders[1].abs_n_x;
//   protected Real body.world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(body.world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.x_label.cylinders[1].lengthDirection[2] / body.world.x_label.cylinders[1].abs_n_x;
//   protected Real body.world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(body.world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.x_label.cylinders[1].lengthDirection[3] / body.world.x_label.cylinders[1].abs_n_x;
//   protected Real body.world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = body.world.x_label.cylinders[1].e_x[2] * body.world.x_label.cylinders[1].widthDirection[3] - body.world.x_label.cylinders[1].e_x[3] * body.world.x_label.cylinders[1].widthDirection[2];
//   protected Real body.world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = body.world.x_label.cylinders[1].e_x[3] * body.world.x_label.cylinders[1].widthDirection[1] - body.world.x_label.cylinders[1].e_x[1] * body.world.x_label.cylinders[1].widthDirection[3];
//   protected Real body.world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = body.world.x_label.cylinders[1].e_x[1] * body.world.x_label.cylinders[1].widthDirection[2] - body.world.x_label.cylinders[1].e_x[2] * body.world.x_label.cylinders[1].widthDirection[1];
//   protected Real body.world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]},if noEvent(body.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[1].widthDirection[1],body.world.x_label.cylinders[1].widthDirection[2],body.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real body.world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]},if noEvent(body.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[1].widthDirection[1],body.world.x_label.cylinders[1].widthDirection[2],body.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real body.world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]},if noEvent(body.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[1].widthDirection[1],body.world.x_label.cylinders[1].widthDirection[2],body.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[1].e_x[1],body.world.x_label.cylinders[1].e_x[2],body.world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real body.world.x_label.cylinders[1].Form;
//   output Real body.world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[1].Material;
//   protected output Real body.world.x_label.cylinders[1].Extra;
//   parameter String body.world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.x_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.x_label.r_abs[1],body.world.x_label.r_abs[2],body.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_lines[1,1],body.world.x_label.R_lines[1,2],body.world.x_label.R_lines[1,3]},{body.world.x_label.R_lines[2,1],body.world.x_label.R_lines[2,2],body.world.x_label.R_lines[2,3]},{body.world.x_label.R_lines[3,1],body.world.x_label.R_lines[3,2],body.world.x_label.R_lines[3,3]}},{body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[2,2,1] - body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,2,2] - body.world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[2,2,1] - body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,2,2] - body.world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.R_rel[1,1],body.world.x_label.R_rel[1,2],body.world.x_label.R_rel[1,3]},{body.world.x_label.R_rel[2,1],body.world.x_label.R_rel[2,2],body.world.x_label.R_rel[2,3]},{body.world.x_label.R_rel[3,1],body.world.x_label.R_rel[3,2],body.world.x_label.R_rel[3,3]}},{body.world.x_label.lines[2,2,1] - body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,2,2] - body.world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.x_label.lines[2,2,1] - body.world.x_label.lines[2,1,1],body.world.x_label.lines[2,2,2] - body.world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real body.world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = body.world.x_label.diameter \"Width of visual object\";
//   input Real body.world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = body.world.x_label.diameter \"Height of visual object\";
//   input Real body.world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.x_label.cylinders[2].color[1] = Real(body.world.x_label.color[1]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[2].color[2] = Real(body.world.x_label.color[2]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[2].color[3] = Real(body.world.x_label.color[3]) \"Color of shape\";
//   input Real body.world.x_label.cylinders[2].specularCoefficient = body.world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.x_label.cylinders[2].lengthDirection[1],body.world.x_label.cylinders[2].lengthDirection[2],body.world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real body.world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(body.world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else body.world.x_label.cylinders[2].lengthDirection[1] / body.world.x_label.cylinders[2].abs_n_x;
//   protected Real body.world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(body.world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.x_label.cylinders[2].lengthDirection[2] / body.world.x_label.cylinders[2].abs_n_x;
//   protected Real body.world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(body.world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.x_label.cylinders[2].lengthDirection[3] / body.world.x_label.cylinders[2].abs_n_x;
//   protected Real body.world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = body.world.x_label.cylinders[2].e_x[2] * body.world.x_label.cylinders[2].widthDirection[3] - body.world.x_label.cylinders[2].e_x[3] * body.world.x_label.cylinders[2].widthDirection[2];
//   protected Real body.world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = body.world.x_label.cylinders[2].e_x[3] * body.world.x_label.cylinders[2].widthDirection[1] - body.world.x_label.cylinders[2].e_x[1] * body.world.x_label.cylinders[2].widthDirection[3];
//   protected Real body.world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = body.world.x_label.cylinders[2].e_x[1] * body.world.x_label.cylinders[2].widthDirection[2] - body.world.x_label.cylinders[2].e_x[2] * body.world.x_label.cylinders[2].widthDirection[1];
//   protected Real body.world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]},if noEvent(body.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[2].widthDirection[1],body.world.x_label.cylinders[2].widthDirection[2],body.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real body.world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]},if noEvent(body.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[2].widthDirection[1],body.world.x_label.cylinders[2].widthDirection[2],body.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real body.world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]},if noEvent(body.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.x_label.cylinders[2].widthDirection[1],body.world.x_label.cylinders[2].widthDirection[2],body.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.x_label.cylinders[2].e_x[1],body.world.x_label.cylinders[2].e_x[2],body.world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real body.world.x_label.cylinders[2].Form;
//   output Real body.world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.x_label.cylinders[2].Material;
//   protected output Real body.world.x_label.cylinders[2].Extra;
//   protected parameter Integer body.world.x_label.n = 2 \"Number of cylinders\";
//   input Real body.world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = body.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel * 0.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel * 0.75 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer body.world.y_label.color[1](min = 0, max = 255) = body.world.axisColor_y[1] \"Color of cylinders\";
//   input Integer body.world.y_label.color[2](min = 0, max = 255) = body.world.axisColor_y[2] \"Color of cylinders\";
//   input Integer body.world.y_label.color[3](min = 0, max = 255) = body.world.axisColor_y[3] \"Color of cylinders\";
//   input Real body.world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[1][1];
//   protected Real body.world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[1][2];
//   protected Real body.world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[1][3];
//   protected Real body.world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[2][1];
//   protected Real body.world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[2][2];
//   protected Real body.world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[2][3];
//   protected Real body.world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[3][1];
//   protected Real body.world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[3][2];
//   protected Real body.world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.y_label.n_x[1],body.world.y_label.n_x[2],body.world.y_label.n_x[3]},{body.world.y_label.n_y[1],body.world.y_label.n_y[2],body.world.y_label.n_y[3]})[3][3];
//   protected Real body.world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[1][1];
//   protected Real body.world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[1][2];
//   protected Real body.world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[1][3];
//   protected Real body.world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[2][1];
//   protected Real body.world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[2][2];
//   protected Real body.world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[2][3];
//   protected Real body.world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[3][1];
//   protected Real body.world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[3][2];
//   protected Real body.world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}})[3][3];
//   protected Real body.world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r[1],body.world.y_label.r[2],body.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{body.world.y_label.r_lines[1],body.world.y_label.r_lines[2],body.world.y_label.r_lines[3]}))[1];
//   protected Real body.world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r[1],body.world.y_label.r[2],body.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{body.world.y_label.r_lines[1],body.world.y_label.r_lines[2],body.world.y_label.r_lines[3]}))[2];
//   protected Real body.world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r[1],body.world.y_label.r[2],body.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R.T[1,1],body.world.y_label.R.T[1,2],body.world.y_label.R.T[1,3]},{body.world.y_label.R.T[2,1],body.world.y_label.R.T[2,2],body.world.y_label.R.T[2,3]},{body.world.y_label.R.T[3,1],body.world.y_label.R.T[3,2],body.world.y_label.R.T[3,3]}},{body.world.y_label.r_lines[1],body.world.y_label.r_lines[2],body.world.y_label.r_lines[3]}))[3];
//   parameter String body.world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.y_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[1,2,1] - body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,2,2] - body.world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[1,2,1] - body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,2,2] - body.world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[1,2,1] - body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,2,2] - body.world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.y_label.lines[1,2,1] - body.world.y_label.lines[1,1,1],body.world.y_label.lines[1,2,2] - body.world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real body.world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = body.world.y_label.diameter \"Width of visual object\";
//   input Real body.world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = body.world.y_label.diameter \"Height of visual object\";
//   input Real body.world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.y_label.cylinders[1].color[1] = Real(body.world.y_label.color[1]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[1].color[2] = Real(body.world.y_label.color[2]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[1].color[3] = Real(body.world.y_label.color[3]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[1].specularCoefficient = body.world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.y_label.cylinders[1].lengthDirection[1],body.world.y_label.cylinders[1].lengthDirection[2],body.world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real body.world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(body.world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else body.world.y_label.cylinders[1].lengthDirection[1] / body.world.y_label.cylinders[1].abs_n_x;
//   protected Real body.world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(body.world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.y_label.cylinders[1].lengthDirection[2] / body.world.y_label.cylinders[1].abs_n_x;
//   protected Real body.world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(body.world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.y_label.cylinders[1].lengthDirection[3] / body.world.y_label.cylinders[1].abs_n_x;
//   protected Real body.world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = body.world.y_label.cylinders[1].e_x[2] * body.world.y_label.cylinders[1].widthDirection[3] - body.world.y_label.cylinders[1].e_x[3] * body.world.y_label.cylinders[1].widthDirection[2];
//   protected Real body.world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = body.world.y_label.cylinders[1].e_x[3] * body.world.y_label.cylinders[1].widthDirection[1] - body.world.y_label.cylinders[1].e_x[1] * body.world.y_label.cylinders[1].widthDirection[3];
//   protected Real body.world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = body.world.y_label.cylinders[1].e_x[1] * body.world.y_label.cylinders[1].widthDirection[2] - body.world.y_label.cylinders[1].e_x[2] * body.world.y_label.cylinders[1].widthDirection[1];
//   protected Real body.world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]},if noEvent(body.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[1].widthDirection[1],body.world.y_label.cylinders[1].widthDirection[2],body.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real body.world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]},if noEvent(body.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[1].widthDirection[1],body.world.y_label.cylinders[1].widthDirection[2],body.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real body.world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]},if noEvent(body.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[1].widthDirection[1],body.world.y_label.cylinders[1].widthDirection[2],body.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[1].e_x[1],body.world.y_label.cylinders[1].e_x[2],body.world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real body.world.y_label.cylinders[1].Form;
//   output Real body.world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[1].Material;
//   protected output Real body.world.y_label.cylinders[1].Extra;
//   parameter String body.world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.y_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.y_label.r_abs[1],body.world.y_label.r_abs[2],body.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_lines[1,1],body.world.y_label.R_lines[1,2],body.world.y_label.R_lines[1,3]},{body.world.y_label.R_lines[2,1],body.world.y_label.R_lines[2,2],body.world.y_label.R_lines[2,3]},{body.world.y_label.R_lines[3,1],body.world.y_label.R_lines[3,2],body.world.y_label.R_lines[3,3]}},{body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[2,2,1] - body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,2,2] - body.world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[2,2,1] - body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,2,2] - body.world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.R_rel[1,1],body.world.y_label.R_rel[1,2],body.world.y_label.R_rel[1,3]},{body.world.y_label.R_rel[2,1],body.world.y_label.R_rel[2,2],body.world.y_label.R_rel[2,3]},{body.world.y_label.R_rel[3,1],body.world.y_label.R_rel[3,2],body.world.y_label.R_rel[3,3]}},{body.world.y_label.lines[2,2,1] - body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,2,2] - body.world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.y_label.lines[2,2,1] - body.world.y_label.lines[2,1,1],body.world.y_label.lines[2,2,2] - body.world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real body.world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = body.world.y_label.diameter \"Width of visual object\";
//   input Real body.world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = body.world.y_label.diameter \"Height of visual object\";
//   input Real body.world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.y_label.cylinders[2].color[1] = Real(body.world.y_label.color[1]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[2].color[2] = Real(body.world.y_label.color[2]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[2].color[3] = Real(body.world.y_label.color[3]) \"Color of shape\";
//   input Real body.world.y_label.cylinders[2].specularCoefficient = body.world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.y_label.cylinders[2].lengthDirection[1],body.world.y_label.cylinders[2].lengthDirection[2],body.world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real body.world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(body.world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else body.world.y_label.cylinders[2].lengthDirection[1] / body.world.y_label.cylinders[2].abs_n_x;
//   protected Real body.world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(body.world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.y_label.cylinders[2].lengthDirection[2] / body.world.y_label.cylinders[2].abs_n_x;
//   protected Real body.world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(body.world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.y_label.cylinders[2].lengthDirection[3] / body.world.y_label.cylinders[2].abs_n_x;
//   protected Real body.world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = body.world.y_label.cylinders[2].e_x[2] * body.world.y_label.cylinders[2].widthDirection[3] - body.world.y_label.cylinders[2].e_x[3] * body.world.y_label.cylinders[2].widthDirection[2];
//   protected Real body.world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = body.world.y_label.cylinders[2].e_x[3] * body.world.y_label.cylinders[2].widthDirection[1] - body.world.y_label.cylinders[2].e_x[1] * body.world.y_label.cylinders[2].widthDirection[3];
//   protected Real body.world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = body.world.y_label.cylinders[2].e_x[1] * body.world.y_label.cylinders[2].widthDirection[2] - body.world.y_label.cylinders[2].e_x[2] * body.world.y_label.cylinders[2].widthDirection[1];
//   protected Real body.world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]},if noEvent(body.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[2].widthDirection[1],body.world.y_label.cylinders[2].widthDirection[2],body.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real body.world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]},if noEvent(body.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[2].widthDirection[1],body.world.y_label.cylinders[2].widthDirection[2],body.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real body.world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]},if noEvent(body.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.y_label.cylinders[2].widthDirection[1],body.world.y_label.cylinders[2].widthDirection[2],body.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.y_label.cylinders[2].e_x[1],body.world.y_label.cylinders[2].e_x[2],body.world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real body.world.y_label.cylinders[2].Form;
//   output Real body.world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.y_label.cylinders[2].Material;
//   protected output Real body.world.y_label.cylinders[2].Extra;
//   protected parameter Integer body.world.y_label.n = 2 \"Number of cylinders\";
//   input Real body.world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = body.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real body.world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = body.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real body.world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer body.world.z_label.color[1](min = 0, max = 255) = body.world.axisColor_z[1] \"Color of cylinders\";
//   input Integer body.world.z_label.color[2](min = 0, max = 255) = body.world.axisColor_z[2] \"Color of cylinders\";
//   input Integer body.world.z_label.color[3](min = 0, max = 255) = body.world.axisColor_z[3] \"Color of cylinders\";
//   input Real body.world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[1][1];
//   protected Real body.world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[1][2];
//   protected Real body.world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[1][3];
//   protected Real body.world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[2][1];
//   protected Real body.world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[2][2];
//   protected Real body.world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[2][3];
//   protected Real body.world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[3][1];
//   protected Real body.world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[3][2];
//   protected Real body.world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({body.world.z_label.n_x[1],body.world.z_label.n_x[2],body.world.z_label.n_x[3]},{body.world.z_label.n_y[1],body.world.z_label.n_y[2],body.world.z_label.n_y[3]})[3][3];
//   protected Real body.world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[1][1];
//   protected Real body.world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[1][2];
//   protected Real body.world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[1][3];
//   protected Real body.world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[2][1];
//   protected Real body.world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[2][2];
//   protected Real body.world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[2][3];
//   protected Real body.world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[3][1];
//   protected Real body.world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[3][2];
//   protected Real body.world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}})[3][3];
//   protected Real body.world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r[1],body.world.z_label.r[2],body.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{body.world.z_label.r_lines[1],body.world.z_label.r_lines[2],body.world.z_label.r_lines[3]}))[1];
//   protected Real body.world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r[1],body.world.z_label.r[2],body.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{body.world.z_label.r_lines[1],body.world.z_label.r_lines[2],body.world.z_label.r_lines[3]}))[2];
//   protected Real body.world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r[1],body.world.z_label.r[2],body.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R.T[1,1],body.world.z_label.R.T[1,2],body.world.z_label.R.T[1,3]},{body.world.z_label.R.T[2,1],body.world.z_label.R.T[2,2],body.world.z_label.R.T[2,3]},{body.world.z_label.R.T[3,1],body.world.z_label.R.T[3,2],body.world.z_label.R.T[3,3]}},{body.world.z_label.r_lines[1],body.world.z_label.r_lines[2],body.world.z_label.r_lines[3]}))[3];
//   parameter String body.world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.z_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[1,2,1] - body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,2,2] - body.world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[1,2,1] - body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,2,2] - body.world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[1,2,1] - body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,2,2] - body.world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.z_label.lines[1,2,1] - body.world.z_label.lines[1,1,1],body.world.z_label.lines[1,2,2] - body.world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real body.world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Width of visual object\";
//   input Real body.world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Height of visual object\";
//   input Real body.world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.z_label.cylinders[1].color[1] = Real(body.world.z_label.color[1]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[1].color[2] = Real(body.world.z_label.color[2]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[1].color[3] = Real(body.world.z_label.color[3]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[1].specularCoefficient = body.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.z_label.cylinders[1].lengthDirection[1],body.world.z_label.cylinders[1].lengthDirection[2],body.world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real body.world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(body.world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else body.world.z_label.cylinders[1].lengthDirection[1] / body.world.z_label.cylinders[1].abs_n_x;
//   protected Real body.world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(body.world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[1].lengthDirection[2] / body.world.z_label.cylinders[1].abs_n_x;
//   protected Real body.world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(body.world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[1].lengthDirection[3] / body.world.z_label.cylinders[1].abs_n_x;
//   protected Real body.world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = body.world.z_label.cylinders[1].e_x[2] * body.world.z_label.cylinders[1].widthDirection[3] - body.world.z_label.cylinders[1].e_x[3] * body.world.z_label.cylinders[1].widthDirection[2];
//   protected Real body.world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = body.world.z_label.cylinders[1].e_x[3] * body.world.z_label.cylinders[1].widthDirection[1] - body.world.z_label.cylinders[1].e_x[1] * body.world.z_label.cylinders[1].widthDirection[3];
//   protected Real body.world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = body.world.z_label.cylinders[1].e_x[1] * body.world.z_label.cylinders[1].widthDirection[2] - body.world.z_label.cylinders[1].e_x[2] * body.world.z_label.cylinders[1].widthDirection[1];
//   protected Real body.world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]},if noEvent(body.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[1].widthDirection[1],body.world.z_label.cylinders[1].widthDirection[2],body.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real body.world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]},if noEvent(body.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[1].widthDirection[1],body.world.z_label.cylinders[1].widthDirection[2],body.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real body.world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]},if noEvent(body.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[1].widthDirection[1],body.world.z_label.cylinders[1].widthDirection[2],body.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[1].e_x[1],body.world.z_label.cylinders[1].e_x[2],body.world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real body.world.z_label.cylinders[1].Form;
//   output Real body.world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[1].Material;
//   protected output Real body.world.z_label.cylinders[1].Extra;
//   parameter String body.world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.z_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[2,2,1] - body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,2,2] - body.world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[2,2,1] - body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,2,2] - body.world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[2,2,1] - body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,2,2] - body.world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.z_label.lines[2,2,1] - body.world.z_label.lines[2,1,1],body.world.z_label.lines[2,2,2] - body.world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real body.world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Width of visual object\";
//   input Real body.world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Height of visual object\";
//   input Real body.world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.z_label.cylinders[2].color[1] = Real(body.world.z_label.color[1]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[2].color[2] = Real(body.world.z_label.color[2]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[2].color[3] = Real(body.world.z_label.color[3]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[2].specularCoefficient = body.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.z_label.cylinders[2].lengthDirection[1],body.world.z_label.cylinders[2].lengthDirection[2],body.world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real body.world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(body.world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else body.world.z_label.cylinders[2].lengthDirection[1] / body.world.z_label.cylinders[2].abs_n_x;
//   protected Real body.world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(body.world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[2].lengthDirection[2] / body.world.z_label.cylinders[2].abs_n_x;
//   protected Real body.world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(body.world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[2].lengthDirection[3] / body.world.z_label.cylinders[2].abs_n_x;
//   protected Real body.world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = body.world.z_label.cylinders[2].e_x[2] * body.world.z_label.cylinders[2].widthDirection[3] - body.world.z_label.cylinders[2].e_x[3] * body.world.z_label.cylinders[2].widthDirection[2];
//   protected Real body.world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = body.world.z_label.cylinders[2].e_x[3] * body.world.z_label.cylinders[2].widthDirection[1] - body.world.z_label.cylinders[2].e_x[1] * body.world.z_label.cylinders[2].widthDirection[3];
//   protected Real body.world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = body.world.z_label.cylinders[2].e_x[1] * body.world.z_label.cylinders[2].widthDirection[2] - body.world.z_label.cylinders[2].e_x[2] * body.world.z_label.cylinders[2].widthDirection[1];
//   protected Real body.world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]},if noEvent(body.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[2].widthDirection[1],body.world.z_label.cylinders[2].widthDirection[2],body.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real body.world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]},if noEvent(body.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[2].widthDirection[1],body.world.z_label.cylinders[2].widthDirection[2],body.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real body.world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]},if noEvent(body.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[2].widthDirection[1],body.world.z_label.cylinders[2].widthDirection[2],body.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[2].e_x[1],body.world.z_label.cylinders[2].e_x[2],body.world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real body.world.z_label.cylinders[2].Form;
//   output Real body.world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[2].Material;
//   protected output Real body.world.z_label.cylinders[2].Extra;
//   parameter String body.world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real body.world.z_label.cylinders[3].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real body.world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real body.world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = ({body.world.z_label.r_abs[1],body.world.z_label.r_abs[2],body.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_lines[1,1],body.world.z_label.R_lines[1,2],body.world.z_label.R_lines[1,3]},{body.world.z_label.R_lines[2,1],body.world.z_label.R_lines[2,2],body.world.z_label.R_lines[2,3]},{body.world.z_label.R_lines[3,1],body.world.z_label.R_lines[3,2],body.world.z_label.R_lines[3,3]}},{body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real body.world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[3,2,1] - body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,2,2] - body.world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[3,2,1] - body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,2,2] - body.world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.R_rel[1,1],body.world.z_label.R_rel[1,2],body.world.z_label.R_rel[1,3]},{body.world.z_label.R_rel[2,1],body.world.z_label.R_rel[2,2],body.world.z_label.R_rel[2,3]},{body.world.z_label.R_rel[3,1],body.world.z_label.R_rel[3,2],body.world.z_label.R_rel[3,3]}},{body.world.z_label.lines[3,2,1] - body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,2,2] - body.world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real body.world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({body.world.z_label.lines[3,2,1] - body.world.z_label.lines[3,1,1],body.world.z_label.lines[3,2,2] - body.world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real body.world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Width of visual object\";
//   input Real body.world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = body.world.z_label.diameter \"Height of visual object\";
//   input Real body.world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real body.world.z_label.cylinders[3].color[1] = Real(body.world.z_label.color[1]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[3].color[2] = Real(body.world.z_label.color[2]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[3].color[3] = Real(body.world.z_label.color[3]) \"Color of shape\";
//   input Real body.world.z_label.cylinders[3].specularCoefficient = body.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real body.world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({body.world.z_label.cylinders[3].lengthDirection[1],body.world.z_label.cylinders[3].lengthDirection[2],body.world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real body.world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(body.world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else body.world.z_label.cylinders[3].lengthDirection[1] / body.world.z_label.cylinders[3].abs_n_x;
//   protected Real body.world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(body.world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[3].lengthDirection[2] / body.world.z_label.cylinders[3].abs_n_x;
//   protected Real body.world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(body.world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else body.world.z_label.cylinders[3].lengthDirection[3] / body.world.z_label.cylinders[3].abs_n_x;
//   protected Real body.world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = body.world.z_label.cylinders[3].e_x[2] * body.world.z_label.cylinders[3].widthDirection[3] - body.world.z_label.cylinders[3].e_x[3] * body.world.z_label.cylinders[3].widthDirection[2];
//   protected Real body.world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = body.world.z_label.cylinders[3].e_x[3] * body.world.z_label.cylinders[3].widthDirection[1] - body.world.z_label.cylinders[3].e_x[1] * body.world.z_label.cylinders[3].widthDirection[3];
//   protected Real body.world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = body.world.z_label.cylinders[3].e_x[1] * body.world.z_label.cylinders[3].widthDirection[2] - body.world.z_label.cylinders[3].e_x[2] * body.world.z_label.cylinders[3].widthDirection[1];
//   protected Real body.world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]},if noEvent(body.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[3].widthDirection[1],body.world.z_label.cylinders[3].widthDirection[2],body.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real body.world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]},if noEvent(body.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[3].widthDirection[1],body.world.z_label.cylinders[3].widthDirection[2],body.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real body.world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]},if noEvent(body.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (body.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + body.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {body.world.z_label.cylinders[3].widthDirection[1],body.world.z_label.cylinders[3].widthDirection[2],body.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(body.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{body.world.z_label.cylinders[3].e_x[1],body.world.z_label.cylinders[3].e_x[2],body.world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real body.world.z_label.cylinders[3].Form;
//   output Real body.world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real body.world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real body.world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real body.world.z_label.cylinders[3].Material;
//   protected output Real body.world.z_label.cylinders[3].Extra;
//   protected parameter Integer body.world.z_label.n = 3 \"Number of cylinders\";
//   parameter Real body.world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real body.world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real body.world.defaultJointLength(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real body.world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real body.world.defaultForceLength(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real body.world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real body.world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real body.world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = body.world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real body.world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.axisLength / body.world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real body.world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = body.world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real body.world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * body.world.axisLength;
//   protected parameter Real body.world.headLength(quantity = \"Length\", unit = \"m\") = min(body.world.axisLength,5.0 * body.world.axisDiameter);
//   protected parameter Real body.world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * body.world.axisDiameter;
//   protected parameter Real body.world.lineWidth(quantity = \"Length\", unit = \"m\") = body.world.axisDiameter;
//   protected parameter Real body.world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * body.world.axisDiameter;
//   parameter Real body.world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.world.gravityArrowLength / body.world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real body.world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,body.world.axisLength - body.world.headLength);
//   protected parameter Real body.world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(body.world.gravityArrowLength,4.0 * body.world.gravityArrowDiameter);
//   protected parameter Real body.world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * body.world.gravityArrowDiameter;
//   protected parameter Real body.world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,body.world.gravityArrowLength - body.world.gravityHeadLength);
//   protected Real body.Q[1](start = body.Q_start[1], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real body.Q[2](start = body.Q_start[2], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real body.Q[3](start = body.Q_start[3], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real body.Q[4](start = body.Q_start[4], StateSelect = StateSelect.avoid) \"Quaternion orientation object from world frame to frame_a (dummy value, if quaternions are not used as states)\";
//   protected Real body.phi[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = body.phi_start[1], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real body.phi[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = body.phi_start[2], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real body.phi[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\", start = body.phi_start[3], StateSelect = StateSelect.avoid) \"Dummy or 3 angles to rotate world frame into frame_a of body\";
//   protected Real body.phi_d[1](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real body.phi_d[2](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real body.phi_d[3](quantity = \"AngularVelocity\", unit = \"rad/s\", StateSelect = StateSelect.avoid) \"= der(phi)\";
//   protected Real body.phi_dd[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real body.phi_dd[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   protected Real body.phi_dd[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") \"= der(phi_d)\";
//   final parameter Real body.I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_11 \"inertia tensor\";
//   final parameter Real body.I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_21 \"inertia tensor\";
//   final parameter Real body.I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_31 \"inertia tensor\";
//   final parameter Real body.I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_21 \"inertia tensor\";
//   final parameter Real body.I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_22 \"inertia tensor\";
//   final parameter Real body.I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_32 \"inertia tensor\";
//   final parameter Real body.I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_31 \"inertia tensor\";
//   final parameter Real body.I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_32 \"inertia tensor\";
//   final parameter Real body.I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = body.I_33 \"inertia tensor\";
//   final parameter Real body.R_start.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real body.R_start.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real body.R_start.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real body.R_start.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real body.cylinderDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = body.sphereDiameter / 3.0 \"Diameter of cylinder\";
//   final parameter Real body.z_a_start[1](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[1] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real body.z_a_start[2](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[2] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   final parameter Real body.z_a_start[3](quantity = \"AngularAcceleration\", unit = \"rad/s2\") = Modelica.Mechanics.MultiBody.Frames.resolve2(body.R_start,{body.z_0_start[1],body.z_0_start[2],body.z_0_start[3]})[3] \"Initial values of angular acceleration z_a = der(w_a), i.e., time derivative of angular velocity resolved in frame_a\";
//   protected parameter Real body.Q_start[1] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[1] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real body.Q_start[2] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[2] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real body.Q_start[3] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[3] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real body.Q_start[4] = Modelica.Mechanics.MultiBody.Frames.to_Q(body.R_start,Modelica.Mechanics.MultiBody.Frames.Quaternions.nullRotation())[4] \"Quaternion orientation object from world frame to frame_a at initial time\";
//   protected parameter Real body.phi_start[1](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if body.sequence_start[1] == body.sequence_angleStates[1] and body.sequence_start[2] == body.sequence_angleStates[2] and body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[1] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[1] \"Potential angle states at initial time\";
//   protected parameter Real body.phi_start[2](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if body.sequence_start[1] == body.sequence_angleStates[1] and body.sequence_start[2] == body.sequence_angleStates[2] and body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[2] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[2] \"Potential angle states at initial time\";
//   protected parameter Real body.phi_start[3](quantity = \"Angle\", unit = \"rad\", displayUnit = \"deg\") = if body.sequence_start[1] == body.sequence_angleStates[1] and body.sequence_start[2] == body.sequence_angleStates[2] and body.sequence_start[3] == body.sequence_angleStates[3] then body.angles_start[3] else Modelica.Mechanics.MultiBody.Frames.axesRotationsAngles(body.R_start,{body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},0.0)[3] \"Potential angle states at initial time\";
//   Real frameTranslation.frame_a.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_a.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_a.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_a.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_a.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_a.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_a.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_a.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_a.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_a.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_a.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.frame_a.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.frame_a.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean frameTranslation.animation = animation \"= true, if animation shall be enabled\";
//   parameter Real frameTranslation.r[1](quantity = \"Length\", unit = \"m\", start = 0.0) = r[1] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real frameTranslation.r[2](quantity = \"Length\", unit = \"m\", start = 0.0) = r[2] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter Real frameTranslation.r[3](quantity = \"Length\", unit = \"m\", start = 0.0) = r[3] \"Vector from frame_a to frame_b resolved in frame_a\";
//   parameter String frameTranslation.shapeType = \"pipecylinder\" \" Type of shape\";
//   parameter Real frameTranslation.r_shape[1](quantity = \"Length\", unit = \"m\") = r_shape[1] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real frameTranslation.r_shape[2](quantity = \"Length\", unit = \"m\") = r_shape[2] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real frameTranslation.r_shape[3](quantity = \"Length\", unit = \"m\") = r_shape[3] \" Vector from frame_a to shape origin, resolved in frame_a\";
//   parameter Real frameTranslation.widthDirection[1](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.widthDirection[2](unit = \"1\") = 1.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.widthDirection[3](unit = \"1\") = 0.0 \" Vector in width direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.extra = innerDiameter / diameter \" Additional parameter depending on shapeType (see docu of Visualizers.Advanced.Shape).\";
//   input Integer frameTranslation.color[1](min = 0, max = 255) = color[1] \" Color of shape\";
//   input Integer frameTranslation.color[2](min = 0, max = 255) = color[2] \" Color of shape\";
//   input Integer frameTranslation.color[3](min = 0, max = 255) = color[3] \" Color of shape\";
//   input Real frameTranslation.specularCoefficient = specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   Real frameTranslation.world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real frameTranslation.world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real frameTranslation.world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real frameTranslation.world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real frameTranslation.world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real frameTranslation.world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean frameTranslation.world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean frameTranslation.world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean frameTranslation.world.animateGravity = true \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String frameTranslation.world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String frameTranslation.world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) frameTranslation.world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real frameTranslation.world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.81 \"Constant gravity acceleration\";
//   parameter Real frameTranslation.world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real frameTranslation.world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real frameTranslation.world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real frameTranslation.world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000.0 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean frameTranslation.world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean frameTranslation.world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer frameTranslation.world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer frameTranslation.world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer frameTranslation.world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer frameTranslation.world.axisColor_y[1](min = 0, max = 255) = frameTranslation.world.axisColor_x[1];
//   input Integer frameTranslation.world.axisColor_y[2](min = 0, max = 255) = frameTranslation.world.axisColor_x[2];
//   input Integer frameTranslation.world.axisColor_y[3](min = 0, max = 255) = frameTranslation.world.axisColor_x[3];
//   input Integer frameTranslation.world.axisColor_z[1](min = 0, max = 255) = frameTranslation.world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer frameTranslation.world.axisColor_z[2](min = 0, max = 255) = frameTranslation.world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer frameTranslation.world.axisColor_z[3](min = 0, max = 255) = frameTranslation.world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real frameTranslation.world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real frameTranslation.world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real frameTranslation.world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer frameTranslation.world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer frameTranslation.world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer frameTranslation.world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real frameTranslation.world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer frameTranslation.world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer frameTranslation.world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer frameTranslation.world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real frameTranslation.world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real frameTranslation.world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real frameTranslation.world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real frameTranslation.world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real frameTranslation.world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real frameTranslation.world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer frameTranslation.world.ndim = if frameTranslation.world.enableAnimation and frameTranslation.world.animateWorld then 1 else 0;
//   parameter String frameTranslation.world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Length of visual object\";
//   input Real frameTranslation.world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Width of visual object\";
//   input Real frameTranslation.world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Height of visual object\";
//   input Real frameTranslation.world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.x_arrowLine.color[1] = Real(frameTranslation.world.axisColor_x[1]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowLine.color[2] = Real(frameTranslation.world.axisColor_x[2]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowLine.color[3] = Real(frameTranslation.world.axisColor_x[3]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.x_arrowLine.lengthDirection[1],frameTranslation.world.x_arrowLine.lengthDirection[2],frameTranslation.world.x_arrowLine.lengthDirection[3]});
//   protected Real frameTranslation.world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.x_arrowLine.lengthDirection[1] / frameTranslation.world.x_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_arrowLine.lengthDirection[2] / frameTranslation.world.x_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_arrowLine.lengthDirection[3] / frameTranslation.world.x_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.x_arrowLine.n_z_aux[1](unit = \"1\") = frameTranslation.world.x_arrowLine.e_x[2] * frameTranslation.world.x_arrowLine.widthDirection[3] - frameTranslation.world.x_arrowLine.e_x[3] * frameTranslation.world.x_arrowLine.widthDirection[2];
//   protected Real frameTranslation.world.x_arrowLine.n_z_aux[2](unit = \"1\") = frameTranslation.world.x_arrowLine.e_x[3] * frameTranslation.world.x_arrowLine.widthDirection[1] - frameTranslation.world.x_arrowLine.e_x[1] * frameTranslation.world.x_arrowLine.widthDirection[3];
//   protected Real frameTranslation.world.x_arrowLine.n_z_aux[3](unit = \"1\") = frameTranslation.world.x_arrowLine.e_x[1] * frameTranslation.world.x_arrowLine.widthDirection[2] - frameTranslation.world.x_arrowLine.e_x[2] * frameTranslation.world.x_arrowLine.widthDirection[1];
//   protected Real frameTranslation.world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]},if noEvent(frameTranslation.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowLine.widthDirection[1],frameTranslation.world.x_arrowLine.widthDirection[2],frameTranslation.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]})[1];
//   protected Real frameTranslation.world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]},if noEvent(frameTranslation.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowLine.widthDirection[1],frameTranslation.world.x_arrowLine.widthDirection[2],frameTranslation.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]})[2];
//   protected Real frameTranslation.world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]},if noEvent(frameTranslation.world.x_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowLine.widthDirection[1],frameTranslation.world.x_arrowLine.widthDirection[2],frameTranslation.world.x_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowLine.e_x[1],frameTranslation.world.x_arrowLine.e_x[2],frameTranslation.world.x_arrowLine.e_x[3]})[3];
//   protected output Real frameTranslation.world.x_arrowLine.Form;
//   output Real frameTranslation.world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowLine.Material;
//   protected output Real frameTranslation.world.x_arrowLine.Extra;
//   parameter String frameTranslation.world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headLength \"Length of visual object\";
//   input Real frameTranslation.world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Width of visual object\";
//   input Real frameTranslation.world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Height of visual object\";
//   input Real frameTranslation.world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.x_arrowHead.color[1] = Real(frameTranslation.world.axisColor_x[1]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowHead.color[2] = Real(frameTranslation.world.axisColor_x[2]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowHead.color[3] = Real(frameTranslation.world.axisColor_x[3]) \"Color of shape\";
//   input Real frameTranslation.world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.x_arrowHead.lengthDirection[1],frameTranslation.world.x_arrowHead.lengthDirection[2],frameTranslation.world.x_arrowHead.lengthDirection[3]});
//   protected Real frameTranslation.world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.x_arrowHead.lengthDirection[1] / frameTranslation.world.x_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_arrowHead.lengthDirection[2] / frameTranslation.world.x_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_arrowHead.lengthDirection[3] / frameTranslation.world.x_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.x_arrowHead.n_z_aux[1](unit = \"1\") = frameTranslation.world.x_arrowHead.e_x[2] * frameTranslation.world.x_arrowHead.widthDirection[3] - frameTranslation.world.x_arrowHead.e_x[3] * frameTranslation.world.x_arrowHead.widthDirection[2];
//   protected Real frameTranslation.world.x_arrowHead.n_z_aux[2](unit = \"1\") = frameTranslation.world.x_arrowHead.e_x[3] * frameTranslation.world.x_arrowHead.widthDirection[1] - frameTranslation.world.x_arrowHead.e_x[1] * frameTranslation.world.x_arrowHead.widthDirection[3];
//   protected Real frameTranslation.world.x_arrowHead.n_z_aux[3](unit = \"1\") = frameTranslation.world.x_arrowHead.e_x[1] * frameTranslation.world.x_arrowHead.widthDirection[2] - frameTranslation.world.x_arrowHead.e_x[2] * frameTranslation.world.x_arrowHead.widthDirection[1];
//   protected Real frameTranslation.world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]},if noEvent(frameTranslation.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowHead.widthDirection[1],frameTranslation.world.x_arrowHead.widthDirection[2],frameTranslation.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]})[1];
//   protected Real frameTranslation.world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]},if noEvent(frameTranslation.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowHead.widthDirection[1],frameTranslation.world.x_arrowHead.widthDirection[2],frameTranslation.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]})[2];
//   protected Real frameTranslation.world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]},if noEvent(frameTranslation.world.x_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_arrowHead.widthDirection[1],frameTranslation.world.x_arrowHead.widthDirection[2],frameTranslation.world.x_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_arrowHead.e_x[1],frameTranslation.world.x_arrowHead.e_x[2],frameTranslation.world.x_arrowHead.e_x[3]})[3];
//   protected output Real frameTranslation.world.x_arrowHead.Form;
//   output Real frameTranslation.world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_arrowHead.Material;
//   protected output Real frameTranslation.world.x_arrowHead.Extra;
//   parameter String frameTranslation.world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Length of visual object\";
//   input Real frameTranslation.world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Width of visual object\";
//   input Real frameTranslation.world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Height of visual object\";
//   input Real frameTranslation.world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.y_arrowLine.color[1] = Real(frameTranslation.world.axisColor_y[1]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowLine.color[2] = Real(frameTranslation.world.axisColor_y[2]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowLine.color[3] = Real(frameTranslation.world.axisColor_y[3]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.y_arrowLine.lengthDirection[1],frameTranslation.world.y_arrowLine.lengthDirection[2],frameTranslation.world.y_arrowLine.lengthDirection[3]});
//   protected Real frameTranslation.world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.y_arrowLine.lengthDirection[1] / frameTranslation.world.y_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_arrowLine.lengthDirection[2] / frameTranslation.world.y_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_arrowLine.lengthDirection[3] / frameTranslation.world.y_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.y_arrowLine.n_z_aux[1](unit = \"1\") = frameTranslation.world.y_arrowLine.e_x[2] * frameTranslation.world.y_arrowLine.widthDirection[3] - frameTranslation.world.y_arrowLine.e_x[3] * frameTranslation.world.y_arrowLine.widthDirection[2];
//   protected Real frameTranslation.world.y_arrowLine.n_z_aux[2](unit = \"1\") = frameTranslation.world.y_arrowLine.e_x[3] * frameTranslation.world.y_arrowLine.widthDirection[1] - frameTranslation.world.y_arrowLine.e_x[1] * frameTranslation.world.y_arrowLine.widthDirection[3];
//   protected Real frameTranslation.world.y_arrowLine.n_z_aux[3](unit = \"1\") = frameTranslation.world.y_arrowLine.e_x[1] * frameTranslation.world.y_arrowLine.widthDirection[2] - frameTranslation.world.y_arrowLine.e_x[2] * frameTranslation.world.y_arrowLine.widthDirection[1];
//   protected Real frameTranslation.world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]},if noEvent(frameTranslation.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowLine.widthDirection[1],frameTranslation.world.y_arrowLine.widthDirection[2],frameTranslation.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]})[1];
//   protected Real frameTranslation.world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]},if noEvent(frameTranslation.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowLine.widthDirection[1],frameTranslation.world.y_arrowLine.widthDirection[2],frameTranslation.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]})[2];
//   protected Real frameTranslation.world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]},if noEvent(frameTranslation.world.y_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowLine.widthDirection[1],frameTranslation.world.y_arrowLine.widthDirection[2],frameTranslation.world.y_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowLine.e_x[1],frameTranslation.world.y_arrowLine.e_x[2],frameTranslation.world.y_arrowLine.e_x[3]})[3];
//   protected output Real frameTranslation.world.y_arrowLine.Form;
//   output Real frameTranslation.world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowLine.Material;
//   protected output Real frameTranslation.world.y_arrowLine.Extra;
//   parameter String frameTranslation.world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headLength \"Length of visual object\";
//   input Real frameTranslation.world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Width of visual object\";
//   input Real frameTranslation.world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Height of visual object\";
//   input Real frameTranslation.world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.y_arrowHead.color[1] = Real(frameTranslation.world.axisColor_y[1]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowHead.color[2] = Real(frameTranslation.world.axisColor_y[2]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowHead.color[3] = Real(frameTranslation.world.axisColor_y[3]) \"Color of shape\";
//   input Real frameTranslation.world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.y_arrowHead.lengthDirection[1],frameTranslation.world.y_arrowHead.lengthDirection[2],frameTranslation.world.y_arrowHead.lengthDirection[3]});
//   protected Real frameTranslation.world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.y_arrowHead.lengthDirection[1] / frameTranslation.world.y_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_arrowHead.lengthDirection[2] / frameTranslation.world.y_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_arrowHead.lengthDirection[3] / frameTranslation.world.y_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.y_arrowHead.n_z_aux[1](unit = \"1\") = frameTranslation.world.y_arrowHead.e_x[2] * frameTranslation.world.y_arrowHead.widthDirection[3] - frameTranslation.world.y_arrowHead.e_x[3] * frameTranslation.world.y_arrowHead.widthDirection[2];
//   protected Real frameTranslation.world.y_arrowHead.n_z_aux[2](unit = \"1\") = frameTranslation.world.y_arrowHead.e_x[3] * frameTranslation.world.y_arrowHead.widthDirection[1] - frameTranslation.world.y_arrowHead.e_x[1] * frameTranslation.world.y_arrowHead.widthDirection[3];
//   protected Real frameTranslation.world.y_arrowHead.n_z_aux[3](unit = \"1\") = frameTranslation.world.y_arrowHead.e_x[1] * frameTranslation.world.y_arrowHead.widthDirection[2] - frameTranslation.world.y_arrowHead.e_x[2] * frameTranslation.world.y_arrowHead.widthDirection[1];
//   protected Real frameTranslation.world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]},if noEvent(frameTranslation.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowHead.widthDirection[1],frameTranslation.world.y_arrowHead.widthDirection[2],frameTranslation.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]})[1];
//   protected Real frameTranslation.world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]},if noEvent(frameTranslation.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowHead.widthDirection[1],frameTranslation.world.y_arrowHead.widthDirection[2],frameTranslation.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]})[2];
//   protected Real frameTranslation.world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]},if noEvent(frameTranslation.world.y_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_arrowHead.widthDirection[1],frameTranslation.world.y_arrowHead.widthDirection[2],frameTranslation.world.y_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_arrowHead.e_x[1],frameTranslation.world.y_arrowHead.e_x[2],frameTranslation.world.y_arrowHead.e_x[3]})[3];
//   protected output Real frameTranslation.world.y_arrowHead.Form;
//   output Real frameTranslation.world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_arrowHead.Material;
//   protected output Real frameTranslation.world.y_arrowHead.Extra;
//   parameter String frameTranslation.world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Length of visual object\";
//   input Real frameTranslation.world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Width of visual object\";
//   input Real frameTranslation.world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineWidth \"Height of visual object\";
//   input Real frameTranslation.world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.z_arrowLine.color[1] = Real(frameTranslation.world.axisColor_z[1]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowLine.color[2] = Real(frameTranslation.world.axisColor_z[2]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowLine.color[3] = Real(frameTranslation.world.axisColor_z[3]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.z_arrowLine.lengthDirection[1],frameTranslation.world.z_arrowLine.lengthDirection[2],frameTranslation.world.z_arrowLine.lengthDirection[3]});
//   protected Real frameTranslation.world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.z_arrowLine.lengthDirection[1] / frameTranslation.world.z_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_arrowLine.lengthDirection[2] / frameTranslation.world.z_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_arrowLine.lengthDirection[3] / frameTranslation.world.z_arrowLine.abs_n_x;
//   protected Real frameTranslation.world.z_arrowLine.n_z_aux[1](unit = \"1\") = frameTranslation.world.z_arrowLine.e_x[2] * frameTranslation.world.z_arrowLine.widthDirection[3] - frameTranslation.world.z_arrowLine.e_x[3] * frameTranslation.world.z_arrowLine.widthDirection[2];
//   protected Real frameTranslation.world.z_arrowLine.n_z_aux[2](unit = \"1\") = frameTranslation.world.z_arrowLine.e_x[3] * frameTranslation.world.z_arrowLine.widthDirection[1] - frameTranslation.world.z_arrowLine.e_x[1] * frameTranslation.world.z_arrowLine.widthDirection[3];
//   protected Real frameTranslation.world.z_arrowLine.n_z_aux[3](unit = \"1\") = frameTranslation.world.z_arrowLine.e_x[1] * frameTranslation.world.z_arrowLine.widthDirection[2] - frameTranslation.world.z_arrowLine.e_x[2] * frameTranslation.world.z_arrowLine.widthDirection[1];
//   protected Real frameTranslation.world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]},if noEvent(frameTranslation.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowLine.widthDirection[1],frameTranslation.world.z_arrowLine.widthDirection[2],frameTranslation.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]})[1];
//   protected Real frameTranslation.world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]},if noEvent(frameTranslation.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowLine.widthDirection[1],frameTranslation.world.z_arrowLine.widthDirection[2],frameTranslation.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]})[2];
//   protected Real frameTranslation.world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]},if noEvent(frameTranslation.world.z_arrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowLine.widthDirection[1],frameTranslation.world.z_arrowLine.widthDirection[2],frameTranslation.world.z_arrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowLine.e_x[1],frameTranslation.world.z_arrowLine.e_x[2],frameTranslation.world.z_arrowLine.e_x[3]})[3];
//   protected output Real frameTranslation.world.z_arrowLine.Form;
//   output Real frameTranslation.world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowLine.Material;
//   protected output Real frameTranslation.world.z_arrowLine.Extra;
//   parameter String frameTranslation.world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = frameTranslation.world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headLength \"Length of visual object\";
//   input Real frameTranslation.world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Width of visual object\";
//   input Real frameTranslation.world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.headWidth \"Height of visual object\";
//   input Real frameTranslation.world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.z_arrowHead.color[1] = Real(frameTranslation.world.axisColor_z[1]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowHead.color[2] = Real(frameTranslation.world.axisColor_z[2]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowHead.color[3] = Real(frameTranslation.world.axisColor_z[3]) \"Color of shape\";
//   input Real frameTranslation.world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.z_arrowHead.lengthDirection[1],frameTranslation.world.z_arrowHead.lengthDirection[2],frameTranslation.world.z_arrowHead.lengthDirection[3]});
//   protected Real frameTranslation.world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.z_arrowHead.lengthDirection[1] / frameTranslation.world.z_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_arrowHead.lengthDirection[2] / frameTranslation.world.z_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_arrowHead.lengthDirection[3] / frameTranslation.world.z_arrowHead.abs_n_x;
//   protected Real frameTranslation.world.z_arrowHead.n_z_aux[1](unit = \"1\") = frameTranslation.world.z_arrowHead.e_x[2] * frameTranslation.world.z_arrowHead.widthDirection[3] - frameTranslation.world.z_arrowHead.e_x[3] * frameTranslation.world.z_arrowHead.widthDirection[2];
//   protected Real frameTranslation.world.z_arrowHead.n_z_aux[2](unit = \"1\") = frameTranslation.world.z_arrowHead.e_x[3] * frameTranslation.world.z_arrowHead.widthDirection[1] - frameTranslation.world.z_arrowHead.e_x[1] * frameTranslation.world.z_arrowHead.widthDirection[3];
//   protected Real frameTranslation.world.z_arrowHead.n_z_aux[3](unit = \"1\") = frameTranslation.world.z_arrowHead.e_x[1] * frameTranslation.world.z_arrowHead.widthDirection[2] - frameTranslation.world.z_arrowHead.e_x[2] * frameTranslation.world.z_arrowHead.widthDirection[1];
//   protected Real frameTranslation.world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]},if noEvent(frameTranslation.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowHead.widthDirection[1],frameTranslation.world.z_arrowHead.widthDirection[2],frameTranslation.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]})[1];
//   protected Real frameTranslation.world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]},if noEvent(frameTranslation.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowHead.widthDirection[1],frameTranslation.world.z_arrowHead.widthDirection[2],frameTranslation.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]})[2];
//   protected Real frameTranslation.world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]},if noEvent(frameTranslation.world.z_arrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_arrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_arrowHead.widthDirection[1],frameTranslation.world.z_arrowHead.widthDirection[2],frameTranslation.world.z_arrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_arrowHead.e_x[1],frameTranslation.world.z_arrowHead.e_x[2],frameTranslation.world.z_arrowHead.e_x[3]})[3];
//   protected output Real frameTranslation.world.z_arrowHead.Form;
//   output Real frameTranslation.world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_arrowHead.Material;
//   protected output Real frameTranslation.world.z_arrowHead.Extra;
//   protected parameter Integer frameTranslation.world.ndim_pointGravity = if frameTranslation.world.enableAnimation and frameTranslation.world.animateGravity and frameTranslation.world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String frameTranslation.world.gravityArrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityArrowTail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityArrowTail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityArrowTail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.lengthDirection[1](unit = \"1\") = frameTranslation.world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.lengthDirection[2](unit = \"1\") = frameTranslation.world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.lengthDirection[3](unit = \"1\") = frameTranslation.world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowLine.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityLineLength \"Length of visual object\";
//   input Real frameTranslation.world.gravityArrowLine.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityArrowDiameter \"Width of visual object\";
//   input Real frameTranslation.world.gravityArrowLine.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityArrowDiameter \"Height of visual object\";
//   input Real frameTranslation.world.gravityArrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.gravityArrowLine.color[1] = Real(frameTranslation.world.gravityArrowColor[1]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowLine.color[2] = Real(frameTranslation.world.gravityArrowColor[2]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowLine.color[3] = Real(frameTranslation.world.gravityArrowColor[3]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.gravityArrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.gravityArrowLine.lengthDirection[1],frameTranslation.world.gravityArrowLine.lengthDirection[2],frameTranslation.world.gravityArrowLine.lengthDirection[3]});
//   protected Real frameTranslation.world.gravityArrowLine.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.gravityArrowLine.lengthDirection[1] / frameTranslation.world.gravityArrowLine.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowLine.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.gravityArrowLine.lengthDirection[2] / frameTranslation.world.gravityArrowLine.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowLine.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.gravityArrowLine.lengthDirection[3] / frameTranslation.world.gravityArrowLine.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowLine.n_z_aux[1](unit = \"1\") = frameTranslation.world.gravityArrowLine.e_x[2] * frameTranslation.world.gravityArrowLine.widthDirection[3] - frameTranslation.world.gravityArrowLine.e_x[3] * frameTranslation.world.gravityArrowLine.widthDirection[2];
//   protected Real frameTranslation.world.gravityArrowLine.n_z_aux[2](unit = \"1\") = frameTranslation.world.gravityArrowLine.e_x[3] * frameTranslation.world.gravityArrowLine.widthDirection[1] - frameTranslation.world.gravityArrowLine.e_x[1] * frameTranslation.world.gravityArrowLine.widthDirection[3];
//   protected Real frameTranslation.world.gravityArrowLine.n_z_aux[3](unit = \"1\") = frameTranslation.world.gravityArrowLine.e_x[1] * frameTranslation.world.gravityArrowLine.widthDirection[2] - frameTranslation.world.gravityArrowLine.e_x[2] * frameTranslation.world.gravityArrowLine.widthDirection[1];
//   protected Real frameTranslation.world.gravityArrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]},if noEvent(frameTranslation.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowLine.widthDirection[1],frameTranslation.world.gravityArrowLine.widthDirection[2],frameTranslation.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]})[1];
//   protected Real frameTranslation.world.gravityArrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]},if noEvent(frameTranslation.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowLine.widthDirection[1],frameTranslation.world.gravityArrowLine.widthDirection[2],frameTranslation.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]})[2];
//   protected Real frameTranslation.world.gravityArrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]},if noEvent(frameTranslation.world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowLine.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowLine.widthDirection[1],frameTranslation.world.gravityArrowLine.widthDirection[2],frameTranslation.world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowLine.e_x[1],frameTranslation.world.gravityArrowLine.e_x[2],frameTranslation.world.gravityArrowLine.e_x[3]})[3];
//   protected output Real frameTranslation.world.gravityArrowLine.Form;
//   output Real frameTranslation.world.gravityArrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.gravityArrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowLine.Material;
//   protected output Real frameTranslation.world.gravityArrowLine.Extra;
//   parameter String frameTranslation.world.gravityArrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.gravityArrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.gravityArrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.gravityArrowTail[1],frameTranslation.world.gravityArrowTail[2],frameTranslation.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({frameTranslation.world.n[1],frameTranslation.world.n[2],frameTranslation.world.n[3]},1e-13) * frameTranslation.world.gravityLineLength)[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.gravityArrowTail[1],frameTranslation.world.gravityArrowTail[2],frameTranslation.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({frameTranslation.world.n[1],frameTranslation.world.n[2],frameTranslation.world.n[3]},1e-13) * frameTranslation.world.gravityLineLength)[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.gravityArrowTail[1],frameTranslation.world.gravityArrowTail[2],frameTranslation.world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({frameTranslation.world.n[1],frameTranslation.world.n[2],frameTranslation.world.n[3]},1e-13) * frameTranslation.world.gravityLineLength)[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.lengthDirection[1](unit = \"1\") = frameTranslation.world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.lengthDirection[2](unit = \"1\") = frameTranslation.world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.lengthDirection[3](unit = \"1\") = frameTranslation.world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.gravityArrowHead.length(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityHeadLength \"Length of visual object\";
//   input Real frameTranslation.world.gravityArrowHead.width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityHeadWidth \"Width of visual object\";
//   input Real frameTranslation.world.gravityArrowHead.height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.gravityHeadWidth \"Height of visual object\";
//   input Real frameTranslation.world.gravityArrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.gravityArrowHead.color[1] = Real(frameTranslation.world.gravityArrowColor[1]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowHead.color[2] = Real(frameTranslation.world.gravityArrowColor[2]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowHead.color[3] = Real(frameTranslation.world.gravityArrowColor[3]) \"Color of shape\";
//   input Real frameTranslation.world.gravityArrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.gravityArrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.gravityArrowHead.lengthDirection[1],frameTranslation.world.gravityArrowHead.lengthDirection[2],frameTranslation.world.gravityArrowHead.lengthDirection[3]});
//   protected Real frameTranslation.world.gravityArrowHead.e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else frameTranslation.world.gravityArrowHead.lengthDirection[1] / frameTranslation.world.gravityArrowHead.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowHead.e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.gravityArrowHead.lengthDirection[2] / frameTranslation.world.gravityArrowHead.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowHead.e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else frameTranslation.world.gravityArrowHead.lengthDirection[3] / frameTranslation.world.gravityArrowHead.abs_n_x;
//   protected Real frameTranslation.world.gravityArrowHead.n_z_aux[1](unit = \"1\") = frameTranslation.world.gravityArrowHead.e_x[2] * frameTranslation.world.gravityArrowHead.widthDirection[3] - frameTranslation.world.gravityArrowHead.e_x[3] * frameTranslation.world.gravityArrowHead.widthDirection[2];
//   protected Real frameTranslation.world.gravityArrowHead.n_z_aux[2](unit = \"1\") = frameTranslation.world.gravityArrowHead.e_x[3] * frameTranslation.world.gravityArrowHead.widthDirection[1] - frameTranslation.world.gravityArrowHead.e_x[1] * frameTranslation.world.gravityArrowHead.widthDirection[3];
//   protected Real frameTranslation.world.gravityArrowHead.n_z_aux[3](unit = \"1\") = frameTranslation.world.gravityArrowHead.e_x[1] * frameTranslation.world.gravityArrowHead.widthDirection[2] - frameTranslation.world.gravityArrowHead.e_x[2] * frameTranslation.world.gravityArrowHead.widthDirection[1];
//   protected Real frameTranslation.world.gravityArrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]},if noEvent(frameTranslation.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowHead.widthDirection[1],frameTranslation.world.gravityArrowHead.widthDirection[2],frameTranslation.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]})[1];
//   protected Real frameTranslation.world.gravityArrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]},if noEvent(frameTranslation.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowHead.widthDirection[1],frameTranslation.world.gravityArrowHead.widthDirection[2],frameTranslation.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]})[2];
//   protected Real frameTranslation.world.gravityArrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]},if noEvent(frameTranslation.world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (frameTranslation.world.gravityArrowHead.n_z_aux[2] ^ 2.0 + frameTranslation.world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.gravityArrowHead.widthDirection[1],frameTranslation.world.gravityArrowHead.widthDirection[2],frameTranslation.world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(frameTranslation.world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.gravityArrowHead.e_x[1],frameTranslation.world.gravityArrowHead.e_x[2],frameTranslation.world.gravityArrowHead.e_x[3]})[3];
//   protected output Real frameTranslation.world.gravityArrowHead.Form;
//   output Real frameTranslation.world.gravityArrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.gravityArrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.gravityArrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.gravityArrowHead.Material;
//   protected output Real frameTranslation.world.gravityArrowHead.Extra;
//   protected parameter Integer frameTranslation.world.ndim2 = if frameTranslation.world.enableAnimation and frameTranslation.world.animateWorld and frameTranslation.world.axisShowLabels then 1 else 0;
//   input Real frameTranslation.world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer frameTranslation.world.x_label.color[1](min = 0, max = 255) = frameTranslation.world.axisColor_x[1] \"Color of cylinders\";
//   input Integer frameTranslation.world.x_label.color[2](min = 0, max = 255) = frameTranslation.world.axisColor_x[2] \"Color of cylinders\";
//   input Integer frameTranslation.world.x_label.color[3](min = 0, max = 255) = frameTranslation.world.axisColor_x[3] \"Color of cylinders\";
//   input Real frameTranslation.world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[1][1];
//   protected Real frameTranslation.world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[1][2];
//   protected Real frameTranslation.world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[1][3];
//   protected Real frameTranslation.world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[2][1];
//   protected Real frameTranslation.world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[2][2];
//   protected Real frameTranslation.world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[2][3];
//   protected Real frameTranslation.world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[3][1];
//   protected Real frameTranslation.world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[3][2];
//   protected Real frameTranslation.world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.x_label.n_x[1],frameTranslation.world.x_label.n_x[2],frameTranslation.world.x_label.n_x[3]},{frameTranslation.world.x_label.n_y[1],frameTranslation.world.x_label.n_y[2],frameTranslation.world.x_label.n_y[3]})[3][3];
//   protected Real frameTranslation.world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[1][1];
//   protected Real frameTranslation.world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[1][2];
//   protected Real frameTranslation.world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[1][3];
//   protected Real frameTranslation.world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[2][1];
//   protected Real frameTranslation.world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[2][2];
//   protected Real frameTranslation.world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[2][3];
//   protected Real frameTranslation.world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[3][1];
//   protected Real frameTranslation.world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[3][2];
//   protected Real frameTranslation.world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}})[3][3];
//   protected Real frameTranslation.world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r[1],frameTranslation.world.x_label.r[2],frameTranslation.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{frameTranslation.world.x_label.r_lines[1],frameTranslation.world.x_label.r_lines[2],frameTranslation.world.x_label.r_lines[3]}))[1];
//   protected Real frameTranslation.world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r[1],frameTranslation.world.x_label.r[2],frameTranslation.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{frameTranslation.world.x_label.r_lines[1],frameTranslation.world.x_label.r_lines[2],frameTranslation.world.x_label.r_lines[3]}))[2];
//   protected Real frameTranslation.world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r[1],frameTranslation.world.x_label.r[2],frameTranslation.world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R.T[1,1],frameTranslation.world.x_label.R.T[1,2],frameTranslation.world.x_label.R.T[1,3]},{frameTranslation.world.x_label.R.T[2,1],frameTranslation.world.x_label.R.T[2,2],frameTranslation.world.x_label.R.T[2,3]},{frameTranslation.world.x_label.R.T[3,1],frameTranslation.world.x_label.R.T[3,2],frameTranslation.world.x_label.R.T[3,3]}},{frameTranslation.world.x_label.r_lines[1],frameTranslation.world.x_label.r_lines[2],frameTranslation.world.x_label.r_lines[3]}))[3];
//   parameter String frameTranslation.world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[1,2,1] - frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,2,2] - frameTranslation.world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[1,2,1] - frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,2,2] - frameTranslation.world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[1,2,1] - frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,2,2] - frameTranslation.world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.x_label.lines[1,2,1] - frameTranslation.world.x_label.lines[1,1,1],frameTranslation.world.x_label.lines[1,2,2] - frameTranslation.world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.x_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.x_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.x_label.cylinders[1].color[1] = Real(frameTranslation.world.x_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[1].color[2] = Real(frameTranslation.world.x_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[1].color[3] = Real(frameTranslation.world.x_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[1].specularCoefficient = frameTranslation.world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.x_label.cylinders[1].lengthDirection[1],frameTranslation.world.x_label.cylinders[1].lengthDirection[2],frameTranslation.world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real frameTranslation.world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.x_label.cylinders[1].lengthDirection[1] / frameTranslation.world.x_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_label.cylinders[1].lengthDirection[2] / frameTranslation.world.x_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_label.cylinders[1].lengthDirection[3] / frameTranslation.world.x_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = frameTranslation.world.x_label.cylinders[1].e_x[2] * frameTranslation.world.x_label.cylinders[1].widthDirection[3] - frameTranslation.world.x_label.cylinders[1].e_x[3] * frameTranslation.world.x_label.cylinders[1].widthDirection[2];
//   protected Real frameTranslation.world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = frameTranslation.world.x_label.cylinders[1].e_x[3] * frameTranslation.world.x_label.cylinders[1].widthDirection[1] - frameTranslation.world.x_label.cylinders[1].e_x[1] * frameTranslation.world.x_label.cylinders[1].widthDirection[3];
//   protected Real frameTranslation.world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = frameTranslation.world.x_label.cylinders[1].e_x[1] * frameTranslation.world.x_label.cylinders[1].widthDirection[2] - frameTranslation.world.x_label.cylinders[1].e_x[2] * frameTranslation.world.x_label.cylinders[1].widthDirection[1];
//   protected Real frameTranslation.world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[1].widthDirection[1],frameTranslation.world.x_label.cylinders[1].widthDirection[2],frameTranslation.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real frameTranslation.world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[1].widthDirection[1],frameTranslation.world.x_label.cylinders[1].widthDirection[2],frameTranslation.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real frameTranslation.world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[1].widthDirection[1],frameTranslation.world.x_label.cylinders[1].widthDirection[2],frameTranslation.world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[1].e_x[1],frameTranslation.world.x_label.cylinders[1].e_x[2],frameTranslation.world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real frameTranslation.world.x_label.cylinders[1].Form;
//   output Real frameTranslation.world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[1].Material;
//   protected output Real frameTranslation.world.x_label.cylinders[1].Extra;
//   parameter String frameTranslation.world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.x_label.r_abs[1],frameTranslation.world.x_label.r_abs[2],frameTranslation.world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_lines[1,1],frameTranslation.world.x_label.R_lines[1,2],frameTranslation.world.x_label.R_lines[1,3]},{frameTranslation.world.x_label.R_lines[2,1],frameTranslation.world.x_label.R_lines[2,2],frameTranslation.world.x_label.R_lines[2,3]},{frameTranslation.world.x_label.R_lines[3,1],frameTranslation.world.x_label.R_lines[3,2],frameTranslation.world.x_label.R_lines[3,3]}},{frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[2,2,1] - frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,2,2] - frameTranslation.world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[2,2,1] - frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,2,2] - frameTranslation.world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.R_rel[1,1],frameTranslation.world.x_label.R_rel[1,2],frameTranslation.world.x_label.R_rel[1,3]},{frameTranslation.world.x_label.R_rel[2,1],frameTranslation.world.x_label.R_rel[2,2],frameTranslation.world.x_label.R_rel[2,3]},{frameTranslation.world.x_label.R_rel[3,1],frameTranslation.world.x_label.R_rel[3,2],frameTranslation.world.x_label.R_rel[3,3]}},{frameTranslation.world.x_label.lines[2,2,1] - frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,2,2] - frameTranslation.world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.x_label.lines[2,2,1] - frameTranslation.world.x_label.lines[2,1,1],frameTranslation.world.x_label.lines[2,2,2] - frameTranslation.world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.x_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.x_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.x_label.cylinders[2].color[1] = Real(frameTranslation.world.x_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[2].color[2] = Real(frameTranslation.world.x_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[2].color[3] = Real(frameTranslation.world.x_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.x_label.cylinders[2].specularCoefficient = frameTranslation.world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.x_label.cylinders[2].lengthDirection[1],frameTranslation.world.x_label.cylinders[2].lengthDirection[2],frameTranslation.world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real frameTranslation.world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.x_label.cylinders[2].lengthDirection[1] / frameTranslation.world.x_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_label.cylinders[2].lengthDirection[2] / frameTranslation.world.x_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.x_label.cylinders[2].lengthDirection[3] / frameTranslation.world.x_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = frameTranslation.world.x_label.cylinders[2].e_x[2] * frameTranslation.world.x_label.cylinders[2].widthDirection[3] - frameTranslation.world.x_label.cylinders[2].e_x[3] * frameTranslation.world.x_label.cylinders[2].widthDirection[2];
//   protected Real frameTranslation.world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = frameTranslation.world.x_label.cylinders[2].e_x[3] * frameTranslation.world.x_label.cylinders[2].widthDirection[1] - frameTranslation.world.x_label.cylinders[2].e_x[1] * frameTranslation.world.x_label.cylinders[2].widthDirection[3];
//   protected Real frameTranslation.world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = frameTranslation.world.x_label.cylinders[2].e_x[1] * frameTranslation.world.x_label.cylinders[2].widthDirection[2] - frameTranslation.world.x_label.cylinders[2].e_x[2] * frameTranslation.world.x_label.cylinders[2].widthDirection[1];
//   protected Real frameTranslation.world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[2].widthDirection[1],frameTranslation.world.x_label.cylinders[2].widthDirection[2],frameTranslation.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real frameTranslation.world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[2].widthDirection[1],frameTranslation.world.x_label.cylinders[2].widthDirection[2],frameTranslation.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real frameTranslation.world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.x_label.cylinders[2].widthDirection[1],frameTranslation.world.x_label.cylinders[2].widthDirection[2],frameTranslation.world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.x_label.cylinders[2].e_x[1],frameTranslation.world.x_label.cylinders[2].e_x[2],frameTranslation.world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real frameTranslation.world.x_label.cylinders[2].Form;
//   output Real frameTranslation.world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.x_label.cylinders[2].Material;
//   protected output Real frameTranslation.world.x_label.cylinders[2].Extra;
//   protected parameter Integer frameTranslation.world.x_label.n = 2 \"Number of cylinders\";
//   input Real frameTranslation.world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel * 0.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel * 0.75 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer frameTranslation.world.y_label.color[1](min = 0, max = 255) = frameTranslation.world.axisColor_y[1] \"Color of cylinders\";
//   input Integer frameTranslation.world.y_label.color[2](min = 0, max = 255) = frameTranslation.world.axisColor_y[2] \"Color of cylinders\";
//   input Integer frameTranslation.world.y_label.color[3](min = 0, max = 255) = frameTranslation.world.axisColor_y[3] \"Color of cylinders\";
//   input Real frameTranslation.world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[1][1];
//   protected Real frameTranslation.world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[1][2];
//   protected Real frameTranslation.world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[1][3];
//   protected Real frameTranslation.world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[2][1];
//   protected Real frameTranslation.world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[2][2];
//   protected Real frameTranslation.world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[2][3];
//   protected Real frameTranslation.world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[3][1];
//   protected Real frameTranslation.world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[3][2];
//   protected Real frameTranslation.world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.y_label.n_x[1],frameTranslation.world.y_label.n_x[2],frameTranslation.world.y_label.n_x[3]},{frameTranslation.world.y_label.n_y[1],frameTranslation.world.y_label.n_y[2],frameTranslation.world.y_label.n_y[3]})[3][3];
//   protected Real frameTranslation.world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[1][1];
//   protected Real frameTranslation.world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[1][2];
//   protected Real frameTranslation.world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[1][3];
//   protected Real frameTranslation.world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[2][1];
//   protected Real frameTranslation.world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[2][2];
//   protected Real frameTranslation.world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[2][3];
//   protected Real frameTranslation.world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[3][1];
//   protected Real frameTranslation.world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[3][2];
//   protected Real frameTranslation.world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}})[3][3];
//   protected Real frameTranslation.world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r[1],frameTranslation.world.y_label.r[2],frameTranslation.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{frameTranslation.world.y_label.r_lines[1],frameTranslation.world.y_label.r_lines[2],frameTranslation.world.y_label.r_lines[3]}))[1];
//   protected Real frameTranslation.world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r[1],frameTranslation.world.y_label.r[2],frameTranslation.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{frameTranslation.world.y_label.r_lines[1],frameTranslation.world.y_label.r_lines[2],frameTranslation.world.y_label.r_lines[3]}))[2];
//   protected Real frameTranslation.world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r[1],frameTranslation.world.y_label.r[2],frameTranslation.world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R.T[1,1],frameTranslation.world.y_label.R.T[1,2],frameTranslation.world.y_label.R.T[1,3]},{frameTranslation.world.y_label.R.T[2,1],frameTranslation.world.y_label.R.T[2,2],frameTranslation.world.y_label.R.T[2,3]},{frameTranslation.world.y_label.R.T[3,1],frameTranslation.world.y_label.R.T[3,2],frameTranslation.world.y_label.R.T[3,3]}},{frameTranslation.world.y_label.r_lines[1],frameTranslation.world.y_label.r_lines[2],frameTranslation.world.y_label.r_lines[3]}))[3];
//   parameter String frameTranslation.world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[1,2,1] - frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,2,2] - frameTranslation.world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[1,2,1] - frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,2,2] - frameTranslation.world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[1,2,1] - frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,2,2] - frameTranslation.world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.y_label.lines[1,2,1] - frameTranslation.world.y_label.lines[1,1,1],frameTranslation.world.y_label.lines[1,2,2] - frameTranslation.world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.y_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.y_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.y_label.cylinders[1].color[1] = Real(frameTranslation.world.y_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[1].color[2] = Real(frameTranslation.world.y_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[1].color[3] = Real(frameTranslation.world.y_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[1].specularCoefficient = frameTranslation.world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.y_label.cylinders[1].lengthDirection[1],frameTranslation.world.y_label.cylinders[1].lengthDirection[2],frameTranslation.world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real frameTranslation.world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.y_label.cylinders[1].lengthDirection[1] / frameTranslation.world.y_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_label.cylinders[1].lengthDirection[2] / frameTranslation.world.y_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_label.cylinders[1].lengthDirection[3] / frameTranslation.world.y_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = frameTranslation.world.y_label.cylinders[1].e_x[2] * frameTranslation.world.y_label.cylinders[1].widthDirection[3] - frameTranslation.world.y_label.cylinders[1].e_x[3] * frameTranslation.world.y_label.cylinders[1].widthDirection[2];
//   protected Real frameTranslation.world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = frameTranslation.world.y_label.cylinders[1].e_x[3] * frameTranslation.world.y_label.cylinders[1].widthDirection[1] - frameTranslation.world.y_label.cylinders[1].e_x[1] * frameTranslation.world.y_label.cylinders[1].widthDirection[3];
//   protected Real frameTranslation.world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = frameTranslation.world.y_label.cylinders[1].e_x[1] * frameTranslation.world.y_label.cylinders[1].widthDirection[2] - frameTranslation.world.y_label.cylinders[1].e_x[2] * frameTranslation.world.y_label.cylinders[1].widthDirection[1];
//   protected Real frameTranslation.world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[1].widthDirection[1],frameTranslation.world.y_label.cylinders[1].widthDirection[2],frameTranslation.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real frameTranslation.world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[1].widthDirection[1],frameTranslation.world.y_label.cylinders[1].widthDirection[2],frameTranslation.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real frameTranslation.world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[1].widthDirection[1],frameTranslation.world.y_label.cylinders[1].widthDirection[2],frameTranslation.world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[1].e_x[1],frameTranslation.world.y_label.cylinders[1].e_x[2],frameTranslation.world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real frameTranslation.world.y_label.cylinders[1].Form;
//   output Real frameTranslation.world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[1].Material;
//   protected output Real frameTranslation.world.y_label.cylinders[1].Extra;
//   parameter String frameTranslation.world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.y_label.r_abs[1],frameTranslation.world.y_label.r_abs[2],frameTranslation.world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_lines[1,1],frameTranslation.world.y_label.R_lines[1,2],frameTranslation.world.y_label.R_lines[1,3]},{frameTranslation.world.y_label.R_lines[2,1],frameTranslation.world.y_label.R_lines[2,2],frameTranslation.world.y_label.R_lines[2,3]},{frameTranslation.world.y_label.R_lines[3,1],frameTranslation.world.y_label.R_lines[3,2],frameTranslation.world.y_label.R_lines[3,3]}},{frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[2,2,1] - frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,2,2] - frameTranslation.world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[2,2,1] - frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,2,2] - frameTranslation.world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.R_rel[1,1],frameTranslation.world.y_label.R_rel[1,2],frameTranslation.world.y_label.R_rel[1,3]},{frameTranslation.world.y_label.R_rel[2,1],frameTranslation.world.y_label.R_rel[2,2],frameTranslation.world.y_label.R_rel[2,3]},{frameTranslation.world.y_label.R_rel[3,1],frameTranslation.world.y_label.R_rel[3,2],frameTranslation.world.y_label.R_rel[3,3]}},{frameTranslation.world.y_label.lines[2,2,1] - frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,2,2] - frameTranslation.world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.y_label.lines[2,2,1] - frameTranslation.world.y_label.lines[2,1,1],frameTranslation.world.y_label.lines[2,2,2] - frameTranslation.world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.y_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.y_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.y_label.cylinders[2].color[1] = Real(frameTranslation.world.y_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[2].color[2] = Real(frameTranslation.world.y_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[2].color[3] = Real(frameTranslation.world.y_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.y_label.cylinders[2].specularCoefficient = frameTranslation.world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.y_label.cylinders[2].lengthDirection[1],frameTranslation.world.y_label.cylinders[2].lengthDirection[2],frameTranslation.world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real frameTranslation.world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.y_label.cylinders[2].lengthDirection[1] / frameTranslation.world.y_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_label.cylinders[2].lengthDirection[2] / frameTranslation.world.y_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.y_label.cylinders[2].lengthDirection[3] / frameTranslation.world.y_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = frameTranslation.world.y_label.cylinders[2].e_x[2] * frameTranslation.world.y_label.cylinders[2].widthDirection[3] - frameTranslation.world.y_label.cylinders[2].e_x[3] * frameTranslation.world.y_label.cylinders[2].widthDirection[2];
//   protected Real frameTranslation.world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = frameTranslation.world.y_label.cylinders[2].e_x[3] * frameTranslation.world.y_label.cylinders[2].widthDirection[1] - frameTranslation.world.y_label.cylinders[2].e_x[1] * frameTranslation.world.y_label.cylinders[2].widthDirection[3];
//   protected Real frameTranslation.world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = frameTranslation.world.y_label.cylinders[2].e_x[1] * frameTranslation.world.y_label.cylinders[2].widthDirection[2] - frameTranslation.world.y_label.cylinders[2].e_x[2] * frameTranslation.world.y_label.cylinders[2].widthDirection[1];
//   protected Real frameTranslation.world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[2].widthDirection[1],frameTranslation.world.y_label.cylinders[2].widthDirection[2],frameTranslation.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real frameTranslation.world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[2].widthDirection[1],frameTranslation.world.y_label.cylinders[2].widthDirection[2],frameTranslation.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real frameTranslation.world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.y_label.cylinders[2].widthDirection[1],frameTranslation.world.y_label.cylinders[2].widthDirection[2],frameTranslation.world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.y_label.cylinders[2].e_x[1],frameTranslation.world.y_label.cylinders[2].e_x[2],frameTranslation.world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real frameTranslation.world.y_label.cylinders[2].Form;
//   output Real frameTranslation.world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.y_label.cylinders[2].Material;
//   protected output Real frameTranslation.world.y_label.cylinders[2].Extra;
//   protected parameter Integer frameTranslation.world.y_label.n = 2 \"Number of cylinders\";
//   input Real frameTranslation.world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = frameTranslation.world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real frameTranslation.world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = frameTranslation.world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real frameTranslation.world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer frameTranslation.world.z_label.color[1](min = 0, max = 255) = frameTranslation.world.axisColor_z[1] \"Color of cylinders\";
//   input Integer frameTranslation.world.z_label.color[2](min = 0, max = 255) = frameTranslation.world.axisColor_z[2] \"Color of cylinders\";
//   input Integer frameTranslation.world.z_label.color[3](min = 0, max = 255) = frameTranslation.world.axisColor_z[3] \"Color of cylinders\";
//   input Real frameTranslation.world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[1][1];
//   protected Real frameTranslation.world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[1][2];
//   protected Real frameTranslation.world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[1][3];
//   protected Real frameTranslation.world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[2][1];
//   protected Real frameTranslation.world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[2][2];
//   protected Real frameTranslation.world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[2][3];
//   protected Real frameTranslation.world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[3][1];
//   protected Real frameTranslation.world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[3][2];
//   protected Real frameTranslation.world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({frameTranslation.world.z_label.n_x[1],frameTranslation.world.z_label.n_x[2],frameTranslation.world.z_label.n_x[3]},{frameTranslation.world.z_label.n_y[1],frameTranslation.world.z_label.n_y[2],frameTranslation.world.z_label.n_y[3]})[3][3];
//   protected Real frameTranslation.world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[1][1];
//   protected Real frameTranslation.world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[1][2];
//   protected Real frameTranslation.world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[1][3];
//   protected Real frameTranslation.world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[2][1];
//   protected Real frameTranslation.world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[2][2];
//   protected Real frameTranslation.world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[2][3];
//   protected Real frameTranslation.world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[3][1];
//   protected Real frameTranslation.world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[3][2];
//   protected Real frameTranslation.world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}})[3][3];
//   protected Real frameTranslation.world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r[1],frameTranslation.world.z_label.r[2],frameTranslation.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{frameTranslation.world.z_label.r_lines[1],frameTranslation.world.z_label.r_lines[2],frameTranslation.world.z_label.r_lines[3]}))[1];
//   protected Real frameTranslation.world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r[1],frameTranslation.world.z_label.r[2],frameTranslation.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{frameTranslation.world.z_label.r_lines[1],frameTranslation.world.z_label.r_lines[2],frameTranslation.world.z_label.r_lines[3]}))[2];
//   protected Real frameTranslation.world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r[1],frameTranslation.world.z_label.r[2],frameTranslation.world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R.T[1,1],frameTranslation.world.z_label.R.T[1,2],frameTranslation.world.z_label.R.T[1,3]},{frameTranslation.world.z_label.R.T[2,1],frameTranslation.world.z_label.R.T[2,2],frameTranslation.world.z_label.R.T[2,3]},{frameTranslation.world.z_label.R.T[3,1],frameTranslation.world.z_label.R.T[3,2],frameTranslation.world.z_label.R.T[3,3]}},{frameTranslation.world.z_label.r_lines[1],frameTranslation.world.z_label.r_lines[2],frameTranslation.world.z_label.r_lines[3]}))[3];
//   parameter String frameTranslation.world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[1,2,1] - frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,2,2] - frameTranslation.world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[1,2,1] - frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,2,2] - frameTranslation.world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[1,2,1] - frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,2,2] - frameTranslation.world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.lines[1,2,1] - frameTranslation.world.z_label.lines[1,1,1],frameTranslation.world.z_label.lines[1,2,2] - frameTranslation.world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.z_label.cylinders[1].color[1] = Real(frameTranslation.world.z_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[1].color[2] = Real(frameTranslation.world.z_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[1].color[3] = Real(frameTranslation.world.z_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[1].specularCoefficient = frameTranslation.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.cylinders[1].lengthDirection[1],frameTranslation.world.z_label.cylinders[1].lengthDirection[2],frameTranslation.world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real frameTranslation.world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.z_label.cylinders[1].lengthDirection[1] / frameTranslation.world.z_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[1].lengthDirection[2] / frameTranslation.world.z_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[1].lengthDirection[3] / frameTranslation.world.z_label.cylinders[1].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = frameTranslation.world.z_label.cylinders[1].e_x[2] * frameTranslation.world.z_label.cylinders[1].widthDirection[3] - frameTranslation.world.z_label.cylinders[1].e_x[3] * frameTranslation.world.z_label.cylinders[1].widthDirection[2];
//   protected Real frameTranslation.world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = frameTranslation.world.z_label.cylinders[1].e_x[3] * frameTranslation.world.z_label.cylinders[1].widthDirection[1] - frameTranslation.world.z_label.cylinders[1].e_x[1] * frameTranslation.world.z_label.cylinders[1].widthDirection[3];
//   protected Real frameTranslation.world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = frameTranslation.world.z_label.cylinders[1].e_x[1] * frameTranslation.world.z_label.cylinders[1].widthDirection[2] - frameTranslation.world.z_label.cylinders[1].e_x[2] * frameTranslation.world.z_label.cylinders[1].widthDirection[1];
//   protected Real frameTranslation.world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[1].widthDirection[1],frameTranslation.world.z_label.cylinders[1].widthDirection[2],frameTranslation.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real frameTranslation.world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[1].widthDirection[1],frameTranslation.world.z_label.cylinders[1].widthDirection[2],frameTranslation.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real frameTranslation.world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[1].widthDirection[1],frameTranslation.world.z_label.cylinders[1].widthDirection[2],frameTranslation.world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[1].e_x[1],frameTranslation.world.z_label.cylinders[1].e_x[2],frameTranslation.world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real frameTranslation.world.z_label.cylinders[1].Form;
//   output Real frameTranslation.world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[1].Material;
//   protected output Real frameTranslation.world.z_label.cylinders[1].Extra;
//   parameter String frameTranslation.world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[2,2,1] - frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,2,2] - frameTranslation.world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[2,2,1] - frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,2,2] - frameTranslation.world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[2,2,1] - frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,2,2] - frameTranslation.world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.lines[2,2,1] - frameTranslation.world.z_label.lines[2,1,1],frameTranslation.world.z_label.lines[2,2,2] - frameTranslation.world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.z_label.cylinders[2].color[1] = Real(frameTranslation.world.z_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[2].color[2] = Real(frameTranslation.world.z_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[2].color[3] = Real(frameTranslation.world.z_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[2].specularCoefficient = frameTranslation.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.cylinders[2].lengthDirection[1],frameTranslation.world.z_label.cylinders[2].lengthDirection[2],frameTranslation.world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real frameTranslation.world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.z_label.cylinders[2].lengthDirection[1] / frameTranslation.world.z_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[2].lengthDirection[2] / frameTranslation.world.z_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[2].lengthDirection[3] / frameTranslation.world.z_label.cylinders[2].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = frameTranslation.world.z_label.cylinders[2].e_x[2] * frameTranslation.world.z_label.cylinders[2].widthDirection[3] - frameTranslation.world.z_label.cylinders[2].e_x[3] * frameTranslation.world.z_label.cylinders[2].widthDirection[2];
//   protected Real frameTranslation.world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = frameTranslation.world.z_label.cylinders[2].e_x[3] * frameTranslation.world.z_label.cylinders[2].widthDirection[1] - frameTranslation.world.z_label.cylinders[2].e_x[1] * frameTranslation.world.z_label.cylinders[2].widthDirection[3];
//   protected Real frameTranslation.world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = frameTranslation.world.z_label.cylinders[2].e_x[1] * frameTranslation.world.z_label.cylinders[2].widthDirection[2] - frameTranslation.world.z_label.cylinders[2].e_x[2] * frameTranslation.world.z_label.cylinders[2].widthDirection[1];
//   protected Real frameTranslation.world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[2].widthDirection[1],frameTranslation.world.z_label.cylinders[2].widthDirection[2],frameTranslation.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real frameTranslation.world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[2].widthDirection[1],frameTranslation.world.z_label.cylinders[2].widthDirection[2],frameTranslation.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real frameTranslation.world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[2].widthDirection[1],frameTranslation.world.z_label.cylinders[2].widthDirection[2],frameTranslation.world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[2].e_x[1],frameTranslation.world.z_label.cylinders[2].e_x[2],frameTranslation.world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real frameTranslation.world.z_label.cylinders[2].Form;
//   output Real frameTranslation.world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[2].Material;
//   protected output Real frameTranslation.world.z_label.cylinders[2].Extra;
//   parameter String frameTranslation.world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = ({frameTranslation.world.z_label.r_abs[1],frameTranslation.world.z_label.r_abs[2],frameTranslation.world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_lines[1,1],frameTranslation.world.z_label.R_lines[1,2],frameTranslation.world.z_label.R_lines[1,3]},{frameTranslation.world.z_label.R_lines[2,1],frameTranslation.world.z_label.R_lines[2,2],frameTranslation.world.z_label.R_lines[2,3]},{frameTranslation.world.z_label.R_lines[3,1],frameTranslation.world.z_label.R_lines[3,2],frameTranslation.world.z_label.R_lines[3,3]}},{frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[3,2,1] - frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,2,2] - frameTranslation.world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[3,2,1] - frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,2,2] - frameTranslation.world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.R_rel[1,1],frameTranslation.world.z_label.R_rel[1,2],frameTranslation.world.z_label.R_rel[1,3]},{frameTranslation.world.z_label.R_rel[2,1],frameTranslation.world.z_label.R_rel[2,2],frameTranslation.world.z_label.R_rel[2,3]},{frameTranslation.world.z_label.R_rel[3,1],frameTranslation.world.z_label.R_rel[3,2],frameTranslation.world.z_label.R_rel[3,3]}},{frameTranslation.world.z_label.lines[3,2,1] - frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,2,2] - frameTranslation.world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.lines[3,2,1] - frameTranslation.world.z_label.lines[3,1,1],frameTranslation.world.z_label.lines[3,2,2] - frameTranslation.world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Width of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = frameTranslation.world.z_label.diameter \"Height of visual object\";
//   input Real frameTranslation.world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real frameTranslation.world.z_label.cylinders[3].color[1] = Real(frameTranslation.world.z_label.color[1]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[3].color[2] = Real(frameTranslation.world.z_label.color[2]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[3].color[3] = Real(frameTranslation.world.z_label.color[3]) \"Color of shape\";
//   input Real frameTranslation.world.z_label.cylinders[3].specularCoefficient = frameTranslation.world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.world.z_label.cylinders[3].lengthDirection[1],frameTranslation.world.z_label.cylinders[3].lengthDirection[2],frameTranslation.world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real frameTranslation.world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else frameTranslation.world.z_label.cylinders[3].lengthDirection[1] / frameTranslation.world.z_label.cylinders[3].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[3].lengthDirection[2] / frameTranslation.world.z_label.cylinders[3].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(frameTranslation.world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else frameTranslation.world.z_label.cylinders[3].lengthDirection[3] / frameTranslation.world.z_label.cylinders[3].abs_n_x;
//   protected Real frameTranslation.world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = frameTranslation.world.z_label.cylinders[3].e_x[2] * frameTranslation.world.z_label.cylinders[3].widthDirection[3] - frameTranslation.world.z_label.cylinders[3].e_x[3] * frameTranslation.world.z_label.cylinders[3].widthDirection[2];
//   protected Real frameTranslation.world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = frameTranslation.world.z_label.cylinders[3].e_x[3] * frameTranslation.world.z_label.cylinders[3].widthDirection[1] - frameTranslation.world.z_label.cylinders[3].e_x[1] * frameTranslation.world.z_label.cylinders[3].widthDirection[3];
//   protected Real frameTranslation.world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = frameTranslation.world.z_label.cylinders[3].e_x[1] * frameTranslation.world.z_label.cylinders[3].widthDirection[2] - frameTranslation.world.z_label.cylinders[3].e_x[2] * frameTranslation.world.z_label.cylinders[3].widthDirection[1];
//   protected Real frameTranslation.world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[3].widthDirection[1],frameTranslation.world.z_label.cylinders[3].widthDirection[2],frameTranslation.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real frameTranslation.world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[3].widthDirection[1],frameTranslation.world.z_label.cylinders[3].widthDirection[2],frameTranslation.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real frameTranslation.world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]},if noEvent(frameTranslation.world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (frameTranslation.world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + frameTranslation.world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.world.z_label.cylinders[3].widthDirection[1],frameTranslation.world.z_label.cylinders[3].widthDirection[2],frameTranslation.world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(frameTranslation.world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.world.z_label.cylinders[3].e_x[1],frameTranslation.world.z_label.cylinders[3].e_x[2],frameTranslation.world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real frameTranslation.world.z_label.cylinders[3].Form;
//   output Real frameTranslation.world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.world.z_label.cylinders[3].Material;
//   protected output Real frameTranslation.world.z_label.cylinders[3].Extra;
//   protected parameter Integer frameTranslation.world.z_label.n = 3 \"Number of cylinders\";
//   parameter Real frameTranslation.world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real frameTranslation.world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real frameTranslation.world.defaultJointLength(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real frameTranslation.world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real frameTranslation.world.defaultForceLength(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real frameTranslation.world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real frameTranslation.world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real frameTranslation.world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = frameTranslation.world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real frameTranslation.world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.axisLength / frameTranslation.world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real frameTranslation.world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = frameTranslation.world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real frameTranslation.world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * frameTranslation.world.axisLength;
//   protected parameter Real frameTranslation.world.headLength(quantity = \"Length\", unit = \"m\") = min(frameTranslation.world.axisLength,5.0 * frameTranslation.world.axisDiameter);
//   protected parameter Real frameTranslation.world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * frameTranslation.world.axisDiameter;
//   protected parameter Real frameTranslation.world.lineWidth(quantity = \"Length\", unit = \"m\") = frameTranslation.world.axisDiameter;
//   protected parameter Real frameTranslation.world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * frameTranslation.world.axisDiameter;
//   parameter Real frameTranslation.world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = frameTranslation.world.gravityArrowLength / frameTranslation.world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real frameTranslation.world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,frameTranslation.world.axisLength - frameTranslation.world.headLength);
//   protected parameter Real frameTranslation.world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(frameTranslation.world.gravityArrowLength,4.0 * frameTranslation.world.gravityArrowDiameter);
//   protected parameter Real frameTranslation.world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * frameTranslation.world.gravityArrowDiameter;
//   protected parameter Real frameTranslation.world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,frameTranslation.world.gravityArrowLength - frameTranslation.world.gravityHeadLength);
//   parameter String frameTranslation.shape.shapeType = frameTranslation.shapeType \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real frameTranslation.shape.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real frameTranslation.shape.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.shape.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.shape.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real frameTranslation.shape.r[1](quantity = \"Length\", unit = \"m\") = frameTranslation.frame_a.r_0[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.shape.r[2](quantity = \"Length\", unit = \"m\") = frameTranslation.frame_a.r_0[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.shape.r[3](quantity = \"Length\", unit = \"m\") = frameTranslation.frame_a.r_0[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real frameTranslation.shape.r_shape[1](quantity = \"Length\", unit = \"m\") = frameTranslation.r_shape[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.shape.r_shape[2](quantity = \"Length\", unit = \"m\") = frameTranslation.r_shape[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.shape.r_shape[3](quantity = \"Length\", unit = \"m\") = frameTranslation.r_shape[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real frameTranslation.shape.lengthDirection[1](unit = \"1\") = frameTranslation.lengthDirection[1] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.shape.lengthDirection[2](unit = \"1\") = frameTranslation.lengthDirection[2] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.shape.lengthDirection[3](unit = \"1\") = frameTranslation.lengthDirection[3] \"Vector in length direction, resolved in object frame\";
//   input Real frameTranslation.shape.widthDirection[1](unit = \"1\") = frameTranslation.widthDirection[1] \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.shape.widthDirection[2](unit = \"1\") = frameTranslation.widthDirection[2] \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.shape.widthDirection[3](unit = \"1\") = frameTranslation.widthDirection[3] \"Vector in width direction, resolved in object frame\";
//   input Real frameTranslation.shape.length(quantity = \"Length\", unit = \"m\") = frameTranslation.length \"Length of visual object\";
//   input Real frameTranslation.shape.width(quantity = \"Length\", unit = \"m\") = frameTranslation.width \"Width of visual object\";
//   input Real frameTranslation.shape.height(quantity = \"Length\", unit = \"m\") = frameTranslation.height \"Height of visual object\";
//   input Real frameTranslation.shape.extra = frameTranslation.extra \"Additional size data for some of the shape types\";
//   input Real frameTranslation.shape.color[1] = Real(frameTranslation.color[1]) \"Color of shape\";
//   input Real frameTranslation.shape.color[2] = Real(frameTranslation.color[2]) \"Color of shape\";
//   input Real frameTranslation.shape.color[3] = Real(frameTranslation.color[3]) \"Color of shape\";
//   input Real frameTranslation.shape.specularCoefficient = frameTranslation.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real frameTranslation.shape.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({frameTranslation.shape.lengthDirection[1],frameTranslation.shape.lengthDirection[2],frameTranslation.shape.lengthDirection[3]});
//   protected Real frameTranslation.shape.e_x[1](unit = \"1\") = if noEvent(frameTranslation.shape.abs_n_x < 1e-10) then 1.0 else frameTranslation.shape.lengthDirection[1] / frameTranslation.shape.abs_n_x;
//   protected Real frameTranslation.shape.e_x[2](unit = \"1\") = if noEvent(frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else frameTranslation.shape.lengthDirection[2] / frameTranslation.shape.abs_n_x;
//   protected Real frameTranslation.shape.e_x[3](unit = \"1\") = if noEvent(frameTranslation.shape.abs_n_x < 1e-10) then 0.0 else frameTranslation.shape.lengthDirection[3] / frameTranslation.shape.abs_n_x;
//   protected Real frameTranslation.shape.n_z_aux[1](unit = \"1\") = frameTranslation.shape.e_x[2] * frameTranslation.shape.widthDirection[3] - frameTranslation.shape.e_x[3] * frameTranslation.shape.widthDirection[2];
//   protected Real frameTranslation.shape.n_z_aux[2](unit = \"1\") = frameTranslation.shape.e_x[3] * frameTranslation.shape.widthDirection[1] - frameTranslation.shape.e_x[1] * frameTranslation.shape.widthDirection[3];
//   protected Real frameTranslation.shape.n_z_aux[3](unit = \"1\") = frameTranslation.shape.e_x[1] * frameTranslation.shape.widthDirection[2] - frameTranslation.shape.e_x[2] * frameTranslation.shape.widthDirection[1];
//   protected Real frameTranslation.shape.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]},if noEvent(frameTranslation.shape.n_z_aux[1] ^ 2.0 + (frameTranslation.shape.n_z_aux[2] ^ 2.0 + frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.shape.widthDirection[1],frameTranslation.shape.widthDirection[2],frameTranslation.shape.widthDirection[3]} else if noEvent(abs(frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]})[1];
//   protected Real frameTranslation.shape.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]},if noEvent(frameTranslation.shape.n_z_aux[1] ^ 2.0 + (frameTranslation.shape.n_z_aux[2] ^ 2.0 + frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.shape.widthDirection[1],frameTranslation.shape.widthDirection[2],frameTranslation.shape.widthDirection[3]} else if noEvent(abs(frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]})[2];
//   protected Real frameTranslation.shape.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]},if noEvent(frameTranslation.shape.n_z_aux[1] ^ 2.0 + (frameTranslation.shape.n_z_aux[2] ^ 2.0 + frameTranslation.shape.n_z_aux[3] ^ 2.0) > 1e-06) then {frameTranslation.shape.widthDirection[1],frameTranslation.shape.widthDirection[2],frameTranslation.shape.widthDirection[3]} else if noEvent(abs(frameTranslation.shape.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{frameTranslation.shape.e_x[1],frameTranslation.shape.e_x[2],frameTranslation.shape.e_x[3]})[3];
//   protected output Real frameTranslation.shape.Form;
//   output Real frameTranslation.shape.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real frameTranslation.shape.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.shape.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real frameTranslation.shape.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real frameTranslation.shape.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.shape.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.shape.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real frameTranslation.shape.Material;
//   protected output Real frameTranslation.shape.Extra;
//   parameter Real frameTranslation.lengthDirection[1](unit = \"1\") = lengthDirection[1] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.lengthDirection[2](unit = \"1\") = lengthDirection[2] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.lengthDirection[3](unit = \"1\") = lengthDirection[3] \" Vector in length direction of shape, resolved in frame_a\";
//   parameter Real frameTranslation.length(quantity = \"Length\", unit = \"m\") = length \" Length of shape\";
//   parameter Real frameTranslation.width(quantity = \"Length\", unit = \"m\", min = 0.0) = diameter \" Width of shape\";
//   parameter Real frameTranslation.height(quantity = \"Length\", unit = \"m\", min = 0.0) = diameter \" Height of shape.\";
//   Real world.frame_b.r_0[1](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[2](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.r_0[3](quantity = \"Length\", unit = \"m\") \"Position vector from world frame to the connector frame origin, resolved in world frame\";
//   Real world.frame_b.R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   Real world.frame_b.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   Real world.frame_b.f[1](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[2](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.f[3](quantity = \"Force\", unit = \"N\") \"Cut-force resolved in connector frame\";
//   Real world.frame_b.t[1](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[2](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   Real world.frame_b.t[3](quantity = \"Torque\", unit = \"N.m\") \"Cut-torque resolved in connector frame\";
//   parameter Boolean world.enableAnimation = true \"= true, if animation of all components is enabled\";
//   parameter Boolean world.animateWorld = true \"= true, if world coordinate system shall be visualized\";
//   parameter Boolean world.animateGravity = true \"= true, if gravity field shall be visualized (acceleration vector or field center)\";
//   parameter String world.label1 = \"x\" \"Label of horizontal axis in icon\";
//   parameter String world.label2 = \"y\" \"Label of vertical axis in icon\";
//   parameter enumeration(NoGravity, UniformGravity, PointGravity) world.gravityType = Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity \"Type of gravity field\";
//   parameter Real world.g(quantity = \"Acceleration\", unit = \"m/s2\") = 9.81 \"Constant gravity acceleration\";
//   parameter Real world.n[1](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[2](unit = \"1\") = -1.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.n[3](unit = \"1\") = 0.0 \"Direction of gravity resolved in world frame (gravity = g*n/length(n))\";
//   parameter Real world.mue(unit = \"m3/s2\", min = 0.0) = 398600000000000.0 \"Gravity field constant (default = field constant of earth)\";
//   parameter Boolean world.driveTrainMechanics3D = true \"= true, if 3-dim. mechanical effects of Parts.Mounting1D/Rotor1D/BevelGear1D shall be taken into account\";
//   parameter Boolean world.axisShowLabels = true \"= true, if labels shall be shown\";
//   input Integer world.axisColor_x[1](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[2](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_x[3](min = 0, max = 255) = 0 \"Color of x-arrow\";
//   input Integer world.axisColor_y[1](min = 0, max = 255) = world.axisColor_x[1];
//   input Integer world.axisColor_y[2](min = 0, max = 255) = world.axisColor_x[2];
//   input Integer world.axisColor_y[3](min = 0, max = 255) = world.axisColor_x[3];
//   input Integer world.axisColor_z[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of z-arrow\";
//   input Integer world.axisColor_z[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of z-arrow\";
//   input Integer world.axisColor_z[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of z-arrow\";
//   parameter Real world.gravityArrowTail[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   parameter Real world.gravityArrowTail[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to arrow tail, resolved in world frame\";
//   input Integer world.gravityArrowColor[1](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[2](min = 0, max = 255) = 230 \"Color of gravity arrow\";
//   input Integer world.gravityArrowColor[3](min = 0, max = 255) = 0 \"Color of gravity arrow\";
//   parameter Real world.gravitySphereDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = 12742000.0 \"Diameter of sphere representing gravity center (default = mean diameter of earth)\";
//   input Integer world.gravitySphereColor[1](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[2](min = 0, max = 255) = 230 \"Color of gravity sphere\";
//   input Integer world.gravitySphereColor[3](min = 0, max = 255) = 0 \"Color of gravity sphere\";
//   parameter Real world.nominalLength(quantity = \"Length\", unit = \"m\") = 1.0 \"\\\"Nominal\\\" length of multi-body system\";
//   parameter Real world.defaultWidthFraction = 20.0 \"Default for shape width as a fraction of shape length (e.g., for Parts.FixedTranslation)\";
//   parameter Real world.defaultFrameDiameterFraction = 40.0 \"Default for arrow diameter of a coordinate system as a fraction of axis length\";
//   parameter Real world.defaultSpecularCoefficient(min = 0.0) = 0.7 \"Default reflection of ambient light (= 0: light is completely absorbed)\";
//   parameter Real world.defaultN_to_m(unit = \"N/m\", min = 0.0) = 1000.0 \"Default scaling of force arrows (length = force/defaultN_to_m)\";
//   parameter Real world.defaultNm_to_m(unit = \"N.m/m\", min = 0.0) = 1000.0 \"Default scaling of torque arrows (length = torque/defaultNm_to_m)\";
//   protected parameter Integer world.ndim = if world.enableAnimation and world.animateWorld then 1 else 0;
//   parameter String world.x_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.x_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.x_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.x_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowLine.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowLine.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowLine.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowLine.lengthDirection[1],world.x_arrowLine.lengthDirection[2],world.x_arrowLine.lengthDirection[3]});
//   protected Real world.x_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 1.0 else world.x_arrowLine.lengthDirection[1] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[2] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.x_arrowLine.abs_n_x < 1e-10) then 0.0 else world.x_arrowLine.lengthDirection[3] / world.x_arrowLine.abs_n_x;
//   protected Real world.x_arrowLine.n_z_aux[1](unit = \"1\") = world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[3] - world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[2];
//   protected Real world.x_arrowLine.n_z_aux[2](unit = \"1\") = world.x_arrowLine.e_x[3] * world.x_arrowLine.widthDirection[1] - world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[3];
//   protected Real world.x_arrowLine.n_z_aux[3](unit = \"1\") = world.x_arrowLine.e_x[1] * world.x_arrowLine.widthDirection[2] - world.x_arrowLine.e_x[2] * world.x_arrowLine.widthDirection[1];
//   protected Real world.x_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[1];
//   protected Real world.x_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[2];
//   protected Real world.x_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]},if noEvent(world.x_arrowLine.n_z_aux[1] ^ 2.0 + (world.x_arrowLine.n_z_aux[2] ^ 2.0 + world.x_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowLine.widthDirection[1],world.x_arrowLine.widthDirection[2],world.x_arrowLine.widthDirection[3]} else if noEvent(abs(world.x_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowLine.e_x[1],world.x_arrowLine.e_x[2],world.x_arrowLine.e_x[3]})[3];
//   protected output Real world.x_arrowLine.Form;
//   output Real world.x_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowLine.Material;
//   protected output Real world.x_arrowLine.Extra;
//   parameter String world.x_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[1](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.x_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.x_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.x_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_arrowHead.color[1] = Real(world.axisColor_x[1]) \"Color of shape\";
//   input Real world.x_arrowHead.color[2] = Real(world.axisColor_x[2]) \"Color of shape\";
//   input Real world.x_arrowHead.color[3] = Real(world.axisColor_x[3]) \"Color of shape\";
//   input Real world.x_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_arrowHead.lengthDirection[1],world.x_arrowHead.lengthDirection[2],world.x_arrowHead.lengthDirection[3]});
//   protected Real world.x_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 1.0 else world.x_arrowHead.lengthDirection[1] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[2] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.x_arrowHead.abs_n_x < 1e-10) then 0.0 else world.x_arrowHead.lengthDirection[3] / world.x_arrowHead.abs_n_x;
//   protected Real world.x_arrowHead.n_z_aux[1](unit = \"1\") = world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[3] - world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[2];
//   protected Real world.x_arrowHead.n_z_aux[2](unit = \"1\") = world.x_arrowHead.e_x[3] * world.x_arrowHead.widthDirection[1] - world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[3];
//   protected Real world.x_arrowHead.n_z_aux[3](unit = \"1\") = world.x_arrowHead.e_x[1] * world.x_arrowHead.widthDirection[2] - world.x_arrowHead.e_x[2] * world.x_arrowHead.widthDirection[1];
//   protected Real world.x_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[1];
//   protected Real world.x_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[2];
//   protected Real world.x_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]},if noEvent(world.x_arrowHead.n_z_aux[1] ^ 2.0 + (world.x_arrowHead.n_z_aux[2] ^ 2.0 + world.x_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_arrowHead.widthDirection[1],world.x_arrowHead.widthDirection[2],world.x_arrowHead.widthDirection[3]} else if noEvent(abs(world.x_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_arrowHead.e_x[1],world.x_arrowHead.e_x[2],world.x_arrowHead.e_x[3]})[3];
//   protected output Real world.x_arrowHead.Form;
//   output Real world.x_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_arrowHead.Material;
//   protected output Real world.x_arrowHead.Extra;
//   parameter String world.y_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.y_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.y_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.y_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowLine.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowLine.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowLine.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowLine.lengthDirection[1],world.y_arrowLine.lengthDirection[2],world.y_arrowLine.lengthDirection[3]});
//   protected Real world.y_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 1.0 else world.y_arrowLine.lengthDirection[1] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[2] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.y_arrowLine.abs_n_x < 1e-10) then 0.0 else world.y_arrowLine.lengthDirection[3] / world.y_arrowLine.abs_n_x;
//   protected Real world.y_arrowLine.n_z_aux[1](unit = \"1\") = world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[3] - world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[2];
//   protected Real world.y_arrowLine.n_z_aux[2](unit = \"1\") = world.y_arrowLine.e_x[3] * world.y_arrowLine.widthDirection[1] - world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[3];
//   protected Real world.y_arrowLine.n_z_aux[3](unit = \"1\") = world.y_arrowLine.e_x[1] * world.y_arrowLine.widthDirection[2] - world.y_arrowLine.e_x[2] * world.y_arrowLine.widthDirection[1];
//   protected Real world.y_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[1];
//   protected Real world.y_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[2];
//   protected Real world.y_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]},if noEvent(world.y_arrowLine.n_z_aux[1] ^ 2.0 + (world.y_arrowLine.n_z_aux[2] ^ 2.0 + world.y_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowLine.widthDirection[1],world.y_arrowLine.widthDirection[2],world.y_arrowLine.widthDirection[3]} else if noEvent(abs(world.y_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowLine.e_x[1],world.y_arrowLine.e_x[2],world.y_arrowLine.e_x[3]})[3];
//   protected output Real world.y_arrowLine.Form;
//   output Real world.y_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowLine.Material;
//   protected output Real world.y_arrowLine.Extra;
//   parameter String world.y_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[2](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.lengthDirection[3](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[1](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[2](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.y_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.y_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.y_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_arrowHead.color[1] = Real(world.axisColor_y[1]) \"Color of shape\";
//   input Real world.y_arrowHead.color[2] = Real(world.axisColor_y[2]) \"Color of shape\";
//   input Real world.y_arrowHead.color[3] = Real(world.axisColor_y[3]) \"Color of shape\";
//   input Real world.y_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_arrowHead.lengthDirection[1],world.y_arrowHead.lengthDirection[2],world.y_arrowHead.lengthDirection[3]});
//   protected Real world.y_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 1.0 else world.y_arrowHead.lengthDirection[1] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[2] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.y_arrowHead.abs_n_x < 1e-10) then 0.0 else world.y_arrowHead.lengthDirection[3] / world.y_arrowHead.abs_n_x;
//   protected Real world.y_arrowHead.n_z_aux[1](unit = \"1\") = world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[3] - world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[2];
//   protected Real world.y_arrowHead.n_z_aux[2](unit = \"1\") = world.y_arrowHead.e_x[3] * world.y_arrowHead.widthDirection[1] - world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[3];
//   protected Real world.y_arrowHead.n_z_aux[3](unit = \"1\") = world.y_arrowHead.e_x[1] * world.y_arrowHead.widthDirection[2] - world.y_arrowHead.e_x[2] * world.y_arrowHead.widthDirection[1];
//   protected Real world.y_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[1];
//   protected Real world.y_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[2];
//   protected Real world.y_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]},if noEvent(world.y_arrowHead.n_z_aux[1] ^ 2.0 + (world.y_arrowHead.n_z_aux[2] ^ 2.0 + world.y_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_arrowHead.widthDirection[1],world.y_arrowHead.widthDirection[2],world.y_arrowHead.widthDirection[3]} else if noEvent(abs(world.y_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_arrowHead.e_x[1],world.y_arrowHead.e_x[2],world.y_arrowHead.e_x[3]})[3];
//   protected output Real world.y_arrowHead.Form;
//   output Real world.y_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_arrowHead.Material;
//   protected output Real world.y_arrowHead.Extra;
//   parameter String world.z_arrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowLine.length(quantity = \"Length\", unit = \"m\") = world.lineLength \"Length of visual object\";
//   input Real world.z_arrowLine.width(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Width of visual object\";
//   input Real world.z_arrowLine.height(quantity = \"Length\", unit = \"m\") = world.lineWidth \"Height of visual object\";
//   input Real world.z_arrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowLine.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowLine.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowLine.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowLine.lengthDirection[1],world.z_arrowLine.lengthDirection[2],world.z_arrowLine.lengthDirection[3]});
//   protected Real world.z_arrowLine.e_x[1](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 1.0 else world.z_arrowLine.lengthDirection[1] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[2](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[2] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.e_x[3](unit = \"1\") = if noEvent(world.z_arrowLine.abs_n_x < 1e-10) then 0.0 else world.z_arrowLine.lengthDirection[3] / world.z_arrowLine.abs_n_x;
//   protected Real world.z_arrowLine.n_z_aux[1](unit = \"1\") = world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[3] - world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[2];
//   protected Real world.z_arrowLine.n_z_aux[2](unit = \"1\") = world.z_arrowLine.e_x[3] * world.z_arrowLine.widthDirection[1] - world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[3];
//   protected Real world.z_arrowLine.n_z_aux[3](unit = \"1\") = world.z_arrowLine.e_x[1] * world.z_arrowLine.widthDirection[2] - world.z_arrowLine.e_x[2] * world.z_arrowLine.widthDirection[1];
//   protected Real world.z_arrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[1];
//   protected Real world.z_arrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[2];
//   protected Real world.z_arrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]},if noEvent(world.z_arrowLine.n_z_aux[1] ^ 2.0 + (world.z_arrowLine.n_z_aux[2] ^ 2.0 + world.z_arrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowLine.widthDirection[1],world.z_arrowLine.widthDirection[2],world.z_arrowLine.widthDirection[3]} else if noEvent(abs(world.z_arrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowLine.e_x[1],world.z_arrowLine.e_x[2],world.z_arrowLine.e_x[3]})[3];
//   protected output Real world.z_arrowLine.Form;
//   output Real world.z_arrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowLine.Material;
//   protected output Real world.z_arrowLine.Extra;
//   parameter String world.z_arrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_arrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_arrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_arrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r[3](quantity = \"Length\", unit = \"m\") = world.lineLength \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_arrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[1](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[2](unit = \"1\") = 0.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.lengthDirection[3](unit = \"1\") = 1.0 \"Vector in length direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_arrowHead.length(quantity = \"Length\", unit = \"m\") = world.headLength \"Length of visual object\";
//   input Real world.z_arrowHead.width(quantity = \"Length\", unit = \"m\") = world.headWidth \"Width of visual object\";
//   input Real world.z_arrowHead.height(quantity = \"Length\", unit = \"m\") = world.headWidth \"Height of visual object\";
//   input Real world.z_arrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_arrowHead.color[1] = Real(world.axisColor_z[1]) \"Color of shape\";
//   input Real world.z_arrowHead.color[2] = Real(world.axisColor_z[2]) \"Color of shape\";
//   input Real world.z_arrowHead.color[3] = Real(world.axisColor_z[3]) \"Color of shape\";
//   input Real world.z_arrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_arrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_arrowHead.lengthDirection[1],world.z_arrowHead.lengthDirection[2],world.z_arrowHead.lengthDirection[3]});
//   protected Real world.z_arrowHead.e_x[1](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 1.0 else world.z_arrowHead.lengthDirection[1] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[2](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[2] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.e_x[3](unit = \"1\") = if noEvent(world.z_arrowHead.abs_n_x < 1e-10) then 0.0 else world.z_arrowHead.lengthDirection[3] / world.z_arrowHead.abs_n_x;
//   protected Real world.z_arrowHead.n_z_aux[1](unit = \"1\") = world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[3] - world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[2];
//   protected Real world.z_arrowHead.n_z_aux[2](unit = \"1\") = world.z_arrowHead.e_x[3] * world.z_arrowHead.widthDirection[1] - world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[3];
//   protected Real world.z_arrowHead.n_z_aux[3](unit = \"1\") = world.z_arrowHead.e_x[1] * world.z_arrowHead.widthDirection[2] - world.z_arrowHead.e_x[2] * world.z_arrowHead.widthDirection[1];
//   protected Real world.z_arrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[1];
//   protected Real world.z_arrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[2];
//   protected Real world.z_arrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]},if noEvent(world.z_arrowHead.n_z_aux[1] ^ 2.0 + (world.z_arrowHead.n_z_aux[2] ^ 2.0 + world.z_arrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_arrowHead.widthDirection[1],world.z_arrowHead.widthDirection[2],world.z_arrowHead.widthDirection[3]} else if noEvent(abs(world.z_arrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_arrowHead.e_x[1],world.z_arrowHead.e_x[2],world.z_arrowHead.e_x[3]})[3];
//   protected output Real world.z_arrowHead.Form;
//   output Real world.z_arrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_arrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_arrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_arrowHead.Material;
//   protected output Real world.z_arrowHead.Extra;
//   protected parameter Integer world.ndim_pointGravity = if world.enableAnimation and world.animateGravity and world.gravityType == Modelica.Mechanics.MultiBody.Types.GravityTypes.UniformGravity then 1 else 0;
//   parameter String world.gravityArrowLine.shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowLine.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowLine.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowLine.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowLine.r_shape[1](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[2](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.r_shape[3](quantity = \"Length\", unit = \"m\") = world.gravityArrowTail[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowLine.length(quantity = \"Length\", unit = \"m\") = world.gravityLineLength \"Length of visual object\";
//   input Real world.gravityArrowLine.width(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Width of visual object\";
//   input Real world.gravityArrowLine.height(quantity = \"Length\", unit = \"m\") = world.gravityArrowDiameter \"Height of visual object\";
//   input Real world.gravityArrowLine.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowLine.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowLine.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowLine.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowLine.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowLine.lengthDirection[1],world.gravityArrowLine.lengthDirection[2],world.gravityArrowLine.lengthDirection[3]});
//   protected Real world.gravityArrowLine.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 1.0 else world.gravityArrowLine.lengthDirection[1] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[2] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowLine.abs_n_x < 1e-10) then 0.0 else world.gravityArrowLine.lengthDirection[3] / world.gravityArrowLine.abs_n_x;
//   protected Real world.gravityArrowLine.n_z_aux[1](unit = \"1\") = world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[3] - world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[2];
//   protected Real world.gravityArrowLine.n_z_aux[2](unit = \"1\") = world.gravityArrowLine.e_x[3] * world.gravityArrowLine.widthDirection[1] - world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[3];
//   protected Real world.gravityArrowLine.n_z_aux[3](unit = \"1\") = world.gravityArrowLine.e_x[1] * world.gravityArrowLine.widthDirection[2] - world.gravityArrowLine.e_x[2] * world.gravityArrowLine.widthDirection[1];
//   protected Real world.gravityArrowLine.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[1];
//   protected Real world.gravityArrowLine.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[2];
//   protected Real world.gravityArrowLine.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]},if noEvent(world.gravityArrowLine.n_z_aux[1] ^ 2.0 + (world.gravityArrowLine.n_z_aux[2] ^ 2.0 + world.gravityArrowLine.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowLine.widthDirection[1],world.gravityArrowLine.widthDirection[2],world.gravityArrowLine.widthDirection[3]} else if noEvent(abs(world.gravityArrowLine.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowLine.e_x[1],world.gravityArrowLine.e_x[2],world.gravityArrowLine.e_x[3]})[3];
//   protected output Real world.gravityArrowLine.Form;
//   output Real world.gravityArrowLine.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowLine.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowLine.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowLine.Material;
//   protected output Real world.gravityArrowLine.Extra;
//   parameter String world.gravityArrowHead.shapeType = \"cone\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.gravityArrowHead.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.gravityArrowHead.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.gravityArrowHead.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.gravityArrowHead.r_shape[1](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13) * world.gravityLineLength)[1] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[2](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13) * world.gravityLineLength)[2] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.r_shape[3](quantity = \"Length\", unit = \"m\") = ({world.gravityArrowTail[1],world.gravityArrowTail[2],world.gravityArrowTail[3]} + Modelica.Math.Vectors.normalize({world.n[1],world.n[2],world.n[3]},1e-13) * world.gravityLineLength)[3] \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[1](unit = \"1\") = world.n[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[2](unit = \"1\") = world.n[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.lengthDirection[3](unit = \"1\") = world.n[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.gravityArrowHead.length(quantity = \"Length\", unit = \"m\") = world.gravityHeadLength \"Length of visual object\";
//   input Real world.gravityArrowHead.width(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Width of visual object\";
//   input Real world.gravityArrowHead.height(quantity = \"Length\", unit = \"m\") = world.gravityHeadWidth \"Height of visual object\";
//   input Real world.gravityArrowHead.extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.gravityArrowHead.color[1] = Real(world.gravityArrowColor[1]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[2] = Real(world.gravityArrowColor[2]) \"Color of shape\";
//   input Real world.gravityArrowHead.color[3] = Real(world.gravityArrowColor[3]) \"Color of shape\";
//   input Real world.gravityArrowHead.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.gravityArrowHead.abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.gravityArrowHead.lengthDirection[1],world.gravityArrowHead.lengthDirection[2],world.gravityArrowHead.lengthDirection[3]});
//   protected Real world.gravityArrowHead.e_x[1](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 1.0 else world.gravityArrowHead.lengthDirection[1] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[2](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[2] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.e_x[3](unit = \"1\") = if noEvent(world.gravityArrowHead.abs_n_x < 1e-10) then 0.0 else world.gravityArrowHead.lengthDirection[3] / world.gravityArrowHead.abs_n_x;
//   protected Real world.gravityArrowHead.n_z_aux[1](unit = \"1\") = world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[3] - world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[2];
//   protected Real world.gravityArrowHead.n_z_aux[2](unit = \"1\") = world.gravityArrowHead.e_x[3] * world.gravityArrowHead.widthDirection[1] - world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[3];
//   protected Real world.gravityArrowHead.n_z_aux[3](unit = \"1\") = world.gravityArrowHead.e_x[1] * world.gravityArrowHead.widthDirection[2] - world.gravityArrowHead.e_x[2] * world.gravityArrowHead.widthDirection[1];
//   protected Real world.gravityArrowHead.e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[1];
//   protected Real world.gravityArrowHead.e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[2];
//   protected Real world.gravityArrowHead.e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]},if noEvent(world.gravityArrowHead.n_z_aux[1] ^ 2.0 + (world.gravityArrowHead.n_z_aux[2] ^ 2.0 + world.gravityArrowHead.n_z_aux[3] ^ 2.0) > 1e-06) then {world.gravityArrowHead.widthDirection[1],world.gravityArrowHead.widthDirection[2],world.gravityArrowHead.widthDirection[3]} else if noEvent(abs(world.gravityArrowHead.e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.gravityArrowHead.e_x[1],world.gravityArrowHead.e_x[2],world.gravityArrowHead.e_x[3]})[3];
//   protected output Real world.gravityArrowHead.Form;
//   output Real world.gravityArrowHead.rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.gravityArrowHead.rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.gravityArrowHead.size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.gravityArrowHead.Material;
//   protected output Real world.gravityArrowHead.Extra;
//   protected parameter Integer world.ndim2 = if world.enableAnimation and world.animateWorld and world.axisShowLabels then 1 else 0;
//   input Real world.x_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.r_lines[1](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[1](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.x_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.x_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.x_label.color[1](min = 0, max = 255) = world.axisColor_x[1] \"Color of cylinders\";
//   input Integer world.x_label.color[2](min = 0, max = 255) = world.axisColor_x[2] \"Color of cylinders\";
//   input Integer world.x_label.color[3](min = 0, max = 255) = world.axisColor_x[3] \"Color of cylinders\";
//   input Real world.x_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][1];
//   protected Real world.x_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][2];
//   protected Real world.x_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[1][3];
//   protected Real world.x_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][1];
//   protected Real world.x_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][2];
//   protected Real world.x_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[2][3];
//   protected Real world.x_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][1];
//   protected Real world.x_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][2];
//   protected Real world.x_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.x_label.n_x[1],world.x_label.n_x[2],world.x_label.n_x[3]},{world.x_label.n_y[1],world.x_label.n_y[2],world.x_label.n_y[3]})[3][3];
//   protected Real world.x_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][1];
//   protected Real world.x_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][2];
//   protected Real world.x_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[1][3];
//   protected Real world.x_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][1];
//   protected Real world.x_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][2];
//   protected Real world.x_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[2][3];
//   protected Real world.x_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][1];
//   protected Real world.x_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][2];
//   protected Real world.x_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}})[3][3];
//   protected Real world.x_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[1];
//   protected Real world.x_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[2];
//   protected Real world.x_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r[1],world.x_label.r[2],world.x_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R.T[1,1],world.x_label.R.T[1,2],world.x_label.R.T[1,3]},{world.x_label.R.T[2,1],world.x_label.R.T[2,2],world.x_label.R.T[2,3]},{world.x_label.R.T[3,1],world.x_label.R.T[3,2],world.x_label.R.T[3,3]}},{world.x_label.r_lines[1],world.x_label.r_lines[2],world.x_label.r_lines[3]}))[3];
//   parameter String world.x_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[1,1,1],world.x_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[1,2,1] - world.x_label.lines[1,1,1],world.x_label.lines[1,2,2] - world.x_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[1].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[1].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[1].lengthDirection[1],world.x_label.cylinders[1].lengthDirection[2],world.x_label.cylinders[1].lengthDirection[3]});
//   protected Real world.x_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[1].lengthDirection[1] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[2] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[1].lengthDirection[3] / world.x_label.cylinders[1].abs_n_x;
//   protected Real world.x_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[3] - world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[2];
//   protected Real world.x_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[1].e_x[3] * world.x_label.cylinders[1].widthDirection[1] - world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[3];
//   protected Real world.x_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[1].e_x[1] * world.x_label.cylinders[1].widthDirection[2] - world.x_label.cylinders[1].e_x[2] * world.x_label.cylinders[1].widthDirection[1];
//   protected Real world.x_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[1];
//   protected Real world.x_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[2];
//   protected Real world.x_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]},if noEvent(world.x_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[1].widthDirection[1],world.x_label.cylinders[1].widthDirection[2],world.x_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[1].e_x[1],world.x_label.cylinders[1].e_x[2],world.x_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[1].Form;
//   output Real world.x_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[1].Material;
//   protected output Real world.x_label.cylinders[1].Extra;
//   parameter String world.x_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.x_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.x_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.x_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.x_label.r_abs[1],world.x_label.r_abs[2],world.x_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_lines[1,1],world.x_label.R_lines[1,2],world.x_label.R_lines[1,3]},{world.x_label.R_lines[2,1],world.x_label.R_lines[2,2],world.x_label.R_lines[2,3]},{world.x_label.R_lines[3,1],world.x_label.R_lines[3,2],world.x_label.R_lines[3,3]}},{world.x_label.lines[2,1,1],world.x_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.x_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.R_rel[1,1],world.x_label.R_rel[1,2],world.x_label.R_rel[1,3]},{world.x_label.R_rel[2,1],world.x_label.R_rel[2,2],world.x_label.R_rel[2,3]},{world.x_label.R_rel[3,1],world.x_label.R_rel[3,2],world.x_label.R_rel[3,3]}},{world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.x_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.x_label.lines[2,2,1] - world.x_label.lines[2,1,1],world.x_label.lines[2,2,2] - world.x_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.x_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Width of visual object\";
//   input Real world.x_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.x_label.diameter \"Height of visual object\";
//   input Real world.x_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.x_label.cylinders[2].color[1] = Real(world.x_label.color[1]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[2] = Real(world.x_label.color[2]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].color[3] = Real(world.x_label.color[3]) \"Color of shape\";
//   input Real world.x_label.cylinders[2].specularCoefficient = world.x_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.x_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.x_label.cylinders[2].lengthDirection[1],world.x_label.cylinders[2].lengthDirection[2],world.x_label.cylinders[2].lengthDirection[3]});
//   protected Real world.x_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.x_label.cylinders[2].lengthDirection[1] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[2] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.x_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.x_label.cylinders[2].lengthDirection[3] / world.x_label.cylinders[2].abs_n_x;
//   protected Real world.x_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[3] - world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[2];
//   protected Real world.x_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.x_label.cylinders[2].e_x[3] * world.x_label.cylinders[2].widthDirection[1] - world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[3];
//   protected Real world.x_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.x_label.cylinders[2].e_x[1] * world.x_label.cylinders[2].widthDirection[2] - world.x_label.cylinders[2].e_x[2] * world.x_label.cylinders[2].widthDirection[1];
//   protected Real world.x_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[1];
//   protected Real world.x_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[2];
//   protected Real world.x_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]},if noEvent(world.x_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.x_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.x_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.x_label.cylinders[2].widthDirection[1],world.x_label.cylinders[2].widthDirection[2],world.x_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.x_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.x_label.cylinders[2].e_x[1],world.x_label.cylinders[2].e_x[2],world.x_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.x_label.cylinders[2].Form;
//   output Real world.x_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.x_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.x_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.x_label.cylinders[2].Material;
//   protected output Real world.x_label.cylinders[2].Extra;
//   protected parameter Integer world.x_label.n = 2 \"Number of cylinders\";
//   input Real world.y_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[2](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.r_lines[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[2](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_x[3](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[1](unit = \"1\") = -1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[2](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.y_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 1.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 0.5 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel * 0.75 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.y_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.y_label.color[1](min = 0, max = 255) = world.axisColor_y[1] \"Color of cylinders\";
//   input Integer world.y_label.color[2](min = 0, max = 255) = world.axisColor_y[2] \"Color of cylinders\";
//   input Integer world.y_label.color[3](min = 0, max = 255) = world.axisColor_y[3] \"Color of cylinders\";
//   input Real world.y_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][1];
//   protected Real world.y_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][2];
//   protected Real world.y_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[1][3];
//   protected Real world.y_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][1];
//   protected Real world.y_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][2];
//   protected Real world.y_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[2][3];
//   protected Real world.y_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][1];
//   protected Real world.y_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][2];
//   protected Real world.y_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.y_label.n_x[1],world.y_label.n_x[2],world.y_label.n_x[3]},{world.y_label.n_y[1],world.y_label.n_y[2],world.y_label.n_y[3]})[3][3];
//   protected Real world.y_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][1];
//   protected Real world.y_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][2];
//   protected Real world.y_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[1][3];
//   protected Real world.y_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][1];
//   protected Real world.y_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][2];
//   protected Real world.y_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[2][3];
//   protected Real world.y_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][1];
//   protected Real world.y_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][2];
//   protected Real world.y_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}})[3][3];
//   protected Real world.y_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[1];
//   protected Real world.y_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[2];
//   protected Real world.y_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r[1],world.y_label.r[2],world.y_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R.T[1,1],world.y_label.R.T[1,2],world.y_label.R.T[1,3]},{world.y_label.R.T[2,1],world.y_label.R.T[2,2],world.y_label.R.T[2,3]},{world.y_label.R.T[3,1],world.y_label.R.T[3,2],world.y_label.R.T[3,3]}},{world.y_label.r_lines[1],world.y_label.r_lines[2],world.y_label.r_lines[3]}))[3];
//   parameter String world.y_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[1,1,1],world.y_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[1,2,1] - world.y_label.lines[1,1,1],world.y_label.lines[1,2,2] - world.y_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[1].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[1].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[1].lengthDirection[1],world.y_label.cylinders[1].lengthDirection[2],world.y_label.cylinders[1].lengthDirection[3]});
//   protected Real world.y_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[1].lengthDirection[1] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[2] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[1].lengthDirection[3] / world.y_label.cylinders[1].abs_n_x;
//   protected Real world.y_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[3] - world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[2];
//   protected Real world.y_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[1].e_x[3] * world.y_label.cylinders[1].widthDirection[1] - world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[3];
//   protected Real world.y_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[1].e_x[1] * world.y_label.cylinders[1].widthDirection[2] - world.y_label.cylinders[1].e_x[2] * world.y_label.cylinders[1].widthDirection[1];
//   protected Real world.y_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[1];
//   protected Real world.y_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[2];
//   protected Real world.y_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]},if noEvent(world.y_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[1].widthDirection[1],world.y_label.cylinders[1].widthDirection[2],world.y_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[1].e_x[1],world.y_label.cylinders[1].e_x[2],world.y_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[1].Form;
//   output Real world.y_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[1].Material;
//   protected output Real world.y_label.cylinders[1].Extra;
//   parameter String world.y_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.y_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.y_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.y_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.y_label.r_abs[1],world.y_label.r_abs[2],world.y_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_lines[1,1],world.y_label.R_lines[1,2],world.y_label.R_lines[1,3]},{world.y_label.R_lines[2,1],world.y_label.R_lines[2,2],world.y_label.R_lines[2,3]},{world.y_label.R_lines[3,1],world.y_label.R_lines[3,2],world.y_label.R_lines[3,3]}},{world.y_label.lines[2,1,1],world.y_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.y_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.R_rel[1,1],world.y_label.R_rel[1,2],world.y_label.R_rel[1,3]},{world.y_label.R_rel[2,1],world.y_label.R_rel[2,2],world.y_label.R_rel[2,3]},{world.y_label.R_rel[3,1],world.y_label.R_rel[3,2],world.y_label.R_rel[3,3]}},{world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.y_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.y_label.lines[2,2,1] - world.y_label.lines[2,1,1],world.y_label.lines[2,2,2] - world.y_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.y_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Width of visual object\";
//   input Real world.y_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.y_label.diameter \"Height of visual object\";
//   input Real world.y_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.y_label.cylinders[2].color[1] = Real(world.y_label.color[1]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[2] = Real(world.y_label.color[2]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].color[3] = Real(world.y_label.color[3]) \"Color of shape\";
//   input Real world.y_label.cylinders[2].specularCoefficient = world.y_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.y_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.y_label.cylinders[2].lengthDirection[1],world.y_label.cylinders[2].lengthDirection[2],world.y_label.cylinders[2].lengthDirection[3]});
//   protected Real world.y_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.y_label.cylinders[2].lengthDirection[1] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[2] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.y_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.y_label.cylinders[2].lengthDirection[3] / world.y_label.cylinders[2].abs_n_x;
//   protected Real world.y_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[3] - world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[2];
//   protected Real world.y_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.y_label.cylinders[2].e_x[3] * world.y_label.cylinders[2].widthDirection[1] - world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[3];
//   protected Real world.y_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.y_label.cylinders[2].e_x[1] * world.y_label.cylinders[2].widthDirection[2] - world.y_label.cylinders[2].e_x[2] * world.y_label.cylinders[2].widthDirection[1];
//   protected Real world.y_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[1];
//   protected Real world.y_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[2];
//   protected Real world.y_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]},if noEvent(world.y_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.y_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.y_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.y_label.cylinders[2].widthDirection[1],world.y_label.cylinders[2].widthDirection[2],world.y_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.y_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.y_label.cylinders[2].e_x[1],world.y_label.cylinders[2].e_x[2],world.y_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.y_label.cylinders[2].Form;
//   output Real world.y_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.y_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.y_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.y_label.cylinders[2].Material;
//   protected output Real world.y_label.cylinders[2].Extra;
//   protected parameter Integer world.y_label.n = 2 \"Number of cylinders\";
//   input Real world.z_label.R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.r[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.r_lines[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.r_lines[3](quantity = \"Length\", unit = \"m\") = world.labelStart \"Position vector from origin of object frame to the origin of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[1](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[2](unit = \"1\") = 0.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_x[3](unit = \"1\") = 1.0 \"Vector in direction of x-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[1](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[2](unit = \"1\") = 1.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.n_y[3](unit = \"1\") = 0.0 \"Vector in direction of y-axis of 'lines' frame, resolved in object frame\";
//   input Real world.z_label.lines[1,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,1,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[1,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[2,2,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,1](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,1,2](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,1](quantity = \"Length\", unit = \"m\") = world.scaledLabel \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.lines[3,2,2](quantity = \"Length\", unit = \"m\") = 0.0 \"List of start and end points of cylinders resolved in an x-y frame defined by n_x, n_y, e.g., {[0,0;1,1], [0,1;1,0], [2,0; 3,1]}\";
//   input Real world.z_label.diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisDiameter \"Diameter of the cylinders defined by lines\";
//   input Integer world.z_label.color[1](min = 0, max = 255) = world.axisColor_z[1] \"Color of cylinders\";
//   input Integer world.z_label.color[2](min = 0, max = 255) = world.axisColor_z[2] \"Color of cylinders\";
//   input Integer world.z_label.color[3](min = 0, max = 255) = world.axisColor_z[3] \"Color of cylinders\";
//   input Real world.z_label.specularCoefficient = 0.0 \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.R_rel[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][1];
//   protected Real world.z_label.R_rel[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][2];
//   protected Real world.z_label.R_rel[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[1][3];
//   protected Real world.z_label.R_rel[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][1];
//   protected Real world.z_label.R_rel[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][2];
//   protected Real world.z_label.R_rel[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[2][3];
//   protected Real world.z_label.R_rel[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][1];
//   protected Real world.z_label.R_rel[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][2];
//   protected Real world.z_label.R_rel[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.from_nxy({world.z_label.n_x[1],world.z_label.n_x[2],world.z_label.n_x[3]},{world.z_label.n_y[1],world.z_label.n_y[2],world.z_label.n_y[3]})[3][3];
//   protected Real world.z_label.R_lines[1,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][1];
//   protected Real world.z_label.R_lines[1,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][2];
//   protected Real world.z_label.R_lines[1,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[1][3];
//   protected Real world.z_label.R_lines[2,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][1];
//   protected Real world.z_label.R_lines[2,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][2];
//   protected Real world.z_label.R_lines[2,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[2][3];
//   protected Real world.z_label.R_lines[3,1] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][1];
//   protected Real world.z_label.R_lines[3,2] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][2];
//   protected Real world.z_label.R_lines[3,3] = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.absoluteRotation({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}})[3][3];
//   protected Real world.z_label.r_abs[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[1];
//   protected Real world.z_label.r_abs[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[2];
//   protected Real world.z_label.r_abs[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r[1],world.z_label.r[2],world.z_label.r[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R.T[1,1],world.z_label.R.T[1,2],world.z_label.R.T[1,3]},{world.z_label.R.T[2,1],world.z_label.R.T[2,2],world.z_label.R.T[2,3]},{world.z_label.R.T[3,1],world.z_label.R.T[3,2],world.z_label.R.T[3,3]}},{world.z_label.r_lines[1],world.z_label.r_lines[2],world.z_label.r_lines[3]}))[3];
//   parameter String world.z_label.cylinders[1].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[1].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[1].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[1].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[1,1,1],world.z_label.lines[1,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[1].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[1].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[1,2,1] - world.z_label.lines[1,1,1],world.z_label.lines[1,2,2] - world.z_label.lines[1,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[1].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[1].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[1].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[1].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[1].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[1].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[1].lengthDirection[1],world.z_label.cylinders[1].lengthDirection[2],world.z_label.cylinders[1].lengthDirection[3]});
//   protected Real world.z_label.cylinders[1].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[1].lengthDirection[1] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[2] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[1].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[1].lengthDirection[3] / world.z_label.cylinders[1].abs_n_x;
//   protected Real world.z_label.cylinders[1].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[3] - world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[2];
//   protected Real world.z_label.cylinders[1].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[1].e_x[3] * world.z_label.cylinders[1].widthDirection[1] - world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[3];
//   protected Real world.z_label.cylinders[1].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[1].e_x[1] * world.z_label.cylinders[1].widthDirection[2] - world.z_label.cylinders[1].e_x[2] * world.z_label.cylinders[1].widthDirection[1];
//   protected Real world.z_label.cylinders[1].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[1];
//   protected Real world.z_label.cylinders[1].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[2];
//   protected Real world.z_label.cylinders[1].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]},if noEvent(world.z_label.cylinders[1].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[1].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[1].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[1].widthDirection[1],world.z_label.cylinders[1].widthDirection[2],world.z_label.cylinders[1].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[1].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[1].e_x[1],world.z_label.cylinders[1].e_x[2],world.z_label.cylinders[1].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[1].Form;
//   output Real world.z_label.cylinders[1].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[1].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[1].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[1].Material;
//   protected output Real world.z_label.cylinders[1].Extra;
//   parameter String world.z_label.cylinders[2].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[2].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[2].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[2].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[2,1,1],world.z_label.lines[2,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[2].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[2].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[2,2,1] - world.z_label.lines[2,1,1],world.z_label.lines[2,2,2] - world.z_label.lines[2,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[2].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[2].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[2].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[2].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[2].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[2].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[2].lengthDirection[1],world.z_label.cylinders[2].lengthDirection[2],world.z_label.cylinders[2].lengthDirection[3]});
//   protected Real world.z_label.cylinders[2].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[2].lengthDirection[1] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[2] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[2].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[2].lengthDirection[3] / world.z_label.cylinders[2].abs_n_x;
//   protected Real world.z_label.cylinders[2].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[3] - world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[2];
//   protected Real world.z_label.cylinders[2].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[2].e_x[3] * world.z_label.cylinders[2].widthDirection[1] - world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[3];
//   protected Real world.z_label.cylinders[2].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[2].e_x[1] * world.z_label.cylinders[2].widthDirection[2] - world.z_label.cylinders[2].e_x[2] * world.z_label.cylinders[2].widthDirection[1];
//   protected Real world.z_label.cylinders[2].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[1];
//   protected Real world.z_label.cylinders[2].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[2];
//   protected Real world.z_label.cylinders[2].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]},if noEvent(world.z_label.cylinders[2].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[2].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[2].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[2].widthDirection[1],world.z_label.cylinders[2].widthDirection[2],world.z_label.cylinders[2].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[2].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[2].e_x[1],world.z_label.cylinders[2].e_x[2],world.z_label.cylinders[2].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[2].Form;
//   output Real world.z_label.cylinders[2].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[2].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[2].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[2].Material;
//   protected output Real world.z_label.cylinders[2].Extra;
//   parameter String world.z_label.cylinders[3].shapeType = \"cylinder\" \"Type of shape (box, sphere, cylinder, pipecylinder, cone, pipe, beam, gearwheel, spring)\";
//   input Real world.z_label.cylinders[3].R.T[1,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[1,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[2,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,1] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,2] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.T[3,3] \"Transformation matrix from world frame to local frame\";
//   input Real world.z_label.cylinders[3].R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") \"Absolute angular velocity of local frame, resolved in local frame\";
//   input Real world.z_label.cylinders[3].r[1](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[1] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[2](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[2] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r[3](quantity = \"Length\", unit = \"m\") = ({world.z_label.r_abs[1],world.z_label.r_abs[2],world.z_label.r_abs[3]} + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_lines[1,1],world.z_label.R_lines[1,2],world.z_label.R_lines[1,3]},{world.z_label.R_lines[2,1],world.z_label.R_lines[2,2],world.z_label.R_lines[2,3]},{world.z_label.R_lines[3,1],world.z_label.R_lines[3,2],world.z_label.R_lines[3,3]}},{world.z_label.lines[3,1,1],world.z_label.lines[3,1,2],0.0}))[3] \"Position vector from origin of world frame to origin of object frame, resolved in world frame\";
//   input Real world.z_label.cylinders[3].r_shape[1](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[2](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].r_shape[3](quantity = \"Length\", unit = \"m\") = 0.0 \"Position vector from origin of object frame to shape origin, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[1](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[1] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[2](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[2] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].lengthDirection[3](unit = \"1\") = Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.R_rel[1,1],world.z_label.R_rel[1,2],world.z_label.R_rel[1,3]},{world.z_label.R_rel[2,1],world.z_label.R_rel[2,2],world.z_label.R_rel[2,3]},{world.z_label.R_rel[3,1],world.z_label.R_rel[3,2],world.z_label.R_rel[3,3]}},{world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2],0.0})[3] \"Vector in length direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[1](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[2](unit = \"1\") = 1.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].widthDirection[3](unit = \"1\") = 0.0 \"Vector in width direction, resolved in object frame\";
//   input Real world.z_label.cylinders[3].length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({world.z_label.lines[3,2,1] - world.z_label.lines[3,1,1],world.z_label.lines[3,2,2] - world.z_label.lines[3,1,2]}) \"Length of visual object\";
//   input Real world.z_label.cylinders[3].width(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Width of visual object\";
//   input Real world.z_label.cylinders[3].height(quantity = \"Length\", unit = \"m\") = world.z_label.diameter \"Height of visual object\";
//   input Real world.z_label.cylinders[3].extra = 0.0 \"Additional size data for some of the shape types\";
//   input Real world.z_label.cylinders[3].color[1] = Real(world.z_label.color[1]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[2] = Real(world.z_label.color[2]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].color[3] = Real(world.z_label.color[3]) \"Color of shape\";
//   input Real world.z_label.cylinders[3].specularCoefficient = world.z_label.specularCoefficient \"Reflection of ambient light (= 0: light is completely absorbed)\";
//   protected Real world.z_label.cylinders[3].abs_n_x(unit = \"1\") = Modelica.Math.Vectors.length({world.z_label.cylinders[3].lengthDirection[1],world.z_label.cylinders[3].lengthDirection[2],world.z_label.cylinders[3].lengthDirection[3]});
//   protected Real world.z_label.cylinders[3].e_x[1](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 1.0 else world.z_label.cylinders[3].lengthDirection[1] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[2](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[2] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].e_x[3](unit = \"1\") = if noEvent(world.z_label.cylinders[3].abs_n_x < 1e-10) then 0.0 else world.z_label.cylinders[3].lengthDirection[3] / world.z_label.cylinders[3].abs_n_x;
//   protected Real world.z_label.cylinders[3].n_z_aux[1](unit = \"1\") = world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[3] - world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[2];
//   protected Real world.z_label.cylinders[3].n_z_aux[2](unit = \"1\") = world.z_label.cylinders[3].e_x[3] * world.z_label.cylinders[3].widthDirection[1] - world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[3];
//   protected Real world.z_label.cylinders[3].n_z_aux[3](unit = \"1\") = world.z_label.cylinders[3].e_x[1] * world.z_label.cylinders[3].widthDirection[2] - world.z_label.cylinders[3].e_x[2] * world.z_label.cylinders[3].widthDirection[1];
//   protected Real world.z_label.cylinders[3].e_y[1](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[1];
//   protected Real world.z_label.cylinders[3].e_y[2](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[2];
//   protected Real world.z_label.cylinders[3].e_y[3](unit = \"1\") = cross(Modelica.Math.Vectors.normalize(cross({world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]},if noEvent(world.z_label.cylinders[3].n_z_aux[1] ^ 2.0 + (world.z_label.cylinders[3].n_z_aux[2] ^ 2.0 + world.z_label.cylinders[3].n_z_aux[3] ^ 2.0) > 1e-06) then {world.z_label.cylinders[3].widthDirection[1],world.z_label.cylinders[3].widthDirection[2],world.z_label.cylinders[3].widthDirection[3]} else if noEvent(abs(world.z_label.cylinders[3].e_x[1]) > 1e-06) then {0.0,1.0,0.0} else {1.0,0.0,0.0}),1e-13),{world.z_label.cylinders[3].e_x[1],world.z_label.cylinders[3].e_x[2],world.z_label.cylinders[3].e_x[3]})[3];
//   protected output Real world.z_label.cylinders[3].Form;
//   output Real world.z_label.cylinders[3].rxvisobj[1](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[2](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rxvisobj[3](unit = \"1\") \"x-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[1](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[2](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].ryvisobj[3](unit = \"1\") \"y-axis unit vector of shape, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[1](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[2](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   output Real world.z_label.cylinders[3].rvisobj[3](quantity = \"Length\", unit = \"m\") \"position vector from world frame to shape frame, resolved in world frame\";
//   protected output Real world.z_label.cylinders[3].size[1](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[2](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].size[3](quantity = \"Length\", unit = \"m\") \"{length,width,height} of shape\";
//   protected output Real world.z_label.cylinders[3].Material;
//   protected output Real world.z_label.cylinders[3].Extra;
//   protected parameter Integer world.z_label.n = 3 \"Number of cylinders\";
//   parameter Real world.axisLength(quantity = \"Length\", unit = \"m\", min = 0.0) = world.nominalLength / 2.0 \"Length of world axes arrows\";
//   parameter Real world.defaultAxisLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 5.0 \"Default for length of a frame axis (but not world frame)\";
//   parameter Real world.defaultJointLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a joint\";
//   parameter Real world.defaultJointWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape representing a joint\";
//   parameter Real world.defaultForceLength(quantity = \"Length\", unit = \"m\") = world.nominalLength / 10.0 \"Default for the fixed length of a shape representing a force (e.g. damper)\";
//   parameter Real world.defaultForceWidth(quantity = \"Length\", unit = \"m\") = world.nominalLength / 20.0 \"Default for the fixed width of a shape represening a force (e.g. spring, bushing)\";
//   parameter Real world.defaultBodyDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 9.0 \"Default for diameter of sphere representing the center of mass of a body\";
//   parameter Real world.defaultArrowDiameter(quantity = \"Length\", unit = \"m\") = world.nominalLength / 40.0 \"Default for arrow diameter (e.g., of forces, torques, sensors)\";
//   parameter Real world.axisDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.axisLength / world.defaultFrameDiameterFraction \"Diameter of world axes arrows\";
//   parameter Real world.gravityArrowLength(quantity = \"Length\", unit = \"m\") = world.axisLength / 2.0 \"Length of gravity arrow\";
//   protected parameter Real world.labelStart(quantity = \"Length\", unit = \"m\") = 1.05 * world.axisLength;
//   protected parameter Real world.headLength(quantity = \"Length\", unit = \"m\") = min(world.axisLength,5.0 * world.axisDiameter);
//   protected parameter Real world.headWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   protected parameter Real world.lineWidth(quantity = \"Length\", unit = \"m\") = world.axisDiameter;
//   protected parameter Real world.scaledLabel(quantity = \"Length\", unit = \"m\") = 3.0 * world.axisDiameter;
//   parameter Real world.gravityArrowDiameter(quantity = \"Length\", unit = \"m\", min = 0.0) = world.gravityArrowLength / world.defaultWidthFraction \"Diameter of gravity arrow\";
//   protected parameter Real world.lineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.axisLength - world.headLength);
//   protected parameter Real world.gravityHeadLength(quantity = \"Length\", unit = \"m\") = min(world.gravityArrowLength,4.0 * world.gravityArrowDiameter);
//   protected parameter Real world.gravityHeadWidth(quantity = \"Length\", unit = \"m\") = 3.0 * world.gravityArrowDiameter;
//   protected parameter Real world.gravityLineLength(quantity = \"Length\", unit = \"m\") = max(0.0,world.gravityArrowLength - world.gravityHeadLength);
//   final parameter Real R.T[1,1] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[1,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[1,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[2,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[2,2] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[2,3] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[3,1] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[3,2] = 0.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.T[3,3] = 1.0 \"Transformation matrix from world frame to local frame\";
//   final parameter Real R.w[1](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real R.w[2](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   final parameter Real R.w[3](quantity = \"AngularVelocity\", unit = \"rad/s\") = 0.0 \"Absolute angular velocity of local frame, resolved in local frame\";
//   parameter Real lengthDirection[1](unit = \"1\") = r[1] - r_shape[1] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real lengthDirection[2](unit = \"1\") = r[2] - r_shape[2] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real lengthDirection[3](unit = \"1\") = r[3] - r_shape[3] \"Vector in length direction of cylinder, resolved in frame_a\";
//   parameter Real length(quantity = \"Length\", unit = \"m\") = Modelica.Math.Vectors.length({r[1] - r_shape[1],r[2] - r_shape[2],r[3] - r_shape[3]}) \"Length of cylinder\";
//   final parameter Real innerRadius(quantity = \"Length\", unit = \"m\", min = 0.0) = innerDiameter / 2.0 \"Inner-Radius of cylinder\";
//   parameter Real diameter(quantity = \"Length\", unit = \"m\", min = 0.0) = length / world.defaultWidthFraction \"Diameter of cylinder\";
//   final parameter Real r_CM[1](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({r[1],r[2],r[3]},1e-13) * length) / 2.0)[1] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real r_CM[2](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({r[1],r[2],r[3]},1e-13) * length) / 2.0)[2] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real r_CM[3](quantity = \"Length\", unit = \"m\") = ((Modelica.Math.Vectors.normalize({r[1],r[2],r[3]},1e-13) * length) / 2.0)[3] \"Position vector from frame_a to center of mass, resolved in frame_a\";
//   final parameter Real mi(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (density * (length * innerRadius ^ 2.0)) \"Mass of hole of cylinder\";
//   final parameter Real radius(quantity = \"Length\", unit = \"m\", min = 0.0) = diameter / 2.0 \"Radius of cylinder\";
//   final parameter Real mo(quantity = \"Mass\", unit = \"kg\", min = 0.0) = 3.14159265358979 * (density * (length * radius ^ 2.0)) \"Mass of cylinder without hole\";
//   final parameter Real I22(quantity = \"MomentOfInertia\", unit = \"kg.m2\") = mo * (length ^ 2.0 / 12.0 + 0.25 * radius ^ 2.0) - mi * (length ^ 2.0 / 12.0 + 0.25 * innerRadius ^ 2.0) \"Inertia with respect to axis through center of mass, perpendicular to cylinder axis\";
//   final parameter Real m(quantity = \"Mass\", unit = \"kg\", min = 0.0) = mo - mi \"Mass of cylinder\";
//   final parameter Real I[1,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[1][1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[1,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[1][2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[1,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[1][3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[2,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[2][1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[2,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[2][2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[2,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[2][3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[3,1](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[3][1] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[3,2](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[3][2] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
//   final parameter Real I[3,3](quantity = \"MomentOfInertia\", unit = \"kg.m2\") = Modelica.Mechanics.MultiBody.Frames.resolveDyade1(R,{{(mo * radius ^ 2.0) / 2.0 + ((-mi) * innerRadius ^ 2.0) / 2.0,0.0,0.0},{0.0,I22,0.0},{0.0,0.0,I22}})[3][3] \"Inertia tensor of cylinder with respect to center of mass, resolved in frame parallel to frame_a\";
// equation
//   body.world.x_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(body.world.x_arrowLine.shapeType);
//   body.world.x_arrowLine.rxvisobj[1] = body.world.x_arrowLine.R.T[1,1] * body.world.x_arrowLine.e_x[1] + body.world.x_arrowLine.R.T[2,1] * body.world.x_arrowLine.e_x[2] + body.world.x_arrowLine.R.T[3,1] * body.world.x_arrowLine.e_x[3];
//   body.world.x_arrowLine.rxvisobj[2] = body.world.x_arrowLine.R.T[1,2] * body.world.x_arrowLine.e_x[1] + body.world.x_arrowLine.R.T[2,2] * body.world.x_arrowLine.e_x[2] + body.world.x_arrowLine.R.T[3,2] * body.world.x_arrowLine.e_x[3];
//   body.world.x_arrowLine.rxvisobj[3] = body.world.x_arrowLine.R.T[1,3] * body.world.x_arrowLine.e_x[1] + body.world.x_arrowLine.R.T[2,3] * body.world.x_arrowLine.e_x[2] + body.world.x_arrowLine.R.T[3,3] * body.world.x_arrowLine.e_x[3];
//   body.world.x_arrowLine.ryvisobj[1] = body.world.x_arrowLine.R.T[1,1] * body.world.x_arrowLine.e_y[1] + body.world.x_arrowLine.R.T[2,1] * body.world.x_arrowLine.e_y[2] + body.world.x_arrowLine.R.T[3,1] * body.world.x_arrowLine.e_y[3];
//   body.world.x_arrowLine.ryvisobj[2] = body.world.x_arrowLine.R.T[1,2] * body.world.x_arrowLine.e_y[1] + body.world.x_arrowLine.R.T[2,2] * body.world.x_arrowLine.e_y[2] + body.world.x_arrowLine.R.T[3,2] * body.world.x_arrowLine.e_y[3];
//   body.world.x_arrowLine.ryvisobj[3] = body.world.x_arrowLine.R.T[1,3] * body.world.x_arrowLine.e_y[1] + body.world.x_arrowLine.R.T[2,3] * body.world.x_arrowLine.e_y[2] + body.world.x_arrowLine.R.T[3,3] * body.world.x_arrowLine.e_y[3];
//   body.world.x_arrowLine.rvisobj = body.world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_arrowLine.R.T[1,1],body.world.x_arrowLine.R.T[1,2],body.world.x_arrowLine.R.T[1,3]},{body.world.x_arrowLine.R.T[2,1],body.world.x_arrowLine.R.T[2,2],body.world.x_arrowLine.R.T[2,3]},{body.world.x_arrowLine.R.T[3,1],body.world.x_arrowLine.R.T[3,2],body.world.x_arrowLine.R.T[3,3]}},{body.world.x_arrowLine.r_shape[1],body.world.x_arrowLine.r_shape[2],body.world.x_arrowLine.r_shape[3]});
//   body.world.x_arrowLine.size[1] = body.world.x_arrowLine.length;
//   body.world.x_arrowLine.size[2] = body.world.x_arrowLine.width;
//   body.world.x_arrowLine.size[3] = body.world.x_arrowLine.height;
//   body.world.x_arrowLine.Material = PackMaterial(body.world.x_arrowLine.color[1] / 255.0,body.world.x_arrowLine.color[2] / 255.0,body.world.x_arrowLine.color[3] / 255.0,body.world.x_arrowLine.specularCoefficient);
//   body.world.x_arrowLine.Extra = body.world.x_arrowLine.extra;
//   body.world.x_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(body.world.x_arrowHead.shapeType);
//   body.world.x_arrowHead.rxvisobj[1] = body.world.x_arrowHead.R.T[1,1] * body.world.x_arrowHead.e_x[1] + body.world.x_arrowHead.R.T[2,1] * body.world.x_arrowHead.e_x[2] + body.world.x_arrowHead.R.T[3,1] * body.world.x_arrowHead.e_x[3];
//   body.world.x_arrowHead.rxvisobj[2] = body.world.x_arrowHead.R.T[1,2] * body.world.x_arrowHead.e_x[1] + body.world.x_arrowHead.R.T[2,2] * body.world.x_arrowHead.e_x[2] + body.world.x_arrowHead.R.T[3,2] * body.world.x_arrowHead.e_x[3];
//   body.world.x_arrowHead.rxvisobj[3] = body.world.x_arrowHead.R.T[1,3] * body.world.x_arrowHead.e_x[1] + body.world.x_arrowHead.R.T[2,3] * body.world.x_arrowHead.e_x[2] + body.world.x_arrowHead.R.T[3,3] * body.world.x_arrowHead.e_x[3];
//   body.world.x_arrowHead.ryvisobj[1] = body.world.x_arrowHead.R.T[1,1] * body.world.x_arrowHead.e_y[1] + body.world.x_arrowHead.R.T[2,1] * body.world.x_arrowHead.e_y[2] + body.world.x_arrowHead.R.T[3,1] * body.world.x_arrowHead.e_y[3];
//   body.world.x_arrowHead.ryvisobj[2] = body.world.x_arrowHead.R.T[1,2] * body.world.x_arrowHead.e_y[1] + body.world.x_arrowHead.R.T[2,2] * body.world.x_arrowHead.e_y[2] + body.world.x_arrowHead.R.T[3,2] * body.world.x_arrowHead.e_y[3];
//   body.world.x_arrowHead.ryvisobj[3] = body.world.x_arrowHead.R.T[1,3] * body.world.x_arrowHead.e_y[1] + body.world.x_arrowHead.R.T[2,3] * body.world.x_arrowHead.e_y[2] + body.world.x_arrowHead.R.T[3,3] * body.world.x_arrowHead.e_y[3];
//   body.world.x_arrowHead.rvisobj = body.world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_arrowHead.R.T[1,1],body.world.x_arrowHead.R.T[1,2],body.world.x_arrowHead.R.T[1,3]},{body.world.x_arrowHead.R.T[2,1],body.world.x_arrowHead.R.T[2,2],body.world.x_arrowHead.R.T[2,3]},{body.world.x_arrowHead.R.T[3,1],body.world.x_arrowHead.R.T[3,2],body.world.x_arrowHead.R.T[3,3]}},{body.world.x_arrowHead.r_shape[1],body.world.x_arrowHead.r_shape[2],body.world.x_arrowHead.r_shape[3]});
//   body.world.x_arrowHead.size[1] = body.world.x_arrowHead.length;
//   body.world.x_arrowHead.size[2] = body.world.x_arrowHead.width;
//   body.world.x_arrowHead.size[3] = body.world.x_arrowHead.height;
//   body.world.x_arrowHead.Material = PackMaterial(body.world.x_arrowHead.color[1] / 255.0,body.world.x_arrowHead.color[2] / 255.0,body.world.x_arrowHead.color[3] / 255.0,body.world.x_arrowHead.specularCoefficient);
//   body.world.x_arrowHead.Extra = body.world.x_arrowHead.extra;
//   body.world.y_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(body.world.y_arrowLine.shapeType);
//   body.world.y_arrowLine.rxvisobj[1] = body.world.y_arrowLine.R.T[1,1] * body.world.y_arrowLine.e_x[1] + body.world.y_arrowLine.R.T[2,1] * body.world.y_arrowLine.e_x[2] + body.world.y_arrowLine.R.T[3,1] * body.world.y_arrowLine.e_x[3];
//   body.world.y_arrowLine.rxvisobj[2] = body.world.y_arrowLine.R.T[1,2] * body.world.y_arrowLine.e_x[1] + body.world.y_arrowLine.R.T[2,2] * body.world.y_arrowLine.e_x[2] + body.world.y_arrowLine.R.T[3,2] * body.world.y_arrowLine.e_x[3];
//   body.world.y_arrowLine.rxvisobj[3] = body.world.y_arrowLine.R.T[1,3] * body.world.y_arrowLine.e_x[1] + body.world.y_arrowLine.R.T[2,3] * body.world.y_arrowLine.e_x[2] + body.world.y_arrowLine.R.T[3,3] * body.world.y_arrowLine.e_x[3];
//   body.world.y_arrowLine.ryvisobj[1] = body.world.y_arrowLine.R.T[1,1] * body.world.y_arrowLine.e_y[1] + body.world.y_arrowLine.R.T[2,1] * body.world.y_arrowLine.e_y[2] + body.world.y_arrowLine.R.T[3,1] * body.world.y_arrowLine.e_y[3];
//   body.world.y_arrowLine.ryvisobj[2] = body.world.y_arrowLine.R.T[1,2] * body.world.y_arrowLine.e_y[1] + body.world.y_arrowLine.R.T[2,2] * body.world.y_arrowLine.e_y[2] + body.world.y_arrowLine.R.T[3,2] * body.world.y_arrowLine.e_y[3];
//   body.world.y_arrowLine.ryvisobj[3] = body.world.y_arrowLine.R.T[1,3] * body.world.y_arrowLine.e_y[1] + body.world.y_arrowLine.R.T[2,3] * body.world.y_arrowLine.e_y[2] + body.world.y_arrowLine.R.T[3,3] * body.world.y_arrowLine.e_y[3];
//   body.world.y_arrowLine.rvisobj = body.world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_arrowLine.R.T[1,1],body.world.y_arrowLine.R.T[1,2],body.world.y_arrowLine.R.T[1,3]},{body.world.y_arrowLine.R.T[2,1],body.world.y_arrowLine.R.T[2,2],body.world.y_arrowLine.R.T[2,3]},{body.world.y_arrowLine.R.T[3,1],body.world.y_arrowLine.R.T[3,2],body.world.y_arrowLine.R.T[3,3]}},{body.world.y_arrowLine.r_shape[1],body.world.y_arrowLine.r_shape[2],body.world.y_arrowLine.r_shape[3]});
//   body.world.y_arrowLine.size[1] = body.world.y_arrowLine.length;
//   body.world.y_arrowLine.size[2] = body.world.y_arrowLine.width;
//   body.world.y_arrowLine.size[3] = body.world.y_arrowLine.height;
//   body.world.y_arrowLine.Material = PackMaterial(body.world.y_arrowLine.color[1] / 255.0,body.world.y_arrowLine.color[2] / 255.0,body.world.y_arrowLine.color[3] / 255.0,body.world.y_arrowLine.specularCoefficient);
//   body.world.y_arrowLine.Extra = body.world.y_arrowLine.extra;
//   body.world.y_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(body.world.y_arrowHead.shapeType);
//   body.world.y_arrowHead.rxvisobj[1] = body.world.y_arrowHead.R.T[1,1] * body.world.y_arrowHead.e_x[1] + body.world.y_arrowHead.R.T[2,1] * body.world.y_arrowHead.e_x[2] + body.world.y_arrowHead.R.T[3,1] * body.world.y_arrowHead.e_x[3];
//   body.world.y_arrowHead.rxvisobj[2] = body.world.y_arrowHead.R.T[1,2] * body.world.y_arrowHead.e_x[1] + body.world.y_arrowHead.R.T[2,2] * body.world.y_arrowHead.e_x[2] + body.world.y_arrowHead.R.T[3,2] * body.world.y_arrowHead.e_x[3];
//   body.world.y_arrowHead.rxvisobj[3] = body.world.y_arrowHead.R.T[1,3] * body.world.y_arrowHead.e_x[1] + body.world.y_arrowHead.R.T[2,3] * body.world.y_arrowHead.e_x[2] + body.world.y_arrowHead.R.T[3,3] * body.world.y_arrowHead.e_x[3];
//   body.world.y_arrowHead.ryvisobj[1] = body.world.y_arrowHead.R.T[1,1] * body.world.y_arrowHead.e_y[1] + body.world.y_arrowHead.R.T[2,1] * body.world.y_arrowHead.e_y[2] + body.world.y_arrowHead.R.T[3,1] * body.world.y_arrowHead.e_y[3];
//   body.world.y_arrowHead.ryvisobj[2] = body.world.y_arrowHead.R.T[1,2] * body.world.y_arrowHead.e_y[1] + body.world.y_arrowHead.R.T[2,2] * body.world.y_arrowHead.e_y[2] + body.world.y_arrowHead.R.T[3,2] * body.world.y_arrowHead.e_y[3];
//   body.world.y_arrowHead.ryvisobj[3] = body.world.y_arrowHead.R.T[1,3] * body.world.y_arrowHead.e_y[1] + body.world.y_arrowHead.R.T[2,3] * body.world.y_arrowHead.e_y[2] + body.world.y_arrowHead.R.T[3,3] * body.world.y_arrowHead.e_y[3];
//   body.world.y_arrowHead.rvisobj = body.world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_arrowHead.R.T[1,1],body.world.y_arrowHead.R.T[1,2],body.world.y_arrowHead.R.T[1,3]},{body.world.y_arrowHead.R.T[2,1],body.world.y_arrowHead.R.T[2,2],body.world.y_arrowHead.R.T[2,3]},{body.world.y_arrowHead.R.T[3,1],body.world.y_arrowHead.R.T[3,2],body.world.y_arrowHead.R.T[3,3]}},{body.world.y_arrowHead.r_shape[1],body.world.y_arrowHead.r_shape[2],body.world.y_arrowHead.r_shape[3]});
//   body.world.y_arrowHead.size[1] = body.world.y_arrowHead.length;
//   body.world.y_arrowHead.size[2] = body.world.y_arrowHead.width;
//   body.world.y_arrowHead.size[3] = body.world.y_arrowHead.height;
//   body.world.y_arrowHead.Material = PackMaterial(body.world.y_arrowHead.color[1] / 255.0,body.world.y_arrowHead.color[2] / 255.0,body.world.y_arrowHead.color[3] / 255.0,body.world.y_arrowHead.specularCoefficient);
//   body.world.y_arrowHead.Extra = body.world.y_arrowHead.extra;
//   body.world.z_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(body.world.z_arrowLine.shapeType);
//   body.world.z_arrowLine.rxvisobj[1] = body.world.z_arrowLine.R.T[1,1] * body.world.z_arrowLine.e_x[1] + body.world.z_arrowLine.R.T[2,1] * body.world.z_arrowLine.e_x[2] + body.world.z_arrowLine.R.T[3,1] * body.world.z_arrowLine.e_x[3];
//   body.world.z_arrowLine.rxvisobj[2] = body.world.z_arrowLine.R.T[1,2] * body.world.z_arrowLine.e_x[1] + body.world.z_arrowLine.R.T[2,2] * body.world.z_arrowLine.e_x[2] + body.world.z_arrowLine.R.T[3,2] * body.world.z_arrowLine.e_x[3];
//   body.world.z_arrowLine.rxvisobj[3] = body.world.z_arrowLine.R.T[1,3] * body.world.z_arrowLine.e_x[1] + body.world.z_arrowLine.R.T[2,3] * body.world.z_arrowLine.e_x[2] + body.world.z_arrowLine.R.T[3,3] * body.world.z_arrowLine.e_x[3];
//   body.world.z_arrowLine.ryvisobj[1] = body.world.z_arrowLine.R.T[1,1] * body.world.z_arrowLine.e_y[1] + body.world.z_arrowLine.R.T[2,1] * body.world.z_arrowLine.e_y[2] + body.world.z_arrowLine.R.T[3,1] * body.world.z_arrowLine.e_y[3];
//   body.world.z_arrowLine.ryvisobj[2] = body.world.z_arrowLine.R.T[1,2] * body.world.z_arrowLine.e_y[1] + body.world.z_arrowLine.R.T[2,2] * body.world.z_arrowLine.e_y[2] + body.world.z_arrowLine.R.T[3,2] * body.world.z_arrowLine.e_y[3];
//   body.world.z_arrowLine.ryvisobj[3] = body.world.z_arrowLine.R.T[1,3] * body.world.z_arrowLine.e_y[1] + body.world.z_arrowLine.R.T[2,3] * body.world.z_arrowLine.e_y[2] + body.world.z_arrowLine.R.T[3,3] * body.world.z_arrowLine.e_y[3];
//   body.world.z_arrowLine.rvisobj = body.world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_arrowLine.R.T[1,1],body.world.z_arrowLine.R.T[1,2],body.world.z_arrowLine.R.T[1,3]},{body.world.z_arrowLine.R.T[2,1],body.world.z_arrowLine.R.T[2,2],body.world.z_arrowLine.R.T[2,3]},{body.world.z_arrowLine.R.T[3,1],body.world.z_arrowLine.R.T[3,2],body.world.z_arrowLine.R.T[3,3]}},{body.world.z_arrowLine.r_shape[1],body.world.z_arrowLine.r_shape[2],body.world.z_arrowLine.r_shape[3]});
//   body.world.z_arrowLine.size[1] = body.world.z_arrowLine.length;
//   body.world.z_arrowLine.size[2] = body.world.z_arrowLine.width;
//   body.world.z_arrowLine.size[3] = body.world.z_arrowLine.height;
//   body.world.z_arrowLine.Material = PackMaterial(body.world.z_arrowLine.color[1] / 255.0,body.world.z_arrowLine.color[2] / 255.0,body.world.z_arrowLine.color[3] / 255.0,body.world.z_arrowLine.specularCoefficient);
//   body.world.z_arrowLine.Extra = body.world.z_arrowLine.extra;
//   body.world.z_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(body.world.z_arrowHead.shapeType);
//   body.world.z_arrowHead.rxvisobj[1] = body.world.z_arrowHead.R.T[1,1] * body.world.z_arrowHead.e_x[1] + body.world.z_arrowHead.R.T[2,1] * body.world.z_arrowHead.e_x[2] + body.world.z_arrowHead.R.T[3,1] * body.world.z_arrowHead.e_x[3];
//   body.world.z_arrowHead.rxvisobj[2] = body.world.z_arrowHead.R.T[1,2] * body.world.z_arrowHead.e_x[1] + body.world.z_arrowHead.R.T[2,2] * body.world.z_arrowHead.e_x[2] + body.world.z_arrowHead.R.T[3,2] * body.world.z_arrowHead.e_x[3];
//   body.world.z_arrowHead.rxvisobj[3] = body.world.z_arrowHead.R.T[1,3] * body.world.z_arrowHead.e_x[1] + body.world.z_arrowHead.R.T[2,3] * body.world.z_arrowHead.e_x[2] + body.world.z_arrowHead.R.T[3,3] * body.world.z_arrowHead.e_x[3];
//   body.world.z_arrowHead.ryvisobj[1] = body.world.z_arrowHead.R.T[1,1] * body.world.z_arrowHead.e_y[1] + body.world.z_arrowHead.R.T[2,1] * body.world.z_arrowHead.e_y[2] + body.world.z_arrowHead.R.T[3,1] * body.world.z_arrowHead.e_y[3];
//   body.world.z_arrowHead.ryvisobj[2] = body.world.z_arrowHead.R.T[1,2] * body.world.z_arrowHead.e_y[1] + body.world.z_arrowHead.R.T[2,2] * body.world.z_arrowHead.e_y[2] + body.world.z_arrowHead.R.T[3,2] * body.world.z_arrowHead.e_y[3];
//   body.world.z_arrowHead.ryvisobj[3] = body.world.z_arrowHead.R.T[1,3] * body.world.z_arrowHead.e_y[1] + body.world.z_arrowHead.R.T[2,3] * body.world.z_arrowHead.e_y[2] + body.world.z_arrowHead.R.T[3,3] * body.world.z_arrowHead.e_y[3];
//   body.world.z_arrowHead.rvisobj = body.world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_arrowHead.R.T[1,1],body.world.z_arrowHead.R.T[1,2],body.world.z_arrowHead.R.T[1,3]},{body.world.z_arrowHead.R.T[2,1],body.world.z_arrowHead.R.T[2,2],body.world.z_arrowHead.R.T[2,3]},{body.world.z_arrowHead.R.T[3,1],body.world.z_arrowHead.R.T[3,2],body.world.z_arrowHead.R.T[3,3]}},{body.world.z_arrowHead.r_shape[1],body.world.z_arrowHead.r_shape[2],body.world.z_arrowHead.r_shape[3]});
//   body.world.z_arrowHead.size[1] = body.world.z_arrowHead.length;
//   body.world.z_arrowHead.size[2] = body.world.z_arrowHead.width;
//   body.world.z_arrowHead.size[3] = body.world.z_arrowHead.height;
//   body.world.z_arrowHead.Material = PackMaterial(body.world.z_arrowHead.color[1] / 255.0,body.world.z_arrowHead.color[2] / 255.0,body.world.z_arrowHead.color[3] / 255.0,body.world.z_arrowHead.specularCoefficient);
//   body.world.z_arrowHead.Extra = body.world.z_arrowHead.extra;
//   body.world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * PackShape(body.world.gravityArrowLine.shapeType);
//   body.world.gravityArrowLine.rxvisobj[1] = body.world.gravityArrowLine.R.T[1,1] * body.world.gravityArrowLine.e_x[1] + body.world.gravityArrowLine.R.T[2,1] * body.world.gravityArrowLine.e_x[2] + body.world.gravityArrowLine.R.T[3,1] * body.world.gravityArrowLine.e_x[3];
//   body.world.gravityArrowLine.rxvisobj[2] = body.world.gravityArrowLine.R.T[1,2] * body.world.gravityArrowLine.e_x[1] + body.world.gravityArrowLine.R.T[2,2] * body.world.gravityArrowLine.e_x[2] + body.world.gravityArrowLine.R.T[3,2] * body.world.gravityArrowLine.e_x[3];
//   body.world.gravityArrowLine.rxvisobj[3] = body.world.gravityArrowLine.R.T[1,3] * body.world.gravityArrowLine.e_x[1] + body.world.gravityArrowLine.R.T[2,3] * body.world.gravityArrowLine.e_x[2] + body.world.gravityArrowLine.R.T[3,3] * body.world.gravityArrowLine.e_x[3];
//   body.world.gravityArrowLine.ryvisobj[1] = body.world.gravityArrowLine.R.T[1,1] * body.world.gravityArrowLine.e_y[1] + body.world.gravityArrowLine.R.T[2,1] * body.world.gravityArrowLine.e_y[2] + body.world.gravityArrowLine.R.T[3,1] * body.world.gravityArrowLine.e_y[3];
//   body.world.gravityArrowLine.ryvisobj[2] = body.world.gravityArrowLine.R.T[1,2] * body.world.gravityArrowLine.e_y[1] + body.world.gravityArrowLine.R.T[2,2] * body.world.gravityArrowLine.e_y[2] + body.world.gravityArrowLine.R.T[3,2] * body.world.gravityArrowLine.e_y[3];
//   body.world.gravityArrowLine.ryvisobj[3] = body.world.gravityArrowLine.R.T[1,3] * body.world.gravityArrowLine.e_y[1] + body.world.gravityArrowLine.R.T[2,3] * body.world.gravityArrowLine.e_y[2] + body.world.gravityArrowLine.R.T[3,3] * body.world.gravityArrowLine.e_y[3];
//   body.world.gravityArrowLine.rvisobj = body.world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.gravityArrowLine.R.T[1,1],body.world.gravityArrowLine.R.T[1,2],body.world.gravityArrowLine.R.T[1,3]},{body.world.gravityArrowLine.R.T[2,1],body.world.gravityArrowLine.R.T[2,2],body.world.gravityArrowLine.R.T[2,3]},{body.world.gravityArrowLine.R.T[3,1],body.world.gravityArrowLine.R.T[3,2],body.world.gravityArrowLine.R.T[3,3]}},{body.world.gravityArrowLine.r_shape[1],body.world.gravityArrowLine.r_shape[2],body.world.gravityArrowLine.r_shape[3]});
//   body.world.gravityArrowLine.size[1] = body.world.gravityArrowLine.length;
//   body.world.gravityArrowLine.size[2] = body.world.gravityArrowLine.width;
//   body.world.gravityArrowLine.size[3] = body.world.gravityArrowLine.height;
//   body.world.gravityArrowLine.Material = PackMaterial(body.world.gravityArrowLine.color[1] / 255.0,body.world.gravityArrowLine.color[2] / 255.0,body.world.gravityArrowLine.color[3] / 255.0,body.world.gravityArrowLine.specularCoefficient);
//   body.world.gravityArrowLine.Extra = body.world.gravityArrowLine.extra;
//   body.world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * PackShape(body.world.gravityArrowHead.shapeType);
//   body.world.gravityArrowHead.rxvisobj[1] = body.world.gravityArrowHead.R.T[1,1] * body.world.gravityArrowHead.e_x[1] + body.world.gravityArrowHead.R.T[2,1] * body.world.gravityArrowHead.e_x[2] + body.world.gravityArrowHead.R.T[3,1] * body.world.gravityArrowHead.e_x[3];
//   body.world.gravityArrowHead.rxvisobj[2] = body.world.gravityArrowHead.R.T[1,2] * body.world.gravityArrowHead.e_x[1] + body.world.gravityArrowHead.R.T[2,2] * body.world.gravityArrowHead.e_x[2] + body.world.gravityArrowHead.R.T[3,2] * body.world.gravityArrowHead.e_x[3];
//   body.world.gravityArrowHead.rxvisobj[3] = body.world.gravityArrowHead.R.T[1,3] * body.world.gravityArrowHead.e_x[1] + body.world.gravityArrowHead.R.T[2,3] * body.world.gravityArrowHead.e_x[2] + body.world.gravityArrowHead.R.T[3,3] * body.world.gravityArrowHead.e_x[3];
//   body.world.gravityArrowHead.ryvisobj[1] = body.world.gravityArrowHead.R.T[1,1] * body.world.gravityArrowHead.e_y[1] + body.world.gravityArrowHead.R.T[2,1] * body.world.gravityArrowHead.e_y[2] + body.world.gravityArrowHead.R.T[3,1] * body.world.gravityArrowHead.e_y[3];
//   body.world.gravityArrowHead.ryvisobj[2] = body.world.gravityArrowHead.R.T[1,2] * body.world.gravityArrowHead.e_y[1] + body.world.gravityArrowHead.R.T[2,2] * body.world.gravityArrowHead.e_y[2] + body.world.gravityArrowHead.R.T[3,2] * body.world.gravityArrowHead.e_y[3];
//   body.world.gravityArrowHead.ryvisobj[3] = body.world.gravityArrowHead.R.T[1,3] * body.world.gravityArrowHead.e_y[1] + body.world.gravityArrowHead.R.T[2,3] * body.world.gravityArrowHead.e_y[2] + body.world.gravityArrowHead.R.T[3,3] * body.world.gravityArrowHead.e_y[3];
//   body.world.gravityArrowHead.rvisobj = body.world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.gravityArrowHead.R.T[1,1],body.world.gravityArrowHead.R.T[1,2],body.world.gravityArrowHead.R.T[1,3]},{body.world.gravityArrowHead.R.T[2,1],body.world.gravityArrowHead.R.T[2,2],body.world.gravityArrowHead.R.T[2,3]},{body.world.gravityArrowHead.R.T[3,1],body.world.gravityArrowHead.R.T[3,2],body.world.gravityArrowHead.R.T[3,3]}},{body.world.gravityArrowHead.r_shape[1],body.world.gravityArrowHead.r_shape[2],body.world.gravityArrowHead.r_shape[3]});
//   body.world.gravityArrowHead.size[1] = body.world.gravityArrowHead.length;
//   body.world.gravityArrowHead.size[2] = body.world.gravityArrowHead.width;
//   body.world.gravityArrowHead.size[3] = body.world.gravityArrowHead.height;
//   body.world.gravityArrowHead.Material = PackMaterial(body.world.gravityArrowHead.color[1] / 255.0,body.world.gravityArrowHead.color[2] / 255.0,body.world.gravityArrowHead.color[3] / 255.0,body.world.gravityArrowHead.specularCoefficient);
//   body.world.gravityArrowHead.Extra = body.world.gravityArrowHead.extra;
//   body.world.x_label.cylinders[1].R.T[1,1] = body.world.x_label.R.T[1,1];
//   body.world.x_label.cylinders[1].R.T[1,2] = body.world.x_label.R.T[1,2];
//   body.world.x_label.cylinders[1].R.T[1,3] = body.world.x_label.R.T[1,3];
//   body.world.x_label.cylinders[1].R.T[2,1] = body.world.x_label.R.T[2,1];
//   body.world.x_label.cylinders[1].R.T[2,2] = body.world.x_label.R.T[2,2];
//   body.world.x_label.cylinders[1].R.T[2,3] = body.world.x_label.R.T[2,3];
//   body.world.x_label.cylinders[1].R.T[3,1] = body.world.x_label.R.T[3,1];
//   body.world.x_label.cylinders[1].R.T[3,2] = body.world.x_label.R.T[3,2];
//   body.world.x_label.cylinders[1].R.T[3,3] = body.world.x_label.R.T[3,3];
//   body.world.x_label.cylinders[1].R.w[1] = body.world.x_label.R.w[1];
//   body.world.x_label.cylinders[1].R.w[2] = body.world.x_label.R.w[2];
//   body.world.x_label.cylinders[1].R.w[3] = body.world.x_label.R.w[3];
//   body.world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(body.world.x_label.cylinders[1].shapeType);
//   body.world.x_label.cylinders[1].rxvisobj[1] = body.world.x_label.cylinders[1].R.T[1,1] * body.world.x_label.cylinders[1].e_x[1] + body.world.x_label.cylinders[1].R.T[2,1] * body.world.x_label.cylinders[1].e_x[2] + body.world.x_label.cylinders[1].R.T[3,1] * body.world.x_label.cylinders[1].e_x[3];
//   body.world.x_label.cylinders[1].rxvisobj[2] = body.world.x_label.cylinders[1].R.T[1,2] * body.world.x_label.cylinders[1].e_x[1] + body.world.x_label.cylinders[1].R.T[2,2] * body.world.x_label.cylinders[1].e_x[2] + body.world.x_label.cylinders[1].R.T[3,2] * body.world.x_label.cylinders[1].e_x[3];
//   body.world.x_label.cylinders[1].rxvisobj[3] = body.world.x_label.cylinders[1].R.T[1,3] * body.world.x_label.cylinders[1].e_x[1] + body.world.x_label.cylinders[1].R.T[2,3] * body.world.x_label.cylinders[1].e_x[2] + body.world.x_label.cylinders[1].R.T[3,3] * body.world.x_label.cylinders[1].e_x[3];
//   body.world.x_label.cylinders[1].ryvisobj[1] = body.world.x_label.cylinders[1].R.T[1,1] * body.world.x_label.cylinders[1].e_y[1] + body.world.x_label.cylinders[1].R.T[2,1] * body.world.x_label.cylinders[1].e_y[2] + body.world.x_label.cylinders[1].R.T[3,1] * body.world.x_label.cylinders[1].e_y[3];
//   body.world.x_label.cylinders[1].ryvisobj[2] = body.world.x_label.cylinders[1].R.T[1,2] * body.world.x_label.cylinders[1].e_y[1] + body.world.x_label.cylinders[1].R.T[2,2] * body.world.x_label.cylinders[1].e_y[2] + body.world.x_label.cylinders[1].R.T[3,2] * body.world.x_label.cylinders[1].e_y[3];
//   body.world.x_label.cylinders[1].ryvisobj[3] = body.world.x_label.cylinders[1].R.T[1,3] * body.world.x_label.cylinders[1].e_y[1] + body.world.x_label.cylinders[1].R.T[2,3] * body.world.x_label.cylinders[1].e_y[2] + body.world.x_label.cylinders[1].R.T[3,3] * body.world.x_label.cylinders[1].e_y[3];
//   body.world.x_label.cylinders[1].rvisobj = body.world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.cylinders[1].R.T[1,1],body.world.x_label.cylinders[1].R.T[1,2],body.world.x_label.cylinders[1].R.T[1,3]},{body.world.x_label.cylinders[1].R.T[2,1],body.world.x_label.cylinders[1].R.T[2,2],body.world.x_label.cylinders[1].R.T[2,3]},{body.world.x_label.cylinders[1].R.T[3,1],body.world.x_label.cylinders[1].R.T[3,2],body.world.x_label.cylinders[1].R.T[3,3]}},{body.world.x_label.cylinders[1].r_shape[1],body.world.x_label.cylinders[1].r_shape[2],body.world.x_label.cylinders[1].r_shape[3]});
//   body.world.x_label.cylinders[1].size[1] = body.world.x_label.cylinders[1].length;
//   body.world.x_label.cylinders[1].size[2] = body.world.x_label.cylinders[1].width;
//   body.world.x_label.cylinders[1].size[3] = body.world.x_label.cylinders[1].height;
//   body.world.x_label.cylinders[1].Material = PackMaterial(body.world.x_label.cylinders[1].color[1] / 255.0,body.world.x_label.cylinders[1].color[2] / 255.0,body.world.x_label.cylinders[1].color[3] / 255.0,body.world.x_label.cylinders[1].specularCoefficient);
//   body.world.x_label.cylinders[1].Extra = body.world.x_label.cylinders[1].extra;
//   body.world.x_label.cylinders[2].R.T[1,1] = body.world.x_label.R.T[1,1];
//   body.world.x_label.cylinders[2].R.T[1,2] = body.world.x_label.R.T[1,2];
//   body.world.x_label.cylinders[2].R.T[1,3] = body.world.x_label.R.T[1,3];
//   body.world.x_label.cylinders[2].R.T[2,1] = body.world.x_label.R.T[2,1];
//   body.world.x_label.cylinders[2].R.T[2,2] = body.world.x_label.R.T[2,2];
//   body.world.x_label.cylinders[2].R.T[2,3] = body.world.x_label.R.T[2,3];
//   body.world.x_label.cylinders[2].R.T[3,1] = body.world.x_label.R.T[3,1];
//   body.world.x_label.cylinders[2].R.T[3,2] = body.world.x_label.R.T[3,2];
//   body.world.x_label.cylinders[2].R.T[3,3] = body.world.x_label.R.T[3,3];
//   body.world.x_label.cylinders[2].R.w[1] = body.world.x_label.R.w[1];
//   body.world.x_label.cylinders[2].R.w[2] = body.world.x_label.R.w[2];
//   body.world.x_label.cylinders[2].R.w[3] = body.world.x_label.R.w[3];
//   body.world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(body.world.x_label.cylinders[2].shapeType);
//   body.world.x_label.cylinders[2].rxvisobj[1] = body.world.x_label.cylinders[2].R.T[1,1] * body.world.x_label.cylinders[2].e_x[1] + body.world.x_label.cylinders[2].R.T[2,1] * body.world.x_label.cylinders[2].e_x[2] + body.world.x_label.cylinders[2].R.T[3,1] * body.world.x_label.cylinders[2].e_x[3];
//   body.world.x_label.cylinders[2].rxvisobj[2] = body.world.x_label.cylinders[2].R.T[1,2] * body.world.x_label.cylinders[2].e_x[1] + body.world.x_label.cylinders[2].R.T[2,2] * body.world.x_label.cylinders[2].e_x[2] + body.world.x_label.cylinders[2].R.T[3,2] * body.world.x_label.cylinders[2].e_x[3];
//   body.world.x_label.cylinders[2].rxvisobj[3] = body.world.x_label.cylinders[2].R.T[1,3] * body.world.x_label.cylinders[2].e_x[1] + body.world.x_label.cylinders[2].R.T[2,3] * body.world.x_label.cylinders[2].e_x[2] + body.world.x_label.cylinders[2].R.T[3,3] * body.world.x_label.cylinders[2].e_x[3];
//   body.world.x_label.cylinders[2].ryvisobj[1] = body.world.x_label.cylinders[2].R.T[1,1] * body.world.x_label.cylinders[2].e_y[1] + body.world.x_label.cylinders[2].R.T[2,1] * body.world.x_label.cylinders[2].e_y[2] + body.world.x_label.cylinders[2].R.T[3,1] * body.world.x_label.cylinders[2].e_y[3];
//   body.world.x_label.cylinders[2].ryvisobj[2] = body.world.x_label.cylinders[2].R.T[1,2] * body.world.x_label.cylinders[2].e_y[1] + body.world.x_label.cylinders[2].R.T[2,2] * body.world.x_label.cylinders[2].e_y[2] + body.world.x_label.cylinders[2].R.T[3,2] * body.world.x_label.cylinders[2].e_y[3];
//   body.world.x_label.cylinders[2].ryvisobj[3] = body.world.x_label.cylinders[2].R.T[1,3] * body.world.x_label.cylinders[2].e_y[1] + body.world.x_label.cylinders[2].R.T[2,3] * body.world.x_label.cylinders[2].e_y[2] + body.world.x_label.cylinders[2].R.T[3,3] * body.world.x_label.cylinders[2].e_y[3];
//   body.world.x_label.cylinders[2].rvisobj = body.world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.x_label.cylinders[2].R.T[1,1],body.world.x_label.cylinders[2].R.T[1,2],body.world.x_label.cylinders[2].R.T[1,3]},{body.world.x_label.cylinders[2].R.T[2,1],body.world.x_label.cylinders[2].R.T[2,2],body.world.x_label.cylinders[2].R.T[2,3]},{body.world.x_label.cylinders[2].R.T[3,1],body.world.x_label.cylinders[2].R.T[3,2],body.world.x_label.cylinders[2].R.T[3,3]}},{body.world.x_label.cylinders[2].r_shape[1],body.world.x_label.cylinders[2].r_shape[2],body.world.x_label.cylinders[2].r_shape[3]});
//   body.world.x_label.cylinders[2].size[1] = body.world.x_label.cylinders[2].length;
//   body.world.x_label.cylinders[2].size[2] = body.world.x_label.cylinders[2].width;
//   body.world.x_label.cylinders[2].size[3] = body.world.x_label.cylinders[2].height;
//   body.world.x_label.cylinders[2].Material = PackMaterial(body.world.x_label.cylinders[2].color[1] / 255.0,body.world.x_label.cylinders[2].color[2] / 255.0,body.world.x_label.cylinders[2].color[3] / 255.0,body.world.x_label.cylinders[2].specularCoefficient);
//   body.world.x_label.cylinders[2].Extra = body.world.x_label.cylinders[2].extra;
//   body.world.y_label.cylinders[1].R.T[1,1] = body.world.y_label.R.T[1,1];
//   body.world.y_label.cylinders[1].R.T[1,2] = body.world.y_label.R.T[1,2];
//   body.world.y_label.cylinders[1].R.T[1,3] = body.world.y_label.R.T[1,3];
//   body.world.y_label.cylinders[1].R.T[2,1] = body.world.y_label.R.T[2,1];
//   body.world.y_label.cylinders[1].R.T[2,2] = body.world.y_label.R.T[2,2];
//   body.world.y_label.cylinders[1].R.T[2,3] = body.world.y_label.R.T[2,3];
//   body.world.y_label.cylinders[1].R.T[3,1] = body.world.y_label.R.T[3,1];
//   body.world.y_label.cylinders[1].R.T[3,2] = body.world.y_label.R.T[3,2];
//   body.world.y_label.cylinders[1].R.T[3,3] = body.world.y_label.R.T[3,3];
//   body.world.y_label.cylinders[1].R.w[1] = body.world.y_label.R.w[1];
//   body.world.y_label.cylinders[1].R.w[2] = body.world.y_label.R.w[2];
//   body.world.y_label.cylinders[1].R.w[3] = body.world.y_label.R.w[3];
//   body.world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(body.world.y_label.cylinders[1].shapeType);
//   body.world.y_label.cylinders[1].rxvisobj[1] = body.world.y_label.cylinders[1].R.T[1,1] * body.world.y_label.cylinders[1].e_x[1] + body.world.y_label.cylinders[1].R.T[2,1] * body.world.y_label.cylinders[1].e_x[2] + body.world.y_label.cylinders[1].R.T[3,1] * body.world.y_label.cylinders[1].e_x[3];
//   body.world.y_label.cylinders[1].rxvisobj[2] = body.world.y_label.cylinders[1].R.T[1,2] * body.world.y_label.cylinders[1].e_x[1] + body.world.y_label.cylinders[1].R.T[2,2] * body.world.y_label.cylinders[1].e_x[2] + body.world.y_label.cylinders[1].R.T[3,2] * body.world.y_label.cylinders[1].e_x[3];
//   body.world.y_label.cylinders[1].rxvisobj[3] = body.world.y_label.cylinders[1].R.T[1,3] * body.world.y_label.cylinders[1].e_x[1] + body.world.y_label.cylinders[1].R.T[2,3] * body.world.y_label.cylinders[1].e_x[2] + body.world.y_label.cylinders[1].R.T[3,3] * body.world.y_label.cylinders[1].e_x[3];
//   body.world.y_label.cylinders[1].ryvisobj[1] = body.world.y_label.cylinders[1].R.T[1,1] * body.world.y_label.cylinders[1].e_y[1] + body.world.y_label.cylinders[1].R.T[2,1] * body.world.y_label.cylinders[1].e_y[2] + body.world.y_label.cylinders[1].R.T[3,1] * body.world.y_label.cylinders[1].e_y[3];
//   body.world.y_label.cylinders[1].ryvisobj[2] = body.world.y_label.cylinders[1].R.T[1,2] * body.world.y_label.cylinders[1].e_y[1] + body.world.y_label.cylinders[1].R.T[2,2] * body.world.y_label.cylinders[1].e_y[2] + body.world.y_label.cylinders[1].R.T[3,2] * body.world.y_label.cylinders[1].e_y[3];
//   body.world.y_label.cylinders[1].ryvisobj[3] = body.world.y_label.cylinders[1].R.T[1,3] * body.world.y_label.cylinders[1].e_y[1] + body.world.y_label.cylinders[1].R.T[2,3] * body.world.y_label.cylinders[1].e_y[2] + body.world.y_label.cylinders[1].R.T[3,3] * body.world.y_label.cylinders[1].e_y[3];
//   body.world.y_label.cylinders[1].rvisobj = body.world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.cylinders[1].R.T[1,1],body.world.y_label.cylinders[1].R.T[1,2],body.world.y_label.cylinders[1].R.T[1,3]},{body.world.y_label.cylinders[1].R.T[2,1],body.world.y_label.cylinders[1].R.T[2,2],body.world.y_label.cylinders[1].R.T[2,3]},{body.world.y_label.cylinders[1].R.T[3,1],body.world.y_label.cylinders[1].R.T[3,2],body.world.y_label.cylinders[1].R.T[3,3]}},{body.world.y_label.cylinders[1].r_shape[1],body.world.y_label.cylinders[1].r_shape[2],body.world.y_label.cylinders[1].r_shape[3]});
//   body.world.y_label.cylinders[1].size[1] = body.world.y_label.cylinders[1].length;
//   body.world.y_label.cylinders[1].size[2] = body.world.y_label.cylinders[1].width;
//   body.world.y_label.cylinders[1].size[3] = body.world.y_label.cylinders[1].height;
//   body.world.y_label.cylinders[1].Material = PackMaterial(body.world.y_label.cylinders[1].color[1] / 255.0,body.world.y_label.cylinders[1].color[2] / 255.0,body.world.y_label.cylinders[1].color[3] / 255.0,body.world.y_label.cylinders[1].specularCoefficient);
//   body.world.y_label.cylinders[1].Extra = body.world.y_label.cylinders[1].extra;
//   body.world.y_label.cylinders[2].R.T[1,1] = body.world.y_label.R.T[1,1];
//   body.world.y_label.cylinders[2].R.T[1,2] = body.world.y_label.R.T[1,2];
//   body.world.y_label.cylinders[2].R.T[1,3] = body.world.y_label.R.T[1,3];
//   body.world.y_label.cylinders[2].R.T[2,1] = body.world.y_label.R.T[2,1];
//   body.world.y_label.cylinders[2].R.T[2,2] = body.world.y_label.R.T[2,2];
//   body.world.y_label.cylinders[2].R.T[2,3] = body.world.y_label.R.T[2,3];
//   body.world.y_label.cylinders[2].R.T[3,1] = body.world.y_label.R.T[3,1];
//   body.world.y_label.cylinders[2].R.T[3,2] = body.world.y_label.R.T[3,2];
//   body.world.y_label.cylinders[2].R.T[3,3] = body.world.y_label.R.T[3,3];
//   body.world.y_label.cylinders[2].R.w[1] = body.world.y_label.R.w[1];
//   body.world.y_label.cylinders[2].R.w[2] = body.world.y_label.R.w[2];
//   body.world.y_label.cylinders[2].R.w[3] = body.world.y_label.R.w[3];
//   body.world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(body.world.y_label.cylinders[2].shapeType);
//   body.world.y_label.cylinders[2].rxvisobj[1] = body.world.y_label.cylinders[2].R.T[1,1] * body.world.y_label.cylinders[2].e_x[1] + body.world.y_label.cylinders[2].R.T[2,1] * body.world.y_label.cylinders[2].e_x[2] + body.world.y_label.cylinders[2].R.T[3,1] * body.world.y_label.cylinders[2].e_x[3];
//   body.world.y_label.cylinders[2].rxvisobj[2] = body.world.y_label.cylinders[2].R.T[1,2] * body.world.y_label.cylinders[2].e_x[1] + body.world.y_label.cylinders[2].R.T[2,2] * body.world.y_label.cylinders[2].e_x[2] + body.world.y_label.cylinders[2].R.T[3,2] * body.world.y_label.cylinders[2].e_x[3];
//   body.world.y_label.cylinders[2].rxvisobj[3] = body.world.y_label.cylinders[2].R.T[1,3] * body.world.y_label.cylinders[2].e_x[1] + body.world.y_label.cylinders[2].R.T[2,3] * body.world.y_label.cylinders[2].e_x[2] + body.world.y_label.cylinders[2].R.T[3,3] * body.world.y_label.cylinders[2].e_x[3];
//   body.world.y_label.cylinders[2].ryvisobj[1] = body.world.y_label.cylinders[2].R.T[1,1] * body.world.y_label.cylinders[2].e_y[1] + body.world.y_label.cylinders[2].R.T[2,1] * body.world.y_label.cylinders[2].e_y[2] + body.world.y_label.cylinders[2].R.T[3,1] * body.world.y_label.cylinders[2].e_y[3];
//   body.world.y_label.cylinders[2].ryvisobj[2] = body.world.y_label.cylinders[2].R.T[1,2] * body.world.y_label.cylinders[2].e_y[1] + body.world.y_label.cylinders[2].R.T[2,2] * body.world.y_label.cylinders[2].e_y[2] + body.world.y_label.cylinders[2].R.T[3,2] * body.world.y_label.cylinders[2].e_y[3];
//   body.world.y_label.cylinders[2].ryvisobj[3] = body.world.y_label.cylinders[2].R.T[1,3] * body.world.y_label.cylinders[2].e_y[1] + body.world.y_label.cylinders[2].R.T[2,3] * body.world.y_label.cylinders[2].e_y[2] + body.world.y_label.cylinders[2].R.T[3,3] * body.world.y_label.cylinders[2].e_y[3];
//   body.world.y_label.cylinders[2].rvisobj = body.world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.y_label.cylinders[2].R.T[1,1],body.world.y_label.cylinders[2].R.T[1,2],body.world.y_label.cylinders[2].R.T[1,3]},{body.world.y_label.cylinders[2].R.T[2,1],body.world.y_label.cylinders[2].R.T[2,2],body.world.y_label.cylinders[2].R.T[2,3]},{body.world.y_label.cylinders[2].R.T[3,1],body.world.y_label.cylinders[2].R.T[3,2],body.world.y_label.cylinders[2].R.T[3,3]}},{body.world.y_label.cylinders[2].r_shape[1],body.world.y_label.cylinders[2].r_shape[2],body.world.y_label.cylinders[2].r_shape[3]});
//   body.world.y_label.cylinders[2].size[1] = body.world.y_label.cylinders[2].length;
//   body.world.y_label.cylinders[2].size[2] = body.world.y_label.cylinders[2].width;
//   body.world.y_label.cylinders[2].size[3] = body.world.y_label.cylinders[2].height;
//   body.world.y_label.cylinders[2].Material = PackMaterial(body.world.y_label.cylinders[2].color[1] / 255.0,body.world.y_label.cylinders[2].color[2] / 255.0,body.world.y_label.cylinders[2].color[3] / 255.0,body.world.y_label.cylinders[2].specularCoefficient);
//   body.world.y_label.cylinders[2].Extra = body.world.y_label.cylinders[2].extra;
//   body.world.z_label.cylinders[1].R.T[1,1] = body.world.z_label.R.T[1,1];
//   body.world.z_label.cylinders[1].R.T[1,2] = body.world.z_label.R.T[1,2];
//   body.world.z_label.cylinders[1].R.T[1,3] = body.world.z_label.R.T[1,3];
//   body.world.z_label.cylinders[1].R.T[2,1] = body.world.z_label.R.T[2,1];
//   body.world.z_label.cylinders[1].R.T[2,2] = body.world.z_label.R.T[2,2];
//   body.world.z_label.cylinders[1].R.T[2,3] = body.world.z_label.R.T[2,3];
//   body.world.z_label.cylinders[1].R.T[3,1] = body.world.z_label.R.T[3,1];
//   body.world.z_label.cylinders[1].R.T[3,2] = body.world.z_label.R.T[3,2];
//   body.world.z_label.cylinders[1].R.T[3,3] = body.world.z_label.R.T[3,3];
//   body.world.z_label.cylinders[1].R.w[1] = body.world.z_label.R.w[1];
//   body.world.z_label.cylinders[1].R.w[2] = body.world.z_label.R.w[2];
//   body.world.z_label.cylinders[1].R.w[3] = body.world.z_label.R.w[3];
//   body.world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(body.world.z_label.cylinders[1].shapeType);
//   body.world.z_label.cylinders[1].rxvisobj[1] = body.world.z_label.cylinders[1].R.T[1,1] * body.world.z_label.cylinders[1].e_x[1] + body.world.z_label.cylinders[1].R.T[2,1] * body.world.z_label.cylinders[1].e_x[2] + body.world.z_label.cylinders[1].R.T[3,1] * body.world.z_label.cylinders[1].e_x[3];
//   body.world.z_label.cylinders[1].rxvisobj[2] = body.world.z_label.cylinders[1].R.T[1,2] * body.world.z_label.cylinders[1].e_x[1] + body.world.z_label.cylinders[1].R.T[2,2] * body.world.z_label.cylinders[1].e_x[2] + body.world.z_label.cylinders[1].R.T[3,2] * body.world.z_label.cylinders[1].e_x[3];
//   body.world.z_label.cylinders[1].rxvisobj[3] = body.world.z_label.cylinders[1].R.T[1,3] * body.world.z_label.cylinders[1].e_x[1] + body.world.z_label.cylinders[1].R.T[2,3] * body.world.z_label.cylinders[1].e_x[2] + body.world.z_label.cylinders[1].R.T[3,3] * body.world.z_label.cylinders[1].e_x[3];
//   body.world.z_label.cylinders[1].ryvisobj[1] = body.world.z_label.cylinders[1].R.T[1,1] * body.world.z_label.cylinders[1].e_y[1] + body.world.z_label.cylinders[1].R.T[2,1] * body.world.z_label.cylinders[1].e_y[2] + body.world.z_label.cylinders[1].R.T[3,1] * body.world.z_label.cylinders[1].e_y[3];
//   body.world.z_label.cylinders[1].ryvisobj[2] = body.world.z_label.cylinders[1].R.T[1,2] * body.world.z_label.cylinders[1].e_y[1] + body.world.z_label.cylinders[1].R.T[2,2] * body.world.z_label.cylinders[1].e_y[2] + body.world.z_label.cylinders[1].R.T[3,2] * body.world.z_label.cylinders[1].e_y[3];
//   body.world.z_label.cylinders[1].ryvisobj[3] = body.world.z_label.cylinders[1].R.T[1,3] * body.world.z_label.cylinders[1].e_y[1] + body.world.z_label.cylinders[1].R.T[2,3] * body.world.z_label.cylinders[1].e_y[2] + body.world.z_label.cylinders[1].R.T[3,3] * body.world.z_label.cylinders[1].e_y[3];
//   body.world.z_label.cylinders[1].rvisobj = body.world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.cylinders[1].R.T[1,1],body.world.z_label.cylinders[1].R.T[1,2],body.world.z_label.cylinders[1].R.T[1,3]},{body.world.z_label.cylinders[1].R.T[2,1],body.world.z_label.cylinders[1].R.T[2,2],body.world.z_label.cylinders[1].R.T[2,3]},{body.world.z_label.cylinders[1].R.T[3,1],body.world.z_label.cylinders[1].R.T[3,2],body.world.z_label.cylinders[1].R.T[3,3]}},{body.world.z_label.cylinders[1].r_shape[1],body.world.z_label.cylinders[1].r_shape[2],body.world.z_label.cylinders[1].r_shape[3]});
//   body.world.z_label.cylinders[1].size[1] = body.world.z_label.cylinders[1].length;
//   body.world.z_label.cylinders[1].size[2] = body.world.z_label.cylinders[1].width;
//   body.world.z_label.cylinders[1].size[3] = body.world.z_label.cylinders[1].height;
//   body.world.z_label.cylinders[1].Material = PackMaterial(body.world.z_label.cylinders[1].color[1] / 255.0,body.world.z_label.cylinders[1].color[2] / 255.0,body.world.z_label.cylinders[1].color[3] / 255.0,body.world.z_label.cylinders[1].specularCoefficient);
//   body.world.z_label.cylinders[1].Extra = body.world.z_label.cylinders[1].extra;
//   body.world.z_label.cylinders[2].R.T[1,1] = body.world.z_label.R.T[1,1];
//   body.world.z_label.cylinders[2].R.T[1,2] = body.world.z_label.R.T[1,2];
//   body.world.z_label.cylinders[2].R.T[1,3] = body.world.z_label.R.T[1,3];
//   body.world.z_label.cylinders[2].R.T[2,1] = body.world.z_label.R.T[2,1];
//   body.world.z_label.cylinders[2].R.T[2,2] = body.world.z_label.R.T[2,2];
//   body.world.z_label.cylinders[2].R.T[2,3] = body.world.z_label.R.T[2,3];
//   body.world.z_label.cylinders[2].R.T[3,1] = body.world.z_label.R.T[3,1];
//   body.world.z_label.cylinders[2].R.T[3,2] = body.world.z_label.R.T[3,2];
//   body.world.z_label.cylinders[2].R.T[3,3] = body.world.z_label.R.T[3,3];
//   body.world.z_label.cylinders[2].R.w[1] = body.world.z_label.R.w[1];
//   body.world.z_label.cylinders[2].R.w[2] = body.world.z_label.R.w[2];
//   body.world.z_label.cylinders[2].R.w[3] = body.world.z_label.R.w[3];
//   body.world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(body.world.z_label.cylinders[2].shapeType);
//   body.world.z_label.cylinders[2].rxvisobj[1] = body.world.z_label.cylinders[2].R.T[1,1] * body.world.z_label.cylinders[2].e_x[1] + body.world.z_label.cylinders[2].R.T[2,1] * body.world.z_label.cylinders[2].e_x[2] + body.world.z_label.cylinders[2].R.T[3,1] * body.world.z_label.cylinders[2].e_x[3];
//   body.world.z_label.cylinders[2].rxvisobj[2] = body.world.z_label.cylinders[2].R.T[1,2] * body.world.z_label.cylinders[2].e_x[1] + body.world.z_label.cylinders[2].R.T[2,2] * body.world.z_label.cylinders[2].e_x[2] + body.world.z_label.cylinders[2].R.T[3,2] * body.world.z_label.cylinders[2].e_x[3];
//   body.world.z_label.cylinders[2].rxvisobj[3] = body.world.z_label.cylinders[2].R.T[1,3] * body.world.z_label.cylinders[2].e_x[1] + body.world.z_label.cylinders[2].R.T[2,3] * body.world.z_label.cylinders[2].e_x[2] + body.world.z_label.cylinders[2].R.T[3,3] * body.world.z_label.cylinders[2].e_x[3];
//   body.world.z_label.cylinders[2].ryvisobj[1] = body.world.z_label.cylinders[2].R.T[1,1] * body.world.z_label.cylinders[2].e_y[1] + body.world.z_label.cylinders[2].R.T[2,1] * body.world.z_label.cylinders[2].e_y[2] + body.world.z_label.cylinders[2].R.T[3,1] * body.world.z_label.cylinders[2].e_y[3];
//   body.world.z_label.cylinders[2].ryvisobj[2] = body.world.z_label.cylinders[2].R.T[1,2] * body.world.z_label.cylinders[2].e_y[1] + body.world.z_label.cylinders[2].R.T[2,2] * body.world.z_label.cylinders[2].e_y[2] + body.world.z_label.cylinders[2].R.T[3,2] * body.world.z_label.cylinders[2].e_y[3];
//   body.world.z_label.cylinders[2].ryvisobj[3] = body.world.z_label.cylinders[2].R.T[1,3] * body.world.z_label.cylinders[2].e_y[1] + body.world.z_label.cylinders[2].R.T[2,3] * body.world.z_label.cylinders[2].e_y[2] + body.world.z_label.cylinders[2].R.T[3,3] * body.world.z_label.cylinders[2].e_y[3];
//   body.world.z_label.cylinders[2].rvisobj = body.world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.cylinders[2].R.T[1,1],body.world.z_label.cylinders[2].R.T[1,2],body.world.z_label.cylinders[2].R.T[1,3]},{body.world.z_label.cylinders[2].R.T[2,1],body.world.z_label.cylinders[2].R.T[2,2],body.world.z_label.cylinders[2].R.T[2,3]},{body.world.z_label.cylinders[2].R.T[3,1],body.world.z_label.cylinders[2].R.T[3,2],body.world.z_label.cylinders[2].R.T[3,3]}},{body.world.z_label.cylinders[2].r_shape[1],body.world.z_label.cylinders[2].r_shape[2],body.world.z_label.cylinders[2].r_shape[3]});
//   body.world.z_label.cylinders[2].size[1] = body.world.z_label.cylinders[2].length;
//   body.world.z_label.cylinders[2].size[2] = body.world.z_label.cylinders[2].width;
//   body.world.z_label.cylinders[2].size[3] = body.world.z_label.cylinders[2].height;
//   body.world.z_label.cylinders[2].Material = PackMaterial(body.world.z_label.cylinders[2].color[1] / 255.0,body.world.z_label.cylinders[2].color[2] / 255.0,body.world.z_label.cylinders[2].color[3] / 255.0,body.world.z_label.cylinders[2].specularCoefficient);
//   body.world.z_label.cylinders[2].Extra = body.world.z_label.cylinders[2].extra;
//   body.world.z_label.cylinders[3].R.T[1,1] = body.world.z_label.R.T[1,1];
//   body.world.z_label.cylinders[3].R.T[1,2] = body.world.z_label.R.T[1,2];
//   body.world.z_label.cylinders[3].R.T[1,3] = body.world.z_label.R.T[1,3];
//   body.world.z_label.cylinders[3].R.T[2,1] = body.world.z_label.R.T[2,1];
//   body.world.z_label.cylinders[3].R.T[2,2] = body.world.z_label.R.T[2,2];
//   body.world.z_label.cylinders[3].R.T[2,3] = body.world.z_label.R.T[2,3];
//   body.world.z_label.cylinders[3].R.T[3,1] = body.world.z_label.R.T[3,1];
//   body.world.z_label.cylinders[3].R.T[3,2] = body.world.z_label.R.T[3,2];
//   body.world.z_label.cylinders[3].R.T[3,3] = body.world.z_label.R.T[3,3];
//   body.world.z_label.cylinders[3].R.w[1] = body.world.z_label.R.w[1];
//   body.world.z_label.cylinders[3].R.w[2] = body.world.z_label.R.w[2];
//   body.world.z_label.cylinders[3].R.w[3] = body.world.z_label.R.w[3];
//   body.world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * PackShape(body.world.z_label.cylinders[3].shapeType);
//   body.world.z_label.cylinders[3].rxvisobj[1] = body.world.z_label.cylinders[3].R.T[1,1] * body.world.z_label.cylinders[3].e_x[1] + body.world.z_label.cylinders[3].R.T[2,1] * body.world.z_label.cylinders[3].e_x[2] + body.world.z_label.cylinders[3].R.T[3,1] * body.world.z_label.cylinders[3].e_x[3];
//   body.world.z_label.cylinders[3].rxvisobj[2] = body.world.z_label.cylinders[3].R.T[1,2] * body.world.z_label.cylinders[3].e_x[1] + body.world.z_label.cylinders[3].R.T[2,2] * body.world.z_label.cylinders[3].e_x[2] + body.world.z_label.cylinders[3].R.T[3,2] * body.world.z_label.cylinders[3].e_x[3];
//   body.world.z_label.cylinders[3].rxvisobj[3] = body.world.z_label.cylinders[3].R.T[1,3] * body.world.z_label.cylinders[3].e_x[1] + body.world.z_label.cylinders[3].R.T[2,3] * body.world.z_label.cylinders[3].e_x[2] + body.world.z_label.cylinders[3].R.T[3,3] * body.world.z_label.cylinders[3].e_x[3];
//   body.world.z_label.cylinders[3].ryvisobj[1] = body.world.z_label.cylinders[3].R.T[1,1] * body.world.z_label.cylinders[3].e_y[1] + body.world.z_label.cylinders[3].R.T[2,1] * body.world.z_label.cylinders[3].e_y[2] + body.world.z_label.cylinders[3].R.T[3,1] * body.world.z_label.cylinders[3].e_y[3];
//   body.world.z_label.cylinders[3].ryvisobj[2] = body.world.z_label.cylinders[3].R.T[1,2] * body.world.z_label.cylinders[3].e_y[1] + body.world.z_label.cylinders[3].R.T[2,2] * body.world.z_label.cylinders[3].e_y[2] + body.world.z_label.cylinders[3].R.T[3,2] * body.world.z_label.cylinders[3].e_y[3];
//   body.world.z_label.cylinders[3].ryvisobj[3] = body.world.z_label.cylinders[3].R.T[1,3] * body.world.z_label.cylinders[3].e_y[1] + body.world.z_label.cylinders[3].R.T[2,3] * body.world.z_label.cylinders[3].e_y[2] + body.world.z_label.cylinders[3].R.T[3,3] * body.world.z_label.cylinders[3].e_y[3];
//   body.world.z_label.cylinders[3].rvisobj = body.world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{body.world.z_label.cylinders[3].R.T[1,1],body.world.z_label.cylinders[3].R.T[1,2],body.world.z_label.cylinders[3].R.T[1,3]},{body.world.z_label.cylinders[3].R.T[2,1],body.world.z_label.cylinders[3].R.T[2,2],body.world.z_label.cylinders[3].R.T[2,3]},{body.world.z_label.cylinders[3].R.T[3,1],body.world.z_label.cylinders[3].R.T[3,2],body.world.z_label.cylinders[3].R.T[3,3]}},{body.world.z_label.cylinders[3].r_shape[1],body.world.z_label.cylinders[3].r_shape[2],body.world.z_label.cylinders[3].r_shape[3]});
//   body.world.z_label.cylinders[3].size[1] = body.world.z_label.cylinders[3].length;
//   body.world.z_label.cylinders[3].size[2] = body.world.z_label.cylinders[3].width;
//   body.world.z_label.cylinders[3].size[3] = body.world.z_label.cylinders[3].height;
//   body.world.z_label.cylinders[3].Material = PackMaterial(body.world.z_label.cylinders[3].color[1] / 255.0,body.world.z_label.cylinders[3].color[2] / 255.0,body.world.z_label.cylinders[3].color[3] / 255.0,body.world.z_label.cylinders[3].specularCoefficient);
//   body.world.z_label.cylinders[3].Extra = body.world.z_label.cylinders[3].extra;
//   assert(Modelica.Math.Vectors.length({body.world.n[1],body.world.n[2],body.world.n[3]}) > 1e-10,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   body.world.frame_b.r_0[1] = 0.0;
//   body.world.frame_b.r_0[2] = 0.0;
//   body.world.frame_b.r_0[3] = 0.0;
//   body.world.frame_b.R.w[3] = 0.0;
//   body.world.frame_b.R.w[2] = 0.0;
//   body.world.frame_b.R.w[1] = 0.0;
//   body.world.frame_b.R.T[3,3] = 1.0;
//   body.world.frame_b.R.T[3,2] = 0.0;
//   body.world.frame_b.R.T[3,1] = 0.0;
//   body.world.frame_b.R.T[2,3] = 0.0;
//   body.world.frame_b.R.T[2,2] = 1.0;
//   body.world.frame_b.R.T[2,1] = 0.0;
//   body.world.frame_b.R.T[1,3] = 0.0;
//   body.world.frame_b.R.T[1,2] = 0.0;
//   body.world.frame_b.R.T[1,1] = 1.0;
//   body.r_0[1] = body.frame_a.r_0[1];
//   body.r_0[2] = body.frame_a.r_0[2];
//   body.r_0[3] = body.frame_a.r_0[3];
//   if false then
//   body.Q[1] = 0.0;
//   body.Q[2] = 0.0;
//   body.Q[3] = 0.0;
//   body.Q[4] = 1.0;
//   body.phi[1] = 0.0;
//   body.phi[2] = 0.0;
//   body.phi[3] = 0.0;
//   body.phi_d[1] = 0.0;
//   body.phi_d[2] = 0.0;
//   body.phi_d[3] = 0.0;
//   body.phi_dd[1] = 0.0;
//   body.phi_dd[2] = 0.0;
//   body.phi_dd[3] = 0.0;
//   elseif body.useQuaternions then
//   body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.from_Q({body.Q[1],body.Q[2],body.Q[3],body.Q[4]},Modelica.Mechanics.MultiBody.Frames.Quaternions.angularVelocity2({body.Q[1],body.Q[2],body.Q[3],body.Q[4]},{der(body.Q[1]),der(body.Q[2]),der(body.Q[3]),der(body.Q[4])}));
//   {0.0} = Modelica.Mechanics.MultiBody.Frames.Quaternions.orientationConstraint({body.Q[1],body.Q[2],body.Q[3],body.Q[4]});
//   body.phi[1] = 0.0;
//   body.phi[2] = 0.0;
//   body.phi[3] = 0.0;
//   body.phi_d[1] = 0.0;
//   body.phi_d[2] = 0.0;
//   body.phi_d[3] = 0.0;
//   body.phi_dd[1] = 0.0;
//   body.phi_dd[2] = 0.0;
//   body.phi_dd[3] = 0.0;
//   else
//   body.phi_d[1] = der(body.phi[1]);
//   body.phi_d[2] = der(body.phi[2]);
//   body.phi_d[3] = der(body.phi[3]);
//   body.phi_dd[1] = der(body.phi_d[1]);
//   body.phi_dd[2] = der(body.phi_d[2]);
//   body.phi_dd[3] = der(body.phi_d[3]);
//   body.frame_a.R = Modelica.Mechanics.MultiBody.Frames.axesRotations({body.sequence_angleStates[1],body.sequence_angleStates[2],body.sequence_angleStates[3]},{body.phi[1],body.phi[2],body.phi[3]},{body.phi_d[1],body.phi_d[2],body.phi_d[3]});
//   body.Q[1] = 0.0;
//   body.Q[2] = 0.0;
//   body.Q[3] = 0.0;
//   body.Q[4] = 1.0;
//   end if;
//   body.g_0 = Modelica.Mechanics.MultiBody.Parts.Body.world__gravityAcceleration({body.frame_a.r_0[1],body.frame_a.r_0[2],body.frame_a.r_0[3]} + Modelica.Mechanics.MultiBody.Frames.resolve1(body.frame_a.R,{body.r_CM[1],body.r_CM[2],body.r_CM[3]}),body.world.gravityType,body.world.g * Modelica.Math.Vectors.normalize({body.world.n[1],body.world.n[2],body.world.n[3]},1e-13),body.world.mue);
//   body.v_0[1] = der(body.frame_a.r_0[1]);
//   body.v_0[2] = der(body.frame_a.r_0[2]);
//   body.v_0[3] = der(body.frame_a.r_0[3]);
//   body.a_0[1] = der(body.v_0[1]);
//   body.a_0[2] = der(body.v_0[2]);
//   body.a_0[3] = der(body.v_0[3]);
//   body.w_a = Modelica.Mechanics.MultiBody.Frames.angularVelocity2(body.frame_a.R);
//   body.z_a[1] = der(body.w_a[1]);
//   body.z_a[2] = der(body.w_a[2]);
//   body.z_a[3] = der(body.w_a[3]);
//   body.frame_a.f = body.m * (Modelica.Mechanics.MultiBody.Frames.resolve2(body.frame_a.R,{body.a_0[1] - body.g_0[1],body.a_0[2] - body.g_0[2],body.a_0[3] - body.g_0[3]}) + {body.z_a[2] * body.r_CM[3] - body.z_a[3] * body.r_CM[2],body.z_a[3] * body.r_CM[1] - body.z_a[1] * body.r_CM[3],body.z_a[1] * body.r_CM[2] - body.z_a[2] * body.r_CM[1]} + {body.w_a[2] * (body.w_a[1] * body.r_CM[2] - body.w_a[2] * body.r_CM[1]) - body.w_a[3] * (body.w_a[3] * body.r_CM[1] - body.w_a[1] * body.r_CM[3]),body.w_a[3] * (body.w_a[2] * body.r_CM[3] - body.w_a[3] * body.r_CM[2]) - body.w_a[1] * (body.w_a[1] * body.r_CM[2] - body.w_a[2] * body.r_CM[1]),body.w_a[1] * (body.w_a[3] * body.r_CM[1] - body.w_a[1] * body.r_CM[3]) - body.w_a[2] * (body.w_a[2] * body.r_CM[3] - body.w_a[3] * body.r_CM[2])});
//   body.frame_a.t[1] = body.I[1,1] * body.z_a[1] + body.I[1,2] * body.z_a[2] + body.I[1,3] * body.z_a[3] + (body.w_a[2] * (body.I[3,1] * body.w_a[1] + body.I[3,2] * body.w_a[2] + body.I[3,3] * body.w_a[3]) - body.w_a[3] * (body.I[2,1] * body.w_a[1] + body.I[2,2] * body.w_a[2] + body.I[2,3] * body.w_a[3])) + (body.r_CM[2] * body.frame_a.f[3] - body.r_CM[3] * body.frame_a.f[2]);
//   body.frame_a.t[2] = body.I[2,1] * body.z_a[1] + body.I[2,2] * body.z_a[2] + body.I[2,3] * body.z_a[3] + (body.w_a[3] * (body.I[1,1] * body.w_a[1] + body.I[1,2] * body.w_a[2] + body.I[1,3] * body.w_a[3]) - body.w_a[1] * (body.I[3,1] * body.w_a[1] + body.I[3,2] * body.w_a[2] + body.I[3,3] * body.w_a[3])) + (body.r_CM[3] * body.frame_a.f[1] - body.r_CM[1] * body.frame_a.f[3]);
//   body.frame_a.t[3] = body.I[3,1] * body.z_a[1] + body.I[3,2] * body.z_a[2] + body.I[3,3] * body.z_a[3] + (body.w_a[1] * (body.I[2,1] * body.w_a[1] + body.I[2,2] * body.w_a[2] + body.I[2,3] * body.w_a[3]) - body.w_a[2] * (body.I[1,1] * body.w_a[1] + body.I[1,2] * body.w_a[2] + body.I[1,3] * body.w_a[3])) + (body.r_CM[1] * body.frame_a.f[2] - body.r_CM[2] * body.frame_a.f[1]);
//   frameTranslation.world.x_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.x_arrowLine.shapeType);
//   frameTranslation.world.x_arrowLine.rxvisobj[1] = frameTranslation.world.x_arrowLine.R.T[1,1] * frameTranslation.world.x_arrowLine.e_x[1] + frameTranslation.world.x_arrowLine.R.T[2,1] * frameTranslation.world.x_arrowLine.e_x[2] + frameTranslation.world.x_arrowLine.R.T[3,1] * frameTranslation.world.x_arrowLine.e_x[3];
//   frameTranslation.world.x_arrowLine.rxvisobj[2] = frameTranslation.world.x_arrowLine.R.T[1,2] * frameTranslation.world.x_arrowLine.e_x[1] + frameTranslation.world.x_arrowLine.R.T[2,2] * frameTranslation.world.x_arrowLine.e_x[2] + frameTranslation.world.x_arrowLine.R.T[3,2] * frameTranslation.world.x_arrowLine.e_x[3];
//   frameTranslation.world.x_arrowLine.rxvisobj[3] = frameTranslation.world.x_arrowLine.R.T[1,3] * frameTranslation.world.x_arrowLine.e_x[1] + frameTranslation.world.x_arrowLine.R.T[2,3] * frameTranslation.world.x_arrowLine.e_x[2] + frameTranslation.world.x_arrowLine.R.T[3,3] * frameTranslation.world.x_arrowLine.e_x[3];
//   frameTranslation.world.x_arrowLine.ryvisobj[1] = frameTranslation.world.x_arrowLine.R.T[1,1] * frameTranslation.world.x_arrowLine.e_y[1] + frameTranslation.world.x_arrowLine.R.T[2,1] * frameTranslation.world.x_arrowLine.e_y[2] + frameTranslation.world.x_arrowLine.R.T[3,1] * frameTranslation.world.x_arrowLine.e_y[3];
//   frameTranslation.world.x_arrowLine.ryvisobj[2] = frameTranslation.world.x_arrowLine.R.T[1,2] * frameTranslation.world.x_arrowLine.e_y[1] + frameTranslation.world.x_arrowLine.R.T[2,2] * frameTranslation.world.x_arrowLine.e_y[2] + frameTranslation.world.x_arrowLine.R.T[3,2] * frameTranslation.world.x_arrowLine.e_y[3];
//   frameTranslation.world.x_arrowLine.ryvisobj[3] = frameTranslation.world.x_arrowLine.R.T[1,3] * frameTranslation.world.x_arrowLine.e_y[1] + frameTranslation.world.x_arrowLine.R.T[2,3] * frameTranslation.world.x_arrowLine.e_y[2] + frameTranslation.world.x_arrowLine.R.T[3,3] * frameTranslation.world.x_arrowLine.e_y[3];
//   frameTranslation.world.x_arrowLine.rvisobj = frameTranslation.world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_arrowLine.R.T[1,1],frameTranslation.world.x_arrowLine.R.T[1,2],frameTranslation.world.x_arrowLine.R.T[1,3]},{frameTranslation.world.x_arrowLine.R.T[2,1],frameTranslation.world.x_arrowLine.R.T[2,2],frameTranslation.world.x_arrowLine.R.T[2,3]},{frameTranslation.world.x_arrowLine.R.T[3,1],frameTranslation.world.x_arrowLine.R.T[3,2],frameTranslation.world.x_arrowLine.R.T[3,3]}},{frameTranslation.world.x_arrowLine.r_shape[1],frameTranslation.world.x_arrowLine.r_shape[2],frameTranslation.world.x_arrowLine.r_shape[3]});
//   frameTranslation.world.x_arrowLine.size[1] = frameTranslation.world.x_arrowLine.length;
//   frameTranslation.world.x_arrowLine.size[2] = frameTranslation.world.x_arrowLine.width;
//   frameTranslation.world.x_arrowLine.size[3] = frameTranslation.world.x_arrowLine.height;
//   frameTranslation.world.x_arrowLine.Material = PackMaterial(frameTranslation.world.x_arrowLine.color[1] / 255.0,frameTranslation.world.x_arrowLine.color[2] / 255.0,frameTranslation.world.x_arrowLine.color[3] / 255.0,frameTranslation.world.x_arrowLine.specularCoefficient);
//   frameTranslation.world.x_arrowLine.Extra = frameTranslation.world.x_arrowLine.extra;
//   frameTranslation.world.x_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.x_arrowHead.shapeType);
//   frameTranslation.world.x_arrowHead.rxvisobj[1] = frameTranslation.world.x_arrowHead.R.T[1,1] * frameTranslation.world.x_arrowHead.e_x[1] + frameTranslation.world.x_arrowHead.R.T[2,1] * frameTranslation.world.x_arrowHead.e_x[2] + frameTranslation.world.x_arrowHead.R.T[3,1] * frameTranslation.world.x_arrowHead.e_x[3];
//   frameTranslation.world.x_arrowHead.rxvisobj[2] = frameTranslation.world.x_arrowHead.R.T[1,2] * frameTranslation.world.x_arrowHead.e_x[1] + frameTranslation.world.x_arrowHead.R.T[2,2] * frameTranslation.world.x_arrowHead.e_x[2] + frameTranslation.world.x_arrowHead.R.T[3,2] * frameTranslation.world.x_arrowHead.e_x[3];
//   frameTranslation.world.x_arrowHead.rxvisobj[3] = frameTranslation.world.x_arrowHead.R.T[1,3] * frameTranslation.world.x_arrowHead.e_x[1] + frameTranslation.world.x_arrowHead.R.T[2,3] * frameTranslation.world.x_arrowHead.e_x[2] + frameTranslation.world.x_arrowHead.R.T[3,3] * frameTranslation.world.x_arrowHead.e_x[3];
//   frameTranslation.world.x_arrowHead.ryvisobj[1] = frameTranslation.world.x_arrowHead.R.T[1,1] * frameTranslation.world.x_arrowHead.e_y[1] + frameTranslation.world.x_arrowHead.R.T[2,1] * frameTranslation.world.x_arrowHead.e_y[2] + frameTranslation.world.x_arrowHead.R.T[3,1] * frameTranslation.world.x_arrowHead.e_y[3];
//   frameTranslation.world.x_arrowHead.ryvisobj[2] = frameTranslation.world.x_arrowHead.R.T[1,2] * frameTranslation.world.x_arrowHead.e_y[1] + frameTranslation.world.x_arrowHead.R.T[2,2] * frameTranslation.world.x_arrowHead.e_y[2] + frameTranslation.world.x_arrowHead.R.T[3,2] * frameTranslation.world.x_arrowHead.e_y[3];
//   frameTranslation.world.x_arrowHead.ryvisobj[3] = frameTranslation.world.x_arrowHead.R.T[1,3] * frameTranslation.world.x_arrowHead.e_y[1] + frameTranslation.world.x_arrowHead.R.T[2,3] * frameTranslation.world.x_arrowHead.e_y[2] + frameTranslation.world.x_arrowHead.R.T[3,3] * frameTranslation.world.x_arrowHead.e_y[3];
//   frameTranslation.world.x_arrowHead.rvisobj = frameTranslation.world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_arrowHead.R.T[1,1],frameTranslation.world.x_arrowHead.R.T[1,2],frameTranslation.world.x_arrowHead.R.T[1,3]},{frameTranslation.world.x_arrowHead.R.T[2,1],frameTranslation.world.x_arrowHead.R.T[2,2],frameTranslation.world.x_arrowHead.R.T[2,3]},{frameTranslation.world.x_arrowHead.R.T[3,1],frameTranslation.world.x_arrowHead.R.T[3,2],frameTranslation.world.x_arrowHead.R.T[3,3]}},{frameTranslation.world.x_arrowHead.r_shape[1],frameTranslation.world.x_arrowHead.r_shape[2],frameTranslation.world.x_arrowHead.r_shape[3]});
//   frameTranslation.world.x_arrowHead.size[1] = frameTranslation.world.x_arrowHead.length;
//   frameTranslation.world.x_arrowHead.size[2] = frameTranslation.world.x_arrowHead.width;
//   frameTranslation.world.x_arrowHead.size[3] = frameTranslation.world.x_arrowHead.height;
//   frameTranslation.world.x_arrowHead.Material = PackMaterial(frameTranslation.world.x_arrowHead.color[1] / 255.0,frameTranslation.world.x_arrowHead.color[2] / 255.0,frameTranslation.world.x_arrowHead.color[3] / 255.0,frameTranslation.world.x_arrowHead.specularCoefficient);
//   frameTranslation.world.x_arrowHead.Extra = frameTranslation.world.x_arrowHead.extra;
//   frameTranslation.world.y_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.y_arrowLine.shapeType);
//   frameTranslation.world.y_arrowLine.rxvisobj[1] = frameTranslation.world.y_arrowLine.R.T[1,1] * frameTranslation.world.y_arrowLine.e_x[1] + frameTranslation.world.y_arrowLine.R.T[2,1] * frameTranslation.world.y_arrowLine.e_x[2] + frameTranslation.world.y_arrowLine.R.T[3,1] * frameTranslation.world.y_arrowLine.e_x[3];
//   frameTranslation.world.y_arrowLine.rxvisobj[2] = frameTranslation.world.y_arrowLine.R.T[1,2] * frameTranslation.world.y_arrowLine.e_x[1] + frameTranslation.world.y_arrowLine.R.T[2,2] * frameTranslation.world.y_arrowLine.e_x[2] + frameTranslation.world.y_arrowLine.R.T[3,2] * frameTranslation.world.y_arrowLine.e_x[3];
//   frameTranslation.world.y_arrowLine.rxvisobj[3] = frameTranslation.world.y_arrowLine.R.T[1,3] * frameTranslation.world.y_arrowLine.e_x[1] + frameTranslation.world.y_arrowLine.R.T[2,3] * frameTranslation.world.y_arrowLine.e_x[2] + frameTranslation.world.y_arrowLine.R.T[3,3] * frameTranslation.world.y_arrowLine.e_x[3];
//   frameTranslation.world.y_arrowLine.ryvisobj[1] = frameTranslation.world.y_arrowLine.R.T[1,1] * frameTranslation.world.y_arrowLine.e_y[1] + frameTranslation.world.y_arrowLine.R.T[2,1] * frameTranslation.world.y_arrowLine.e_y[2] + frameTranslation.world.y_arrowLine.R.T[3,1] * frameTranslation.world.y_arrowLine.e_y[3];
//   frameTranslation.world.y_arrowLine.ryvisobj[2] = frameTranslation.world.y_arrowLine.R.T[1,2] * frameTranslation.world.y_arrowLine.e_y[1] + frameTranslation.world.y_arrowLine.R.T[2,2] * frameTranslation.world.y_arrowLine.e_y[2] + frameTranslation.world.y_arrowLine.R.T[3,2] * frameTranslation.world.y_arrowLine.e_y[3];
//   frameTranslation.world.y_arrowLine.ryvisobj[3] = frameTranslation.world.y_arrowLine.R.T[1,3] * frameTranslation.world.y_arrowLine.e_y[1] + frameTranslation.world.y_arrowLine.R.T[2,3] * frameTranslation.world.y_arrowLine.e_y[2] + frameTranslation.world.y_arrowLine.R.T[3,3] * frameTranslation.world.y_arrowLine.e_y[3];
//   frameTranslation.world.y_arrowLine.rvisobj = frameTranslation.world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_arrowLine.R.T[1,1],frameTranslation.world.y_arrowLine.R.T[1,2],frameTranslation.world.y_arrowLine.R.T[1,3]},{frameTranslation.world.y_arrowLine.R.T[2,1],frameTranslation.world.y_arrowLine.R.T[2,2],frameTranslation.world.y_arrowLine.R.T[2,3]},{frameTranslation.world.y_arrowLine.R.T[3,1],frameTranslation.world.y_arrowLine.R.T[3,2],frameTranslation.world.y_arrowLine.R.T[3,3]}},{frameTranslation.world.y_arrowLine.r_shape[1],frameTranslation.world.y_arrowLine.r_shape[2],frameTranslation.world.y_arrowLine.r_shape[3]});
//   frameTranslation.world.y_arrowLine.size[1] = frameTranslation.world.y_arrowLine.length;
//   frameTranslation.world.y_arrowLine.size[2] = frameTranslation.world.y_arrowLine.width;
//   frameTranslation.world.y_arrowLine.size[3] = frameTranslation.world.y_arrowLine.height;
//   frameTranslation.world.y_arrowLine.Material = PackMaterial(frameTranslation.world.y_arrowLine.color[1] / 255.0,frameTranslation.world.y_arrowLine.color[2] / 255.0,frameTranslation.world.y_arrowLine.color[3] / 255.0,frameTranslation.world.y_arrowLine.specularCoefficient);
//   frameTranslation.world.y_arrowLine.Extra = frameTranslation.world.y_arrowLine.extra;
//   frameTranslation.world.y_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.y_arrowHead.shapeType);
//   frameTranslation.world.y_arrowHead.rxvisobj[1] = frameTranslation.world.y_arrowHead.R.T[1,1] * frameTranslation.world.y_arrowHead.e_x[1] + frameTranslation.world.y_arrowHead.R.T[2,1] * frameTranslation.world.y_arrowHead.e_x[2] + frameTranslation.world.y_arrowHead.R.T[3,1] * frameTranslation.world.y_arrowHead.e_x[3];
//   frameTranslation.world.y_arrowHead.rxvisobj[2] = frameTranslation.world.y_arrowHead.R.T[1,2] * frameTranslation.world.y_arrowHead.e_x[1] + frameTranslation.world.y_arrowHead.R.T[2,2] * frameTranslation.world.y_arrowHead.e_x[2] + frameTranslation.world.y_arrowHead.R.T[3,2] * frameTranslation.world.y_arrowHead.e_x[3];
//   frameTranslation.world.y_arrowHead.rxvisobj[3] = frameTranslation.world.y_arrowHead.R.T[1,3] * frameTranslation.world.y_arrowHead.e_x[1] + frameTranslation.world.y_arrowHead.R.T[2,3] * frameTranslation.world.y_arrowHead.e_x[2] + frameTranslation.world.y_arrowHead.R.T[3,3] * frameTranslation.world.y_arrowHead.e_x[3];
//   frameTranslation.world.y_arrowHead.ryvisobj[1] = frameTranslation.world.y_arrowHead.R.T[1,1] * frameTranslation.world.y_arrowHead.e_y[1] + frameTranslation.world.y_arrowHead.R.T[2,1] * frameTranslation.world.y_arrowHead.e_y[2] + frameTranslation.world.y_arrowHead.R.T[3,1] * frameTranslation.world.y_arrowHead.e_y[3];
//   frameTranslation.world.y_arrowHead.ryvisobj[2] = frameTranslation.world.y_arrowHead.R.T[1,2] * frameTranslation.world.y_arrowHead.e_y[1] + frameTranslation.world.y_arrowHead.R.T[2,2] * frameTranslation.world.y_arrowHead.e_y[2] + frameTranslation.world.y_arrowHead.R.T[3,2] * frameTranslation.world.y_arrowHead.e_y[3];
//   frameTranslation.world.y_arrowHead.ryvisobj[3] = frameTranslation.world.y_arrowHead.R.T[1,3] * frameTranslation.world.y_arrowHead.e_y[1] + frameTranslation.world.y_arrowHead.R.T[2,3] * frameTranslation.world.y_arrowHead.e_y[2] + frameTranslation.world.y_arrowHead.R.T[3,3] * frameTranslation.world.y_arrowHead.e_y[3];
//   frameTranslation.world.y_arrowHead.rvisobj = frameTranslation.world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_arrowHead.R.T[1,1],frameTranslation.world.y_arrowHead.R.T[1,2],frameTranslation.world.y_arrowHead.R.T[1,3]},{frameTranslation.world.y_arrowHead.R.T[2,1],frameTranslation.world.y_arrowHead.R.T[2,2],frameTranslation.world.y_arrowHead.R.T[2,3]},{frameTranslation.world.y_arrowHead.R.T[3,1],frameTranslation.world.y_arrowHead.R.T[3,2],frameTranslation.world.y_arrowHead.R.T[3,3]}},{frameTranslation.world.y_arrowHead.r_shape[1],frameTranslation.world.y_arrowHead.r_shape[2],frameTranslation.world.y_arrowHead.r_shape[3]});
//   frameTranslation.world.y_arrowHead.size[1] = frameTranslation.world.y_arrowHead.length;
//   frameTranslation.world.y_arrowHead.size[2] = frameTranslation.world.y_arrowHead.width;
//   frameTranslation.world.y_arrowHead.size[3] = frameTranslation.world.y_arrowHead.height;
//   frameTranslation.world.y_arrowHead.Material = PackMaterial(frameTranslation.world.y_arrowHead.color[1] / 255.0,frameTranslation.world.y_arrowHead.color[2] / 255.0,frameTranslation.world.y_arrowHead.color[3] / 255.0,frameTranslation.world.y_arrowHead.specularCoefficient);
//   frameTranslation.world.y_arrowHead.Extra = frameTranslation.world.y_arrowHead.extra;
//   frameTranslation.world.z_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.z_arrowLine.shapeType);
//   frameTranslation.world.z_arrowLine.rxvisobj[1] = frameTranslation.world.z_arrowLine.R.T[1,1] * frameTranslation.world.z_arrowLine.e_x[1] + frameTranslation.world.z_arrowLine.R.T[2,1] * frameTranslation.world.z_arrowLine.e_x[2] + frameTranslation.world.z_arrowLine.R.T[3,1] * frameTranslation.world.z_arrowLine.e_x[3];
//   frameTranslation.world.z_arrowLine.rxvisobj[2] = frameTranslation.world.z_arrowLine.R.T[1,2] * frameTranslation.world.z_arrowLine.e_x[1] + frameTranslation.world.z_arrowLine.R.T[2,2] * frameTranslation.world.z_arrowLine.e_x[2] + frameTranslation.world.z_arrowLine.R.T[3,2] * frameTranslation.world.z_arrowLine.e_x[3];
//   frameTranslation.world.z_arrowLine.rxvisobj[3] = frameTranslation.world.z_arrowLine.R.T[1,3] * frameTranslation.world.z_arrowLine.e_x[1] + frameTranslation.world.z_arrowLine.R.T[2,3] * frameTranslation.world.z_arrowLine.e_x[2] + frameTranslation.world.z_arrowLine.R.T[3,3] * frameTranslation.world.z_arrowLine.e_x[3];
//   frameTranslation.world.z_arrowLine.ryvisobj[1] = frameTranslation.world.z_arrowLine.R.T[1,1] * frameTranslation.world.z_arrowLine.e_y[1] + frameTranslation.world.z_arrowLine.R.T[2,1] * frameTranslation.world.z_arrowLine.e_y[2] + frameTranslation.world.z_arrowLine.R.T[3,1] * frameTranslation.world.z_arrowLine.e_y[3];
//   frameTranslation.world.z_arrowLine.ryvisobj[2] = frameTranslation.world.z_arrowLine.R.T[1,2] * frameTranslation.world.z_arrowLine.e_y[1] + frameTranslation.world.z_arrowLine.R.T[2,2] * frameTranslation.world.z_arrowLine.e_y[2] + frameTranslation.world.z_arrowLine.R.T[3,2] * frameTranslation.world.z_arrowLine.e_y[3];
//   frameTranslation.world.z_arrowLine.ryvisobj[3] = frameTranslation.world.z_arrowLine.R.T[1,3] * frameTranslation.world.z_arrowLine.e_y[1] + frameTranslation.world.z_arrowLine.R.T[2,3] * frameTranslation.world.z_arrowLine.e_y[2] + frameTranslation.world.z_arrowLine.R.T[3,3] * frameTranslation.world.z_arrowLine.e_y[3];
//   frameTranslation.world.z_arrowLine.rvisobj = frameTranslation.world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_arrowLine.R.T[1,1],frameTranslation.world.z_arrowLine.R.T[1,2],frameTranslation.world.z_arrowLine.R.T[1,3]},{frameTranslation.world.z_arrowLine.R.T[2,1],frameTranslation.world.z_arrowLine.R.T[2,2],frameTranslation.world.z_arrowLine.R.T[2,3]},{frameTranslation.world.z_arrowLine.R.T[3,1],frameTranslation.world.z_arrowLine.R.T[3,2],frameTranslation.world.z_arrowLine.R.T[3,3]}},{frameTranslation.world.z_arrowLine.r_shape[1],frameTranslation.world.z_arrowLine.r_shape[2],frameTranslation.world.z_arrowLine.r_shape[3]});
//   frameTranslation.world.z_arrowLine.size[1] = frameTranslation.world.z_arrowLine.length;
//   frameTranslation.world.z_arrowLine.size[2] = frameTranslation.world.z_arrowLine.width;
//   frameTranslation.world.z_arrowLine.size[3] = frameTranslation.world.z_arrowLine.height;
//   frameTranslation.world.z_arrowLine.Material = PackMaterial(frameTranslation.world.z_arrowLine.color[1] / 255.0,frameTranslation.world.z_arrowLine.color[2] / 255.0,frameTranslation.world.z_arrowLine.color[3] / 255.0,frameTranslation.world.z_arrowLine.specularCoefficient);
//   frameTranslation.world.z_arrowLine.Extra = frameTranslation.world.z_arrowLine.extra;
//   frameTranslation.world.z_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.z_arrowHead.shapeType);
//   frameTranslation.world.z_arrowHead.rxvisobj[1] = frameTranslation.world.z_arrowHead.R.T[1,1] * frameTranslation.world.z_arrowHead.e_x[1] + frameTranslation.world.z_arrowHead.R.T[2,1] * frameTranslation.world.z_arrowHead.e_x[2] + frameTranslation.world.z_arrowHead.R.T[3,1] * frameTranslation.world.z_arrowHead.e_x[3];
//   frameTranslation.world.z_arrowHead.rxvisobj[2] = frameTranslation.world.z_arrowHead.R.T[1,2] * frameTranslation.world.z_arrowHead.e_x[1] + frameTranslation.world.z_arrowHead.R.T[2,2] * frameTranslation.world.z_arrowHead.e_x[2] + frameTranslation.world.z_arrowHead.R.T[3,2] * frameTranslation.world.z_arrowHead.e_x[3];
//   frameTranslation.world.z_arrowHead.rxvisobj[3] = frameTranslation.world.z_arrowHead.R.T[1,3] * frameTranslation.world.z_arrowHead.e_x[1] + frameTranslation.world.z_arrowHead.R.T[2,3] * frameTranslation.world.z_arrowHead.e_x[2] + frameTranslation.world.z_arrowHead.R.T[3,3] * frameTranslation.world.z_arrowHead.e_x[3];
//   frameTranslation.world.z_arrowHead.ryvisobj[1] = frameTranslation.world.z_arrowHead.R.T[1,1] * frameTranslation.world.z_arrowHead.e_y[1] + frameTranslation.world.z_arrowHead.R.T[2,1] * frameTranslation.world.z_arrowHead.e_y[2] + frameTranslation.world.z_arrowHead.R.T[3,1] * frameTranslation.world.z_arrowHead.e_y[3];
//   frameTranslation.world.z_arrowHead.ryvisobj[2] = frameTranslation.world.z_arrowHead.R.T[1,2] * frameTranslation.world.z_arrowHead.e_y[1] + frameTranslation.world.z_arrowHead.R.T[2,2] * frameTranslation.world.z_arrowHead.e_y[2] + frameTranslation.world.z_arrowHead.R.T[3,2] * frameTranslation.world.z_arrowHead.e_y[3];
//   frameTranslation.world.z_arrowHead.ryvisobj[3] = frameTranslation.world.z_arrowHead.R.T[1,3] * frameTranslation.world.z_arrowHead.e_y[1] + frameTranslation.world.z_arrowHead.R.T[2,3] * frameTranslation.world.z_arrowHead.e_y[2] + frameTranslation.world.z_arrowHead.R.T[3,3] * frameTranslation.world.z_arrowHead.e_y[3];
//   frameTranslation.world.z_arrowHead.rvisobj = frameTranslation.world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_arrowHead.R.T[1,1],frameTranslation.world.z_arrowHead.R.T[1,2],frameTranslation.world.z_arrowHead.R.T[1,3]},{frameTranslation.world.z_arrowHead.R.T[2,1],frameTranslation.world.z_arrowHead.R.T[2,2],frameTranslation.world.z_arrowHead.R.T[2,3]},{frameTranslation.world.z_arrowHead.R.T[3,1],frameTranslation.world.z_arrowHead.R.T[3,2],frameTranslation.world.z_arrowHead.R.T[3,3]}},{frameTranslation.world.z_arrowHead.r_shape[1],frameTranslation.world.z_arrowHead.r_shape[2],frameTranslation.world.z_arrowHead.r_shape[3]});
//   frameTranslation.world.z_arrowHead.size[1] = frameTranslation.world.z_arrowHead.length;
//   frameTranslation.world.z_arrowHead.size[2] = frameTranslation.world.z_arrowHead.width;
//   frameTranslation.world.z_arrowHead.size[3] = frameTranslation.world.z_arrowHead.height;
//   frameTranslation.world.z_arrowHead.Material = PackMaterial(frameTranslation.world.z_arrowHead.color[1] / 255.0,frameTranslation.world.z_arrowHead.color[2] / 255.0,frameTranslation.world.z_arrowHead.color[3] / 255.0,frameTranslation.world.z_arrowHead.specularCoefficient);
//   frameTranslation.world.z_arrowHead.Extra = frameTranslation.world.z_arrowHead.extra;
//   frameTranslation.world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.gravityArrowLine.shapeType);
//   frameTranslation.world.gravityArrowLine.rxvisobj[1] = frameTranslation.world.gravityArrowLine.R.T[1,1] * frameTranslation.world.gravityArrowLine.e_x[1] + frameTranslation.world.gravityArrowLine.R.T[2,1] * frameTranslation.world.gravityArrowLine.e_x[2] + frameTranslation.world.gravityArrowLine.R.T[3,1] * frameTranslation.world.gravityArrowLine.e_x[3];
//   frameTranslation.world.gravityArrowLine.rxvisobj[2] = frameTranslation.world.gravityArrowLine.R.T[1,2] * frameTranslation.world.gravityArrowLine.e_x[1] + frameTranslation.world.gravityArrowLine.R.T[2,2] * frameTranslation.world.gravityArrowLine.e_x[2] + frameTranslation.world.gravityArrowLine.R.T[3,2] * frameTranslation.world.gravityArrowLine.e_x[3];
//   frameTranslation.world.gravityArrowLine.rxvisobj[3] = frameTranslation.world.gravityArrowLine.R.T[1,3] * frameTranslation.world.gravityArrowLine.e_x[1] + frameTranslation.world.gravityArrowLine.R.T[2,3] * frameTranslation.world.gravityArrowLine.e_x[2] + frameTranslation.world.gravityArrowLine.R.T[3,3] * frameTranslation.world.gravityArrowLine.e_x[3];
//   frameTranslation.world.gravityArrowLine.ryvisobj[1] = frameTranslation.world.gravityArrowLine.R.T[1,1] * frameTranslation.world.gravityArrowLine.e_y[1] + frameTranslation.world.gravityArrowLine.R.T[2,1] * frameTranslation.world.gravityArrowLine.e_y[2] + frameTranslation.world.gravityArrowLine.R.T[3,1] * frameTranslation.world.gravityArrowLine.e_y[3];
//   frameTranslation.world.gravityArrowLine.ryvisobj[2] = frameTranslation.world.gravityArrowLine.R.T[1,2] * frameTranslation.world.gravityArrowLine.e_y[1] + frameTranslation.world.gravityArrowLine.R.T[2,2] * frameTranslation.world.gravityArrowLine.e_y[2] + frameTranslation.world.gravityArrowLine.R.T[3,2] * frameTranslation.world.gravityArrowLine.e_y[3];
//   frameTranslation.world.gravityArrowLine.ryvisobj[3] = frameTranslation.world.gravityArrowLine.R.T[1,3] * frameTranslation.world.gravityArrowLine.e_y[1] + frameTranslation.world.gravityArrowLine.R.T[2,3] * frameTranslation.world.gravityArrowLine.e_y[2] + frameTranslation.world.gravityArrowLine.R.T[3,3] * frameTranslation.world.gravityArrowLine.e_y[3];
//   frameTranslation.world.gravityArrowLine.rvisobj = frameTranslation.world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.gravityArrowLine.R.T[1,1],frameTranslation.world.gravityArrowLine.R.T[1,2],frameTranslation.world.gravityArrowLine.R.T[1,3]},{frameTranslation.world.gravityArrowLine.R.T[2,1],frameTranslation.world.gravityArrowLine.R.T[2,2],frameTranslation.world.gravityArrowLine.R.T[2,3]},{frameTranslation.world.gravityArrowLine.R.T[3,1],frameTranslation.world.gravityArrowLine.R.T[3,2],frameTranslation.world.gravityArrowLine.R.T[3,3]}},{frameTranslation.world.gravityArrowLine.r_shape[1],frameTranslation.world.gravityArrowLine.r_shape[2],frameTranslation.world.gravityArrowLine.r_shape[3]});
//   frameTranslation.world.gravityArrowLine.size[1] = frameTranslation.world.gravityArrowLine.length;
//   frameTranslation.world.gravityArrowLine.size[2] = frameTranslation.world.gravityArrowLine.width;
//   frameTranslation.world.gravityArrowLine.size[3] = frameTranslation.world.gravityArrowLine.height;
//   frameTranslation.world.gravityArrowLine.Material = PackMaterial(frameTranslation.world.gravityArrowLine.color[1] / 255.0,frameTranslation.world.gravityArrowLine.color[2] / 255.0,frameTranslation.world.gravityArrowLine.color[3] / 255.0,frameTranslation.world.gravityArrowLine.specularCoefficient);
//   frameTranslation.world.gravityArrowLine.Extra = frameTranslation.world.gravityArrowLine.extra;
//   frameTranslation.world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.gravityArrowHead.shapeType);
//   frameTranslation.world.gravityArrowHead.rxvisobj[1] = frameTranslation.world.gravityArrowHead.R.T[1,1] * frameTranslation.world.gravityArrowHead.e_x[1] + frameTranslation.world.gravityArrowHead.R.T[2,1] * frameTranslation.world.gravityArrowHead.e_x[2] + frameTranslation.world.gravityArrowHead.R.T[3,1] * frameTranslation.world.gravityArrowHead.e_x[3];
//   frameTranslation.world.gravityArrowHead.rxvisobj[2] = frameTranslation.world.gravityArrowHead.R.T[1,2] * frameTranslation.world.gravityArrowHead.e_x[1] + frameTranslation.world.gravityArrowHead.R.T[2,2] * frameTranslation.world.gravityArrowHead.e_x[2] + frameTranslation.world.gravityArrowHead.R.T[3,2] * frameTranslation.world.gravityArrowHead.e_x[3];
//   frameTranslation.world.gravityArrowHead.rxvisobj[3] = frameTranslation.world.gravityArrowHead.R.T[1,3] * frameTranslation.world.gravityArrowHead.e_x[1] + frameTranslation.world.gravityArrowHead.R.T[2,3] * frameTranslation.world.gravityArrowHead.e_x[2] + frameTranslation.world.gravityArrowHead.R.T[3,3] * frameTranslation.world.gravityArrowHead.e_x[3];
//   frameTranslation.world.gravityArrowHead.ryvisobj[1] = frameTranslation.world.gravityArrowHead.R.T[1,1] * frameTranslation.world.gravityArrowHead.e_y[1] + frameTranslation.world.gravityArrowHead.R.T[2,1] * frameTranslation.world.gravityArrowHead.e_y[2] + frameTranslation.world.gravityArrowHead.R.T[3,1] * frameTranslation.world.gravityArrowHead.e_y[3];
//   frameTranslation.world.gravityArrowHead.ryvisobj[2] = frameTranslation.world.gravityArrowHead.R.T[1,2] * frameTranslation.world.gravityArrowHead.e_y[1] + frameTranslation.world.gravityArrowHead.R.T[2,2] * frameTranslation.world.gravityArrowHead.e_y[2] + frameTranslation.world.gravityArrowHead.R.T[3,2] * frameTranslation.world.gravityArrowHead.e_y[3];
//   frameTranslation.world.gravityArrowHead.ryvisobj[3] = frameTranslation.world.gravityArrowHead.R.T[1,3] * frameTranslation.world.gravityArrowHead.e_y[1] + frameTranslation.world.gravityArrowHead.R.T[2,3] * frameTranslation.world.gravityArrowHead.e_y[2] + frameTranslation.world.gravityArrowHead.R.T[3,3] * frameTranslation.world.gravityArrowHead.e_y[3];
//   frameTranslation.world.gravityArrowHead.rvisobj = frameTranslation.world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.gravityArrowHead.R.T[1,1],frameTranslation.world.gravityArrowHead.R.T[1,2],frameTranslation.world.gravityArrowHead.R.T[1,3]},{frameTranslation.world.gravityArrowHead.R.T[2,1],frameTranslation.world.gravityArrowHead.R.T[2,2],frameTranslation.world.gravityArrowHead.R.T[2,3]},{frameTranslation.world.gravityArrowHead.R.T[3,1],frameTranslation.world.gravityArrowHead.R.T[3,2],frameTranslation.world.gravityArrowHead.R.T[3,3]}},{frameTranslation.world.gravityArrowHead.r_shape[1],frameTranslation.world.gravityArrowHead.r_shape[2],frameTranslation.world.gravityArrowHead.r_shape[3]});
//   frameTranslation.world.gravityArrowHead.size[1] = frameTranslation.world.gravityArrowHead.length;
//   frameTranslation.world.gravityArrowHead.size[2] = frameTranslation.world.gravityArrowHead.width;
//   frameTranslation.world.gravityArrowHead.size[3] = frameTranslation.world.gravityArrowHead.height;
//   frameTranslation.world.gravityArrowHead.Material = PackMaterial(frameTranslation.world.gravityArrowHead.color[1] / 255.0,frameTranslation.world.gravityArrowHead.color[2] / 255.0,frameTranslation.world.gravityArrowHead.color[3] / 255.0,frameTranslation.world.gravityArrowHead.specularCoefficient);
//   frameTranslation.world.gravityArrowHead.Extra = frameTranslation.world.gravityArrowHead.extra;
//   frameTranslation.world.x_label.cylinders[1].R.T[1,1] = frameTranslation.world.x_label.R.T[1,1];
//   frameTranslation.world.x_label.cylinders[1].R.T[1,2] = frameTranslation.world.x_label.R.T[1,2];
//   frameTranslation.world.x_label.cylinders[1].R.T[1,3] = frameTranslation.world.x_label.R.T[1,3];
//   frameTranslation.world.x_label.cylinders[1].R.T[2,1] = frameTranslation.world.x_label.R.T[2,1];
//   frameTranslation.world.x_label.cylinders[1].R.T[2,2] = frameTranslation.world.x_label.R.T[2,2];
//   frameTranslation.world.x_label.cylinders[1].R.T[2,3] = frameTranslation.world.x_label.R.T[2,3];
//   frameTranslation.world.x_label.cylinders[1].R.T[3,1] = frameTranslation.world.x_label.R.T[3,1];
//   frameTranslation.world.x_label.cylinders[1].R.T[3,2] = frameTranslation.world.x_label.R.T[3,2];
//   frameTranslation.world.x_label.cylinders[1].R.T[3,3] = frameTranslation.world.x_label.R.T[3,3];
//   frameTranslation.world.x_label.cylinders[1].R.w[1] = frameTranslation.world.x_label.R.w[1];
//   frameTranslation.world.x_label.cylinders[1].R.w[2] = frameTranslation.world.x_label.R.w[2];
//   frameTranslation.world.x_label.cylinders[1].R.w[3] = frameTranslation.world.x_label.R.w[3];
//   frameTranslation.world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.x_label.cylinders[1].shapeType);
//   frameTranslation.world.x_label.cylinders[1].rxvisobj[1] = frameTranslation.world.x_label.cylinders[1].R.T[1,1] * frameTranslation.world.x_label.cylinders[1].e_x[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,1] * frameTranslation.world.x_label.cylinders[1].e_x[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,1] * frameTranslation.world.x_label.cylinders[1].e_x[3];
//   frameTranslation.world.x_label.cylinders[1].rxvisobj[2] = frameTranslation.world.x_label.cylinders[1].R.T[1,2] * frameTranslation.world.x_label.cylinders[1].e_x[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,2] * frameTranslation.world.x_label.cylinders[1].e_x[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,2] * frameTranslation.world.x_label.cylinders[1].e_x[3];
//   frameTranslation.world.x_label.cylinders[1].rxvisobj[3] = frameTranslation.world.x_label.cylinders[1].R.T[1,3] * frameTranslation.world.x_label.cylinders[1].e_x[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,3] * frameTranslation.world.x_label.cylinders[1].e_x[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,3] * frameTranslation.world.x_label.cylinders[1].e_x[3];
//   frameTranslation.world.x_label.cylinders[1].ryvisobj[1] = frameTranslation.world.x_label.cylinders[1].R.T[1,1] * frameTranslation.world.x_label.cylinders[1].e_y[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,1] * frameTranslation.world.x_label.cylinders[1].e_y[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,1] * frameTranslation.world.x_label.cylinders[1].e_y[3];
//   frameTranslation.world.x_label.cylinders[1].ryvisobj[2] = frameTranslation.world.x_label.cylinders[1].R.T[1,2] * frameTranslation.world.x_label.cylinders[1].e_y[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,2] * frameTranslation.world.x_label.cylinders[1].e_y[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,2] * frameTranslation.world.x_label.cylinders[1].e_y[3];
//   frameTranslation.world.x_label.cylinders[1].ryvisobj[3] = frameTranslation.world.x_label.cylinders[1].R.T[1,3] * frameTranslation.world.x_label.cylinders[1].e_y[1] + frameTranslation.world.x_label.cylinders[1].R.T[2,3] * frameTranslation.world.x_label.cylinders[1].e_y[2] + frameTranslation.world.x_label.cylinders[1].R.T[3,3] * frameTranslation.world.x_label.cylinders[1].e_y[3];
//   frameTranslation.world.x_label.cylinders[1].rvisobj = frameTranslation.world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.cylinders[1].R.T[1,1],frameTranslation.world.x_label.cylinders[1].R.T[1,2],frameTranslation.world.x_label.cylinders[1].R.T[1,3]},{frameTranslation.world.x_label.cylinders[1].R.T[2,1],frameTranslation.world.x_label.cylinders[1].R.T[2,2],frameTranslation.world.x_label.cylinders[1].R.T[2,3]},{frameTranslation.world.x_label.cylinders[1].R.T[3,1],frameTranslation.world.x_label.cylinders[1].R.T[3,2],frameTranslation.world.x_label.cylinders[1].R.T[3,3]}},{frameTranslation.world.x_label.cylinders[1].r_shape[1],frameTranslation.world.x_label.cylinders[1].r_shape[2],frameTranslation.world.x_label.cylinders[1].r_shape[3]});
//   frameTranslation.world.x_label.cylinders[1].size[1] = frameTranslation.world.x_label.cylinders[1].length;
//   frameTranslation.world.x_label.cylinders[1].size[2] = frameTranslation.world.x_label.cylinders[1].width;
//   frameTranslation.world.x_label.cylinders[1].size[3] = frameTranslation.world.x_label.cylinders[1].height;
//   frameTranslation.world.x_label.cylinders[1].Material = PackMaterial(frameTranslation.world.x_label.cylinders[1].color[1] / 255.0,frameTranslation.world.x_label.cylinders[1].color[2] / 255.0,frameTranslation.world.x_label.cylinders[1].color[3] / 255.0,frameTranslation.world.x_label.cylinders[1].specularCoefficient);
//   frameTranslation.world.x_label.cylinders[1].Extra = frameTranslation.world.x_label.cylinders[1].extra;
//   frameTranslation.world.x_label.cylinders[2].R.T[1,1] = frameTranslation.world.x_label.R.T[1,1];
//   frameTranslation.world.x_label.cylinders[2].R.T[1,2] = frameTranslation.world.x_label.R.T[1,2];
//   frameTranslation.world.x_label.cylinders[2].R.T[1,3] = frameTranslation.world.x_label.R.T[1,3];
//   frameTranslation.world.x_label.cylinders[2].R.T[2,1] = frameTranslation.world.x_label.R.T[2,1];
//   frameTranslation.world.x_label.cylinders[2].R.T[2,2] = frameTranslation.world.x_label.R.T[2,2];
//   frameTranslation.world.x_label.cylinders[2].R.T[2,3] = frameTranslation.world.x_label.R.T[2,3];
//   frameTranslation.world.x_label.cylinders[2].R.T[3,1] = frameTranslation.world.x_label.R.T[3,1];
//   frameTranslation.world.x_label.cylinders[2].R.T[3,2] = frameTranslation.world.x_label.R.T[3,2];
//   frameTranslation.world.x_label.cylinders[2].R.T[3,3] = frameTranslation.world.x_label.R.T[3,3];
//   frameTranslation.world.x_label.cylinders[2].R.w[1] = frameTranslation.world.x_label.R.w[1];
//   frameTranslation.world.x_label.cylinders[2].R.w[2] = frameTranslation.world.x_label.R.w[2];
//   frameTranslation.world.x_label.cylinders[2].R.w[3] = frameTranslation.world.x_label.R.w[3];
//   frameTranslation.world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.x_label.cylinders[2].shapeType);
//   frameTranslation.world.x_label.cylinders[2].rxvisobj[1] = frameTranslation.world.x_label.cylinders[2].R.T[1,1] * frameTranslation.world.x_label.cylinders[2].e_x[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,1] * frameTranslation.world.x_label.cylinders[2].e_x[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,1] * frameTranslation.world.x_label.cylinders[2].e_x[3];
//   frameTranslation.world.x_label.cylinders[2].rxvisobj[2] = frameTranslation.world.x_label.cylinders[2].R.T[1,2] * frameTranslation.world.x_label.cylinders[2].e_x[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,2] * frameTranslation.world.x_label.cylinders[2].e_x[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,2] * frameTranslation.world.x_label.cylinders[2].e_x[3];
//   frameTranslation.world.x_label.cylinders[2].rxvisobj[3] = frameTranslation.world.x_label.cylinders[2].R.T[1,3] * frameTranslation.world.x_label.cylinders[2].e_x[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,3] * frameTranslation.world.x_label.cylinders[2].e_x[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,3] * frameTranslation.world.x_label.cylinders[2].e_x[3];
//   frameTranslation.world.x_label.cylinders[2].ryvisobj[1] = frameTranslation.world.x_label.cylinders[2].R.T[1,1] * frameTranslation.world.x_label.cylinders[2].e_y[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,1] * frameTranslation.world.x_label.cylinders[2].e_y[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,1] * frameTranslation.world.x_label.cylinders[2].e_y[3];
//   frameTranslation.world.x_label.cylinders[2].ryvisobj[2] = frameTranslation.world.x_label.cylinders[2].R.T[1,2] * frameTranslation.world.x_label.cylinders[2].e_y[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,2] * frameTranslation.world.x_label.cylinders[2].e_y[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,2] * frameTranslation.world.x_label.cylinders[2].e_y[3];
//   frameTranslation.world.x_label.cylinders[2].ryvisobj[3] = frameTranslation.world.x_label.cylinders[2].R.T[1,3] * frameTranslation.world.x_label.cylinders[2].e_y[1] + frameTranslation.world.x_label.cylinders[2].R.T[2,3] * frameTranslation.world.x_label.cylinders[2].e_y[2] + frameTranslation.world.x_label.cylinders[2].R.T[3,3] * frameTranslation.world.x_label.cylinders[2].e_y[3];
//   frameTranslation.world.x_label.cylinders[2].rvisobj = frameTranslation.world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.x_label.cylinders[2].R.T[1,1],frameTranslation.world.x_label.cylinders[2].R.T[1,2],frameTranslation.world.x_label.cylinders[2].R.T[1,3]},{frameTranslation.world.x_label.cylinders[2].R.T[2,1],frameTranslation.world.x_label.cylinders[2].R.T[2,2],frameTranslation.world.x_label.cylinders[2].R.T[2,3]},{frameTranslation.world.x_label.cylinders[2].R.T[3,1],frameTranslation.world.x_label.cylinders[2].R.T[3,2],frameTranslation.world.x_label.cylinders[2].R.T[3,3]}},{frameTranslation.world.x_label.cylinders[2].r_shape[1],frameTranslation.world.x_label.cylinders[2].r_shape[2],frameTranslation.world.x_label.cylinders[2].r_shape[3]});
//   frameTranslation.world.x_label.cylinders[2].size[1] = frameTranslation.world.x_label.cylinders[2].length;
//   frameTranslation.world.x_label.cylinders[2].size[2] = frameTranslation.world.x_label.cylinders[2].width;
//   frameTranslation.world.x_label.cylinders[2].size[3] = frameTranslation.world.x_label.cylinders[2].height;
//   frameTranslation.world.x_label.cylinders[2].Material = PackMaterial(frameTranslation.world.x_label.cylinders[2].color[1] / 255.0,frameTranslation.world.x_label.cylinders[2].color[2] / 255.0,frameTranslation.world.x_label.cylinders[2].color[3] / 255.0,frameTranslation.world.x_label.cylinders[2].specularCoefficient);
//   frameTranslation.world.x_label.cylinders[2].Extra = frameTranslation.world.x_label.cylinders[2].extra;
//   frameTranslation.world.y_label.cylinders[1].R.T[1,1] = frameTranslation.world.y_label.R.T[1,1];
//   frameTranslation.world.y_label.cylinders[1].R.T[1,2] = frameTranslation.world.y_label.R.T[1,2];
//   frameTranslation.world.y_label.cylinders[1].R.T[1,3] = frameTranslation.world.y_label.R.T[1,3];
//   frameTranslation.world.y_label.cylinders[1].R.T[2,1] = frameTranslation.world.y_label.R.T[2,1];
//   frameTranslation.world.y_label.cylinders[1].R.T[2,2] = frameTranslation.world.y_label.R.T[2,2];
//   frameTranslation.world.y_label.cylinders[1].R.T[2,3] = frameTranslation.world.y_label.R.T[2,3];
//   frameTranslation.world.y_label.cylinders[1].R.T[3,1] = frameTranslation.world.y_label.R.T[3,1];
//   frameTranslation.world.y_label.cylinders[1].R.T[3,2] = frameTranslation.world.y_label.R.T[3,2];
//   frameTranslation.world.y_label.cylinders[1].R.T[3,3] = frameTranslation.world.y_label.R.T[3,3];
//   frameTranslation.world.y_label.cylinders[1].R.w[1] = frameTranslation.world.y_label.R.w[1];
//   frameTranslation.world.y_label.cylinders[1].R.w[2] = frameTranslation.world.y_label.R.w[2];
//   frameTranslation.world.y_label.cylinders[1].R.w[3] = frameTranslation.world.y_label.R.w[3];
//   frameTranslation.world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.y_label.cylinders[1].shapeType);
//   frameTranslation.world.y_label.cylinders[1].rxvisobj[1] = frameTranslation.world.y_label.cylinders[1].R.T[1,1] * frameTranslation.world.y_label.cylinders[1].e_x[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,1] * frameTranslation.world.y_label.cylinders[1].e_x[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,1] * frameTranslation.world.y_label.cylinders[1].e_x[3];
//   frameTranslation.world.y_label.cylinders[1].rxvisobj[2] = frameTranslation.world.y_label.cylinders[1].R.T[1,2] * frameTranslation.world.y_label.cylinders[1].e_x[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,2] * frameTranslation.world.y_label.cylinders[1].e_x[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,2] * frameTranslation.world.y_label.cylinders[1].e_x[3];
//   frameTranslation.world.y_label.cylinders[1].rxvisobj[3] = frameTranslation.world.y_label.cylinders[1].R.T[1,3] * frameTranslation.world.y_label.cylinders[1].e_x[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,3] * frameTranslation.world.y_label.cylinders[1].e_x[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,3] * frameTranslation.world.y_label.cylinders[1].e_x[3];
//   frameTranslation.world.y_label.cylinders[1].ryvisobj[1] = frameTranslation.world.y_label.cylinders[1].R.T[1,1] * frameTranslation.world.y_label.cylinders[1].e_y[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,1] * frameTranslation.world.y_label.cylinders[1].e_y[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,1] * frameTranslation.world.y_label.cylinders[1].e_y[3];
//   frameTranslation.world.y_label.cylinders[1].ryvisobj[2] = frameTranslation.world.y_label.cylinders[1].R.T[1,2] * frameTranslation.world.y_label.cylinders[1].e_y[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,2] * frameTranslation.world.y_label.cylinders[1].e_y[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,2] * frameTranslation.world.y_label.cylinders[1].e_y[3];
//   frameTranslation.world.y_label.cylinders[1].ryvisobj[3] = frameTranslation.world.y_label.cylinders[1].R.T[1,3] * frameTranslation.world.y_label.cylinders[1].e_y[1] + frameTranslation.world.y_label.cylinders[1].R.T[2,3] * frameTranslation.world.y_label.cylinders[1].e_y[2] + frameTranslation.world.y_label.cylinders[1].R.T[3,3] * frameTranslation.world.y_label.cylinders[1].e_y[3];
//   frameTranslation.world.y_label.cylinders[1].rvisobj = frameTranslation.world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.cylinders[1].R.T[1,1],frameTranslation.world.y_label.cylinders[1].R.T[1,2],frameTranslation.world.y_label.cylinders[1].R.T[1,3]},{frameTranslation.world.y_label.cylinders[1].R.T[2,1],frameTranslation.world.y_label.cylinders[1].R.T[2,2],frameTranslation.world.y_label.cylinders[1].R.T[2,3]},{frameTranslation.world.y_label.cylinders[1].R.T[3,1],frameTranslation.world.y_label.cylinders[1].R.T[3,2],frameTranslation.world.y_label.cylinders[1].R.T[3,3]}},{frameTranslation.world.y_label.cylinders[1].r_shape[1],frameTranslation.world.y_label.cylinders[1].r_shape[2],frameTranslation.world.y_label.cylinders[1].r_shape[3]});
//   frameTranslation.world.y_label.cylinders[1].size[1] = frameTranslation.world.y_label.cylinders[1].length;
//   frameTranslation.world.y_label.cylinders[1].size[2] = frameTranslation.world.y_label.cylinders[1].width;
//   frameTranslation.world.y_label.cylinders[1].size[3] = frameTranslation.world.y_label.cylinders[1].height;
//   frameTranslation.world.y_label.cylinders[1].Material = PackMaterial(frameTranslation.world.y_label.cylinders[1].color[1] / 255.0,frameTranslation.world.y_label.cylinders[1].color[2] / 255.0,frameTranslation.world.y_label.cylinders[1].color[3] / 255.0,frameTranslation.world.y_label.cylinders[1].specularCoefficient);
//   frameTranslation.world.y_label.cylinders[1].Extra = frameTranslation.world.y_label.cylinders[1].extra;
//   frameTranslation.world.y_label.cylinders[2].R.T[1,1] = frameTranslation.world.y_label.R.T[1,1];
//   frameTranslation.world.y_label.cylinders[2].R.T[1,2] = frameTranslation.world.y_label.R.T[1,2];
//   frameTranslation.world.y_label.cylinders[2].R.T[1,3] = frameTranslation.world.y_label.R.T[1,3];
//   frameTranslation.world.y_label.cylinders[2].R.T[2,1] = frameTranslation.world.y_label.R.T[2,1];
//   frameTranslation.world.y_label.cylinders[2].R.T[2,2] = frameTranslation.world.y_label.R.T[2,2];
//   frameTranslation.world.y_label.cylinders[2].R.T[2,3] = frameTranslation.world.y_label.R.T[2,3];
//   frameTranslation.world.y_label.cylinders[2].R.T[3,1] = frameTranslation.world.y_label.R.T[3,1];
//   frameTranslation.world.y_label.cylinders[2].R.T[3,2] = frameTranslation.world.y_label.R.T[3,2];
//   frameTranslation.world.y_label.cylinders[2].R.T[3,3] = frameTranslation.world.y_label.R.T[3,3];
//   frameTranslation.world.y_label.cylinders[2].R.w[1] = frameTranslation.world.y_label.R.w[1];
//   frameTranslation.world.y_label.cylinders[2].R.w[2] = frameTranslation.world.y_label.R.w[2];
//   frameTranslation.world.y_label.cylinders[2].R.w[3] = frameTranslation.world.y_label.R.w[3];
//   frameTranslation.world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.y_label.cylinders[2].shapeType);
//   frameTranslation.world.y_label.cylinders[2].rxvisobj[1] = frameTranslation.world.y_label.cylinders[2].R.T[1,1] * frameTranslation.world.y_label.cylinders[2].e_x[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,1] * frameTranslation.world.y_label.cylinders[2].e_x[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,1] * frameTranslation.world.y_label.cylinders[2].e_x[3];
//   frameTranslation.world.y_label.cylinders[2].rxvisobj[2] = frameTranslation.world.y_label.cylinders[2].R.T[1,2] * frameTranslation.world.y_label.cylinders[2].e_x[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,2] * frameTranslation.world.y_label.cylinders[2].e_x[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,2] * frameTranslation.world.y_label.cylinders[2].e_x[3];
//   frameTranslation.world.y_label.cylinders[2].rxvisobj[3] = frameTranslation.world.y_label.cylinders[2].R.T[1,3] * frameTranslation.world.y_label.cylinders[2].e_x[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,3] * frameTranslation.world.y_label.cylinders[2].e_x[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,3] * frameTranslation.world.y_label.cylinders[2].e_x[3];
//   frameTranslation.world.y_label.cylinders[2].ryvisobj[1] = frameTranslation.world.y_label.cylinders[2].R.T[1,1] * frameTranslation.world.y_label.cylinders[2].e_y[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,1] * frameTranslation.world.y_label.cylinders[2].e_y[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,1] * frameTranslation.world.y_label.cylinders[2].e_y[3];
//   frameTranslation.world.y_label.cylinders[2].ryvisobj[2] = frameTranslation.world.y_label.cylinders[2].R.T[1,2] * frameTranslation.world.y_label.cylinders[2].e_y[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,2] * frameTranslation.world.y_label.cylinders[2].e_y[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,2] * frameTranslation.world.y_label.cylinders[2].e_y[3];
//   frameTranslation.world.y_label.cylinders[2].ryvisobj[3] = frameTranslation.world.y_label.cylinders[2].R.T[1,3] * frameTranslation.world.y_label.cylinders[2].e_y[1] + frameTranslation.world.y_label.cylinders[2].R.T[2,3] * frameTranslation.world.y_label.cylinders[2].e_y[2] + frameTranslation.world.y_label.cylinders[2].R.T[3,3] * frameTranslation.world.y_label.cylinders[2].e_y[3];
//   frameTranslation.world.y_label.cylinders[2].rvisobj = frameTranslation.world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.y_label.cylinders[2].R.T[1,1],frameTranslation.world.y_label.cylinders[2].R.T[1,2],frameTranslation.world.y_label.cylinders[2].R.T[1,3]},{frameTranslation.world.y_label.cylinders[2].R.T[2,1],frameTranslation.world.y_label.cylinders[2].R.T[2,2],frameTranslation.world.y_label.cylinders[2].R.T[2,3]},{frameTranslation.world.y_label.cylinders[2].R.T[3,1],frameTranslation.world.y_label.cylinders[2].R.T[3,2],frameTranslation.world.y_label.cylinders[2].R.T[3,3]}},{frameTranslation.world.y_label.cylinders[2].r_shape[1],frameTranslation.world.y_label.cylinders[2].r_shape[2],frameTranslation.world.y_label.cylinders[2].r_shape[3]});
//   frameTranslation.world.y_label.cylinders[2].size[1] = frameTranslation.world.y_label.cylinders[2].length;
//   frameTranslation.world.y_label.cylinders[2].size[2] = frameTranslation.world.y_label.cylinders[2].width;
//   frameTranslation.world.y_label.cylinders[2].size[3] = frameTranslation.world.y_label.cylinders[2].height;
//   frameTranslation.world.y_label.cylinders[2].Material = PackMaterial(frameTranslation.world.y_label.cylinders[2].color[1] / 255.0,frameTranslation.world.y_label.cylinders[2].color[2] / 255.0,frameTranslation.world.y_label.cylinders[2].color[3] / 255.0,frameTranslation.world.y_label.cylinders[2].specularCoefficient);
//   frameTranslation.world.y_label.cylinders[2].Extra = frameTranslation.world.y_label.cylinders[2].extra;
//   frameTranslation.world.z_label.cylinders[1].R.T[1,1] = frameTranslation.world.z_label.R.T[1,1];
//   frameTranslation.world.z_label.cylinders[1].R.T[1,2] = frameTranslation.world.z_label.R.T[1,2];
//   frameTranslation.world.z_label.cylinders[1].R.T[1,3] = frameTranslation.world.z_label.R.T[1,3];
//   frameTranslation.world.z_label.cylinders[1].R.T[2,1] = frameTranslation.world.z_label.R.T[2,1];
//   frameTranslation.world.z_label.cylinders[1].R.T[2,2] = frameTranslation.world.z_label.R.T[2,2];
//   frameTranslation.world.z_label.cylinders[1].R.T[2,3] = frameTranslation.world.z_label.R.T[2,3];
//   frameTranslation.world.z_label.cylinders[1].R.T[3,1] = frameTranslation.world.z_label.R.T[3,1];
//   frameTranslation.world.z_label.cylinders[1].R.T[3,2] = frameTranslation.world.z_label.R.T[3,2];
//   frameTranslation.world.z_label.cylinders[1].R.T[3,3] = frameTranslation.world.z_label.R.T[3,3];
//   frameTranslation.world.z_label.cylinders[1].R.w[1] = frameTranslation.world.z_label.R.w[1];
//   frameTranslation.world.z_label.cylinders[1].R.w[2] = frameTranslation.world.z_label.R.w[2];
//   frameTranslation.world.z_label.cylinders[1].R.w[3] = frameTranslation.world.z_label.R.w[3];
//   frameTranslation.world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.z_label.cylinders[1].shapeType);
//   frameTranslation.world.z_label.cylinders[1].rxvisobj[1] = frameTranslation.world.z_label.cylinders[1].R.T[1,1] * frameTranslation.world.z_label.cylinders[1].e_x[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,1] * frameTranslation.world.z_label.cylinders[1].e_x[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,1] * frameTranslation.world.z_label.cylinders[1].e_x[3];
//   frameTranslation.world.z_label.cylinders[1].rxvisobj[2] = frameTranslation.world.z_label.cylinders[1].R.T[1,2] * frameTranslation.world.z_label.cylinders[1].e_x[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,2] * frameTranslation.world.z_label.cylinders[1].e_x[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,2] * frameTranslation.world.z_label.cylinders[1].e_x[3];
//   frameTranslation.world.z_label.cylinders[1].rxvisobj[3] = frameTranslation.world.z_label.cylinders[1].R.T[1,3] * frameTranslation.world.z_label.cylinders[1].e_x[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,3] * frameTranslation.world.z_label.cylinders[1].e_x[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,3] * frameTranslation.world.z_label.cylinders[1].e_x[3];
//   frameTranslation.world.z_label.cylinders[1].ryvisobj[1] = frameTranslation.world.z_label.cylinders[1].R.T[1,1] * frameTranslation.world.z_label.cylinders[1].e_y[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,1] * frameTranslation.world.z_label.cylinders[1].e_y[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,1] * frameTranslation.world.z_label.cylinders[1].e_y[3];
//   frameTranslation.world.z_label.cylinders[1].ryvisobj[2] = frameTranslation.world.z_label.cylinders[1].R.T[1,2] * frameTranslation.world.z_label.cylinders[1].e_y[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,2] * frameTranslation.world.z_label.cylinders[1].e_y[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,2] * frameTranslation.world.z_label.cylinders[1].e_y[3];
//   frameTranslation.world.z_label.cylinders[1].ryvisobj[3] = frameTranslation.world.z_label.cylinders[1].R.T[1,3] * frameTranslation.world.z_label.cylinders[1].e_y[1] + frameTranslation.world.z_label.cylinders[1].R.T[2,3] * frameTranslation.world.z_label.cylinders[1].e_y[2] + frameTranslation.world.z_label.cylinders[1].R.T[3,3] * frameTranslation.world.z_label.cylinders[1].e_y[3];
//   frameTranslation.world.z_label.cylinders[1].rvisobj = frameTranslation.world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.cylinders[1].R.T[1,1],frameTranslation.world.z_label.cylinders[1].R.T[1,2],frameTranslation.world.z_label.cylinders[1].R.T[1,3]},{frameTranslation.world.z_label.cylinders[1].R.T[2,1],frameTranslation.world.z_label.cylinders[1].R.T[2,2],frameTranslation.world.z_label.cylinders[1].R.T[2,3]},{frameTranslation.world.z_label.cylinders[1].R.T[3,1],frameTranslation.world.z_label.cylinders[1].R.T[3,2],frameTranslation.world.z_label.cylinders[1].R.T[3,3]}},{frameTranslation.world.z_label.cylinders[1].r_shape[1],frameTranslation.world.z_label.cylinders[1].r_shape[2],frameTranslation.world.z_label.cylinders[1].r_shape[3]});
//   frameTranslation.world.z_label.cylinders[1].size[1] = frameTranslation.world.z_label.cylinders[1].length;
//   frameTranslation.world.z_label.cylinders[1].size[2] = frameTranslation.world.z_label.cylinders[1].width;
//   frameTranslation.world.z_label.cylinders[1].size[3] = frameTranslation.world.z_label.cylinders[1].height;
//   frameTranslation.world.z_label.cylinders[1].Material = PackMaterial(frameTranslation.world.z_label.cylinders[1].color[1] / 255.0,frameTranslation.world.z_label.cylinders[1].color[2] / 255.0,frameTranslation.world.z_label.cylinders[1].color[3] / 255.0,frameTranslation.world.z_label.cylinders[1].specularCoefficient);
//   frameTranslation.world.z_label.cylinders[1].Extra = frameTranslation.world.z_label.cylinders[1].extra;
//   frameTranslation.world.z_label.cylinders[2].R.T[1,1] = frameTranslation.world.z_label.R.T[1,1];
//   frameTranslation.world.z_label.cylinders[2].R.T[1,2] = frameTranslation.world.z_label.R.T[1,2];
//   frameTranslation.world.z_label.cylinders[2].R.T[1,3] = frameTranslation.world.z_label.R.T[1,3];
//   frameTranslation.world.z_label.cylinders[2].R.T[2,1] = frameTranslation.world.z_label.R.T[2,1];
//   frameTranslation.world.z_label.cylinders[2].R.T[2,2] = frameTranslation.world.z_label.R.T[2,2];
//   frameTranslation.world.z_label.cylinders[2].R.T[2,3] = frameTranslation.world.z_label.R.T[2,3];
//   frameTranslation.world.z_label.cylinders[2].R.T[3,1] = frameTranslation.world.z_label.R.T[3,1];
//   frameTranslation.world.z_label.cylinders[2].R.T[3,2] = frameTranslation.world.z_label.R.T[3,2];
//   frameTranslation.world.z_label.cylinders[2].R.T[3,3] = frameTranslation.world.z_label.R.T[3,3];
//   frameTranslation.world.z_label.cylinders[2].R.w[1] = frameTranslation.world.z_label.R.w[1];
//   frameTranslation.world.z_label.cylinders[2].R.w[2] = frameTranslation.world.z_label.R.w[2];
//   frameTranslation.world.z_label.cylinders[2].R.w[3] = frameTranslation.world.z_label.R.w[3];
//   frameTranslation.world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.z_label.cylinders[2].shapeType);
//   frameTranslation.world.z_label.cylinders[2].rxvisobj[1] = frameTranslation.world.z_label.cylinders[2].R.T[1,1] * frameTranslation.world.z_label.cylinders[2].e_x[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,1] * frameTranslation.world.z_label.cylinders[2].e_x[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,1] * frameTranslation.world.z_label.cylinders[2].e_x[3];
//   frameTranslation.world.z_label.cylinders[2].rxvisobj[2] = frameTranslation.world.z_label.cylinders[2].R.T[1,2] * frameTranslation.world.z_label.cylinders[2].e_x[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,2] * frameTranslation.world.z_label.cylinders[2].e_x[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,2] * frameTranslation.world.z_label.cylinders[2].e_x[3];
//   frameTranslation.world.z_label.cylinders[2].rxvisobj[3] = frameTranslation.world.z_label.cylinders[2].R.T[1,3] * frameTranslation.world.z_label.cylinders[2].e_x[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,3] * frameTranslation.world.z_label.cylinders[2].e_x[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,3] * frameTranslation.world.z_label.cylinders[2].e_x[3];
//   frameTranslation.world.z_label.cylinders[2].ryvisobj[1] = frameTranslation.world.z_label.cylinders[2].R.T[1,1] * frameTranslation.world.z_label.cylinders[2].e_y[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,1] * frameTranslation.world.z_label.cylinders[2].e_y[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,1] * frameTranslation.world.z_label.cylinders[2].e_y[3];
//   frameTranslation.world.z_label.cylinders[2].ryvisobj[2] = frameTranslation.world.z_label.cylinders[2].R.T[1,2] * frameTranslation.world.z_label.cylinders[2].e_y[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,2] * frameTranslation.world.z_label.cylinders[2].e_y[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,2] * frameTranslation.world.z_label.cylinders[2].e_y[3];
//   frameTranslation.world.z_label.cylinders[2].ryvisobj[3] = frameTranslation.world.z_label.cylinders[2].R.T[1,3] * frameTranslation.world.z_label.cylinders[2].e_y[1] + frameTranslation.world.z_label.cylinders[2].R.T[2,3] * frameTranslation.world.z_label.cylinders[2].e_y[2] + frameTranslation.world.z_label.cylinders[2].R.T[3,3] * frameTranslation.world.z_label.cylinders[2].e_y[3];
//   frameTranslation.world.z_label.cylinders[2].rvisobj = frameTranslation.world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.cylinders[2].R.T[1,1],frameTranslation.world.z_label.cylinders[2].R.T[1,2],frameTranslation.world.z_label.cylinders[2].R.T[1,3]},{frameTranslation.world.z_label.cylinders[2].R.T[2,1],frameTranslation.world.z_label.cylinders[2].R.T[2,2],frameTranslation.world.z_label.cylinders[2].R.T[2,3]},{frameTranslation.world.z_label.cylinders[2].R.T[3,1],frameTranslation.world.z_label.cylinders[2].R.T[3,2],frameTranslation.world.z_label.cylinders[2].R.T[3,3]}},{frameTranslation.world.z_label.cylinders[2].r_shape[1],frameTranslation.world.z_label.cylinders[2].r_shape[2],frameTranslation.world.z_label.cylinders[2].r_shape[3]});
//   frameTranslation.world.z_label.cylinders[2].size[1] = frameTranslation.world.z_label.cylinders[2].length;
//   frameTranslation.world.z_label.cylinders[2].size[2] = frameTranslation.world.z_label.cylinders[2].width;
//   frameTranslation.world.z_label.cylinders[2].size[3] = frameTranslation.world.z_label.cylinders[2].height;
//   frameTranslation.world.z_label.cylinders[2].Material = PackMaterial(frameTranslation.world.z_label.cylinders[2].color[1] / 255.0,frameTranslation.world.z_label.cylinders[2].color[2] / 255.0,frameTranslation.world.z_label.cylinders[2].color[3] / 255.0,frameTranslation.world.z_label.cylinders[2].specularCoefficient);
//   frameTranslation.world.z_label.cylinders[2].Extra = frameTranslation.world.z_label.cylinders[2].extra;
//   frameTranslation.world.z_label.cylinders[3].R.T[1,1] = frameTranslation.world.z_label.R.T[1,1];
//   frameTranslation.world.z_label.cylinders[3].R.T[1,2] = frameTranslation.world.z_label.R.T[1,2];
//   frameTranslation.world.z_label.cylinders[3].R.T[1,3] = frameTranslation.world.z_label.R.T[1,3];
//   frameTranslation.world.z_label.cylinders[3].R.T[2,1] = frameTranslation.world.z_label.R.T[2,1];
//   frameTranslation.world.z_label.cylinders[3].R.T[2,2] = frameTranslation.world.z_label.R.T[2,2];
//   frameTranslation.world.z_label.cylinders[3].R.T[2,3] = frameTranslation.world.z_label.R.T[2,3];
//   frameTranslation.world.z_label.cylinders[3].R.T[3,1] = frameTranslation.world.z_label.R.T[3,1];
//   frameTranslation.world.z_label.cylinders[3].R.T[3,2] = frameTranslation.world.z_label.R.T[3,2];
//   frameTranslation.world.z_label.cylinders[3].R.T[3,3] = frameTranslation.world.z_label.R.T[3,3];
//   frameTranslation.world.z_label.cylinders[3].R.w[1] = frameTranslation.world.z_label.R.w[1];
//   frameTranslation.world.z_label.cylinders[3].R.w[2] = frameTranslation.world.z_label.R.w[2];
//   frameTranslation.world.z_label.cylinders[3].R.w[3] = frameTranslation.world.z_label.R.w[3];
//   frameTranslation.world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.world.z_label.cylinders[3].shapeType);
//   frameTranslation.world.z_label.cylinders[3].rxvisobj[1] = frameTranslation.world.z_label.cylinders[3].R.T[1,1] * frameTranslation.world.z_label.cylinders[3].e_x[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,1] * frameTranslation.world.z_label.cylinders[3].e_x[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,1] * frameTranslation.world.z_label.cylinders[3].e_x[3];
//   frameTranslation.world.z_label.cylinders[3].rxvisobj[2] = frameTranslation.world.z_label.cylinders[3].R.T[1,2] * frameTranslation.world.z_label.cylinders[3].e_x[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,2] * frameTranslation.world.z_label.cylinders[3].e_x[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,2] * frameTranslation.world.z_label.cylinders[3].e_x[3];
//   frameTranslation.world.z_label.cylinders[3].rxvisobj[3] = frameTranslation.world.z_label.cylinders[3].R.T[1,3] * frameTranslation.world.z_label.cylinders[3].e_x[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,3] * frameTranslation.world.z_label.cylinders[3].e_x[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,3] * frameTranslation.world.z_label.cylinders[3].e_x[3];
//   frameTranslation.world.z_label.cylinders[3].ryvisobj[1] = frameTranslation.world.z_label.cylinders[3].R.T[1,1] * frameTranslation.world.z_label.cylinders[3].e_y[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,1] * frameTranslation.world.z_label.cylinders[3].e_y[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,1] * frameTranslation.world.z_label.cylinders[3].e_y[3];
//   frameTranslation.world.z_label.cylinders[3].ryvisobj[2] = frameTranslation.world.z_label.cylinders[3].R.T[1,2] * frameTranslation.world.z_label.cylinders[3].e_y[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,2] * frameTranslation.world.z_label.cylinders[3].e_y[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,2] * frameTranslation.world.z_label.cylinders[3].e_y[3];
//   frameTranslation.world.z_label.cylinders[3].ryvisobj[3] = frameTranslation.world.z_label.cylinders[3].R.T[1,3] * frameTranslation.world.z_label.cylinders[3].e_y[1] + frameTranslation.world.z_label.cylinders[3].R.T[2,3] * frameTranslation.world.z_label.cylinders[3].e_y[2] + frameTranslation.world.z_label.cylinders[3].R.T[3,3] * frameTranslation.world.z_label.cylinders[3].e_y[3];
//   frameTranslation.world.z_label.cylinders[3].rvisobj = frameTranslation.world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.world.z_label.cylinders[3].R.T[1,1],frameTranslation.world.z_label.cylinders[3].R.T[1,2],frameTranslation.world.z_label.cylinders[3].R.T[1,3]},{frameTranslation.world.z_label.cylinders[3].R.T[2,1],frameTranslation.world.z_label.cylinders[3].R.T[2,2],frameTranslation.world.z_label.cylinders[3].R.T[2,3]},{frameTranslation.world.z_label.cylinders[3].R.T[3,1],frameTranslation.world.z_label.cylinders[3].R.T[3,2],frameTranslation.world.z_label.cylinders[3].R.T[3,3]}},{frameTranslation.world.z_label.cylinders[3].r_shape[1],frameTranslation.world.z_label.cylinders[3].r_shape[2],frameTranslation.world.z_label.cylinders[3].r_shape[3]});
//   frameTranslation.world.z_label.cylinders[3].size[1] = frameTranslation.world.z_label.cylinders[3].length;
//   frameTranslation.world.z_label.cylinders[3].size[2] = frameTranslation.world.z_label.cylinders[3].width;
//   frameTranslation.world.z_label.cylinders[3].size[3] = frameTranslation.world.z_label.cylinders[3].height;
//   frameTranslation.world.z_label.cylinders[3].Material = PackMaterial(frameTranslation.world.z_label.cylinders[3].color[1] / 255.0,frameTranslation.world.z_label.cylinders[3].color[2] / 255.0,frameTranslation.world.z_label.cylinders[3].color[3] / 255.0,frameTranslation.world.z_label.cylinders[3].specularCoefficient);
//   frameTranslation.world.z_label.cylinders[3].Extra = frameTranslation.world.z_label.cylinders[3].extra;
//   assert(Modelica.Math.Vectors.length({frameTranslation.world.n[1],frameTranslation.world.n[2],frameTranslation.world.n[3]}) > 1e-10,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   frameTranslation.world.frame_b.r_0[1] = 0.0;
//   frameTranslation.world.frame_b.r_0[2] = 0.0;
//   frameTranslation.world.frame_b.r_0[3] = 0.0;
//   frameTranslation.world.frame_b.R.w[3] = 0.0;
//   frameTranslation.world.frame_b.R.w[2] = 0.0;
//   frameTranslation.world.frame_b.R.w[1] = 0.0;
//   frameTranslation.world.frame_b.R.T[3,3] = 1.0;
//   frameTranslation.world.frame_b.R.T[3,2] = 0.0;
//   frameTranslation.world.frame_b.R.T[3,1] = 0.0;
//   frameTranslation.world.frame_b.R.T[2,3] = 0.0;
//   frameTranslation.world.frame_b.R.T[2,2] = 1.0;
//   frameTranslation.world.frame_b.R.T[2,1] = 0.0;
//   frameTranslation.world.frame_b.R.T[1,3] = 0.0;
//   frameTranslation.world.frame_b.R.T[1,2] = 0.0;
//   frameTranslation.world.frame_b.R.T[1,1] = 1.0;
//   frameTranslation.shape.R.T[1,1] = frameTranslation.frame_a.R.T[1,1];
//   frameTranslation.shape.R.T[1,2] = frameTranslation.frame_a.R.T[1,2];
//   frameTranslation.shape.R.T[1,3] = frameTranslation.frame_a.R.T[1,3];
//   frameTranslation.shape.R.T[2,1] = frameTranslation.frame_a.R.T[2,1];
//   frameTranslation.shape.R.T[2,2] = frameTranslation.frame_a.R.T[2,2];
//   frameTranslation.shape.R.T[2,3] = frameTranslation.frame_a.R.T[2,3];
//   frameTranslation.shape.R.T[3,1] = frameTranslation.frame_a.R.T[3,1];
//   frameTranslation.shape.R.T[3,2] = frameTranslation.frame_a.R.T[3,2];
//   frameTranslation.shape.R.T[3,3] = frameTranslation.frame_a.R.T[3,3];
//   frameTranslation.shape.R.w[1] = frameTranslation.frame_a.R.w[1];
//   frameTranslation.shape.R.w[2] = frameTranslation.frame_a.R.w[2];
//   frameTranslation.shape.R.w[3] = frameTranslation.frame_a.R.w[3];
//   frameTranslation.shape.Form = 9.87e+25 + 1e+20 * PackShape(frameTranslation.shape.shapeType);
//   frameTranslation.shape.rxvisobj[1] = frameTranslation.shape.R.T[1,1] * frameTranslation.shape.e_x[1] + frameTranslation.shape.R.T[2,1] * frameTranslation.shape.e_x[2] + frameTranslation.shape.R.T[3,1] * frameTranslation.shape.e_x[3];
//   frameTranslation.shape.rxvisobj[2] = frameTranslation.shape.R.T[1,2] * frameTranslation.shape.e_x[1] + frameTranslation.shape.R.T[2,2] * frameTranslation.shape.e_x[2] + frameTranslation.shape.R.T[3,2] * frameTranslation.shape.e_x[3];
//   frameTranslation.shape.rxvisobj[3] = frameTranslation.shape.R.T[1,3] * frameTranslation.shape.e_x[1] + frameTranslation.shape.R.T[2,3] * frameTranslation.shape.e_x[2] + frameTranslation.shape.R.T[3,3] * frameTranslation.shape.e_x[3];
//   frameTranslation.shape.ryvisobj[1] = frameTranslation.shape.R.T[1,1] * frameTranslation.shape.e_y[1] + frameTranslation.shape.R.T[2,1] * frameTranslation.shape.e_y[2] + frameTranslation.shape.R.T[3,1] * frameTranslation.shape.e_y[3];
//   frameTranslation.shape.ryvisobj[2] = frameTranslation.shape.R.T[1,2] * frameTranslation.shape.e_y[1] + frameTranslation.shape.R.T[2,2] * frameTranslation.shape.e_y[2] + frameTranslation.shape.R.T[3,2] * frameTranslation.shape.e_y[3];
//   frameTranslation.shape.ryvisobj[3] = frameTranslation.shape.R.T[1,3] * frameTranslation.shape.e_y[1] + frameTranslation.shape.R.T[2,3] * frameTranslation.shape.e_y[2] + frameTranslation.shape.R.T[3,3] * frameTranslation.shape.e_y[3];
//   frameTranslation.shape.rvisobj = frameTranslation.shape.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{frameTranslation.shape.R.T[1,1],frameTranslation.shape.R.T[1,2],frameTranslation.shape.R.T[1,3]},{frameTranslation.shape.R.T[2,1],frameTranslation.shape.R.T[2,2],frameTranslation.shape.R.T[2,3]},{frameTranslation.shape.R.T[3,1],frameTranslation.shape.R.T[3,2],frameTranslation.shape.R.T[3,3]}},{frameTranslation.shape.r_shape[1],frameTranslation.shape.r_shape[2],frameTranslation.shape.r_shape[3]});
//   frameTranslation.shape.size[1] = frameTranslation.shape.length;
//   frameTranslation.shape.size[2] = frameTranslation.shape.width;
//   frameTranslation.shape.size[3] = frameTranslation.shape.height;
//   frameTranslation.shape.Material = PackMaterial(frameTranslation.shape.color[1] / 255.0,frameTranslation.shape.color[2] / 255.0,frameTranslation.shape.color[3] / 255.0,frameTranslation.shape.specularCoefficient);
//   frameTranslation.shape.Extra = frameTranslation.shape.extra;
//   assert(true,\"Neither connector frame_a nor frame_b of FixedTranslation object is connected\");
//   frameTranslation.frame_b.r_0 = frameTranslation.frame_a.r_0 + Modelica.Mechanics.MultiBody.Frames.resolve1(frameTranslation.frame_a.R,{frameTranslation.r[1],frameTranslation.r[2],frameTranslation.r[3]});
//   frameTranslation.frame_b.R.T[1,1] = frameTranslation.frame_a.R.T[1,1];
//   frameTranslation.frame_b.R.T[1,2] = frameTranslation.frame_a.R.T[1,2];
//   frameTranslation.frame_b.R.T[1,3] = frameTranslation.frame_a.R.T[1,3];
//   frameTranslation.frame_b.R.T[2,1] = frameTranslation.frame_a.R.T[2,1];
//   frameTranslation.frame_b.R.T[2,2] = frameTranslation.frame_a.R.T[2,2];
//   frameTranslation.frame_b.R.T[2,3] = frameTranslation.frame_a.R.T[2,3];
//   frameTranslation.frame_b.R.T[3,1] = frameTranslation.frame_a.R.T[3,1];
//   frameTranslation.frame_b.R.T[3,2] = frameTranslation.frame_a.R.T[3,2];
//   frameTranslation.frame_b.R.T[3,3] = frameTranslation.frame_a.R.T[3,3];
//   frameTranslation.frame_b.R.w[1] = frameTranslation.frame_a.R.w[1];
//   frameTranslation.frame_b.R.w[2] = frameTranslation.frame_a.R.w[2];
//   frameTranslation.frame_b.R.w[3] = frameTranslation.frame_a.R.w[3];
//   0.0 = frameTranslation.frame_a.f[1] + frameTranslation.frame_b.f[1];
//   0.0 = frameTranslation.frame_a.f[2] + frameTranslation.frame_b.f[2];
//   0.0 = frameTranslation.frame_a.f[3] + frameTranslation.frame_b.f[3];
//   0.0 = frameTranslation.frame_a.t[1] + frameTranslation.frame_b.t[1] + (frameTranslation.r[2] * frameTranslation.frame_b.f[3] - frameTranslation.r[3] * frameTranslation.frame_b.f[2]);
//   0.0 = frameTranslation.frame_a.t[2] + frameTranslation.frame_b.t[2] + (frameTranslation.r[3] * frameTranslation.frame_b.f[1] - frameTranslation.r[1] * frameTranslation.frame_b.f[3]);
//   0.0 = frameTranslation.frame_a.t[3] + frameTranslation.frame_b.t[3] + (frameTranslation.r[1] * frameTranslation.frame_b.f[2] - frameTranslation.r[2] * frameTranslation.frame_b.f[1]);
//   world.x_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(world.x_arrowLine.shapeType);
//   world.x_arrowLine.rxvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.rxvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_x[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_x[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_x[3];
//   world.x_arrowLine.ryvisobj[1] = world.x_arrowLine.R.T[1,1] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,1] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,1] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[2] = world.x_arrowLine.R.T[1,2] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,2] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,2] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.ryvisobj[3] = world.x_arrowLine.R.T[1,3] * world.x_arrowLine.e_y[1] + world.x_arrowLine.R.T[2,3] * world.x_arrowLine.e_y[2] + world.x_arrowLine.R.T[3,3] * world.x_arrowLine.e_y[3];
//   world.x_arrowLine.rvisobj = world.x_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowLine.R.T[1,1],world.x_arrowLine.R.T[1,2],world.x_arrowLine.R.T[1,3]},{world.x_arrowLine.R.T[2,1],world.x_arrowLine.R.T[2,2],world.x_arrowLine.R.T[2,3]},{world.x_arrowLine.R.T[3,1],world.x_arrowLine.R.T[3,2],world.x_arrowLine.R.T[3,3]}},{world.x_arrowLine.r_shape[1],world.x_arrowLine.r_shape[2],world.x_arrowLine.r_shape[3]});
//   world.x_arrowLine.size[1] = world.x_arrowLine.length;
//   world.x_arrowLine.size[2] = world.x_arrowLine.width;
//   world.x_arrowLine.size[3] = world.x_arrowLine.height;
//   world.x_arrowLine.Material = PackMaterial(world.x_arrowLine.color[1] / 255.0,world.x_arrowLine.color[2] / 255.0,world.x_arrowLine.color[3] / 255.0,world.x_arrowLine.specularCoefficient);
//   world.x_arrowLine.Extra = world.x_arrowLine.extra;
//   world.x_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(world.x_arrowHead.shapeType);
//   world.x_arrowHead.rxvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.rxvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_x[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_x[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_x[3];
//   world.x_arrowHead.ryvisobj[1] = world.x_arrowHead.R.T[1,1] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,1] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,1] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[2] = world.x_arrowHead.R.T[1,2] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,2] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,2] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.ryvisobj[3] = world.x_arrowHead.R.T[1,3] * world.x_arrowHead.e_y[1] + world.x_arrowHead.R.T[2,3] * world.x_arrowHead.e_y[2] + world.x_arrowHead.R.T[3,3] * world.x_arrowHead.e_y[3];
//   world.x_arrowHead.rvisobj = world.x_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_arrowHead.R.T[1,1],world.x_arrowHead.R.T[1,2],world.x_arrowHead.R.T[1,3]},{world.x_arrowHead.R.T[2,1],world.x_arrowHead.R.T[2,2],world.x_arrowHead.R.T[2,3]},{world.x_arrowHead.R.T[3,1],world.x_arrowHead.R.T[3,2],world.x_arrowHead.R.T[3,3]}},{world.x_arrowHead.r_shape[1],world.x_arrowHead.r_shape[2],world.x_arrowHead.r_shape[3]});
//   world.x_arrowHead.size[1] = world.x_arrowHead.length;
//   world.x_arrowHead.size[2] = world.x_arrowHead.width;
//   world.x_arrowHead.size[3] = world.x_arrowHead.height;
//   world.x_arrowHead.Material = PackMaterial(world.x_arrowHead.color[1] / 255.0,world.x_arrowHead.color[2] / 255.0,world.x_arrowHead.color[3] / 255.0,world.x_arrowHead.specularCoefficient);
//   world.x_arrowHead.Extra = world.x_arrowHead.extra;
//   world.y_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(world.y_arrowLine.shapeType);
//   world.y_arrowLine.rxvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.rxvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_x[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_x[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_x[3];
//   world.y_arrowLine.ryvisobj[1] = world.y_arrowLine.R.T[1,1] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,1] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,1] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[2] = world.y_arrowLine.R.T[1,2] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,2] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,2] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.ryvisobj[3] = world.y_arrowLine.R.T[1,3] * world.y_arrowLine.e_y[1] + world.y_arrowLine.R.T[2,3] * world.y_arrowLine.e_y[2] + world.y_arrowLine.R.T[3,3] * world.y_arrowLine.e_y[3];
//   world.y_arrowLine.rvisobj = world.y_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowLine.R.T[1,1],world.y_arrowLine.R.T[1,2],world.y_arrowLine.R.T[1,3]},{world.y_arrowLine.R.T[2,1],world.y_arrowLine.R.T[2,2],world.y_arrowLine.R.T[2,3]},{world.y_arrowLine.R.T[3,1],world.y_arrowLine.R.T[3,2],world.y_arrowLine.R.T[3,3]}},{world.y_arrowLine.r_shape[1],world.y_arrowLine.r_shape[2],world.y_arrowLine.r_shape[3]});
//   world.y_arrowLine.size[1] = world.y_arrowLine.length;
//   world.y_arrowLine.size[2] = world.y_arrowLine.width;
//   world.y_arrowLine.size[3] = world.y_arrowLine.height;
//   world.y_arrowLine.Material = PackMaterial(world.y_arrowLine.color[1] / 255.0,world.y_arrowLine.color[2] / 255.0,world.y_arrowLine.color[3] / 255.0,world.y_arrowLine.specularCoefficient);
//   world.y_arrowLine.Extra = world.y_arrowLine.extra;
//   world.y_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(world.y_arrowHead.shapeType);
//   world.y_arrowHead.rxvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.rxvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_x[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_x[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_x[3];
//   world.y_arrowHead.ryvisobj[1] = world.y_arrowHead.R.T[1,1] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,1] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,1] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[2] = world.y_arrowHead.R.T[1,2] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,2] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,2] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.ryvisobj[3] = world.y_arrowHead.R.T[1,3] * world.y_arrowHead.e_y[1] + world.y_arrowHead.R.T[2,3] * world.y_arrowHead.e_y[2] + world.y_arrowHead.R.T[3,3] * world.y_arrowHead.e_y[3];
//   world.y_arrowHead.rvisobj = world.y_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_arrowHead.R.T[1,1],world.y_arrowHead.R.T[1,2],world.y_arrowHead.R.T[1,3]},{world.y_arrowHead.R.T[2,1],world.y_arrowHead.R.T[2,2],world.y_arrowHead.R.T[2,3]},{world.y_arrowHead.R.T[3,1],world.y_arrowHead.R.T[3,2],world.y_arrowHead.R.T[3,3]}},{world.y_arrowHead.r_shape[1],world.y_arrowHead.r_shape[2],world.y_arrowHead.r_shape[3]});
//   world.y_arrowHead.size[1] = world.y_arrowHead.length;
//   world.y_arrowHead.size[2] = world.y_arrowHead.width;
//   world.y_arrowHead.size[3] = world.y_arrowHead.height;
//   world.y_arrowHead.Material = PackMaterial(world.y_arrowHead.color[1] / 255.0,world.y_arrowHead.color[2] / 255.0,world.y_arrowHead.color[3] / 255.0,world.y_arrowHead.specularCoefficient);
//   world.y_arrowHead.Extra = world.y_arrowHead.extra;
//   world.z_arrowLine.Form = 9.87e+25 + 1e+20 * PackShape(world.z_arrowLine.shapeType);
//   world.z_arrowLine.rxvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.rxvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_x[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_x[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_x[3];
//   world.z_arrowLine.ryvisobj[1] = world.z_arrowLine.R.T[1,1] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,1] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,1] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[2] = world.z_arrowLine.R.T[1,2] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,2] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,2] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.ryvisobj[3] = world.z_arrowLine.R.T[1,3] * world.z_arrowLine.e_y[1] + world.z_arrowLine.R.T[2,3] * world.z_arrowLine.e_y[2] + world.z_arrowLine.R.T[3,3] * world.z_arrowLine.e_y[3];
//   world.z_arrowLine.rvisobj = world.z_arrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowLine.R.T[1,1],world.z_arrowLine.R.T[1,2],world.z_arrowLine.R.T[1,3]},{world.z_arrowLine.R.T[2,1],world.z_arrowLine.R.T[2,2],world.z_arrowLine.R.T[2,3]},{world.z_arrowLine.R.T[3,1],world.z_arrowLine.R.T[3,2],world.z_arrowLine.R.T[3,3]}},{world.z_arrowLine.r_shape[1],world.z_arrowLine.r_shape[2],world.z_arrowLine.r_shape[3]});
//   world.z_arrowLine.size[1] = world.z_arrowLine.length;
//   world.z_arrowLine.size[2] = world.z_arrowLine.width;
//   world.z_arrowLine.size[3] = world.z_arrowLine.height;
//   world.z_arrowLine.Material = PackMaterial(world.z_arrowLine.color[1] / 255.0,world.z_arrowLine.color[2] / 255.0,world.z_arrowLine.color[3] / 255.0,world.z_arrowLine.specularCoefficient);
//   world.z_arrowLine.Extra = world.z_arrowLine.extra;
//   world.z_arrowHead.Form = 9.87e+25 + 1e+20 * PackShape(world.z_arrowHead.shapeType);
//   world.z_arrowHead.rxvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.rxvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_x[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_x[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_x[3];
//   world.z_arrowHead.ryvisobj[1] = world.z_arrowHead.R.T[1,1] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,1] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,1] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[2] = world.z_arrowHead.R.T[1,2] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,2] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,2] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.ryvisobj[3] = world.z_arrowHead.R.T[1,3] * world.z_arrowHead.e_y[1] + world.z_arrowHead.R.T[2,3] * world.z_arrowHead.e_y[2] + world.z_arrowHead.R.T[3,3] * world.z_arrowHead.e_y[3];
//   world.z_arrowHead.rvisobj = world.z_arrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_arrowHead.R.T[1,1],world.z_arrowHead.R.T[1,2],world.z_arrowHead.R.T[1,3]},{world.z_arrowHead.R.T[2,1],world.z_arrowHead.R.T[2,2],world.z_arrowHead.R.T[2,3]},{world.z_arrowHead.R.T[3,1],world.z_arrowHead.R.T[3,2],world.z_arrowHead.R.T[3,3]}},{world.z_arrowHead.r_shape[1],world.z_arrowHead.r_shape[2],world.z_arrowHead.r_shape[3]});
//   world.z_arrowHead.size[1] = world.z_arrowHead.length;
//   world.z_arrowHead.size[2] = world.z_arrowHead.width;
//   world.z_arrowHead.size[3] = world.z_arrowHead.height;
//   world.z_arrowHead.Material = PackMaterial(world.z_arrowHead.color[1] / 255.0,world.z_arrowHead.color[2] / 255.0,world.z_arrowHead.color[3] / 255.0,world.z_arrowHead.specularCoefficient);
//   world.z_arrowHead.Extra = world.z_arrowHead.extra;
//   world.gravityArrowLine.Form = 9.87e+25 + 1e+20 * PackShape(world.gravityArrowLine.shapeType);
//   world.gravityArrowLine.rxvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.rxvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.rxvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_x[1] + world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_x[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_x[3];
//   world.gravityArrowLine.ryvisobj[1] = world.gravityArrowLine.R.T[1,1] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,1] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,1] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.ryvisobj[2] = world.gravityArrowLine.R.T[1,2] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,2] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,2] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.ryvisobj[3] = world.gravityArrowLine.R.T[1,3] * world.gravityArrowLine.e_y[1] + world.gravityArrowLine.R.T[2,3] * world.gravityArrowLine.e_y[2] + world.gravityArrowLine.R.T[3,3] * world.gravityArrowLine.e_y[3];
//   world.gravityArrowLine.rvisobj = world.gravityArrowLine.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowLine.R.T[1,1],world.gravityArrowLine.R.T[1,2],world.gravityArrowLine.R.T[1,3]},{world.gravityArrowLine.R.T[2,1],world.gravityArrowLine.R.T[2,2],world.gravityArrowLine.R.T[2,3]},{world.gravityArrowLine.R.T[3,1],world.gravityArrowLine.R.T[3,2],world.gravityArrowLine.R.T[3,3]}},{world.gravityArrowLine.r_shape[1],world.gravityArrowLine.r_shape[2],world.gravityArrowLine.r_shape[3]});
//   world.gravityArrowLine.size[1] = world.gravityArrowLine.length;
//   world.gravityArrowLine.size[2] = world.gravityArrowLine.width;
//   world.gravityArrowLine.size[3] = world.gravityArrowLine.height;
//   world.gravityArrowLine.Material = PackMaterial(world.gravityArrowLine.color[1] / 255.0,world.gravityArrowLine.color[2] / 255.0,world.gravityArrowLine.color[3] / 255.0,world.gravityArrowLine.specularCoefficient);
//   world.gravityArrowLine.Extra = world.gravityArrowLine.extra;
//   world.gravityArrowHead.Form = 9.87e+25 + 1e+20 * PackShape(world.gravityArrowHead.shapeType);
//   world.gravityArrowHead.rxvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.rxvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.rxvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_x[1] + world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_x[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_x[3];
//   world.gravityArrowHead.ryvisobj[1] = world.gravityArrowHead.R.T[1,1] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,1] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,1] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.ryvisobj[2] = world.gravityArrowHead.R.T[1,2] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,2] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,2] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.ryvisobj[3] = world.gravityArrowHead.R.T[1,3] * world.gravityArrowHead.e_y[1] + world.gravityArrowHead.R.T[2,3] * world.gravityArrowHead.e_y[2] + world.gravityArrowHead.R.T[3,3] * world.gravityArrowHead.e_y[3];
//   world.gravityArrowHead.rvisobj = world.gravityArrowHead.r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.gravityArrowHead.R.T[1,1],world.gravityArrowHead.R.T[1,2],world.gravityArrowHead.R.T[1,3]},{world.gravityArrowHead.R.T[2,1],world.gravityArrowHead.R.T[2,2],world.gravityArrowHead.R.T[2,3]},{world.gravityArrowHead.R.T[3,1],world.gravityArrowHead.R.T[3,2],world.gravityArrowHead.R.T[3,3]}},{world.gravityArrowHead.r_shape[1],world.gravityArrowHead.r_shape[2],world.gravityArrowHead.r_shape[3]});
//   world.gravityArrowHead.size[1] = world.gravityArrowHead.length;
//   world.gravityArrowHead.size[2] = world.gravityArrowHead.width;
//   world.gravityArrowHead.size[3] = world.gravityArrowHead.height;
//   world.gravityArrowHead.Material = PackMaterial(world.gravityArrowHead.color[1] / 255.0,world.gravityArrowHead.color[2] / 255.0,world.gravityArrowHead.color[3] / 255.0,world.gravityArrowHead.specularCoefficient);
//   world.gravityArrowHead.Extra = world.gravityArrowHead.extra;
//   world.x_label.cylinders[1].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[1].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[1].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[1].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[1].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[1].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[1].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[1].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[1].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[1].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[1].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[1].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(world.x_label.cylinders[1].shapeType);
//   world.x_label.cylinders[1].rxvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].rxvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_x[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_x[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_x[3];
//   world.x_label.cylinders[1].ryvisobj[1] = world.x_label.cylinders[1].R.T[1,1] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,1] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,1] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[2] = world.x_label.cylinders[1].R.T[1,2] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,2] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,2] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].ryvisobj[3] = world.x_label.cylinders[1].R.T[1,3] * world.x_label.cylinders[1].e_y[1] + world.x_label.cylinders[1].R.T[2,3] * world.x_label.cylinders[1].e_y[2] + world.x_label.cylinders[1].R.T[3,3] * world.x_label.cylinders[1].e_y[3];
//   world.x_label.cylinders[1].rvisobj = world.x_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[1].R.T[1,1],world.x_label.cylinders[1].R.T[1,2],world.x_label.cylinders[1].R.T[1,3]},{world.x_label.cylinders[1].R.T[2,1],world.x_label.cylinders[1].R.T[2,2],world.x_label.cylinders[1].R.T[2,3]},{world.x_label.cylinders[1].R.T[3,1],world.x_label.cylinders[1].R.T[3,2],world.x_label.cylinders[1].R.T[3,3]}},{world.x_label.cylinders[1].r_shape[1],world.x_label.cylinders[1].r_shape[2],world.x_label.cylinders[1].r_shape[3]});
//   world.x_label.cylinders[1].size[1] = world.x_label.cylinders[1].length;
//   world.x_label.cylinders[1].size[2] = world.x_label.cylinders[1].width;
//   world.x_label.cylinders[1].size[3] = world.x_label.cylinders[1].height;
//   world.x_label.cylinders[1].Material = PackMaterial(world.x_label.cylinders[1].color[1] / 255.0,world.x_label.cylinders[1].color[2] / 255.0,world.x_label.cylinders[1].color[3] / 255.0,world.x_label.cylinders[1].specularCoefficient);
//   world.x_label.cylinders[1].Extra = world.x_label.cylinders[1].extra;
//   world.x_label.cylinders[2].R.T[1,1] = world.x_label.R.T[1,1];
//   world.x_label.cylinders[2].R.T[1,2] = world.x_label.R.T[1,2];
//   world.x_label.cylinders[2].R.T[1,3] = world.x_label.R.T[1,3];
//   world.x_label.cylinders[2].R.T[2,1] = world.x_label.R.T[2,1];
//   world.x_label.cylinders[2].R.T[2,2] = world.x_label.R.T[2,2];
//   world.x_label.cylinders[2].R.T[2,3] = world.x_label.R.T[2,3];
//   world.x_label.cylinders[2].R.T[3,1] = world.x_label.R.T[3,1];
//   world.x_label.cylinders[2].R.T[3,2] = world.x_label.R.T[3,2];
//   world.x_label.cylinders[2].R.T[3,3] = world.x_label.R.T[3,3];
//   world.x_label.cylinders[2].R.w[1] = world.x_label.R.w[1];
//   world.x_label.cylinders[2].R.w[2] = world.x_label.R.w[2];
//   world.x_label.cylinders[2].R.w[3] = world.x_label.R.w[3];
//   world.x_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(world.x_label.cylinders[2].shapeType);
//   world.x_label.cylinders[2].rxvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].rxvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_x[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_x[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_x[3];
//   world.x_label.cylinders[2].ryvisobj[1] = world.x_label.cylinders[2].R.T[1,1] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,1] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,1] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[2] = world.x_label.cylinders[2].R.T[1,2] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,2] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,2] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].ryvisobj[3] = world.x_label.cylinders[2].R.T[1,3] * world.x_label.cylinders[2].e_y[1] + world.x_label.cylinders[2].R.T[2,3] * world.x_label.cylinders[2].e_y[2] + world.x_label.cylinders[2].R.T[3,3] * world.x_label.cylinders[2].e_y[3];
//   world.x_label.cylinders[2].rvisobj = world.x_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.x_label.cylinders[2].R.T[1,1],world.x_label.cylinders[2].R.T[1,2],world.x_label.cylinders[2].R.T[1,3]},{world.x_label.cylinders[2].R.T[2,1],world.x_label.cylinders[2].R.T[2,2],world.x_label.cylinders[2].R.T[2,3]},{world.x_label.cylinders[2].R.T[3,1],world.x_label.cylinders[2].R.T[3,2],world.x_label.cylinders[2].R.T[3,3]}},{world.x_label.cylinders[2].r_shape[1],world.x_label.cylinders[2].r_shape[2],world.x_label.cylinders[2].r_shape[3]});
//   world.x_label.cylinders[2].size[1] = world.x_label.cylinders[2].length;
//   world.x_label.cylinders[2].size[2] = world.x_label.cylinders[2].width;
//   world.x_label.cylinders[2].size[3] = world.x_label.cylinders[2].height;
//   world.x_label.cylinders[2].Material = PackMaterial(world.x_label.cylinders[2].color[1] / 255.0,world.x_label.cylinders[2].color[2] / 255.0,world.x_label.cylinders[2].color[3] / 255.0,world.x_label.cylinders[2].specularCoefficient);
//   world.x_label.cylinders[2].Extra = world.x_label.cylinders[2].extra;
//   world.y_label.cylinders[1].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[1].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[1].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[1].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[1].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[1].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[1].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[1].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[1].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[1].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[1].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[1].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(world.y_label.cylinders[1].shapeType);
//   world.y_label.cylinders[1].rxvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].rxvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_x[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_x[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_x[3];
//   world.y_label.cylinders[1].ryvisobj[1] = world.y_label.cylinders[1].R.T[1,1] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,1] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,1] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[2] = world.y_label.cylinders[1].R.T[1,2] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,2] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,2] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].ryvisobj[3] = world.y_label.cylinders[1].R.T[1,3] * world.y_label.cylinders[1].e_y[1] + world.y_label.cylinders[1].R.T[2,3] * world.y_label.cylinders[1].e_y[2] + world.y_label.cylinders[1].R.T[3,3] * world.y_label.cylinders[1].e_y[3];
//   world.y_label.cylinders[1].rvisobj = world.y_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[1].R.T[1,1],world.y_label.cylinders[1].R.T[1,2],world.y_label.cylinders[1].R.T[1,3]},{world.y_label.cylinders[1].R.T[2,1],world.y_label.cylinders[1].R.T[2,2],world.y_label.cylinders[1].R.T[2,3]},{world.y_label.cylinders[1].R.T[3,1],world.y_label.cylinders[1].R.T[3,2],world.y_label.cylinders[1].R.T[3,3]}},{world.y_label.cylinders[1].r_shape[1],world.y_label.cylinders[1].r_shape[2],world.y_label.cylinders[1].r_shape[3]});
//   world.y_label.cylinders[1].size[1] = world.y_label.cylinders[1].length;
//   world.y_label.cylinders[1].size[2] = world.y_label.cylinders[1].width;
//   world.y_label.cylinders[1].size[3] = world.y_label.cylinders[1].height;
//   world.y_label.cylinders[1].Material = PackMaterial(world.y_label.cylinders[1].color[1] / 255.0,world.y_label.cylinders[1].color[2] / 255.0,world.y_label.cylinders[1].color[3] / 255.0,world.y_label.cylinders[1].specularCoefficient);
//   world.y_label.cylinders[1].Extra = world.y_label.cylinders[1].extra;
//   world.y_label.cylinders[2].R.T[1,1] = world.y_label.R.T[1,1];
//   world.y_label.cylinders[2].R.T[1,2] = world.y_label.R.T[1,2];
//   world.y_label.cylinders[2].R.T[1,3] = world.y_label.R.T[1,3];
//   world.y_label.cylinders[2].R.T[2,1] = world.y_label.R.T[2,1];
//   world.y_label.cylinders[2].R.T[2,2] = world.y_label.R.T[2,2];
//   world.y_label.cylinders[2].R.T[2,3] = world.y_label.R.T[2,3];
//   world.y_label.cylinders[2].R.T[3,1] = world.y_label.R.T[3,1];
//   world.y_label.cylinders[2].R.T[3,2] = world.y_label.R.T[3,2];
//   world.y_label.cylinders[2].R.T[3,3] = world.y_label.R.T[3,3];
//   world.y_label.cylinders[2].R.w[1] = world.y_label.R.w[1];
//   world.y_label.cylinders[2].R.w[2] = world.y_label.R.w[2];
//   world.y_label.cylinders[2].R.w[3] = world.y_label.R.w[3];
//   world.y_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(world.y_label.cylinders[2].shapeType);
//   world.y_label.cylinders[2].rxvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].rxvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_x[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_x[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_x[3];
//   world.y_label.cylinders[2].ryvisobj[1] = world.y_label.cylinders[2].R.T[1,1] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,1] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,1] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[2] = world.y_label.cylinders[2].R.T[1,2] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,2] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,2] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].ryvisobj[3] = world.y_label.cylinders[2].R.T[1,3] * world.y_label.cylinders[2].e_y[1] + world.y_label.cylinders[2].R.T[2,3] * world.y_label.cylinders[2].e_y[2] + world.y_label.cylinders[2].R.T[3,3] * world.y_label.cylinders[2].e_y[3];
//   world.y_label.cylinders[2].rvisobj = world.y_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.y_label.cylinders[2].R.T[1,1],world.y_label.cylinders[2].R.T[1,2],world.y_label.cylinders[2].R.T[1,3]},{world.y_label.cylinders[2].R.T[2,1],world.y_label.cylinders[2].R.T[2,2],world.y_label.cylinders[2].R.T[2,3]},{world.y_label.cylinders[2].R.T[3,1],world.y_label.cylinders[2].R.T[3,2],world.y_label.cylinders[2].R.T[3,3]}},{world.y_label.cylinders[2].r_shape[1],world.y_label.cylinders[2].r_shape[2],world.y_label.cylinders[2].r_shape[3]});
//   world.y_label.cylinders[2].size[1] = world.y_label.cylinders[2].length;
//   world.y_label.cylinders[2].size[2] = world.y_label.cylinders[2].width;
//   world.y_label.cylinders[2].size[3] = world.y_label.cylinders[2].height;
//   world.y_label.cylinders[2].Material = PackMaterial(world.y_label.cylinders[2].color[1] / 255.0,world.y_label.cylinders[2].color[2] / 255.0,world.y_label.cylinders[2].color[3] / 255.0,world.y_label.cylinders[2].specularCoefficient);
//   world.y_label.cylinders[2].Extra = world.y_label.cylinders[2].extra;
//   world.z_label.cylinders[1].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[1].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[1].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[1].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[1].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[1].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[1].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[1].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[1].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[1].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[1].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[1].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[1].Form = 9.87e+25 + 1e+20 * PackShape(world.z_label.cylinders[1].shapeType);
//   world.z_label.cylinders[1].rxvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].rxvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_x[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_x[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_x[3];
//   world.z_label.cylinders[1].ryvisobj[1] = world.z_label.cylinders[1].R.T[1,1] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,1] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,1] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[2] = world.z_label.cylinders[1].R.T[1,2] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,2] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,2] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].ryvisobj[3] = world.z_label.cylinders[1].R.T[1,3] * world.z_label.cylinders[1].e_y[1] + world.z_label.cylinders[1].R.T[2,3] * world.z_label.cylinders[1].e_y[2] + world.z_label.cylinders[1].R.T[3,3] * world.z_label.cylinders[1].e_y[3];
//   world.z_label.cylinders[1].rvisobj = world.z_label.cylinders[1].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[1].R.T[1,1],world.z_label.cylinders[1].R.T[1,2],world.z_label.cylinders[1].R.T[1,3]},{world.z_label.cylinders[1].R.T[2,1],world.z_label.cylinders[1].R.T[2,2],world.z_label.cylinders[1].R.T[2,3]},{world.z_label.cylinders[1].R.T[3,1],world.z_label.cylinders[1].R.T[3,2],world.z_label.cylinders[1].R.T[3,3]}},{world.z_label.cylinders[1].r_shape[1],world.z_label.cylinders[1].r_shape[2],world.z_label.cylinders[1].r_shape[3]});
//   world.z_label.cylinders[1].size[1] = world.z_label.cylinders[1].length;
//   world.z_label.cylinders[1].size[2] = world.z_label.cylinders[1].width;
//   world.z_label.cylinders[1].size[3] = world.z_label.cylinders[1].height;
//   world.z_label.cylinders[1].Material = PackMaterial(world.z_label.cylinders[1].color[1] / 255.0,world.z_label.cylinders[1].color[2] / 255.0,world.z_label.cylinders[1].color[3] / 255.0,world.z_label.cylinders[1].specularCoefficient);
//   world.z_label.cylinders[1].Extra = world.z_label.cylinders[1].extra;
//   world.z_label.cylinders[2].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[2].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[2].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[2].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[2].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[2].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[2].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[2].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[2].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[2].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[2].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[2].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[2].Form = 9.87e+25 + 1e+20 * PackShape(world.z_label.cylinders[2].shapeType);
//   world.z_label.cylinders[2].rxvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].rxvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_x[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_x[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_x[3];
//   world.z_label.cylinders[2].ryvisobj[1] = world.z_label.cylinders[2].R.T[1,1] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,1] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,1] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[2] = world.z_label.cylinders[2].R.T[1,2] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,2] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,2] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].ryvisobj[3] = world.z_label.cylinders[2].R.T[1,3] * world.z_label.cylinders[2].e_y[1] + world.z_label.cylinders[2].R.T[2,3] * world.z_label.cylinders[2].e_y[2] + world.z_label.cylinders[2].R.T[3,3] * world.z_label.cylinders[2].e_y[3];
//   world.z_label.cylinders[2].rvisobj = world.z_label.cylinders[2].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[2].R.T[1,1],world.z_label.cylinders[2].R.T[1,2],world.z_label.cylinders[2].R.T[1,3]},{world.z_label.cylinders[2].R.T[2,1],world.z_label.cylinders[2].R.T[2,2],world.z_label.cylinders[2].R.T[2,3]},{world.z_label.cylinders[2].R.T[3,1],world.z_label.cylinders[2].R.T[3,2],world.z_label.cylinders[2].R.T[3,3]}},{world.z_label.cylinders[2].r_shape[1],world.z_label.cylinders[2].r_shape[2],world.z_label.cylinders[2].r_shape[3]});
//   world.z_label.cylinders[2].size[1] = world.z_label.cylinders[2].length;
//   world.z_label.cylinders[2].size[2] = world.z_label.cylinders[2].width;
//   world.z_label.cylinders[2].size[3] = world.z_label.cylinders[2].height;
//   world.z_label.cylinders[2].Material = PackMaterial(world.z_label.cylinders[2].color[1] / 255.0,world.z_label.cylinders[2].color[2] / 255.0,world.z_label.cylinders[2].color[3] / 255.0,world.z_label.cylinders[2].specularCoefficient);
//   world.z_label.cylinders[2].Extra = world.z_label.cylinders[2].extra;
//   world.z_label.cylinders[3].R.T[1,1] = world.z_label.R.T[1,1];
//   world.z_label.cylinders[3].R.T[1,2] = world.z_label.R.T[1,2];
//   world.z_label.cylinders[3].R.T[1,3] = world.z_label.R.T[1,3];
//   world.z_label.cylinders[3].R.T[2,1] = world.z_label.R.T[2,1];
//   world.z_label.cylinders[3].R.T[2,2] = world.z_label.R.T[2,2];
//   world.z_label.cylinders[3].R.T[2,3] = world.z_label.R.T[2,3];
//   world.z_label.cylinders[3].R.T[3,1] = world.z_label.R.T[3,1];
//   world.z_label.cylinders[3].R.T[3,2] = world.z_label.R.T[3,2];
//   world.z_label.cylinders[3].R.T[3,3] = world.z_label.R.T[3,3];
//   world.z_label.cylinders[3].R.w[1] = world.z_label.R.w[1];
//   world.z_label.cylinders[3].R.w[2] = world.z_label.R.w[2];
//   world.z_label.cylinders[3].R.w[3] = world.z_label.R.w[3];
//   world.z_label.cylinders[3].Form = 9.87e+25 + 1e+20 * PackShape(world.z_label.cylinders[3].shapeType);
//   world.z_label.cylinders[3].rxvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].rxvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_x[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_x[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_x[3];
//   world.z_label.cylinders[3].ryvisobj[1] = world.z_label.cylinders[3].R.T[1,1] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,1] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,1] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[2] = world.z_label.cylinders[3].R.T[1,2] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,2] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,2] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].ryvisobj[3] = world.z_label.cylinders[3].R.T[1,3] * world.z_label.cylinders[3].e_y[1] + world.z_label.cylinders[3].R.T[2,3] * world.z_label.cylinders[3].e_y[2] + world.z_label.cylinders[3].R.T[3,3] * world.z_label.cylinders[3].e_y[3];
//   world.z_label.cylinders[3].rvisobj = world.z_label.cylinders[3].r + Modelica.Mechanics.MultiBody.Frames.TransformationMatrices.resolve1({{world.z_label.cylinders[3].R.T[1,1],world.z_label.cylinders[3].R.T[1,2],world.z_label.cylinders[3].R.T[1,3]},{world.z_label.cylinders[3].R.T[2,1],world.z_label.cylinders[3].R.T[2,2],world.z_label.cylinders[3].R.T[2,3]},{world.z_label.cylinders[3].R.T[3,1],world.z_label.cylinders[3].R.T[3,2],world.z_label.cylinders[3].R.T[3,3]}},{world.z_label.cylinders[3].r_shape[1],world.z_label.cylinders[3].r_shape[2],world.z_label.cylinders[3].r_shape[3]});
//   world.z_label.cylinders[3].size[1] = world.z_label.cylinders[3].length;
//   world.z_label.cylinders[3].size[2] = world.z_label.cylinders[3].width;
//   world.z_label.cylinders[3].size[3] = world.z_label.cylinders[3].height;
//   world.z_label.cylinders[3].Material = PackMaterial(world.z_label.cylinders[3].color[1] / 255.0,world.z_label.cylinders[3].color[2] / 255.0,world.z_label.cylinders[3].color[3] / 255.0,world.z_label.cylinders[3].specularCoefficient);
//   world.z_label.cylinders[3].Extra = world.z_label.cylinders[3].extra;
//   assert(Modelica.Math.Vectors.length({world.n[1],world.n[2],world.n[3]}) > 1e-10,\"Parameter n of World object is wrong (lenght(n) > 0 required)\");
//   world.frame_b.r_0[1] = 0.0;
//   world.frame_b.r_0[2] = 0.0;
//   world.frame_b.r_0[3] = 0.0;
//   world.frame_b.R.w[3] = 0.0;
//   world.frame_b.R.w[2] = 0.0;
//   world.frame_b.R.w[1] = 0.0;
//   world.frame_b.R.T[3,3] = 1.0;
//   world.frame_b.R.T[3,2] = 0.0;
//   world.frame_b.R.T[3,1] = 0.0;
//   world.frame_b.R.T[2,3] = 0.0;
//   world.frame_b.R.T[2,2] = 1.0;
//   world.frame_b.R.T[2,1] = 0.0;
//   world.frame_b.R.T[1,3] = 0.0;
//   world.frame_b.R.T[1,2] = 0.0;
//   world.frame_b.R.T[1,1] = 1.0;
//   r_0[1] = frame_a.r_0[1];
//   r_0[2] = frame_a.r_0[2];
//   r_0[3] = frame_a.r_0[3];
//   v_0[1] = der(r_0[1]);
//   v_0[2] = der(r_0[2]);
//   v_0[3] = der(r_0[3]);
//   a_0[1] = der(v_0[1]);
//   a_0[2] = der(v_0[2]);
//   a_0[3] = der(v_0[3]);
//   assert(innerDiameter < diameter,\"parameter innerDiameter is greater as parameter diameter.\");
//   frameTranslation.frame_a.t[1] + ((-frame_a.t[1]) + body.frame_a.t[1]) = 0.0;
//   frameTranslation.frame_a.t[2] + ((-frame_a.t[2]) + body.frame_a.t[2]) = 0.0;
//   frameTranslation.frame_a.t[3] + ((-frame_a.t[3]) + body.frame_a.t[3]) = 0.0;
//   frameTranslation.frame_a.f[1] + ((-frame_a.f[1]) + body.frame_a.f[1]) = 0.0;
//   frameTranslation.frame_a.f[2] + ((-frame_a.f[2]) + body.frame_a.f[2]) = 0.0;
//   frameTranslation.frame_a.f[3] + ((-frame_a.f[3]) + body.frame_a.f[3]) = 0.0;
//   body.frame_a.R.w[1] = frameTranslation.frame_a.R.w[1];
//   body.frame_a.R.w[1] = frame_a.R.w[1];
//   body.frame_a.R.w[2] = frameTranslation.frame_a.R.w[2];
//   body.frame_a.R.w[2] = frame_a.R.w[2];
//   body.frame_a.R.w[3] = frameTranslation.frame_a.R.w[3];
//   body.frame_a.R.w[3] = frame_a.R.w[3];
//   body.frame_a.R.T[1,1] = frameTranslation.frame_a.R.T[1,1];
//   body.frame_a.R.T[1,1] = frame_a.R.T[1,1];
//   body.frame_a.R.T[1,2] = frameTranslation.frame_a.R.T[1,2];
//   body.frame_a.R.T[1,2] = frame_a.R.T[1,2];
//   body.frame_a.R.T[1,3] = frameTranslation.frame_a.R.T[1,3];
//   body.frame_a.R.T[1,3] = frame_a.R.T[1,3];
//   body.frame_a.R.T[2,1] = frameTranslation.frame_a.R.T[2,1];
//   body.frame_a.R.T[2,1] = frame_a.R.T[2,1];
//   body.frame_a.R.T[2,2] = frameTranslation.frame_a.R.T[2,2];
//   body.frame_a.R.T[2,2] = frame_a.R.T[2,2];
//   body.frame_a.R.T[2,3] = frameTranslation.frame_a.R.T[2,3];
//   body.frame_a.R.T[2,3] = frame_a.R.T[2,3];
//   body.frame_a.R.T[3,1] = frameTranslation.frame_a.R.T[3,1];
//   body.frame_a.R.T[3,1] = frame_a.R.T[3,1];
//   body.frame_a.R.T[3,2] = frameTranslation.frame_a.R.T[3,2];
//   body.frame_a.R.T[3,2] = frame_a.R.T[3,2];
//   body.frame_a.R.T[3,3] = frameTranslation.frame_a.R.T[3,3];
//   body.frame_a.R.T[3,3] = frame_a.R.T[3,3];
//   body.frame_a.r_0[1] = frameTranslation.frame_a.r_0[1];
//   body.frame_a.r_0[1] = frame_a.r_0[1];
//   body.frame_a.r_0[2] = frameTranslation.frame_a.r_0[2];
//   body.frame_a.r_0[2] = frame_a.r_0[2];
//   body.frame_a.r_0[3] = frameTranslation.frame_a.r_0[3];
//   body.frame_a.r_0[3] = frame_a.r_0[3];
//   frameTranslation.frame_b.t[1] + (-frame_b.t[1]) = 0.0;
//   frameTranslation.frame_b.t[2] + (-frame_b.t[2]) = 0.0;
//   frameTranslation.frame_b.t[3] + (-frame_b.t[3]) = 0.0;
//   frameTranslation.frame_b.f[1] + (-frame_b.f[1]) = 0.0;
//   frameTranslation.frame_b.f[2] + (-frame_b.f[2]) = 0.0;
//   frameTranslation.frame_b.f[3] + (-frame_b.f[3]) = 0.0;
//   frameTranslation.frame_b.R.w[1] = frame_b.R.w[1];
//   frameTranslation.frame_b.R.w[2] = frame_b.R.w[2];
//   frameTranslation.frame_b.R.w[3] = frame_b.R.w[3];
//   frameTranslation.frame_b.R.T[1,1] = frame_b.R.T[1,1];
//   frameTranslation.frame_b.R.T[1,2] = frame_b.R.T[1,2];
//   frameTranslation.frame_b.R.T[1,3] = frame_b.R.T[1,3];
//   frameTranslation.frame_b.R.T[2,1] = frame_b.R.T[2,1];
//   frameTranslation.frame_b.R.T[2,2] = frame_b.R.T[2,2];
//   frameTranslation.frame_b.R.T[2,3] = frame_b.R.T[2,3];
//   frameTranslation.frame_b.R.T[3,1] = frame_b.R.T[3,1];
//   frameTranslation.frame_b.R.T[3,2] = frame_b.R.T[3,2];
//   frameTranslation.frame_b.R.T[3,3] = frame_b.R.T[3,3];
//   frameTranslation.frame_b.r_0[1] = frame_b.r_0[1];
//   frameTranslation.frame_b.r_0[2] = frame_b.r_0[2];
//   frameTranslation.frame_b.r_0[3] = frame_b.r_0[3];
//   frame_b.t[3] = 0.0;
//   frame_b.t[2] = 0.0;
//   frame_b.t[1] = 0.0;
//   frame_b.f[3] = 0.0;
//   frame_b.f[2] = 0.0;
//   frame_b.f[1] = 0.0;
//   frame_a.t[3] = 0.0;
//   frame_a.t[2] = 0.0;
//   frame_a.t[1] = 0.0;
//   frame_a.f[3] = 0.0;
//   frame_a.f[2] = 0.0;
//   frame_a.f[1] = 0.0;
// end Modelica.Mechanics.MultiBody.Parts.BodyCylinder;
// "
// "Warning: No corresponding 'inner' declaration found for component world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.BodyCylinder.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:985:11-985:257:writable] Warning: Variable r_0: Non-array modification 'if enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:986:11-986:260:writable] Warning: Variable v_0: Non-array modification 'if enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:808:11-808:257:writable] Warning: Variable body.r_0: Non-array modification 'if body.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:809:11-809:260:writable] Warning: Variable body.v_0: Non-array modification 'if body.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component body.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.Body.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:829:11-829:287:writable] Warning: Variable body.w_a: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.always else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component body.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.Body.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:835:11-835:294:writable] Warning: Variable body.Q: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.prefer else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:837:11-837:229:writable] Warning: Variable body.phi: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:838:11-838:174:writable] Warning: Variable body.phi_d: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component frameTranslation.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.FixedTranslation.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// Warning: No corresponding 'inner' declaration found for component world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.BodyCylinder.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// "
// "Check of Modelica.Mechanics.MultiBody.Parts.BodyCylinder completed successfully.
// 
// Warning: No corresponding 'inner' declaration found for component world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.BodyCylinder.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:985:11-985:257:writable] Warning: Variable r_0: Non-array modification 'if enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:986:11-986:260:writable] Warning: Variable v_0: Non-array modification 'if enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:808:11-808:257:writable] Warning: Variable body.r_0: Non-array modification 'if body.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:809:11-809:260:writable] Warning: Variable body.v_0: Non-array modification 'if body.enforceStates then StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component body.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.Body.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:829:11-829:287:writable] Warning: Variable body.w_a: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.always else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component body.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.Body.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// [BodyCylinderTotal.mo:835:11-835:294:writable] Warning: Variable body.Q: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.prefer else StateSelect.never else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:837:11-837:229:writable] Warning: Variable body.phi: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// [BodyCylinderTotal.mo:838:11-838:174:writable] Warning: Variable body.phi_d: Non-array modification 'if body.enforceStates then if body.useQuaternions then StateSelect.never else StateSelect.always else StateSelect.avoid' for array component, possibly due to missing 'each'.
// 
// Warning: No corresponding 'inner' declaration found for component frameTranslation.world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.FixedTranslation.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// Warning: No corresponding 'inner' declaration found for component world declared as 'outer '.
//   The existing 'inner' components are: 
//     There are no 'inner' components defined in the model in the any of the parent scopes of 'outer' component's scope: Modelica.Mechanics.MultiBody.Parts.BodyCylinder.
//   Check if you have not misspelled the 'outer' component name.
//   Please declare an 'inner' component with the same name in the top scope.
//   Continuing flattening by only considering the 'outer' component declaration.
// 
// Class Modelica.Mechanics.MultiBody.Parts.BodyCylinder has 3402 equation(s) and 3420 variable(s).
// 1970 of these are trivial equation(s).
// "
// ""
// endResult
